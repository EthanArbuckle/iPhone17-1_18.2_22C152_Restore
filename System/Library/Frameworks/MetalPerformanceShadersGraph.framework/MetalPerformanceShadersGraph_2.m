uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t);
  uint64_t vars8;

  v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::reshapeConstantToGOCScale(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = a2;
  uint64_t v30 = 0;
  v33[0] = (uint64_t **)&v30;
  v35[0] = a2;
  result = (char *)mlir::Value::getDefiningOp((mlir::Value *)v35);
  if (result)
  {
    if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v33, (uint64_t)result))
    {
      NumElements = (uint64_t **)mlir::ElementsAttr::getNumElements(v30, v31);
      v5 = (mlir::Float16Type **)(a1 + 8);
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v32);
      v35[0] = 1;
      v35[1] = NumElements;
      int64x2_t v26 = vdupq_n_s64(1uLL);
      int64x2_t v36 = v26;
      uint64_t F16Type = mlir::Builder::getF16Type(v5, v7);
      uint64_t v29 = mlir::MemRefType::get(v35, (mlir::AffineMap *)4, F16Type, 0, 0, 0);
      uint64_t v9 = v30;
      uint64_t v10 = v31;
      v33[0] = (uint64_t **)1;
      v33[1] = NumElements;
      int64x2_t v34 = v26;
      v27[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v30);
      v27[1] = v11;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v27);
      v13 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v33, 4, OperandRange, 0);
      uint64_t v14 = (uint64_t)v13;
      if (!v13) {
        goto LABEL_12;
      }
      uint64_t v15 = *v13;
      unint64_t v16 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v17 = *(unsigned int *)(v15 + 16);
      if (!v17) {
        goto LABEL_12;
      }
      v18 = *(void **)(v15 + 8);
      v19 = &v18[2 * v17];
      do
      {
        unint64_t v20 = v17 >> 1;
        v21 = &v18[2 * (v17 >> 1)];
        unint64_t v23 = *v21;
        v22 = v21 + 2;
        v17 += ~(v17 >> 1);
        if (v23 < v16) {
          v18 = v22;
        }
        else {
          unint64_t v17 = v20;
        }
      }
      while (v17);
      if (v18 != v19 && *v18 == v16) {
        uint64_t v24 = v18[1];
      }
      else {
LABEL_12:
      }
        uint64_t v24 = 0;
      v28[0] = mlir::reshapeElementsAttr(v9, v10, v14, v24);
      v28[1] = v25;
      return (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v5, Loc, &v29, v28)- 16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::ElementwiseMult &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::ElementwiseMult type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::~ANEC_ConvInputGOC(mlir::anec::_anonymous_namespace_::ANEC_ConvInputGOC *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_ConvInputGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v72[4] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  v57 = 0;
  v70 = v72;
  v72[0] = a2;
  uint64_t v71 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v55 = v6;
  v56 = v6;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_97;
    }
    unint64_t v17 = v55;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  ElementTypeOrSelf = v9;
  if (v9)
  {
    v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_96;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_96;
    }
    uint64_t ODSOperands = v5;
    uint64_t v11 = v5;
    if (!v41) {
      goto LABEL_96;
    }
  }
  int v12 = v71;
  if (v71 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v71 + 1, 8);
    int v12 = v71;
  }
  v70[v12] = v8;
  LODWORD(v71) = v71 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, &ElementTypeOrSelf);
        goto LABEL_72;
      }
      goto LABEL_96;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v58 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v59 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v62 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v60 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v63 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v64 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v65 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = *(void *)(v11 + 24);
          ElementTypeOrSelf = 0;
          uint64_t v67 = 0;
          p_ElementTypeOrSelf = &ElementTypeOrSelf;
          uint64_t v69 = v49;
          uint64_t v50 = mlir::Value::getDefiningOp((mlir::Value *)&v69);
          if (v50
            && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&p_ElementTypeOrSelf, v50)
            && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ElementTypeOrSelf) & 1) != 0)
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_91:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v54 = *(void *)(v70[1] + 24);
                    ElementTypeOrSelf = *(void **)(*v70 + 24);
                    uint64_t v67 = v54;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
                v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
                while (1)
                {
                  v52 = (void *)*v52;
                  if (!v52) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_91;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_96:
  uint64_t v16 = 0;
LABEL_97:
  if (v70 != v72) {
    free(v70);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::reduceSplatConst(uint64_t a1, char *a2)
{
  v2 = a2;
  v53[5] = *MEMORY[0x1E4F143B8];
  uint64_t v50 = a2;
  v4 = (uint64_t *)(*((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    int v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v49[0] = v4;
  v49[1] = v14;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v16) != 1)
  {
    v48[0] = 0;
    v48[1] = 0;
    v47[0] = (uint64_t **)v48;
    __b = v2;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__b);
    if (DefiningOp) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v47, DefiningOp);
    }
    mlir::ElementsAttr::value_begin<mlir::TypedAttr,void>((mlir::CallOpInterface *)v48, (uint64_t)&__b);
    if (BYTE1(__b)) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v53[0];
    }
    if ((_BYTE)__b) {
      uint64_t v19 = *(void *)(v52 + 8 * v18);
    }
    else {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v52 + 24))();
    }
    char v20 = (uint64_t **)((uint64_t (*)(uint64_t))v53[1])(v19);
    uint64_t v22 = v21;
    if (!(_BYTE)__b)
    {
      uint64_t v23 = v52;
      uint64_t v52 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    v47[0] = v20;
    v47[1] = v22;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
    unint64_t v25 = v24;
    __b = v53;
    HIDWORD(v52) = 5;
    if (v24 < 6)
    {
      if (v24) {
        memset_pattern16(v53, &unk_1810FE350, 8 * v24);
      }
      char v26 = v53;
    }
    else
    {
      LODWORD(v52) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v53, v24, 8);
      char v26 = __b;
      memset_pattern16(__b, &unk_1810FE350, 8 * v25);
    }
    LODWORD(v52) = v25;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v49);
    uint64_t v46 = mlir::MemRefType::get(v26, (mlir::AffineMap *)v25, OperandRange, 0, 0, 0);
    v28 = __b;
    uint64_t v29 = v52;
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v47);
    uint64_t v31 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v28, v29, canMapOperands, 0);
    char v32 = (mlir::OpBuilder *)(a1 + 8);
    uint64_t v33 = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 24);
    if (!v31) {
      goto LABEL_37;
    }
    uint64_t v34 = *v31;
    unint64_t v35 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v36 = *(unsigned int *)(v34 + 16);
    if (!v36) {
      goto LABEL_37;
    }
    uint64_t v37 = *(void **)(v34 + 8);
    uint64_t v38 = &v37[2 * v36];
    do
    {
      unint64_t v39 = v36 >> 1;
      uint64_t v40 = &v37[2 * (v36 >> 1)];
      unint64_t v42 = *v40;
      char v41 = v40 + 2;
      v36 += ~(v36 >> 1);
      if (v42 < v35) {
        uint64_t v37 = v41;
      }
      else {
        unint64_t v36 = v39;
      }
    }
    while (v36);
    if (v37 != v38 && *v37 == v35) {
      uint64_t v43 = v37[1];
    }
    else {
LABEL_37:
    }
      uint64_t v43 = 0;
    v45 = (uint64_t *)mlir::DenseElementsAttr::get((uint64_t)v31, v43, (uint64_t *)v47, 1uLL);
    v2 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>(v32, v33, &v46, &v45)- 16;
    if (__b != v53) {
      free(__b);
    }
  }
  return v2;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_2(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::GOC &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, x_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_scale' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

uint64_t mlir::ElementsAttr::value_begin<mlir::TypedAttr,void>@<X0>(mlir::CallOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = mlir::ElementsAttr::getValues<mlir::TypedAttr,void>(a1, (uint64_t)v5);
  int v4 = v5[0];
  *(unsigned char *)a2 = v5[0];
  *(unsigned char *)(a2 + 1) = v5[1];
  if (v4) {
    *(void *)(a2 + 8) = v6;
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  *(_OWORD *)(a2 + 16) = v7;
  if (!v8)
  {
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v5[0])
  {
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::getValues<mlir::TypedAttr,void>@<X0>(mlir::CallOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands(a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::getValues<mlir::Attribute>((uint64_t *)a1, (uint64_t)v11);
  uint64_t result = llvm::map_range<mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>,mlir::TypedAttr (*)(mlir::Attribute)>(v11, (uint64_t)_ZZNK4mlir12ElementsAttr9getValuesINS_9TypedAttrEvEENS_6detail17ElementsAttrRangeIN4llvm15mapped_iteratorINS3_20ElementsAttrIteratorINS_9AttributeEEEPFT_S8_EDTclclsr3stdE7declvalISC_EEdeclL_ZNSt3__17declvalB8nn180100IS9_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEEvENUlS8_E_8__invokeES8_, (uint64_t)v15);
  int v8 = v15[0];
  *(unsigned char *)a2 = v15[0];
  *(unsigned char *)(a2 + 1) = v15[1];
  if (v8) {
    *(void *)(a2 + 8) = v16;
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  *(_OWORD *)(a2 + 16) = v17;
  int v9 = v18;
  *(unsigned char *)(a2 + 32) = v18;
  *(unsigned char *)(a2 + 33) = v19;
  if (v9)
  {
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v20;
    *(void *)(a2 + 56) = *(void *)&v20[16];
    *(void *)(a2 + 64) = ArgOperands;
    *(void *)(a2 + 72) = v6;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v20 + 16))(*(void *)v20);
    int v10 = v18;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&v20[8];
    *(void *)(a2 + 64) = ArgOperands;
    *(void *)(a2 + 72) = v6;
    if (!v10)
    {
      uint64_t result = *(void *)v20;
      *(void *)char v20 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  if (!v15[0])
  {
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v13)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v11[0])
  {
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::map_range<mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>,mlir::TypedAttr (*)(mlir::Attribute)>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v19 = *a1;
  char v6 = a1[1];
  char v20 = v6;
  if (v19)
  {
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v21 = *((void *)a1 + 1);
    uint64_t v22 = v7;
    char v8 = 1;
    uint64_t v9 = v21;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 1) + 16))(&v21);
    char v6 = v20;
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v22 = v7;
    char v8 = 0;
    uint64_t v9 = v21;
    uint64_t v21 = 0;
  }
  char v10 = a1[25];
  char v16 = v10;
  if (a1[24])
  {
    uint64_t v11 = *((void *)a1 + 5);
    uint64_t v17 = *((void *)a1 + 4);
    uint64_t v18 = v11;
    int v12 = 0;
    uint64_t result = v17;
    char v14 = 1;
    uint64_t v15 = v17;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 4) + 16))(&v17);
    char v10 = v16;
    uint64_t v11 = *((void *)a1 + 5);
    uint64_t v18 = v11;
    char v14 = 0;
    uint64_t result = 0;
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    int v12 = 1;
  }
  *(unsigned char *)a3 = v8;
  *(unsigned char *)(a3 + 1) = v6;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 33) = v10;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = v11;
  *(void *)(a3 + 56) = a2;
  if (v12)
  {
    uint64_t v17 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v19)
  {
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::getValues<mlir::Attribute>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::value_begin<mlir::Attribute>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  uint64_t NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  __int16 v9 = 257;
  uint64_t v10 = 0;
  uint64_t v11 = NumElements;
  uint64_t result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v12[0])
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::value_begin<mlir::Attribute>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = mlir::TypeID::get<mlir::Attribute>();
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11) {
    mlir::ElementsAttr::value_begin<mlir::Attribute>((llvm *)v9, (uint64_t *)a1);
  }
  char v6 = v9[1];
  if (v9[0])
  {
    uint64_t v7 = v10;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = v10;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5)
{
  unsigned __int8 v22 = *a4;
  char v23 = a4[1];
  if (v22) {
    uint64_t v24 = *((void *)a4 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a4 + 1) + 16))(&v24);
  }
  uint64_t v25 = *((void *)a4 + 2);
  char v19 = *a5;
  char v20 = a5[1];
  if (*a5) {
    v21[0] = *((void *)a5 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a5 + 1) + 16))(v21);
  }
  uint64_t v10 = *((void *)a5 + 2);
  v21[1] = v10;
  int v11 = v22;
  uint64_t v12 = v24;
  if (!v22) {
    uint64_t v24 = 0;
  }
  char v13 = v23;
  uint64_t v14 = v21[0];
  if (!v19) {
    v21[0] = 0;
  }
  uint64_t v15 = v25;
  *(unsigned char *)a1 = v22;
  *(unsigned char *)(a1 + 1) = v13;
  if (v11) {
    *(void *)(a1 + 8) = v12;
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = v19;
  *(unsigned char *)(a1 + 25) = v20;
  if (v19)
  {
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    if (v11) {
      goto LABEL_20;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v11) {
      goto LABEL_20;
    }
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_20:
  if (!v19)
  {
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (!v22)
  {
    uint64_t v17 = v24;
    uint64_t v24 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return a1;
}

llvm::raw_ostream *mlir::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  mlir::Attribute::print((mlir::Attribute *)&v4, a1, 0);
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = a2;
  mlir::Type::print((llvm::raw_ostream *)&v4, a1);
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = a2;
  mlir::Value::print((mlir::Value *)&v4, a1);
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, char *__s)
{
  if (!__s) {
    return a1;
  }
  size_t v4 = strlen(__s);
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v4 <= *((void *)a1 + 3) - (void)v5)
  {
    if (v4)
    {
      memcpy(v5, __s, v4);
      *((void *)a1 + 4) += v4;
    }
    return a1;
  }

  return llvm::raw_ostream::write(a1, __s, v4);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const void *a2, size_t a3)
{
  uint64_t v6 = *((void *)this + 3);
  uint64_t v5 = (void *)*((void *)this + 4);
  if (a3 <= v6 - (uint64_t)v5)
  {
    if (a3)
    {
      memcpy(v5, a2, a3);
      *((void *)this + 4) += a3;
    }
    return this;
  }
  else
  {
    return llvm::raw_ostream::write(this, (const char *)a2, a3);
  }
}

const char *llvm::getTypeName<mlir::Attribute>()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
  unint64_t v6 = 65;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::TypeID::get<mlir::Attribute>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      unint64_t v11 = 65;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 2368);
}

uint64_t *_ZZNK4mlir12ElementsAttr9getValuesINS_9TypedAttrEvEENS_6detail17ElementsAttrRangeIN4llvm15mapped_iteratorINS3_20ElementsAttrIteratorINS_9AttributeEEEPFT_S8_EDTclclsr3stdE7declvalISC_EEdeclL_ZNSt3__17declvalB8nn180100IS9_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEEvENUlS8_E_8__invokeES8_(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = mlir::TypeID::get<mlir::TypedAttr>();
    unint64_t v4 = *(unsigned int *)(v2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      do
      {
        unint64_t v6 = v4 >> 1;
        uint64_t v7 = &v5[2 * (v4 >> 1)];
        unint64_t v9 = *v7;
        unint64_t v8 = v7 + 2;
        v4 += ~(v4 >> 1);
        if (v9 < v3) {
          uint64_t v5 = v8;
        }
        else {
          unint64_t v4 = v6;
        }
      }
      while (v4);
    }
  }
  return a1;
}

uint64_t mlir::TypeID::get<mlir::TypedAttr>()
{
  unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v11 = 65;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    }
  }
  return v0[28];
}

void mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::~ANEC_DeconvFilterGOC(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v69 = v71;
  v71[0] = a2;
  uint64_t v70 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  v56 = v6;
  uint64_t v59 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 0);
  v67[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v67);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_95;
    }
    uint64_t v17 = v56;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  v67[0] = v9;
  if (v9)
  {
    uint64_t v58 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 1u);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_94;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_94;
    }
    uint64_t v11 = v5;
    uint64_t ODSOperands = v5;
    if (!v41) {
      goto LABEL_94;
    }
  }
  int v12 = v70;
  if (v70 >= HIDWORD(v70))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
    int v12 = v70;
  }
  v69[v12] = v8;
  LODWORD(v70) = v70 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, v67);
        goto LABEL_72;
      }
      goto LABEL_94;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v57 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v60 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v63 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v61 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1);
      }
      uint64_t v62 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v64 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v65 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v66 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v67))
      {
        v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v67)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
          uint64_t v50 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v49, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v50);
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_89:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    v55 = *(void **)(v69[1] + 24);
                    v67[0] = *(void **)(*v69 + 24);
                    v67[1] = v55;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v67, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v52 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
                v53 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
                while (1)
                {
                  v53 = (void *)*v53;
                  if (!v53) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v53[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_89;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_94:
  uint64_t v16 = 0;
LABEL_95:
  if (v69 != v71) {
    free(v69);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::UnitAttr &,mlir::DenseFPElementsAttr &,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"anec.deconvolution";
    v29[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  char v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::~ANEC_DeconvFilterMult(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterMult *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterMult *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v70[4] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v68 = v70;
  v70[0] = a2;
  uint64_t v69 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v55 = v6;
  uint64_t v58 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0);
  v66[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v66);
  if (!DefiningOp)
  {
    uint64_t v15 = *((void *)a3 + 2);
    if (!v15) {
      goto LABEL_94;
    }
    uint64_t v16 = v55;
    if (mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_72:
      uint64_t v15 = v17;
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  v66[0] = v9;
  if (v9)
  {
    uint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 1u);
  }
  else
  {
    uint64_t v39 = *((void *)a3 + 2);
    if (!v39) {
      goto LABEL_93;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_93;
    }
    uint64_t ODSOperands = v5;
    if (!v40) {
      goto LABEL_93;
    }
  }
  int v11 = v69;
  if (v69 >= HIDWORD(v69))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
    int v11 = v69;
  }
  v68[v11] = v8;
  LODWORD(v69) = v69 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v13))
  {
    uint64_t v14 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v14)
    {
LABEL_58:
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v36 + 64))(v36, v37, v38, v66);
        goto LABEL_72;
      }
      goto LABEL_93;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v14) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v56 = v14;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v18 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v19)) {
    uint64_t v18 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v20 = v18;
  if (v18 && (mlir::DenseIntElementsAttr::classof(v18) & 1) != 0)
  {
    uint64_t v59 = v20;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v21 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v22)) {
      uint64_t v21 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v23 = v21;
    if (v21 && (mlir::DenseIntElementsAttr::classof(v21) & 1) != 0)
    {
      uint64_t v63 = v23;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v24 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v25))
      {
        uint64_t v24 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v26 = v24;
      if (!v24 || (mlir::anec::PaddingModeAttr::classof(v24) & 1) == 0) {
        uint64_t v26 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v62 = v26;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v28))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v30 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v31))
      {
        uint64_t v30 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v30 || *(_UNKNOWN **)(*(void *)v30 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v30 = 0;
      }
      uint64_t v60 = v30;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v32 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v33))
      {
        uint64_t v32 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v34 = v32;
      if (v32)
      {
        if (mlir::DenseFPElementsAttr::classof(v32)) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v64 = v35;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v41 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v42))
      {
        uint64_t v41 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v43 = v41;
      if (v41 && !mlir::DenseIntElementsAttr::classof(v41)) {
        uint64_t v43 = 0;
      }
      uint64_t v65 = v43;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v66))
      {
        v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v66)
          && (uint64_t v46 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v47 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v48 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
          uint64_t v49 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v49);
          {
            if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                           + 8) & 0xFFFFFFFFFFFFFFF8))
                              + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
            {
LABEL_88:
              if (v35)
              {
              }
              else
              {
                if (!v43)
                {
                  uint64_t v54 = *(void **)(v68[1] + 24);
                  v66[0] = *(void **)(*v68 + 24);
                  v66[1] = v54;
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v66, (mlir::MLIRContext *)2, 0);
                }
              }
            }
            else
            {
              uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
              uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
              while (1)
              {
                uint64_t v52 = (void *)*v52;
                if (!v52) {
                  break;
                }
                if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                  goto LABEL_88;
                }
              }
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v36 = *((void *)a3 + 2);
    if (v36 && mlir::RewriterBase::Listener::classof(v36))
    {
      uint64_t v37 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_93:
  uint64_t v15 = 0;
LABEL_94:
  if (v68 != v70) {
    free(v68);
  }
  return v15;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::~ANEC_DeconvInputGOC(mlir::anec::_anonymous_namespace_::ANEC_DeconvInputGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvInputGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v72[4] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v70 = v72;
  v72[0] = a2;
  uint64_t v71 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v55 = v6;
  uint64_t v56 = v6;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_97;
    }
    uint64_t v17 = v55;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  ElementTypeOrSelf = v9;
  if (v9)
  {
    uint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_96;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_96;
    }
    uint64_t ODSOperands = v5;
    uint64_t v11 = v5;
    if (!v41) {
      goto LABEL_96;
    }
  }
  int v12 = v71;
  if (v71 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v71 + 1, 8);
    int v12 = v71;
  }
  v70[v12] = v8;
  LODWORD(v71) = v71 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, &ElementTypeOrSelf);
        goto LABEL_72;
      }
      goto LABEL_96;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v58 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v59 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v62 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v60 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v63 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v64 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v65 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = *(void *)(v11 + 24);
          ElementTypeOrSelf = 0;
          uint64_t v67 = 0;
          p_ElementTypeOrSelf = &ElementTypeOrSelf;
          uint64_t v69 = v49;
          uint64_t v50 = mlir::Value::getDefiningOp((mlir::Value *)&v69);
          if (v50
            && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&p_ElementTypeOrSelf, v50)
            && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ElementTypeOrSelf) & 1) != 0)
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_91:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v54 = *(void *)(v70[1] + 24);
                    ElementTypeOrSelf = *(void **)(*v70 + 24);
                    uint64_t v67 = v54;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
                uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
                while (1)
                {
                  uint64_t v52 = (void *)*v52;
                  if (!v52) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_91;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_96:
  uint64_t v16 = 0;
LABEL_97:
  if (v70 != v72) {
    free(v70);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, x_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_scale' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_GOCDiv::~ANEC_GOCDiv(mlir::anec::_anonymous_namespace_::ANEC_GOCDiv *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCDiv *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v85[4] = *MEMORY[0x1E4F143B8];
  uint64_t v77 = 0;
  uint64_t v75 = 0;
  v83 = v85;
  v85[0] = a2;
  uint64_t v84 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v74 = v5;
  v76 = v5;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v74, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v15 = v74;
    if (!mlir::RewriterBase::Listener::classof(v11)) {
      goto LABEL_81;
    }
    uint64_t v16 = *((void *)v15 + 3);
LABEL_16:
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64))(v11, v16, v17, &ElementTypeOrSelf);
    goto LABEL_17;
  }
  uint64_t v7 = DefiningOp;
  uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v10 = (void *)DefiningOp;
  }
  else {
    uint64_t v10 = 0;
  }
  ElementTypeOrSelf = v10;
  if (!v9)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v78);
LABEL_17:
      uint64_t v11 = v14;
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  uint64_t v75 = DefiningOp;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  int v18 = v84;
  if (v84 >= HIDWORD(v84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
    int v18 = v84;
  }
  v83[v18] = v7;
  LODWORD(v84) = v84 + 1;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v74, 1u) + 24);
  uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v19)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v24 = v74;
    if (!mlir::RewriterBase::Listener::classof(v11)) {
      goto LABEL_81;
    }
    uint64_t v16 = *((void *)v24 + 3);
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = *(void **)(*(void *)(v19 + 48) + 16);
  BOOL v22 = v21 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id;
  if (v21 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id) {
    char v23 = (void *)v19;
  }
  else {
    char v23 = 0;
  }
  ElementTypeOrSelf = v23;
  if (!v22)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v20 + 24);
      goto LABEL_12;
    }
    goto LABEL_81;
  }
  uint64_t v77 = v19;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
  if (!*(unsigned char *)(v20 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v20, (uint64_t)"epsilon", 7), !v27)) {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(v20 + 56, "epsilon", 7uLL);
  }
  if (!InherentAttr
    || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v20 + 24);
      goto LABEL_12;
    }
    goto LABEL_81;
  }
  uint64_t v73 = ODSOperands;
  int v28 = v84;
  if (v84 >= HIDWORD(v84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
    int v28 = v84;
  }
  v83[v28] = v20;
  LODWORD(v84) = v84 + 1;
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v76, 0);
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  uint64_t v31 = (uint64_t *)(*(void *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v31) {
    goto LABEL_50;
  }
  uint64_t v32 = *v31;
  unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v34 = *(unsigned int *)(v32 + 16);
  if (!v34) {
    goto LABEL_50;
  }
  uint64_t v35 = *(void **)(v32 + 8);
  uint64_t v36 = &v35[2 * v34];
  do
  {
    unint64_t v37 = v34 >> 1;
    uint64_t v38 = &v35[2 * (v34 >> 1)];
    unint64_t v40 = *v38;
    uint64_t v39 = v38 + 2;
    v34 += ~(v34 >> 1);
    if (v40 < v33) {
      uint64_t v35 = v39;
    }
    else {
      unint64_t v34 = v37;
    }
  }
  while (v34);
  if (v35 != v36 && *v35 == v33) {
    uint64_t v41 = v35[1];
  }
  else {
LABEL_50:
  }
    uint64_t v41 = 0;
  ElementTypeOrSelf = v31;
  uint64_t v80 = v41;
  uint64_t v42 = *(void *)(v30 + 72);
  unint64_t v43 = *(void *)(*(void *)(v42 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v43)
  {
    mlir::TypeID::get<mlir::ShapedType>();
    uint64_t v42 = *(void *)(v30 + 72);
  }
  uint64_t v44 = (uint64_t *)(*(void *)(*(void *)(v42 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44) {
    goto LABEL_62;
  }
  uint64_t v45 = *v44;
  unint64_t v46 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v47 = *(unsigned int *)(v45 + 16);
  if (!v47) {
    goto LABEL_62;
  }
  uint64_t v48 = *(void **)(v45 + 8);
  uint64_t v49 = &v48[2 * v47];
  do
  {
    unint64_t v50 = v47 >> 1;
    uint64_t v51 = &v48[2 * (v47 >> 1)];
    unint64_t v53 = *v51;
    uint64_t v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46) {
      uint64_t v48 = v52;
    }
    else {
      unint64_t v47 = v50;
    }
  }
  while (v47);
  if (v48 != v49 && *v48 == v46) {
    uint64_t v54 = (void *)v48[1];
  }
  else {
LABEL_62:
  }
    uint64_t v54 = 0;
  v78[0] = v44;
  v78[1] = v54;
  if (v31 != (uint64_t *)v43
    || (ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78),
        uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v59),
        NumElements != 1)
    && ((uint64_t v66 = NumElements,
         mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf),
         unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v67),
         !v69)
     || (unint64_t v70 = IndexFromDim, mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78), v71 <= v70)
     || *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78)
                  + 8 * v70) != v66))
  {
    uint64_t v55 = *((void *)a3 + 2);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
    {
      uint64_t v56 = *((void *)a2 + 3);
LABEL_67:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v55 + 64))(v55, v56, v57, &ElementTypeOrSelf);
      goto LABEL_17;
    }
LABEL_81:
    uint64_t v11 = 0;
    goto LABEL_82;
  }
  uint64_t v61 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v75, 0);
  uint64_t v62 = mlir::detail::OpResultImpl::getNextResultAtOffset(v61, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v62 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    uint64_t v55 = *((void *)a3 + 2);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
    {
      uint64_t v56 = *((void *)a2 + 3);
      goto LABEL_67;
    }
    goto LABEL_81;
  }
  uint64_t v63 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v77, 0);
  uint64_t v64 = mlir::detail::OpResultImpl::getNextResultAtOffset(v63, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    if (mlir::matchPattern<mlir::detail::constant_op_matcher>(*(void *)(v73 + 24)))
    {
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v73 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        uint64_t v65 = *(void *)(v83[1] + 24);
        ElementTypeOrSelf = *(void **)(*v83 + 24);
        uint64_t v80 = v65;
        uint64_t v81 = *(void *)(v83[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)3, 0);
      }
    }
    else
    {
    }
  }
  else
  {
  }
LABEL_82:
  if (v83 != v85) {
    free(v83);
  }
  return v11;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::fuseGOCs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, int a8, uint64_t a9)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v114 = a3;
  uint64_t v115 = a2;
  uint64_t v113 = a9;
  uint64_t v15 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *v15;
  unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v18 = *(unsigned int *)(v16 + 16);
  if (!v18) {
    goto LABEL_10;
  }
  uint64_t v19 = *(void **)(v16 + 8);
  uint64_t v20 = &v19[2 * v18];
  do
  {
    unint64_t v21 = v18 >> 1;
    BOOL v22 = &v19[2 * (v18 >> 1)];
    unint64_t v24 = *v22;
    char v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17) {
      uint64_t v19 = v23;
    }
    else {
      unint64_t v18 = v21;
    }
  }
  while (v18);
  if (v19 != v20 && *v19 == v17) {
    uint64_t v25 = v19[1];
  }
  else {
LABEL_10:
  }
    uint64_t v25 = 0;
  v112[0] = (uint64_t)v15;
  v112[1] = v25;
  uint64_t v26 = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v114) + 24);
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  if (a4)
  {
    v102[0] = (uint64_t **)&v110;
    v116 = a4;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (DefiningOp) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, DefiningOp);
    }
  }
  if (a5)
  {
    v102[0] = (uint64_t **)&v108;
    v116 = a5;
    uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v28) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v28);
    }
  }
  if (a6)
  {
    v102[0] = (uint64_t **)&v106;
    v116 = a6;
    uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v29) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v29);
    }
  }
  if (a7)
  {
    v102[0] = (uint64_t **)&v104;
    v116 = a7;
    uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v30) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v30);
    }
  }
  if (v113)
  {
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v113, (uint64_t)&v116);
    float v31 = llvm::APFloat::convertToFloat(&v116);
    uint64_t v32 = (void *)v117[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v33) == v32) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v117);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v117);
    }
  }
  else
  {
    float v31 = 0.0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
  unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v34);
  uint64_t v36 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112)
                  + 8 * IndexFromDim);
  v131 = (float *)v133;
  uint64_t v132 = 0xC00000000;
  if (v110)
  {
    mlir::getIntValues<float>(v110, v111, (uint64_t)&v131, 0);
  }
  else
  {
    v133[0] = 1065353216;
    LODWORD(v132) = 1;
  }
  v128 = (float *)v130;
  uint64_t v129 = 0xC00000000;
  if (v108)
  {
    mlir::getIntValues<float>(v108, v109, (uint64_t)&v128, 0);
  }
  else
  {
    v130[0] = 0;
    LODWORD(v129) = 1;
  }
  v125 = v127;
  uint64_t v126 = 0xC00000000;
  if (v106)
  {
    mlir::getIntValues<float>(v106, v107, (uint64_t)&v125, 0);
  }
  else
  {
    v127[0] = 1065353216;
    LODWORD(v126) = 1;
  }
  v122 = v124;
  uint64_t v123 = 0xC00000000;
  if (v104)
  {
    mlir::getIntValues<float>(v104, v105, (uint64_t)&v122, 0);
    int v37 = v123;
  }
  else
  {
    int v37 = 1;
    v124[0] = 0;
    LODWORD(v123) = 1;
  }
  if (v37 == 1 && v126 == 1 && v129 == 1 && v132 == 1) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = v36;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
  unint64_t v43 = v42;
  __b = v121;
  int v120 = 6;
  if (v42 < 7)
  {
    if (v42) {
      memset_pattern16(v121, &unk_1810FE350, 8 * v42);
    }
    uint64_t v44 = v121;
  }
  else
  {
    unsigned int v119 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v121, v42, 8);
    uint64_t v44 = __b;
    memset_pattern16(__b, &unk_1810FE350, 8 * v43);
  }
  unsigned int v119 = v43;
  *(void *)&v44[8 * IndexFromDim] = v41;
  uint64_t v45 = (mlir::Float32Type **)(a1 + 8);
  uint64_t F32Type = mlir::Builder::getF32Type(v45, (mlir::MLIRContext *)v42);
  unint64_t v47 = (void *)mlir::RankedTensorType::get((uint64_t)v44, v43, F32Type, 0);
  uint64_t v48 = __b;
  uint64_t v49 = (mlir::AffineMap *)v119;
  uint64_t F16Type = mlir::Builder::getF16Type(v45, v50);
  uint64_t v103 = mlir::MemRefType::get(v48, v49, F16Type, 0, 0, 0);
  if (v47)
  {
    uint64_t v52 = *v47;
    unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v54 = *(unsigned int *)(v52 + 16);
    if (v54)
    {
      uint64_t v55 = *(void **)(v52 + 8);
      uint64_t v56 = &v55[2 * v54];
      do
      {
        unint64_t v57 = v54 >> 1;
        uint64_t v58 = &v55[2 * (v54 >> 1)];
        unint64_t v60 = *v58;
        uint64_t v59 = v58 + 2;
        v54 += ~(v54 >> 1);
        if (v60 < v53) {
          uint64_t v55 = v59;
        }
        else {
          unint64_t v54 = v57;
        }
      }
      while (v54);
      if (v55 != v56 && *v55 == v53) {
        uint64_t v61 = v55[1];
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v63 = v47;
    }
    else
    {
      uint64_t v63 = v47;
      uint64_t v61 = 0;
    }
    mlir::mps::CPUNDArray::CPUNDArray(&v116, v63, v61, 0);
    uint64_t v64 = *v47;
    unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v66 = *(unsigned int *)(v64 + 16);
    if (!v66) {
      goto LABEL_80;
    }
    unint64_t v67 = *(void **)(v64 + 8);
    uint64_t v68 = &v67[2 * v66];
    do
    {
      unint64_t v69 = v66 >> 1;
      unint64_t v70 = &v67[2 * (v66 >> 1)];
      unint64_t v72 = *v70;
      unint64_t v71 = v70 + 2;
      v66 += ~(v66 >> 1);
      if (v72 < v65) {
        unint64_t v67 = v71;
      }
      else {
        unint64_t v66 = v69;
      }
    }
    while (v66);
    if (v67 != v68 && *v67 == v65) {
      uint64_t v62 = v67[1];
    }
    else {
LABEL_80:
    }
      uint64_t v62 = 0;
  }
  else
  {
    mlir::mps::CPUNDArray::CPUNDArray(&v116, 0, 0, 0);
    uint64_t v62 = 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v102, v47, v62, 0);
  if (v41)
  {
    uint64_t v73 = 0;
    uint64_t v74 = v117[4];
    uint64_t v75 = v102[5];
    int v76 = v132;
    uint64_t v77 = v131;
    int v78 = v129;
    v79 = v128;
    int v80 = v126;
    uint64_t v81 = (float *)v125;
    int v82 = v123;
    v83 = (float *)v122;
    do
    {
      if (v76 == 1) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = v73;
      }
      float v89 = v77[v88];
      if (v78 == 1) {
        uint64_t v90 = 0;
      }
      else {
        uint64_t v90 = v73;
      }
      if (v80 == 1) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = v73;
      }
      float v92 = v81[v91];
      if (v82 == 1) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = v73;
      }
      if (a8) {
        float v84 = v89 / (float)(v31 + v92);
      }
      else {
        float v84 = v89 * v92;
      }
      float v85 = v79[v90];
      float v86 = v83[v93];
      uint64_t v87 = 4 * v73;
      *(float *)(v74 + v87) = v84;
      *(float *)((char *)v75 + v87) = v85 + (float)(v86 / v89);
      ++v73;
    }
    while (v41 != v73);
  }
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)&v116, 0, 1);
  uint64_t v100 = v94;
  v101 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v45, v26, &v103, &ElementsAttr);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v102, 0, 1);
  uint64_t v100 = v95;
  v98 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v45, v26, &v103, &ElementsAttr);
  v96 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)v45, v26, v112, &v115, &v101, &v98);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v102);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&v116);
  if (__b != v121) {
    free(__b);
  }
  if (v122 != v124) {
    free(v122);
  }
  if (v125 != v127) {
    free(v125);
  }
  if (v128 != (float *)v130) {
    free(v128);
  }
  if (v131 != (float *)v133) {
    free(v131);
  }
  return (char *)v96 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Invert type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.invert' to have attribute 'epsilon' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'mult' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'goc' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'inv' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'quotient' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'quotient' failed to satisfy constraint: 'is FP16 value'");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    void v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5 - 16, *a6 - 16);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anec::anonymous namespace'::ANEC_GOCGOC::~ANEC_GOCGOC(mlir::anec::_anonymous_namespace_::ANEC_GOCGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v81[4] = *MEMORY[0x1E4F143B8];
  uint64_t v68 = 0;
  v79 = v81;
  v81[0] = a2;
  uint64_t v80 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v67 = v5;
  unint64_t v69 = v5;
  uint64_t v77 = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
    if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
      uint64_t v10 = (void *)DefiningOp;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v77 = v10;
    if (!v9)
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_77;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
        char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
        uint64_t v15 = v76;
LABEL_15:
        uint64_t v17 = v14(v11, v12, v13, v15);
LABEL_16:
        uint64_t v11 = v17;
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    uint64_t v68 = DefiningOp;
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 0);
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 1u);
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 2u);
    int v18 = v80;
    if (v80 >= HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v80 + 1, 8);
      int v18 = v80;
    }
    v79[v18] = v7;
    LODWORD(v80) = v80 + 1;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 1u);
    uint64_t v20 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 2u);
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v68, 0);
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    uint64_t v23 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v69, 0);
    uint64_t v24 = mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0);
    uint64_t v25 = *(void **)(ODSOperands + 24);
    uint64_t v26 = *(void **)(v20 + 24);
    uint64_t v75 = (void *)NextResultAtOffset;
    uint64_t v74 = mlir::Value::getDefiningOp((mlir::Value *)&v75);
    Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v74);
    Bias = (void *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v74);
    v76[0] = 0;
    v76[1] = 0;
    v73[0] = 0;
    v73[1] = 0;
    v72[0] = 0;
    v72[1] = 0;
    v71[0] = 0;
    v71[1] = 0;
    unint64_t v70 = v76;
    uint64_t v77 = Filter;
    uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v29) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v29);
    }
    unint64_t v70 = (void **)v73;
    uint64_t v77 = Bias;
    uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v30) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v30);
    }
    unint64_t v70 = (void **)v72;
    uint64_t v77 = v25;
    uint64_t v31 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v31) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v31);
    }
    unint64_t v70 = (void **)v71;
    uint64_t v77 = v26;
    uint64_t v32 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v32) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v32);
    }
    unint64_t v33 = v75;
    unint64_t v34 = (void *)*v75;
    if (*v75)
    {
      while (v34[2] - 16 == v24)
      {
        unint64_t v34 = (void *)*v34;
        if (!v34) {
          goto LABEL_38;
        }
      }
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76)) {
        int OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v73);
      }
      else {
        int OperandRange = 0;
      }
      int v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72);
      if (v36) {
        int v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v71);
      }
      if (OperandRange != v36)
      {
LABEL_73:
        uint64_t v65 = *((void *)a3 + 2);
        if (v65 && mlir::RewriterBase::Listener::classof(v65))
        {
          goto LABEL_16;
        }
        goto LABEL_76;
      }
      unint64_t v33 = v75;
    }
LABEL_38:
    int v37 = (uint64_t *)(v33[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v37) {
      goto LABEL_47;
    }
    uint64_t v38 = *v37;
    unint64_t v39 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v40 = *(unsigned int *)(v38 + 16);
    if (!v40) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void **)(v38 + 8);
    unint64_t v42 = &v41[2 * v40];
    do
    {
      unint64_t v43 = v40 >> 1;
      uint64_t v44 = &v41[2 * (v40 >> 1)];
      unint64_t v46 = *v44;
      uint64_t v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39) {
        uint64_t v41 = v45;
      }
      else {
        unint64_t v40 = v43;
      }
    }
    while (v40);
    if (v41 != v42 && *v41 == v39) {
      uint64_t v47 = v41[1];
    }
    else {
LABEL_47:
    }
      uint64_t v47 = 0;
    uint64_t v77 = v37;
    v78[0] = v47;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v77)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_49;
    uint64_t v49 = (uint64_t *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v49) {
      goto LABEL_59;
    }
    uint64_t v50 = *v49;
    unint64_t v51 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v52 = *(unsigned int *)(v50 + 16);
    if (!v52) {
      goto LABEL_59;
    }
    unint64_t v53 = *(void **)(v50 + 8);
    unint64_t v54 = &v53[2 * v52];
    do
    {
      unint64_t v55 = v52 >> 1;
      uint64_t v56 = &v53[2 * (v52 >> 1)];
      unint64_t v58 = *v56;
      unint64_t v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51) {
        unint64_t v53 = v57;
      }
      else {
        unint64_t v52 = v55;
      }
    }
    while (v52);
    if (v53 != v54 && *v53 == v51) {
      uint64_t v59 = v53[1];
    }
    else {
LABEL_59:
    }
      uint64_t v59 = 0;
    uint64_t v77 = v49;
    v78[0] = v59;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v77)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72)
      && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v71) & 1) != 0)
    {
      mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)v72, (uint64_t)&v77);
      float v60 = llvm::APFloat::convertToFloat(&v77);
      uint64_t v61 = (void *)v78[0];
      uint64_t v63 = llvm::APFloatBase::PPCDoubleDouble(v62);
      if (v63 == v61) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v78);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v78);
      }
      mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)v71, (uint64_t)&v77);
      float v64 = llvm::APFloat::convertToFloat(&v77);
      if (v63 == (void *)v78[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v78);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v78);
      }
      if (v60 == 1.0 && v64 == (float)(uint64_t)v64)
      {
LABEL_49:
        uint64_t v48 = *(void *)(v79[1] + 24);
        uint64_t v77 = *(void **)(*v79 + 24);
        v78[0] = v48;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v77, (mlir::MLIRContext *)2, 0);
      }
    }
    goto LABEL_73;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_77;
  }
  uint64_t v16 = v67;
  if (mlir::RewriterBase::Listener::classof(v11))
  {
    uint64_t v12 = *((void *)v16 + 3);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
    uint64_t v15 = &v77;
    goto LABEL_15;
  }
LABEL_76:
  uint64_t v11 = 0;
LABEL_77:
  if (v79 != v81) {
    free(v79);
  }
  return v11;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

llvm::detail::DoubleAPFloat *mlir::ElementsAttr::getSplatValue<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::ElementsAttr::value_begin<llvm::APFloat>(a1, (uint64_t)v9);
  if (v9[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v11;
  }
  if (v9[0])
  {
    unint64_t v4 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
    uint64_t v5 = (char *)v10 + 32 * v3;
    uint64_t v7 = (void *)*((void *)v5 + 1);
    uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(v5 + 8);
    if (llvm::APFloatBase::PPCDoubleDouble(v10) == v7)
    {
      uint64_t result = llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, v6);
      if (v9[0]) {
        return result;
      }
    }
    else
    {
      uint64_t result = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v4, v6);
      if (v9[0]) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = (llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(void))(*(void *)v10 + 24))();
    if (v9[0]) {
      return result;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(llvm::detail::DoubleAPFloat *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::ElementsAttr::value_begin<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = mlir::TypeID::get<llvm::APFloat>();
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11) {
    mlir::ElementsAttr::value_begin<llvm::APFloat>((llvm *)v9, (uint64_t *)a1);
  }
  char v6 = v9[1];
  if (v9[0])
  {
    uint64_t v7 = v10;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = v10;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  return result;
}

const char *llvm::getTypeName<llvm::APFloat>()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
  unint64_t v6 = 63;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  int v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::TypeID::get<llvm::APFloat>()
{
  unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      unint64_t v11 = 63;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    }
  }
  return v0[340];
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'goc1, goc2, scale2, bias2' failed to satisfy constraint: ''");
}

void mlir::anec::anonymous namespace'::ANEC_GOCRelu::~ANEC_GOCRelu(mlir::anec::_anonymous_namespace_::ANEC_GOCRelu *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCRelu *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v78[4] = *MEMORY[0x1E4F143B8];
  uint64_t v69 = 0;
  int v76 = v78;
  v78[0] = a2;
  uint64_t v77 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v68[0] = v5;
  v68[1] = v5;
  uint64_t ArgOperands = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    unint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id;
    if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id) {
      uint64_t v10 = (void *)DefiningOp;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t ArgOperands = v10;
    if (!v9)
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_134;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
        char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
        p_uint64_t ArgOperands = (void **)&v74;
LABEL_15:
        uint64_t v17 = v11;
LABEL_125:
        uint64_t v11 = v14(v17, v12, v13, p_ArgOperands);
        goto LABEL_134;
      }
      goto LABEL_133;
    }
    uint64_t v69 = DefiningOp;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ArgOperands, 0);
    int v19 = v77;
    if (v77 >= HIDWORD(v77))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v77 + 1, 8);
      int v19 = v77;
    }
    v76[v19] = v7;
    LODWORD(v77) = v77 + 1;
    uint64_t v20 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 1u);
    uint64_t v21 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 2u);
    uint64_t ArgOperands = *(void **)(ODSOperands + 24);
    uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (!v22 || *(_UNKNOWN **)(*(void *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    {
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
LABEL_124:
      uint64_t v13 = v24;
      char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v23 + 64);
      p_uint64_t ArgOperands = &ArgOperands;
      uint64_t v17 = v23;
      goto LABEL_125;
    }
    uint64_t v25 = *(void **)(v20 + 24);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = &v74;
    uint64_t ArgOperands = v25;
    uint64_t v26 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (!v26 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v73, v26))
    {
LABEL_121:
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
      goto LABEL_124;
    }
    uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
    uint64_t v71 = v27;
    uint64_t v28 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v28 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      uint64_t ArgOperands = v72;
      uint64_t v71 = 0xC00000000;
      mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
      if (v71)
      {
        uint64_t v35 = 4 * v71 - 4;
        int v36 = (float *)ArgOperands;
        do
        {
          float v37 = *v36++;
          BOOL v38 = v37 >= 0.0;
          BOOL v39 = v37 < 0.0 || v35 == 0;
          v35 -= 4;
        }
        while (!v39);
      }
      else
      {
        BOOL v38 = 1;
      }
      if (ArgOperands != v72) {
        free(ArgOperands);
      }
      if (!v38) {
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      uint64_t v71 = v29;
      if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        goto LABEL_121;
      uint64_t ArgOperands = v72;
      uint64_t v71 = 0xC00000000;
      mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
      if (v71)
      {
        uint64_t v30 = 4 * v71 - 4;
        uint64_t v31 = (float *)ArgOperands;
        do
        {
          float v32 = *v31++;
          BOOL v33 = v32 >= 0.0;
          BOOL v34 = v32 < 0.0 || v30 == 0;
          v30 -= 4;
        }
        while (!v34);
      }
      else
      {
        BOOL v33 = 1;
      }
      if (ArgOperands != v72) {
        free(ArgOperands);
      }
      if (!v33) {
        goto LABEL_121;
      }
    }
    unint64_t v40 = *(void **)(v21 + 24);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = &v74;
    uint64_t ArgOperands = v40;
    uint64_t v41 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (v41 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v73, v41))
    {
      uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      uint64_t v71 = v42;
      unint64_t v43 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                     + 136);
      BOOL v52 = v43 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
      if (v52
        || v43 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v43 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t ArgOperands = v72;
        uint64_t v71 = 0xC00000000;
        mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
        if (v71)
        {
          uint64_t v53 = 4 * v71 - 4;
          unint64_t v54 = (float *)ArgOperands;
          do
          {
            float v55 = *v54++;
            BOOL v56 = v55 == 0.0;
            BOOL v57 = v55 != 0.0 || v53 == 0;
            v53 -= 4;
          }
          while (!v57);
        }
        else
        {
          BOOL v56 = 1;
        }
        if (ArgOperands != v72) {
          free(ArgOperands);
        }
        if (!v56) {
          goto LABEL_130;
        }
      }
      else
      {
        uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
        uint64_t v71 = v61;
        if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                          + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          goto LABEL_130;
        uint64_t ArgOperands = v72;
        uint64_t v71 = 0xC00000000;
        mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
        if (v71)
        {
          uint64_t v62 = 4 * v71 - 4;
          uint64_t v63 = (float *)ArgOperands;
          do
          {
            float v64 = *v63++;
            BOOL v65 = v64 == 0.0;
            BOOL v66 = v64 != 0.0 || v62 == 0;
            v62 -= 4;
          }
          while (!v66);
        }
        else
        {
          BOOL v65 = 1;
        }
        if (ArgOperands != v72) {
          free(ArgOperands);
        }
        if (!v65) {
          goto LABEL_130;
        }
      }
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v69, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      uint64_t ArgOperands = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ArgOperands))
      {
        uint64_t v60 = *(void *)(v76[1] + 24);
        uint64_t ArgOperands = *(void **)(*v76 + 24);
        uint64_t v71 = v60;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ArgOperands, (mlir::MLIRContext *)2, 0);
      }
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
      goto LABEL_124;
    }
LABEL_130:
    uint64_t v23 = *((void *)a3 + 2);
    if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
      goto LABEL_133;
    }
    uint64_t v12 = *((void *)a2 + 3);
    goto LABEL_124;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_134;
  }
  uint64_t v16 = v68[0];
  if (mlir::RewriterBase::Listener::classof(v11))
  {
    uint64_t v12 = *(void *)(v16 + 24);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
    p_uint64_t ArgOperands = &ArgOperands;
    goto LABEL_15;
  }
LABEL_133:
  uint64_t v11 = 0;
LABEL_134:
  if (v76 != v78) {
    free(v76);
  }
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::Value &,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.gain_offset_control";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::GOC::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Relu,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.relu", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.relu";
    v19[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Relu type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'is GOC input'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'is constant >= 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'relu_out' failed to satisfy constraint: 'is FP16 value'");
}

void mlir::anec::anonymous namespace'::CanonicalizeConcat::~CanonicalizeConcat(mlir::anec::_anonymous_namespace_::CanonicalizeConcat *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeConcat::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  v152[6] = *MEMORY[0x1E4F143B8];
  v139 = a2;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v139);
  uint64_t v7 = v6;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v139) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_10;
  }
  char v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_10:
  }
    uint64_t v18 = 0;
  v138[0] = (uint64_t)v8;
  v138[1] = v18;
  Axis = mlir::anec::Concat::getAxis(&v139);
  if (mlir::anec::Softmax::getSubtractMax(&v139))
  {
    __int16 v20 = "failed: interleaved concat not supported";
    goto LABEL_33;
  }
  v134[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v138);
  if (!mlir::Type::isF16((mlir::Type *)v134))
  {
    v134[0] = "failed: operation output must be F16";
    __int16 v135 = 259;
    BOOL v33 = v139;
    v133[0] = v134;
    uint64_t v34 = *(void *)(a3 + 16);
    if (v34) {
      goto LABEL_34;
    }
    return 0;
  }
  if (Axis != (void *)1)
  {
    __int16 v20 = "failed: only works when concat is applied on the channel axis";
    goto LABEL_33;
  }
  if (v7)
  {
    uint64_t v21 = (void *)(Inputs + 24);
    uint64_t v22 = v7;
    while (1)
    {
      v134[0] = *v21;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v134);
      if (!DefiningOp) {
        break;
      }
      uint64_t v24 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v25 = v24 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
      uint64_t v26 = v24 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id ? DefiningOp : 0;
      v133[0] = v26;
      if (!v25) {
        break;
      }
      uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v133);
      if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        break;
      uint64_t v28 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v133);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)) {
        break;
      }
      v21 += 4;
      if (!--v22) {
        goto LABEL_26;
      }
    }
    __int16 v20 = "failed: all inputs must be compatible";
LABEL_33:
    v134[0] = v20;
    __int16 v135 = 259;
    BOOL v33 = v139;
    v133[0] = v134;
    uint64_t v34 = *(void *)(a3 + 16);
    if (v34)
    {
LABEL_34:
      uint64_t result = mlir::RewriterBase::Listener::classof(v34);
      if (result) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v34 + 64))(v34, *((void *)v33 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::Concat &>(mlir::anec::Concat &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v133);
      }
      return result;
    }
    return 0;
  }
LABEL_26:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  unint64_t v30 = v29;
  ElementTypeOrSelf = v152;
  int v151 = 6;
  if (v29 < 7)
  {
    if (!v29) {
      goto LABEL_40;
    }
    size_t v32 = 8 * v29;
    uint64_t v31 = v152;
  }
  else
  {
    unsigned int v150 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&ElementTypeOrSelf, v152, v29, 8);
    uint64_t v31 = ElementTypeOrSelf;
    size_t v32 = 8 * v30;
  }
  memset_pattern16(v31, &unk_1810FE350, v32);
LABEL_40:
  unsigned int v150 = v30;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  uint64_t v37 = (uint64_t)ElementTypeOrSelf;
  ElementTypeOrSelf[1] = *(void *)(ArgAttrsAttr + 8);
  uint64_t v38 = v150;
  uint64_t F32Type = mlir::Builder::getF32Type((mlir::Float32Type **)(a3 + 8), v39);
  uint64_t v41 = (void *)mlir::RankedTensorType::get(v37, v38, F32Type, 0);
  uint64_t v42 = ElementTypeOrSelf;
  unint64_t v43 = (mlir::AffineMap *)v150;
  uint64_t F16Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a3 + 8), v44);
  uint64_t v137 = mlir::MemRefType::get(v42, v43, F16Type, 0, 0, 0);
  v130 = (mlir::Builder *)(a3 + 8);
  if (v41)
  {
    uint64_t v46 = *v41;
    unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v48 = *(unsigned int *)(v46 + 16);
    if (v48)
    {
      uint64_t v49 = *(void **)(v46 + 8);
      uint64_t v50 = &v49[2 * v48];
      do
      {
        unint64_t v51 = v48 >> 1;
        BOOL v52 = &v49[2 * (v48 >> 1)];
        unint64_t v54 = *v52;
        uint64_t v53 = v52 + 2;
        v48 += ~(v48 >> 1);
        if (v54 < v47) {
          uint64_t v49 = v53;
        }
        else {
          unint64_t v48 = v51;
        }
      }
      while (v48);
      if (v49 != v50 && *v49 == v47) {
        uint64_t v55 = v49[1];
      }
      else {
        uint64_t v55 = 0;
      }
      BOOL v57 = v41;
    }
    else
    {
      BOOL v57 = v41;
      uint64_t v55 = 0;
    }
    mlir::mps::CPUNDArray::CPUNDArray(v134, v57, v55, 0);
    uint64_t v58 = *v41;
    unint64_t v59 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v60 = *(unsigned int *)(v58 + 16);
    if (!v60) {
      goto LABEL_62;
    }
    uint64_t v61 = *(void **)(v58 + 8);
    uint64_t v62 = &v61[2 * v60];
    do
    {
      unint64_t v63 = v60 >> 1;
      float v64 = &v61[2 * (v60 >> 1)];
      unint64_t v66 = *v64;
      BOOL v65 = v64 + 2;
      v60 += ~(v60 >> 1);
      if (v66 < v59) {
        uint64_t v61 = v65;
      }
      else {
        unint64_t v60 = v63;
      }
    }
    while (v60);
    if (v61 != v62 && *v61 == v59) {
      uint64_t v56 = v61[1];
    }
    else {
LABEL_62:
    }
      uint64_t v56 = 0;
  }
  else
  {
    mlir::mps::CPUNDArray::CPUNDArray(v134, 0, 0, 0);
    uint64_t v56 = 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v133, v41, v56, 0);
  unint64_t v67 = v136;
  uint64_t v68 = (float32x4_t *)v133[5];
  v146 = v148;
  uint64_t v147 = 0x600000000;
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v132 = *(mlir::GenericProgramPoint **)(Inputs + 32 * i + 24);
      unint64_t v70 = (uint64_t *)(*((void *)v132 + 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v70) {
        goto LABEL_75;
      }
      uint64_t v71 = *v70;
      unint64_t v72 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v73 = *(unsigned int *)(v71 + 16);
      if (!v73) {
        goto LABEL_75;
      }
      uint64_t v74 = *(void **)(v71 + 8);
      uint64_t v75 = &v74[2 * v73];
      do
      {
        unint64_t v76 = v73 >> 1;
        uint64_t v77 = &v74[2 * (v73 >> 1)];
        unint64_t v79 = *v77;
        int v78 = v77 + 2;
        v73 += ~(v73 >> 1);
        if (v79 < v72) {
          uint64_t v74 = v78;
        }
        else {
          unint64_t v73 = v76;
        }
      }
      while (v73);
      if (v74 != v75 && *v74 == v72) {
        uint64_t v80 = v74[1];
      }
      else {
LABEL_75:
      }
        uint64_t v80 = 0;
      ElementsAttr = v70;
      uint64_t v144 = v80;
      uint64_t v81 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementsAttr) + 8);
      v131 = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v132);
      uint64_t v82 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v131);
      uint64_t v83 = v147;
      if (v147 >= (unint64_t)HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, v148, v147 + 1, 8);
        uint64_t v83 = v147;
      }
      v146[v83] = v82;
      LODWORD(v147) = v147 + 1;
      ElementsAttr = v145;
      uint64_t v144 = 0xC00000000;
      v140 = v142;
      uint64_t v141 = 0xC00000000;
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v131);
      mlir::matchConstantWithFloatVector<float>(Filter, (uint64_t)&ElementsAttr);
      uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v131);
      mlir::matchConstantWithFloatVector<float>(Bias, (uint64_t)&v140);
      uint64_t v86 = v144;
      if (v144 == 1)
      {
        if (v81 < 1) {
          goto LABEL_97;
        }
        uint64_t v87 = (__int32 *)ElementsAttr;
        if ((unint64_t)v81 < 8
          || v67 < (float32x4_t *)((char *)ElementsAttr + 4) && ElementsAttr < &v67->f32[v81])
        {
          uint64_t v88 = 0;
          float v89 = v67;
LABEL_84:
          uint64_t v90 = v81 - v88;
          unint64_t v67 = v89;
          do
          {
            v67->i32[0] = *v87;
            unint64_t v67 = (float32x4_t *)((char *)v67 + 4);
            --v90;
          }
          while (v90);
          goto LABEL_97;
        }
        uint64_t v88 = v81 & 0x7FFFFFFFFFFFFFF8;
        float v89 = (float32x4_t *)((char *)v67 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
        float32x4_t v123 = vld1q_dup_f32((const float *)ElementsAttr);
        v124 = v67 + 1;
        unint64_t v125 = v81 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v124[-1] = v123;
          float32x4_t *v124 = v123;
          v124 += 2;
          v125 -= 8;
        }
        while (v125);
        unint64_t v67 = (float32x4_t *)((char *)v67 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
        if (v81 != v88) {
          goto LABEL_84;
        }
      }
      else
      {
        if (!v144) {
          goto LABEL_97;
        }
        uint64_t v91 = (char *)ElementsAttr;
        unint64_t v92 = (v144 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v92 < 7 || (unint64_t)((char *)v67 - (unsigned char *)ElementsAttr) < 0x20)
        {
          uint64_t v95 = v67;
          v96 = (char *)ElementsAttr;
LABEL_95:
          v101 = &v91[4 * v86];
          unint64_t v67 = v95;
          do
          {
            __int32 v102 = *(_DWORD *)v96;
            v96 += 4;
            v67->i32[0] = v102;
            unint64_t v67 = (float32x4_t *)((char *)v67 + 4);
          }
          while (v96 != v101);
          goto LABEL_97;
        }
        unint64_t v93 = v92 + 1;
        uint64_t v94 = (v92 + 1) & 0x7FFFFFFFFFFFFFF8;
        uint64_t v95 = (float32x4_t *)((char *)v67 + 4 * v94);
        v96 = (char *)ElementsAttr + 4 * v94;
        v97 = (long long *)((char *)ElementsAttr + 16);
        f32 = (_OWORD *)v67[1].f32;
        uint64_t v99 = v94;
        do
        {
          long long v100 = *v97;
          *(f32 - 1) = *(v97 - 1);
          _OWORD *f32 = v100;
          v97 += 2;
          f32 += 2;
          v99 -= 8;
        }
        while (v99);
        unint64_t v67 = (float32x4_t *)((char *)v67 + 4 * v94);
        if (v93 != v94) {
          goto LABEL_95;
        }
      }
LABEL_97:
      uint64_t v103 = v141;
      uint64_t v104 = (__int32 *)v140;
      if (v141 == 1)
      {
        if (v81 >= 1)
        {
          if ((unint64_t)v81 >= 8
            && (v68 < (float32x4_t *)((char *)v140 + 4) ? (BOOL v105 = v140 >= &v68->f32[v81]) : (BOOL v105 = 1), v105))
          {
            uint64_t v106 = v81 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v107 = (float32x4_t *)((char *)v68 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
            float32x4_t v108 = vld1q_dup_f32((const float *)v140);
            uint64_t v109 = v68 + 1;
            unint64_t v110 = v81 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v109[-1] = v108;
              *uint64_t v109 = v108;
              v109 += 2;
              v110 -= 8;
            }
            while (v110);
            uint64_t v68 = (float32x4_t *)((char *)v68 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
            if (v81 == v106) {
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v106 = 0;
            uint64_t v107 = v68;
          }
          uint64_t v120 = v81 - v106;
          uint64_t v68 = v107;
          do
          {
            v68->i32[0] = *v104;
            uint64_t v68 = (float32x4_t *)((char *)v68 + 4);
            --v120;
          }
          while (v120);
        }
      }
      else if (v141)
      {
        unint64_t v111 = (v141 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v111 < 7 || (unint64_t)((char *)v68 - (unsigned char *)v140) < 0x20)
        {
          uint64_t v114 = v68;
          uint64_t v115 = (__int32 *)v140;
        }
        else
        {
          unint64_t v112 = v111 + 1;
          uint64_t v113 = (v111 + 1) & 0x7FFFFFFFFFFFFFF8;
          uint64_t v114 = (float32x4_t *)((char *)v68 + 4 * v113);
          uint64_t v115 = (__int32 *)((char *)v140 + 4 * v113);
          v116 = (long long *)((char *)v140 + 16);
          v117 = (_OWORD *)v68[1].f32;
          uint64_t v118 = v113;
          do
          {
            long long v119 = *v116;
            *(v117 - 1) = *(v116 - 1);
            _OWORD *v117 = v119;
            v116 += 2;
            v117 += 2;
            v118 -= 8;
          }
          while (v118);
          uint64_t v68 = (float32x4_t *)((char *)v68 + 4 * v113);
          if (v112 == v113) {
            goto LABEL_123;
          }
        }
        v121 = &v104[v103];
        uint64_t v68 = v114;
        do
        {
          __int32 v122 = *v115++;
          v68->i32[0] = v122;
          uint64_t v68 = (float32x4_t *)((char *)v68 + 4);
        }
        while (v115 != v121);
      }
LABEL_123:
      if (v104 != (__int32 *)v142) {
        free(v104);
      }
      if (ElementsAttr != v145) {
        free(ElementsAttr);
      }
    }
  }
  ElementsAttr = mlir::anec::Concat::getAxis(&v139);
  LOBYTE(v132) = mlir::anec::Softmax::getSubtractMax(&v139);
  v140 = mlir::OpBuilder::create<mlir::anec::Concat,llvm::SmallVector<mlir::Value,6u> &,unsigned long long,BOOL>(v130, v4, (uint64_t)&v146, (uint64_t *)&ElementsAttr, (unsigned __int8 *)&v132);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v134, 0, 1);
  uint64_t v144 = v126;
  uint64_t v132 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(v130, v4, &v137, (void **)&ElementsAttr);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v133, 0, 1);
  uint64_t v144 = v127;
  v131 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(v130, v4, &v137, (void **)&ElementsAttr);
  v128 = v139;
  uint64_t v129 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::Concat &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(v130, *((void *)v139 + 3), v138, &v140, &v132, &v131);
  (*(void (**)(uint64_t, mlir::Operation *, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, v128, v129);
  if (v146 != (void *)v148) {
    free(v146);
  }
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v133);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v134);
  if (ElementTypeOrSelf != v152) {
    free(ElementTypeOrSelf);
  }
  return 1;
}

uint64_t mlir::matchConstantWithFloatVector<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v18 = (uint64_t **)&v19;
  uint64_t v21 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v18, DefiningOp)) {
    return 0;
  }
  v17[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19);
  v17[1] = v4;
  uint64_t v5 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17) + 136);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v7 = v6 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v8 = v7 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v9 = v8 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v10 = v9 || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v11 = v10 || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v12 = v11 || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v13 = v12 || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v14 = v13 || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (!v14
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t v15 = 1;
  mlir::getIntValues<float>(v19, v20, a2, 1);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Concat,llvm::SmallVector<mlir::Value,6u> &,unsigned long long,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5)
{
  v22[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.concat", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.concat";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::ValueRange::ValueRange(v21, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Concat::build(a1, (uint64_t)v22, v21[0], v21[1], *a4, *a5);
  BOOL v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Concat,void>::id) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::Concat &>(mlir::anec::Concat &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::Concat &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, void *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4 - 16, *a5 - 16, *a6 - 16);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass::~ANECLegacyQuantizationCanonicalizationPass(mlir::anec::_anonymous_namespace_::ANECLegacyQuantizationCanonicalizationPass *this)
{
  mlir::Pass::~Pass(this);

  operator delete(v1);
}

const char *mlir::anec::ANECLegacyQuantizationCanonicalizationBase<mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass>::getName()
{
  return "ANECLegacyQuantizationCanonicalization";
}

const char *mlir::anec::ANECLegacyQuantizationCanonicalizationBase<mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass>::getArgument()
{
  return "anec-legacy-quantization-canonicalization";
}

const char *mlir::anec::ANECLegacyQuantizationCanonicalizationBase<mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass>::getDescription()
{
  return "Canoncalize ANE regions with quantization-related transformations";
}

void mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass::runOnOperation(mlir::anec::_anonymous_namespace_::ANECLegacyQuantizationCanonicalizationPass *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  uint64_t v27 = &v29;
  uint64_t v28 = 0x600000000;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  BOOL v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0x2800000000;
  int v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0x2800000000;
  mlir::anec::getANECCanonicalizeQuantPatterns(&Context);
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v15, &Context, 0, 0, 0, 0);
  unint64_t v3 = *(unsigned int *)(v2 + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (mlir::Region **)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v2 + 40));
    BOOL v23 = 0;
    __int16 v16 = 256;
    int v17 = 0;
    __int16 v18 = 0;
    long long v19 = xmmword_1810FE4B0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    mlir::applyPatternsAndFoldGreedily(v4, (const mlir::FrozenRewritePatternSet *)v15, (long long *)&v16, &v23);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v15);
  if (HIDWORD(v37) && v37)
  {
    uint64_t v5 = 0;
    do
    {
      BOOL v6 = *(llvm **)((char *)v36 + v5);
      if (v6 != (llvm *)-8 && v6 != 0)
      {
        uint64_t v8 = *(void *)v6;
        BOOL v9 = (void *)*((void *)v6 + 4);
        if (v9 == (void *)((char *)v6 + 8))
        {
          (*(void (**)(void *))(*((void *)v6 + 1) + 32))((void *)v6 + 1);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        llvm::deallocate_buffer(v6, (void *)(v8 + 41));
      }
      v5 += 8;
    }
    while (8 * v37 != v5);
  }
  free(v36);
  if (HIDWORD(v34) && v34)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(llvm **)((char *)v33 + v10);
      if (v11 != (llvm *)-8 && v11 != 0)
      {
        uint64_t v13 = *(void *)v11;
        char v14 = (void *)*((void *)v11 + 4);
        if (v14 == (void *)((char *)v11 + 8))
        {
          (*(void (**)(void *))(*((void *)v11 + 1) + 32))((void *)v11 + 1);
        }
        else if (v14)
        {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        llvm::deallocate_buffer(v11, (void *)(v13 + 41));
      }
      v10 += 8;
    }
    while (8 * v34 != v10);
  }
  free(v33);
  llvm::deallocate_buffer(v30, (void *)(16 * v32));
}

BOOL mlir::OperationPass<mlir::ModuleOp>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

double mlir::anec::ANECLegacyQuantizationCanonicalizationBase<mlir::anec::anonymous namespace'::ANECLegacyQuantizationCanonicalizationPass>::clonePass@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x158uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  double result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC188;
  *a2 = v4;
  return result;
}

llvm::raw_ostream *OUTLINED_FUNCTION_0(const void *a1, size_t a2)
{
  return llvm::raw_ostream::operator<<(v2, a1, a2);
}

void mlir::anec::getANECConvCanonicalizationPatterns(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v104, 3);
  mlir::Pattern::Pattern((uint64_t)(v3 + 1), (uint64_t)"anec.input_view", 15, (__int16)v104, v2, 0, 0);
  *uint64_t v3 = &unk_1EC9CBEC0;
  if (!v3[9])
  {
    uint64_t v104 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_PadDeconvCrop1Folding]";
    unint64_t v105 = 111;
    unint64_t v4 = llvm::StringRef::find((uint64_t *)&v104, "DesiredTypeName = ", 0x12uLL, 0);
    if (v105 >= v4) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = v105;
    }
    uint64_t v6 = &v104[v5];
    unint64_t v7 = v105 - v5;
    if (v105 - v5 >= 0x12) {
      uint64_t v8 = 18;
    }
    else {
      uint64_t v8 = v105 - v5;
    }
    BOOL v9 = &v6[v8];
    unint64_t v10 = v7 - v8;
    if (v10 >= v10 - 1) {
      --v10;
    }
    v3[8] = v9;
    v3[9] = v10;
  }
  unint64_t v11 = *((unsigned int *)v3 + 22);
  if (v11 > *((_DWORD *)v3 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 10), v3 + 12, v11, 16);
    LODWORD(v11) = *((_DWORD *)v3 + 22);
  }
  *((_DWORD *)v3 + 22) = v11;
  uint64_t v13 = (char *)a1[2];
  unint64_t v12 = a1[3];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = (char *)a1[1];
    uint64_t v16 = (v13 - v15) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      goto LABEL_119;
    }
    uint64_t v18 = v12 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        goto LABEL_120;
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    *(void *)uint64_t v21 = v3;
    char v14 = v21 + 8;
    if (v13 == v15)
    {
      a1[1] = (uint64_t)v21;
      a1[2] = (uint64_t)v14;
      a1[3] = (uint64_t)v22;
    }
    else
    {
      unint64_t v23 = v13 - v15 - 8;
      if (v23 < 0x78
        || &v13[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v21 && &v20[v13 - v15 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_123;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v26 = &v13[-v25];
      v21 -= v25;
      uint64_t v27 = &v20[8 * v16 - 16];
      uint64_t v28 = v13 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v31 = *((_OWORD *)v28 - 1);
        long long v30 = *(_OWORD *)v28;
        *((_OWORD *)v28 - 1) = 0uLL;
        *(_OWORD *)uint64_t v28 = 0uLL;
        *((_OWORD *)v27 - 1) = v31;
        *(_OWORD *)uint64_t v27 = v30;
        v27 -= 32;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      uint64_t v13 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_123:
        do
        {
          uint64_t v32 = *((void *)v13 - 1);
          v13 -= 8;
          *(void *)uint64_t v13 = 0;
          *((void *)v21 - 1) = v32;
          v21 -= 8;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (char *)a1[1];
      BOOL v33 = (char *)a1[2];
      a1[1] = (uint64_t)v21;
      a1[2] = (uint64_t)v14;
      a1[3] = (uint64_t)v22;
      while (v33 != v13)
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        uint64_t v34 = v35;
        *(void *)BOOL v33 = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)uint64_t v13 = v3;
    char v14 = v13 + 8;
  }
  a1[2] = (uint64_t)v14;
  uint64_t v36 = *a1;
  uint64_t v37 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v104, 4);
  mlir::Pattern::Pattern((uint64_t)(v37 + 1), (uint64_t)"anec.input_view", 15, (__int16)v104, v36, 0, 0);
  *uint64_t v37 = &unk_1EC9CBF00;
  if (!v37[9])
  {
    uint64_t v104 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_PadDeconvCrop2Folding]";
    unint64_t v105 = 111;
    unint64_t v38 = llvm::StringRef::find((uint64_t *)&v104, "DesiredTypeName = ", 0x12uLL, 0);
    if (v105 >= v38) {
      unint64_t v39 = v38;
    }
    else {
      unint64_t v39 = v105;
    }
    unint64_t v40 = &v104[v39];
    unint64_t v41 = v105 - v39;
    if (v105 - v39 >= 0x12) {
      uint64_t v42 = 18;
    }
    else {
      uint64_t v42 = v105 - v39;
    }
    unint64_t v43 = &v40[v42];
    unint64_t v44 = v41 - v42;
    if (v44 >= v44 - 1) {
      --v44;
    }
    v37[8] = v43;
    v37[9] = v44;
  }
  unint64_t v45 = *((unsigned int *)v37 + 22);
  if (v45 > *((_DWORD *)v37 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 10), v37 + 12, v45, 16);
    LODWORD(v45) = *((_DWORD *)v37 + 22);
  }
  *((_DWORD *)v37 + 22) = v45;
  unint64_t v47 = (char *)a1[2];
  unint64_t v46 = a1[3];
  if ((unint64_t)v47 >= v46)
  {
    uint64_t v49 = (char *)a1[1];
    uint64_t v50 = (v47 - v49) >> 3;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_119;
    }
    uint64_t v52 = v46 - (void)v49;
    if (v52 >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_120;
      }
      unint64_t v54 = (char *)operator new(8 * v53);
    }
    else
    {
      unint64_t v54 = 0;
    }
    uint64_t v55 = &v54[8 * v50];
    uint64_t v56 = &v54[8 * v53];
    *(void *)uint64_t v55 = v37;
    unint64_t v48 = v55 + 8;
    if (v47 == v49)
    {
      a1[1] = (uint64_t)v55;
      a1[2] = (uint64_t)v48;
      a1[3] = (uint64_t)v56;
    }
    else
    {
      unint64_t v57 = v47 - v49 - 8;
      if (v57 < 0x78
        || &v47[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v55 && &v54[v47 - v49 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v47)
      {
        goto LABEL_124;
      }
      uint64_t v58 = (v57 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v60 = &v47[-v59];
      v55 -= v59;
      uint64_t v61 = &v54[8 * v50 - 16];
      uint64_t v62 = v47 - 16;
      uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v65 = *((_OWORD *)v62 - 1);
        long long v64 = *(_OWORD *)v62;
        *((_OWORD *)v62 - 1) = 0uLL;
        *(_OWORD *)uint64_t v62 = 0uLL;
        *((_OWORD *)v61 - 1) = v65;
        *(_OWORD *)uint64_t v61 = v64;
        v61 -= 32;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      unint64_t v47 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_124:
        do
        {
          uint64_t v66 = *((void *)v47 - 1);
          v47 -= 8;
          *(void *)unint64_t v47 = 0;
          *((void *)v55 - 1) = v66;
          v55 -= 8;
        }
        while (v47 != v49);
      }
      unint64_t v47 = (char *)a1[1];
      unint64_t v67 = (char *)a1[2];
      a1[1] = (uint64_t)v55;
      a1[2] = (uint64_t)v48;
      a1[3] = (uint64_t)v56;
      while (v67 != v47)
      {
        uint64_t v69 = *((void *)v67 - 1);
        v67 -= 8;
        uint64_t v68 = v69;
        *(void *)unint64_t v67 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
    }
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(void *)unint64_t v47 = v37;
    unint64_t v48 = v47 + 8;
  }
  a1[2] = (uint64_t)v48;
  uint64_t v70 = *a1;
  uint64_t v71 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v104, 2);
  mlir::Pattern::Pattern((uint64_t)(v71 + 1), (uint64_t)"anec.deconvolution", 18, (__int16)v104, v70, 0, 0);
  *uint64_t v71 = &unk_1EC9CBC80;
  if (!v71[9])
  {
    uint64_t v104 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_PadDeconvFolding]";
    unint64_t v105 = 106;
    unint64_t v72 = llvm::StringRef::find((uint64_t *)&v104, "DesiredTypeName = ", 0x12uLL, 0);
    if (v105 >= v72) {
      unint64_t v73 = v72;
    }
    else {
      unint64_t v73 = v105;
    }
    uint64_t v74 = &v104[v73];
    unint64_t v75 = v105 - v73;
    if (v105 - v73 >= 0x12) {
      uint64_t v76 = 18;
    }
    else {
      uint64_t v76 = v105 - v73;
    }
    uint64_t v77 = &v74[v76];
    unint64_t v78 = v75 - v76;
    if (v78 >= v78 - 1) {
      --v78;
    }
    v71[8] = v77;
    v71[9] = v78;
  }
  unint64_t v79 = *((unsigned int *)v71 + 22);
  if (v79 > *((_DWORD *)v71 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v71 + 10), v71 + 12, v79, 16);
    LODWORD(v79) = *((_DWORD *)v71 + 22);
  }
  *((_DWORD *)v71 + 22) = v79;
  uint64_t v81 = (char *)a1[2];
  unint64_t v80 = a1[3];
  if ((unint64_t)v81 < v80)
  {
    *(void *)uint64_t v81 = v71;
    uint64_t v82 = v81 + 8;
    goto LABEL_118;
  }
  uint64_t v83 = (char *)a1[1];
  uint64_t v84 = (v81 - v83) >> 3;
  unint64_t v85 = v84 + 1;
  if ((unint64_t)(v84 + 1) >> 61) {
LABEL_119:
  }
    abort();
  uint64_t v86 = v80 - (void)v83;
  if (v86 >> 2 > v85) {
    unint64_t v85 = v86 >> 2;
  }
  if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v87 = v85;
  }
  if (!v87)
  {
    uint64_t v88 = 0;
    goto LABEL_103;
  }
  if (v87 >> 61) {
LABEL_120:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v88 = (char *)operator new(8 * v87);
LABEL_103:
  float v89 = &v88[8 * v84];
  uint64_t v90 = &v88[8 * v87];
  *(void *)float v89 = v71;
  uint64_t v82 = v89 + 8;
  if (v81 == v83)
  {
    a1[1] = (uint64_t)v89;
    a1[2] = (uint64_t)v82;
    a1[3] = (uint64_t)v90;
  }
  else
  {
    unint64_t v91 = v81 - v83 - 8;
    if (v91 < 0x78
      || &v81[-(v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v89 && &v88[v81 - v83 - (v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v81)
    {
      goto LABEL_125;
    }
    uint64_t v92 = (v91 >> 3) + 1;
    uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v94 = &v81[-v93];
    v89 -= v93;
    uint64_t v95 = &v88[8 * v84 - 16];
    v96 = v81 - 16;
    uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v99 = *((_OWORD *)v96 - 1);
      long long v98 = *(_OWORD *)v96;
      *((_OWORD *)v96 - 1) = 0uLL;
      *(_OWORD *)v96 = 0uLL;
      *((_OWORD *)v95 - 1) = v99;
      *(_OWORD *)uint64_t v95 = v98;
      v95 -= 32;
      v96 -= 32;
      v97 -= 4;
    }
    while (v97);
    uint64_t v81 = v94;
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_125:
      do
      {
        uint64_t v100 = *((void *)v81 - 1);
        v81 -= 8;
        *(void *)uint64_t v81 = 0;
        *((void *)v89 - 1) = v100;
        v89 -= 8;
      }
      while (v81 != v83);
    }
    uint64_t v81 = (char *)a1[1];
    v101 = (char *)a1[2];
    a1[1] = (uint64_t)v89;
    a1[2] = (uint64_t)v82;
    a1[3] = (uint64_t)v90;
    while (v101 != v81)
    {
      uint64_t v103 = *((void *)v101 - 1);
      v101 -= 8;
      uint64_t v102 = v103;
      *(void *)v101 = 0;
      if (v103) {
        (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
      }
    }
  }
  if (v81) {
    operator delete(v81);
  }
LABEL_118:
  a1[2] = (uint64_t)v82;
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::~ANEC_PadDeconvCrop1Folding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop1Folding *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop1Folding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v64[4] = *MEMORY[0x1E4F143B8];
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((unsigned int *)a2 + 17);
    uint64_t v46 = *((void *)a2 + 9);
    uint64_t v47 = v5;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v6 = *((void *)a2 + 9);
    uint64_t v7 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  v41[0] = v6;
  v41[1] = v7;
  uint64_t v40 = 0;
  uint64_t v62 = v64;
  v64[0] = a2;
  uint64_t v63 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v38 = v8;
  unint64_t v39 = v8;
  uint64_t NextResultAtOffset = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v38, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  if (!DefiningOp)
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_48;
    }
    unint64_t v19 = v38;
    if (mlir::RewriterBase::Listener::classof(v18))
    {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
  uint64_t v10 = DefiningOp;
  int v11 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v64, v63 + 1, 8);
    int v11 = v63;
  }
  v62[v11] = v10;
  LODWORD(v63) = v63 + 1;
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dimension", 9), !v13))
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dimension", 9uLL);
  }
  if (!InherentAttr
    || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v14 = *((void *)a3 + 2);
    if (v14 && mlir::RewriterBase::Listener::classof(v14))
    {
      uint64_t v15 = *((void *)a2 + 3);
LABEL_18:
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t **))(*(void *)v14 + 64))(v14, v15, v16, &NextResultAtOffset);
LABEL_22:
      uint64_t v18 = v17;
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v20 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"offset", 6), !v21)) {
    uint64_t v20 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "offset", 6uLL);
  }
  if (v20 && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"size", 4), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "size", 4uLL);
    }
    if (!v22 || *(_UNKNOWN **)(*(void *)v22 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v14 = *((void *)a3 + 2);
      if (v14 && mlir::RewriterBase::Listener::classof(v14))
      {
        uint64_t v15 = *((void *)a2 + 3);
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v24 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"step", 4), !v25)) {
      uint64_t v24 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "step", 4uLL);
    }
    if (!v24 || *(_UNKNOWN **)(*(void *)v24 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v14 = *((void *)a3 + 2);
      if (v14 && mlir::RewriterBase::Listener::classof(v14))
      {
        uint64_t v15 = *((void *)a2 + 3);
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    uint64_t v53 = v24;
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v45, 0);
    uint64_t NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    uint64_t v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    uint64_t v29 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v40, 0);
    uint64_t v57 = mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0);
    long long v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v57);
    uint64_t v31 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v39, 0);
    uint64_t v37 = mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0);
    uint64_t v61 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v37);
    uint64_t v32 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v39, 0);
    BOOL v33 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
    {
      goto LABEL_22;
    }
    mlir::IntegerAttr::getValue(&v53, (llvm::APInt *)&NextResultAtOffset);
    int v34 = v59;
    if (v59 >= 0x41)
    {
      if (v34 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&NextResultAtOffset) >= 0x41)
      {
        if (NextResultAtOffset) {
          operator delete[](NextResultAtOffset);
        }
        goto LABEL_62;
      }
      uint64_t v35 = *NextResultAtOffset;
      operator delete[](NextResultAtOffset);
      if (v35 != 1)
      {
LABEL_62:
        goto LABEL_22;
      }
    }
    else if (NextResultAtOffset != (uint64_t *)1)
    {
      goto LABEL_62;
    }
    uint64_t v36 = *(void *)(v62[1] + 24);
    uint64_t NextResultAtOffset = *(uint64_t **)(*v62 + 24);
    uint64_t v59 = v36;
    uint64_t v60 = *(void *)(v62[2] + 24);
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, &NextResultAtOffset, (mlir::MLIRContext *)3, 0);
  }
  uint64_t v14 = *((void *)a3 + 2);
  if (v14 && mlir::RewriterBase::Listener::classof(v14))
  {
    uint64_t v15 = *((void *)a2 + 3);
    goto LABEL_18;
  }
LABEL_47:
  uint64_t v18 = 0;
LABEL_48:
  if (v62 != v64) {
    free(v62);
  }
  return v18;
}

uint64_t mlir::anec::anonymous namespace'::static_dag_matcher_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, void *a16, void *a17, uint64_t *a18)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v63 = v20;
  if (!v20)
  {
    uint64_t v52 = *(void *)(a1 + 16);
    if (v52)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (!result) {
        return result;
      }
      uint64_t v54 = *(void *)(a2 + 24);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
    }
    return 0;
  }
  *a6 = v20;
  uint64_t v62 = *(void *)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v63, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (DefiningOp)
  {
    uint64_t v27 = DefiningOp;
    {
      uint64_t v28 = *(unsigned int *)(a3 + 8);
      if (v28 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v28 + 1, 8);
        LODWORD(v28) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v28) = v27;
      ++*(_DWORD *)(a3 + 8);
      *a17 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v63, 1u);
      a17[1] = v29;
      if (!*(unsigned char *)(a2 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"stride", 6), !v31)) {
        uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "stride", 6uLL);
      }
      uint64_t v32 = InherentAttr;
      if (InherentAttr && (mlir::DenseIntElementsAttr::classof(InherentAttr) & 1) != 0)
      {
        *a11 = v32;
        if (!*(unsigned char *)(a2 + 47) || (uint64_t v33 = mlir::Operation::getInherentAttr(a2, (uint64_t)"dilation", 8), !v34)) {
          uint64_t v33 = mlir::DictionaryAttr::get(a2 + 56, "dilation", 8uLL);
        }
        uint64_t v35 = v33;
        if (v33 && (mlir::DenseIntElementsAttr::classof(v33) & 1) != 0)
        {
          *a10 = v35;
          if (!*(unsigned char *)(a2 + 47) || (uint64_t v36 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding", 7), !v37)) {
            uint64_t v36 = mlir::DictionaryAttr::get(a2 + 56, "padding", 7uLL);
          }
          uint64_t v38 = v36;
          if (v36 && (mlir::DenseIntElementsAttr::classof(v36) & 1) != 0)
          {
            *a12 = v38;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v39 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_mode", 12), !v40))
            {
              uint64_t v39 = mlir::DictionaryAttr::get(a2 + 56, "padding_mode", 0xCuLL);
            }
            uint64_t v41 = v39;
            if (!v39 || (mlir::anec::PaddingModeAttr::classof(v39) & 1) == 0) {
              uint64_t v41 = mlir::anec::BoxCoordinateModeAttr::get(*(void *)(a1 + 8), 0);
            }
            *a8 = v41;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"groups", 6), !v43))
            {
              uint64_t IntegerAttr = mlir::DictionaryAttr::get(a2 + 56, "groups", 6uLL);
            }
            if (!IntegerAttr
              || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            {
              uint64_t v44 = (mlir::Builder *)(a1 + 8);
              uint64_t IntegerType = mlir::Builder::getIntegerType(v44, 0x40u, 0);
              uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v44, IntegerType, 1);
            }
            *a9 = IntegerAttr;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v46 = mlir::Operation::getInherentAttr(a2, (uint64_t)"channel_wise", 12), !v47))
            {
              uint64_t v46 = mlir::DictionaryAttr::get(a2 + 56, "channel_wise", 0xCuLL);
            }
            if (!v46
              || *(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
            {
              uint64_t v46 = 0;
            }
            *a5 = v46;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v48 = mlir::Operation::getInherentAttr(a2, (uint64_t)"kernel_scale", 12), !v49))
            {
              uint64_t v48 = mlir::DictionaryAttr::get(a2 + 56, "kernel_scale", 0xCuLL);
            }
            uint64_t v50 = v48;
            if (v48)
            {
              if (mlir::DenseFPElementsAttr::classof(v48)) {
                uint64_t v51 = v50;
              }
              else {
                uint64_t v51 = 0;
              }
            }
            else
            {
              uint64_t v51 = 0;
            }
            *a4 = v51;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v58 = mlir::Operation::getInherentAttr(a2, (uint64_t)"kernel_zero_point", 17), !v59))
            {
              uint64_t v58 = mlir::DictionaryAttr::get(a2 + 56, "kernel_zero_point", 0x11uLL);
            }
            uint64_t v60 = v58;
            if (v58)
            {
              if (mlir::DenseIntElementsAttr::classof(v58)) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 0;
              }
            }
            else
            {
              uint64_t v61 = 0;
            }
            *a15 = v61;
            return 1;
          }
          uint64_t v52 = *(void *)(a1 + 16);
          if (v52)
          {
            uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
            if (!result) {
              return result;
            }
            uint64_t v54 = *(void *)(a2 + 24);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
          }
        }
        else
        {
          uint64_t v52 = *(void *)(a1 + 16);
          if (v52)
          {
            uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
            if (!result) {
              return result;
            }
            uint64_t v54 = *(void *)(a2 + 24);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
          }
        }
      }
      else
      {
        uint64_t v52 = *(void *)(a1 + 16);
        if (v52)
        {
          uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
          if (!result) {
            return result;
          }
          uint64_t v54 = *(void *)(a2 + 24);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
        }
      }
    }
    return 0;
  }
  uint64_t v56 = *(void *)(a1 + 16);
  if (!v56) {
    return 0;
  }
  uint64_t v57 = v63;
  uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
  if (result) {
  return result;
  }
}

uint64_t mlir::Operation::getAttrOfType<mlir::IntegerAttr>(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(unsigned char *)(a1 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7)) {
    uint64_t result = mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  }
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)result + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::tryCanonDeconvPaddings(mlir::Operation *a1, mlir::Operation *a2, mlir::Operation **a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  v124[23] = *MEMORY[0x1E4F143B8];
  uint64_t v109 = a2;
  unint64_t v110 = a1;
  while (1)
  {
    a5 = (void *)*a5;
    if (!a5) {
      break;
    }
    if (*(_UNKNOWN **)(*(void *)(a5[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id)
    {
      int v11 = "Pattern can be further extended";
LABEL_34:
      uint64_t v120 = v11;
      v122[8] = 259;
      mlir::Operation::emitOpError((uint64_t *)a1, (const void ***)&v120, (uint64_t)&v123);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
      if (v123) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
      return v12;
    }
  }
  uint64_t v12 = *(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v110) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)v12;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    unint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_14:
  }
    uint64_t v22 = 0;
  uint64_t v123 = v12;
  v124[0] = v22;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v123);
  if (v23 != 4)
  {
    a1 = v110;
    int v11 = "Conv2D input must be 4D";
    goto LABEL_34;
  }
  uint64_t v120 = v122;
  uint64_t v121 = 0xA00000000;
  uint64_t Stride = mlir::anec::MaxPool::getStride((mlir::anec::MaxPool *)&v109);
  mlir::getValues<unsigned long long>(Stride, (uint64_t)&v120);
  char v25 = (char *)v120;
  uint64_t v26 = v121 - 4;
  if (v121 != 4)
  {
    uint64_t v27 = v120;
    while (!*v27++)
    {
      if (!--v26) {
        goto LABEL_20;
      }
    }
    v117 = "Padding on Batch / Depth / Channel dimension not supported";
    v119[8] = 259;
    mlir::Operation::emitOpError((uint64_t *)v110, (const void ***)&v117, (uint64_t)&v123);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
    if (v123) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
    goto LABEL_124;
  }
LABEL_20:
  uint64_t v29 = (char *)v120 + 8 * v121;
  long long v30 = *((_OWORD *)v29 - 3);
  long long v31 = *((_OWORD *)v29 - 1);
  *((_OWORD *)v120 + 1) = *((_OWORD *)v29 - 2);
  *((_OWORD *)v25 + 2) = v31;
  *(_OWORD *)char v25 = v30;
  uint64_t v32 = v120;
  unint64_t v33 = v25 - (unsigned char *)v120 + 48;
  LODWORD(v121) = v33 >> 3;
  if (!v121)
  {
LABEL_24:
    int v35 = 0;
    uint64_t v36 = 0;
    goto LABEL_25;
  }
  uint64_t v34 = 8 * (v33 >> 3);
  while (!*v32)
  {
    ++v32;
    v34 -= 8;
    if (!v34) {
      goto LABEL_24;
    }
  }
  v117 = v119;
  uint64_t v118 = 0x500000000;
  uint64_t Padding = mlir::anec::MaxPool::getPadding((mlir::anec::MaxPool *)&v109);
  mlir::getValues<unsigned long long>(Padding, (uint64_t)&v117);
  uint64_t v45 = (char *)v117;
  uint64_t v46 = (char *)v117 + 8 * v118;
  long long v47 = *(_OWORD *)(v46 - 24);
  *((void *)v117 + 2) = *((void *)v46 - 1);
  *(_OWORD *)uint64_t v45 = v47;
  uint64_t v48 = v117;
  LODWORD(v118) = (unint64_t)(v45 - (unsigned char *)v117 + 24) >> 3;
  if (*((void *)v120 + 2) || *((void *)v120 + 3))
  {
    if (*((void *)v120 + 4) || *((void *)v120 + 5))
    {
      char v49 = (char *)v117 + 8;
      if (*((void *)v117 + 1) != *((void *)v117 + 2))
      {
        unint64_t v111 = "Padding mode must be the same on all axes";
        __int16 v114 = 259;
        mlir::Operation::emitOpError((uint64_t *)v110, (const void ***)&v111, (uint64_t)&v123);
        uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
        if (v123) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
        uint64_t v36 = 0;
        int v50 = 0;
        uint64_t v48 = v117;
        goto LABEL_118;
      }
    }
    else
    {
      char v49 = (char *)v117 + 8;
    }
  }
  else
  {
    char v49 = (char *)v117 + 16;
  }
  uint64_t v36 = *(void *)v49;
  int v50 = 1;
LABEL_118:
  if (v48 != v119) {
    free(v48);
  }
  if (!v50) {
    goto LABEL_124;
  }
  if (v36 == 6)
  {
    mlir::anec::Padding::getBackgroundValue(&v109, (uint64_t)&v123);
    double v96 = llvm::APFloat::convertToDouble((void **)&v123);
    uint64_t v97 = (void *)v124[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v98) == v97) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v124);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v124);
    }
    if (v96 == 0.0) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = 6;
    }
  }
  int v35 = 1;
LABEL_25:
  v117 = v119;
  uint64_t v118 = 0x600000000;
  uint64_t v37 = mlir::anec::Convolution::getPadding((mlir::anec::Convolution *)&v110);
  mlir::getValues<unsigned long long>(v37, (uint64_t)&v117);
  if (v118)
  {
    uint64_t v38 = (uint64_t *)v117;
    uint64_t v39 = 8 * v118 - 8;
    do
    {
      uint64_t v40 = *v38++;
      BOOL v41 = v40 != 0;
      if (v40) {
        BOOL v42 = 1;
      }
      else {
        BOOL v42 = v39 == 0;
      }
      v39 -= 8;
    }
    while (!v42);
  }
  else
  {
    BOOL v41 = 0;
  }
  uint64_t PaddingMode = mlir::anec::Convolution::getPaddingMode(&v110);
  if ((v35 & v41) != 1 || v36 == PaddingMode)
  {
    if (v41) {
      uint64_t v53 = PaddingMode;
    }
    else {
      uint64_t v53 = 0;
    }
    if (v35) {
      uint64_t v53 = v36;
    }
    if ((v53 & 0xFFFFFFFFFFFFFFFDLL) == 0)
    {
      uint64_t v101 = v53;
      v115[0] = v116;
      v115[1] = (void *)0x300000000;
      uint64_t v56 = mlir::anec::Convolution::getStride((mlir::anec::Convolution *)&v110);
      mlir::getValues<long long>(v56, (uint64_t)v115);
      uint64_t v57 = *((void *)v120 + 3);
      uint64_t v58 = *((void *)v117 + 3);
      uint64_t v60 = *((void *)v115[0] + 1);
      uint64_t v59 = *((void *)v115[0] + 2);
      uint64_t v61 = *((void *)v117 + 2) + v60 * *((void *)v120 + 2);
      unint64_t v105 = 0;
      unint64_t v106 = 0;
      *(void *)&long long v107 = v61;
      *((void *)&v107 + 1) = v58 + v60 * v57;
      uint64_t v62 = *((void *)v117 + 5) + v59 * *((void *)v120 + 5);
      *(void *)&long long v108 = *((void *)v117 + 4) + v59 * *((void *)v120 + 4);
      *((void *)&v108 + 1) = v62;
      if (a4)
      {
        uint64_t v63 = &a3[a4];
        while (1)
        {
          uint64_t v104 = *a3;
          long long v64 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v104) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v64) {
            goto LABEL_79;
          }
          uint64_t v65 = *v64;
          unint64_t v66 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v67 = *(unsigned int *)(v65 + 16);
          if (!v67) {
            goto LABEL_79;
          }
          uint64_t v68 = *(void **)(v65 + 8);
          uint64_t v69 = &v68[2 * v67];
          do
          {
            unint64_t v70 = v67 >> 1;
            uint64_t v71 = &v68[2 * (v67 >> 1)];
            unint64_t v73 = *v71;
            unint64_t v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66) {
              uint64_t v68 = v72;
            }
            else {
              unint64_t v67 = v70;
            }
          }
          while (v67);
          if (v68 != v69 && *v68 == v66) {
            uint64_t v74 = (uint64_t *)v68[1];
          }
          else {
LABEL_79:
          }
            uint64_t v74 = 0;
          v102[0] = v64;
          v102[1] = v74;
          Height = (mlir::anec *)mlir::anec::Resize::getHeight(&v104);
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v102);
          uint64_t DimFromIndex = mlir::anec::getDimFromIndex(Height, v76);
          if ((DimFromIndex & 0xFF00000000) == 0 || (DimFromIndex - 3) >= 2) {
            break;
          }
          Offset = mlir::anec::InputView::getOffset(&v104);
          unsigned int v79 = mlir::anec::Resize::getHeight(&v104);
          uint64_t v80 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v102) + 8 * v79);
          Size = mlir::anec::InputView::getSize(&v104);
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v102);
          uint64_t v83 = (uint64_t *)(&v105 + 2 * ((uint64_t)mlir::anec::Resize::getHeight(&v104) - v82));
          uint64_t v84 = (char *)Offset + (void)Size - v80 + v83[7];
          v83[6] -= (uint64_t)Offset;
          v83[7] = (uint64_t)v84;
          if (++a3 == v63) {
            goto LABEL_85;
          }
        }
        unint64_t v111 = "Cropping on batch / depth / channel dimension not supported";
        __int16 v114 = 259;
        mlir::Operation::emitOpError((uint64_t *)v110, (const void ***)&v111, (uint64_t)&v123);
        uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
        if (v123) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
      }
      else
      {
LABEL_85:
        if ((v105 & 0x8000000000000000) != 0)
        {
          unint64_t v86 = v105 >> 63;
        }
        else
        {
          unint64_t v85 = v106;
          if ((v106 & 0x8000000000000000) == 0)
          {
            unint64_t v85 = v107;
            if ((v107 & 0x8000000000000000) == 0)
            {
              unint64_t v85 = *((void *)&v107 + 1);
              if ((*((void *)&v107 + 1) & 0x8000000000000000) == 0)
              {
                unint64_t v85 = v108;
                if ((v108 & 0x8000000000000000) == 0) {
                  unint64_t v85 = *((void *)&v108 + 1);
                }
              }
            }
          }
          unint64_t v86 = v85 >> 63;
        }
        if (v86)
        {
          unint64_t v111 = "Cropping output required";
          __int16 v114 = 259;
          mlir::Operation::emitOpError((uint64_t *)v110, (const void ***)&v111, (uint64_t)&v123);
          uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v123);
        }
        else
        {
          v102[0] = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v110) + 8) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v123 = (uint64_t)mlir::Type::cast<mlir::ShapedType>(v102);
          v124[0] = v87;
          uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v123);
          llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v111, ArgAttrsAttr, v89);
          if (v112 <= 4)
          {
            uint64_t v123 = 1;
            llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v111, (uint64_t)v111 + 16, &v123);
          }
          uint64_t v90 = *((void *)v111 + 3);
          if ((uint64_t)v107 >= v90) {
            goto LABEL_111;
          }
          if (*((uint64_t *)&v107 + 1) >= v90) {
            goto LABEL_111;
          }
          uint64_t v91 = *((void *)v111 + 4);
          if ((uint64_t)v108 >= v91 || *((uint64_t *)&v108 + 1) >= v91) {
            goto LABEL_111;
          }
          uint64_t v92 = 2 * v90;
          BOOL v93 = v90 < -1;
          uint64_t v94 = ((_BYTE)v90 + 1) & 1;
          if (v93) {
            uint64_t v94 = -v94;
          }
          if (*((void *)&v107 + 1) + (void)v107 > v92 - *((void *)v115[0] + 1) - v94) {
            goto LABEL_111;
          }
          uint64_t v95 = (v91 + 1) & 1;
          if (v91 < -1) {
            uint64_t v95 = -v95;
          }
          if (*((void *)&v108 + 1) + (void)v108 <= 2 * v91 - *((void *)v115[0] + 2) - v95)
          {
            if (a6) {
              *a6 = v101;
            }
            if (a7)
            {
              llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)a7, 6uLL);
              uint64_t v99 = *a7;
              *(void *)uint64_t v99 = 0;
              *(void *)(v99 + 8) = 0;
              long long v100 = v108;
              *(_OWORD *)(v99 + 16) = v107;
              *(_OWORD *)(v99 + 32) = v100;
            }
            uint64_t v12 = 1;
          }
          else
          {
LABEL_111:
            v102[0] = (uint64_t *)"Padding value not supported by ANEC";
            __int16 v103 = 259;
            mlir::Operation::emitOpError((uint64_t *)v110, (const void ***)v102, (uint64_t)&v123);
            uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v123);
          }
          if (v111 != &v113) {
            free(v111);
          }
        }
      }
      if (v115[0] != v116) {
        free(v115[0]);
      }
      goto LABEL_65;
    }
    uint64_t v54 = (uint64_t *)v110;
    uint64_t v55 = "Unsupported padding mode";
  }
  else
  {
    uint64_t v54 = (uint64_t *)v110;
    uint64_t v55 = "Padding mode of Deconv and Pad ops must be the same";
  }
  unint64_t v111 = v55;
  __int16 v114 = 259;
  mlir::Operation::emitOpError(v54, (const void ***)&v111, (uint64_t)&v123);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
  if (v123) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
LABEL_65:
  if (v117 != v119) {
    free(v117);
  }
LABEL_124:
  if (v120 != v122) {
    free(v120);
  }
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::canonDeconvPaddings(uint64_t a1, uint64_t a2, mlir::Operation *a3, mlir::Operation *a4, mlir::Operation **a5, uint64_t a6, void *a7)
{
  v39[10] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a4;
  int v35 = a3;
  uint64_t v33 = 0;
  uint64_t v37 = v39;
  uint64_t v38 = 0xA00000000;
  uint64_t v36 = 6;
  BOOL v9 = (mlir::Builder *)(a1 + 8);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v9, 0x40u, 0);
  int v11 = (void *)mlir::RankedTensorType::get((uint64_t)&v36, 1, IntegerType, 0);
  uint64_t v12 = v11;
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v13 = *v11;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    unint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_10:
  }
    uint64_t v22 = 0;
  uint64_t v36 = mlir::DenseElementsAttr::getFromRawBuffer(v12, v22, v37, 8 * v38, 8, 1, 0);
  uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v34);
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v35);
  uint64_t Stride = mlir::anec::Convolution::getStride((mlir::anec::Convolution *)&v35);
  uint64_t Dilation = mlir::anec::Convolution::getDilation((mlir::anec::Convolution *)&v35);
  Groups = mlir::anec::Convolution::getGroups(&v35);
  BOOL IncPad = mlir::anec::AveragePool::getIncPad(&v35);
  uint64_t KernelScaleAttr = mlir::anec::Convolution::getKernelScaleAttr(&v35);
  uint64_t KernelZeroPointAttr = mlir::anec::Convolution::getKernelZeroPointAttr(&v35);
  uint64_t v23 = mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v9, a2, &Input, &Filter, &Stride, &Dilation, &v36, &v33, (uint64_t *)&Groups, (char *)&IncPad, &KernelScaleAttr, &KernelZeroPointAttr);
  if (v37 != v39) {
    free(v37);
  }
  return (char *)v23 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t mlir::anec::anonymous namespace'::static_dag_matcher_0(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Padding,void>::id) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v32 = v9;
  if (v9)
  {
    *a6 = v9;
    *a3 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v32, 0);
    a3[1] = v14;
    if (*(unsigned char *)(a2 + 47)
      && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_modes", 13), v16))
    {
      uint64_t v17 = InherentAttr;
      if (!InherentAttr)
      {
LABEL_24:
        uint64_t v25 = *(void *)(a1 + 16);
        if (v25)
        {
          uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
          if (result) {
          return result;
          }
        }
        return 0;
      }
    }
    else
    {
      uint64_t v17 = mlir::DictionaryAttr::get(a2 + 56, "padding_modes", 0xDuLL);
      if (!v17) {
        goto LABEL_24;
      }
    }
    if ((mlir::DenseIntElementsAttr::classof(v17) & 1) == 0) {
      goto LABEL_24;
    }
    *a7 = v17;
    if (!*(unsigned char *)(a2 + 47) || (uint64_t v18 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_sizes", 13), !v19)) {
      uint64_t v18 = mlir::DictionaryAttr::get(a2 + 56, "padding_sizes", 0xDuLL);
    }
    uint64_t v20 = v18;
    if (v18 && (mlir::DenseIntElementsAttr::classof(v18) & 1) != 0)
    {
      *a4 = v20;
      if (!*(unsigned char *)(a2 + 47) || (uint64_t v21 = mlir::Operation::getInherentAttr(a2, (uint64_t)"background_value", 16), !v22)) {
        uint64_t v21 = mlir::DictionaryAttr::get(a2 + 56, "background_value", 0x10uLL);
      }
      if (v21 && *(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      {
        *a5 = v21;
        return 1;
      }
      uint64_t v23 = *(void *)(a1 + 16);
      if (!v23) {
        return 0;
      }
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (result) {
    }
      }
    else
    {
      uint64_t v27 = *(void *)(a1 + 16);
      if (!v27) {
        return 0;
      }
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (result) {
    }
      }
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 16);
    if (!v26) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Deconvolution type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_1>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Padding type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_1>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'padding_modes' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_2>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'padding_sizes' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_3>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'background_value' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_2>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_3>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_4>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

void *llvm::SmallVector<long long,5u>::SmallVector<long long,void>(void *a1, const void *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  size_t v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, (8 * a3) >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + (v6 >> 3);
  return a1;
}

void llvm::SmallVectorImpl<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'conv_op, pad_op, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv1_step' failed to satisfy constraint: ''");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"anec.deconvolution";
    v29[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  uint64_t v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::~ANEC_PadDeconvCrop2Folding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop2Folding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop2Folding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v85[4] = *MEMORY[0x1E4F143B8];
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v65[0] = v5;
  v65[1] = v6;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  v62[0] = v5;
  v62[1] = v6;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v83 = v85;
  v85[0] = a2;
  uint64_t v84 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v57 = v7;
  uint64_t v58 = v7;
  unint64_t v78 = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v57, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v78);
  if (!DefiningOp)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    uint64_t v17 = v57;
    if (mlir::RewriterBase::Listener::classof(v13))
    {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
  uint64_t v9 = DefiningOp;
  uint64_t v10 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v12 = (uint64_t *)DefiningOp;
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v78 = v12;
  if (!v11)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v14 = *(void *)(v9 + 24);
LABEL_14:
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v13 + 64))(v13, v14, v15, &NextResultAtOffset);
LABEL_18:
      uint64_t v13 = v16;
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  uint64_t v60 = DefiningOp;
  uint64_t NextResultAtOffset = *(void *)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v78, 0) + 24);
  uint64_t v18 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  if (!v18)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    uint64_t v23 = v78;
    if (mlir::RewriterBase::Listener::classof(v13))
    {
      uint64_t v14 = v23[3];
      goto LABEL_14;
    }
    goto LABEL_84;
  }
  uint64_t v19 = v18;
  {
    int v20 = v84;
    if (v84 >= HIDWORD(v84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
      int v20 = v84;
    }
    v83[v20] = v19;
    LODWORD(v84) = v84 + 1;
    if (!*(unsigned char *)(v9 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v9, (uint64_t)"dimension", 9), !v22)) {
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v9 + 56, "dimension", 9uLL);
    }
    if (!InherentAttr
      || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v13 = *((void *)a3 + 2);
      if (!v13) {
        goto LABEL_85;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v14 = *(void *)(v9 + 24);
        goto LABEL_14;
      }
      goto LABEL_84;
    }
    if (!*(unsigned char *)(v9 + 47) || (uint64_t v24 = mlir::Operation::getInherentAttr(v9, (uint64_t)"offset", 6), !v25)) {
      uint64_t v24 = mlir::DictionaryAttr::get(v9 + 56, "offset", 6uLL);
    }
    if (!v24 || *(_UNKNOWN **)(*(void *)v24 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v13 = *((void *)a3 + 2);
      if (!v13) {
        goto LABEL_85;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v14 = *(void *)(v9 + 24);
        goto LABEL_14;
      }
      goto LABEL_84;
    }
    if (!*(unsigned char *)(v9 + 47) || (uint64_t v26 = mlir::Operation::getInherentAttr(v9, (uint64_t)"size", 4), !v27)) {
      uint64_t v26 = mlir::DictionaryAttr::get(v9 + 56, "size", 4uLL);
    }
    if (!v26 || *(_UNKNOWN **)(*(void *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      goto LABEL_18;
    }
    uint64_t v28 = mlir::Operation::getAttrOfType<mlir::IntegerAttr>(v9, "step", 4uLL);
    if (!v28)
    {
      goto LABEL_18;
    }
    uint64_t v68 = v28;
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v83, v9);
    if (!*((unsigned char *)a2 + 47) || (uint64_t v29 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dimension", 9), !v30)) {
      uint64_t v29 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dimension", 9uLL);
    }
    if (!v29 || *(_UNKNOWN **)(*(void *)v29 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
LABEL_57:
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t **))(*(void *)v31 + 64))(v31, v32, v33, &v78);
      goto LABEL_18;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v34 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"offset", 6), !v35)) {
      uint64_t v34 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "offset", 6uLL);
    }
    if (!v34 || *(_UNKNOWN **)(*(void *)v34 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v36 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"size", 4), !v37)) {
      uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "size", 4uLL);
    }
    if (!v36 || *(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v38 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"step", 4), !v39)) {
      uint64_t v38 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "step", 4uLL);
    }
    if (!v38 || *(_UNKNOWN **)(*(void *)v38 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    uint64_t v74 = v38;
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v63, 0);
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    BOOL v42 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    uint64_t v43 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v61, 0);
    uint64_t v82 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
    uint64_t v44 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v82);
    uint64_t v45 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v60, 0);
    uint64_t v56 = mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0);
    unint64_t v78 = (uint64_t *)mlir::Value::getDefiningOp((mlir::Value *)&v56);
    uint64_t v46 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
    uint64_t v55 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, 0);
    uint64_t v79 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
    uint64_t v48 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0);
    {
      goto LABEL_18;
    }
    mlir::IntegerAttr::getValue(&v68, (llvm::APInt *)&v78);
    int v49 = v79;
    if (v79 >= 0x41)
    {
      if (v49 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) >= 0x41)
      {
        if (v78) {
          operator delete[](v78);
        }
        goto LABEL_100;
      }
      uint64_t v50 = *v78;
      operator delete[](v78);
      if (v50 != 1)
      {
LABEL_100:
        goto LABEL_18;
      }
    }
    else if (v78 != (uint64_t *)1)
    {
      goto LABEL_100;
    }
    mlir::IntegerAttr::getValue(&v74, (llvm::APInt *)&v78);
    int v51 = v79;
    if (v79 >= 0x41)
    {
      if (v51 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) >= 0x41)
      {
        if (v78) {
          operator delete[](v78);
        }
        goto LABEL_106;
      }
      uint64_t v52 = *v78;
      operator delete[](v78);
      if (v52 != 1)
      {
LABEL_106:
        goto LABEL_18;
      }
    }
    else if (v78 != (uint64_t *)1)
    {
      goto LABEL_106;
    }
    uint64_t v53 = *(void *)(v83[1] + 24);
    unint64_t v78 = *(uint64_t **)(*v83 + 24);
    uint64_t v79 = v53;
    uint64_t v54 = *(void *)(v83[3] + 24);
    uint64_t v80 = *(void *)(v83[2] + 24);
    uint64_t v81 = v54;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, &v78, (mlir::MLIRContext *)4, 0);
  }
LABEL_84:
  uint64_t v13 = 0;
LABEL_85:
  if (v83 != v85) {
    free(v83);
  }
  return v13;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::InputView type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'conv_op, pad_op, crop_op, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv1_step' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv2_step' failed to satisfy constraint: ''");
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::~ANEC_PadDeconvFolding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvFolding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v52[4] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v44[0] = v5;
  v44[1] = v6;
  uint64_t v42 = 0;
  uint64_t v50 = v52;
  v52[0] = a2;
  uint64_t v51 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  BOOL v41 = v7;
  uint64_t v43 = v7;
  v49[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v41, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v49);
  if (!DefiningOp)
  {
    uint64_t v34 = *((void *)a3 + 2);
    if (!v34) {
      goto LABEL_70;
    }
    char v35 = v41;
    if (mlir::RewriterBase::Listener::classof(v34))
    {
LABEL_65:
      uint64_t v34 = v36;
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  uint64_t v9 = DefiningOp;
  int v10 = v51;
  if (v51 >= HIDWORD(v51))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
    int v10 = v51;
  }
  v50[v10] = v9;
  LODWORD(v51) = v51 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v41, 1u);
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), !v12))
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
  }
  if (!InherentAttr || (mlir::DenseIntElementsAttr::classof(InherentAttr) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v13 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v14)) {
    uint64_t v13 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  if (!v13 || (mlir::DenseIntElementsAttr::classof(v13) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v15 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v16)) {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
  }
  if (!v15 || (mlir::DenseIntElementsAttr::classof(v15) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
LABEL_64:
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, v49);
    goto LABEL_65;
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v17 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v18))
  {
    uint64_t v17 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
  }
  if (!v17 || (mlir::anec::PaddingModeAttr::classof(v17) & 1) == 0) {
    mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
  }
  if (!v19 || *(_UNKNOWN **)(*(void *)v19 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
    mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1);
  }
  if (!*((unsigned char *)a2 + 47) || (mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v22)) {
    mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v23 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v24))
  {
    uint64_t v23 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
  }
  if (v23) {
    mlir::DenseFPElementsAttr::classof(v23);
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v26))
  {
    uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
  }
  if (v25) {
    mlir::DenseIntElementsAttr::classof(v25);
  }
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v43, 0);
  v49[0] = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  uint64_t v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v49);
  uint64_t v29 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v42, 0);
  uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0);
  char v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  uint64_t v31 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v43, 0);
  uint64_t v32 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0);
  {
    uint64_t v33 = *(void **)(v50[1] + 24);
    v49[0] = *(void **)(*v50 + 24);
    v49[1] = v33;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v49, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v37 = *((void *)a3 + 2);
  if (v37 && mlir::RewriterBase::Listener::classof(v37))
  {
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
LABEL_69:
  uint64_t v34 = 0;
LABEL_70:
  if (v50 != v52) {
    free(v50);
  }
  return v34;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, pad_op' failed to satisfy constraint: ''");
}

void mlir::anec::getANECLateCanonicalizationPatterns(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v138, 1);
  mlir::Pattern::Pattern((uint64_t)(v3 + 1), (uint64_t)"anec.gain_offset_control", 24, (__int16)v138, v2, 0, 0);
  *uint64_t v3 = &unk_1EC9CB580;
  if (!v3[9])
  {
    v138 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_GOCFolding]";
    unint64_t v139 = 100;
    unint64_t v4 = llvm::StringRef::find((uint64_t *)&v138, "DesiredTypeName = ", 0x12uLL, 0);
    if (v139 >= v4) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = v139;
    }
    uint64_t v6 = &v138[v5];
    unint64_t v7 = v139 - v5;
    if (v139 - v5 >= 0x12) {
      uint64_t v8 = 18;
    }
    else {
      uint64_t v8 = v139 - v5;
    }
    uint64_t v9 = &v6[v8];
    unint64_t v10 = v7 - v8;
    if (v10 >= v10 - 1) {
      --v10;
    }
    v3[8] = v9;
    v3[9] = v10;
  }
  unint64_t v11 = *((unsigned int *)v3 + 22);
  if (v11 > *((_DWORD *)v3 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 10), v3 + 12, v11, 16);
    LODWORD(v11) = *((_DWORD *)v3 + 22);
  }
  *((_DWORD *)v3 + 22) = v11;
  uint64_t v13 = (char *)a1[2];
  unint64_t v12 = a1[3];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = (char *)a1[1];
    uint64_t v16 = (v13 - v15) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      goto LABEL_158;
    }
    uint64_t v18 = v12 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        goto LABEL_159;
      }
      char v20 = (char *)operator new(8 * v19);
    }
    else
    {
      char v20 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    char v22 = &v20[8 * v19];
    *(void *)uint64_t v21 = v3;
    char v14 = v21 + 8;
    if (v13 == v15)
    {
      a1[1] = (uint64_t)v21;
      a1[2] = (uint64_t)v14;
      a1[3] = (uint64_t)v22;
    }
    else
    {
      unint64_t v23 = v13 - v15 - 8;
      if (v23 < 0x78
        || &v13[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v21 && &v20[v13 - v15 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_162;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      char v26 = &v13[-v25];
      v21 -= v25;
      char v27 = &v20[8 * v16 - 16];
      uint64_t v28 = v13 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v31 = *((_OWORD *)v28 - 1);
        long long v30 = *(_OWORD *)v28;
        *((_OWORD *)v28 - 1) = 0uLL;
        *(_OWORD *)uint64_t v28 = 0uLL;
        *((_OWORD *)v27 - 1) = v31;
        *(_OWORD *)char v27 = v30;
        v27 -= 32;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      uint64_t v13 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_162:
        do
        {
          uint64_t v32 = *((void *)v13 - 1);
          v13 -= 8;
          *(void *)uint64_t v13 = 0;
          *((void *)v21 - 1) = v32;
          v21 -= 8;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (char *)a1[1];
      uint64_t v33 = (char *)a1[2];
      a1[1] = (uint64_t)v21;
      a1[2] = (uint64_t)v14;
      a1[3] = (uint64_t)v22;
      while (v33 != v13)
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        uint64_t v34 = v35;
        *(void *)uint64_t v33 = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)uint64_t v13 = v3;
    char v14 = v13 + 8;
  }
  a1[2] = (uint64_t)v14;
  uint64_t v36 = *a1;
  uint64_t v37 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v138, 1);
  mlir::Pattern::Pattern((uint64_t)(v37 + 1), (uint64_t)"anec.invert", 11, (__int16)v138, v36, 0, 0);
  *uint64_t v37 = &unk_1EC9CBA28;
  if (!v37[9])
  {
    v138 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_InvertFolding]";
    unint64_t v139 = 103;
    unint64_t v38 = llvm::StringRef::find((uint64_t *)&v138, "DesiredTypeName = ", 0x12uLL, 0);
    if (v139 >= v38) {
      unint64_t v39 = v38;
    }
    else {
      unint64_t v39 = v139;
    }
    uint64_t v40 = &v138[v39];
    unint64_t v41 = v139 - v39;
    if (v139 - v39 >= 0x12) {
      uint64_t v42 = 18;
    }
    else {
      uint64_t v42 = v139 - v39;
    }
    uint64_t v43 = &v40[v42];
    unint64_t v44 = v41 - v42;
    if (v44 >= v44 - 1) {
      --v44;
    }
    v37[8] = v43;
    v37[9] = v44;
  }
  unint64_t v45 = *((unsigned int *)v37 + 22);
  if (v45 > *((_DWORD *)v37 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 10), v37 + 12, v45, 16);
    LODWORD(v45) = *((_DWORD *)v37 + 22);
  }
  *((_DWORD *)v37 + 22) = v45;
  uint64_t v47 = (char *)a1[2];
  unint64_t v46 = a1[3];
  if ((unint64_t)v47 >= v46)
  {
    int v49 = (char *)a1[1];
    uint64_t v50 = (v47 - v49) >> 3;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_158;
    }
    uint64_t v52 = v46 - (void)v49;
    if (v52 >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_159;
      }
      uint64_t v54 = (char *)operator new(8 * v53);
    }
    else
    {
      uint64_t v54 = 0;
    }
    uint64_t v55 = &v54[8 * v50];
    uint64_t v56 = &v54[8 * v53];
    *(void *)uint64_t v55 = v37;
    uint64_t v48 = v55 + 8;
    if (v47 == v49)
    {
      a1[1] = (uint64_t)v55;
      a1[2] = (uint64_t)v48;
      a1[3] = (uint64_t)v56;
    }
    else
    {
      unint64_t v57 = v47 - v49 - 8;
      if (v57 < 0x78
        || &v47[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v55 && &v54[v47 - v49 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v47)
      {
        goto LABEL_163;
      }
      uint64_t v58 = (v57 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v60 = &v47[-v59];
      v55 -= v59;
      uint64_t v61 = &v54[8 * v50 - 16];
      uint64_t v62 = v47 - 16;
      uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v65 = *((_OWORD *)v62 - 1);
        long long v64 = *(_OWORD *)v62;
        *((_OWORD *)v62 - 1) = 0uLL;
        *(_OWORD *)uint64_t v62 = 0uLL;
        *((_OWORD *)v61 - 1) = v65;
        *(_OWORD *)uint64_t v61 = v64;
        v61 -= 32;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      uint64_t v47 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_163:
        do
        {
          uint64_t v66 = *((void *)v47 - 1);
          v47 -= 8;
          *(void *)uint64_t v47 = 0;
          *((void *)v55 - 1) = v66;
          v55 -= 8;
        }
        while (v47 != v49);
      }
      uint64_t v47 = (char *)a1[1];
      uint64_t v67 = (char *)a1[2];
      a1[1] = (uint64_t)v55;
      a1[2] = (uint64_t)v48;
      a1[3] = (uint64_t)v56;
      while (v67 != v47)
      {
        uint64_t v69 = *((void *)v67 - 1);
        v67 -= 8;
        uint64_t v68 = v69;
        *(void *)uint64_t v67 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
    }
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(void *)uint64_t v47 = v37;
    uint64_t v48 = v47 + 8;
  }
  a1[2] = (uint64_t)v48;
  uint64_t v70 = *a1;
  uint64_t v71 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v138, 1);
  mlir::Pattern::Pattern((uint64_t)(v71 + 1), (uint64_t)"anec.mult", 9, (__int16)v138, v70, 0, 0);
  *uint64_t v71 = &unk_1EC9CB5C0;
  if (!v71[9])
  {
    v138 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::ANEC_MulFolding]";
    unint64_t v139 = 100;
    unint64_t v72 = llvm::StringRef::find((uint64_t *)&v138, "DesiredTypeName = ", 0x12uLL, 0);
    if (v139 >= v72) {
      unint64_t v73 = v72;
    }
    else {
      unint64_t v73 = v139;
    }
    uint64_t v74 = &v138[v73];
    unint64_t v75 = v139 - v73;
    if (v139 - v73 >= 0x12) {
      uint64_t v76 = 18;
    }
    else {
      uint64_t v76 = v139 - v73;
    }
    uint64_t v77 = &v74[v76];
    unint64_t v78 = v75 - v76;
    if (v78 >= v78 - 1) {
      --v78;
    }
    v71[8] = v77;
    v71[9] = v78;
  }
  unint64_t v79 = *((unsigned int *)v71 + 22);
  if (v79 > *((_DWORD *)v71 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v71 + 10), v71 + 12, v79, 16);
    LODWORD(v79) = *((_DWORD *)v71 + 22);
  }
  *((_DWORD *)v71 + 22) = v79;
  uint64_t v81 = (char *)a1[2];
  unint64_t v80 = a1[3];
  if ((unint64_t)v81 >= v80)
  {
    uint64_t v83 = (char *)a1[1];
    uint64_t v84 = (v81 - v83) >> 3;
    unint64_t v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 61) {
      goto LABEL_158;
    }
    uint64_t v86 = v80 - (void)v83;
    if (v86 >> 2 > v85) {
      unint64_t v85 = v86 >> 2;
    }
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v87 = v85;
    }
    if (v87)
    {
      if (v87 >> 61) {
        goto LABEL_159;
      }
      uint64_t v88 = (char *)operator new(8 * v87);
    }
    else
    {
      uint64_t v88 = 0;
    }
    uint64_t v89 = &v88[8 * v84];
    uint64_t v90 = &v88[8 * v87];
    *(void *)uint64_t v89 = v71;
    uint64_t v82 = v89 + 8;
    if (v81 == v83)
    {
      a1[1] = (uint64_t)v89;
      a1[2] = (uint64_t)v82;
      a1[3] = (uint64_t)v90;
    }
    else
    {
      unint64_t v91 = v81 - v83 - 8;
      if (v91 < 0x78
        || &v81[-(v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v89 && &v88[v81 - v83 - (v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v81)
      {
        goto LABEL_164;
      }
      uint64_t v92 = (v91 >> 3) + 1;
      uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v94 = &v81[-v93];
      v89 -= v93;
      uint64_t v95 = &v88[8 * v84 - 16];
      double v96 = v81 - 16;
      uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *((_OWORD *)v96 - 1);
        long long v98 = *(_OWORD *)v96;
        *((_OWORD *)v96 - 1) = 0uLL;
        *(_OWORD *)double v96 = 0uLL;
        *((_OWORD *)v95 - 1) = v99;
        *(_OWORD *)uint64_t v95 = v98;
        v95 -= 32;
        v96 -= 32;
        v97 -= 4;
      }
      while (v97);
      uint64_t v81 = v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_164:
        do
        {
          uint64_t v100 = *((void *)v81 - 1);
          v81 -= 8;
          *(void *)uint64_t v81 = 0;
          *((void *)v89 - 1) = v100;
          v89 -= 8;
        }
        while (v81 != v83);
      }
      uint64_t v81 = (char *)a1[1];
      uint64_t v101 = (char *)a1[2];
      a1[1] = (uint64_t)v89;
      a1[2] = (uint64_t)v82;
      a1[3] = (uint64_t)v90;
      while (v101 != v81)
      {
        uint64_t v103 = *((void *)v101 - 1);
        v101 -= 8;
        uint64_t v102 = v103;
        *(void *)uint64_t v101 = 0;
        if (v103) {
          (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
        }
      }
    }
    if (v81) {
      operator delete(v81);
    }
  }
  else
  {
    *(void *)uint64_t v81 = v71;
    uint64_t v82 = v81 + 8;
  }
  a1[2] = (uint64_t)v82;
  uint64_t v104 = *a1;
  unint64_t v105 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v138, 1);
  mlir::Pattern::Pattern((uint64_t)(v105 + 1), (uint64_t)"anec.cast", 9, (__int16)v138, v104, 0, 0);
  *unint64_t v105 = &unk_1EC9CB660;
  if (!v105[9])
  {
    v138 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeCast]";
    unint64_t v139 = 101;
    unint64_t v106 = llvm::StringRef::find((uint64_t *)&v138, "DesiredTypeName = ", 0x12uLL, 0);
    if (v139 >= v106) {
      unint64_t v107 = v106;
    }
    else {
      unint64_t v107 = v139;
    }
    long long v108 = &v138[v107];
    unint64_t v109 = v139 - v107;
    if (v139 - v107 >= 0x12) {
      uint64_t v110 = 18;
    }
    else {
      uint64_t v110 = v139 - v107;
    }
    unint64_t v111 = &v108[v110];
    unint64_t v112 = v109 - v110;
    if (v112 >= v112 - 1) {
      --v112;
    }
    v105[8] = v111;
    v105[9] = v112;
  }
  unint64_t v113 = *((unsigned int *)v105 + 22);
  if (v113 > *((_DWORD *)v105 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v105 + 10), v105 + 12, v113, 16);
    LODWORD(v113) = *((_DWORD *)v105 + 22);
  }
  *((_DWORD *)v105 + 22) = v113;
  uint64_t v115 = (char *)a1[2];
  unint64_t v114 = a1[3];
  if ((unint64_t)v115 < v114)
  {
    *(void *)uint64_t v115 = v105;
    v116 = v115 + 8;
    goto LABEL_157;
  }
  v117 = (char *)a1[1];
  uint64_t v118 = (v115 - v117) >> 3;
  unint64_t v119 = v118 + 1;
  if ((unint64_t)(v118 + 1) >> 61) {
LABEL_158:
  }
    abort();
  uint64_t v120 = v114 - (void)v117;
  if (v120 >> 2 > v119) {
    unint64_t v119 = v120 >> 2;
  }
  if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v121 = v119;
  }
  if (!v121)
  {
    __int32 v122 = 0;
    goto LABEL_142;
  }
  if (v121 >> 61) {
LABEL_159:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  __int32 v122 = (char *)operator new(8 * v121);
LABEL_142:
  uint64_t v123 = &v122[8 * v118];
  v124 = &v122[8 * v121];
  *(void *)uint64_t v123 = v105;
  v116 = v123 + 8;
  if (v115 == v117)
  {
    a1[1] = (uint64_t)v123;
    a1[2] = (uint64_t)v116;
    a1[3] = (uint64_t)v124;
  }
  else
  {
    unint64_t v125 = v115 - v117 - 8;
    if (v125 < 0x78
      || &v115[-(v125 & 0xFFFFFFFFFFFFFFF8) - 8] < v123
      && &v122[v115 - v117 - (v125 & 0xFFFFFFFFFFFFFFF8) - 8] < v115)
    {
      goto LABEL_165;
    }
    uint64_t v126 = (v125 >> 3) + 1;
    uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
    v128 = &v115[-v127];
    v123 -= v127;
    uint64_t v129 = &v122[8 * v118 - 16];
    v130 = v115 - 16;
    uint64_t v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v133 = *((_OWORD *)v130 - 1);
      long long v132 = *(_OWORD *)v130;
      *((_OWORD *)v130 - 1) = 0uLL;
      *(_OWORD *)v130 = 0uLL;
      *((_OWORD *)v129 - 1) = v133;
      *(_OWORD *)uint64_t v129 = v132;
      v129 -= 32;
      v130 -= 32;
      v131 -= 4;
    }
    while (v131);
    uint64_t v115 = v128;
    if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_165:
      do
      {
        uint64_t v134 = *((void *)v115 - 1);
        v115 -= 8;
        *(void *)uint64_t v115 = 0;
        *((void *)v123 - 1) = v134;
        v123 -= 8;
      }
      while (v115 != v117);
    }
    uint64_t v115 = (char *)a1[1];
    __int16 v135 = (char *)a1[2];
    a1[1] = (uint64_t)v123;
    a1[2] = (uint64_t)v116;
    a1[3] = (uint64_t)v124;
    while (v135 != v115)
    {
      uint64_t v137 = *((void *)v135 - 1);
      v135 -= 8;
      uint64_t v136 = v137;
      *(void *)__int16 v135 = 0;
      if (v137) {
        (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
      }
    }
  }
  if (v115) {
    operator delete(v115);
  }
LABEL_157:
  a1[2] = (uint64_t)v116;
}

void mlir::anec::anonymous namespace'::ANEC_GOCFolding::~ANEC_GOCFolding(mlir::anec::_anonymous_namespace_::ANEC_GOCFolding *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = 0;
  }
  v23[0] = v5;
  v23[1] = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 0);
  uint64_t v7 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 1u);
  uint64_t v8 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 2u);
  uint64_t v24 = *(void **)(ODSOperands + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || (uint64_t v10 = DefiningOp,
        uint64_t v11 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v10 + 48) + 32))(*(void *)(v10 + 48), v11) & 1) == 0))
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18 || !mlir::RewriterBase::Listener::classof(v18)) {
      goto LABEL_21;
    }
    uint64_t v19 = *((void *)a2 + 3);
    goto LABEL_20;
  }
  uint64_t v24 = *(void **)(v7 + 24);
  uint64_t v12 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!v12
    || (uint64_t v13 = v12,
        uint64_t v14 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 48) + 32))(*(void *)(v13 + 48), v14) & 1) == 0))
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18 || !mlir::RewriterBase::Listener::classof(v18)) {
      goto LABEL_21;
    }
    uint64_t v19 = *((void *)a2 + 3);
LABEL_20:
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v18 + 64))(v18, v19, v20, &v24);
    goto LABEL_22;
  }
  uint64_t v24 = *(void **)(v8 + 24);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v16 + 48) + 32))(*(void *)(v16 + 48), v17))
    {
      uint64_t v24 = *(void **)(*v25 + 24);
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
    }
  }
  uint64_t v18 = *((void *)a3 + 2);
  if (v18 && mlir::RewriterBase::Listener::classof(v18))
  {
    uint64_t v19 = *((void *)a2 + 3);
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v21 = 0;
LABEL_22:
  if (v25 != v27) {
    free(v25);
  }
  return v21;
}

char *mlir::anec::anonymous namespace'::foldGOCLike(uint64_t a1, uint64_t a2, void *a3, mlir::AffineMap *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v118[6] = *MEMORY[0x1E4F143B8];
  uint64_t v106 = a5;
  v116 = (float *)v118;
  uint64_t v117 = 0xC00000000;
  unint64_t v113 = (float *)v115;
  uint64_t v114 = 0xC00000000;
  uint64_t v110 = v112;
  uint64_t v111 = 0xC00000000;
  uint64_t v12 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a7, (uint64_t)&v116);
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a7, (uint64_t)&v116);
  }
  uint64_t v24 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a8 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a8, (uint64_t)&v113);
    if (!a9) {
      goto LABEL_87;
    }
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a8, (uint64_t)&v113);
    if (!a9) {
      goto LABEL_87;
    }
  }
  uint64_t v36 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a9 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v36 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a9, (uint64_t)&v110);
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a9, (uint64_t)&v110);
  }
LABEL_87:
  if (a6 < 1)
  {
    uint64_t v40 = 1;
    uint64_t v37 = a3;
    unint64_t v38 = (unint64_t)a4;
    goto LABEL_96;
  }
  uint64_t v37 = a3;
  unint64_t v38 = (unint64_t)a4;
  if (a6 == 1)
  {
    unint64_t v39 = 0;
    uint64_t v40 = 1;
LABEL_94:
    unint64_t v45 = a6 - v39;
    unint64_t v46 = &a3[v39];
    do
    {
      uint64_t v47 = *v46++;
      v40 *= v47;
      --v45;
    }
    while (v45);
    goto LABEL_96;
  }
  unint64_t v39 = a6 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v41 = a3 + 1;
  uint64_t v42 = 1;
  unint64_t v43 = a6 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v44 = 1;
  do
  {
    v42 *= *(v41 - 1);
    v44 *= *v41;
    v41 += 2;
    v43 -= 2;
  }
  while (v43);
  uint64_t v40 = v44 * v42;
  if (v39 != a6) {
    goto LABEL_94;
  }
LABEL_96:
  uint64_t v48 = a6 + 1;
  if (a6 + 1 >= v38)
  {
    uint64_t v50 = 1;
    goto LABEL_105;
  }
  unint64_t v49 = v38 + ~a6;
  if (v49 < 2)
  {
    uint64_t v50 = 1;
LABEL_103:
    unint64_t v55 = v38 - v48;
    uint64_t v56 = &v37[v48];
    do
    {
      uint64_t v57 = *v56++;
      v50 *= v57;
      --v55;
    }
    while (v55);
    goto LABEL_105;
  }
  v48 += v49 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v51 = &v37[a6 + 2];
  uint64_t v52 = 1;
  unint64_t v53 = v49 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v54 = 1;
  do
  {
    v52 *= *(v51 - 1);
    v54 *= *v51;
    v51 += 2;
    v53 -= 2;
  }
  while (v53);
  uint64_t v50 = v54 * v52;
  if (v49 != (v49 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_103;
  }
LABEL_105:
  uint64_t v58 = v37[a6];
  unint64_t v107 = v109;
  uint64_t v108 = 0xC00000000;
  if (v40 >= 1)
  {
    uint64_t v59 = 0;
    unsigned int v60 = 0;
    for (uint64_t i = 0; i != v40; ++i)
    {
      if (v58 >= 1)
      {
        uint64_t v62 = 0;
        uint64_t v63 = v59;
        do
        {
          uint64_t v64 = v50;
          uint64_t v65 = v63;
          if (v50 >= 1)
          {
            do
            {
              if (v117 == 1) {
                uint64_t v66 = 0;
              }
              else {
                uint64_t v66 = v65;
              }
              float v67 = v116[v66];
              if (v111)
              {
                if (v111 == 1) {
                  uint64_t v68 = 0;
                }
                else {
                  uint64_t v68 = v62;
                }
                float v67 = v67 + *((float *)v110 + v68);
              }
              if (v114 == 1) {
                uint64_t v69 = 0;
              }
              else {
                uint64_t v69 = v62;
              }
              float v70 = v113[v69];
              if (v60 >= HIDWORD(v108))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v60 + 1, 4);
                unsigned int v60 = v108;
              }
              *((float *)v107 + v60) = v67 * v70;
              unsigned int v60 = v108 + 1;
              LODWORD(v108) = v108 + 1;
              ++v65;
              --v64;
            }
            while (v64);
          }
          ++v62;
          v63 += v50;
        }
        while (v62 != v58);
      }
      v59 += v50 * v58;
    }
  }
  if (mlir::Type::isF16((mlir::Type *)&v106))
  {
    uint64_t v104 = (void *)mlir::MemRefType::get(a3, a4, v106, 0, 0, 0);
    uint64_t F32Type = mlir::Builder::getF32Type((mlir::Float32Type **)(a1 + 8), v71);
    unint64_t v73 = (void *)mlir::RankedTensorType::get((uint64_t)a3, (uint64_t)a4, F32Type, 0);
    v102[0] = mlir::createRawElementsAttr(v73, v107, (const void *)(4 * v108));
    v102[1] = v74;
    unint64_t v75 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a1 + 8), a2, (uint64_t *)&v104, v102);
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v76 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)a3, (uint64_t)a4, v106, 0);
    uint64_t v77 = (uint64_t)v76;
    if (!v76) {
      goto LABEL_138;
    }
    uint64_t v78 = *v76;
    unint64_t v79 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v80 = *(unsigned int *)(v78 + 16);
    if (!v80) {
      goto LABEL_138;
    }
    uint64_t v81 = *(void **)(v78 + 8);
    uint64_t v82 = &v81[2 * v80];
    do
    {
      unint64_t v83 = v80 >> 1;
      uint64_t v84 = &v81[2 * (v80 >> 1)];
      unint64_t v86 = *v84;
      unint64_t v85 = v84 + 2;
      v80 += ~(v80 >> 1);
      if (v86 < v79) {
        uint64_t v81 = v85;
      }
      else {
        unint64_t v80 = v83;
      }
    }
    while (v80);
    if (v81 != v82 && *v81 == v79) {
      uint64_t v87 = v81[1];
    }
    else {
LABEL_138:
    }
      uint64_t v87 = 0;
    mlir::mps::CPUNDArray::tryMakeAliasedArray(v77, v87, (uint64_t)&v104, (uint64_t *)v102);
    if (mlir::Type::isSignedInteger((mlir::Type *)&v106, 8))
    {
      if (v108)
      {
        unint64_t v88 = 0;
        uint64_t v89 = v103;
        do
        {
          uint64_t v90 = llroundf(*((float *)v107 + v88));
          if (v90 >= 127) {
            uint64_t v90 = 127;
          }
          if (v90 <= -128) {
            LOBYTE(v90) = 0x80;
          }
          *(unsigned char *)(v89 + v88++) = v90;
        }
        while (v88 < v108);
      }
    }
    else
    {
      mlir::Type::isUnsignedInteger((mlir::Type *)&v106, 8);
      if (v108)
      {
        unint64_t v91 = 0;
        uint64_t v92 = v103;
        do
        {
          uint64_t v93 = llroundf(*((float *)v107 + v91));
          if (v93 >= 255) {
            uint64_t v93 = 255;
          }
          *(unsigned char *)(v92 + v91++) = v93 & ~(v93 >> 63);
        }
        while (v91 < v108);
      }
    }
    ElementsAttr = v104;
    if (v104) {
      uint64_t v95 = v105;
    }
    else {
      ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v102, 0, 0);
    }
    uint64_t v104 = ElementsAttr;
    uint64_t v105 = v95;
    uint64_t v101 = mlir::MemRefType::get(a3, a4, v106, 0, 0, 0);
    unint64_t v75 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a1 + 8), a2, &v101, &v104);
    mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v102);
  }
  if (v107 != v109) {
    free(v107);
  }
  if (v110 != v112) {
    free(v110);
  }
  if (v113 != (float *)v115) {
    free(v113);
  }
  if (v116 != (float *)v118) {
    free(v116);
  }
  return (char *)v75 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'bias' failed to satisfy constraint: 'constant value'");
}

uint64_t mlir::matchConstantWithIntVector<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v8 = (uint64_t **)&v9;
  uint64_t v11 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp) {
    return 0;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v8, DefiningOp)) {
    return 0;
  }
  v7[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v9);
  v7[1] = v4;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 0;
  }
  uint64_t v5 = 1;
  mlir::getIntValues<float>(v9, v10, a2, 1);
  return v5;
}

void mlir::anec::anonymous namespace'::ANEC_InvertFolding::~ANEC_InvertFolding(mlir::anec::_anonymous_namespace_::ANEC_InvertFolding *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_InvertFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  unint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v21[0] = v5;
  v21[1] = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v21, 0);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"epsilon", 7), v8))
  {
    if (!InherentAttr) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "epsilon", 7uLL);
    if (!InherentAttr)
    {
LABEL_10:
      uint64_t v9 = *((void *)a3 + 2);
      if (v9 && mlir::RewriterBase::Listener::classof(v9))
      {
        uint64_t v10 = *((void *)a2 + 3);
LABEL_13:
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    goto LABEL_10;
  }
  uint64_t v22 = InherentAttr;
  Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v22, (uint64_t)&ElementTypeOrSelf);
  uint64_t v14 = (void *)v27[0];
  if (llvm::APFloatBase::PPCDoubleDouble(Value) == v14)
  {
    int v19 = *(unsigned char *)(v27[1] + 28) & 7;
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
    if (v19 == 3)
    {
LABEL_16:
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = *(void **)(ODSOperands + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
        if (DefiningOp)
        {
          uint64_t v17 = DefiningOp;
          uint64_t v18 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v17 + 48) + 32))(*(void *)(v17 + 48), v18))
          {
            ElementTypeOrSelf = *(void **)(*(void *)v23 + 24);
            mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)1, 0);
          }
        }
        uint64_t v9 = *((void *)a3 + 2);
        if (v9 && mlir::RewriterBase::Listener::classof(v9))
        {
          uint64_t v10 = *((void *)a2 + 3);
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v9 = *((void *)a3 + 2);
        if (v9 && mlir::RewriterBase::Listener::classof(v9))
        {
          uint64_t v10 = *((void *)a2 + 3);
          goto LABEL_13;
        }
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v15 = v28 & 7;
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
    if (v15 == 3) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = *((void *)a3 + 2);
  if (v9 && mlir::RewriterBase::Listener::classof(v9))
  {
    uint64_t v10 = *((void *)a2 + 3);
    goto LABEL_13;
  }
LABEL_30:
  uint64_t v12 = 0;
LABEL_31:
  if (v23 != v25) {
    free(v23);
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.invert' to have attribute 'epsilon' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'attr' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

void mlir::anec::anonymous namespace'::ANEC_MulFolding::~ANEC_MulFolding(mlir::anec::_anonymous_namespace_::ANEC_MulFolding *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_MulFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v22 = v5;
  unint64_t v23 = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v22, 0);
  uint64_t v7 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v22, 1u);
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v23, 0);
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  if (!v10)
  {
    uint64_t v17 = *((void *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = *((void *)a2 + 3);
    goto LABEL_19;
  }
  uint64_t v24 = *(void **)(ODSOperands + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || (uint64_t v12 = DefiningOp,
        uint64_t v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 48) + 32))(*(void *)(v12 + 48), v13) & 1) == 0))
  {
    uint64_t v17 = *((void *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = *((void *)a2 + 3);
LABEL_19:
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v17 + 64))(v17, v18, v19, &v24);
    goto LABEL_21;
  }
  uint64_t v24 = *(void **)(v7 + 24);
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v15 + 48) + 32))(*(void *)(v15 + 48), v16))
    {
      uint64_t v24 = *(void **)(*v25 + 24);
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
    }
  }
  uint64_t v17 = *((void *)a3 + 2);
  if (v17 && mlir::RewriterBase::Listener::classof(v17))
  {
    uint64_t v18 = *((void *)a2 + 3);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v20 = 0;
LABEL_21:
  if (v25 != v27) {
    free(v25);
  }
  return v20;
}

uint64_t mlir::anec::anonymous namespace'::getMultBroadcastAxis(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  unint64_t v1 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&DefiningOp) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    char v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_10:
  }
    uint64_t v11 = 0;
  v19[0] = v1;
  v19[1] = v11;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    uint64_t v16 = -1;
    while (1)
    {
      if (*(void *)(ArgAttrsAttr + 8 * v14) != 1)
      {
        BOOL v17 = v16 == -1;
        uint64_t v16 = v14;
        if (!v17) {
          break;
        }
      }
      ++v14;
      v15 -= 8;
      if (!v15) {
        return v16 & ~(v16 >> 63);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v16 = -1;
    return v16 & ~(v16 >> 63);
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'constant value'");
}

void mlir::anec::anonymous namespace'::CanonicalizeCast::~CanonicalizeCast(mlir::anec::_anonymous_namespace_::CanonicalizeCast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeCast::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float16Type **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v21);
  unint64_t v19 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v21) + 8) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = xmmword_1810FE4E0;
  long long v23 = unk_1810FE4F0;
  uint64_t F16Type = mlir::Builder::getF16Type(a3 + 1, v4);
  uint64_t v6 = (void *)mlir::RankedTensorType::get((uint64_t)&v22, 4, F16Type, 0);
  long long v22 = xmmword_1810FE4E0;
  long long v23 = unk_1810FE4F0;
  uint64_t v8 = mlir::Builder::getF16Type(a3 + 1, v7);
  uint64_t v18 = mlir::MemRefType::get(&v22, (mlir::AffineMap *)4, v8, 0, 0, 0);
  uint64_t v9 = *(void *)(v21 + 24);
  *(void *)&long long v22 = mlir::createSplatF16ElementsAttr(v6, 1.0);
  *((void *)&v22 + 1) = v10;
  BOOL v17 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 1), v9, &v18, (void **)&v22);
  uint64_t v11 = *(void *)(v21 + 24);
  *(void *)&long long v22 = mlir::createSplatF16ElementsAttr(v6, 0.0);
  *((void *)&v22 + 1) = v12;
  uint64_t v16 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 1), v11, &v18, (void **)&v22);
  uint64_t v13 = v21;
  uint64_t v14 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(v21 + 24), (uint64_t *)&v19, &Input, &v17, &v16);
  (*((void (**)(mlir::Float16Type **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, v13, v14);
  return 1;
}

void mlir::anec::createANECRegionCallCanonicalizationPass(mlir::anec *this@<X0>, void *a2@<X8>)
{
  char v2 = (char)this;
  unint64_t v4 = operator new(0x228uLL);
  char v7 = v2;
  v4[2] = "builtin.module";
  v4[3] = 14;
  *((unsigned char *)v4 + 32) = 1;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  v4[22] = 0;
  v4[23] = v4 + 25;
  v4[24] = 0x400000000;
  v4[29] = v4 + 31;
  v4[30] = 0x400000000;
  v4[35] = 0;
  v4[36] = 0;
  v4[37] = 0x1000000000;
  v4[42] = 0;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  void *v4 = &unk_1EC9CC548;
  v10.n128_u64[0] = (unint64_t)"Update the ANECRegions with the new types, and get rid of incompatible MemrefToTensor ops.";
  v10.n128_u64[1] = 90;
  char v8 = 0;
  uint64_t v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(v4 + 43, v4 + 19, (uint64_t)"finalize-transforms", 19, &v10, &v9);
  v4[43] = &unk_1EC9CB060;
  v4[67] = &unk_1EC9CB0E0;
  void *v4 = &unk_1EC9CC118;
  *((unsigned char *)v4 + 472) = v2;
  uint64_t v5 = v4[66];
  if (v5)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v5 + 48))(v5, &v7);
    *a2 = v4;
  }
  else
  {
    uint64_t v6 = (mlir::anec::_anonymous_namespace_::ANECRegionCallCanonicalizationPass *)std::__throw_bad_function_call[abi:nn180100]();
  }
}

void mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass::~ANECRegionCallCanonicalizationPass(mlir::anec::_anonymous_namespace_::ANECRegionCallCanonicalizationPass *this)
{
  *(void *)this = &unk_1EC9CC548;
  *((void *)this + 43) = &unk_1EC9A3F00;
  char v2 = (char *)this + 504;
  unint64_t v3 = (char *)*((void *)this + 66);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 43) = &unk_1EC9A42A8;
  unint64_t v4 = (void *)*((void *)this + 55);
  if (v4 != *((void **)this + 54)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 51);
  if (v5 != (char *)this + 424) {
    free(v5);
  }

  mlir::Pass::~Pass(this);
}

{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC9CC548;
  *((void *)this + 43) = &unk_1EC9A3F00;
  char v2 = (char *)this + 504;
  unint64_t v3 = (char *)*((void *)this + 66);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 43) = &unk_1EC9A42A8;
  unint64_t v4 = (void *)*((void *)this + 55);
  if (v4 != *((void **)this + 54)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 51);
  if (v5 != (char *)this + 424) {
    free(v5);
  }
  mlir::Pass::~Pass(this);

  operator delete(v6);
}

const char *mlir::anec::ANECRegionCallCanonicalizationBase<mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass>::getName()
{
  return "ANECRegionCallCanonicalization";
}

uint64_t mlir::anec::ANECRegionCallCanonicalizationBase<mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass>::getDependentDialects(uint64_t a1, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CEEE0;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF000;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::anec::ANECRegionCallCanonicalizationBase<mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass>::getArgument()
{
  return "anec-region-call-canonicalization";
}

const char *mlir::anec::ANECRegionCallCanonicalizationBase<mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass>::getDescription()
{
  return "Fold Type-Changer ops around TensorToMemref / MemrefToTensor ops";
}

void mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass::runOnOperation(mlir::anec::_anonymous_namespace_::ANECRegionCallCanonicalizationPass *this)
{
  uint64_t v297 = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned int *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(v2 + 6));
  long long v283 = 0u;
  long long v284 = 0u;
  uint64_t v282 = Context;
  v285 = &v287;
  uint64_t v286 = 0x600000000;
  v288 = 0;
  uint64_t v289 = 0;
  unsigned int v290 = 0;
  v291 = 0;
  uint64_t v292 = 0;
  uint64_t v293 = 0x2800000000;
  v294 = 0;
  uint64_t v295 = 0;
  uint64_t v296 = 0x2800000000;
  unint64_t v4 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reshape", 11, (__int16)v267, Context, 0, 0);
  void *v4 = &unk_1EC9CBF40;
  if (!v4[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithResh"
           "ape<mlir::mps::ReshapeOp, mlir::placement::MemrefToTensor>]";
    __p[0] = (void *)168;
    uint64_t v5 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = (char *)__p[0];
    }
    char v7 = &v6[(void)v267];
    char v8 = (char *)((char *)__p[0] - (char *)v6);
    if ((void *)((char *)__p[0] - (char *)v6) >= (void *)0x12) {
      uint64_t v9 = 18;
    }
    else {
      uint64_t v9 = (char *)__p[0] - (char *)v6;
    }
    __n128 v10 = &v7[v9];
    unint64_t v11 = (unint64_t)&v8[-v9];
    if (v11 >= v11 - 1) {
      --v11;
    }
    v4[8] = v10;
    v4[9] = v11;
  }
  unint64_t v12 = *((unsigned int *)v4 + 22);
  if (v12 > *((_DWORD *)v4 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 10), v4 + 12, v12, 16);
    LODWORD(v12) = *((_DWORD *)v4 + 22);
  }
  *((_DWORD *)v4 + 22) = v12;
  uint64_t v13 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    uint64_t v15 = (char *)v283;
    uint64_t v16 = *((void *)&v283 + 1) - v283;
    uint64_t v17 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v19 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        goto LABEL_334;
      }
      uint64_t v21 = (char *)operator new(8 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    long long v22 = &v21[8 * v17];
    long long v23 = &v21[8 * v20];
    *(void *)long long v22 = v4;
    uint64_t v14 = v22 + 8;
    if (v13 == v15)
    {
      *(void *)&long long v283 = &v21[8 * v17];
      *((void *)&v283 + 1) = v22 + 8;
      *(void *)&long long v284 = v23;
    }
    else
    {
      unint64_t v24 = v13 - v15 - 8;
      if (v24 < 0x78
        || &v13[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v16 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_337;
      }
      uint64_t v25 = (v24 >> 3) + 1;
      uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      char v27 = &v13[-v26];
      v22 -= v26;
      char v28 = &v21[8 * v17 - 16];
      uint64_t v29 = v13 - 16;
      uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *((_OWORD *)v29 - 1);
        long long v31 = *(_OWORD *)v29;
        *((_OWORD *)v29 - 1) = 0uLL;
        *(_OWORD *)uint64_t v29 = 0uLL;
        *((_OWORD *)v28 - 1) = v32;
        *(_OWORD *)char v28 = v31;
        v28 -= 32;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      uint64_t v13 = v27;
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_337:
        do
        {
          uint64_t v33 = *((void *)v13 - 1);
          v13 -= 8;
          *(void *)uint64_t v13 = 0;
          *((void *)v22 - 1) = v33;
          v22 -= 8;
        }
        while (v13 != v15);
      }
      uint64_t v34 = (char *)*((void *)&v283 + 1);
      uint64_t v13 = (char *)v283;
      *(void *)&long long v283 = v22;
      *((void *)&v283 + 1) = v14;
      *(void *)&long long v284 = v23;
      while (v34 != v13)
      {
        uint64_t v36 = *((void *)v34 - 1);
        v34 -= 8;
        uint64_t v35 = v36;
        *(void *)uint64_t v34 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v4;
    uint64_t v14 = v13 + 8;
  }
  *((void *)&v283 + 1) = v14;
  uint64_t v37 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v37 + 1), (uint64_t)"placement.tensor_to_memref", 26, (__int16)v267, Context, 0, 0);
  *uint64_t v37 = &unk_1EC9CBFA0;
  if (!v37[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithResh"
           "ape<mlir::placement::TensorToMemref, mlir::mps::ReshapeOp>]";
    __p[0] = (void *)168;
    unint64_t v38 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v38) {
      unint64_t v39 = v38;
    }
    else {
      unint64_t v39 = (char *)__p[0];
    }
    uint64_t v40 = &v39[(void)v267];
    unint64_t v41 = (char *)((char *)__p[0] - (char *)v39);
    if ((void *)((char *)__p[0] - (char *)v39) >= (void *)0x12) {
      uint64_t v42 = 18;
    }
    else {
      uint64_t v42 = (char *)__p[0] - (char *)v39;
    }
    unint64_t v43 = &v40[v42];
    unint64_t v44 = (unint64_t)&v41[-v42];
    if (v44 >= v44 - 1) {
      --v44;
    }
    v37[8] = v43;
    v37[9] = v44;
  }
  unint64_t v45 = *((unsigned int *)v37 + 22);
  if (v45 > *((_DWORD *)v37 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 10), v37 + 12, v45, 16);
    LODWORD(v45) = *((_DWORD *)v37 + 22);
  }
  *((_DWORD *)v37 + 22) = v45;
  unint64_t v46 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    uint64_t v48 = (char *)v283;
    uint64_t v49 = *((void *)&v283 + 1) - v283;
    uint64_t v50 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v52 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_334;
      }
      uint64_t v54 = (char *)operator new(8 * v53);
    }
    else
    {
      uint64_t v54 = 0;
    }
    unint64_t v55 = &v54[8 * v50];
    uint64_t v56 = &v54[8 * v53];
    *(void *)unint64_t v55 = v37;
    uint64_t v47 = v55 + 8;
    if (v46 == v48)
    {
      *(void *)&long long v283 = &v54[8 * v50];
      *((void *)&v283 + 1) = v55 + 8;
      *(void *)&long long v284 = v56;
    }
    else
    {
      unint64_t v57 = v46 - v48 - 8;
      if (v57 < 0x78
        || &v46[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v55 && &v54[v49 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v46)
      {
        goto LABEL_338;
      }
      uint64_t v58 = (v57 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v60 = &v46[-v59];
      v55 -= v59;
      uint64_t v61 = &v54[8 * v50 - 16];
      uint64_t v62 = v46 - 16;
      uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v65 = *((_OWORD *)v62 - 1);
        long long v64 = *(_OWORD *)v62;
        *((_OWORD *)v62 - 1) = 0uLL;
        *(_OWORD *)uint64_t v62 = 0uLL;
        *((_OWORD *)v61 - 1) = v65;
        *(_OWORD *)uint64_t v61 = v64;
        v61 -= 32;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      unint64_t v46 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_338:
        do
        {
          uint64_t v66 = *((void *)v46 - 1);
          v46 -= 8;
          *(void *)unint64_t v46 = 0;
          *((void *)v55 - 1) = v66;
          v55 -= 8;
        }
        while (v46 != v48);
      }
      float v67 = (char *)*((void *)&v283 + 1);
      unint64_t v46 = (char *)v283;
      *(void *)&long long v283 = v55;
      *((void *)&v283 + 1) = v47;
      *(void *)&long long v284 = v56;
      while (v67 != v46)
      {
        uint64_t v69 = *((void *)v67 - 1);
        v67 -= 8;
        uint64_t v68 = v69;
        *(void *)float v67 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
    }
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v37;
    uint64_t v47 = v46 + 8;
  }
  *((void *)&v283 + 1) = v47;
  float v70 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v70 + 1), (uint64_t)"mps.cast", 8, (__int16)v267, Context, 0, 0);
  void *v70 = &unk_1EC9CBE00;
  if (!v70[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithCast"
           "<mlir::mps::CastOp, mlir::placement::MemrefToTensor>]";
    __p[0] = (void *)162;
    uint64_t v71 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v71) {
      unint64_t v72 = v71;
    }
    else {
      unint64_t v72 = (char *)__p[0];
    }
    unint64_t v73 = &v72[(void)v267];
    uint64_t v74 = (char *)((char *)__p[0] - (char *)v72);
    if ((void *)((char *)__p[0] - (char *)v72) >= (void *)0x12) {
      uint64_t v75 = 18;
    }
    else {
      uint64_t v75 = (char *)__p[0] - (char *)v72;
    }
    uint64_t v76 = &v73[v75];
    unint64_t v77 = (unint64_t)&v74[-v75];
    if (v77 >= v77 - 1) {
      --v77;
    }
    v70[8] = v76;
    v70[9] = v77;
  }
  unint64_t v78 = *((unsigned int *)v70 + 22);
  if (v78 > *((_DWORD *)v70 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v70 + 10), v70 + 12, v78, 16);
    LODWORD(v78) = *((_DWORD *)v70 + 22);
  }
  *((_DWORD *)v70 + 22) = v78;
  unint64_t v79 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    uint64_t v81 = (char *)v283;
    uint64_t v82 = *((void *)&v283 + 1) - v283;
    uint64_t v83 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v85 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v84) {
      unint64_t v84 = v85 >> 2;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      if (v86 >> 61) {
        goto LABEL_334;
      }
      uint64_t v87 = (char *)operator new(8 * v86);
    }
    else
    {
      uint64_t v87 = 0;
    }
    unint64_t v88 = &v87[8 * v83];
    uint64_t v89 = &v87[8 * v86];
    *(void *)unint64_t v88 = v70;
    unint64_t v80 = v88 + 8;
    if (v79 == v81)
    {
      *(void *)&long long v283 = &v87[8 * v83];
      *((void *)&v283 + 1) = v88 + 8;
      *(void *)&long long v284 = v89;
    }
    else
    {
      unint64_t v90 = v79 - v81 - 8;
      if (v90 < 0x78
        || &v79[-(v90 & 0xFFFFFFFFFFFFFFF8) - 8] < v88 && &v87[v82 - (v90 & 0xFFFFFFFFFFFFFFF8) - 8] < v79)
      {
        goto LABEL_339;
      }
      uint64_t v91 = (v90 >> 3) + 1;
      uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v93 = &v79[-v92];
      v88 -= v92;
      uint64_t v94 = &v87[8 * v83 - 16];
      uint64_t v95 = v79 - 16;
      uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v98 = *((_OWORD *)v95 - 1);
        long long v97 = *(_OWORD *)v95;
        *((_OWORD *)v95 - 1) = 0uLL;
        *(_OWORD *)uint64_t v95 = 0uLL;
        *((_OWORD *)v94 - 1) = v98;
        *(_OWORD *)uint64_t v94 = v97;
        v94 -= 32;
        v95 -= 32;
        v96 -= 4;
      }
      while (v96);
      unint64_t v79 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_339:
        do
        {
          uint64_t v99 = *((void *)v79 - 1);
          v79 -= 8;
          *(void *)unint64_t v79 = 0;
          *((void *)v88 - 1) = v99;
          v88 -= 8;
        }
        while (v79 != v81);
      }
      uint64_t v100 = (char *)*((void *)&v283 + 1);
      unint64_t v79 = (char *)v283;
      *(void *)&long long v283 = v88;
      *((void *)&v283 + 1) = v80;
      *(void *)&long long v284 = v89;
      while (v100 != v79)
      {
        uint64_t v102 = *((void *)v100 - 1);
        v100 -= 8;
        uint64_t v101 = v102;
        *(void *)uint64_t v100 = 0;
        if (v102) {
          (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
        }
      }
    }
    if (v79) {
      operator delete(v79);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v70;
    unint64_t v80 = v79 + 8;
  }
  *((void *)&v283 + 1) = v80;
  uint64_t v103 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v103 + 1), (uint64_t)"placement.tensor_to_memref", 26, (__int16)v267, Context, 0, 0);
  *uint64_t v103 = &unk_1EC9CBE60;
  if (!v103[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithCast"
           "<mlir::placement::TensorToMemref, mlir::mps::CastOp>]";
    __p[0] = (void *)162;
    uint64_t v104 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v104) {
      uint64_t v105 = v104;
    }
    else {
      uint64_t v105 = (char *)__p[0];
    }
    uint64_t v106 = &v105[(void)v267];
    unint64_t v107 = (char *)((char *)__p[0] - (char *)v105);
    if ((void *)((char *)__p[0] - (char *)v105) >= (void *)0x12) {
      uint64_t v108 = 18;
    }
    else {
      uint64_t v108 = (char *)__p[0] - (char *)v105;
    }
    unint64_t v109 = &v106[v108];
    unint64_t v110 = (unint64_t)&v107[-v108];
    if (v110 >= v110 - 1) {
      --v110;
    }
    v103[8] = v109;
    v103[9] = v110;
  }
  unint64_t v111 = *((unsigned int *)v103 + 22);
  if (v111 > *((_DWORD *)v103 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v103 + 10), v103 + 12, v111, 16);
    LODWORD(v111) = *((_DWORD *)v103 + 22);
  }
  *((_DWORD *)v103 + 22) = v111;
  unint64_t v112 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    uint64_t v114 = (char *)v283;
    uint64_t v115 = *((void *)&v283 + 1) - v283;
    uint64_t v116 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v117 = v116 + 1;
    if ((unint64_t)(v116 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v118 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v117) {
      unint64_t v117 = v118 >> 2;
    }
    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v119 = v117;
    }
    if (v119)
    {
      if (v119 >> 61) {
        goto LABEL_334;
      }
      uint64_t v120 = (char *)operator new(8 * v119);
    }
    else
    {
      uint64_t v120 = 0;
    }
    unint64_t v121 = &v120[8 * v116];
    __int32 v122 = &v120[8 * v119];
    *(void *)unint64_t v121 = v103;
    unint64_t v113 = v121 + 8;
    if (v112 == v114)
    {
      *(void *)&long long v283 = &v120[8 * v116];
      *((void *)&v283 + 1) = v121 + 8;
      *(void *)&long long v284 = v122;
    }
    else
    {
      unint64_t v123 = v112 - v114 - 8;
      if (v123 < 0x78
        || &v112[-(v123 & 0xFFFFFFFFFFFFFFF8) - 8] < v121 && &v120[v115 - (v123 & 0xFFFFFFFFFFFFFFF8) - 8] < v112)
      {
        goto LABEL_340;
      }
      uint64_t v124 = (v123 >> 3) + 1;
      uint64_t v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v126 = &v112[-v125];
      v121 -= v125;
      uint64_t v127 = &v120[8 * v116 - 16];
      v128 = v112 - 16;
      uint64_t v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *((_OWORD *)v128 - 1);
        long long v130 = *(_OWORD *)v128;
        *((_OWORD *)v128 - 1) = 0uLL;
        *(_OWORD *)v128 = 0uLL;
        *((_OWORD *)v127 - 1) = v131;
        *(_OWORD *)uint64_t v127 = v130;
        v127 -= 32;
        v128 -= 32;
        v129 -= 4;
      }
      while (v129);
      unint64_t v112 = v126;
      if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_340:
        do
        {
          uint64_t v132 = *((void *)v112 - 1);
          v112 -= 8;
          *(void *)unint64_t v112 = 0;
          *((void *)v121 - 1) = v132;
          v121 -= 8;
        }
        while (v112 != v114);
      }
      long long v133 = (char *)*((void *)&v283 + 1);
      unint64_t v112 = (char *)v283;
      *(void *)&long long v283 = v121;
      *((void *)&v283 + 1) = v113;
      *(void *)&long long v284 = v122;
      while (v133 != v112)
      {
        uint64_t v135 = *((void *)v133 - 1);
        v133 -= 8;
        uint64_t v134 = v135;
        *(void *)long long v133 = 0;
        if (v135) {
          (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
        }
      }
    }
    if (v112) {
      operator delete(v112);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v103;
    unint64_t v113 = v112 + 8;
  }
  *((void *)&v283 + 1) = v113;
  uint64_t v136 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v136 + 1), (uint64_t)"mpsx.interleave", 15, (__int16)v267, Context, 0, 0);
  void *v136 = &unk_1EC9CC058;
  if (!v136[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithInte"
           "rleave<mlir::mpsx::InterleaveOp, mlir::placement::MemrefToTensor>]";
    __p[0] = (void *)175;
    uint64_t v137 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v137) {
      v138 = v137;
    }
    else {
      v138 = (char *)__p[0];
    }
    unint64_t v139 = &v138[(void)v267];
    v140 = (char *)((char *)__p[0] - (char *)v138);
    if ((void *)((char *)__p[0] - (char *)v138) >= (void *)0x12) {
      uint64_t v141 = 18;
    }
    else {
      uint64_t v141 = (char *)__p[0] - (char *)v138;
    }
    v142 = &v139[v141];
    unint64_t v143 = (unint64_t)&v140[-v141];
    if (v143 >= v143 - 1) {
      --v143;
    }
    v136[8] = v142;
    v136[9] = v143;
  }
  unint64_t v144 = *((unsigned int *)v136 + 22);
  if (v144 > *((_DWORD *)v136 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v136 + 10), v136 + 12, v144, 16);
    LODWORD(v144) = *((_DWORD *)v136 + 22);
  }
  *((_DWORD *)v136 + 22) = v144;
  v145 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    uint64_t v147 = (char *)v283;
    uint64_t v148 = *((void *)&v283 + 1) - v283;
    uint64_t v149 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v150 = v149 + 1;
    if ((unint64_t)(v149 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v151 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v150) {
      unint64_t v150 = v151 >> 2;
    }
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v152 = v150;
    }
    if (v152)
    {
      if (v152 >> 61) {
        goto LABEL_334;
      }
      v153 = (char *)operator new(8 * v152);
    }
    else
    {
      v153 = 0;
    }
    v154 = &v153[8 * v149];
    v155 = &v153[8 * v152];
    *(void *)v154 = v136;
    v146 = v154 + 8;
    if (v145 == v147)
    {
      *(void *)&long long v283 = &v153[8 * v149];
      *((void *)&v283 + 1) = v154 + 8;
      *(void *)&long long v284 = v155;
    }
    else
    {
      unint64_t v156 = v145 - v147 - 8;
      if (v156 < 0x78
        || &v145[-(v156 & 0xFFFFFFFFFFFFFFF8) - 8] < v154 && &v153[v148 - (v156 & 0xFFFFFFFFFFFFFFF8) - 8] < v145)
      {
        goto LABEL_341;
      }
      uint64_t v157 = (v156 >> 3) + 1;
      uint64_t v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
      v159 = &v145[-v158];
      v154 -= v158;
      v160 = &v153[8 * v149 - 16];
      v161 = v145 - 16;
      uint64_t v162 = v157 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v164 = *((_OWORD *)v161 - 1);
        long long v163 = *(_OWORD *)v161;
        *((_OWORD *)v161 - 1) = 0uLL;
        *(_OWORD *)v161 = 0uLL;
        *((_OWORD *)v160 - 1) = v164;
        *(_OWORD *)v160 = v163;
        v160 -= 32;
        v161 -= 32;
        v162 -= 4;
      }
      while (v162);
      v145 = v159;
      if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_341:
        do
        {
          uint64_t v165 = *((void *)v145 - 1);
          v145 -= 8;
          *(void *)v145 = 0;
          *((void *)v154 - 1) = v165;
          v154 -= 8;
        }
        while (v145 != v147);
      }
      v166 = (char *)*((void *)&v283 + 1);
      v145 = (char *)v283;
      *(void *)&long long v283 = v154;
      *((void *)&v283 + 1) = v146;
      *(void *)&long long v284 = v155;
      while (v166 != v145)
      {
        uint64_t v168 = *((void *)v166 - 1);
        v166 -= 8;
        uint64_t v167 = v168;
        *(void *)v166 = 0;
        if (v168) {
          (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
        }
      }
    }
    if (v145) {
      operator delete(v145);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v136;
    v146 = v145 + 8;
  }
  *((void *)&v283 + 1) = v146;
  v169 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v267, 1);
  mlir::Pattern::Pattern((uint64_t)(v169 + 1), (uint64_t)"placement.tensor_to_memref", 26, (__int16)v267, Context, 0, 0);
  void *v169 = &unk_1EC9CC0B8;
  if (!v169[9])
  {
    v267 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::CanonicalizeANEIOWithInte"
           "rleave<mlir::placement::TensorToMemref, mlir::mpsx::DeinterleaveOp>]";
    __p[0] = (void *)177;
    v170 = (char *)llvm::StringRef::find((uint64_t *)&v267, "DesiredTypeName = ", 0x12uLL, 0);
    if (__p[0] >= v170) {
      v171 = v170;
    }
    else {
      v171 = (char *)__p[0];
    }
    v172 = &v171[(void)v267];
    v173 = (char *)((char *)__p[0] - (char *)v171);
    if ((void *)((char *)__p[0] - (char *)v171) >= (void *)0x12) {
      uint64_t v174 = 18;
    }
    else {
      uint64_t v174 = (char *)__p[0] - (char *)v171;
    }
    v175 = &v172[v174];
    unint64_t v176 = (unint64_t)&v173[-v174];
    if (v176 >= v176 - 1) {
      --v176;
    }
    v169[8] = v175;
    v169[9] = v176;
  }
  unint64_t v177 = *((unsigned int *)v169 + 22);
  if (v177 > *((_DWORD *)v169 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v169 + 10), v169 + 12, v177, 16);
    LODWORD(v177) = *((_DWORD *)v169 + 22);
  }
  *((_DWORD *)v169 + 22) = v177;
  v178 = (char *)*((void *)&v283 + 1);
  if (*((void *)&v283 + 1) >= (unint64_t)v284)
  {
    v180 = (char *)v283;
    uint64_t v181 = *((void *)&v283 + 1) - v283;
    uint64_t v182 = (uint64_t)(*((void *)&v283 + 1) - v283) >> 3;
    unint64_t v183 = v182 + 1;
    if ((unint64_t)(v182 + 1) >> 61) {
      goto LABEL_333;
    }
    uint64_t v184 = v284 - v283;
    if ((uint64_t)(v284 - v283) >> 2 > v183) {
      unint64_t v183 = v184 >> 2;
    }
    if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v185 = v183;
    }
    if (v185)
    {
      if (v185 >> 61) {
        goto LABEL_334;
      }
      v186 = (char *)operator new(8 * v185);
    }
    else
    {
      v186 = 0;
    }
    v187 = &v186[8 * v182];
    v188 = &v186[8 * v185];
    *(void *)v187 = v169;
    v179 = v187 + 8;
    if (v178 == v180)
    {
      *(void *)&long long v283 = &v186[8 * v182];
      *((void *)&v283 + 1) = v187 + 8;
      *(void *)&long long v284 = v188;
    }
    else
    {
      unint64_t v189 = v178 - v180 - 8;
      if (v189 < 0x78
        || &v178[-(v189 & 0xFFFFFFFFFFFFFFF8) - 8] < v187 && &v186[v181 - (v189 & 0xFFFFFFFFFFFFFFF8) - 8] < v178)
      {
        goto LABEL_342;
      }
      uint64_t v190 = (v189 >> 3) + 1;
      uint64_t v191 = 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
      v192 = &v178[-v191];
      v187 -= v191;
      v193 = &v186[8 * v182 - 16];
      v194 = v178 - 16;
      uint64_t v195 = v190 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v197 = *((_OWORD *)v194 - 1);
        long long v196 = *(_OWORD *)v194;
        *((_OWORD *)v194 - 1) = 0uLL;
        *(_OWORD *)v194 = 0uLL;
        *((_OWORD *)v193 - 1) = v197;
        *(_OWORD *)v193 = v196;
        v193 -= 32;
        v194 -= 32;
        v195 -= 4;
      }
      while (v195);
      v178 = v192;
      if (v190 != (v190 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_342:
        do
        {
          uint64_t v198 = *((void *)v178 - 1);
          v178 -= 8;
          *(void *)v178 = 0;
          *((void *)v187 - 1) = v198;
          v187 -= 8;
        }
        while (v178 != v180);
      }
      v199 = (char *)*((void *)&v283 + 1);
      v178 = (char *)v283;
      *(void *)&long long v283 = v187;
      *((void *)&v283 + 1) = v179;
      *(void *)&long long v284 = v188;
      while (v199 != v178)
      {
        uint64_t v201 = *((void *)v199 - 1);
        v199 -= 8;
        uint64_t v200 = v201;
        *(void *)v199 = 0;
        if (v201) {
          (*(void (**)(uint64_t))(*(void *)v200 + 8))(v200);
        }
      }
    }
    if (v178) {
      operator delete(v178);
    }
  }
  else
  {
    **((void **)&v283 + 1) = v169;
    v179 = v178 + 8;
  }
  *((void *)&v283 + 1) = v179;
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v261, &v282, 0, 0, 0, 0);
  unint64_t v202 = v2[11];
  if ((v202 & 0x7FFFFF) != 0)
  {
    v203 = (mlir::Region **)((((unint64_t)&v2[4 * ((v202 >> 23) & 1) + 16] + ((v202 >> 21) & 0x7F8)) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * v2[10]);
    v260[0] = 0;
    v267 = (const char *)256;
    *(_OWORD *)__p = xmmword_1810FE4B0;
    v269[1] = 0;
    v270 = 0;
    v269[0] = 0;
    mlir::applyPatternsAndFoldGreedily(v203, (const mlir::FrozenRewritePatternSet *)&v261, (long long *)&v267, v260);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v261);
  if (!*((unsigned char *)this + 472))
  {
    if (HIDWORD(v295) && v295)
    {
      uint64_t v250 = 0;
      do
      {
        v251 = *(llvm **)((char *)v294 + v250);
        if (v251 != (llvm *)-8 && v251 != 0)
        {
          uint64_t v253 = *(void *)v251;
          v254 = (void *)*((void *)v251 + 4);
          if (v254 == (void *)((char *)v251 + 8))
          {
            (*(void (**)(void *))(*((void *)v251 + 1) + 32))((void *)v251 + 1);
          }
          else if (v254)
          {
            (*(void (**)(void *))(*v254 + 40))(v254);
          }
          llvm::deallocate_buffer(v251, (void *)(v253 + 41));
        }
        v250 += 8;
      }
      while (8 * v295 != v250);
    }
    free(v294);
    if (HIDWORD(v292) && v292)
    {
      uint64_t v255 = 0;
      do
      {
        v256 = *(llvm **)((char *)v291 + v255);
        if (v256 != (llvm *)-8 && v256 != 0)
        {
          uint64_t v258 = *(void *)v256;
          v259 = (void *)*((void *)v256 + 4);
          if (v259 == (void *)((char *)v256 + 8))
          {
            (*(void (**)(void *))(*((void *)v256 + 1) + 32))((void *)v256 + 1);
          }
          else if (v259)
          {
            (*(void (**)(void *))(*v259 + 40))(v259);
          }
          llvm::deallocate_buffer(v256, (void *)(v258 + 41));
        }
        v255 += 8;
      }
      while (8 * v292 != v255);
    }
    free(v291);
    llvm::deallocate_buffer(v288, (void *)(16 * v290));
  }
  uint64_t v204 = mlir::Attribute::getContext((mlir::Attribute *)(v2 + 6));
  v267 = (const char *)v204;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v269 = 0u;
  v270 = &v272;
  uint64_t v271 = 0x600000000;
  v273 = 0;
  uint64_t v274 = 0;
  unsigned int v275 = 0;
  v276 = 0;
  uint64_t v277 = 0;
  uint64_t v278 = 0x2800000000;
  v279 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0x2800000000;
  v205 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v261, 1);
  mlir::Pattern::Pattern((uint64_t)(v205 + 1), (uint64_t)"placement.memref_to_tensor", 26, v261, v204, 0, 0);
  void *v205 = &unk_1EC9CC000;
  if (!v205[9])
  {
    uint64_t v261 = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::LowerDuplicateMemrefToTensor]";
    *(void *)&long long v262 = 113;
    unint64_t v206 = llvm::StringRef::find(&v261, "DesiredTypeName = ", 0x12uLL, 0);
    if ((unint64_t)v262 >= v206) {
      uint64_t v207 = v206;
    }
    else {
      uint64_t v207 = v262;
    }
    uint64_t v208 = v261 + v207;
    uint64_t v209 = v262 - v207;
    if ((unint64_t)(v262 - v207) >= 0x12) {
      uint64_t v210 = 18;
    }
    else {
      uint64_t v210 = v262 - v207;
    }
    uint64_t v211 = v208 + v210;
    unint64_t v212 = v209 - v210;
    if (v212 >= v212 - 1) {
      --v212;
    }
    v205[8] = v211;
    v205[9] = v212;
  }
  unint64_t v213 = *((unsigned int *)v205 + 22);
  if (v213 > *((_DWORD *)v205 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v205 + 10), v205 + 12, v213, 16);
    LODWORD(v213) = *((_DWORD *)v205 + 22);
  }
  *((_DWORD *)v205 + 22) = v213;
  v214 = (char *)__p[1];
  if (__p[1] < v269[0])
  {
    *(void *)__p[1] = v205;
    v215 = v214 + 8;
    goto LABEL_277;
  }
  v216 = (char *)__p[0];
  int64_t v217 = (char *)__p[1] - (char *)__p[0];
  int64_t v218 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  unint64_t v219 = v218 + 1;
  if (!((unint64_t)(v218 + 1) >> 61))
  {
    int64_t v220 = (char *)v269[0] - (char *)__p[0];
    if (((char *)v269[0] - (char *)__p[0]) >> 2 > v219) {
      unint64_t v219 = v220 >> 2;
    }
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v221 = v219;
    }
    if (!v221)
    {
      v222 = 0;
      goto LABEL_262;
    }
    if (!(v221 >> 61))
    {
      v222 = (char *)operator new(8 * v221);
LABEL_262:
      v223 = &v222[8 * v218];
      v224 = (mlir::Operation *)&v222[8 * v221];
      *(void *)v223 = v205;
      v215 = v223 + 8;
      if (v214 == v216)
      {
        __p[0] = &v222[8 * v218];
        __p[1] = v223 + 8;
        v269[0] = v224;
      }
      else
      {
        unint64_t v225 = v214 - v216 - 8;
        if (v225 < 0x78
          || &v214[-(v225 & 0xFFFFFFFFFFFFFFF8) - 8] < v223 && &v222[v217 - (v225 & 0xFFFFFFFFFFFFFFF8) - 8] < v214)
        {
          goto LABEL_343;
        }
        uint64_t v226 = (v225 >> 3) + 1;
        uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
        v228 = &v214[-v227];
        v223 -= v227;
        v229 = &v222[8 * v218 - 16];
        v230 = v214 - 16;
        uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v233 = *((_OWORD *)v230 - 1);
          long long v232 = *(_OWORD *)v230;
          *((_OWORD *)v230 - 1) = 0uLL;
          *(_OWORD *)v230 = 0uLL;
          *((_OWORD *)v229 - 1) = v233;
          *(_OWORD *)v229 = v232;
          v229 -= 32;
          v230 -= 32;
          v231 -= 4;
        }
        while (v231);
        v214 = v228;
        if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_343:
          do
          {
            uint64_t v234 = *((void *)v214 - 1);
            v214 -= 8;
            *(void *)v214 = 0;
            *((void *)v223 - 1) = v234;
            v223 -= 8;
          }
          while (v214 != v216);
        }
        v214 = (char *)__p[0];
        v235 = (char *)__p[1];
        __p[0] = v223;
        __p[1] = v215;
        v269[0] = v224;
        while (v235 != v214)
        {
          uint64_t v237 = *((void *)v235 - 1);
          v235 -= 8;
          uint64_t v236 = v237;
          *(void *)v235 = 0;
          if (v237) {
            (*(void (**)(uint64_t))(*(void *)v236 + 8))(v236);
          }
        }
      }
      if (v214) {
        operator delete(v214);
      }
LABEL_277:
      __p[1] = v215;
      mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v260, &v267, 0, 0, 0, 0);
      unint64_t v238 = v2[11];
      if ((v238 & 0x7FFFFF) != 0)
      {
        v239 = (mlir::Region **)((((unint64_t)&v2[4 * ((v238 >> 23) & 1) + 16]
                                 + ((v238 >> 21) & 0x7F8)) & 0xFFFFFFFFFFFFFFF8)
                               + 32 * v2[10]);
        BOOL v266 = 0;
        uint64_t v261 = 256;
        long long v262 = xmmword_1810FE4B0;
        uint64_t v264 = 0;
        uint64_t v265 = 0;
        uint64_t v263 = 0;
        mlir::applyPatternsAndFoldGreedily(v239, (const mlir::FrozenRewritePatternSet *)v260, (long long *)&v261, &v266);
      }
      mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v260);
      uint64_t v261 = (uint64_t)v260;
      mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_134ANECRegionCallCanonicalizationPass12canonicalizeES3_E3__0NS1_9placement10RegionCallEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v261, 1);
      if (HIDWORD(v280) && v280)
      {
        uint64_t v240 = 0;
        do
        {
          v241 = *(llvm **)((char *)v279 + v240);
          if (v241 != (llvm *)-8 && v241 != 0)
          {
            uint64_t v243 = *(void *)v241;
            v244 = (void *)*((void *)v241 + 4);
            if (v244 == (void *)((char *)v241 + 8))
            {
              (*(void (**)(void *))(*((void *)v241 + 1) + 32))((void *)v241 + 1);
            }
            else if (v244)
            {
              (*(void (**)(void *))(*v244 + 40))(v244);
            }
            llvm::deallocate_buffer(v241, (void *)(v243 + 41));
          }
          v240 += 8;
        }
        while (8 * v280 != v240);
      }
      free(v279);
      if (HIDWORD(v277) && v277)
      {
        uint64_t v245 = 0;
        do
        {
          v246 = *(llvm **)((char *)v276 + v245);
          if (v246 != (llvm *)-8 && v246 != 0)
          {
            uint64_t v248 = *(void *)v246;
            v249 = (void *)*((void *)v246 + 4);
            if (v249 == (void *)((char *)v246 + 8))
            {
              (*(void (**)(void *))(*((void *)v246 + 1) + 32))((void *)v246 + 1);
            }
            else if (v249)
            {
              (*(void (**)(void *))(*v249 + 40))(v249);
            }
            llvm::deallocate_buffer(v246, (void *)(v248 + 41));
          }
          v245 += 8;
        }
        while (8 * v277 != v245);
      }
      free(v276);
      llvm::deallocate_buffer(v273, (void *)(16 * v275));
    }
LABEL_334:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_333:
  abort();
}

void *mlir::anec::ANECRegionCallCanonicalizationBase<mlir::anec::anonymous namespace'::ANECRegionCallCanonicalizationPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x228uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)unint64_t v4 = &unk_1EC9CC548;
  v9.n128_u64[0] = (unint64_t)"Update the ANECRegions with the new types, and get rid of incompatible MemrefToTensor ops.";
  v9.n128_u64[1] = 90;
  char v7 = 0;
  char v8 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"finalize-transforms", 19, &v9, &v8);
  *((void *)v4 + 43) = &unk_1EC9CB060;
  *((void *)v4 + 67) = &unk_1EC9CB0E0;
  *(void *)unint64_t v4 = &unk_1EC9CC118;
  *a2 = v4;
  return result;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EC9CEEE0;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CEEE0;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::mps::MPSDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::mps::MPSDialect **a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (mlir::mps::MPSDialect *)operator new(0x60uLL);
  uint64_t result = mlir::mps::MPSDialect::MPSDialect(v4, v3);
  *a2 = result;
  return result;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EC9CF000;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CF000;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mpsx::MPSXDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"mpsx", 4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mpsx::MPSXDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mpsx::MPSXDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::mpsx::MPSXDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mpsx::MPSXDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mpsx::MPSXDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::mpsx::MPSXDialect **a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (mlir::mpsx::MPSXDialect *)operator new(0x60uLL);
  uint64_t result = mlir::mpsx::MPSXDialect::MPSXDialect(v4, v3);
  *a2 = result;
  return result;
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::mps::ReshapeOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithReshape(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::mps::ReshapeOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithReshape(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReshapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReshapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReshapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::mps::ReshapeOp,mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v26[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(v8 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    uint64_t v14 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    v26[0] = v8;
    uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v26);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
    if (DefiningOp)
    {
      uint64_t v10 = DefiningOp;
      unint64_t v11 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
      uint64_t v13 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id
          ? (mlir::Operation *)DefiningOp
          : 0;
      unint64_t v24 = v13;
      if (v12)
      {
        while (1)
        {
          uint64_t v16 = *(mlir::Block **)(v10 + 16);
          if (!v16) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v16);
          uint64_t v10 = ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_25;
          }
        }
        uint64_t v10 = 0;
LABEL_25:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v24);
        uint64_t v20 = v19;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        __int16 v27 = 261;
        v26[0] = Callee;
        v26[1] = v20;
        uint64_t v22 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v26);
        uint64_t v23 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v10, v22);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v23, a3);
      }
    }
    uint64_t v14 = "failed: ANE regionCall op not found";
  }
  __int16 v27 = 259;
  uint64_t Input = v26;
  v26[0] = v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v15);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v15 + 64))(v15, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Input);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::mps::ReshapeOp,mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Operation *a3, uint64_t a4, void *a5)
{
  v121[1] = *MEMORY[0x1E4F143B8];
  uint64_t v107 = *(void *)(*((void *)a3 + 9) + 24);
  uint64_t v108 = a3;
  char v7 = (uint64_t *)(*(void *)(v107 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *v7;
  unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v10 = *(unsigned int *)(v8 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  unint64_t v11 = *(void **)(v8 + 8);
  BOOL v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    uint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      unint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_10:
  }
    uint64_t v17 = 0;
  v106[0] = v7;
  v106[1] = v17;
  unint64_t v18 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = *v18;
  unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v21 = *(unsigned int *)(v19 + 16);
  if (!v21) {
    goto LABEL_20;
  }
  uint64_t v22 = *(void **)(v19 + 8);
  uint64_t v23 = &v22[2 * v21];
  do
  {
    unint64_t v24 = v21 >> 1;
    uint64_t v25 = &v22[2 * (v21 >> 1)];
    unint64_t v27 = *v25;
    uint64_t v26 = v25 + 2;
    v21 += ~(v21 >> 1);
    if (v27 < v20) {
      uint64_t v22 = v26;
    }
    else {
      unint64_t v21 = v24;
    }
  }
  while (v21);
  if (v22 != v23 && *v22 == v20) {
    uint64_t v28 = v22[1];
  }
  else {
LABEL_20:
  }
    uint64_t v28 = 0;
  v105[0] = v18;
  v105[1] = v28;
  uint64_t v29 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v29) {
    goto LABEL_30;
  }
  uint64_t v30 = *v29;
  unint64_t v31 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v32 = *(unsigned int *)(v30 + 16);
  if (!v32) {
    goto LABEL_30;
  }
  uint64_t v33 = *(void **)(v30 + 8);
  uint64_t v34 = &v33[2 * v32];
  do
  {
    unint64_t v35 = v32 >> 1;
    uint64_t v36 = &v33[2 * (v32 >> 1)];
    unint64_t v38 = *v36;
    uint64_t v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31) {
      uint64_t v33 = v37;
    }
    else {
      unint64_t v32 = v35;
    }
  }
  while (v32);
  if (v33 != v34 && *v33 == v31) {
    uint64_t v39 = v33[1];
  }
  else {
LABEL_30:
  }
    uint64_t v39 = 0;
  v104[0] = (uint64_t)v29;
  v104[1] = v39;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v106)) {
    goto LABEL_48;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v106);
  if (v41)
  {
    uint64_t v42 = 8 * v41;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v42 -= 8;
      if (!v42) {
        goto LABEL_36;
      }
    }
    goto LABEL_48;
  }
LABEL_36:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v105)) {
    goto LABEL_48;
  }
  unint64_t v43 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v105);
  if (v44)
  {
    uint64_t v45 = 8 * v44;
    while (*v43 != 0x8000000000000000)
    {
      ++v43;
      v45 -= 8;
      if (!v45) {
        goto LABEL_41;
      }
    }
    goto LABEL_48;
  }
LABEL_41:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v104))
  {
LABEL_48:
    uint64_t v118 = "failed: input and output must have static shapes";
    v120[8] = 259;
    __dst = &v118;
    uint64_t v55 = a5[2];
    if (v55 && mlir::RewriterBase::Listener::classof(v55)) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v55 + 64))(v55, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__dst);
    }
    else {
      return 0;
    }
  }
  unint64_t v46 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
  if (v47)
  {
    uint64_t v48 = 8 * v47;
    while (*v46 != 0x8000000000000000)
    {
      ++v46;
      v48 -= 8;
      if (!v48) {
        goto LABEL_46;
      }
    }
    goto LABEL_48;
  }
LABEL_46:
  uint64_t v118 = (char *)v120;
  unint64_t v119 = 0x500000000;
  __dst = v117;
  uint64_t v116 = 0x500000000;
  unint64_t v112 = v114;
  uint64_t v113 = 0x500000000;
  uint64_t v50 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
  uint64_t v51 = v49;
  __src = v111;
  uint64_t v110 = 0x500000000;
  size_t v52 = 8 * v49;
  if ((unint64_t)(8 * v49) < 0x29)
  {
    int v53 = 0;
    uint64_t v54 = (char *)v111;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v111, (8 * v49) >> 3, 8);
    int v53 = v110;
    uint64_t v54 = (char *)__src;
  }
  if (v51)
  {
    memcpy(&v54[8 * v53], v50, v52);
    int v53 = v110;
    uint64_t v54 = (char *)__src;
  }
  unint64_t v58 = v53 + (v52 >> 3);
  LODWORD(v110) = v58;
  if (v54 == (char *)v111)
  {
    uint64_t v59 = v119;
    if (v119 >= v58)
    {
      if (v58) {
        memmove(v118, v111, 8 * v58);
      }
      goto LABEL_73;
    }
    if (HIDWORD(v119) >= v58)
    {
      if (v119)
      {
        memmove(v118, v111, 8 * v119);
        goto LABEL_71;
      }
    }
    else
    {
      LODWORD(v119) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v120, v58, 8);
    }
    uint64_t v59 = 0;
LABEL_71:
    if (v59 != v110) {
      memcpy(&v118[8 * v59], (char *)__src + 8 * v59, 8 * v110 - 8 * v59);
    }
LABEL_73:
    LODWORD(v119) = v58;
    goto LABEL_74;
  }
  if (v118 != (char *)v120)
  {
    free(v118);
    uint64_t v54 = (char *)__src;
    LODWORD(v58) = v110;
  }
  uint64_t v118 = v54;
  unint64_t v119 = __PAIR64__(HIDWORD(v110), v58);
  __src = v111;
  HIDWORD(v110) = 0;
LABEL_74:
  LODWORD(v110) = 0;
  if (__src != v111) {
    free(__src);
  }
  mlir::placement::MemrefToTensor::getInputShapeAfterInterleave(&v108, &__src);
  unsigned int v60 = __src;
  if (__src == v111)
  {
    int v61 = v110;
    uint64_t v62 = v116;
    if (v116 >= v110)
    {
      if (v110) {
        memmove(__dst, __src, 8 * v110);
      }
      goto LABEL_90;
    }
    if (HIDWORD(v116) >= v110)
    {
      if (v116)
      {
        memmove(__dst, __src, 8 * v116);
        goto LABEL_88;
      }
    }
    else
    {
      LODWORD(v116) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v117, v110, 8);
    }
    uint64_t v62 = 0;
LABEL_88:
    if (v62 != v110) {
      memcpy((char *)__dst + 8 * v62, (char *)__src + 8 * v62, 8 * v110 - 8 * v62);
    }
LABEL_90:
    LODWORD(v116) = v61;
    goto LABEL_91;
  }
  if (__dst != v117)
  {
    free(__dst);
    unsigned int v60 = __src;
  }
  __dst = v60;
  uint64_t v116 = v110;
  __src = v111;
  HIDWORD(v110) = 0;
LABEL_91:
  LODWORD(v110) = 0;
  if (__src != v111) {
    free(__src);
  }
  uint64_t v63 = v118;
  uint64_t v64 = v119;
  LODWORD(v113) = 0;
  if (v119 <= HIDWORD(v113))
  {
    int v65 = 0;
    if (!v119) {
      goto LABEL_104;
    }
    uint64_t v66 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v119, 8);
    int v65 = v113;
    uint64_t v66 = v113;
  }
  float v67 = (char *)v112 + 8 * v66;
  unint64_t v68 = (v64 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v68 >= 7)
  {
    float v70 = (char *)v112 + 8 * v66;
    uint64_t v69 = v63;
    if ((unint64_t)(v70 - v63) >= 0x20)
    {
      unint64_t v71 = v68 + 1;
      uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      float v67 = (void *)((char *)v67 + v72);
      uint64_t v69 = &v63[v72];
      unint64_t v73 = (long long *)(v63 + 16);
      uint64_t v74 = v70 + 16;
      uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v76 = *v73;
        *(v74 - 1) = *(v73 - 1);
        _OWORD *v74 = v76;
        v73 += 2;
        v74 += 2;
        v75 -= 4;
      }
      while (v75);
      if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_104;
      }
    }
  }
  else
  {
    uint64_t v69 = v63;
  }
  do
  {
    uint64_t v77 = *(void *)v69;
    v69 += 8;
    *v67++ = v77;
  }
  while (v69 != &v63[8 * v64]);
LABEL_104:
  uint64_t v78 = (v65 + v64);
  LODWORD(v113) = v78;
  uint64_t v79 = v116;
  if (v119 >= v116)
  {
LABEL_113:
    __src = "failed: ANE I/O op isn't a squeeze / expandDims";
    v111[8] = 259;
    v121[0] = (uint64_t)&__src;
    uint64_t v88 = a5[2];
    if (v88 && mlir::RewriterBase::Listener::classof(v88)) {
      uint64_t v56 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v88 + 64))(v88, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v121);
    }
    else {
      uint64_t v56 = 0;
    }
  }
  else
  {
    unint64_t v80 = (uint64_t *)__dst;
    uint64_t v81 = v118;
    uint64_t v82 = &v118[8 * v119];
    do
    {
      uint64_t v84 = *v80++;
      uint64_t v83 = v84;
      if (v84 == 1)
      {
        uint64_t v85 = &v118[8 * v119];
        if (v81 != v82) {
          uint64_t v85 = &v81[8 * (*(void *)v81 == 1)];
        }
      }
      else
      {
        if (v81 == v82) {
          goto LABEL_113;
        }
        uint64_t v87 = *(void *)v81;
        unint64_t v86 = v81 + 8;
        if (v83 != v87) {
          goto LABEL_113;
        }
        uint64_t v85 = v86;
      }
      uint64_t v81 = v85;
      --v79;
    }
    while (v79);
    v121[0] = v78;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a5 + 1), 0x40u, 0);
    unint64_t v90 = (void *)mlir::RankedTensorType::get((uint64_t)v121, 1, IntegerType, 0);
    uint64_t v91 = v90;
    if (!v90) {
      goto LABEL_126;
    }
    uint64_t v92 = *v90;
    unint64_t v93 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v94 = *(unsigned int *)(v92 + 16);
    if (!v94) {
      goto LABEL_126;
    }
    uint64_t v95 = *(void **)(v92 + 8);
    uint64_t v96 = &v95[2 * v94];
    do
    {
      unint64_t v97 = v94 >> 1;
      long long v98 = &v95[2 * (v94 >> 1)];
      unint64_t v100 = *v98;
      uint64_t v99 = v98 + 2;
      v94 += ~(v94 >> 1);
      if (v100 < v93) {
        uint64_t v95 = v99;
      }
      else {
        unint64_t v94 = v97;
      }
    }
    while (v94);
    if (v95 != v96 && *v95 == v93) {
      uint64_t v101 = v95[1];
    }
    else {
LABEL_126:
    }
      uint64_t v101 = 0;
    uint64_t v56 = 1;
    __src = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v91, v101, v112, 8 * v113, 8, 1, 0);
    v121[0] = mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v108);
    uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(&v108);
    uint64_t v102 = mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), *(void *)(a2 + 24), v104, &v107, (uint64_t *)&__src, v121, &InterleaveAttr);
    (*(void (**)(void *, uint64_t, mlir::GenericProgramPoint *))(*a5 + 32))(a5, a2, v102);
  }
  if (v112 != v114) {
    free(v112);
  }
  if (__dst != v117) {
    free(__dst);
  }
  if (v118 != (char *)v120) {
    free(v118);
  }
  return v56;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.memref_to_tensor", (const unsigned __int8 *)0x1A, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    void v23[2] = (uint64_t)"placement.memref_to_tensor";
    v23[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::placement::MemrefToTensor::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::placement::TensorToMemref,mlir::mps::ReshapeOp>::~CanonicalizeANEIOWithReshape(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::placement::TensorToMemref,mlir::mps::ReshapeOp>::~CanonicalizeANEIOWithReshape(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::TensorToMemref>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::TensorToMemref>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::TensorToMemref>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::placement::TensorToMemref,mlir::mps::ReshapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v28[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v28);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(result + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    unint64_t v18 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a2 + 36);
    if (v9) {
      unint64_t v10 = (mlir::Operation *)(a2 - 16);
    }
    else {
      unint64_t v10 = 0;
    }
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    mlir::ResultRange::use_begin((uint64_t *)&v34, (uint64_t *)v32);
    uint64_t v11 = *(unsigned int *)(a2 + 36);
    if (v11) {
      BOOL v12 = (mlir::Operation *)(a2 - 16);
    }
    else {
      BOOL v12 = 0;
    }
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    mlir::ResultRange::use_end((uint64_t *)&v34, v30);
    uint64_t v13 = v33;
    uint64_t v29 = v33;
    v28[0] = v32[0];
    v28[1] = v32[1];
    uint64_t v14 = v31;
    if (v33 != v31)
    {
      uint64_t v15 = 0;
      do
      {
        char v16 = *(void **)(v13 + 16);
        if (v16) {
          BOOL v17 = *(void *)(v16[6] + 16) == (void)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17)
        {
          if (v15)
          {
            BOOL v17 = v15 == v16;
            uint64_t v15 = v16;
            if (!v17) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v15 = v16;
          }
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v32);
        uint64_t v13 = v33;
      }
      while (v33 != v14);
      uint64_t v34 = (mlir::Operation *)v15;
      if (v15)
      {
        while (1)
        {
          uint64_t v19 = (mlir::Block *)v15[2];
          if (!v19) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v19);
          uint64_t v15 = (void *)ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_39;
          }
        }
        uint64_t v15 = 0;
LABEL_39:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v34);
        uint64_t v24 = v23;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
        LOWORD(v29) = 261;
        *(void *)&v28[0] = Callee;
        *((void *)&v28[0] + 1) = v24;
        uint64_t v26 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
        uint64_t v27 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v15, v26);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v27, a3);
      }
    }
LABEL_34:
    unint64_t v18 = "failed: ANE regionCall op not found";
  }
  *(void *)&v28[0] = v18;
  LOWORD(v29) = 259;
  *(void *)&v32[0] = v28;
  uint64_t v21 = *(void *)(a3 + 16);
  if (!v21) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v21);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), _OWORD *))(*(void *)v21 + 64))(v21, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithReshape<mlir::placement::TensorToMemref,mlir::mps::ReshapeOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, void *a5)
{
  v123[1] = *MEMORY[0x1E4F143B8];
  uint64_t v109 = *(void *)(*(void *)(a3 + 72) + 24);
  uint64_t v110 = a2;
  char v7 = (uint64_t *)(*(void *)(v109 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *v7;
  unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v10 = *(unsigned int *)(v8 + 16);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = *(void **)(v8 + 8);
  BOOL v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    uint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      uint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_10:
  }
    uint64_t v17 = 0;
  v108[0] = v7;
  v108[1] = v17;
  unint64_t v18 = (uint64_t *)(*(void *)(*(void *)(*((void *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = *v18;
  unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v21 = *(unsigned int *)(v19 + 16);
  if (!v21) {
    goto LABEL_20;
  }
  __int16 v22 = *(void **)(v19 + 8);
  uint64_t v23 = &v22[2 * v21];
  do
  {
    unint64_t v24 = v21 >> 1;
    uint64_t v25 = &v22[2 * (v21 >> 1)];
    unint64_t v27 = *v25;
    uint64_t v26 = v25 + 2;
    v21 += ~(v21 >> 1);
    if (v27 < v20) {
      __int16 v22 = v26;
    }
    else {
      unint64_t v21 = v24;
    }
  }
  while (v21);
  if (v22 != v23 && *v22 == v20) {
    uint64_t v28 = v22[1];
  }
  else {
LABEL_20:
  }
    uint64_t v28 = 0;
  v107[0] = v18;
  v107[1] = v28;
  uint64_t v29 = (uint64_t *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v29) {
    goto LABEL_30;
  }
  uint64_t v30 = *v29;
  unint64_t v31 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v32 = *(unsigned int *)(v30 + 16);
  if (!v32) {
    goto LABEL_30;
  }
  uint64_t v33 = *(void **)(v30 + 8);
  uint64_t v34 = &v33[2 * v32];
  do
  {
    unint64_t v35 = v32 >> 1;
    uint64_t v36 = &v33[2 * (v32 >> 1)];
    unint64_t v38 = *v36;
    uint64_t v37 = v36 + 2;
    v32 += ~(v32 >> 1);
    if (v38 < v31) {
      uint64_t v33 = v37;
    }
    else {
      unint64_t v32 = v35;
    }
  }
  while (v32);
  if (v33 != v34 && *v33 == v31) {
    uint64_t v39 = v33[1];
  }
  else {
LABEL_30:
  }
    uint64_t v39 = 0;
  v106[0] = (uint64_t)v29;
  v106[1] = v39;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v108)) {
    goto LABEL_48;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v108);
  if (v41)
  {
    uint64_t v42 = 8 * v41;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v42 -= 8;
      if (!v42) {
        goto LABEL_36;
      }
    }
    goto LABEL_48;
  }
LABEL_36:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v107)) {
    goto LABEL_48;
  }
  unint64_t v43 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v107);
  if (v44)
  {
    uint64_t v45 = 8 * v44;
    while (*v43 != 0x8000000000000000)
    {
      ++v43;
      v45 -= 8;
      if (!v45) {
        goto LABEL_41;
      }
    }
    goto LABEL_48;
  }
LABEL_41:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v106))
  {
LABEL_48:
    uint64_t v120 = "failed: input and output must have static shapes";
    v122[8] = 259;
    uint64_t v55 = v110;
    __dst = &v120;
    uint64_t v56 = a5[2];
    if (v56 && mlir::RewriterBase::Listener::classof(v56)) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v56 + 64))(v56, *((void *)v55 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__dst);
    }
    else {
      return 0;
    }
  }
  unint64_t v46 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v106);
  if (v47)
  {
    uint64_t v48 = 8 * v47;
    while (*v46 != 0x8000000000000000)
    {
      ++v46;
      v48 -= 8;
      if (!v48) {
        goto LABEL_46;
      }
    }
    goto LABEL_48;
  }
LABEL_46:
  uint64_t v120 = (char *)v122;
  unint64_t v121 = 0x500000000;
  __dst = v119;
  uint64_t v118 = 0x500000000;
  uint64_t v114 = v116;
  uint64_t v115 = 0x500000000;
  uint64_t v50 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v108);
  uint64_t v51 = v49;
  __src = v113;
  uint64_t v112 = 0x500000000;
  size_t v52 = 8 * v49;
  if ((unint64_t)(8 * v49) < 0x29)
  {
    int v53 = 0;
    uint64_t v54 = (char *)v113;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v113, (8 * v49) >> 3, 8);
    int v53 = v112;
    uint64_t v54 = (char *)__src;
  }
  if (v51)
  {
    memcpy(&v54[8 * v53], v50, v52);
    int v53 = v112;
    uint64_t v54 = (char *)__src;
  }
  unint64_t v59 = v53 + (v52 >> 3);
  LODWORD(v112) = v59;
  if (v54 == (char *)v113)
  {
    uint64_t v60 = v121;
    if (v121 >= v59)
    {
      if (v59) {
        memmove(v120, v113, 8 * v59);
      }
      goto LABEL_73;
    }
    if (HIDWORD(v121) >= v59)
    {
      if (v121)
      {
        memmove(v120, v113, 8 * v121);
        goto LABEL_71;
      }
    }
    else
    {
      LODWORD(v121) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, v122, v59, 8);
    }
    uint64_t v60 = 0;
LABEL_71:
    if (v60 != v112) {
      memcpy(&v120[8 * v60], (char *)__src + 8 * v60, 8 * v112 - 8 * v60);
    }
LABEL_73:
    LODWORD(v121) = v59;
    goto LABEL_74;
  }
  if (v120 != (char *)v122)
  {
    free(v120);
    uint64_t v54 = (char *)__src;
    LODWORD(v59) = v112;
  }
  uint64_t v120 = v54;
  unint64_t v121 = __PAIR64__(HIDWORD(v112), v59);
  __src = v113;
  HIDWORD(v112) = 0;
LABEL_74:
  LODWORD(v112) = 0;
  if (__src != v113) {
    free(__src);
  }
  mlir::placement::TensorToMemref::getOutputShapeBeforeInterleave(&v110, (uint64_t)&__src);
  int v61 = __src;
  if (__src == v113)
  {
    unsigned int v62 = v112;
    uint64_t v63 = v118;
    if (v118 >= v112)
    {
      if (v112) {
        memmove(__dst, __src, 8 * v112);
      }
      goto LABEL_90;
    }
    if (HIDWORD(v118) >= v112)
    {
      if (v118)
      {
        memmove(__dst, __src, 8 * v118);
        goto LABEL_88;
      }
    }
    else
    {
      LODWORD(v118) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v119, v112, 8);
    }
    uint64_t v63 = 0;
LABEL_88:
    if (v63 != v112) {
      memcpy((char *)__dst + 8 * v63, (char *)__src + 8 * v63, 8 * v112 - 8 * v63);
    }
LABEL_90:
    LODWORD(v118) = v62;
    goto LABEL_91;
  }
  if (__dst != v119)
  {
    free(__dst);
    int v61 = __src;
  }
  __dst = v61;
  uint64_t v118 = v112;
  __src = v113;
  HIDWORD(v112) = 0;
  unsigned int v62 = v118;
LABEL_91:
  LODWORD(v112) = 0;
  if (__src != v113)
  {
    free(__src);
    unsigned int v62 = v118;
  }
  uint64_t v64 = (char *)__dst;
  LODWORD(v115) = 0;
  if (v62 <= HIDWORD(v115))
  {
    int v65 = 0;
    if (!v62) {
      goto LABEL_104;
    }
    uint64_t v66 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v62, 8);
    int v65 = v115;
    uint64_t v66 = v115;
  }
  float v67 = (char *)v114 + 8 * v66;
  unint64_t v68 = (v62 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v68 >= 7)
  {
    float v70 = (char *)v114 + 8 * v66;
    uint64_t v69 = v64;
    if ((unint64_t)(v70 - v64) >= 0x20)
    {
      unint64_t v71 = v68 + 1;
      uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      float v67 = (void *)((char *)v67 + v72);
      uint64_t v69 = &v64[v72];
      unint64_t v73 = (long long *)(v64 + 16);
      uint64_t v74 = v70 + 16;
      uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v76 = *v73;
        *(v74 - 1) = *(v73 - 1);
        _OWORD *v74 = v76;
        v73 += 2;
        v74 += 2;
        v75 -= 4;
      }
      while (v75);
      if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_104;
      }
    }
  }
  else
  {
    uint64_t v69 = v64;
  }
  do
  {
    uint64_t v77 = *(void *)v69;
    v69 += 8;
    *v67++ = v77;
  }
  while (v69 != &v64[8 * v62]);
LABEL_104:
  uint64_t v78 = v65 + v62;
  LODWORD(v115) = v78;
  uint64_t v79 = v118;
  if (v121 >= v118)
  {
LABEL_113:
    __src = "failed: ANE I/O op isn't a squeeze / expandDims";
    v113[8] = 259;
    uint64_t v88 = v110;
    v123[0] = (uint64_t)&__src;
    uint64_t v89 = a5[2];
    if (v89 && mlir::RewriterBase::Listener::classof(v89)) {
      uint64_t v57 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v89 + 64))(v89, *((void *)v88 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v123);
    }
    else {
      uint64_t v57 = 0;
    }
  }
  else
  {
    unint64_t v80 = (uint64_t *)__dst;
    uint64_t v81 = v120;
    uint64_t v82 = &v120[8 * v121];
    do
    {
      uint64_t v84 = *v80++;
      uint64_t v83 = v84;
      if (v84 == 1)
      {
        uint64_t v85 = &v120[8 * v121];
        if (v81 != v82) {
          uint64_t v85 = &v81[8 * (*(void *)v81 == 1)];
        }
      }
      else
      {
        if (v81 == v82) {
          goto LABEL_113;
        }
        uint64_t v87 = *(void *)v81;
        unint64_t v86 = v81 + 8;
        if (v83 != v87) {
          goto LABEL_113;
        }
        uint64_t v85 = v86;
      }
      uint64_t v81 = v85;
      --v79;
    }
    while (v79);
    v123[0] = v78;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a5 + 1), 0x40u, 0);
    uint64_t v91 = (void *)mlir::RankedTensorType::get((uint64_t)v123, 1, IntegerType, 0);
    uint64_t v92 = v91;
    if (!v91) {
      goto LABEL_126;
    }
    uint64_t v93 = *v91;
    unint64_t v94 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v95 = *(unsigned int *)(v93 + 16);
    if (!v95) {
      goto LABEL_126;
    }
    uint64_t v96 = *(void **)(v93 + 8);
    unint64_t v97 = &v96[2 * v95];
    do
    {
      unint64_t v98 = v95 >> 1;
      uint64_t v99 = &v96[2 * (v95 >> 1)];
      unint64_t v101 = *v99;
      unint64_t v100 = v99 + 2;
      v95 += ~(v95 >> 1);
      if (v101 < v94) {
        uint64_t v96 = v100;
      }
      else {
        unint64_t v95 = v98;
      }
    }
    while (v95);
    if (v96 != v97 && *v96 == v94) {
      uint64_t v102 = v96[1];
    }
    else {
LABEL_126:
    }
      uint64_t v102 = 0;
    uint64_t v57 = 1;
    __src = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v92, v102, v114, 8 * v115, 8, 1, 0);
    uint64_t v103 = v110;
    v123[0] = mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v110);
    uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(&v110);
    uint64_t v104 = mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), *((void *)v103 + 3), v106, &v109, (uint64_t *)&__src, v123, &InterleaveAttr);
    (*(void (**)(void *, mlir::Operation *, mlir::GenericProgramPoint *))(*a5 + 32))(a5, v103, v104);
  }
  if (v114 != v116) {
    free(v114);
  }
  if (__dst != v119) {
    free(__dst);
  }
  if (v120 != (char *)v122) {
    free(v120);
  }
  return v57;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.tensor_to_memref", (const unsigned __int8 *)0x1A, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    void v23[2] = (uint64_t)"placement.tensor_to_memref";
    v23[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::placement::MemrefToTensor::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::mps::CastOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithCast(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::mps::CastOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithCast(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::CastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::CastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::CastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::mps::CastOp,mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v26[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(v8 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    uint64_t v14 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    v26[0] = v8;
    uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v26);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
    if (DefiningOp)
    {
      uint64_t v10 = DefiningOp;
      uint64_t v11 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
      unint64_t v13 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id
          ? (mlir::Operation *)DefiningOp
          : 0;
      __int16 v24 = v13;
      if (v12)
      {
        while (1)
        {
          char v16 = *(mlir::Block **)(v10 + 16);
          if (!v16) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v16);
          uint64_t v10 = ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_25;
          }
        }
        uint64_t v10 = 0;
LABEL_25:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v24);
        uint64_t v20 = v19;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        __int16 v27 = 261;
        v26[0] = Callee;
        v26[1] = v20;
        uint64_t v22 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v26);
        uint64_t v23 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v10, v22);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v23, a3);
      }
    }
    uint64_t v14 = "failed: ANE regionCall op not found";
  }
  __int16 v27 = 259;
  uint64_t Input = v26;
  v26[0] = v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v15);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v15 + 64))(v15, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CastOp &>(mlir::mps::CastOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Input);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::mps::CastOp,mlir::placement::MemrefToTensor>::matchAndRewrite(int a1, uint64_t *a2, mlir::Operation *a3, mlir::anec *this, void *a5)
{
  uint64_t v49 = a3;
  if (!this
    || *(_UNKNOWN **)(*((void *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    if ((int)mlir::anec::getRegionOpFamily(this, (Operation *)a2) <= 2) {
      goto LABEL_40;
    }
    goto LABEL_10;
  }
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::anec *)((char *)this + 24));
  v50[0] = (uint64_t)"mpsx.aneFamily";
  __int16 v51 = 259;
  uint64_t v10 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v50);
  v50[0] = v10;
  if (*((unsigned char *)this + 47))
  {
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v50);
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, AttrData, v12);
    if (v14)
    {
      if (InherentAttr) {
        goto LABEL_6;
      }
LABEL_38:
      uint64_t v15 = 0;
      goto LABEL_39;
    }
    uint64_t v10 = v50[0];
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, v10);
  if (!InherentAttr) {
    goto LABEL_38;
  }
LABEL_6:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v15 = InherentAttr;
  }
  else {
    uint64_t v15 = 0;
  }
LABEL_39:
  v50[0] = v15;
  uint64_t v42 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v50);
  if ((int)mlir::anec::getFamily(v42, v43) <= 2)
  {
LABEL_40:
    v50[0] = (uint64_t)"failed: F32 I/Os not supported for ANE devices prior to A15";
    __int16 v51 = 259;
    v47[0] = v50;
    uint64_t v44 = a5[2];
    if (v44)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v44);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v44 + 64))(v44, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CastOp &>(mlir::mps::CastOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v47);
      }
      return result;
    }
    return 0;
  }
LABEL_10:
  uint64_t v48 = *(void *)(*((void *)a3 + 9) + 24);
  char v16 = (uint64_t *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_19;
  }
  uint64_t v20 = *(void **)(v17 + 8);
  unint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    uint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    __int16 v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      uint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_19:
  }
    uint64_t v26 = 0;
  v47[0] = v16;
  v47[1] = v26;
  __int16 v27 = (uint64_t *)(*(a2 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v27) {
    goto LABEL_29;
  }
  uint64_t v28 = *v27;
  unint64_t v29 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v30 = *(unsigned int *)(v28 + 16);
  if (!v30) {
    goto LABEL_29;
  }
  unint64_t v31 = *(void **)(v28 + 8);
  unint64_t v32 = &v31[2 * v30];
  do
  {
    unint64_t v33 = v30 >> 1;
    uint64_t v34 = &v31[2 * (v30 >> 1)];
    unint64_t v36 = *v34;
    unint64_t v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29) {
      unint64_t v31 = v35;
    }
    else {
      unint64_t v30 = v33;
    }
  }
  while (v30);
  if (v31 != v32 && *v31 == v29) {
    uint64_t v37 = v31[1];
  }
  else {
LABEL_29:
  }
    uint64_t v37 = 0;
  v46[0] = (uint64_t)v27;
  v46[1] = v37;
  v50[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
  if (mlir::Type::isF16((mlir::Type *)v50))
  {
    int OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v50[0] = mlir::placement::MemrefToTensor::getShapeAttr(&v49);
      uint64_t v38 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
      int OperandRange = (uint64_t *)mlir::TypeAttr::get(v38);
      uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(&v49);
      uint64_t v39 = mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), a2[3], v46, &v48, v50, (uint64_t *)&OperandRange, &InterleaveAttr);
      (*(void (**)(void *, uint64_t *, mlir::GenericProgramPoint *))(*a5 + 32))(a5, a2, v39);
      return 1;
    }
  }
  v50[0] = (uint64_t)"failed: ANE I/O op can only do F16 MemRef <-> F32 Tensor cast";
  __int16 v51 = 259;
  int OperandRange = v50;
  uint64_t v41 = a5[2];
  if (!v41) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v41);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v41 + 64))(v41, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CastOp &>(mlir::mps::CastOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &OperandRange);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CastOp &>(mlir::mps::CastOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::placement::TensorToMemref,mlir::mps::CastOp>::~CanonicalizeANEIOWithCast(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::placement::TensorToMemref,mlir::mps::CastOp>::~CanonicalizeANEIOWithCast(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::placement::TensorToMemref,mlir::mps::CastOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v28[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v28);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(result + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    unint64_t v18 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a2 + 36);
    if (v9) {
      uint64_t v10 = (mlir::Operation *)(a2 - 16);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    mlir::ResultRange::use_begin((uint64_t *)&v34, (uint64_t *)v32);
    uint64_t v11 = *(unsigned int *)(a2 + 36);
    if (v11) {
      uint64_t v12 = (mlir::Operation *)(a2 - 16);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    mlir::ResultRange::use_end((uint64_t *)&v34, v30);
    uint64_t v13 = v33;
    uint64_t v29 = v33;
    v28[0] = v32[0];
    v28[1] = v32[1];
    uint64_t v14 = v31;
    if (v33 != v31)
    {
      uint64_t v15 = 0;
      do
      {
        char v16 = *(void **)(v13 + 16);
        if (v16) {
          BOOL v17 = *(void *)(v16[6] + 16) == (void)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17)
        {
          if (v15)
          {
            BOOL v17 = v15 == v16;
            uint64_t v15 = v16;
            if (!v17) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v15 = v16;
          }
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v32);
        uint64_t v13 = v33;
      }
      while (v33 != v14);
      uint64_t v34 = (mlir::Operation *)v15;
      if (v15)
      {
        while (1)
        {
          unint64_t v19 = (mlir::Block *)v15[2];
          if (!v19) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v19);
          uint64_t v15 = (void *)ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_39;
          }
        }
        uint64_t v15 = 0;
LABEL_39:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v34);
        uint64_t v24 = v23;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
        LOWORD(v29) = 261;
        *(void *)&v28[0] = Callee;
        *((void *)&v28[0] + 1) = v24;
        uint64_t v26 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
        uint64_t v27 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v15, v26);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v27, a3);
      }
    }
LABEL_34:
    unint64_t v18 = "failed: ANE regionCall op not found";
  }
  *(void *)&v28[0] = v18;
  LOWORD(v29) = 259;
  *(void *)&v32[0] = v28;
  uint64_t v21 = *(void *)(a3 + 16);
  if (!v21) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v21);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), _OWORD *))(*(void *)v21 + 64))(v21, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithCast<mlir::placement::TensorToMemref,mlir::mps::CastOp>::matchAndRewrite(int a1, uint64_t *a2, uint64_t a3, mlir::anec *this, void *a5)
{
  uint64_t v49 = (mlir::Operation *)a2;
  if (!this
    || *(_UNKNOWN **)(*((void *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    if ((int)mlir::anec::getRegionOpFamily(this, (Operation *)a2) <= 2) {
      goto LABEL_40;
    }
    goto LABEL_10;
  }
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::anec *)((char *)this + 24));
  v50[0] = (uint64_t)"mpsx.aneFamily";
  __int16 v51 = 259;
  uint64_t v10 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v50);
  v50[0] = v10;
  if (*((unsigned char *)this + 47))
  {
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v50);
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, AttrData, v12);
    if (v14)
    {
      if (InherentAttr) {
        goto LABEL_6;
      }
LABEL_38:
      uint64_t v15 = 0;
      goto LABEL_39;
    }
    uint64_t v10 = v50[0];
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, v10);
  if (!InherentAttr) {
    goto LABEL_38;
  }
LABEL_6:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v15 = InherentAttr;
  }
  else {
    uint64_t v15 = 0;
  }
LABEL_39:
  v50[0] = v15;
  uint64_t v42 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v50);
  if ((int)mlir::anec::getFamily(v42, v43) <= 2)
  {
LABEL_40:
    v50[0] = (uint64_t)"failed: F32 I/Os not supported for ANE devices prior to A15";
    __int16 v51 = 259;
    v47[0] = v50;
    uint64_t v44 = a5[2];
    if (v44)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v44);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v44 + 64))(v44, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v47);
      }
      return result;
    }
    return 0;
  }
LABEL_10:
  uint64_t v48 = *(void *)(*(void *)(a3 + 72) + 24);
  char v16 = (uint64_t *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_19;
  }
  uint64_t v20 = *(void **)(v17 + 8);
  uint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    uint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    uint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      uint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_19:
  }
    uint64_t v26 = 0;
  v47[0] = v16;
  v47[1] = v26;
  uint64_t v27 = (uint64_t *)(*(a2 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v27) {
    goto LABEL_29;
  }
  uint64_t v28 = *v27;
  unint64_t v29 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v30 = *(unsigned int *)(v28 + 16);
  if (!v30) {
    goto LABEL_29;
  }
  uint64_t v31 = *(void **)(v28 + 8);
  unint64_t v32 = &v31[2 * v30];
  do
  {
    unint64_t v33 = v30 >> 1;
    uint64_t v34 = &v31[2 * (v30 >> 1)];
    unint64_t v36 = *v34;
    uint64_t v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29) {
      uint64_t v31 = v35;
    }
    else {
      unint64_t v30 = v33;
    }
  }
  while (v30);
  if (v31 != v32 && *v31 == v29) {
    uint64_t v37 = v31[1];
  }
  else {
LABEL_29:
  }
    uint64_t v37 = 0;
  v46[0] = (uint64_t)v27;
  v46[1] = v37;
  v50[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
  if (mlir::Type::isF32((mlir::Type *)v50))
  {
    int OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      v50[0] = mlir::placement::MemrefToTensor::getShapeAttr(&v49);
      uint64_t v38 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
      int OperandRange = (uint64_t *)mlir::TypeAttr::get(v38);
      uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(&v49);
      uint64_t v39 = mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), a2[3], v46, &v48, v50, (uint64_t *)&OperandRange, &InterleaveAttr);
      (*(void (**)(void *, uint64_t *, mlir::GenericProgramPoint *))(*a5 + 32))(a5, a2, v39);
      return 1;
    }
  }
  v50[0] = (uint64_t)"failed: ANE I/O op can only do F16 MemRef <-> F32 Tensor cast";
  __int16 v51 = 259;
  int OperandRange = v50;
  uint64_t v41 = a5[2];
  if (!v41) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v41);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v41 + 64))(v41, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &OperandRange);
  }
  return result;
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::mpsx::InterleaveOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithInterleave(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::mpsx::InterleaveOp,mlir::placement::MemrefToTensor>::~CanonicalizeANEIOWithInterleave(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::InterleaveOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::InterleaveOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::InterleaveOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::mpsx::InterleaveOp,mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v26[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(v8 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    char v14 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    v26[0] = v8;
    uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v26);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
    if (DefiningOp)
    {
      uint64_t v10 = DefiningOp;
      uint64_t v11 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
      uint64_t v13 = v11 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id
          ? (mlir::Operation *)DefiningOp
          : 0;
      uint64_t v24 = v13;
      if (v12)
      {
        while (1)
        {
          char v16 = *(mlir::Block **)(v10 + 16);
          if (!v16) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v16);
          uint64_t v10 = ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_25;
          }
        }
        uint64_t v10 = 0;
LABEL_25:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v24);
        uint64_t v20 = v19;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        __int16 v27 = 261;
        v26[0] = Callee;
        v26[1] = v20;
        uint64_t v22 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v26);
        uint64_t v23 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v10, v22);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v23, a3);
      }
    }
    char v14 = "failed: ANE regionCall op not found";
  }
  __int16 v27 = 259;
  uint64_t Input = v26;
  v26[0] = v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v15);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v15 + 64))(v15, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mpsx::InterleaveOp &>(mlir::mpsx::InterleaveOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Input);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::mpsx::InterleaveOp,mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, mlir::Operation *a3, uint64_t a4, void *a5)
{
  uint64_t v26 = a3;
  __int16 v27 = a2;
  uint64_t v25 = *(void *)(*((void *)a3 + 9) + 24);
  uint64_t MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v27);
  if (mlir::placement::MemrefToTensor::getInterleaveAttr(&v26))
  {
    v28[0] = (uint64_t)"failed to fold interleave: interTensorMemref op already has an interleave attribute";
    __int16 v29 = 259;
    char v7 = v27;
    ShapeAttr = v28;
    uint64_t v8 = a5[2];
    if (v8)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v8);
      if (result) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v8 + 64))(v8, *((void *)v7 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mpsx::InterleaveOp &>(mlir::mpsx::InterleaveOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &ShapeAttr);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_14;
    }
    char v14 = *(void **)(v11 + 8);
    uint64_t v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      uint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      unint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        char v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_14:
    }
      uint64_t v20 = 0;
    v28[0] = (uint64_t)v10;
    v28[1] = v20;
    uint64_t v21 = v27;
    ShapeAttr = (uint64_t *)mlir::placement::MemrefToTensor::getShapeAttr(&v26);
    uint64_t ResultElementTypeAttr = mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v26);
    uint64_t v22 = mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), *((void *)v21 + 3), v28, &v25, (uint64_t *)&ShapeAttr, &ResultElementTypeAttr, &MultipliersAttr);
    (*(void (**)(void *, mlir::Operation *, mlir::GenericProgramPoint *))(*a5 + 32))(a5, v21, v22);
    return 1;
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mpsx::InterleaveOp &>(mlir::mpsx::InterleaveOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::placement::TensorToMemref,mlir::mpsx::DeinterleaveOp>::~CanonicalizeANEIOWithInterleave(void *a1)
{
  char v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::placement::TensorToMemref,mlir::mpsx::DeinterleaveOp>::~CanonicalizeANEIOWithInterleave(void *__p)
{
  char v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithTypeChangerBase<mlir::placement::TensorToMemref,mlir::mpsx::DeinterleaveOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v28[0] = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v28);
  if (!result) {
    return result;
  }
  char v7 = *(void **)(*(void *)(result + 48) + 16);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::mpsx::DeinterleaveOp,void>::id) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::mpsx::DeinterleaveOp,void>::id) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(result + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id
    || *(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    unint64_t v18 = "failed: Cannot optimize through stitched regions";
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a2 + 36);
    if (v9) {
      uint64_t v10 = (mlir::Operation *)(a2 - 16);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    mlir::ResultRange::use_begin((uint64_t *)&v34, (uint64_t *)v32);
    uint64_t v11 = *(unsigned int *)(a2 + 36);
    if (v11) {
      unint64_t v12 = (mlir::Operation *)(a2 - 16);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    mlir::ResultRange::use_end((uint64_t *)&v34, v30);
    uint64_t v13 = v33;
    uint64_t v29 = v33;
    v28[0] = v32[0];
    v28[1] = v32[1];
    uint64_t v14 = v31;
    if (v33 != v31)
    {
      uint64_t v15 = 0;
      do
      {
        unint64_t v16 = *(void **)(v13 + 16);
        if (v16) {
          BOOL v17 = *(void *)(v16[6] + 16) == (void)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17)
        {
          if (v15)
          {
            BOOL v17 = v15 == v16;
            uint64_t v15 = v16;
            if (!v17) {
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v15 = v16;
          }
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v32);
        uint64_t v13 = v33;
      }
      while (v33 != v14);
      uint64_t v34 = (mlir::Operation *)v15;
      if (v15)
      {
        while (1)
        {
          unint64_t v19 = (mlir::Block *)v15[2];
          if (!v19) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v19);
          uint64_t v15 = (void *)ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_39;
          }
        }
        uint64_t v15 = 0;
LABEL_39:
        uint64_t Callee = mlir::placement::RegionCall::getCallee(&v34);
        uint64_t v24 = v23;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
        LOWORD(v29) = 261;
        *(void *)&v28[0] = Callee;
        *((void *)&v28[0] + 1) = v24;
        uint64_t v26 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
        uint64_t v27 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v15, v26);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, v8, v27, a3);
      }
    }
LABEL_34:
    unint64_t v18 = "failed: ANE regionCall op not found";
  }
  *(void *)&v28[0] = v18;
  LOWORD(v29) = 259;
  *(void *)&v32[0] = v28;
  uint64_t v21 = *(void *)(a3 + 16);
  if (!v21) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v21);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), _OWORD *))(*(void *)v21 + 64))(v21, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeANEIOWithInterleave<mlir::placement::TensorToMemref,mlir::mpsx::DeinterleaveOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, mlir::Operation *a3, uint64_t a4, void *a5)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v25 = *(void *)(*((void *)a3 + 9) + 24);
  uint64_t MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(&v26);
  if (mlir::placement::MemrefToTensor::getInterleaveAttr(&v27))
  {
    v28[0] = (uint64_t)"failed to fold interleave: interTensorMemref op already has an interleave attribute";
    __int16 v29 = 259;
    char v7 = v27;
    ShapeAttr = v28;
    uint64_t v8 = a5[2];
    if (v8)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v8);
      if (result) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v8 + 64))(v8, *((void *)v7 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::TensorToMemref &>(mlir::placement::TensorToMemref &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &ShapeAttr);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_14;
    }
    uint64_t v14 = *(void **)(v11 + 8);
    uint64_t v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      BOOL v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      unint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        uint64_t v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_14:
    }
      uint64_t v20 = 0;
    v28[0] = (uint64_t)v10;
    v28[1] = v20;
    uint64_t v21 = v27;
    ShapeAttr = (uint64_t *)mlir::placement::MemrefToTensor::getShapeAttr(&v27);
    uint64_t ResultElementTypeAttr = mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v27);
    uint64_t v22 = mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::ShapedType &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::TypeAttr,mlir::IntegerAttr>((mlir::OpBuilder *)(a5 + 1), *((void *)v21 + 3), v28, &v25, (uint64_t *)&ShapeAttr, &ResultElementTypeAttr, &MultipliersAttr);
    (*(void (**)(void *, mlir::Operation *, mlir::GenericProgramPoint *))(*a5 + 32))(a5, v21, v22);
    return 1;
  }
  return result;
}

void mlir::anec::anonymous namespace'::LowerDuplicateMemrefToTensor::~LowerDuplicateMemrefToTensor(mlir::anec::_anonymous_namespace_::LowerDuplicateMemrefToTensor *this)
{
  char v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  char v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::MemrefToTensor>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::MemrefToTensor>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::MemrefToTensor>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::LowerDuplicateMemrefToTensor::matchAndRewrite(uint64_t a1, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  v54[2] = *(mlir::Operation **)MEMORY[0x1E4F143B8];
  __int16 v51 = a2;
  uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51);
  uint64_t v50 = Input;
  uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v51);
  uint64_t ResultElementTypeAttr = mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v51);
  uint64_t v49 = ResultElementTypeAttr;
  uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(&v51);
  uint64_t v8 = InterleaveAttr;
  uint64_t v48 = InterleaveAttr;
  if (!ShapeAttr && !ResultElementTypeAttr && !InterleaveAttr) {
    return 0;
  }
  uint64_t v9 = (void *)*Input;
  if (!v9) {
    return 0;
  }
  while (1)
  {
    uint64_t v10 = (mlir::Operation *)v9[2];
    if (*(_UNKNOWN **)(*((void *)v10 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
      uint64_t v10 = 0;
    }
    v54[0] = v10;
    if (v10 && v10 != v51)
    {
      uint64_t Shape = mlir::placement::MemrefToTensor::getShape(v54);
      if (!v13
        || ShapeAttr != Shape
        || ResultElementTypeAttr != mlir::placement::MemrefToTensor::getResultElementTypeAttr(v54)
        || v8 != mlir::placement::MemrefToTensor::getInterleaveAttr(v54))
      {
        break;
      }
    }
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      return 0;
    }
  }
  uint64_t v14 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::Value &>(a3 + 1, *((void *)v51 + 3), &v50)- 16);
  uint64_t v47 = v14;
  if (v8)
  {
    uint64_t v14 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mpsx::InterleaveOp,mlir::Value &,mlir::IntegerAttr &>(a3 + 1, *((void *)v51 + 3), (uint64_t *)&v47, &v48)- 16);
    uint64_t v47 = v14;
  }
  if (ShapeAttr)
  {
    uint64_t v15 = (mlir::Operation *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v15) {
      goto LABEL_29;
    }
    uint64_t v16 = *(void *)v15;
    unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v18 = *(unsigned int *)(v16 + 16);
    if (!v18) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void **)(v16 + 8);
    uint64_t v20 = &v19[2 * v18];
    do
    {
      unint64_t v21 = v18 >> 1;
      uint64_t v22 = &v19[2 * (v18 >> 1)];
      unint64_t v24 = *v22;
      uint64_t v23 = v22 + 2;
      v18 += ~(v18 >> 1);
      if (v24 < v17) {
        unint64_t v19 = v23;
      }
      else {
        unint64_t v18 = v21;
      }
    }
    while (v18);
    if (v19 != v20 && *v19 == v17) {
      uint64_t v25 = (mlir::Operation *)v19[1];
    }
    else {
LABEL_29:
    }
      uint64_t v25 = 0;
    v54[0] = v15;
    v54[1] = v25;
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
    uint64_t v28 = v27;
    uint64_t v29 = *((void *)v51 + 3);
    uint64_t v53 = v27;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 1);
    uint64_t v31 = (void *)mlir::RankedTensorType::get((uint64_t)&v53, 1, IntegerType, 0);
    unint64_t v32 = v31;
    if (!v31) {
      goto LABEL_39;
    }
    uint64_t v33 = *v31;
    unint64_t v34 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v35 = *(unsigned int *)(v33 + 16);
    if (!v35) {
      goto LABEL_39;
    }
    unint64_t v36 = *(void **)(v33 + 8);
    uint64_t v37 = &v36[2 * v35];
    do
    {
      unint64_t v38 = v35 >> 1;
      uint64_t v39 = &v36[2 * (v35 >> 1)];
      unint64_t v41 = *v39;
      uint64_t v40 = v39 + 2;
      v35 += ~(v35 >> 1);
      if (v41 < v34) {
        unint64_t v36 = v40;
      }
      else {
        unint64_t v35 = v38;
      }
    }
    while (v35);
    if (v36 != v37 && *v36 == v34) {
      uint64_t v42 = v36[1];
    }
    else {
LABEL_39:
    }
      uint64_t v42 = 0;
    unint64_t v46 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v32, v42, ArgAttrsAttr, 8 * v28, 8, 1, 1);
    v54[0] = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v29, &v46);
    uint64_t v14 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *((void *)v51 + 3), (uint64_t *)&v47, v54)- 16);
    uint64_t v47 = v14;
  }
  if (ResultElementTypeAttr)
  {
    uint64_t v14 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::TypeAttr &>(a3 + 1, *((void *)v51 + 3), (uint64_t *)&v47, &v49)- 16);
    uint64_t v47 = v14;
  }
  uint64_t v43 = v51;
  v54[0] = v14;
  uint64_t v44 = 1;
  mlir::ValueRange::ValueRange(v52, (uint64_t)v54, 1uLL);
  (*((void (**)(mlir::UnknownLoc **, mlir::Operation *, unint64_t, unint64_t))*a3 + 3))(a3, v43, v52[0], v52[1]);
  return v44;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::Value &>(mlir::UnknownLoc **a1, uint64_t a2, void *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.memref_to_tensor", (const unsigned __int8 *)0x1A, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"placement.memref_to_tensor";
    v15[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::placement::MemrefToTensor::build(a1, (uint64_t)v17, a3, 1, 0, 0);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::InterleaveOp,mlir::Value &,mlir::IntegerAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.interleave", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"mpsx.interleave";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mpsx::InterleaveOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::InterleaveOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t **a3)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC, Context);
  if (!v8)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"mps.constant";
    v26[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v7);
  uint64_t v9 = *a3;
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_11;
  }
  char v13 = *(void **)(v10 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    __int16 v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    unint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      char v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_11:
  }
    uint64_t v19 = 0;
  mlir::mps::ConstantOp::build((uint64_t)a1, (uint64_t)v28, v9, v19);
  uint64_t v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v21;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, void *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"mps.reshape";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReshapeOp::build(a1, (uint64_t)v19, *a3, *a4 - 16, 0);
  unint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::TypeAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"mps.cast";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::CastOp::build(a1, (uint64_t)v19, *a3, *a4);
  unint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_134ANECRegionCallCanonicalizationPass12canonicalizeES3_E3__0NS1_9placement10RegionCallEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t a1, mlir::Operation *a2)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    {
      uint64_t v106 = a2;
      if (mlir::placement::RegionCall::getRegionType(&v106) == 1)
      {
        uint64_t v107 = v106;
        uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v107);
        if (v3)
        {
          uint64_t v4 = Inputs;
          uint64_t v5 = v3;
          uint64_t v6 = 0;
          while (1)
          {
            v109[0] = *(void *)(v4 + 32 * v6 + 24);
            v108[0] = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v109);
            if (mlir::placement::MemrefToTensor::getResultElementTypeAttr(v108)
              || mlir::placement::MemrefToTensor::getInterleaveAttr(v108))
            {
              break;
            }
LABEL_6:
            if (++v6 == v5) {
              goto LABEL_51;
            }
          }
          v110[0] = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v108) + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v7 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v108) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v7) {
            goto LABEL_18;
          }
          uint64_t v8 = *v7;
          unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v10 = *(unsigned int *)(v8 + 16);
          if (!v10) {
            goto LABEL_18;
          }
          unint64_t v11 = *(void **)(v8 + 8);
          unint64_t v12 = &v11[2 * v10];
          do
          {
            unint64_t v13 = v10 >> 1;
            uint64_t v14 = &v11[2 * (v10 >> 1)];
            unint64_t v16 = *v14;
            unint64_t v15 = v14 + 2;
            v10 += ~(v10 >> 1);
            if (v16 < v9) {
              unint64_t v11 = v15;
            }
            else {
              unint64_t v10 = v13;
            }
          }
          while (v10);
          if (v11 != v12 && *v11 == v9) {
            unint64_t v17 = v11[1];
          }
          else {
LABEL_18:
          }
            unint64_t v17 = 0;
          uint64_t v118 = v7;
          unint64_t v119 = v17;
          __dst = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v110);
          unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__dst);
          __dst = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v118);
          unsigned int v19 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__dst);
          __dst = v116;
          unint64_t v115 = 0x500000000;
          mlir::placement::TensorToMemref::getOutputShapeBeforeInterleave(v108, (uint64_t)&v111);
          uint64_t v20 = v111;
          if (v111 != v113)
          {
            if (__dst != v116)
            {
              free(__dst);
              uint64_t v20 = v111;
            }
            __dst = v20;
            unint64_t v115 = v112;
            unint64_t v111 = v113;
            HIDWORD(v112) = 0;
LABEL_34:
            LODWORD(v112) = 0;
            if (v111 != v113) {
              free(v111);
            }
            unint64_t v111 = v113;
            unint64_t v112 = 0x500000000;
            uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(v108);
            if (InterleaveAttr)
            {
              uint64_t Interleave = mlir::placement::MemrefToTensor::getInterleave(v108);
              unint64_t ANENextSupportedInterleaveValue = mlir::getANENextSupportedInterleaveValue(Interleave);
              uint64_t v26 = __dst;
              unint64_t v27 = v115;
              *((void *)__dst + v115 - 1) = *((void *)__dst + v115 - 1)
                                                          / Interleave
                                                          * ANENextSupportedInterleaveValue;
              mlir::getRowBytesAlignedStrideInBytes((uint64_t)v26, v27, IntOrFloatBitWidth >> 3, 0x40uLL, (uint64_t)&v111);
            }
            else
            {
              mlir::getStrideInBytes(v110[0], (uint64_t)&v111, 0);
            }
            uint64_t v28 = (char *)__dst;
            uint64_t v29 = *((void *)__dst + v115 - 1) * (v19 >> 3);
            unint64_t v30 = v112;
            uint64_t v31 = v112 - 2;
            unint64_t v32 = v111;
            if (v29 <= *((void *)v111 + v31))
            {
              if (!InterleaveAttr)
              {
LABEL_46:
                if (v32 != v113) {
                  free(v32);
                }
                if (__dst != v116) {
                  free(__dst);
                }
                goto LABEL_6;
              }
            }
            else
            {
              unint64_t v33 = (v29 + 63) & 0xFFFFFFFFFFFFFFC0;
              *((void *)v111 + v31) = v33;
              if (v30 >= 3)
              {
                unint64_t v34 = v28 - 16;
                unint64_t v35 = v30;
                do
                {
                  v33 *= *(void *)&v34[8 * v35];
                  v32[v35 - 3] = v33;
                  unint64_t v36 = v35 - 4;
                  --v35;
                }
                while (v36 < v30);
              }
            }
            uint64_t v37 = mlir::cloneTypeWithStrideInBytes(v110[0], v32, v30, 0);
            uint64_t Result = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v108);
            *(void *)(Result + 8) = *(void *)(Result + 8) & 7 | v37;
            unint64_t v32 = v111;
            goto LABEL_46;
          }
          int v21 = v112;
          uint64_t v22 = v115;
          if (v115 >= v112)
          {
            if (v112) {
              memmove(__dst, v113, 8 * v112);
            }
            goto LABEL_33;
          }
          if (HIDWORD(v115) >= v112)
          {
            if (v115)
            {
              memmove(__dst, v113, 8 * v115);
              goto LABEL_31;
            }
          }
          else
          {
            LODWORD(v115) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v116, v112, 8);
          }
          uint64_t v22 = 0;
LABEL_31:
          if (v22 != v112) {
            memcpy((char *)__dst + 8 * v22, (char *)v111 + 8 * v22, 8 * v112 - 8 * v22);
          }
LABEL_33:
          LODWORD(v115) = v21;
          goto LABEL_34;
        }
LABEL_51:
        uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v107);
        if (v40)
        {
          uint64_t v41 = Results;
          uint64_t v42 = v40;
          uint64_t v43 = 0;
          while (1)
          {
            v108[0] = *(mlir::Operation **)(*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v41, v43) + 16);
            if (mlir::placement::MemrefToTensor::getResultElementTypeAttr(v108)
              || mlir::placement::MemrefToTensor::getInterleaveAttr(v108))
            {
              break;
            }
LABEL_53:
            if (++v43 == v42) {
              goto LABEL_98;
            }
          }
          v110[0] = *(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v108) + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v44 = (void *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v108) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v44) {
            goto LABEL_65;
          }
          uint64_t v45 = *v44;
          unint64_t v46 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v47 = *(unsigned int *)(v45 + 16);
          if (!v47) {
            goto LABEL_65;
          }
          uint64_t v48 = *(void **)(v45 + 8);
          uint64_t v49 = &v48[2 * v47];
          do
          {
            unint64_t v50 = v47 >> 1;
            __int16 v51 = &v48[2 * (v47 >> 1)];
            unint64_t v53 = *v51;
            size_t v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46) {
              uint64_t v48 = v52;
            }
            else {
              unint64_t v47 = v50;
            }
          }
          while (v47);
          if (v48 != v49 && *v48 == v46) {
            unint64_t v54 = v48[1];
          }
          else {
LABEL_65:
          }
            unint64_t v54 = 0;
          uint64_t v118 = v44;
          unint64_t v119 = v54;
          __dst = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v110);
          unsigned int v55 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__dst);
          __dst = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v118);
          unsigned int v56 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__dst);
          __dst = v116;
          unint64_t v115 = 0x500000000;
          mlir::placement::MemrefToTensor::getInputShapeAfterInterleave(v108, &v111);
          uint64_t v57 = v111;
          if (v111 != v113)
          {
            if (__dst != v116)
            {
              free(__dst);
              uint64_t v57 = v111;
            }
            __dst = v57;
            unint64_t v115 = v112;
            unint64_t v111 = v113;
            HIDWORD(v112) = 0;
LABEL_81:
            LODWORD(v112) = 0;
            if (v111 != v113) {
              free(v111);
            }
            unint64_t v111 = v113;
            unint64_t v112 = 0x500000000;
            uint64_t v60 = mlir::placement::MemrefToTensor::getInterleaveAttr(v108);
            if (v60)
            {
              uint64_t v61 = mlir::placement::MemrefToTensor::getInterleave(v108);
              unint64_t v62 = mlir::getANENextSupportedInterleaveValue(v61);
              uint64_t v63 = __dst;
              unint64_t v64 = v115;
              *((void *)__dst + v115 - 1) = *((void *)__dst + v115 - 1) / v61 * v62;
              mlir::getRowBytesAlignedStrideInBytes((uint64_t)v63, v64, v55 >> 3, 0x40uLL, (uint64_t)&v111);
            }
            else
            {
              mlir::getStrideInBytes(v110[0], (uint64_t)&v111, 0);
            }
            int v65 = (char *)__dst;
            uint64_t v66 = *((void *)__dst + v115 - 1) * (v56 >> 3);
            unint64_t v67 = v112;
            uint64_t v68 = v112 - 2;
            uint64_t v69 = v111;
            if (v66 <= *((void *)v111 + v68))
            {
              if (!v60)
              {
LABEL_93:
                if (v69 != v113) {
                  free(v69);
                }
                if (__dst != v116) {
                  free(__dst);
                }
                goto LABEL_53;
              }
            }
            else
            {
              unint64_t v70 = (v66 + 63) & 0xFFFFFFFFFFFFFFC0;
              *((void *)v111 + v68) = v70;
              if (v67 >= 3)
              {
                unint64_t v71 = v65 - 16;
                unint64_t v72 = v67;
                do
                {
                  v70 *= *(void *)&v71[8 * v72];
                  v69[v72 - 3] = v70;
                  unint64_t v73 = v72 - 4;
                  --v72;
                }
                while (v73 < v67);
              }
            }
            uint64_t v74 = mlir::cloneTypeWithStrideInBytes(v110[0], v69, v67, 0);
            uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v108);
            *(void *)(Input + 8) = *(void *)(Input + 8) & 7 | v74;
            uint64_t v69 = v111;
            goto LABEL_93;
          }
          int v58 = v112;
          uint64_t v59 = v115;
          if (v115 >= v112)
          {
            if (v112) {
              memmove(__dst, v113, 8 * v112);
            }
            goto LABEL_80;
          }
          if (HIDWORD(v115) >= v112)
          {
            if (v115)
            {
              memmove(__dst, v113, 8 * v115);
              goto LABEL_78;
            }
          }
          else
          {
            LODWORD(v115) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v116, v112, 8);
          }
          uint64_t v59 = 0;
LABEL_78:
          if (v59 != v112) {
            memcpy((char *)__dst + 8 * v59, (char *)v111 + 8 * v59, 8 * v112 - 8 * v59);
          }
LABEL_80:
          LODWORD(v115) = v58;
          goto LABEL_81;
        }
LABEL_98:
        long long v76 = v107;
        while (1)
        {
          uint64_t v77 = (mlir::Block *)*((void *)v76 + 2);
          if (!v77) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v77);
          long long v76 = (mlir::Operation *)ParentOp;
          if (!ParentOp
            || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
          {
            goto LABEL_104;
          }
        }
        long long v76 = 0;
LABEL_104:
        uint64_t Callee = (void *)mlir::placement::RegionCall::getCallee(&v107);
        unint64_t v81 = v80;
        uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)v76 + 24));
        __int16 v117 = 261;
        __dst = Callee;
        unint64_t v115 = v81;
        uint64_t v83 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&__dst);
        InterfaceFor = (mlir::Operation *)mlir::SymbolTable::lookupSymbolIn((unsigned int *)v76, v83);
        uint64_t v85 = InterfaceFor;
        if (InterfaceFor) {
          InterfaceFor = (mlir::Operation *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
        }
        unint64_t v86 = v107;
        v108[0] = v85;
        v108[1] = InterfaceFor;
        uint64_t v87 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)v107 + 24));
        if ((*((unsigned char *)v86 + 46) & 0x80) != 0)
        {
          uint64_t v88 = (void *)*((void *)v86 + 9);
          unint64_t v89 = *((unsigned int *)v86 + 17);
        }
        else
        {
          uint64_t v88 = 0;
          unint64_t v89 = 0;
        }
        unint64_t v111 = v88;
        unint64_t v112 = v89;
        mlir::OperandRange::getTypes((uint64_t *)&v111, (uint64_t *)&__dst);
        mlir::ValueRange::ValueRange((unint64_t *)&v111, (uint64_t)__dst + 32 * v115, v116[1] - v115);
        mlir::TypeRange::TypeRange(v110, (uint64_t)v111, v112);
        unint64_t v90 = *((unsigned int *)v86 + 9);
        uint64_t v91 = (uint64_t)v86 - 16;
        if (!v90) {
          uint64_t v91 = 0;
        }
        uint64_t v118 = (void *)v91;
        unint64_t v119 = v90;
        mlir::OperandRange::getTypes((uint64_t *)&v118, (uint64_t *)&v111);
        uint64_t NextResultAtOffset = (uint64_t)v111;
        unint64_t v93 = v112;
        uint64_t v94 = v113[1];
        if (v112) {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v111, v112);
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v118, NextResultAtOffset, v94 - v93);
        mlir::TypeRange::TypeRange(v109, (uint64_t)v118, v119);
        uint64_t v95 = mlir::FunctionType::get(v87, v110[0], v110[1], v109[0], v109[1]);
        uint64_t v118 = (void *)v95;
        if (v95 != mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v108))
        {
          mlir::TargetLegalizerInterface::setFunctionType(v108, v95);
          if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v118))
          {
            unint64_t v96 = 0;
            do
            {
              uint64_t v97 = *(void *)((((unint64_t)v108[0]
                                + 16 * (((unint64_t)*((unsigned int *)v108[0] + 11) >> 23) & 1)
                                + (((unint64_t)*((unsigned int *)v108[0] + 11) >> 21) & 0x7F8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 32 * *((unsigned int *)v108[0] + 10)
                              + 8);
              if (v97) {
                uint64_t v98 = v97 - 8;
              }
              else {
                uint64_t v98 = 0;
              }
              uint64_t v99 = *(void *)(*(void *)(v98 + 48) + 8 * v96);
              *(void *)(v99 + 8) = *(void *)(v99 + 8) & 7 | *(void *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&v118)
                                                                            + 8 * v96++);
            }
            while (v96 < mlir::AffineExpr::getKind((mlir::AffineExpr *)&v118));
          }
          isPublic = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v108);
          mlir::Block::getTerminator(isPublic);
          uint64_t v102 = v101;
          if (mlir::FunctionType::getNumResults((mlir::FunctionType *)&v118))
          {
            unint64_t v103 = 0;
            uint64_t v104 = 24;
            do
            {
              uint64_t v105 = *(void *)(*(void *)(v102 + 72) + v104);
              *(void *)(v105 + 8) = *(void *)(v105 + 8) & 7 | *(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&v118)
                                                                              + 8 * v103++);
              v104 += 32;
            }
            while (v103 < mlir::FunctionType::getNumResults((mlir::FunctionType *)&v118));
          }
        }
      }
    }
  }
}

uint64_t mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  char v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    unint64_t v9 = *(void **)(v6 + 32);
    unint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      unint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      unint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        unint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      unsigned int v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::anec::writeSingleRegionPlist(uint64_t a1, void *a2, uint64_t a3)
{
  v121[1] = *MEMORY[0x1E4F143B8];
  if (a1) {
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  }
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  if ((v6 & 0x7FFFFF) != 0) {
    unint64_t v7 = (void *)(((a1 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
                  + 32 * *(unsigned int *)(a1 + 40));
  else {
    unint64_t v7 = 0;
  }
  if ((void *)*v7 != v7)
  {
    uint64_t v8 = v7[1];
    uint64_t v9 = v8 ? v8 - 8 : 0;
    unint64_t v10 = *(uint64_t **)(v9 + 48);
    uint64_t v11 = *(void *)(v9 + 56) - (void)v10;
    if (v11)
    {
      for (uint64_t i = 8 * (v11 >> 3); i; i -= 8)
      {
        uint64_t v13 = *v10;
        unint64_t v14 = (std::__shared_weak_count *)a2[1];
        v108[0] = *a2;
        v108[1] = (uint64_t)v14;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            if (!v15) {
              return 0;
            }
          }
          else
          {
            int v16 = v15;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
            if (!v16) {
              return 0;
            }
          }
        }
        {
          return 0;
        }
        ++v10;
      }
    }
  }
  *(void *)&v117[0] = a2;
  *((void *)&v117[0] + 1) = a3;
  if (!mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::anec::writeSingleRegionPlist(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&,mlir::anec::ANECIRWeights &)::$_0>, (uint64_t)v117, 1))return 0; {
  uint64_t v17 = (mlir::ForwardIterator *)a1;
  }
  do
  {
    uint64_t v18 = (mlir::Block *)*((void *)v17 + 2);
    if (!v18)
    {
      uint64_t v17 = 0;
      if (!*(unsigned char *)(a1 + 47)) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v18);
    uint64_t v17 = (mlir::ForwardIterator *)ParentOp;
  }
  while (ParentOp
       && *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  if (!*(unsigned char *)(a1 + 47))
  {
LABEL_34:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a1 + 56, "sym_name", 8uLL);
    if (!InherentAttr) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)"sym_name", 8);
  if (!v22) {
    goto LABEL_34;
  }
  if (!InherentAttr)
  {
LABEL_35:
    uint64_t v23 = 0;
    goto LABEL_36;
  }
LABEL_31:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v23 = InherentAttr;
  }
  else {
    uint64_t v23 = 0;
  }
LABEL_36:
  uint64_t v112 = v23;
  unint64_t v119 = v121;
  uint64_t v120 = 0x100000000;
  *(void *)&v117[0] = &v112;
  *((void *)&v117[0] + 1) = &v119;
  v114[0] = (mlir::Operation *)v117;
  uint64_t v20 = 1;
  mlir::detail::walk<mlir::ForwardIterator>(v17, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_120updateNetworkIOTypesES3_RKNSt3__110shared_ptrINSB_13ANECIRNetworkEEEE3__0NS1_9placement10RegionCallEvEENSD_9enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESS_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)v114, 1);
  if (v120)
  {
    if (v120 == 1)
    {
      uint64_t v24 = *v119;
      __int16 v25 = *(uint64_t **)(*a2 + 8);
      uint64_t v26 = *(unsigned int *)(*a2 + 16);
      unint64_t v27 = *(uint64_t **)(*a2 + 104);
      uint64_t v28 = *(unsigned int *)(*a2 + 112);
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0x7800000000;
      if (*(unsigned char *)(a1 + 47) && (uint64_t v29 = mlir::Operation::getInherentAttr(a1, (uint64_t)"io_info", 7), v30))
      {
        if (!v29) {
          goto LABEL_54;
        }
      }
      else if (!mlir::DictionaryAttr::contains(a1 + 56, "io_info", 7uLL))
      {
LABEL_54:
        if (v26)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 32 * v26;
          do
          {
            uint64_t v39 = *v25;
            uint64_t v40 = *v25 + 8;
            int v41 = *(char *)(*v25 + 31);
            if (v41 >= 0) {
              uint64_t v42 = (int8x16_t *)(*v25 + 8);
            }
            else {
              uint64_t v42 = *(int8x16_t **)(*v25 + 8);
            }
            if (v41 >= 0) {
              uint64_t v43 = (const unsigned __int8 *)*(unsigned __int8 *)(*v25 + 31);
            }
            else {
              uint64_t v43 = *(const unsigned __int8 **)(v39 + 16);
            }
            int Key = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v42, v43);
            if (Key == -1 || Key == (unint64_t)v110)
            {
              *(void *)&v117[0] = *(void *)(*(void *)(v24 + 72) + v34 + 24);
              uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v117);
              if (DefiningOp)
              {
                unint64_t v46 = (uint64_t *)DefiningOp;
                unint64_t v47 = *(void **)(*(void *)(DefiningOp + 48) + 16);
                BOOL v48 = v47 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
                uint64_t v49 = v47 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
                    ? (mlir::Operation *)DefiningOp
                    : 0;
                v114[0] = v49;
                if (v48)
                {
                  uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v114);
                  uint64_t v51 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v114);
                  if ((v52 & 0xFF00000000) == 0)
                  {
LABEL_146:
                    uint64_t v20 = 0;
                    goto LABEL_147;
                  }
                  *(_DWORD *)(v39 + 104) = v52;
                  *(void *)&v117[0] = mlir::placement::MemrefToTensor::getInterleaveAttr(v114);
                  if (*(void *)&v117[0])
                  {
                    UInt = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)v117);
                    unsigned int ANENextSupportedInterleaveValue = mlir::getANENextSupportedInterleaveValue((uint64_t)UInt);
                  }
                  else
                  {
                    unsigned int ANENextSupportedInterleaveValue = 1;
                  }
                  *(void *)(v39 + 96) = ANENextSupportedInterleaveValue;
                }
              }
            }
            else
            {
              int v55 = *(char *)(v39 + 31);
              if (v55 >= 0) {
                unsigned int v56 = (int8x16_t *)v40;
              }
              else {
                unsigned int v56 = *(int8x16_t **)(v39 + 8);
              }
              if (v55 >= 0) {
                uint64_t v57 = (const unsigned __int8 *)*(unsigned __int8 *)(v39 + 31);
              }
              else {
                uint64_t v57 = *(const unsigned __int8 **)(v39 + 16);
              }
              int v58 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v56, v57);
              if (v58 != -1 && v58 != (unint64_t)v110)
              {
                int v59 = *(char *)(v39 + 31);
                if (v59 >= 0) {
                  uint64_t v60 = (int8x16_t *)v40;
                }
                else {
                  uint64_t v60 = *(int8x16_t **)(v39 + 8);
                }
                if (v59 >= 0) {
                  uint64_t v61 = (const unsigned __int8 *)*(unsigned __int8 *)(v39 + 31);
                }
                else {
                  uint64_t v61 = *(const unsigned __int8 **)(v39 + 16);
                }
                int v62 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v60, v61);
                uint64_t v63 = v62;
                if (v62 == -1) {
                  uint64_t v63 = v110;
                }
                uint64_t v64 = *((void *)v109 + v63);
                *(void *)(v39 + 96) = *(void *)(v64 + 104);
                uint64_t v65 = *(void *)(v64 + 56);
                if (*(_DWORD *)(v64 + 64) == 5)
                {
                  int8x16_t v66 = *(int8x16_t *)(v65 + 16);
                  *(int8x16_t *)(v39 + 168) = vextq_s8(*(int8x16_t *)v65, *(int8x16_t *)v65, 8uLL);
                }
                else
                {
                  int8x16_t v66 = *(int8x16_t *)(v65 + 8);
                }
                *(int8x16_t *)(v39 + 152) = vextq_s8(v66, v66, 8uLL);
                *(_DWORD *)(v39 + 104) = *(_DWORD *)(v64 + 112);
                unint64_t v67 = *(uint64_t **)(v64 + 8);
                uint64_t v68 = *(unsigned int *)(v64 + 16);
                if (v68 == 5) {
                  *(void *)(v39 + 144) = v67[1];
                }
                unint64_t v36 = (int8x16_t *)&v67[v68];
                uint64_t v37 = v36[-2].i64[1];
                uint64_t v38 = *v67;
                *(int8x16_t *)(v39 + 112) = vextq_s8(v36[-1], v36[-1], 8uLL);
                *(void *)(v39 + 128) = v37;
                *(void *)(v39 + 136) = v38;
              }
            }
            v34 += 32;
            v25 += 2;
          }
          while (v35 != v34);
        }
        if (v28)
        {
          unint64_t v69 = 0;
          uint64_t v70 = v24 - 96;
          unint64_t v71 = (uint64_t *)(v24 - 16);
          do
          {
            uint64_t v73 = *v27;
            uint64_t v74 = *v27 + 8;
            int v75 = *(char *)(*v27 + 31);
            if (v75 >= 0) {
              long long v76 = (int8x16_t *)(*v27 + 8);
            }
            else {
              long long v76 = *(int8x16_t **)(*v27 + 8);
            }
            if (v75 >= 0) {
              uint64_t v77 = (const unsigned __int8 *)*(unsigned __int8 *)(*v27 + 31);
            }
            else {
              uint64_t v77 = *(const unsigned __int8 **)(v73 + 16);
            }
            int v78 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v76, v77);
            if (v78 != -1 && v78 != (unint64_t)v110)
            {
              int v86 = *(char *)(v73 + 31);
              if (v86 >= 0) {
                uint64_t v87 = (int8x16_t *)v74;
              }
              else {
                uint64_t v87 = *(int8x16_t **)(v73 + 8);
              }
              if (v86 >= 0) {
                uint64_t v88 = (const unsigned __int8 *)*(unsigned __int8 *)(v73 + 31);
              }
              else {
                uint64_t v88 = *(const unsigned __int8 **)(v73 + 16);
              }
              int v89 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v87, v88);
              if (v89 != -1 && v89 != (unint64_t)v110)
              {
                int v90 = *(char *)(v73 + 31);
                if (v90 >= 0) {
                  uint64_t v91 = (int8x16_t *)v74;
                }
                else {
                  uint64_t v91 = *(int8x16_t **)(v73 + 8);
                }
                if (v90 >= 0) {
                  uint64_t v92 = (const unsigned __int8 *)*(unsigned __int8 *)(v73 + 31);
                }
                else {
                  uint64_t v92 = *(const unsigned __int8 **)(v73 + 16);
                }
                int v93 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v91, v92);
                uint64_t v94 = v93;
                if (v93 == -1) {
                  uint64_t v94 = v110;
                }
                uint64_t v95 = *((void *)v109 + v94);
                *(void *)(v73 + 96) = *(void *)(v95 + 104);
                unint64_t v96 = *(int8x16_t **)(v95 + 56);
                uint64_t v97 = *(unsigned int *)(v95 + 64);
                if (v97 == 5)
                {
                  uint64_t v99 = v96[1].i64[0];
                  uint64_t v98 = v96[1].i64[1];
                  *(int8x16_t *)(v73 + 152) = vextq_s8(*v96, *v96, 8uLL);
                }
                else
                {
                  uint64_t v98 = v96[-1].i64[v97];
                  if (v97 <= 2) {
                    uint64_t v100 = v97 - 2;
                  }
                  else {
                    uint64_t v100 = v97 - 3;
                  }
                  uint64_t v99 = v96->i64[v100];
                }
                *(void *)(v73 + 136) = v98;
                *(void *)(v73 + 144) = v99;
                *(_DWORD *)(v73 + 128) = *(_DWORD *)(v95 + 112);
              }
              goto LABEL_102;
            }
            if (v69 > 5)
            {
              uint64_t v79 = *(void *)(v70 - 24 * (v69 - 5));
              if (!v79) {
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v79 = *v71;
              if (!*v71) {
                goto LABEL_102;
              }
            }
            unint64_t v80 = *(mlir::Operation **)(v79 + 16);
            if (*(_UNKNOWN **)(*((void *)v80 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
              unint64_t v81 = v80;
            }
            else {
              unint64_t v81 = 0;
            }
            v114[0] = v81;
            if (v81)
            {
              uint64_t v82 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v114);
              uint64_t v83 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v114);
              if ((v84 & 0xFF00000000) == 0) {
                goto LABEL_146;
              }
              *(_DWORD *)(v73 + 128) = v84;
              *(void *)&v117[0] = mlir::placement::MemrefToTensor::getInterleaveAttr(v114);
              if (*(void *)&v117[0])
              {
                uint64_t v85 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)v117);
                unsigned int v72 = mlir::getANENextSupportedInterleaveValue((uint64_t)v85);
              }
              else
              {
                unsigned int v72 = 1;
              }
              *(void *)(v73 + 96) = v72;
            }
LABEL_102:
            ++v69;
            v71 -= 2;
            v27 += 2;
          }
          while (v28 != v69);
        }
        uint64_t v20 = 1;
LABEL_147:
        if (HIDWORD(v110) && v110)
        {
          uint64_t v101 = 0;
          do
          {
            uint64_t v102 = *(llvm **)((char *)v109 + v101);
            if (v102 != (llvm *)-8 && v102 != 0)
            {
              uint64_t v104 = *(void *)v102;
              uint64_t v105 = (void *)*((void *)v102 + 7);
              if (v105 != (void *)((char *)v102 + 72)) {
                free(v105);
              }
              uint64_t v106 = (void *)*((void *)v102 + 1);
              if (v106 != (void *)((char *)v102 + 24)) {
                free(v106);
              }
              llvm::deallocate_buffer(v102, (void *)(v104 + 121));
            }
            v101 += 8;
          }
          while (8 * v110 != v101);
        }
        free(v109);
        goto LABEL_161;
      }
      if (!*(unsigned char *)(a1 + 47) || (uint64_t v31 = mlir::Operation::getInherentAttr(a1, (uint64_t)"io_info", 7), !v32)) {
        uint64_t v31 = mlir::DictionaryAttr::get(a1 + 56, "io_info", 7uLL);
      }
      uint64_t v113 = v31;
      unint64_t v33 = (uint64_t *)mlir::DictionaryAttr::get((uint64_t)&v113, "input", 5uLL);
      mlir::DictionaryAttr::get((uint64_t)&v113, "output", 6uLL);
      int v118 = 0;
      memset(v117, 0, sizeof(v117));
      v114[0] = (mlir::Operation *)&unk_1EC97F3F0;
      v114[1] = (mlir::Operation *)&v109;
      unint64_t v115 = v114;
      *((void *)&v117[0] + 1) = std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>((char **)v117, v114);
      if (v115 == v114)
      {
        (*((void (**)(mlir::Operation **))v114[0] + 4))(v114);
      }
      else if (v115)
      {
        (*((void (**)(void))*v115 + 5))();
      }
      mlir::AttrTypeWalker::walkImpl(v117, v33, 1u);
      mlir::AttrTypeWalker::~AttrTypeWalker((llvm **)v117);
    }
    v114[0] = (mlir::Operation *)"Found more than one call to the same region";
    __int16 v116 = 259;
    mlir::Operation::emitError((uint64_t *)a1, (uint64_t)v114, (uint64_t)v117);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v117);
    if (*(void *)&v117[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v117);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v117 + 8);
  }
LABEL_161:
  if (v119 != v121) {
    free(v119);
  }
  return v20;
}

uint64_t mlir::anec::anonymous namespace'::addInputToNetwork(uint64_t *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t ANECIRDataType = mlir::anec::getANECIRDataType(a2);
  if ((ANECIRDataType & 0xFF00000000) != 0)
  {
    int v6 = ANECIRDataType;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFF8;
    mlir::anec::getANECInputName(a2, &__p);
    uint64_t v8 = (char *)operator new(0xB8uLL);
    *(void *)uint64_t v8 = &unk_1EC9CB3F8;
    uint64_t v9 = (std::string *)(v8 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v8 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    *((_DWORD *)v8 + 8) = 0;
    v8[71] = 0;
    *((void *)v8 + 9) = 0;
    v8[95] = 0;
    *(void *)uint64_t v8 = &unk_1EC9CB3B8;
    *((void *)v8 + 5) = &unk_1EC9CB3D8;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 12) = 1;
    *((_DWORD *)v8 + 26) = v6;
    *((void *)v8 + 18) = 0;
    *((void *)v8 + 21) = 0;
    *((void *)v8 + 22) = 0;
    uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
    v11->__shared_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D0248;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    mlir::anec::calcANEIOInfo(v7, 0, 0, (uint64_t)&v33);
    if (v39)
    {
      unint64_t v12 = (uint64_t *)v33;
      uint64_t v13 = v34;
      if (v34 == 5) {
        *((void *)v8 + 18) = *((void *)v33 + 1);
      }
      unint64_t v14 = (int8x16_t *)&v12[v13];
      uint64_t v15 = v14[-2].i64[1];
      uint64_t v16 = *v12;
      *((int8x16_t *)v8 + 7) = vextq_s8(v14[-1], v14[-1], 8uLL);
      *((void *)v8 + 16) = v15;
      *((void *)v8 + 17) = v16;
      if (v37 == 5)
      {
        int8x16_t v17 = *((int8x16_t *)v36 + 1);
        *(int8x16_t *)(v8 + 168) = vextq_s8(*(int8x16_t *)v36, *(int8x16_t *)v36, 8uLL);
      }
      else
      {
        int8x16_t v17 = *(int8x16_t *)((char *)v36 + 8);
      }
      *(int8x16_t *)(v8 + 152) = vextq_s8(v17, v17, 8uLL);
      *((void *)v8 + 12) = v38[4];
      uint64_t v18 = *a1;
      char v30 = v8;
      uint64_t v31 = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = (unint64_t *)(v18 + 8);
      unint64_t v19 = *(void *)(v18 + 8);
      uint64_t v21 = *(unsigned int *)(v18 + 16);
      char v22 = (char *)&v30;
      if (v21 >= *(_DWORD *)(v18 + 20))
      {
        unint64_t v27 = v21 + 1;
        BOOL v28 = v19 + 16 * v21 > (unint64_t)&v30;
        if (v19 <= (unint64_t)&v30 && v28)
        {
          uint64_t v29 = (char *)&v30 - v19;
          llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(v18 + 8, v27);
          unint64_t v19 = *v20;
          char v22 = &v29[*v20];
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(v18 + 8, v27);
          unint64_t v19 = *v20;
          char v22 = (char *)&v30;
        }
      }
      uint64_t v23 = *(unsigned int *)(v18 + 16);
      long long v24 = *(_OWORD *)v22;
      *(_OWORD *)(v19 + 16 * v23) = *(_OWORD *)v22;
      if (*((void *)&v24 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
        LODWORD(v23) = *(_DWORD *)(v18 + 16);
      }
      *(_DWORD *)(v18 + 16) = v23 + 1;
      __int16 v25 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      if (v39)
      {
        if (v36 != v38) {
          free(v36);
        }
        if (v33 != &v35) {
          free(v33);
        }
      }
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v10;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v10;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return v10;
  }
  return 0;
}

void std::make_unique[abi:nn180100]<mlir::anec::anonymous namespace'::WriteA12PlistPass,std::string &,std::string &,BOOL &,BOOL &>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = (char *)operator new(0x5E0uLL);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    goto LABEL_6;
  }
  std::string __str = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  std::string __p = *(std::string *)a2;
LABEL_6:
  char v11 = *a3;
  char v12 = *a4;
  char v21 = v11;
  char v20 = v12;
  *(void *)uint64_t v10 = &unk_1EC9CB7B8;
  std::string::operator=((std::string *)(v10 + 472), &__str);
  uint64_t v13 = *((void *)v10 + 71);
  if (!v13) {
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 48))(v13, &__str);
  std::string::operator=((std::string *)v10 + 30, &__p);
  uint64_t v14 = *((void *)v10 + 102);
  if (!v14
    || ((*(void (**)(uint64_t, std::string *))(*(void *)v14 + 48))(v14, &__p),
        v10[968] = v11,
        (uint64_t v15 = *((void *)v10 + 128)) == 0)
    || ((*(void (**)(uint64_t, char *))(*(void *)v15 + 48))(v15, &v21),
        v10[1424] = v12,
        (uint64_t v16 = *((void *)v10 + 185)) == 0))
  {
LABEL_15:
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    mlir::anec::populateWritePlistPass(v17);
    return;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v16 + 48))(v16, &v20);
  *a5 = v10;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void mlir::anec::populateWritePlistPass(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v8 = 8;
  uint64_t v9 = "anec.A12";
  switch((int)a5)
  {
    case 1:
      uint64_t v9 = "anec.A13";
      size_t v8 = 8;
      break;
    case 2:
      uint64_t v9 = "anec.A14";
      size_t v8 = 8;
      break;
    case 3:
      uint64_t v9 = "anec.A15";
      size_t v8 = 8;
      break;
    case 4:
      uint64_t v9 = "anec.A16";
      size_t v8 = 8;
      break;
    case 5:
      uint64_t v9 = "anec.A17";
      size_t v8 = 8;
      break;
    case 6:
      uint64_t v9 = "anec.A11Legacy";
      size_t v8 = 14;
      break;
    default:
      break;
  }
  uint64_t v13 = (unsigned char **)mlir::OpPassManager::nest(a1, v9, v8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    std::string v16 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      std::string __p = *(std::string *)a3;
      goto LABEL_13;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_13:
  ((void (*)(uint64_t *__return_ptr, std::string *, std::string *, uint64_t, uint64_t, uint64_t))mlir::anec::createWritePlistPass)(&v17, &v16, &__p, a4, a5, a6);
  mlir::OpPassManager::addPass(v13, &v17);
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
}

void mlir::anec::ANECIRInput::~ANECIRInput(mlir::anec::ANECIRInput *this)
{
  *((void *)this + 5) = &unk_1EC9CC4B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 6));
LABEL_3:
  *(void *)this = &unk_1EC9CB3F8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this + 5) = &unk_1EC9CC4B8;
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 6));
LABEL_3:
  *(void *)this = &unk_1EC9CB3F8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  operator delete(this);
}

void non-virtual thunk to'mlir::anec::ANECIRInput::~ANECIRInput(void **this)
{
  *this = &unk_1EC9CC4B8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:
  *(this - 5) = &unk_1EC9CB3F8;
  if (*((char *)this - 9) < 0) {
    operator delete(*(this - 4));
  }
}

{
  void **v2;
  uint64_t vars8;

  char v2 = this - 5;
  *this = &unk_1EC9CC4B8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:
  *(this - 5) = &unk_1EC9CB3F8;
  if (*((char *)this - 9) < 0) {
    operator delete(*(this - 4));
  }

  operator delete(v2);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRInput *,std::shared_ptr<mlir::anec::ANECIRInput>::__shared_ptr_default_delete<mlir::anec::ANECIRInput,mlir::anec::ANECIRInput>,std::allocator<mlir::anec::ANECIRInput>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRInput *,std::shared_ptr<mlir::anec::ANECIRInput>::__shared_ptr_default_delete<mlir::anec::ANECIRInput,mlir::anec::ANECIRInput>,std::allocator<mlir::anec::ANECIRInput>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 24);
  if (!v1) {
    return;
  }
  *((void *)v1 + 5) = &unk_1EC9CC4B8;
  if (v1[95] < 0)
  {
    operator delete(*((void **)v1 + 9));
    if ((v1[71] & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*((void **)v1 + 6));
    goto LABEL_4;
  }
  if (v1[71] < 0) {
    goto LABEL_11;
  }
LABEL_4:
  *(void *)uint64_t v1 = &unk_1EC9CB3F8;
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }

  operator delete(v1);
}

uint64_t mlir::anec::anonymous namespace'::updateNetworkIOTypes(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&)::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  v29[23] = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
  uint64_t v27 = ElementTypeOrSelf;
  uint64_t v26 = mlir::getElementTypeOrSelf(a3);
  if (ElementTypeOrSelf == v26)
  {
    return mlir::anec::getANECIRDataType(ElementTypeOrSelf);
  }
  else
  {
    if (mlir::Type::isF32((mlir::Type *)&v27) && mlir::Type::isF16((mlir::Type *)&v26))
    {
      size_t v8 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v8) {
        goto LABEL_13;
      }
      uint64_t v9 = *v8;
      unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v11 = *(unsigned int *)(v9 + 16);
      if (!v11) {
        goto LABEL_13;
      }
      char v12 = *(void **)(v9 + 8);
      uint64_t v13 = &v12[2 * v11];
      do
      {
        unint64_t v14 = v11 >> 1;
        uint64_t v15 = &v12[2 * (v11 >> 1)];
        unint64_t v17 = *v15;
        std::string v16 = v15 + 2;
        v11 += ~(v11 >> 1);
        if (v17 < v10) {
          char v12 = v16;
        }
        else {
          unint64_t v11 = v14;
        }
      }
      while (v11);
      if (v12 != v13 && *v12 == v10) {
        uint64_t v18 = v12[1];
      }
      else {
LABEL_13:
      }
        uint64_t v18 = 0;
      BOOL v28 = v8;
      v29[0] = v18;
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v28);
      uint64_t v21 = *(void *)(ArgAttrsAttr + 8 * v20 - 8);
      if (v21 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v27) >> 3) <= a4) {
        return mlir::anec::getANECIRDataType(v27);
      }
      char v22 = "Invalid input strides: row stride must be large enough to represent the whole F32 row";
    }
    else
    {
      char v22 = "Only F16 <-> F32 ANE / host type conversion is supported";
    }
    long long v24 = v22;
    __int16 v25 = 259;
    mlir::Operation::emitError(a1, (uint64_t)&v24, (uint64_t)&v28);
    if (v28) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
    return 0;
  }
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_120updateNetworkIOTypesES3_RKNSt3__110shared_ptrINSB_13ANECIRNetworkEEEE3__0NS1_9placement10RegionCallEvEENSD_9enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESS_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, mlir::Operation *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    {
      uint64_t v2 = *a1;
      unint64_t v11 = a2;
      uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData(*(mlir::OpaqueAttr **)v2);
      size_t v5 = v4;
      uint64_t Callee = (const void *)mlir::placement::RegionCall::getCallee(&v11);
      if (v5 == v7 && (!v5 || !memcmp(AttrData, Callee, v5)))
      {
        uint64_t v8 = *(void *)(v2 + 8);
        uint64_t v9 = v11;
        uint64_t v10 = *(unsigned int *)(v8 + 8);
        if (v10 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v2 + 8), (void *)(v8 + 16), v10 + 1, 8);
          LODWORD(v10) = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v10) = v9;
        ++*(_DWORD *)(v8 + 8);
      }
    }
  }
}

char *std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>(char **a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (v2 - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(32 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[32 * v3];
  unint64_t v11 = (void *)a2[3];
  if (v11)
  {
    if (v11 == a2)
    {
      *((void *)v10 + 3) = v10;
      (*(void (**)(void *, char *))(*a2 + 24))(a2, v10);
      uint64_t v2 = a1[1];
    }
    else
    {
      *((void *)v10 + 3) = v11;
      a2[3] = 0;
    }
  }
  else
  {
    *((void *)v10 + 3) = 0;
  }
  char v12 = &v9[32 * v8];
  uint64_t v13 = v10 + 32;
  unint64_t v14 = *a1;
  if (v2 != *a1)
  {
    do
    {
      uint64_t v15 = v10;
      v10 -= 32;
      std::string v16 = v2 - 32;
      unint64_t v17 = (char *)*((void *)v2 - 1);
      if (v17)
      {
        if (v16 == v17)
        {
          *((void *)v15 - 1) = v10;
          (*(void (**)(void, char *))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
        }
        else
        {
          *((void *)v15 - 1) = v17;
          *((void *)v2 - 1) = 0;
        }
      }
      else
      {
        *((void *)v15 - 1) = 0;
      }
      v2 -= 32;
    }
    while (v16 != v14);
    uint64_t v2 = *a1;
  }
  uint64_t v18 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v12;
  if (v18 != v2)
  {
    unint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      char v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void *_ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EC97F3F0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC97F3F0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)*a2 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    return 1;
  }
  uint64_t v36 = *a2;
  __src = v39;
  uint64_t v38 = 0x400000000;
  uint64_t v40 = v42;
  uint64_t v41 = 0x400000000;
  uint64_t UInt = 1;
  uint64_t v3 = mlir::DictionaryAttr::get((uint64_t)&v36, "name", 4uLL);
  if (v3)
  {
    if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v35 = v4;
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v35);
  uint64_t v7 = v6;
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v36, "interleave", 0xAuLL);
  if (v8)
  {
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v35 = v9;
  uint64_t UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v35);
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v36, "shape", 5uLL);
  if (v10)
  {
    uint64_t v11 = v10;
    if (mlir::DenseIntElementsAttr::classof(v10)) {
      uint64_t v10 = v11;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  mlir::getValues<long long>(v10, (uint64_t)&__src);
  uint64_t v12 = mlir::DictionaryAttr::get((uint64_t)&v36, "strides", 7uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    if (mlir::DenseIntElementsAttr::classof(v12)) {
      uint64_t v12 = v13;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  mlir::getValues<long long>(v12, (uint64_t)&v40);
  uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)&v36, "elementType", 0xBuLL);
  if (v14)
  {
    if (*(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = v15;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
  int ANECIRDataType = mlir::anec::getANECIRDataType(Value);
  uint64_t v17 = *(void *)(a1 + 8);
  unsigned int v18 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)v17, AttrData, v7);
  uint64_t v19 = *(void *)v17;
  uint64_t v20 = v18;
  uint64_t v21 = *(void *)(*(void *)v17 + 8 * v18);
  if (v21 == -8)
  {
    --*(_DWORD *)(v17 + 16);
  }
  else if (v21)
  {
    goto LABEL_27;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(v7 + 121), (std::align_val_t)8uLL);
  uint64_t v26 = buffer;
  uint64_t v27 = buffer + 120;
  if (v7) {
    memcpy(buffer + 120, AttrData, (size_t)v7);
  }
  v7[(void)v27] = 0;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(void *)uint64_t v26 = v7;
  *((void *)v26 + 1) = v26 + 24;
  *((void *)v26 + 2) = 0x400000000;
  *((void *)v26 + 7) = v26 + 72;
  *((_DWORD *)v26 + 17) = 4;
  *((void *)v26 + 13) = 1;
  *(void *)(v19 + 8 * v20) = v26;
  ++*(_DWORD *)(v17 + 12);
  for (uint64_t i = (uint64_t *)(*(void *)v17
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v17, v20)); ; ++i)
  {
    uint64_t v21 = *i;
    if (*i && v21 != -8) {
      break;
    }
  }
LABEL_27:
  char v22 = (void **)(v21 + 8);
  if ((void **)(v21 + 8) != &__src)
  {
    unint64_t v23 = v38;
    uint64_t v24 = *(unsigned int *)(v21 + 16);
    if (v24 >= v38)
    {
      if (v38) {
        memmove(*v22, __src, 8 * v38);
      }
LABEL_48:
      *(_DWORD *)(v21 + 16) = v23;
      char v30 = (void **)(v21 + 56);
      unint64_t v31 = v41;
      uint64_t v32 = *(unsigned int *)(v21 + 64);
      if (v32 >= v41)
      {
        if (v41) {
          memmove(*v30, v40, 8 * v41);
        }
        goto LABEL_58;
      }
      if (*(_DWORD *)(v21 + 68) >= v41)
      {
        if (v32)
        {
          memmove(*v30, v40, 8 * v32);
          goto LABEL_56;
        }
      }
      else
      {
        *(_DWORD *)(v21 + 64) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 56, (void *)(v21 + 72), v31, 8);
      }
      uint64_t v32 = 0;
LABEL_56:
      if (v32 != v41) {
        memcpy((char *)*v30 + 8 * v32, (char *)v40 + 8 * v32, 8 * v41 - 8 * v32);
      }
LABEL_58:
      *(_DWORD *)(v21 + 64) = v31;
      goto LABEL_59;
    }
    if (*(_DWORD *)(v21 + 20) >= v38)
    {
      if (v24)
      {
        memmove(*v22, __src, 8 * v24);
        goto LABEL_46;
      }
    }
    else
    {
      *(_DWORD *)(v21 + 16) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 8, (void *)(v21 + 24), v23, 8);
    }
    uint64_t v24 = 0;
LABEL_46:
    if (v24 != v38) {
      memcpy((char *)*v22 + 8 * v24, (char *)__src + 8 * v24, 8 * v38 - 8 * v24);
    }
    goto LABEL_48;
  }
LABEL_59:
  unint64_t v33 = v40;
  *(void *)(v21 + 104) = UInt;
  *(_DWORD *)(v21 + 112) = ANECIRDataType;
  if (v33 != v42) {
    free(v33);
  }
  if (__src != v39) {
    free(__src);
  }
  return 1;
}

void mlir::AttrTypeWalker::~AttrTypeWalker(llvm **this)
{
}

void mlir::anec::ANECIRNetwork::~ANECIRNetwork(mlir::anec::ANECIRNetwork *this)
{
  mlir::anec::ANECIRNetwork::~ANECIRNetwork(this);

  operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *(void *)this = &unk_1EC9CC220;
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 32);
    uint64_t v4 = (void *)*((void *)this + 31);
    if (v3 != v2)
    {
      do
      {
        size_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v2;
    operator delete(v4);
  }
  int v6 = *((void *)this + 28);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 29);
    uint64_t v8 = (void *)*((void *)this + 28);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v6;
    operator delete(v8);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  uint64_t v10 = (char *)*((void *)this + 13);
  uint64_t v11 = *((unsigned int *)this + 28);
  if (v11)
  {
    uint64_t v12 = v10 - 8;
    uint64_t v13 = 16 * v11;
    do
    {
      uint64_t v14 = *(std::__shared_weak_count **)&v12[v13];
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v13 -= 16;
    }
    while (v13);
    uint64_t v10 = (char *)*((void *)this + 13);
  }
  if (v10 != (char *)this + 120) {
    free(v10);
  }
  uint64_t v15 = (char *)*((void *)this + 1);
  std::string v16 = *((unsigned int *)this + 4);
  if (v16)
  {
    uint64_t v17 = v15 - 8;
    unsigned int v18 = 16 * v16;
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)&v17[v18];
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      v18 -= 16;
    }
    while (v18);
    uint64_t v15 = (char *)*((void *)this + 1);
  }
  if (v15 != (char *)this + 24) {
    free(v15);
  }
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRNetwork *,std::shared_ptr<mlir::anec::ANECIRNetwork>::__shared_ptr_default_delete<mlir::anec::ANECIRNetwork,mlir::anec::ANECIRNetwork>,std::allocator<mlir::anec::ANECIRNetwork>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<mlir::anec::ANECIRNetwork *,std::shared_ptr<mlir::anec::ANECIRNetwork>::__shared_ptr_default_delete<mlir::anec::ANECIRNetwork,mlir::anec::ANECIRNetwork>,std::allocator<mlir::anec::ANECIRNetwork>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::anec::writeSingleRegionPlist(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&,mlir::anec::ANECIRWeights &)::$_0>(uint64_t a1, mlir::anec::_anonymous_namespace_ *a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(void *, uint64_t))(**((void **)a2 + 6) + 32))(*((void **)a2 + 6), v4)
  {
    if (!mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2))
    {
      uint64_t v7 = 0;
      uint64_t InterfaceFor = 0;
      return 1;
    }
    uint64_t v7 = a2;
    uint64_t InterfaceFor = mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
    if (!a2
      || mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)&v7, **(void **)a1, *(void *)(a1 + 8)))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::anec::anonymous namespace'::addConstToNetwork(mlir::anec::_anonymous_namespace_ *this, mlir::Operation *a2, mlir::anec::ANECIRNetwork *a3, mlir::anec::ANECIRWeights *a4)
{
  v37[23] = *MEMORY[0x1E4F143B8];
  if (mlir::anec::ANECIRWeights::hasConstant(a3, this) || (mlir::isOpTriviallyDead((void ***)this, v7) & 1) != 0) {
    return 1;
  }
  unint64_t v35 = *((void *)this - 1) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
  unint64_t v11 = v10;
  unint64_t v34 = v10;
  mlir::anec::computeOpKeyString(this, &__p);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v36 = (uint64_t **)&v31;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v36, (uint64_t)this))
  {
    if (mlir::ElementsAttr::getNumElements(v31, v32))
    {
      if (v11 < 6)
      {
        uint64_t v13 = mlir::anec::ANECIRWeights::addConstant(a3, this);
        uint64_t v15 = (void *)*((void *)this - 2);
        if (v15)
        {
          uint64_t v16 = v13;
          uint64_t v17 = v14;
          while (1)
          {
            uint64_t v18 = v15[2];
            uint64_t v19 = mlir::TypeID::get<mlir::OpTrait::anec::HasWeights<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::HasWeights>(void)::Empty>>();
            if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v18 + 48) + 32))(*(void *)(v18 + 48), v19))break; {
            uint64_t v15 = (void *)*v15;
            }
            if (!v15) {
              goto LABEL_20;
            }
          }
          uint64_t v36 = (uint64_t **)&v34;
          v37[0] = &v35;
          mlir::anec::ANECIRConstant::Create((uint64_t)&__p, &v28);
          uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35);
          uint64_t ANECIRDataType = mlir::anec::getANECIRDataType(RHS);
          if ((ANECIRDataType & 0xFF00000000) != 0)
          {
            mlir::anec::ANECIRConstant::SetWeight((uint64_t)v28, v16, ANECIRDataType, v17, v20, v21, v22, v23, v24);
            v27[0] = v28;
            v27[1] = v29;
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            }
            mlir::anec::ANECIRNetwork::AddConstant((uint64_t)a2, (uint64_t)v27);
            std::shared_ptr<plist::PListInt>::~shared_ptr[abi:nn180100]((uint64_t)v27);
            uint64_t v8 = 1;
          }
          else
          {
            uint64_t v8 = 0;
          }
          std::shared_ptr<plist::PListInt>::~shared_ptr[abi:nn180100]((uint64_t)&v28);
        }
        else
        {
LABEL_20:
          uint64_t v8 = 1;
        }
        goto LABEL_14;
      }
      uint64_t v12 = "Weights should have a rank less than or equal to 5";
    }
    else
    {
      uint64_t v12 = "Weights should have 1 or more elements";
    }
  }
  else
  {
    uint64_t v12 = "Unable to get Elements from the constant op";
  }
  BOOL v28 = (const void **)v12;
  __int16 v30 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v28, (uint64_t)&v36);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v8;
}

void *mlir::anec::ANECIRConstant::Create@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v4 = &unk_1EC9CB3F8;
  size_t v5 = (std::string *)(v4 + 8);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *((void *)v4 + 3) = *(void *)(a1 + 16);
  }
  *((_DWORD *)v4 + 8) = 16;
  *(void *)uint64_t v4 = &unk_1EC9CC240;
  *a2 = v4;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1EC9D0398;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

uint64_t mlir::anec::anonymous namespace'::addConstToNetwork(mlir::Operation *,mlir::anec::ANECIRNetwork *,mlir::anec::ANECIRWeights &)::$_1::operator()(uint64_t a1, int a2)
{
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(a2, **(void **)a1);
  if (v4) {
    return *(void *)(mlir::ArrayAttr::getValue(*(mlir::ArrayAttr **)(a1 + 8)) + 8 * IndexFromDim);
  }
  else {
    return 1;
  }
}

_OWORD *mlir::anec::ANECIRNetwork::AddConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 256);
  if ((unint64_t)v3 >= *(void *)(a1 + 264))
  {
    uint64_t result = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a1 + 248, (long long *)a2);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = v3 + 2;
  }
  *(void *)(a1 + 256) = result;
  return result;
}

void mlir::anec::ANECIRConstant::~ANECIRConstant(void **this)
{
  *this = &unk_1EC9CB3F8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1EC9CB3F8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  operator delete(this);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRConstant *,std::shared_ptr<mlir::anec::ANECIRConstant>::__shared_ptr_default_delete<mlir::anec::ANECIRConstant,mlir::anec::ANECIRConstant>,std::allocator<mlir::anec::ANECIRConstant>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRConstant *,std::shared_ptr<mlir::anec::ANECIRConstant>::__shared_ptr_default_delete<mlir::anec::ANECIRConstant,mlir::anec::ANECIRConstant>,std::allocator<mlir::anec::ANECIRConstant>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    *uint64_t v1 = &unk_1EC9CB3F8;
    if (*((char *)v1 + 31) < 0) {
      operator delete(v1[1]);
    }
    operator delete(v1);
  }
}

uint64_t mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void **)(v6 + 32);
    unint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      uint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        uint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::anec::WriteA12PlistPassBase<mlir::anec::anonymous namespace'::WriteA12PlistPass>::WriteA12PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A12";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC288;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  unint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  unint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA12PlistPass::~WriteA12PlistPass(mlir::anec::_anonymous_namespace_::WriteA12PlistPass *this)
{
  *(void *)this = &unk_1EC9CC288;
  *((void *)this + 162) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 1456;
  BOOL v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  unint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA12PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA12PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA12PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  unint64_t v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA12PlistPassBase<mlir::anec::anonymous namespace'::WriteA12PlistPass>::getName()
{
  return "WriteA12PlistPass";
}

const char *mlir::anec::WriteA12PlistPassBase<mlir::anec::anonymous namespace'::WriteA12PlistPass>::getArgument()
{
  return "write-A12-plist";
}

const char *mlir::anec::WriteA12PlistPassBase<mlir::anec::anonymous namespace'::WriteA12PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA12PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA12PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    unint64_t v10 = (char *)this + 1176;
  }
  else {
    unint64_t v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A12>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA12PlistPassBase<mlir::anec::anonymous namespace'::WriteA12PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC288;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CB7B8;
  *a2 = v4;
  return result;
}

void *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>(void *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v30[0] = a3;
  v30[1] = a4;
  v33[0] = a2;
  uint64_t v7 = llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>((uint64_t)a1, (uint64_t)v30, v33, a5);
  uint64_t v8 = v7 + 232;
  *(unsigned char *)(v7 + 240) = 0;
  *(void *)uint64_t v7 = &unk_1EC9CCD48;
  *(void *)(v7 + 232) = &unk_1EC9CCDC8;
  __n128 v10 = (uint64_t *)a2[21];
  unint64_t v9 = a2[22];
  std::string::size_type v11 = v10;
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v13 = (uint64_t *)a2[20];
    uint64_t v14 = v10 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v9 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (uint64_t *)&v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    uint64_t *v19 = v8;
    uint64_t v12 = v19 + 1;
    if (v10 != v13)
    {
      unint64_t v21 = (char *)v10 - (char *)v13 - 8;
      if (v21 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v13 - v18) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      std::string::size_type v11 = &v10[v23 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v19 = (uint64_t *)((char *)v19 - v23);
      uint64_t v24 = &v18[8 * v14 - 16];
      __int16 v25 = v10 - 2;
      uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
        *(_OWORD *)uint64_t v24 = v27;
        v24 -= 32;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v28 = *--v11;
          *--uint64_t v19 = v28;
        }
        while (v11 != v13);
      }
      std::string::size_type v11 = (uint64_t *)a2[20];
    }
    a2[20] = v19;
    a2[21] = v12;
    a2[22] = v20;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *__n128 v10 = v8;
    uint64_t v12 = v10 + 1;
  }
  a2[21] = v12;
  v31[0] = &unk_1EC9CF858;
  v31[1] = a1;
  unint64_t v34 = v33;
  uint64_t v32 = v31;
  v33[0] = &unk_1EC9CF858;
  v33[1] = a1;
  std::__function::__value_func<void ()(std::string const&)>::swap[abi:nn180100](v33, a1 + 25);
  if (v34 == v33)
  {
    (*((void (**)(const void **))v33[0] + 4))(v33);
  }
  else if (v34)
  {
    (*((void (**)(void))*v34 + 5))();
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  return a1;
}

void mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  uint64_t v1 = (void *)mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1);

  operator delete(v1);
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::print(void *a1, llvm::raw_ostream *this)
{
  size_t v4 = (const void *)a1[2];
  size_t v5 = a1[3];
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      uint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    uint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *uint64_t v6 = 61;
  }
  __n128 v10 = (const char *)a1[16];
  unint64_t v9 = (const char *)(a1 + 16);
  uint64_t v8 = v10;
  int v11 = v9[23];
  if (v11 >= 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)v9 + 23);
  }
  else {
    size_t v13 = *((void *)v9 + 1);
  }

  return llvm::raw_ostream::write(this, v12, v13);
}

std::string *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 - 104));
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t non-virtual thunk to'mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);
}

void non-virtual thunk to'mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  uint64_t v1 = (void *)mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);

  operator delete(v1);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  size_t v4 = *(const void **)(a1 - 216);
  size_t v5 = *(void *)(a1 - 208);
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      uint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    uint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *uint64_t v6 = 61;
  }
  __n128 v10 = *(const char **)(a1 - 104);
  uint64_t v9 = a1 - 104;
  uint64_t v8 = v10;
  int v11 = *(char *)(v9 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const char *)v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v13 = *(void *)(v9 + 8);
  }

  return llvm::raw_ostream::write(this, v12, v13);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::getOption(uint64_t a1)
{
  return a1 - 232;
}

std::string *non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::string::operator=((std::string *)(a1 - 104), (const std::string *)(a2 - 104));
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  __int16 v8 = *(_WORD *)(a1 + 10);
  uint64_t v9 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v10 = a1 + 64;
  *(_WORD *)(a1 + 10) = v8 & 0x8000;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 88) = a1 + 120;
  int v11 = (llvm::SmallPtrSetImplBase *)(a1 + 88);
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 152) = &unk_1EC9A3AC0;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_1EC9A3E30;
  *(void *)(a1 + 192) = &unk_1EC9A4410;
  *(void *)(a1 + 200) = &unk_1EC9CE5E0;
  *(void *)(a1 + 224) = a1 + 200;
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  uint64_t v14 = *a3;
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15 != *(void *)(a1 + 88))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big(v11, v14);
    goto LABEL_5;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 108);
  if (!v17)
  {
LABEL_14:
    if (v17 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v17 + 1;
      *(void *)(v15 + 8 * v17) = v14;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 8 * v17;
  uint64_t v20 = *(void **)(a1 + 96);
  while ((const void *)*v20 != v14)
  {
    if (*v20 == -2) {
      uint64_t v18 = v20;
    }
    ++v20;
    v19 -= 8;
    if (!v19)
    {
      if (!v18) {
        goto LABEL_14;
      }
      void *v18 = v14;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_5:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  uint64_t v1 = (void *)mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1);

  operator delete(v1);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  uint64_t v1 = (void *)mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);

  operator delete(v1);
}

void *std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EC9CE5E0;
  return result;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE5E0;
}

void *std::__function::__value_func<void ()(std::string const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    size_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EC9CF858;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CF858;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EEclESU_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 240) = 1;
  return result;
}

uint64_t mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A3E30;
  uint64_t v2 = a1 + 200;
  uint64_t v3 = *(void *)(a1 + 224);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)(a1 + 152) = &unk_1EC9A3BA0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(void *)a1 = &unk_1EC9A42A8;
  size_t v4 = *(void **)(a1 + 96);
  if (v4 != *(void **)(a1 + 88)) {
    free(v4);
  }
  size_t v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 80)) {
    free(v5);
  }
  return a1;
}

void *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(void *a1, void *a2, uint64_t a3, uint64_t a4, __n128 *a5, unsigned char **a6, _WORD *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  v32[0] = a3;
  v32[1] = a4;
  v35[0] = a2;
  uint64_t v9 = llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)a1, (uint64_t)v32, v35, a5, a6, a7);
  uint64_t v10 = v9 + 192;
  *(unsigned char *)(v9 + 200) = 0;
  *(void *)uint64_t v9 = &unk_1EC9CCE08;
  *(void *)(v9 + 192) = &unk_1EC9CCE88;
  uint64_t v12 = (uint64_t *)a2[21];
  unint64_t v11 = a2[22];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v15 = (uint64_t *)a2[20];
    uint64_t v16 = v12 - v15;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = (uint64_t *)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    uint64_t *v21 = v10;
    uint64_t v14 = v21 + 1;
    if (v12 != v15)
    {
      unint64_t v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v15 - v20) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = (uint64_t *)((char *)v21 - v25);
      uint64_t v26 = &v20[8 * v16 - 16];
      long long v27 = v12 - 2;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v30 = *--v13;
          *--unint64_t v21 = v30;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v12 = v10;
    uint64_t v14 = v12 + 1;
  }
  a2[21] = v14;
  v33[0] = &unk_1EC9CF940;
  v33[1] = a1;
  uint64_t v36 = v35;
  unint64_t v34 = v33;
  v35[0] = &unk_1EC9CF940;
  v35[1] = a1;
  std::__function::__value_func<void ()(BOOL const&)>::swap[abi:nn180100](v35, a1 + 20);
  if (v36 == v35)
  {
    (*((void (**)(const void **))v35[0] + 4))(v35);
  }
  else if (v36)
  {
    (*((void (**)(void))*v36 + 5))();
  }
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, unsigned char **a5, _WORD *a6)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  uint64_t v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, unsigned char **a5, _WORD *a6)
{
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  unint64_t v11 = *a3;
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 108);
  if (!v15)
  {
LABEL_12:
    if (v15 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v15 + 1;
      *(void *)(v12 + 8 * v15) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 8 * v15;
  uint64_t v18 = *(void **)(a1 + 96);
  while ((const void *)*v18 != v11)
  {
    if (*v18 == -2) {
      uint64_t v16 = v18;
    }
    ++v18;
    v17 -= 8;
    if (!v17)
    {
      if (!v16) {
        goto LABEL_12;
      }
      *uint64_t v16 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  __n128 result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  uint64_t v14 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v14;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EC9CF940;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEE7__cloneEPNS0_6__baseIST_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CF940;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEEclESS_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 200) = 1;
  return result;
}

uint64_t mlir::anec::anonymous namespace'::writePlist(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, std::string::size_type a5, char a6, const void *a7, std::string::size_type a8, char a9)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (!(a3 | a5))
  {
    mlir::emitError(*(void *)(a1 + 24), (uint64_t)__p);
    if (__p[0]) {
      mlir::Diagnostic::operator<<((uint64_t)&__p[1], "Missing filename and directory, one or the other must be specified.");
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__p);
    if (__p[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p[1]);
    return v10;
  }
  if (*(unsigned char *)(a1 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)"sym_name", 8);
    if (v19)
    {
      if (InherentAttr) {
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v20 = 0;
      goto LABEL_15;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a1 + 56, "sym_name", 8uLL);
  if (!InherentAttr) {
    goto LABEL_14;
  }
LABEL_10:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v20 = InherentAttr;
  }
  else {
    uint64_t v20 = 0;
  }
LABEL_15:
  uint64_t v97 = v20;
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v97);
  unint64_t v23 = (const void *)AttrData;
  size_t v24 = v22;
  if (a5)
  {
    if (a4)
    {
      if (a5 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_128;
      }
      if (a5 >= 0x17)
      {
        uint64_t v26 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17) {
          uint64_t v26 = a5 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (std::string *)operator new(v26 + 1);
        __dst.__r_.__value_.__l.__size_ = a5;
        __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a5;
        p_dst = &__dst;
      }
      memmove(p_dst, a4, a5);
      p_dst->__r_.__value_.__s.__data_[a5] = 0;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
  }
  else
  {
    __int16 v95 = 773;
    v94[0] = a2;
    v94[1] = a3;
    v94[2] = "/";
    v76[0] = (const void **)v94;
    uint64_t v77 = AttrData;
    size_t v78 = v22;
    LOWORD(v79) = 1282;
    __p[0] = v76;
    uint64_t v101 = ".plist";
    __int16 v102 = 770;
    llvm::Twine::str((llvm::Twine *)__p, &__dst);
  }
  __int16 v102 = 260;
  __p[0] = &__dst;
  if llvm::sys::fs::access((unsigned __int8 *)__p, 0) || (a6)
  {
    HIBYTE(v101) = 5;
    strcpy((char *)__p, "1.0.3");
    mlir::anec::ANECIRTop::Create((uint64_t)&__dst, (uint64_t)__p, &v92);
    if (SHIBYTE(v101) < 0) {
      operator delete(__p[0]);
    }
    if (v24 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v24 >= 0x17)
      {
        uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17) {
          uint64_t v29 = v24 | 7;
        }
        uint64_t v30 = v29 + 1;
        uint64_t v28 = operator new(v29 + 1);
        __p[1] = (void *)v24;
        uint64_t v101 = (const char *)(v30 | 0x8000000000000000);
        __p[0] = v28;
      }
      else
      {
        HIBYTE(v101) = v24;
        uint64_t v28 = __p;
        if (!v24) {
          goto LABEL_45;
        }
      }
      memmove(v28, v23, v24);
LABEL_45:
      *((unsigned char *)v28 + v24) = 0;
      uint64_t v31 = (char *)operator new(0x110uLL);
      *(void *)uint64_t v31 = &unk_1EC9CC220;
      *((void *)v31 + 1) = v31 + 24;
      *((void *)v31 + 2) = 0x500000000;
      *((void *)v31 + 13) = v31 + 120;
      *((void *)v31 + 14) = 0x500000000;
      uint64_t v32 = (std::string *)(v31 + 200);
      int v33 = SHIBYTE(v101);
      if (SHIBYTE(v101) < 0)
      {
        std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *((void *)v31 + 27) = v101;
      }
      *((_OWORD *)v31 + 15) = 0u;
      *((_OWORD *)v31 + 16) = 0u;
      *((_OWORD *)v31 + 14) = 0u;
      int v90 = v31;
      unint64_t v34 = (std::__shared_weak_count *)operator new(0x20uLL);
      v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D0328;
      v34->__shared_owners_ = 0;
      v34->__shared_weak_owners_ = 0;
      v34[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
      uint64_t v91 = v34;
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v87 = 0;
      size_t v88 = 0;
      uint64_t v89 = 0;
      if (SHIBYTE(v92[1].__r_.__value_.__r.__words[2]) < 0)
      {
        data = (std::string *)v92[1].__r_.__value_.__l.__data_;
        std::string::size_type size = v92[1].__r_.__value_.__l.__size_;
      }
      else
      {
        data = v92 + 1;
        std::string::size_type size = HIBYTE(v92[1].__r_.__value_.__r.__words[2]);
      }
      mlir::openOutputFile(data, size, (uint64_t)&v87, &v86);
      if (v86)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &__dst;
        }
        else {
          uint64_t v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = __dst.__r_.__value_.__l.__size_;
        }
        mlir::openOutputFile(v37, v38, (uint64_t)&v87, &v85);
        if (v85)
        {
          uint64_t v40 = *((void *)v86 + 17);
          v76[1] = 0;
          uint64_t v77 = 0;
          v76[0] = 0;
          LODWORD(v78) = 0;
          uint64_t v79 = &v81;
          uint64_t v80 = 0;
          unint64_t v81 = 0;
          uint64_t v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = v40;
          if (mlir::anec::writeSingleRegionPlist(a1, &v90, (uint64_t)v76))
          {
            uint64_t ParentOp = a1;
            do
              uint64_t ParentOp = mlir::Block::getParentOp(*(mlir::Block **)(ParentOp + 16));
            while (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
            uint64_t v42 = *(void *)(ParentOp + 24);
            if (*(_UNKNOWN **)(*(void *)v42 + 136) != &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
            {
              uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
              uint64_t v42 = mlir::FileLineColLoc::get(Context, "unknown", 7uLL, 0, 0);
            }
            uint64_t v44 = v92;
            uint64_t v74 = v90;
            int v75 = v91;
            if (v91) {
              atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v46 = (unint64_t *)&v44[3];
            unint64_t v45 = v44[3].__r_.__value_.__r.__words[0];
            uint64_t v47 = LODWORD(v44[3].__r_.__value_.__r.__words[1]);
            BOOL v48 = (char *)&v74;
            if (v47 >= HIDWORD(v44[3].__r_.__value_.__r.__words[1]))
            {
              unint64_t v71 = v47 + 1;
              BOOL v72 = v45 + 16 * v47 > (unint64_t)&v74;
              if (v45 <= (unint64_t)&v74 && v72)
              {
                uint64_t v73 = (char *)&v74 - v45;
                llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)&v44[3], v71);
                unint64_t v45 = *v46;
                BOOL v48 = &v73[*v46];
              }
              else
              {
                llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)&v44[3], v71);
                unint64_t v45 = *v46;
                BOOL v48 = (char *)&v74;
              }
            }
            uint64_t v49 = LODWORD(v44[3].__r_.__value_.__r.__words[1]);
            long long v50 = *(_OWORD *)v48;
            *(_OWORD *)(v45 + 16 * v49) = *(_OWORD *)v48;
            if (*((void *)&v50 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
              LODWORD(v49) = v44[3].__r_.__value_.__r.__words[1];
            }
            LODWORD(v44[3].__r_.__value_.__r.__words[1]) = v49 + 1;
            uint64_t v51 = v75;
            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
            if (mlir::anec::ANECIRTop::Write((uint64_t)v92, *((llvm::raw_ostream **)v85 + 17), v82 == 0, v42, a7, a8))
            {
              uint64_t v52 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
              uint64_t v53 = mlir::FileLineColLoc::get(v52, "/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mlir-mps/src/Dialect/ANEC/Transforms/Passes.cpp", 0x72uLL, 0x190u, 0);
              v94[0] = "ANEC IR Write failed";
              __int16 v95 = 259;
              mlir::emitError(v53, (uint64_t)v94, (uint64_t)__p);
              mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__p);
              if (__p[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
              }
              std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p[1]);
            }
            else
            {
              *((unsigned char *)v86 + 24) = 1;
              *((unsigned char *)v85 + 24) = 1;
              if ((a9 & 1) == 0) {
            }
              }
          }
          llvm::deallocate_buffer(v81, (void *)(8 * v83));
        }
        unint64_t v54 = (llvm::raw_ostream *)llvm::errs(v39);
        int v55 = (void *)*((void *)v54 + 4);
        if (*((void *)v54 + 3) - (void)v55 > 0x1AuLL)
        {
          *((void *)v54 + 4) += 27;
        }
        else
        {
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v56 = &__dst;
        }
        else {
          unsigned int v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v57 = __dst.__r_.__value_.__l.__size_;
        }
        int v58 = llvm::raw_ostream::write(v54, (const char *)v56, v57);
        uint64_t v59 = *((void *)v58 + 4);
        if ((unint64_t)(*((void *)v58 + 3) - v59) > 8)
        {
          *(unsigned char *)(v59 + 8) = 32;
          *((void *)v58 + 4) += 9;
        }
        else
        {
        }
        if (v89 >= 0) {
          uint64_t v60 = (const char *)&v87;
        }
        else {
          uint64_t v60 = (const char *)v87;
        }
        if (v89 >= 0) {
          size_t v61 = HIBYTE(v89);
        }
        else {
          size_t v61 = v88;
        }
        int v62 = llvm::raw_ostream::write(v58, v60, v61);
        uint64_t v63 = (unsigned char *)*((void *)v62 + 4);
        if (*((unsigned char **)v62 + 3) == v63)
        {
          llvm::raw_ostream::write(v62, "\n", 1uLL);
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v10 = 0;
          *uint64_t v63 = 10;
          ++*((void *)v62 + 4);
        }
        uint64_t v64 = v85;
        uint64_t v85 = 0;
        if (v64)
        {
          if (*((unsigned char *)v64 + 128)) {
            llvm::raw_fd_ostream::~raw_fd_ostream((llvm::ToolOutputFile::CleanupInstaller *)((char *)v64 + 32));
          }
          llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(v64);
          operator delete(v65);
        }
      }
      else
      {
        __int16 v102 = 260;
        __p[0] = &v87;
        mlir::Operation::emitError((uint64_t *)a1, (uint64_t)__p, (uint64_t)&v98);
        if (v98) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v99);
        uint64_t v10 = 0;
      }
      int8x16_t v66 = v86;
      int v86 = 0;
      if (v66)
      {
        if (*((unsigned char *)v66 + 128)) {
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::ToolOutputFile::CleanupInstaller *)((char *)v66 + 32));
        }
        llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(v66);
        operator delete(v67);
      }
      if (SHIBYTE(v89) < 0) {
        operator delete(v87);
      }
      uint64_t v68 = v91;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
      unint64_t v69 = v93;
      if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      goto LABEL_121;
    }
LABEL_128:
    abort();
  }
  mlir::emitError(*(void *)(a1 + 24), (uint64_t)__p);
  if (__p[0])
  {
    mlir::Diagnostic::operator<<((uint64_t)&__p[1], "File ");
    if (__p[0])
    {
      LOWORD(v79) = 260;
      v76[0] = (const void **)&__dst;
      mlir::Diagnostic::operator<<((uint64_t)&__p[1], v76);
      if (__p[0]) {
        mlir::Diagnostic::operator<<((uint64_t)&__p[1], " exists already.");
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__p);
  if (__p[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p[1]);
LABEL_121:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v10;
}

std::string *mlir::anec::ANECIRTop::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0xA8uLL);
  uint64_t v7 = v6;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v6->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  mlir::anec::ANECIRTop::deriveWeightsFileName((std::string *)a1, (char *)&v7[1]);
  __int16 v8 = v7 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  v7[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v7[3].__r_.__value_.__r.__words[2];
  v7[3].__r_.__value_.__l.__size_ = 0x100000000;
  v7[4].__r_.__value_.__l.__size_ = (std::string::size_type)&v7[5];
  v7[4].__r_.__value_.__r.__words[2] = 0x300000000;
  *a3 = v7;
  __n128 result = (std::string *)operator new(0x20uLL);
  result->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EC9D0408;
  result->__r_.__value_.__l.__size_ = 0;
  result->__r_.__value_.__r.__words[2] = 0;
  result[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  a3[1] = result;
  return result;
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRTop *,std::shared_ptr<mlir::anec::ANECIRTop>::__shared_ptr_default_delete<mlir::anec::ANECIRTop,mlir::anec::ANECIRTop>,std::allocator<mlir::anec::ANECIRTop>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRTop *,std::shared_ptr<mlir::anec::ANECIRTop>::__shared_ptr_default_delete<mlir::anec::ANECIRTop,mlir::anec::ANECIRTop>,std::allocator<mlir::anec::ANECIRTop>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(mlir::anec::ANECIRTop **)(a1 + 24);
  if (v1)
  {
    mlir::anec::ANECIRTop::~ANECIRTop(v1);
    operator delete(v2);
  }
}

void mlir::anec::ANECIRTop::~ANECIRTop(mlir::anec::ANECIRTop *this)
{
  uint64_t v2 = (char *)*((void *)this + 13);
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3)
  {
    size_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(std::__shared_weak_count **)&v4[v5];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 13);
  }
  if (v2 != (char *)this + 120) {
    free(v2);
  }
  uint64_t v7 = (char *)*((void *)this + 9);
  uint64_t v8 = *((unsigned int *)this + 20);
  if (v8)
  {
    uint64_t v9 = v7 - 8;
    uint64_t v10 = 16 * v8;
    do
    {
      unint64_t v11 = *(std::__shared_weak_count **)&v9[v10];
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 -= 16;
    }
    while (v10);
    uint64_t v7 = (char *)*((void *)this + 9);
  }
  if (v7 != (char *)this + 88) {
    free(v7);
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_25:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_25;
  }
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anec::anonymous namespace'::writePlist(mlir::Operation *,llvm::StringRef,llvm::StringRef,BOOL,llvm::StringRef,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

uint64_t mlir::anec::WriteA13PlistPassBase<mlir::anec::anonymous namespace'::WriteA13PlistPass>::WriteA13PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A13";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC2F8;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA13PlistPass::~WriteA13PlistPass(mlir::anec::_anonymous_namespace_::WriteA13PlistPass *this)
{
  *(void *)this = &unk_1EC9CC2F8;
  *((void *)this + 162) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 1456;
  uint64_t v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA13PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA13PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA13PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  __int16 v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA13PlistPassBase<mlir::anec::anonymous namespace'::WriteA13PlistPass>::getName()
{
  return "WriteA13PlistPass";
}

const char *mlir::anec::WriteA13PlistPassBase<mlir::anec::anonymous namespace'::WriteA13PlistPass>::getArgument()
{
  return "write-A13-plist";
}

const char *mlir::anec::WriteA13PlistPassBase<mlir::anec::anonymous namespace'::WriteA13PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA13PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA13PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    uint64_t v10 = (char *)this + 1176;
  }
  else {
    uint64_t v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A13>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA13PlistPassBase<mlir::anec::anonymous namespace'::WriteA13PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC2F8;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CB828;
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::WriteA14PlistPassBase<mlir::anec::anonymous namespace'::WriteA14PlistPass>::WriteA14PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A14";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC368;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA14PlistPass::~WriteA14PlistPass(mlir::anec::_anonymous_namespace_::WriteA14PlistPass *this)
{
  *(void *)this = &unk_1EC9CC368;
  *((void *)this + 162) = &unk_1EC9A3F00;
  unint64_t v2 = (char *)this + 1456;
  int v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA14PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA14PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA14PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  char v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA14PlistPassBase<mlir::anec::anonymous namespace'::WriteA14PlistPass>::getName()
{
  return "WriteA14PlistPass";
}

const char *mlir::anec::WriteA14PlistPassBase<mlir::anec::anonymous namespace'::WriteA14PlistPass>::getArgument()
{
  return "write-A14-plist";
}

const char *mlir::anec::WriteA14PlistPassBase<mlir::anec::anonymous namespace'::WriteA14PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA14PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA14PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    __n128 v10 = (char *)this + 1176;
  }
  else {
    __n128 v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A14>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA14PlistPassBase<mlir::anec::anonymous namespace'::WriteA14PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC368;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CB898;
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::WriteA15PlistPassBase<mlir::anec::anonymous namespace'::WriteA15PlistPass>::WriteA15PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A15";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC3D8;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA15PlistPass::~WriteA15PlistPass(mlir::anec::_anonymous_namespace_::WriteA15PlistPass *this)
{
  *(void *)this = &unk_1EC9CC3D8;
  *((void *)this + 162) = &unk_1EC9A3F00;
  unint64_t v2 = (char *)this + 1456;
  int v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA15PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA15PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA15PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  char v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA15PlistPassBase<mlir::anec::anonymous namespace'::WriteA15PlistPass>::getName()
{
  return "WriteA15PlistPass";
}

const char *mlir::anec::WriteA15PlistPassBase<mlir::anec::anonymous namespace'::WriteA15PlistPass>::getArgument()
{
  return "write-A15-plist";
}

const char *mlir::anec::WriteA15PlistPassBase<mlir::anec::anonymous namespace'::WriteA15PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA15PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA15PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    __n128 v10 = (char *)this + 1176;
  }
  else {
    __n128 v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A15>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA15PlistPassBase<mlir::anec::anonymous namespace'::WriteA15PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC3D8;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CB908;
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::WriteA16PlistPassBase<mlir::anec::anonymous namespace'::WriteA16PlistPass>::WriteA16PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A16";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC448;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA16PlistPass::~WriteA16PlistPass(mlir::anec::_anonymous_namespace_::WriteA16PlistPass *this)
{
  *(void *)this = &unk_1EC9CC448;
  *((void *)this + 162) = &unk_1EC9A3F00;
  unint64_t v2 = (char *)this + 1456;
  int v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA16PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA16PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA16PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  char v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA16PlistPassBase<mlir::anec::anonymous namespace'::WriteA16PlistPass>::getName()
{
  return "WriteA16PlistPass";
}

const char *mlir::anec::WriteA16PlistPassBase<mlir::anec::anonymous namespace'::WriteA16PlistPass>::getArgument()
{
  return "write-A16-plist";
}

const char *mlir::anec::WriteA16PlistPassBase<mlir::anec::anonymous namespace'::WriteA16PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA16PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA16PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    __n128 v10 = (char *)this + 1176;
  }
  else {
    __n128 v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A16>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA16PlistPassBase<mlir::anec::anonymous namespace'::WriteA16PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC448;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CB978;
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::WriteA17PlistPassBase<mlir::anec::anonymous namespace'::WriteA17PlistPass>::WriteA17PlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A17";
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC97F230;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA17PlistPass::~WriteA17PlistPass(mlir::anec::_anonymous_namespace_::WriteA17PlistPass *this)
{
  *(void *)this = &unk_1EC97F230;
  *((void *)this + 162) = &unk_1EC9A3F00;
  unint64_t v2 = (char *)this + 1456;
  int v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA17PlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA17PlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA17PlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  char v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA17PlistPassBase<mlir::anec::anonymous namespace'::WriteA17PlistPass>::getName()
{
  return "WriteA17PlistPass";
}

const char *mlir::anec::WriteA17PlistPassBase<mlir::anec::anonymous namespace'::WriteA17PlistPass>::getArgument()
{
  return "write-A17-plist";
}

const char *mlir::anec::WriteA17PlistPassBase<mlir::anec::anonymous namespace'::WriteA17PlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA17PlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA17PlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    __n128 v10 = (char *)this + 1176;
  }
  else {
    __n128 v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A17>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA17PlistPassBase<mlir::anec::anonymous namespace'::WriteA17PlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC97F230;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC97F160;
  *a2 = v4;
  return result;
}

uint64_t mlir::anec::WriteA11LegacyPlistPassBase<mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass>::WriteA11LegacyPlistPassBase(uint64_t a1)
{
  *(void *)(a1 + 16) = "anec.A11Legacy";
  *(void *)(a1 + 24) = 14;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9CC4D8;
  v7.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v7.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"plist-directory", 15, &v7);
  *(void *)(a1 + 344) = &unk_1EC9CAFA0;
  *(void *)(a1 + 576) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v7.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"plist-filename", 14, &v7);
  *(void *)(a1 + 592) = &unk_1EC9CAFA0;
  *(void *)(a1 + 824) = &unk_1EC9CB020;
  v7.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v7.n128_u64[1] = 64;
  char v5 = 0;
  uint64_t v6 = (int *)&v5;
  int v4 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 840), v2, (uint64_t)"force-overwrite", 15, &v7, (unsigned char **)&v6, &v4);
  *(void *)(a1 + 840) = &unk_1EC9CB060;
  *(void *)(a1 + 1032) = &unk_1EC9CB0E0;
  v7.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not "
                                     "provided, no debug info will be added to the plist.";
  v7.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 1048), v2, (uint64_t)"bundle-name", 11, &v7);
  *(void *)(a1 + 1048) = &unk_1EC9CAFA0;
  *(void *)(a1 + 1280) = &unk_1EC9CB020;
                                     "It's only usefull for debugging. If false, all those attributes are erased.";
  v7.n128_u64[1] = 158;
  LOBYTE(v4) = 1;
  uint64_t v6 = &v4;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1296), v2, (uint64_t)"keep-unit-name-attrs", 20, &v7, (unsigned char **)&v6);
  *(void *)(a1 + 1296) = &unk_1EC9CB060;
  *(void *)(a1 + 1488) = &unk_1EC9CB0E0;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass::~WriteA11LegacyPlistPass(mlir::anec::_anonymous_namespace_::WriteA11LegacyPlistPass *this)
{
  *(void *)this = &unk_1EC9CC4D8;
  *((void *)this + 162) = &unk_1EC9A3F00;
  unint64_t v2 = (char *)this + 1456;
  int v3 = (char *)*((void *)this + 185);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 162) = &unk_1EC9A42A8;
  int v4 = (void *)*((void *)this + 174);
  if (v4 != *((void **)this + 173)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 170);
  if (v5 != (char *)this + 1376) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 1048);
  *((void *)this + 105) = &unk_1EC9A3F00;
  uint64_t v6 = (mlir::anec::_anonymous_namespace_::WriteA11LegacyPlistPass *)*((void *)this + 128);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteA11LegacyPlistPass *)((char *)this + 1000))
  {
    (*(void (**)(char *))(*((void *)this + 125) + 32))((char *)this + 1000);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteA11LegacyPlistPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 105) = &unk_1EC9A42A8;
  __n128 v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  char v8 = (char *)*((void *)this + 113);
  if (v8 != (char *)this + 920) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::anec::WriteA11LegacyPlistPassBase<mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass>::getName()
{
  return "WriteA11LegacyPlistPass";
}

const char *mlir::anec::WriteA11LegacyPlistPassBase<mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass>::getArgument()
{
  return "write-A11Legacy-plist";
}

const char *mlir::anec::WriteA11LegacyPlistPassBase<mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass>::getDescription()
{
  return "Write the ANEC dialect to a plist";
}

uint64_t mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteA11LegacyPlistPass *this)
{
  unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *((char *)this + 495);
  if (v3 >= 0) {
    int v4 = (char *)this + 472;
  }
  else {
    int v4 = (char *)*((void *)this + 59);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v5 = *((void *)this + 60);
  }
  int v6 = *((char *)this + 743);
  if (v6 >= 0) {
    __n128 v7 = (char *)this + 720;
  }
  else {
    __n128 v7 = (char *)*((void *)this + 90);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 743);
  }
  else {
    std::string::size_type v8 = *((void *)this + 91);
  }
  int v9 = *((char *)this + 1199);
  if (v9 >= 0) {
    __n128 v10 = (char *)this + 1176;
  }
  else {
    __n128 v10 = (char *)*((void *)this + 147);
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)this + 1199);
  }
  else {
    std::string::size_type v11 = *((void *)this + 148);
  }
  if (!(_BYTE)result) {
    *((void *)this + 5) |= 4uLL;
  }
  return result;
}

BOOL mlir::OperationPass<mlir::anec::A11Legacy>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

void *mlir::anec::WriteA11LegacyPlistPassBase<mlir::anec::anonymous namespace'::WriteA11LegacyPlistPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x5E0uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CC4D8;
  v10.n128_u64[0] = (unint64_t)"The directory in which to place generated plists.";
  v10.n128_u64[1] = 49;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"plist-directory", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"The filename for the plist to be produced.";
  v10.n128_u64[1] = 42;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"plist-filename", 14, &v10);
  *((void *)v4 + 74) = &unk_1EC9CAFA0;
  *((void *)v4 + 103) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. DANGER";
  v10.n128_u64[1] = 64;
  char v8 = 0;
  int v9 = (int *)&v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 105, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, (unsigned char **)&v9, &v7);
  *((void *)v4 + 105) = &unk_1EC9CB060;
  *((void *)v4 + 129) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Bundle name of the framework or application owning the model being compiled.If not"
                                      " provided, no debug info will be added to the plist.";
  v10.n128_u64[1] = 134;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 131, (void *)v4 + 19, (uint64_t)"bundle-name", 11, &v10);
  *((void *)v4 + 131) = &unk_1EC9CAFA0;
  *((void *)v4 + 160) = &unk_1EC9CB020;
                                      " It's only usefull for debugging. If false, all those attributes are erased.";
  v10.n128_u64[1] = 158;
  LOBYTE(v7) = 1;
  int v9 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 162, (void *)v4 + 19, (uint64_t)"keep-unit-name-attrs", 20, &v10, (unsigned char **)&v9);
  *((void *)v4 + 162) = &unk_1EC9CB060;
  *((void *)v4 + 186) = &unk_1EC9CB0E0;
  *(void *)size_t v4 = &unk_1EC9CBD90;
  *a2 = v4;
  return result;
}

void *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(void *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  v32[0] = a3;
  v32[1] = a4;
  v35[0] = a2;
  uint64_t v9 = llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((uint64_t)a1, (uint64_t)v32, v35, a5, a6, a7);
  uint64_t v10 = v9 + 600;
  *(unsigned char *)(v9 + 608) = 0;
  *(void *)uint64_t v9 = &unk_1EC9CCC88;
  *(void *)(v9 + 600) = &unk_1EC9CCD08;
  uint64_t v12 = (uint64_t *)a2[21];
  unint64_t v11 = a2[22];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v15 = (uint64_t *)a2[20];
    uint64_t v16 = v12 - v15;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = (uint64_t *)&v20[8 * v16];
    size_t v22 = &v20[8 * v19];
    uint64_t *v21 = v10;
    uint64_t v14 = v21 + 1;
    if (v12 != v15)
    {
      unint64_t v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v15 - v20) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = (uint64_t *)((char *)v21 - v25);
      uint64_t v26 = &v20[8 * v16 - 16];
      uint64_t v27 = v12 - 2;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v30 = *--v13;
          *--unint64_t v21 = v30;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v12 = v10;
    uint64_t v14 = v12 + 1;
  }
  a2[21] = v14;
  v33[0] = &unk_1EC9CF810;
  v33[1] = a1;
  uint64_t v36 = v35;
  unint64_t v34 = v33;
  v35[0] = &unk_1EC9CF810;
  v35[1] = a1;
  std::__function::__value_func<void ()(mlir::anec::Family const&)>::swap[abi:nn180100](v35, a1 + 71);
  if (v36 == v35)
  {
    (*((void (**)(const void **))v35[0] + 4))(v35);
  }
  else if (v36)
  {
    (*((void (**)(void))*v36 + 5))();
  }
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = llvm::cl::parser<mlir::anec::Family>::parse(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  uint64_t v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(v11);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  uint64_t v1 = mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(a1);

  operator delete(v1);
}

unint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*((unsigned char *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    int v3 = *((_DWORD *)result + 32);
    size_t v4 = &unk_1EC9A3A80;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(a1 + 160) + 24))
  {
    uint64_t v3 = a1 + 152;
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v6);
        uint64_t v9 = v8;
        unint64_t v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
        uint64_t v11 = (uint64_t *)(*(void *)a2 + 16 * v10);
        *uint64_t v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v6 = (v6 + 1);
      }
      while (v5 != v6);
    }
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  int v4 = *(const void **)(a1 + 16);
  size_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      uint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    uint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *uint64_t v6 = 61;
  }
  uint64_t v8 = (unsigned char *)(*(void *)(a1 + 168) + 44);
  uint64_t v9 = 48 * *(unsigned int *)(a1 + 176);
  while (1)
  {
    v9 -= 48;
    if (*v8)
    {
      if (*((_DWORD *)v8 - 1) == *(_DWORD *)(a1 + 128)) {
        break;
      }
    }
    v8 += 48;
  }
  unint64_t v10 = *(const void **)(v8 - 44);
  size_t v11 = *(void *)(v8 - 36);
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 4);
  if (v11 <= *((void *)this + 3) - (void)result)
  {
    if (v11)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, v10, v11);
      *((void *)this + 4) += v11;
    }
  }
  else
  {
    size_t v13 = *(void *)(v8 - 36);
    return llvm::raw_ostream::write(this, (const char *)v10, v13);
  }
  return result;
}

uint64_t mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 608) = *(unsigned char *)(a2 + 8);
  return result;
}

void *non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  int v1 = mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));

  operator delete(v1);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(a1 - 600, a2);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOption(uint64_t a1)
{
  return a1 - 600;
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 472) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  int v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3A80;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3D60;
  *(void *)(a1 + 160) = a1;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x800000000;
  *(void *)(a1 + 152) = &unk_1EC9CCB78;
  *(void *)(a1 + 568) = &unk_1EC9CE540;
  *(void *)(a1 + 592) = a1 + 568;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  int v1 = mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(a1);

  operator delete(v1);
}

void *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  int v1 = mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));

  operator delete(v1);
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  size_t v11 = *a3;
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 88)) {
    goto LABEL_2;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 108);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v14;
    unint64_t v17 = *(void **)(a1 + 96);
    while ((const void *)*v17 != v11)
    {
      if (*v17 == -2) {
        uint64_t v15 = v17;
      }
      ++v17;
      v16 -= 8;
      if (!v16)
      {
        if (!v15) {
          goto LABEL_14;
        }
        *uint64_t v15 = v11;
        --*(_DWORD *)(a1 + 112);
        break;
      }
    }
  }
  else
  {
LABEL_14:
    if (v14 >= *(_DWORD *)(a1 + 104))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
      goto LABEL_3;
    }
    *(_DWORD *)(a1 + 108) = v14 + 1;
    *(void *)(v12 + 8 * v14) = v11;
  }
LABEL_3:
  *(_OWORD *)(a1 + 32) = *a4;
  uint64_t v13 = *a5;
  *(_DWORD *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v13;

  llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>>(a6, a1);
}

void *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3D60;
  unint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1EC9A4390;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_1EC9A42A8;
  size_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3D60;
  unint64_t v2 = __p + 568;
  uint64_t v3 = (char *)*((void *)__p + 74);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)__p + 19) = &unk_1EC9A4390;
  int v4 = (char *)*((void *)__p + 21);
  if (v4 != __p + 184) {
    free(v4);
  }
  *(void *)std::string __p = &unk_1EC9A42A8;
  size_t v5 = (void *)*((void *)__p + 12);
  if (v5 != *((void **)__p + 11)) {
    free(v5);
  }
  uint64_t v6 = (char *)*((void *)__p + 8);
  if (v6 != __p + 80) {
    free(v6);
  }

  operator delete(__p);
}

BOOL llvm::cl::OptionValueCopy<mlir::anec::Family>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void *mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(void *a1)
{
  *a1 = &unk_1EC9A4390;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(void *__p)
{
  *std::string __p = &unk_1EC9A4390;
  unint64_t v2 = (void *)__p[2];
  if (v2 != __p + 4) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

void *llvm::cl::parser<mlir::anec::Family>::~parser(void *a1)
{
  *a1 = &unk_1EC9A4390;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void llvm::cl::parser<mlir::anec::Family>::~parser(void *__p)
{
  *std::string __p = &unk_1EC9A4390;
  unint64_t v2 = (void *)__p[2];
  if (v2 != __p + 4) {
    free(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EC9CE540;
  return result;
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE540;
}

void llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 40 * v2;
    uint64_t v6 = a2 + 168;
    do
    {
      uint64_t v8 = *(const unsigned __int8 **)(v4 + 8);
      long long v9 = *(_OWORD *)(v4 + 24);
      int v10 = *(_DWORD *)(v4 + 16);
      v15[0] = *(void *)v4;
      uint64_t v7 = (int8x16_t *)v15[0];
      v15[1] = v8;
      long long v16 = v9;
      unint64_t v17 = &unk_1EC9A3A80;
      char v19 = 1;
      int v18 = v10;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(v6, (unint64_t)v15, 1);
      uint64_t v12 = *(void *)(a2 + 168) + 48 * *(unsigned int *)(a2 + 176);
      long long v13 = *((_OWORD *)Address + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)Address;
      *(_OWORD *)(v12 + 16) = v13;
      *(void *)(v12 + 32) = &unk_1EC9A3B80;
      char v14 = Address[44];
      *(_DWORD *)(v12 + 40) = *((_DWORD *)Address + 10);
      *(unsigned char *)(v12 + 44) = v14;
      *(void *)(v12 + 32) = &unk_1EC9A3A80;
      ++*(_DWORD *)(a2 + 176);
      llvm::cl::AddLiteralOption(*(void *)(a2 + 160), v7, v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 48 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v20 = (uint64_t)(a2 - *(void *)a1) >> 4;
      unint64_t v32 = 0;
      unint64_t v21 = (char *)(a1 + 16);
      size_t v22 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      unint64_t v23 = *(char **)a1;
      unsigned int v24 = *(_DWORD *)(a1 + 8);
      if (v24)
      {
        uint64_t v25 = &v23[48 * v24];
        uint64_t v26 = v22 + 32;
        uint64_t v27 = v22;
        do
        {
          long long v28 = *((_OWORD *)v23 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v23;
          *((_OWORD *)v27 + 1) = v28;
          *((void *)v27 + 4) = &unk_1EC9A3B80;
          int v29 = *((_DWORD *)v23 + 10);
          v27[44] = v23[44];
          *((_DWORD *)v27 + 10) = v29;
          *((void *)v27 + 4) = &unk_1EC9A3A80;
          v26 += 48;
          v23 += 48;
          v27 += 48;
        }
        while (v23 != v25);
        unint64_t v23 = *(char **)a1;
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v20;
      int v31 = v32;
      if (v23 != v21) {
        free(v23);
      }
      *(void *)a1 = v22;
      *(_DWORD *)(a1 + 12) = v31;
      return &v22[48 * v30];
    }
    else
    {
      unint64_t v32 = 0;
      int v10 = (char *)(a1 + 16);
      size_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      uint64_t v12 = *(char **)a1;
      unsigned int v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        char v14 = &v12[48 * v13];
        uint64_t v15 = v11 + 32;
        long long v16 = v11;
        do
        {
          long long v17 = *((_OWORD *)v12 + 1);
          *(_OWORD *)long long v16 = *(_OWORD *)v12;
          *((_OWORD *)v16 + 1) = v17;
          *((void *)v16 + 4) = &unk_1EC9A3B80;
          int v18 = *((_DWORD *)v12 + 10);
          v16[44] = v12[44];
          *((_DWORD *)v16 + 10) = v18;
          *((void *)v16 + 4) = &unk_1EC9A3A80;
          v15 += 48;
          v12 += 48;
          v16 += 48;
        }
        while (v12 != v14);
        uint64_t v12 = *(char **)a1;
      }
      int v19 = v32;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v19;
    }
  }
  return (char *)v3;
}

void *std::__function::__value_func<void ()(mlir::anec::Family const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EC9CF810;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CF810;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EEclESU_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 608) = 1;
  return result;
}

void *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  *a1 = &unk_1EC9A3D60;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1EC9A4390;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_1EC9A42A8;
  unint64_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

uint64_t llvm::cl::parser<mlir::anec::Family>::parse(uint64_t a1, void *a2, const void *a3, size_t a4, const void *a5, size_t a6, _DWORD *a7)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    while (1)
    {
      if (*(void *)(v13 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v13, a3, a4);
        if (!a1) {
          break;
        }
      }
      v13 += 48;
      if (!--v11) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    *a7 = *(_DWORD *)(v13 + 40);
  }
  else
  {
LABEL_14:
    __int16 v17 = 1283;
    v16[0] = "Cannot find option named '";
    v16[2] = a3;
    v16[3] = a4;
    v18[0] = v16;
    v18[2] = "'!";
    __int16 v19 = 770;
    uint64_t v15 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)v18, 0, 0, v15);
  }
  return result;
}

double mlir::anec::createRegionCanonicalizationPass@<D0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x158uLL);
  double result = 0.0;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  *((void *)v3 + 2) = "builtin.module";
  *((void *)v3 + 3) = 14;
  *((unsigned char *)v3 + 32) = 1;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[8] = 0u;
  *((void *)v3 + 22) = 0;
  *((void *)v3 + 23) = (char *)v3 + 200;
  *((_DWORD *)v3 + 49) = 4;
  *((void *)v3 + 29) = (char *)v3 + 248;
  *((_DWORD *)v3 + 61) = 4;
  *((void *)v3 + 35) = 0;
  *((void *)v3 + 36) = 0;
  *((void *)v3 + 37) = 0x1000000000;
  v3[19] = 0u;
  v3[20] = 0u;
  *((void *)v3 + 42) = 0;
  *(void *)uint64_t v3 = &unk_1EC9CBCC0;
  *a1 = v3;
  return result;
}

void mlir::anec::anonymous namespace'::RegionCanonicalization::~RegionCanonicalization(mlir::anec::_anonymous_namespace_::RegionCanonicalization *this)
{
  mlir::Pass::~Pass(this);

  operator delete(v1);
}

const char *mlir::anec::RegionCanonicalizationBase<mlir::anec::anonymous namespace'::RegionCanonicalization>::getName()
{
  return "RegionCanonicalization";
}

const char *mlir::anec::RegionCanonicalizationBase<mlir::anec::anonymous namespace'::RegionCanonicalization>::getArgument()
{
  return "region_canonicalization";
}

const char *mlir::anec::RegionCanonicalizationBase<mlir::anec::anonymous namespace'::RegionCanonicalization>::getDescription()
{
  return "Canonicalize region call ops and associated regions.";
}

void mlir::anec::anonymous namespace'::RegionCanonicalization::runOnOperation(mlir::anec::_anonymous_namespace_::RegionCanonicalization *this)
{
  uint64_t v278 = *MEMORY[0x1E4F143B8];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  long long __p = 0u;
  long long v265 = 0u;
  uint64_t v263 = Context;
  BOOL v266 = &v268;
  uint64_t v267 = 0x600000000;
  v269 = 0;
  uint64_t v270 = 0;
  unsigned int v271 = 0;
  uint64_t v272 = 0;
  uint64_t v273 = 0;
  uint64_t v274 = 0x2800000000;
  unsigned int v275 = 0;
  uint64_t v276 = 0;
  uint64_t v277 = 0x2800000000;
  uint64_t v3 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v3 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, Context, 0, 0);
  *uint64_t v3 = &unk_1EC9CB6B8;
  if (!v3[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::MakeInputsUnique]";
    unint64_t v261 = 101;
    unint64_t v4 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v4) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = v261;
    }
    uint64_t v6 = (char *)v260 + v5;
    unint64_t v7 = v261 - v5;
    if (v261 - v5 >= 0x12) {
      uint64_t v8 = 18;
    }
    else {
      uint64_t v8 = v261 - v5;
    }
    long long v9 = &v6[v8];
    unint64_t v10 = v7 - v8;
    if (v10 >= v10 - 1) {
      --v10;
    }
    v3[8] = v9;
    v3[9] = v10;
  }
  unint64_t v11 = *((unsigned int *)v3 + 22);
  if (v11 > *((_DWORD *)v3 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 10), v3 + 12, v11, 16);
    LODWORD(v11) = *((_DWORD *)v3 + 22);
  }
  *((_DWORD *)v3 + 22) = v11;
  uint64_t v12 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    char v14 = (char *)__p;
    uint64_t v15 = *((void *)&__p + 1) - __p;
    uint64_t v16 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v18 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        goto LABEL_304;
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = &v20[8 * v16];
    size_t v22 = &v20[8 * v19];
    *(void *)unint64_t v21 = v3;
    uint64_t v13 = v21 + 8;
    if (v12 == v14)
    {
      *(void *)&long long __p = &v20[8 * v16];
      *((void *)&__p + 1) = v21 + 8;
      *(void *)&long long v265 = v22;
    }
    else
    {
      unint64_t v23 = v12 - v14 - 8;
      if (v23 < 0x78
        || &v12[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v21 && &v20[v15 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      {
        goto LABEL_307;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v26 = &v12[-v25];
      v21 -= v25;
      uint64_t v27 = &v20[8 * v16 - 16];
      long long v28 = v12 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v31 = *((_OWORD *)v28 - 1);
        long long v30 = *(_OWORD *)v28;
        *((_OWORD *)v28 - 1) = 0uLL;
        *(_OWORD *)long long v28 = 0uLL;
        *((_OWORD *)v27 - 1) = v31;
        *(_OWORD *)uint64_t v27 = v30;
        v27 -= 32;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      uint64_t v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_307:
        do
        {
          uint64_t v32 = *((void *)v12 - 1);
          v12 -= 8;
          *(void *)uint64_t v12 = 0;
          *((void *)v21 - 1) = v32;
          v21 -= 8;
        }
        while (v12 != v14);
      }
      int v33 = (char *)*((void *)&__p + 1);
      uint64_t v12 = (char *)__p;
      *(void *)&long long __p = v21;
      *((void *)&__p + 1) = v13;
      *(void *)&long long v265 = v22;
      while (v33 != v12)
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        uint64_t v34 = v35;
        *(void *)int v33 = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
      }
    }
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    **((void **)&__p + 1) = v3;
    uint64_t v13 = v12 + 8;
  }
  *((void *)&__p + 1) = v13;
  uint64_t v36 = v263;
  uint64_t v37 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v37 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v36, 0, 0);
  *uint64_t v37 = &unk_1EC9CB758;
  if (!v37[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::MakeOutputsUnique]";
    unint64_t v261 = 102;
    unint64_t v38 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v38) {
      unint64_t v39 = v38;
    }
    else {
      unint64_t v39 = v261;
    }
    uint64_t v40 = (char *)v260 + v39;
    unint64_t v41 = v261 - v39;
    if (v261 - v39 >= 0x12) {
      uint64_t v42 = 18;
    }
    else {
      uint64_t v42 = v261 - v39;
    }
    uint64_t v43 = &v40[v42];
    unint64_t v44 = v41 - v42;
    if (v44 >= v44 - 1) {
      --v44;
    }
    v37[8] = v43;
    v37[9] = v44;
  }
  unint64_t v45 = *((unsigned int *)v37 + 22);
  if (v45 > *((_DWORD *)v37 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 10), v37 + 12, v45, 16);
    LODWORD(v45) = *((_DWORD *)v37 + 22);
  }
  *((_DWORD *)v37 + 22) = v45;
  unint64_t v46 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    BOOL v48 = (char *)__p;
    uint64_t v49 = *((void *)&__p + 1) - __p;
    uint64_t v50 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v52 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v51) {
      unint64_t v51 = v52 >> 2;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 >> 61) {
        goto LABEL_304;
      }
      unint64_t v54 = (char *)operator new(8 * v53);
    }
    else
    {
      unint64_t v54 = 0;
    }
    int v55 = &v54[8 * v50];
    unsigned int v56 = &v54[8 * v53];
    *(void *)int v55 = v37;
    uint64_t v47 = v55 + 8;
    if (v46 == v48)
    {
      *(void *)&long long __p = &v54[8 * v50];
      *((void *)&__p + 1) = v55 + 8;
      *(void *)&long long v265 = v56;
    }
    else
    {
      unint64_t v57 = v46 - v48 - 8;
      if (v57 < 0x78
        || &v46[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v55 && &v54[v49 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v46)
      {
        goto LABEL_308;
      }
      uint64_t v58 = (v57 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v60 = &v46[-v59];
      v55 -= v59;
      size_t v61 = &v54[8 * v50 - 16];
      int v62 = v46 - 16;
      uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v65 = *((_OWORD *)v62 - 1);
        long long v64 = *(_OWORD *)v62;
        *((_OWORD *)v62 - 1) = 0uLL;
        *(_OWORD *)int v62 = 0uLL;
        *((_OWORD *)v61 - 1) = v65;
        *(_OWORD *)size_t v61 = v64;
        v61 -= 32;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      unint64_t v46 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_308:
        do
        {
          uint64_t v66 = *((void *)v46 - 1);
          v46 -= 8;
          *(void *)unint64_t v46 = 0;
          *((void *)v55 - 1) = v66;
          v55 -= 8;
        }
        while (v46 != v48);
      }
      unint64_t v67 = (char *)*((void *)&__p + 1);
      unint64_t v46 = (char *)__p;
      *(void *)&long long __p = v55;
      *((void *)&__p + 1) = v47;
      *(void *)&long long v265 = v56;
      while (v67 != v46)
      {
        uint64_t v69 = *((void *)v67 - 1);
        v67 -= 8;
        uint64_t v68 = v69;
        *(void *)unint64_t v67 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
      }
    }
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    **((void **)&__p + 1) = v37;
    uint64_t v47 = v46 + 8;
  }
  *((void *)&__p + 1) = v47;
  uint64_t v70 = v263;
  unint64_t v71 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v71 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v70, 0, 0);
  *unint64_t v71 = &unk_1EC9CBAC0;
  if (!v71[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::RemoveUnusedInputs]";
    unint64_t v261 = 103;
    unint64_t v72 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v72) {
      unint64_t v73 = v72;
    }
    else {
      unint64_t v73 = v261;
    }
    uint64_t v74 = (char *)v260 + v73;
    unint64_t v75 = v261 - v73;
    if (v261 - v73 >= 0x12) {
      uint64_t v76 = 18;
    }
    else {
      uint64_t v76 = v261 - v73;
    }
    uint64_t v77 = &v74[v76];
    unint64_t v78 = v75 - v76;
    if (v78 >= v78 - 1) {
      --v78;
    }
    v71[8] = v77;
    v71[9] = v78;
  }
  unint64_t v79 = *((unsigned int *)v71 + 22);
  if (v79 > *((_DWORD *)v71 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v71 + 10), v71 + 12, v79, 16);
    LODWORD(v79) = *((_DWORD *)v71 + 22);
  }
  *((_DWORD *)v71 + 22) = v79;
  uint64_t v80 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    uint64_t v82 = (char *)__p;
    uint64_t v83 = *((void *)&__p + 1) - __p;
    uint64_t v84 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v86 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v85) {
      unint64_t v85 = v86 >> 2;
    }
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v87 = v85;
    }
    if (v87)
    {
      if (v87 >> 61) {
        goto LABEL_304;
      }
      size_t v88 = (char *)operator new(8 * v87);
    }
    else
    {
      size_t v88 = 0;
    }
    uint64_t v89 = &v88[8 * v84];
    int v90 = &v88[8 * v87];
    *(void *)uint64_t v89 = v71;
    unint64_t v81 = v89 + 8;
    if (v80 == v82)
    {
      *(void *)&long long __p = &v88[8 * v84];
      *((void *)&__p + 1) = v89 + 8;
      *(void *)&long long v265 = v90;
    }
    else
    {
      unint64_t v91 = v80 - v82 - 8;
      if (v91 < 0x78
        || &v80[-(v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v89 && &v88[v83 - (v91 & 0xFFFFFFFFFFFFFFF8) - 8] < v80)
      {
        goto LABEL_309;
      }
      uint64_t v92 = (v91 >> 3) + 1;
      uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v94 = &v80[-v93];
      v89 -= v93;
      __int16 v95 = &v88[8 * v84 - 16];
      unint64_t v96 = v80 - 16;
      uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *((_OWORD *)v96 - 1);
        long long v98 = *(_OWORD *)v96;
        *((_OWORD *)v96 - 1) = 0uLL;
        *(_OWORD *)unint64_t v96 = 0uLL;
        *((_OWORD *)v95 - 1) = v99;
        *(_OWORD *)__int16 v95 = v98;
        v95 -= 32;
        v96 -= 32;
        v97 -= 4;
      }
      while (v97);
      uint64_t v80 = v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_309:
        do
        {
          uint64_t v100 = *((void *)v80 - 1);
          v80 -= 8;
          *(void *)uint64_t v80 = 0;
          *((void *)v89 - 1) = v100;
          v89 -= 8;
        }
        while (v80 != v82);
      }
      uint64_t v101 = (char *)*((void *)&__p + 1);
      uint64_t v80 = (char *)__p;
      *(void *)&long long __p = v89;
      *((void *)&__p + 1) = v81;
      *(void *)&long long v265 = v90;
      while (v101 != v80)
      {
        uint64_t v103 = *((void *)v101 - 1);
        v101 -= 8;
        uint64_t v102 = v103;
        *(void *)uint64_t v101 = 0;
        if (v103) {
          (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
        }
      }
    }
    if (v80) {
      operator delete(v80);
    }
  }
  else
  {
    **((void **)&__p + 1) = v71;
    unint64_t v81 = v80 + 8;
  }
  *((void *)&__p + 1) = v81;
  uint64_t v104 = v263;
  uint64_t v105 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v105 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v104, 0, 0);
  *uint64_t v105 = &unk_1EC9CBBA0;
  if (!v105[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::RemoveUnusedOutputs]";
    unint64_t v261 = 104;
    unint64_t v106 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v106) {
      unint64_t v107 = v106;
    }
    else {
      unint64_t v107 = v261;
    }
    uint64_t v108 = (char *)v260 + v107;
    unint64_t v109 = v261 - v107;
    if (v261 - v107 >= 0x12) {
      uint64_t v110 = 18;
    }
    else {
      uint64_t v110 = v261 - v107;
    }
    uint64_t v111 = &v108[v110];
    unint64_t v112 = v109 - v110;
    if (v112 >= v112 - 1) {
      --v112;
    }
    v105[8] = v111;
    v105[9] = v112;
  }
  unint64_t v113 = *((unsigned int *)v105 + 22);
  if (v113 > *((_DWORD *)v105 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v105 + 10), v105 + 12, v113, 16);
    LODWORD(v113) = *((_DWORD *)v105 + 22);
  }
  *((_DWORD *)v105 + 22) = v113;
  uint64_t v114 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    __int16 v116 = (char *)__p;
    uint64_t v117 = *((void *)&__p + 1) - __p;
    uint64_t v118 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v119 = v118 + 1;
    if ((unint64_t)(v118 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v120 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v119) {
      unint64_t v119 = v120 >> 2;
    }
    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v121 = v119;
    }
    if (v121)
    {
      if (v121 >> 61) {
        goto LABEL_304;
      }
      __int32 v122 = (char *)operator new(8 * v121);
    }
    else
    {
      __int32 v122 = 0;
    }
    unint64_t v123 = &v122[8 * v118];
    uint64_t v124 = &v122[8 * v121];
    *(void *)unint64_t v123 = v105;
    unint64_t v115 = v123 + 8;
    if (v114 == v116)
    {
      *(void *)&long long __p = &v122[8 * v118];
      *((void *)&__p + 1) = v123 + 8;
      *(void *)&long long v265 = v124;
    }
    else
    {
      unint64_t v125 = v114 - v116 - 8;
      if (v125 < 0x78
        || &v114[-(v125 & 0xFFFFFFFFFFFFFFF8) - 8] < v123 && &v122[v117 - (v125 & 0xFFFFFFFFFFFFFFF8) - 8] < v114)
      {
        goto LABEL_310;
      }
      uint64_t v126 = (v125 >> 3) + 1;
      uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
      v128 = &v114[-v127];
      v123 -= v127;
      uint64_t v129 = &v122[8 * v118 - 16];
      long long v130 = v114 - 16;
      uint64_t v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v133 = *((_OWORD *)v130 - 1);
        long long v132 = *(_OWORD *)v130;
        *((_OWORD *)v130 - 1) = 0uLL;
        *(_OWORD *)long long v130 = 0uLL;
        *((_OWORD *)v129 - 1) = v133;
        *(_OWORD *)uint64_t v129 = v132;
        v129 -= 32;
        v130 -= 32;
        v131 -= 4;
      }
      while (v131);
      uint64_t v114 = v128;
      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_310:
        do
        {
          uint64_t v134 = *((void *)v114 - 1);
          v114 -= 8;
          *(void *)uint64_t v114 = 0;
          *((void *)v123 - 1) = v134;
          v123 -= 8;
        }
        while (v114 != v116);
      }
      uint64_t v135 = (char *)*((void *)&__p + 1);
      uint64_t v114 = (char *)__p;
      *(void *)&long long __p = v123;
      *((void *)&__p + 1) = v115;
      *(void *)&long long v265 = v124;
      while (v135 != v114)
      {
        uint64_t v137 = *((void *)v135 - 1);
        v135 -= 8;
        uint64_t v136 = v137;
        *(void *)uint64_t v135 = 0;
        if (v137) {
          (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
        }
      }
    }
    if (v114) {
      operator delete(v114);
    }
  }
  else
  {
    **((void **)&__p + 1) = v105;
    unint64_t v115 = v114 + 8;
  }
  *((void *)&__p + 1) = v115;
  uint64_t v138 = v263;
  unint64_t v139 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v139 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v138, 0, 0);
  void *v139 = &unk_1EC9CBD30;
  if (!v139[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::RemovePassthroughValues]";
    unint64_t v261 = 108;
    unint64_t v140 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v140) {
      unint64_t v141 = v140;
    }
    else {
      unint64_t v141 = v261;
    }
    v142 = (char *)v260 + v141;
    unint64_t v143 = v261 - v141;
    if (v261 - v141 >= 0x12) {
      uint64_t v144 = 18;
    }
    else {
      uint64_t v144 = v261 - v141;
    }
    v145 = &v142[v144];
    unint64_t v146 = v143 - v144;
    if (v146 >= v146 - 1) {
      --v146;
    }
    v139[8] = v145;
    v139[9] = v146;
  }
  unint64_t v147 = *((unsigned int *)v139 + 22);
  if (v147 > *((_DWORD *)v139 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v139 + 10), v139 + 12, v147, 16);
    LODWORD(v147) = *((_DWORD *)v139 + 22);
  }
  *((_DWORD *)v139 + 22) = v147;
  uint64_t v148 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    unint64_t v150 = (char *)__p;
    uint64_t v151 = *((void *)&__p + 1) - __p;
    uint64_t v152 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v153 = v152 + 1;
    if ((unint64_t)(v152 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v154 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v153) {
      unint64_t v153 = v154 >> 2;
    }
    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v155 = v153;
    }
    if (v155)
    {
      if (v155 >> 61) {
        goto LABEL_304;
      }
      unint64_t v156 = (char *)operator new(8 * v155);
    }
    else
    {
      unint64_t v156 = 0;
    }
    uint64_t v157 = &v156[8 * v152];
    uint64_t v158 = &v156[8 * v155];
    *(void *)uint64_t v157 = v139;
    uint64_t v149 = v157 + 8;
    if (v148 == v150)
    {
      *(void *)&long long __p = &v156[8 * v152];
      *((void *)&__p + 1) = v157 + 8;
      *(void *)&long long v265 = v158;
    }
    else
    {
      unint64_t v159 = v148 - v150 - 8;
      if (v159 < 0x78
        || &v148[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] < v157 && &v156[v151 - (v159 & 0xFFFFFFFFFFFFFFF8) - 8] < v148)
      {
        goto LABEL_311;
      }
      uint64_t v160 = (v159 >> 3) + 1;
      uint64_t v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v162 = &v148[-v161];
      v157 -= v161;
      long long v163 = &v156[8 * v152 - 16];
      long long v164 = v148 - 16;
      uint64_t v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v167 = *((_OWORD *)v164 - 1);
        long long v166 = *(_OWORD *)v164;
        *((_OWORD *)v164 - 1) = 0uLL;
        *(_OWORD *)long long v164 = 0uLL;
        *((_OWORD *)v163 - 1) = v167;
        *(_OWORD *)long long v163 = v166;
        v163 -= 32;
        v164 -= 32;
        v165 -= 4;
      }
      while (v165);
      uint64_t v148 = v162;
      if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_311:
        do
        {
          uint64_t v168 = *((void *)v148 - 1);
          v148 -= 8;
          *(void *)uint64_t v148 = 0;
          *((void *)v157 - 1) = v168;
          v157 -= 8;
        }
        while (v148 != v150);
      }
      v169 = (char *)*((void *)&__p + 1);
      uint64_t v148 = (char *)__p;
      *(void *)&long long __p = v157;
      *((void *)&__p + 1) = v149;
      *(void *)&long long v265 = v158;
      while (v169 != v148)
      {
        uint64_t v171 = *((void *)v169 - 1);
        v169 -= 8;
        uint64_t v170 = v171;
        *(void *)v169 = 0;
        if (v171) {
          (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
        }
      }
    }
    if (v148) {
      operator delete(v148);
    }
  }
  else
  {
    **((void **)&__p + 1) = v139;
    uint64_t v149 = v148 + 8;
  }
  *((void *)&__p + 1) = v149;
  uint64_t v172 = v263;
  v173 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v173 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v172, 0, 0);
  void *v173 = &unk_1EC97F1D0;
  if (!v173[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::RemoveOutputReshapes]";
    unint64_t v261 = 105;
    unint64_t v174 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v174) {
      unint64_t v175 = v174;
    }
    else {
      unint64_t v175 = v261;
    }
    unint64_t v176 = (char *)v260 + v175;
    unint64_t v177 = v261 - v175;
    if (v261 - v175 >= 0x12) {
      uint64_t v178 = 18;
    }
    else {
      uint64_t v178 = v261 - v175;
    }
    v179 = &v176[v178];
    unint64_t v180 = v177 - v178;
    if (v180 >= v180 - 1) {
      --v180;
    }
    v173[8] = v179;
    v173[9] = v180;
  }
  unint64_t v181 = *((unsigned int *)v173 + 22);
  if (v181 > *((_DWORD *)v173 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v173 + 10), v173 + 12, v181, 16);
    LODWORD(v181) = *((_DWORD *)v173 + 22);
  }
  *((_DWORD *)v173 + 22) = v181;
  uint64_t v182 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) >= (unint64_t)v265)
  {
    uint64_t v184 = (char *)__p;
    uint64_t v185 = *((void *)&__p + 1) - __p;
    uint64_t v186 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
    unint64_t v187 = v186 + 1;
    if ((unint64_t)(v186 + 1) >> 61) {
      goto LABEL_303;
    }
    uint64_t v188 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v187) {
      unint64_t v187 = v188 >> 2;
    }
    if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v189 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v189 = v187;
    }
    if (v189)
    {
      if (v189 >> 61) {
        goto LABEL_304;
      }
      uint64_t v190 = (char *)operator new(8 * v189);
    }
    else
    {
      uint64_t v190 = 0;
    }
    uint64_t v191 = &v190[8 * v186];
    v192 = &v190[8 * v189];
    *(void *)uint64_t v191 = v173;
    unint64_t v183 = v191 + 8;
    if (v182 == v184)
    {
      *(void *)&long long __p = &v190[8 * v186];
      *((void *)&__p + 1) = v191 + 8;
      *(void *)&long long v265 = v192;
    }
    else
    {
      unint64_t v193 = v182 - v184 - 8;
      if (v193 < 0x78
        || &v182[-(v193 & 0xFFFFFFFFFFFFFFF8) - 8] < v191 && &v190[v185 - (v193 & 0xFFFFFFFFFFFFFFF8) - 8] < v182)
      {
        goto LABEL_312;
      }
      uint64_t v194 = (v193 >> 3) + 1;
      uint64_t v195 = 8 * (v194 & 0x3FFFFFFFFFFFFFFCLL);
      long long v196 = &v182[-v195];
      v191 -= v195;
      long long v197 = &v190[8 * v186 - 16];
      uint64_t v198 = v182 - 16;
      uint64_t v199 = v194 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v201 = *((_OWORD *)v198 - 1);
        long long v200 = *(_OWORD *)v198;
        *((_OWORD *)v198 - 1) = 0uLL;
        *(_OWORD *)uint64_t v198 = 0uLL;
        *((_OWORD *)v197 - 1) = v201;
        *(_OWORD *)long long v197 = v200;
        v197 -= 32;
        v198 -= 32;
        v199 -= 4;
      }
      while (v199);
      uint64_t v182 = v196;
      if (v194 != (v194 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_312:
        do
        {
          uint64_t v202 = *((void *)v182 - 1);
          v182 -= 8;
          *(void *)uint64_t v182 = 0;
          *((void *)v191 - 1) = v202;
          v191 -= 8;
        }
        while (v182 != v184);
      }
      v203 = (char *)*((void *)&__p + 1);
      uint64_t v182 = (char *)__p;
      *(void *)&long long __p = v191;
      *((void *)&__p + 1) = v183;
      *(void *)&long long v265 = v192;
      while (v203 != v182)
      {
        uint64_t v205 = *((void *)v203 - 1);
        v203 -= 8;
        uint64_t v204 = v205;
        *(void *)v203 = 0;
        if (v205) {
          (*(void (**)(uint64_t))(*(void *)v204 + 8))(v204);
        }
      }
    }
    if (v182) {
      operator delete(v182);
    }
  }
  else
  {
    **((void **)&__p + 1) = v173;
    unint64_t v183 = v182 + 8;
  }
  *((void *)&__p + 1) = v183;
  uint64_t v206 = v263;
  uint64_t v207 = operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v260, 1);
  mlir::Pattern::Pattern((uint64_t)(v207 + 1), (uint64_t)"placement.region_call", 21, (__int16)v260, v206, 0, 0);
  *uint64_t v207 = &unk_1EC9CB600;
  if (!v207[9])
  {
    v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::anec::(anonymous namespace)::FoldEmptyRegion]";
    unint64_t v261 = 100;
    unint64_t v208 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
    if (v261 >= v208) {
      unint64_t v209 = v208;
    }
    else {
      unint64_t v209 = v261;
    }
    uint64_t v210 = (char *)v260 + v209;
    unint64_t v211 = v261 - v209;
    if (v261 - v209 >= 0x12) {
      uint64_t v212 = 18;
    }
    else {
      uint64_t v212 = v261 - v209;
    }
    unint64_t v213 = &v210[v212];
    unint64_t v214 = v211 - v212;
    if (v214 >= v214 - 1) {
      --v214;
    }
    v207[8] = v213;
    v207[9] = v214;
  }
  unint64_t v215 = *((unsigned int *)v207 + 22);
  if (v215 > *((_DWORD *)v207 + 23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v207 + 10), v207 + 12, v215, 16);
    LODWORD(v215) = *((_DWORD *)v207 + 22);
  }
  *((_DWORD *)v207 + 22) = v215;
  v216 = (char *)*((void *)&__p + 1);
  if (*((void *)&__p + 1) < (unint64_t)v265)
  {
    **((void **)&__p + 1) = v207;
    int64_t v217 = v216 + 8;
    goto LABEL_274;
  }
  int64_t v218 = (char *)__p;
  uint64_t v219 = *((void *)&__p + 1) - __p;
  uint64_t v220 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
  unint64_t v221 = v220 + 1;
  if (!((unint64_t)(v220 + 1) >> 61))
  {
    uint64_t v222 = v265 - __p;
    if ((uint64_t)(v265 - __p) >> 2 > v221) {
      unint64_t v221 = v222 >> 2;
    }
    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v223 = v221;
    }
    if (!v223)
    {
      v224 = 0;
      goto LABEL_259;
    }
    if (!(v223 >> 61))
    {
      v224 = (char *)operator new(8 * v223);
LABEL_259:
      unint64_t v225 = &v224[8 * v220];
      uint64_t v226 = &v224[8 * v223];
      *(void *)unint64_t v225 = v207;
      int64_t v217 = v225 + 8;
      if (v216 == v218)
      {
        *(void *)&long long __p = &v224[8 * v220];
        *((void *)&__p + 1) = v225 + 8;
        *(void *)&long long v265 = v226;
      }
      else
      {
        unint64_t v227 = v216 - v218 - 8;
        if (v227 < 0x78
          || &v216[-(v227 & 0xFFFFFFFFFFFFFFF8) - 8] < v225 && &v224[v219 - (v227 & 0xFFFFFFFFFFFFFFF8) - 8] < v216)
        {
          goto LABEL_313;
        }
        uint64_t v228 = (v227 >> 3) + 1;
        uint64_t v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
        v230 = &v216[-v229];
        v225 -= v229;
        uint64_t v231 = &v224[8 * v220 - 16];
        long long v232 = v216 - 16;
        uint64_t v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v235 = *((_OWORD *)v232 - 1);
          long long v234 = *(_OWORD *)v232;
          *((_OWORD *)v232 - 1) = 0uLL;
          *(_OWORD *)long long v232 = 0uLL;
          *((_OWORD *)v231 - 1) = v235;
          *(_OWORD *)uint64_t v231 = v234;
          v231 -= 32;
          v232 -= 32;
          v233 -= 4;
        }
        while (v233);
        v216 = v230;
        if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_313:
          do
          {
            uint64_t v236 = *((void *)v216 - 1);
            v216 -= 8;
            *(void *)v216 = 0;
            *((void *)v225 - 1) = v236;
            v225 -= 8;
          }
          while (v216 != v218);
        }
        uint64_t v237 = (char *)*((void *)&__p + 1);
        v216 = (char *)__p;
        *(void *)&long long __p = v225;
        *((void *)&__p + 1) = v217;
        *(void *)&long long v265 = v226;
        while (v237 != v216)
        {
          uint64_t v239 = *((void *)v237 - 1);
          v237 -= 8;
          uint64_t v238 = v239;
          *(void *)uint64_t v237 = 0;
          if (v239) {
            (*(void (**)(uint64_t))(*(void *)v238 + 8))(v238);
          }
        }
      }
      if (v216) {
        operator delete(v216);
      }
LABEL_274:
      *((void *)&__p + 1) = v217;
      v259 = &v260;
      v260 = v262;
      unint64_t v261 = 0x600000000;
      uint64_t v240 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
      v258[0] = &v259;
      mlir::detail::walk<mlir::ForwardIterator>(v240, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_122RegionCanonicalization14runOnOperationEvEUlNS1_9placement10RegionCallEE_SF_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)v258, 1);
      v241 = (mlir::Operation **)v260;
      uint64_t v242 = v261;
      mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v258, &v263, 0, 0, 0, 0);
      __int16 v253 = 256;
      long long v254 = xmmword_1810FE4B0;
      uint64_t v255 = 0;
      int v256 = 1;
      uint64_t v257 = 0;
      mlir::applyOpPatternsAndFold(v241, v242, (const mlir::FrozenRewritePatternSet *)v258, (long long *)&v253, 0, 0);
      mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v258);
      if (v260 != v262) {
        free(v260);
      }
      if (HIDWORD(v276) && v276)
      {
        uint64_t v243 = 0;
        do
        {
          v244 = *(llvm **)((char *)v275 + v243);
          if (v244 != (llvm *)-8 && v244 != 0)
          {
            uint64_t v246 = *(void *)v244;
            v247 = (void *)*((void *)v244 + 4);
            if (v247 == (void *)((char *)v244 + 8))
            {
              (*(void (**)(void *))(*((void *)v244 + 1) + 32))((void *)v244 + 1);
            }
            else if (v247)
            {
              (*(void (**)(void *))(*v247 + 40))(v247);
            }
            llvm::deallocate_buffer(v244, (void *)(v246 + 41));
          }
          v243 += 8;
        }
        while (8 * v276 != v243);
      }
      free(v275);
      if (HIDWORD(v273) && v273)
      {
        uint64_t v248 = 0;
        do
        {
          v249 = *(llvm **)((char *)v272 + v248);
          if (v249 != (llvm *)-8 && v249 != 0)
          {
            uint64_t v251 = *(void *)v249;
            v252 = (void *)*((void *)v249 + 4);
            if (v252 == (void *)((char *)v249 + 8))
            {
              (*(void (**)(void *))(*((void *)v249 + 1) + 32))((void *)v249 + 1);
            }
            else if (v252)
            {
              (*(void (**)(void *))(*v252 + 40))(v252);
            }
            llvm::deallocate_buffer(v249, (void *)(v251 + 41));
          }
          v248 += 8;
        }
        while (8 * v273 != v248);
      }
      free(v272);
      llvm::deallocate_buffer(v269, (void *)(16 * v271));
    }
LABEL_304:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_303:
  abort();
}

double mlir::anec::RegionCanonicalizationBase<mlir::anec::anonymous namespace'::RegionCanonicalization>::clonePass@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x158uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  double result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)unint64_t v4 = &unk_1EC9CBCC0;
  *a2 = v4;
  return result;
}

void mlir::anec::anonymous namespace'::MakeInputsUnique::~MakeInputsUnique(mlir::anec::_anonymous_namespace_::MakeInputsUnique *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::RegionCall>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::RegionCall>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::placement::RegionCall>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::ANECRegionCallOpRewritePatternBase::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v18 = a2;
  while (1)
  {
    uint64_t v6 = *(mlir::Block **)(v4 + 16);
    if (!v6) {
      break;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v6);
    uint64_t v4 = ParentOp;
    if (!ParentOp
      || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    {
      goto LABEL_7;
    }
  }
  uint64_t v4 = 0;
LABEL_7:
  uint64_t Callee = mlir::placement::RegionCall::getCallee(&v18);
  uint64_t v10 = v9;
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v4 + 24));
  __int16 v20 = 261;
  v19[0] = Callee;
  v19[1] = v10;
  uint64_t v12 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v19);
  uint64_t v13 = mlir::SymbolTable::lookupSymbolIn((unsigned int *)v4, v12);
  if (mlir::placement::RegionCall::getRegionType(&v18) == 1)
  {
    if (mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(v13)
      && v13)
    {
      uint64_t InterfaceFor = mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(v13);
      return (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v18, v13, InterfaceFor, a3);
    }
    v19[0] = "region was not referencing an ANEC region";
    __int16 v20 = 259;
    uint64_t v15 = v18;
    unint64_t v21 = v19;
    uint64_t v16 = *(void *)(a3 + 16);
    if (!v16) {
      return 0;
    }
  }
  else
  {
    v19[0] = "placement region call was referencing an ANE region";
    __int16 v20 = 259;
    uint64_t v15 = v18;
    unint64_t v21 = v19;
    uint64_t v16 = *(void *)(a3 + 16);
    if (!v16) {
      return 0;
    }
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v16 + 64))(v16, *((void *)v15 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::RegionCall &>(mlir::placement::RegionCall &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v21);
  }
  return result;
}

void mlir::anec::anonymous namespace'::MakeInputsUnique::matchAndRewrite(uint64_t a1, uint64_t a2, llvm *a3, llvm *a4)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v7[3] = a3;
  void v7[4] = a4;
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 72);
    unint64_t v6 = *(unsigned int *)(a2 + 68);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v8, v5, v6);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::placement::RegionCall &>(mlir::placement::RegionCall &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::anec::anonymous namespace'::ANECRegionCallOpRewritePatternBase::getDuplicateIndices(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v25[0] = 0;
  v25[1] = 0;
  unsigned int v26 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = a1;
  uint64_t v30 = 0;
  if (!a2)
  {
    size_t v22 = 0;
LABEL_31:
    llvm::deallocate_buffer(v22, a2);
  }
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v23 = v7;
    uint64_t v24 = mlir::ValueRange::dereference_iterator(&v29, v6);
    uint64_t v27 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v25, (unint64_t *)&v24, &v27)|| v27 == (void *)(v25[0] + 16 * v26))
    {
      uint64_t v27 = 0;
      char v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v25, (unint64_t *)&v24, &v27);
      unint64_t v19 = v27;
      if ((v18 & 1) == 0)
      {
        unint64_t v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>,mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v25, (uint64_t)&v24, (unint64_t *)&v24, v27);
        void *v19 = v24;
        v19[1] = 0;
      }
      v19[1] = v7;
      goto LABEL_24;
    }
    uint64_t v8 = v27 + 1;
    int v9 = *(_DWORD *)(a3 + 16);
    if (!v9) {
      break;
    }
    int v10 = v9 - 1;
    unsigned int v11 = (37 * *v8) & v10;
    inserted = (uint64_t *)(*(void *)a3 + 72 * v11);
    uint64_t v13 = *inserted;
    if (*v8 != *inserted)
    {
      char v14 = 0;
      int v15 = 1;
      while (v13 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          char v14 = inserted;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        inserted = (uint64_t *)(*(void *)a3 + 72 * v11);
        uint64_t v13 = *inserted;
        if (*v8 == *inserted) {
          goto LABEL_21;
        }
      }
      if (v14) {
        __int16 v20 = v14;
      }
      else {
        __int16 v20 = inserted;
      }
      goto LABEL_20;
    }
LABEL_21:
    unint64_t v21 = *((unsigned int *)inserted + 4);
    if (v21 >= *((unsigned int *)inserted + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(inserted + 1), inserted + 3, v21 + 1, 8);
      unint64_t v21 = *((unsigned int *)inserted + 4);
    }
    *(void *)(inserted[1] + 8 * v21) = v23;
    ++*((_DWORD *)inserted + 4);
LABEL_24:
    uint64_t v7 = v28 + 1;
    uint64_t v6 = v30 + 1;
    ++v28;
    ++v30;
    if (v29 == a1 && (void *)v6 == v4)
    {
      size_t v22 = (llvm *)v25[0];
      a2 = (void *)(16 * v26);
      goto LABEL_31;
    }
  }
  __int16 v20 = 0;
LABEL_20:
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>,unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::InsertIntoBucket<unsigned long long const&>(a3, v20, v8);
  goto LABEL_21;
}

void mlir::anec::anonymous namespace'::ANECRegionCallOpRewritePatternBase::removeInputsAndOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v28[1] = a3;
  _OWORD v28[2] = a1;
  v28[0] = a2;
  isPublic = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v28);
  mlir::Block::getTerminator(isPublic);
  uint64_t v12 = v11;
  if (*(_DWORD *)(a6 + 8))
  {
    if ((*(unsigned char *)(v11 + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(v11 + 72);
      unint64_t v14 = *(unsigned int *)(v11 + 68);
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
    }
    mlir::ValueRange::ValueRange(&v32, v13, v14);
    llvm::deallocate_buffer(0, 0);
  }
  uint64_t v15 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v28);
  uint64_t v33 = a5;
  BOOL v16 = *(mlir::MLIRContext **)(a4 + 8);
  unsigned int v17 = (mlir::Block *)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v28);
  uint64_t ArgumentTypes = mlir::Block::getArgumentTypes(v17);
  mlir::ValueRange::ValueRange((unint64_t *)&v33, ArgumentTypes, (v19 - ArgumentTypes) >> 3);
  mlir::TypeRange::TypeRange(v31, v33, v34);
  if ((*(unsigned char *)(v12 + 46) & 0x80) != 0)
  {
    uint64_t v20 = *(void *)(v12 + 72);
    unint64_t v21 = *(unsigned int *)(v12 + 68);
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
  }
  uint64_t v33 = v20;
  unint64_t v34 = v21;
  mlir::OperandRange::getTypes(&v33, &v24);
  mlir::ValueRange::ValueRange((unint64_t *)&v33, v24 + 32 * v25, v26 - v25);
  mlir::TypeRange::TypeRange(v30, v33, v34);
  uint64_t v27 = mlir::FunctionType::get(v16, v31[0], v31[1], v30[0], v30[1]);
  mlir::TargetLegalizerInterface::setFunctionType(v28, v27);
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    unint64_t v23 = *(unsigned int *)(a1 + 68);
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
  }
  mlir::ValueRange::ValueRange(&v29, v22, v23);
  llvm::deallocate_buffer(0, 0);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>,mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::grow(a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<mlir::Value,unsigned long long,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          *int v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    BOOL v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      char v18 = (unint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v24 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v18, &v24);
          *uint64_t v24 = *(_OWORD *)v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    if (((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v20 = ((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v20 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v21 = result + 2;
    uint64_t v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 2) = -4096;
      void *v21 = -4096;
      v21 += 4;
      v22 -= 2;
    }
    while (v22);
    if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      unint64_t v23 = &result[2 * v19];
      do
      {
        *int v10 = -4096;
        v10 += 2;
      }
      while (v10 != v23);
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>,unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::InsertIntoBucket<unsigned long long const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 72 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 72 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x600000000;
  return a2;
}

void *llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    uint64_t v10 = 9 * v3;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>,unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v10 * 8));
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    unint64_t v12 = 72 * v11 - 72;
    if (v12 < 0x48)
    {
      uint64_t v13 = result;
LABEL_14:
      uint64_t v17 = &result[9 * v11];
      do
      {
        void *v13 = -1;
        v13 += 9;
      }
      while (v13 != v17);
      return result;
    }
    unint64_t v14 = v12 / 0x48 + 1;
    uint64_t v13 = &result[9 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    unsigned int v16 = result;
    do
    {
      *unsigned int v16 = -1;
      v16[9] = -1;
      v16 += 18;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_14;
    }
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>,unsigned long long,llvm::SmallVector<unsigned long long,6u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<unsigned long long,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    unint64_t v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      int v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = &v7[9 * v6];
      do
      {
        *int v9 = -1;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x48 + 1;
    int v9 = &v7[9 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -1;
      v12[9] = -1;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & (37 * v14);
        uint64_t v17 = (void *)(*(void *)a1 + 72 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -1)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -2;
            }
            if (v22) {
              uint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 72 * (v23 & v15));
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        *uint64_t v17 = v14;
        v17[1] = v17 + 3;
        void v17[2] = 0x600000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3) {
          free(v19);
        }
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucket<unsigned long long const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 8 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  return a2;
}

char *llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11) {
      memset(result, 255, 8 * v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v11 - 1;
      int v14 = v4;
      do
      {
        uint64_t v17 = *(void *)v14;
        if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v18 = (37 * v17) & v13;
          unsigned int v16 = &v10[8 * v18];
          uint64_t v19 = *(void *)v16;
          if (v17 != *(void *)v16)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                uint64_t v20 = v16;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v13;
              unsigned int v16 = &v10[8 * (v23 & v13)];
              uint64_t v19 = *(void *)v16;
              if (v17 == *(void *)v16) {
                goto LABEL_16;
              }
            }
            if (v20) {
              unsigned int v16 = v20;
            }
          }
LABEL_16:
          *(void *)unsigned int v16 = v17;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        int v14 = (llvm *)((char *)v14 + 8);
      }
      while (v14 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    return (char *)memset(result, 255, 8 * v15);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::ArrayRef<mlir::Type>,llvm::StringRef,mlir::placement::RegionType,llvm::SmallVector<mlir::Value,6u> &>(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5, uint64_t a6)
{
  v29[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    uint64_t v25[2] = (uint64_t)"placement.region_call";
    v25[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v13);
  mlir::ValueRange::ValueRange(v28, *(void *)a3, *(void *)(a3 + 8));
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  unsigned int v17 = *a5;
  mlir::ValueRange::ValueRange(v27, *(void *)a6, *(unsigned int *)(a6 + 8));
  mlir::placement::RegionCall::build(a1, (uint64_t)v29, v28[0], v28[1], v16, v15, v17, v18, v27[0], v27[1]);
  uint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v20;
}

BOOL llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::anec::anonymous namespace'::ANECRegionCallOpRewritePatternBase::removeInputsAndOutputs(mlir::placement::RegionCall,mlir::TargetLegalizerInterface,mlir::PatternRewriter &,llvm::DenseSet<unsigned long long,llvm::DenseMapInfo<unsigned long long,void>>,llvm::DenseSet<unsigned long long,llvm::DenseMapInfo<unsigned long long,void>>)::{lambda(mlir::BlockArgument)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *((unsigned int *)*a1 + 4);
  if (!v3)
  {
LABEL_7:
    unint64_t v6 = (uint64_t *)(v2 + 8 * v3);
    return v6 != (uint64_t *)(v2 + 8 * v3);
  }
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  LODWORD(v5) = (v3 - 1) & (37 * v4);
  unint64_t v6 = (uint64_t *)(v2 + 8 * v5);
  uint64_t v7 = *v6;
  if (v4 != *v6)
  {
    int v8 = 1;
    while (v7 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 8 * v5);
      if (v4 == v7)
      {
        unint64_t v6 = (uint64_t *)(v2 + 8 * v5);
        return v6 != (uint64_t *)(v2 + 8 * v3);
      }
    }
    goto LABEL_7;
  }
  return v6 != (uint64_t *)(v2 + 8 * v3);
}

void mlir::anec::anonymous namespace'::MakeOutputsUnique::~MakeOutputsUnique(mlir::anec::_anonymous_namespace_::MakeOutputsUnique *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

void mlir::anec::anonymous namespace'::MakeOutputsUnique::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void mlir::anec::anonymous namespace'::MakeOutputsUnique::apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v8[0] = a2;
  v8[1] = a3;
  isPublic = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v8);
  mlir::Block::getTerminator(isPublic);
  if ((*(unsigned char *)(v4 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    unint64_t v6 = *(unsigned int *)(v4 + 68);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v9, v5, v6);
}

void mlir::anec::anonymous namespace'::RemoveUnusedInputs::~RemoveUnusedInputs(mlir::anec::_anonymous_namespace_::RemoveUnusedInputs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

void mlir::anec::anonymous namespace'::RemoveUnusedInputs::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  v20[1] = a4;
  __src = 0;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  uint64_t isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v20);
  uint64_t v5 = *(void ***)(isPublic + 48);
  unint64_t v6 = *(void ***)(isPublic + 56);
  if (v6 == v5) {
LABEL_23:
  }
    llvm::deallocate_buffer((llvm *)__src, (void *)(8 * v19));
  uint64_t v7 = 0;
  while (1)
  {
    if (!**v5)
    {
      uint64_t v16 = v7;
      if (!v19)
      {
        uint64_t v11 = 0;
LABEL_8:
        llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucket<unsigned long long const&,llvm::detail::DenseSetEmpty&>((uint64_t)&__src, v11, &v16);
        goto LABEL_4;
      }
      unsigned int v8 = (v19 - 1) & (37 * v7);
      int v9 = (uint64_t *)((char *)__src + 8 * v8);
      uint64_t v10 = *v9;
      if (v7 != *v9)
      {
        int v12 = 0;
        int v13 = 1;
        while (v10 != -1)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v10 == -2;
          }
          if (v14) {
            int v12 = v9;
          }
          unsigned int v15 = v8 + v13++;
          unsigned int v8 = v15 & (v19 - 1);
          int v9 = (uint64_t *)((char *)__src + 8 * v8);
          uint64_t v10 = *v9;
          if (v7 == *v9) {
            goto LABEL_4;
          }
        }
        if (v12) {
          uint64_t v11 = v12;
        }
        else {
          uint64_t v11 = v9;
        }
        goto LABEL_8;
      }
    }
LABEL_4:
    ++v7;
    if (++v5 == v6)
    {
      if (v18) {
        llvm::deallocate_buffer(0, 0);
      }
      goto LABEL_23;
    }
  }
}

uint64_t sub_180276244()
{
  return v0;
}

void mlir::anec::anonymous namespace'::RemoveUnusedOutputs::~RemoveUnusedOutputs(mlir::anec::_anonymous_namespace_::RemoveUnusedOutputs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

void mlir::anec::anonymous namespace'::RemoveUnusedOutputs::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  __src = 0;
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v2) {
LABEL_26:
  }
    llvm::deallocate_buffer((llvm *)__src, (void *)(8 * v16));
  uint64_t v4 = 0;
  while (1)
  {
    if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v4))
    {
      uint64_t v13 = v4;
      if (!v16)
      {
        unsigned int v8 = 0;
LABEL_11:
        llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucket<unsigned long long const&,llvm::detail::DenseSetEmpty&>((uint64_t)&__src, v8, &v13);
        goto LABEL_7;
      }
      unsigned int v5 = (v16 - 1) & (37 * v4);
      unint64_t v6 = (uint64_t *)((char *)__src + 8 * v5);
      uint64_t v7 = *v6;
      if (v4 != *v6)
      {
        int v9 = 0;
        int v10 = 1;
        while (v7 != -1)
        {
          if (v9) {
            BOOL v11 = 0;
          }
          else {
            BOOL v11 = v7 == -2;
          }
          if (v11) {
            int v9 = v6;
          }
          unsigned int v12 = v5 + v10++;
          unsigned int v5 = v12 & (v16 - 1);
          unint64_t v6 = (uint64_t *)((char *)__src + 8 * v5);
          uint64_t v7 = *v6;
          if (v4 == *v6) {
            goto LABEL_7;
          }
        }
        if (v9) {
          unsigned int v8 = v9;
        }
        else {
          unsigned int v8 = v6;
        }
        goto LABEL_11;
      }
    }
LABEL_7:
    if (++v4 == v2)
    {
      if (v15) {
        llvm::deallocate_buffer(0, 0);
      }
      goto LABEL_26;
    }
  }
}

uint64_t sub_1802764E4()
{
  return v0;
}

void mlir::anec::anonymous namespace'::RemovePassthroughValues::~RemovePassthroughValues(mlir::anec::_anonymous_namespace_::RemovePassthroughValues *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

void mlir::anec::anonymous namespace'::RemovePassthroughValues::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  v9[0] = a3;
  v9[1] = a4;
  uint64_t isPublic = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v9);
  mlir::Block::getTerminator(isPublic);
  if ((*(unsigned char *)(v5 + 46) & 0x80) != 0)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    unint64_t v7 = *(unsigned int *)(v5 + 68);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v7);
}

void mlir::anec::anonymous namespace'::RemoveOutputReshapes::~RemoveOutputReshapes(mlir::anec::_anonymous_namespace_::RemoveOutputReshapes *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::RemoveOutputReshapes::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  v11[2] = *MEMORY[0x1E4F143B8];
  v10[0] = a3;
  v10[1] = a4;
  if (a3 && *(_UNKNOWN **)(*(void *)(a3 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    uint64_t isPublic = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v10);
    mlir::Block::getTerminator(isPublic);
    if ((*(unsigned char *)(v6 + 46) & 0x80) != 0)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      unint64_t v8 = *(unsigned int *)(v6 + 68);
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    mlir::ValueRange::ValueRange(v11, v7, v8);
  }
  return result;
}

void mlir::anec::anonymous namespace'::FoldEmptyRegion::~FoldEmptyRegion(mlir::anec::_anonymous_namespace_::FoldEmptyRegion *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anec::anonymous namespace'::FoldEmptyRegion::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a2 + 36)) {
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 40))(a5, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 40))(a5, a2);
  return 1;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_122RegionCanonicalization14runOnOperationEvEUlNS1_9placement10RegionCallEE_SF_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, uint64_t a2)
{
  if (a2
    && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
  {
    uint64_t v3 = **a1;
    uint64_t v4 = *(unsigned int *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(**a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
}

uint64_t mlir::arith::invertPredicate(uint64_t a1)
{
  return qword_1810FED50[a1];
}

void mlir::arith::ConstantOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)a1 - 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  if (v6) {
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v6 + 8);
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v38 = v9;
  if (v8)
  {
    unsigned int v12 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (*(_UNKNOWN **)(*(void *)(v5 & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v37 = v13;
    if (v13 && mlir::IntegerType::getWidth((mlir::IntegerType *)&v37) == 1)
    {
      if (*(_DWORD *)(*(void *)a1 + 36)) {
        uint64_t v14 = *(void *)a1 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
      uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v38);
      if (Int) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = 5;
      }
      if (Int) {
        uint64_t v18 = "true";
      }
      else {
        uint64_t v18 = "false";
      }
      a2(a3, NextResultAtOffset, v18, v17);
    }
    else
    {
      unint64_t v39 = v41;
      long long v40 = xmmword_1810FE500;
      int v29 = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      int v35 = 1;
      unint64_t v31 = 0;
      unint64_t v32 = 0;
      uint64_t v30 = 0;
      uint64_t v28 = &unk_1EC9A3930;
      uint64_t v36 = &v39;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v28, 0, 0, 0);
      unsigned int v19 = v32;
      if ((unint64_t)v32 >= v31)
      {
        uint64_t v20 = llvm::raw_ostream::write((llvm::raw_ostream *)&v28, 99);
      }
      else
      {
        ++v32;
        unsigned char *v19 = 99;
        uint64_t v20 = (llvm::raw_ostream *)&v28;
      }
      mlir::IntegerAttr::getValue(&v38, (llvm::APInt *)&__p);
      llvm::APInt::print((llvm::APInt *)&__p, v20, 1);
      if (v27 >= 0x41 && __p) {
        operator delete[](__p);
      }
      if (v37)
      {
        int v21 = v32;
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v22 = llvm::raw_ostream::write((llvm::raw_ostream *)&v28, 95);
        }
        else
        {
          ++v32;
          unsigned char *v21 = 95;
          uint64_t v22 = (llvm::raw_ostream *)&v28;
        }
        long long __p = v12;
        mlir::Type::print((llvm::raw_ostream *)&__p, v22);
      }
      if (*(_DWORD *)(*(void *)a1 + 36)) {
        uint64_t v23 = *(void *)a1 - 16;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0);
      a2(a3, v24, (const char *)*v36, (uint64_t)v36[1]);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
      if (v39 != v41) {
        free(v39);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(*(void *)a1 + 36)) {
      uint64_t v10 = *(void *)a1 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
    a2(a3, v11, "cst", 3);
  }
}

void *mlir::arith::ConstantOp::getValue(mlir::arith::ConstantOp *this)
{
  int v1 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (!v1) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v1 + 8);
  return v1;
}

uint64_t mlir::arith::ConstantOp::verify(uint64_t **this)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v3 + 8);
    uint64_t v66 = v3;
    uint64_t v67 = v4;
    if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v66) != v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v66) != v2)
    {
LABEL_3:
      __int16 v62 = 257;
      mlir::OpState::emitOpError(this, v61, (uint64_t)&v66);
      if (v66)
      {
        int v63 = 3;
        long long v64 = "value type ";
        uint64_t v65 = 11;
        uint64_t v5 = &v63;
        uint64_t v6 = (char *)v68;
        if (v69 >= v70)
        {
          unint64_t v50 = v69 + 1;
          if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
          {
            int64_t v55 = (char *)&v63 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v50, 24);
            uint64_t v6 = (char *)v68;
            uint64_t v5 = (int *)((char *)v68 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v50, 24);
            uint64_t v5 = &v63;
            uint64_t v6 = (char *)v68;
          }
        }
        uint64_t v7 = &v6[24 * v69];
        long long v8 = *(_OWORD *)v5;
        *((void *)v7 + 2) = *((void *)v5 + 2);
        *(_OWORD *)uint64_t v7 = v8;
        ++v69;
      }
      uint64_t v9 = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      if (v9)
      {
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
        uint64_t v59 = v9;
        uint64_t v60 = v10;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v59);
        if (!v66) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v59);
        if (!v66) {
          goto LABEL_26;
        }
      }
      unsigned int v16 = &v63;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, canMapOperands);
      uint64_t v17 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v51 = v69 + 1;
        if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
        {
          int64_t v56 = (char *)&v63 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v51, 24);
          uint64_t v17 = (char *)v68;
          unsigned int v16 = (int *)((char *)v68 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v51, 24);
          unsigned int v16 = &v63;
          uint64_t v17 = (char *)v68;
        }
      }
      uint64_t v18 = &v17[24 * v69];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v69;
      if (v66)
      {
        int v63 = 3;
        long long v64 = " must match return type: ";
        uint64_t v65 = 25;
        int v21 = &v63;
        uint64_t v22 = (char *)v68;
        if (v20 >= v70)
        {
          unint64_t v52 = v20 + 1;
          BOOL v53 = (char *)v68 + 24 * v20 > (char *)&v63;
          if (v68 <= &v63 && v53)
          {
            int64_t v57 = (char *)&v63 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v52, 24);
            uint64_t v22 = (char *)v68;
            int v21 = (int *)((char *)v68 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v52, 24);
            int v21 = &v63;
            uint64_t v22 = (char *)v68;
          }
        }
        uint64_t v23 = &v22[24 * v69];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v69;
        if (v66)
        {
          uint64_t v25 = &v63;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, v2);
          __int16 v26 = (char *)v68;
          if (v69 >= v70)
          {
            unint64_t v54 = v69 + 1;
            if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
            {
              int64_t v58 = (char *)&v63 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
              __int16 v26 = (char *)v68;
              uint64_t v25 = (int *)((char *)v68 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
              uint64_t v25 = &v63;
              __int16 v26 = (char *)v68;
            }
          }
          unsigned int v27 = &v26[24 * v69];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)unsigned int v27 = v28;
          ++v69;
        }
      }
LABEL_26:
      uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
      if (v66) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
      }
      if (v76)
      {
        int v29 = (void **)__p;
        if (__p)
        {
          uint64_t v30 = v75;
          unint64_t v31 = __p;
          if (v75 != __p)
          {
            do
              uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
            while (v30 != v29);
            unint64_t v31 = __p;
          }
          unint64_t v75 = v29;
          operator delete(v31);
        }
        unint64_t v32 = v72;
        if (!v72) {
          goto LABEL_71;
        }
        char v33 = v73;
        uint64_t v34 = v72;
        if (v73 == v72)
        {
LABEL_70:
          unint64_t v73 = v32;
          operator delete(v34);
LABEL_71:
          if (v68 != v71) {
            free(v68);
          }
          return v15;
        }
        do
        {
          uint64_t v36 = (void *)*--v33;
          int v35 = v36;
          *char v33 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v33 != v32);
LABEL_69:
        uint64_t v34 = v72;
        goto LABEL_70;
      }
      return v15;
    }
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    && (uint64_t v66 = (void *)v2, mlir::IntegerType::getSignedness((mlir::IntegerType *)&v66)))
  {
    v61[0] = (const void **)"integer return type must be signless";
    __int16 v62 = 259;
    mlir::OpState::emitOpError(this, v61, (uint64_t)&v66);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
    if (v66) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
    }
    if (v76)
    {
      unint64_t v37 = (void **)__p;
      if (__p)
      {
        uint64_t v38 = v75;
        unint64_t v39 = __p;
        if (v75 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          unint64_t v39 = __p;
        }
        unint64_t v75 = v37;
        operator delete(v39);
      }
      unint64_t v32 = v72;
      if (!v72) {
        goto LABEL_71;
      }
      long long v40 = v73;
      uint64_t v34 = v72;
      if (v73 == v72) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v42 = (void *)*--v40;
        unint64_t v41 = v42;
        *long long v40 = 0;
        if (v42) {
          operator delete[](v41);
        }
      }
      while (v40 != v32);
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v12 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (v12) {
      mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v12 + 8);
    }
    unint64_t v13 = *(void **)(*(void *)v12 + 136);
    BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
       || v13 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    if (v14 || mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12 + 8)) {
      return 1;
    }
    v61[0] = (const void **)"value must be an integer, float, or elements attribute";
    __int16 v62 = 259;
    mlir::OpState::emitOpError(this, v61, (uint64_t)&v66);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
    if (v66) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
    }
    if (v76)
    {
      uint64_t v43 = (void **)__p;
      if (__p)
      {
        unint64_t v44 = v75;
        unint64_t v45 = __p;
        if (v75 != __p)
        {
          do
            unint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          unint64_t v45 = __p;
        }
        unint64_t v75 = v43;
        operator delete(v45);
      }
      unint64_t v32 = v72;
      if (!v72) {
        goto LABEL_71;
      }
      unint64_t v46 = v73;
      uint64_t v34 = v72;
      if (v73 == v72) {
        goto LABEL_70;
      }
      do
      {
        BOOL v48 = (void *)*--v46;
        uint64_t v47 = v48;
        *unint64_t v46 = 0;
        if (v48) {
          operator delete[](v47);
        }
      }
      while (v46 != v32);
      goto LABEL_69;
    }
  }
  return v15;
}

BOOL mlir::arith::ConstantOp::isBuildableWith(uint64_t a1, uint64_t a2)
{
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a1 + 8))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    return 0;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a1 + 8);
  uint64_t v9 = a1;
  uint64_t v10 = v4;
  if (!a1) {
    return 0;
  }
  if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v9) != a2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t v8 = a2;
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v8)) {
      return 0;
    }
  }
  uint64_t v6 = *(void **)(*(void *)a1 + 136);
  return v6 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
      || mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)a1 + 8) != 0;
}

mlir::GenericProgramPoint *mlir::arith::ConstantOp::materialize(mlir::OpBuilder *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!mlir::arith::ConstantOp::isBuildableWith((uint64_t)a2, a3)) {
    return 0;
  }
  if (a2) {
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a2 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = (uint64_t)a2;
  v9[1] = v7;
  return mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::TypedAttr>(a1, a4, v9);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::TypedAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    void v15[2] = (uint64_t)"arith.constant";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v17, *a3, a3[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

unint64_t mlir::arith::ConstantOp::fold(uint64_t a1)
{
  unint64_t v1 = *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  if (v1) {
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v1 + 8);
  }
  return v1 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::ConstantIntOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, a4);
  uint64_t IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a3);
  uint64_t v9 = IntegerAttr;
  if (!IntegerAttr)
  {
    unint64_t v13 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
    void *v13 = 0;
    v13[1] = 0;
    uint64_t v12 = *(unsigned int *)(a2 + 72);
    if (v12 < *(_DWORD *)(a2 + 76)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
  uint64_t v11 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
  *uint64_t v11 = v9;
  v11[1] = v10;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
LABEL_4:
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = IntegerType;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::arith::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
  *uint64_t v9 = a4;
  v9[1] = a5;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::ConstantIntOp::classof(BOOL this, mlir::Operation *a2)
{
  if (this)
  {
    if (*(_UNKNOWN **)(*(void *)(this + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      unint64_t v2 = *(void *)(this - 8) & 0xFFFFFFFFFFFFFFF8;
      return mlir::Type::isSignlessInteger((mlir::Type *)&v2);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void mlir::arith::ConstantIndexOp::build(mlir::IndexType **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t IndexType = mlir::Builder::getIndexType(a1, (mlir::MLIRContext *)a2);
  IndexAttr = (void *)mlir::Builder::getIndexAttr(a1, a3);
  char v8 = IndexAttr;
  if (!IndexAttr)
  {
    uint64_t v12 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
    *uint64_t v12 = 0;
    v12[1] = 0;
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    if (v11 < *(_DWORD *)(a2 + 76)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IndexAttr + 8);
  uint64_t v10 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
  *uint64_t v10 = v8;
  v10[1] = v9;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
LABEL_4:
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::ConstantIndexOp::classof(BOOL this, mlir::Operation *a2)
{
  if (this)
  {
    if (*(_UNKNOWN **)(*(void *)(this + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      unint64_t v2 = *(void *)(this - 8) & 0xFFFFFFFFFFFFFFF8;
      return mlir::Type::isIndex((mlir::Type *)&v2);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t mlir::arith::AddIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4) {
    goto LABEL_16;
  }
  DWORD2(v87) = 1;
  *(void *)&long long v87 = 0;
  *(void *)&long long v85 = &v87;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v85, v4);
  int v6 = DWORD2(v87);
  if (v5)
  {
    if (DWORD2(v87) < 0x41)
    {
      BOOL v7 = (void)v87 == 0;
      goto LABEL_11;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v87) > 0x40)
    {
      if ((void)v87) {
        operator delete[]((void *)v87);
      }
      goto LABEL_16;
    }
    BOOL v7 = *(void *)v87 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v87) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v87)
  {
LABEL_11:
    if (v7) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  operator delete[]((void *)v87);
  if (v7)
  {
LABEL_12:
    uint64_t v8 = *(void *)(*a1 + 72);
    return *(void *)(v8 + 24) | 4;
  }
LABEL_16:
  *(void *)&long long v87 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v87);
  if (DefiningOp)
  {
    uint64_t v11 = *a1;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      if (*(void *)(*(void *)(v11 + 72) + 56) == *(void *)(v12 + 56)) {
        return *(void *)(v12 + 24) | 4;
      }
    }
  }
  else
  {
    uint64_t v11 = *a1;
  }
  *(void *)&long long v87 = *(void *)(*(void *)(v11 + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v87);
  if (v13)
  {
    if (*(_UNKNOWN **)(*(void *)(v13 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v8 = *(void *)(v13 + 72);
      if (*(void *)(*(void *)(*a1 + 72) + 24) == *(void *)(v8 + 56)) {
        return *(void *)(v8 + 24) | 4;
      }
    }
  }
  __int16 v14 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v14;
  if (*v14
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v16 = *v14;
  }
  else
  {
    uint64_t v16 = v14[1];
    if (!v16 || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v87 = canMapOperands;
          *((void *)&v87 + 1) = v17;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v87 = 0uLL;
        }
      }
      else
      {
        long long v87 = 0uLL;
      }
      uint64_t v16 = v14[1];
      if (v16)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8);
          *(void *)&long long v87 = v16;
          *((void *)&v87 + 1) = v18;
          uint64_t v19 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
          uint64_t v16 = 0;
          if (canMapOperands && v19 && canMapOperands == v19)
          {
            uint64_t v20 = *v14;
            if (*v14
              && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v16 = *v14;
            }
            else
            {
              int v21 = (void *)v14[1];
              if (v21)
              {
                uint64_t v22 = *(void **)(*(void *)v21 + 136);
                if (v22 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v16 = v14[1];
                }
                else {
                  uint64_t v16 = 0;
                }
                if (!v20 || v22 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v16 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v22 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v68 = *v14;
                  uint64_t v65 = v21;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v68);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65))
                  {
                    mlir::IntegerAttr::getValue(&v68, (llvm::APInt *)&v74);
                    mlir::IntegerAttr::getValue(&v65, (llvm::APInt *)&__p);
                    int v24 = v75;
                    DWORD2(v85) = v75;
                    if (v75 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v85, (const void **)&v74);
                      int v24 = DWORD2(v85);
                      uint64_t v25 = (void *)v85;
                    }
                    else
                    {
                      uint64_t v25 = v74;
                      *(void *)&long long v85 = v74;
                    }
                    DWORD2(v87) = v24;
                    *(void *)&long long v87 = v25;
                    DWORD2(v85) = 0;
                    llvm::APInt::operator+=((uint64_t)&v87, (void **)&__p);
                    LOBYTE(v88[0]) = 1;
                    if (DWORD2(v85) >= 0x41 && (void)v85) {
                      operator delete[]((void *)v85);
                    }
                    if (v72 >= 0x41 && __p) {
                      operator delete[](__p);
                    }
                    if (v75 >= 0x41 && v74) {
                      operator delete[](v74);
                    }
                    uint64_t v16 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v87);
                    if (!LOBYTE(v88[0])) {
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_84;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v14)) {
                    uint64_t v26 = v20;
                  }
                  else {
                    uint64_t v26 = 0;
                  }
                  *(void *)&long long v87 = v26;
                  if (v26
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v87)
                    && ((uint64_t v27 = v14[1], !mlir::DenseElementsAttr::classof(v27)) ? (v28 = 0) : (v28 = v27),
                        (*(void *)&long long v87 = v28) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v87)))
                  {
                    int v29 = (void *)v14[1];
                    uint64_t v68 = *v14;
                    uint64_t v65 = v29;
                    uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v68);
                    if (v30 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v68, (uint64_t)&v87);
                      long long v85 = v87;
                      long long v86 = v88[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v85, (llvm::APInt *)&v74);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v65, (uint64_t)&v87);
                      long long v85 = v87;
                      long long v86 = v88[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v85, (llvm::APInt *)&__p);
                      int v31 = v75;
                      DWORD2(v85) = v75;
                      if (v75 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v85, (const void **)&v74);
                        int v31 = DWORD2(v85);
                        unint64_t v32 = (void *)v85;
                      }
                      else
                      {
                        unint64_t v32 = v74;
                        *(void *)&long long v85 = v74;
                      }
                      DWORD2(v87) = v31;
                      *(void *)&long long v87 = v32;
                      DWORD2(v85) = 0;
                      llvm::APInt::operator+=((uint64_t)&v87, (void **)&__p);
                      LOBYTE(v88[0]) = 1;
                      if (DWORD2(v85) >= 0x41 && (void)v85) {
                        operator delete[]((void *)v85);
                      }
                      if (v72 >= 0x41 && __p) {
                        operator delete[](__p);
                      }
                      if (v75 >= 0x41 && v74) {
                        operator delete[](v74);
                      }
                      uint64_t v60 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v60, (llvm::APInt *)&v87, 1);
                      if (!LOBYTE(v88[0])) {
                        return v16 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_84:
                      if (DWORD2(v87) >= 0x41)
                      {
                        if ((void)v87) {
                          operator delete[]((void *)v87);
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v14 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v14[1] + 8))
                  }
                  {
                    char v33 = (void *)*v14;
                    uint64_t v34 = *v14 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8) : 0;
                    unint64_t v79 = v33;
                    uint64_t v80 = v34;
                    int v35 = (void *)v14[1];
                    uint64_t v36 = v35 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v35 + 8) : 0;
                    v78[0] = v35;
                    v78[1] = v36;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v79, (uint64_t)&v85);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v78, (uint64_t)&v74);
                      uint64_t v16 = 0;
                      int v38 = v77;
                      if (BYTE8(v86) && v77)
                      {
                        LOWORD(__p) = v85;
                        if ((_BYTE)v85) {
                          uint64_t v72 = *((void *)&v85 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v85 + 1) + 16))(&v72);
                        }
                        uint64_t v73 = v86;
                        LOWORD(v68) = (_WORD)v74;
                        if ((_BYTE)v74) {
                          uint64_t v69 = v75;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v75 + 16))(&v69);
                        }
                        uint64_t v70 = v76;
                        *(void *)&long long v87 = v88;
                        *((void *)&v87 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v79, v80);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v87, NumElements);
                        uint64_t v40 = mlir::ElementsAttr::getNumElements((uint64_t)v79, v80);
                        if (v40)
                        {
                          uint64_t v41 = v40;
                          uint64_t v42 = v73;
                          while (1)
                          {
                            if (BYTE1(__p)) {
                              uint64_t v43 = 0;
                            }
                            else {
                              uint64_t v43 = v42;
                            }
                            if ((_BYTE)__p)
                            {
                              uint64_t v44 = v72 + 16 * v43;
                              unsigned int v64 = *(_DWORD *)(v44 + 8);
                              if (v64 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v63, (const void **)v44);
                              }
                              else {
                                int v63 = *(void **)v44;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v72 + 24))(&v63);
                            }
                            if (BYTE1(v68)) {
                              uint64_t v45 = 0;
                            }
                            else {
                              uint64_t v45 = v70;
                            }
                            if ((_BYTE)v68)
                            {
                              uint64_t v46 = v69 + 16 * v45;
                              unsigned int v62 = *(_DWORD *)(v46 + 8);
                              if (v62 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)v46);
                              }
                              else {
                                size_t v61 = *(void **)v46;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v69 + 24))(&v61);
                            }
                            unsigned int v47 = v64;
                            unsigned int v82 = v64;
                            if (v64 > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v81, (const void **)&v63);
                              unsigned int v47 = v82;
                              BOOL v48 = v81;
                            }
                            else
                            {
                              BOOL v48 = v63;
                              unint64_t v81 = v63;
                            }
                            unsigned int v84 = v47;
                            uint64_t v83 = v48;
                            unsigned int v82 = 0;
                            llvm::APInt::operator+=((uint64_t)&v83, (void **)&v61);
                            unsigned int v66 = v84;
                            uint64_t v65 = v83;
                            char v67 = 1;
                            if (v82 >= 0x41 && v81) {
                              operator delete[](v81);
                            }
                            if (v62 >= 0x41 && v61) {
                              operator delete[](v61);
                            }
                            if (v64 >= 0x41 && v63) {
                              operator delete[](v63);
                            }
                            if (!v67) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v87, (unint64_t)&v65, 1);
                            unint64_t v50 = (llvm::APInt *)(v87 + 16 * DWORD2(v87));
                            unsigned int v51 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v50 + 2) = v51;
                            if (v51 > 0x40) {
                              llvm::APInt::initSlowCase(v50, (const void **)Address);
                            }
                            else {
                              *(void *)unint64_t v50 = *(void *)Address;
                            }
                            ++DWORD2(v87);
                            if (v67 && v66 >= 0x41 && v65) {
                              operator delete[](v65);
                            }
                            uint64_t v42 = ++v73;
                            ++v70;
                            if (!--v41) {
                              goto LABEL_141;
                            }
                          }
                          uint64_t v16 = 0;
                        }
                        else
                        {
LABEL_141:
                          uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v52, (llvm::APInt *)v87, DWORD2(v87));
                        }
                        BOOL v53 = (char *)v87;
                        if (DWORD2(v87))
                        {
                          uint64_t v54 = 16 * DWORD2(v87);
                          do
                          {
                            if (*(_DWORD *)&v53[v54 - 8] >= 0x41u)
                            {
                              int64_t v55 = *(void **)&v53[v54 - 16];
                              if (v55) {
                                operator delete[](v55);
                              }
                            }
                            v54 -= 16;
                          }
                          while (v54);
                          BOOL v53 = (char *)v87;
                        }
                        if (v53 != (char *)v88) {
                          free(v53);
                        }
                        if (!(_BYTE)v68)
                        {
                          uint64_t v56 = v69;
                          uint64_t v69 = 0;
                          if (v56) {
                            (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
                          }
                        }
                        if (!(_BYTE)__p)
                        {
                          uint64_t v57 = v72;
                          uint64_t v72 = 0;
                          if (v57) {
                            (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
                          }
                        }
                        int v38 = v77;
                      }
                      if (v38)
                      {
                        if (!(_BYTE)v74)
                        {
                          uint64_t v58 = v75;
                          uint64_t v75 = 0;
                          if (v58) {
                            (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
                          }
                        }
                      }
                      if (BYTE8(v86))
                      {
                        if (!(_BYTE)v85)
                        {
                          uint64_t v59 = *((void *)&v85 + 1);
                          *((void *)&v85 + 1) = 0;
                          if (v59) {
                            (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
                          }
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v16 = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
          long long v87 = 0uLL;
        }
      }
      else
      {
        long long v87 = 0uLL;
      }
    }
  }
  return v16 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::AddIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  long long v175 = xmmword_1E4FBF360;
  long long v176 = *(_OWORD *)&off_1E4FBF370;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.addi", 10, v174, a2, &v175, 2uLL);
  *(void *)uint64_t v4 = &unk_1EC997E48;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    BOOL v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v175 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddIAddConstant]";
  *((void *)&v175 + 1) = 88;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v175 + 1);
  }
  uint64_t v11 = v175 + v10;
  unint64_t v12 = *((void *)&v175 + 1) - v10;
  if (*((void *)&v175 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v175 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  BOOL v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)BOOL v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_193;
    }
    int v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    int v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_196;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      int v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)int v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      BOOL v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_196:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)BOOL v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      BOOL v7 = (char *)a1[1];
      int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  int v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  long long v175 = xmmword_1E4FBF360;
  long long v176 = *(_OWORD *)&off_1E4FBF370;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.addi", 10, v174, a2, &v175, 2uLL);
  *(void *)int v38 = &unk_1EC998E98;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v175 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddISubConstantRHS]";
  *((void *)&v175 + 1) = 91;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v175 + 1);
  }
  uint64_t v45 = v175 + v44;
  unint64_t v46 = *((void *)&v175 + 1) - v44;
  if (*((void *)&v175 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v175 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  unint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_193;
    }
    int64_t v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    uint64_t v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    int64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_197;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v62 = &v41[-v61];
      v56 -= v61;
      int v63 = &v55[8 * v51 - 16];
      unsigned int v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)unsigned int v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)int v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  uint64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  long long v175 = xmmword_1E4FBF380;
  long long v176 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"arith.addi", 10, v174, a2, &v175, 2uLL);
  *(void *)uint64_t v72 = &unk_1EC998E58;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    uint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  *(void *)&long long v175 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddISubConstantLHS]";
  *((void *)&v175 + 1) = 91;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175 + 1) >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = *((void *)&v175 + 1);
  }
  uint64_t v79 = v175 + v78;
  unint64_t v80 = *((void *)&v175 + 1) - v78;
  if (*((void *)&v175 + 1) - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = *((void *)&v175 + 1) - v78;
  }
  uint64_t v82 = v79 + v81;
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  uint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)uint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  unsigned int v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_193;
    }
    uint64_t v89 = (char *)operator new(8 * v88);
    int v90 = &v89[8 * v85];
    unint64_t v91 = &v89[8 * v88];
    *(void *)int v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v89 = 0;
    int v90 = (char *)(8 * v85);
    unint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_198;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      long long v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)long long v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      uint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_198:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)uint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      uint64_t v75 = (char *)a1[1];
      uint64_t v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)uint64_t v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  unint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(void *)&long long v175 = "arith.subi";
  *((void *)&v175 + 1) = 10;
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"arith.addi", 10, v174, a2, &v175, 1uLL);
  *(void *)unint64_t v106 = &unk_1EC99A850;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    unint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  *(void *)&long long v175 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddIMulNegativeOneRhs]";
  *((void *)&v175 + 1) = 94;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175 + 1) >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = *((void *)&v175 + 1);
  }
  uint64_t v113 = v175 + v112;
  unint64_t v114 = *((void *)&v175 + 1) - v112;
  if (*((void *)&v175 + 1) - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = *((void *)&v175 + 1) - v112;
  }
  uint64_t v116 = v113 + v115;
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  unint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)unint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (v122)
  {
    if (v122 >> 61) {
      goto LABEL_193;
    }
    unint64_t v123 = (char *)operator new(8 * v122);
    uint64_t v124 = &v123[8 * v119];
    unint64_t v125 = &v123[8 * v122];
    *(void *)uint64_t v124 = v106;
    uint64_t v110 = (uint64_t)(v124 + 8);
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
  }
  else
  {
    unint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    unint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      unint64_t v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_199;
      }
      uint64_t v128 = (v127 >> 3) + 1;
      uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      long long v130 = &v109[-v129];
      v124 -= v129;
      uint64_t v131 = &v123[8 * v119 - 16];
      long long v132 = v109 - 16;
      uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v135 = *((_OWORD *)v132 - 1);
        long long v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)long long v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)uint64_t v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      unint64_t v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          uint64_t v136 = *((void *)v109 - 1);
          v109 -= 8;
          *(void *)unint64_t v109 = 0;
          *((void *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      unint64_t v109 = (char *)a1[1];
      uint64_t v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        uint64_t v139 = *((void *)v137 - 1);
        v137 -= 8;
        uint64_t v138 = v139;
        *(void *)uint64_t v137 = 0;
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
  unint64_t v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(void *)&long long v175 = "arith.subi";
  *((void *)&v175 + 1) = 10;
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"arith.addi", 10, v174, a2, &v175, 1uLL);
  *(void *)unint64_t v140 = &unk_1EC99A810;
  if (*((void *)v140 + 9))
  {
    unint64_t v141 = v140[22];
    if (v141 <= v140[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    unint64_t v143 = (char *)a1[2];
    unint64_t v142 = a1[3];
    if ((unint64_t)v143 < v142) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  *(void *)&long long v175 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddIMulNegativeOneLhs]";
  *((void *)&v175 + 1) = 94;
  unint64_t v145 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175 + 1) >= v145) {
    unint64_t v146 = v145;
  }
  else {
    unint64_t v146 = *((void *)&v175 + 1);
  }
  uint64_t v147 = v175 + v146;
  unint64_t v148 = *((void *)&v175 + 1) - v146;
  if (*((void *)&v175 + 1) - v146 >= 0x12) {
    uint64_t v149 = 18;
  }
  else {
    uint64_t v149 = *((void *)&v175 + 1) - v146;
  }
  uint64_t v150 = v147 + v149;
  unint64_t v151 = v148 - v149;
  if (v151 >= v151 - 1) {
    --v151;
  }
  *((void *)v140 + 8) = v150;
  *((void *)v140 + 9) = v151;
  unint64_t v141 = v140[22];
  if (v141 > v140[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v140[22] = v141;
  unint64_t v143 = (char *)a1[2];
  unint64_t v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(void *)unint64_t v143 = v140;
    uint64_t v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  uint64_t v152 = (char *)a1[1];
  uint64_t v153 = (v143 - v152) >> 3;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61) {
LABEL_192:
  }
    abort();
  uint64_t v155 = v142 - (void)v152;
  if (v155 >> 2 > v154) {
    unint64_t v154 = v155 >> 2;
  }
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v156 = v154;
  }
  if (!v156)
  {
    uint64_t v157 = 0;
    uint64_t v158 = (char *)(8 * v153);
    unint64_t v159 = 0;
    *(void *)(8 * v153) = v140;
    uint64_t v144 = 8 * v153 + 8;
    uint64_t v160 = (char *)(v143 - v152);
    if (v143 != v152) {
      goto LABEL_176;
    }
    goto LABEL_188;
  }
  if (v156 >> 61) {
LABEL_193:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v157 = (char *)operator new(8 * v156);
  uint64_t v158 = &v157[8 * v153];
  unint64_t v159 = &v157[8 * v156];
  *(void *)uint64_t v158 = v140;
  uint64_t v144 = (uint64_t)(v158 + 8);
  uint64_t v160 = (char *)(v143 - v152);
  if (v143 != v152)
  {
LABEL_176:
    unint64_t v161 = (unint64_t)(v160 - 8);
    if (v161 < 0x78
      || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
      && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
    {
      goto LABEL_200;
    }
    uint64_t v162 = (v161 >> 3) + 1;
    uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
    long long v164 = &v143[-v163];
    v158 -= v163;
    uint64_t v165 = &v157[8 * v153 - 16];
    long long v166 = v143 - 16;
    uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v169 = *((_OWORD *)v166 - 1);
      long long v168 = *(_OWORD *)v166;
      *((_OWORD *)v166 - 1) = 0uLL;
      *(_OWORD *)long long v166 = 0uLL;
      *((_OWORD *)v165 - 1) = v169;
      *(_OWORD *)uint64_t v165 = v168;
      v165 -= 32;
      v166 -= 32;
      v167 -= 4;
    }
    while (v167);
    unint64_t v143 = v164;
    if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_200:
      do
      {
        uint64_t v170 = *((void *)v143 - 1);
        v143 -= 8;
        *(void *)unint64_t v143 = 0;
        *((void *)v158 - 1) = v170;
        v158 -= 8;
      }
      while (v143 != v152);
    }
    unint64_t v143 = (char *)a1[1];
    uint64_t v171 = (char *)a1[2];
    a1[1] = v158;
    a1[2] = v144;
    a1[3] = v159;
    while (v171 != v143)
    {
      uint64_t v173 = *((void *)v171 - 1);
      v171 -= 8;
      uint64_t v172 = v173;
      *(void *)uint64_t v171 = 0;
      if (v173) {
        (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
      }
    }
    goto LABEL_189;
  }
LABEL_188:
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143) {
    operator delete(v143);
  }
LABEL_191:
  a1[2] = v144;
}

void mlir::arith::AddUIExtendedOp::getShapeForUnroll(mlir::arith::AddUIExtendedOp *this@<X0>, uint64_t a2@<X8>)
{
  void v16[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
    unint64_t v3 = 0;
  }
  unint64_t v13 = v3;
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  uint64_t Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  unint64_t v6 = v4;
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  size_t v7 = 8 * v4;
  if (8 * v4 < 0x21)
  {
    int v8 = 0;
    unint64_t v9 = v16;
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v4, 8);
  int v8 = v15;
  unint64_t v9 = v14;
  if (v6)
  {
LABEL_9:
    memcpy(&v9[v8], Value, v7);
    int v8 = v15;
    unint64_t v9 = v14;
  }
LABEL_10:
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unint64_t v10 = (v8 + v6);
  LODWORD(v15) = v10;
  if (v10 && &v14 != (void **)a2)
  {
    if (v9 == v16)
    {
      unsigned int v12 = v10;
      unint64_t v9 = v16;
      if (v10 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10, 8),
            unsigned int v12 = v15,
            unint64_t v9 = v14,
            v15))
      {
        memcpy(*(void **)a2, v9, 8 * v12);
        unint64_t v9 = v14;
      }
      *(_DWORD *)(a2 + 8) = v10;
    }
    else
    {
      *(void *)a2 = v9;
      int v11 = HIDWORD(v15);
      *(_DWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 12) = v11;
      uint64_t v14 = v16;
      HIDWORD(v15) = 0;
      unint64_t v9 = v16;
    }
    LODWORD(v15) = 0;
  }
  *(unsigned char *)(a2 + 48) = 1;
  if (v9 != v16) {
    free(v9);
  }
}

uint64_t mlir::arith::AddUIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(char **__return_ptr, void **, void **);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *canMapOperands;
  void *I1SameShape;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t Value;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t Type;
  int v46;
  unint64_t NumElements;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  void *v56;
  char *Address;
  llvm::APInt *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unsigned int v70;
  void *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  char v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>);
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  void v86[2];
  void *v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  void *v91;
  unsigned int v92;
  void *__p;
  unsigned int v94;
  void *v95;
  unsigned int v96;
  void *v97;
  unsigned int v98;
  void *v99;
  unsigned int v100;
  long long v101;
  long long v102;
  long long v103;
  _OWORD v104[4];
  uint64_t v105;

  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v6 = *(void *)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  uint64_t v8 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0) + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  *(void *)&long long v101 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  *(void *)&uint64_t v103 = v9;
  uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v103);
  if (!DefiningOp
    || !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v101, DefiningOp))
  {
    unint64_t v18 = *(uint64_t **)(a2 + 40);
    uint64_t v19 = (void (*)(char **__return_ptr, void **, void **))*v18;
    if (*v18 && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      unint64_t v20 = *v18;
      goto LABEL_21;
    }
    unint64_t v20 = v18[1];
    if (v20 && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_21:
      *(void *)&uint64_t v103 = v20;
      *((void *)&v103 + 1) = **(void **)(a2 + 40);
      int v24 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v20 + 8);
      *(void *)&long long v101 = v20;
      *((void *)&v101 + 1) = v24;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v101);
      I1Sameuint64_t Shape = (void *)getI1SameShape(canMapOperands);
      uint64_t v82 = calculateUnsignedOverflow;
      uint64_t result = mlir::constFoldBinaryOpConditional<mlir::IntegerAttr,llvm::APInt,void,mlir::Attribute mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,void,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&)>(llvm::ArrayRef<mlir::Attribute>,mlir::Type,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&) &&)::{lambda(llvm::APInt,llvm::APInt)#1}>((uint64_t *)&v103, 2, I1SameShape, (void (**)(char **__return_ptr, void **, void **))&v82);
      if (!result) {
        return result;
      }
      unint64_t ZeroAttr = result;
      unint64_t v12 = v20 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      if (v13 < *(_DWORD *)(a3 + 12)) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
    if (v19)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8))
      {
        int v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8);
        *(void *)&uint64_t v103 = v19;
        *((void *)&v103 + 1) = v21;
        uint64_t v19 = (void (*)(char **__return_ptr, void **, void **))mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v103);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v103 = 0uLL;
      }
    }
    else
    {
      uint64_t v103 = 0uLL;
    }
    uint64_t v22 = (void *)v18[1];
    if (v22)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v22 + 8))
      {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v22 + 8);
        *(void *)&uint64_t v103 = v22;
        *((void *)&v103 + 1) = v23;
        uint64_t v27 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v103);
        uint64_t result = 0;
        if (!v19 || !v27 || v19 != (void (*)(char **__return_ptr, void **, void **))v27) {
          return result;
        }
        unint64_t v20 = *v18;
        if (*v18
          && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_21;
        }
        uint64_t v28 = v18[1];
        if (v28)
        {
          int v29 = *(void **)(*(void *)v28 + 136);
          if (v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v30 = v18[1];
          }
          else {
            uint64_t v30 = 0;
          }
          if (!v20 || v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_81;
          }
          if (v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v82 = (uint64_t (*)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>))*v18;
            uint64_t v79 = v28;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79))
            {
              mlir::IntegerAttr::getValue(&v82, (llvm::APInt *)&v95);
              mlir::IntegerAttr::getValue(&v79, (llvm::APInt *)&__p);
              long long v32 = v96;
              DWORD2(v101) = v96;
              if (v96 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v101, (const void **)&v95);
                long long v32 = DWORD2(v101);
                long long v33 = (void *)v101;
              }
              else
              {
                long long v33 = v95;
                *(void *)&long long v101 = v95;
              }
              DWORD2(v103) = v32;
              *(void *)&uint64_t v103 = v33;
              DWORD2(v101) = 0;
              llvm::APInt::operator+=((uint64_t)&v103, (void **)&__p);
              LOBYTE(v104[0]) = 1;
              if (DWORD2(v101) >= 0x41 && (void)v101) {
                operator delete[]((void *)v101);
              }
              if (v94 >= 0x41 && __p) {
                operator delete[](__p);
              }
              if (v96 >= 0x41 && v95) {
                operator delete[](v95);
              }
              uint64_t v30 = mlir::IntegerAttr::get((uint64_t)v19, (llvm::APInt *)&v103);
              if (LOBYTE(v104[0]))
              {
LABEL_72:
                if (DWORD2(v103) >= 0x41 && (void)v103) {
                  operator delete[]((void *)v103);
                }
              }
LABEL_81:
              unint64_t v20 = v30;
              if (!v30) {
                return 0;
              }
              goto LABEL_21;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v18)) {
              uint64_t v34 = v20;
            }
            else {
              uint64_t v34 = 0;
            }
            *(void *)&uint64_t v103 = v34;
            if (v34
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v103)
              && ((v35 = v18[1], !mlir::DenseElementsAttr::classof(v35)) ? (uint64_t v36 = 0) : (uint64_t v36 = v35),
                  (*(void *)&uint64_t v103 = v36) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v103)))
            {
              uint64_t v37 = v18[1];
              uint64_t v82 = (uint64_t (*)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>))*v18;
              uint64_t v79 = v37;
              int v38 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v82);
              if (v38 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v82, (uint64_t)&v103);
                long long v101 = v103;
                uint64_t v102 = v104[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v101, (llvm::APInt *)&v91);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v79, (uint64_t)&v103);
                long long v101 = v103;
                uint64_t v102 = v104[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v101, (llvm::APInt *)&v89);
                unint64_t v39 = v92;
                DWORD2(v101) = v92;
                if (v92 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v101, (const void **)&v91);
                  unint64_t v39 = DWORD2(v101);
                  unint64_t v40 = (void *)v101;
                }
                else
                {
                  unint64_t v40 = v91;
                  *(void *)&long long v101 = v91;
                }
                DWORD2(v103) = v39;
                *(void *)&uint64_t v103 = v40;
                DWORD2(v101) = 0;
                llvm::APInt::operator+=((uint64_t)&v103, (void **)&v89);
                LOBYTE(v104[0]) = 1;
                if (DWORD2(v101) >= 0x41 && (void)v101) {
                  operator delete[]((void *)v101);
                }
                if (v90 >= 0x41 && v89) {
                  operator delete[](v89);
                }
                if (v92 >= 0x41 && v91) {
                  operator delete[](v91);
                }
                uint64_t v68 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8);
                uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)v19, v68, (llvm::APInt *)&v103, 1);
                if (LOBYTE(v104[0])) {
                  goto LABEL_72;
                }
                goto LABEL_81;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v18 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v18[1] + 8))
              {
                return 0;
              }
              uint64_t v41 = (void *)*v18;
              if (*v18) {
                uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v87 = v41;
              unint64_t v88 = v42;
              unint64_t v43 = (void *)v18[1];
              if (v43) {
                unint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v43 + 8);
              }
              else {
                unint64_t v44 = 0;
              }
              v86[0] = v43;
              v86[1] = v44;
              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
              if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v101);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                uint64_t v30 = 0;
                unint64_t v46 = v85;
                if (BYTE8(v102) && v85)
                {
                  LOWORD(v79) = v101;
                  if ((_BYTE)v101) {
                    unint64_t v80 = *((void *)&v101 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v101 + 1) + 16))(&v80);
                  }
                  uint64_t v81 = v102;
                  uint64_t v76 = (__int16)v82;
                  if ((_BYTE)v82) {
                    unint64_t v77 = v83;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 16))(&v77);
                  }
                  unint64_t v78 = v84;
                  *(void *)&uint64_t v103 = v104;
                  *((void *)&v103 + 1) = 0x400000000;
                  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v103, NumElements);
                  uint64_t v48 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                  if (v48)
                  {
                    unint64_t v49 = v48;
                    unint64_t v50 = v81;
                    while (1)
                    {
                      if (BYTE1(v79)) {
                        uint64_t v51 = 0;
                      }
                      else {
                        uint64_t v51 = v50;
                      }
                      if ((_BYTE)v79)
                      {
                        unint64_t v52 = v80 + 16 * v51;
                        uint64_t v72 = *(_DWORD *)(v52 + 8);
                        if (v72 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v52);
                        }
                        else {
                          uint64_t v71 = *(void **)v52;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v80 + 24))(&v71);
                      }
                      if (HIBYTE(v76)) {
                        uint64_t v53 = 0;
                      }
                      else {
                        uint64_t v53 = v78;
                      }
                      if ((_BYTE)v76)
                      {
                        unint64_t v54 = v77 + 16 * v53;
                        uint64_t v70 = *(_DWORD *)(v54 + 8);
                        if (v70 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v54);
                        }
                        else {
                          uint64_t v69 = *(void **)v54;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v77 + 24))(&v69);
                      }
                      int64_t v55 = v72;
                      long long v98 = v72;
                      if (v72 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v97, (const void **)&v71);
                        int64_t v55 = v98;
                        uint64_t v56 = v97;
                      }
                      else
                      {
                        uint64_t v56 = v71;
                        uint64_t v97 = v71;
                      }
                      long long v100 = v55;
                      uint64_t v99 = v56;
                      long long v98 = 0;
                      llvm::APInt::operator+=((uint64_t)&v99, (void **)&v69);
                      unint64_t v74 = v100;
                      unint64_t v73 = v99;
                      uint64_t v75 = 1;
                      if (v98 >= 0x41 && v97) {
                        operator delete[](v97);
                      }
                      if (v70 >= 0x41 && v69) {
                        operator delete[](v69);
                      }
                      if (v72 >= 0x41 && v71) {
                        operator delete[](v71);
                      }
                      if (!v75) {
                        break;
                      }
                      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v103, (unint64_t)&v73, 1);
                      uint64_t v58 = (llvm::APInt *)(v103 + 16 * DWORD2(v103));
                      unint64_t v59 = *((_DWORD *)Address + 2);
                      *((_DWORD *)v58 + 2) = v59;
                      if (v59 > 0x40) {
                        llvm::APInt::initSlowCase(v58, (const void **)Address);
                      }
                      else {
                        *(void *)uint64_t v58 = *(void *)Address;
                      }
                      ++DWORD2(v103);
                      if (v75 && v74 >= 0x41 && v73) {
                        operator delete[](v73);
                      }
                      unint64_t v50 = ++v81;
                      ++v78;
                      if (!--v49) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v30 = 0;
                  }
                  else
                  {
LABEL_131:
                    uint64_t v60 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8);
                    uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)v19, v60, (llvm::APInt *)v103, DWORD2(v103));
                  }
                  uint64_t v61 = (char *)v103;
                  if (DWORD2(v103))
                  {
                    unsigned int v62 = 16 * DWORD2(v103);
                    do
                    {
                      if (*(_DWORD *)&v61[v62 - 8] >= 0x41u)
                      {
                        int v63 = *(void **)&v61[v62 - 16];
                        if (v63) {
                          operator delete[](v63);
                        }
                      }
                      v62 -= 16;
                    }
                    while (v62);
                    uint64_t v61 = (char *)v103;
                  }
                  if (v61 != (char *)v104) {
                    free(v61);
                  }
                  if (!(_BYTE)v76)
                  {
                    unsigned int v64 = v77;
                    unint64_t v77 = 0;
                    if (v64) {
                      (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                    }
                  }
                  if (!(_BYTE)v79)
                  {
                    uint64_t v65 = v80;
                    unint64_t v80 = 0;
                    if (v65) {
                      (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                    }
                  }
                  unint64_t v46 = v85;
                }
                if (v46)
                {
                  if (!(_BYTE)v82)
                  {
                    long long v66 = v83;
                    unint64_t v83 = 0;
                    if (v66) {
                      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                    }
                  }
                }
                if (BYTE8(v102))
                {
                  if (!(_BYTE)v101)
                  {
                    long long v67 = *((void *)&v101 + 1);
                    *((void *)&v101 + 1) = 0;
                    if (v67) {
                      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                    }
                  }
                }
                goto LABEL_81;
              }
            }
          }
          uint64_t v30 = 0;
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v103 = 0uLL;
      }
    }
    else
    {
      uint64_t v103 = 0uLL;
    }
    return 0;
  }
  *(void *)&uint64_t v103 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  unint64_t ZeroAttr = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v103, (mlir::MLIRContext *)(v8 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12))
  {
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 8);
  }
LABEL_7:
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  uint64_t v15 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v15;
  unint64_t v16 = ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v15) = v16;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t getI1SameShape(void *a1)
{
  unint64_t v10 = a1;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v2 = mlir::IntegerType::get(Context, 1u, 0);
  unint64_t v3 = v10;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    if (v3)
    {
      LOBYTE(v6) = 0;
      char v7 = 0;
      return mlir::ShapedType::cloneWith((uint64_t *)&v8, &v6, v2);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  if (*(_UNKNOWN **)(*v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return mlir::UnrankedTensorType::get(v2);
  }
  else {
    return v2;
  }
}

uint64_t calculateUnsignedOverflow@<X0>(const llvm::APInt *a1@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::APInt::compare(a1, a2);
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)a3 = result >> 31;
  return result;
}

void mlir::arith::AddUIExtendedOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  unint64_t v39 = "arith.addi";
  unint64_t v40 = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.addui_extended", 20, v38, a2, &v39, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC999368;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    char v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AddUIExtendedToAddI]";
  unint64_t v40 = 92;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  int v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  unsigned int v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  char v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)char v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  unint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    int v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      int v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)int v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      char v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)char v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      char v7 = (char *)a1[1];
      int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::SubIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56))
  {
    *(void *)&long long v91 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    return (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v91, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v6) {
    goto LABEL_13;
  }
  DWORD2(v91) = 1;
  *(void *)&long long v91 = 0;
  *(void *)&long long v89 = &v91;
  int v7 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v89, v6);
  int v8 = DWORD2(v91);
  if (!v7)
  {
    BOOL v9 = 0;
    if (DWORD2(v91) < 0x41) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (DWORD2(v91) >= 0x41)
  {
    if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v91) >= 0x41)
    {
      BOOL v9 = 0;
      int v11 = (void *)v91;
      if (!(void)v91) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    BOOL v9 = *(void *)v91 == 0;
LABEL_8:
    int v11 = (void *)v91;
    if (!(void)v91) {
      goto LABEL_10;
    }
LABEL_9:
    operator delete[](v11);
    goto LABEL_10;
  }
  BOOL v9 = (void)v91 == 0;
LABEL_10:
  uint64_t v12 = *a1;
  if (v9) {
    return *(void *)(*(void *)(v12 + 72) + 24) | 4;
  }
  uint64_t v4 = *(void *)(*(void *)(v12 + 72) + 24);
LABEL_13:
  *(void *)&long long v91 = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v91);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
  {
    uint64_t v19 = *(void *)(*(void *)(*a1 + 72) + 56);
    uint64_t v20 = *(void *)(DefiningOp + 72);
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = *(void *)(v20 + 24);
    if (v19 == v21) {
      return v22 | 4;
    }
    if (v19 == v22) {
      return v21 | 4;
    }
  }
  unsigned int v14 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v14;
  if (*v14
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v16 = *v14;
  }
  else
  {
    uint64_t v16 = v14[1];
    if (!v16 || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v91 = canMapOperands;
          *((void *)&v91 + 1) = v17;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v91 = 0uLL;
        }
      }
      else
      {
        long long v91 = 0uLL;
      }
      uint64_t v16 = v14[1];
      if (v16)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8);
          *(void *)&long long v91 = v16;
          *((void *)&v91 + 1) = v18;
          uint64_t v23 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
          uint64_t v16 = 0;
          if (canMapOperands && v23 && canMapOperands == v23)
          {
            uint64_t v24 = *v14;
            if (*v14
              && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v16 = *v14;
            }
            else
            {
              unint64_t v25 = (void *)v14[1];
              if (v25)
              {
                uint64_t v26 = *(void **)(*(void *)v25 + 136);
                if (v26 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v16 = v14[1];
                }
                else {
                  uint64_t v16 = 0;
                }
                if (!v24 || v26 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v16 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v26 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v72 = *v14;
                  uint64_t v69 = v25;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69))
                  {
                    mlir::IntegerAttr::getValue(&v72, (llvm::APInt *)&v78);
                    mlir::IntegerAttr::getValue(&v69, (llvm::APInt *)&__p);
                    int v28 = v79;
                    DWORD2(v89) = v79;
                    if (v79 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v78);
                      int v28 = DWORD2(v89);
                      int v29 = (void *)v89;
                    }
                    else
                    {
                      int v29 = v78;
                      *(void *)&long long v89 = v78;
                    }
                    DWORD2(v91) = v28;
                    *(void *)&long long v91 = v29;
                    DWORD2(v89) = 0;
                    llvm::APInt::operator-=((uint64_t)&v91, (void **)&__p);
                    LOBYTE(v92[0]) = 1;
                    if (DWORD2(v89) >= 0x41 && (void)v89) {
                      operator delete[]((void *)v89);
                    }
                    if (v76 >= 0x41 && __p) {
                      operator delete[](__p);
                    }
                    if (v79 >= 0x41 && v78) {
                      operator delete[](v78);
                    }
                    uint64_t v16 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v91);
                    if (!LOBYTE(v92[0])) {
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v14)) {
                    uint64_t v30 = v24;
                  }
                  else {
                    uint64_t v30 = 0;
                  }
                  *(void *)&long long v91 = v30;
                  if (v30
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91)
                    && ((uint64_t v31 = v14[1], !mlir::DenseElementsAttr::classof(v31)) ? (v32 = 0) : (v32 = v31),
                        (*(void *)&long long v91 = v32) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91)))
                  {
                    long long v33 = (void *)v14[1];
                    uint64_t v72 = *v14;
                    uint64_t v69 = v33;
                    uint64_t v34 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
                    if (v34 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v72, (uint64_t)&v91);
                      long long v89 = v91;
                      long long v90 = v92[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v78);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v69, (uint64_t)&v91);
                      long long v89 = v91;
                      long long v90 = v92[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&__p);
                      int v35 = v79;
                      DWORD2(v89) = v79;
                      if (v79 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v78);
                        int v35 = DWORD2(v89);
                        uint64_t v36 = (void *)v89;
                      }
                      else
                      {
                        uint64_t v36 = v78;
                        *(void *)&long long v89 = v78;
                      }
                      DWORD2(v91) = v35;
                      *(void *)&long long v91 = v36;
                      DWORD2(v89) = 0;
                      llvm::APInt::operator-=((uint64_t)&v91, (void **)&__p);
                      LOBYTE(v92[0]) = 1;
                      if (DWORD2(v89) >= 0x41 && (void)v89) {
                        operator delete[]((void *)v89);
                      }
                      if (v76 >= 0x41 && __p) {
                        operator delete[](__p);
                      }
                      if (v79 >= 0x41 && v78) {
                        operator delete[](v78);
                      }
                      uint64_t v64 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v64, (llvm::APInt *)&v91, 1);
                      if (!LOBYTE(v92[0])) {
                        return v16 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_83:
                      if (DWORD2(v91) >= 0x41)
                      {
                        if ((void)v91) {
                          operator delete[]((void *)v91);
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v14 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v14[1] + 8))
                  }
                  {
                    uint64_t v37 = (void *)*v14;
                    uint64_t v38 = *v14 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v37 + 8) : 0;
                    unint64_t v83 = v37;
                    uint64_t v84 = v38;
                    unint64_t v39 = (void *)v14[1];
                    uint64_t v40 = v39 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v39 + 8) : 0;
                    v82[0] = v39;
                    v82[1] = v40;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v83);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v82))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v83, (uint64_t)&v89);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v82, (uint64_t)&v78);
                      uint64_t v16 = 0;
                      int v42 = v81;
                      if (BYTE8(v90) && v81)
                      {
                        LOWORD(__p) = v89;
                        if ((_BYTE)v89) {
                          uint64_t v76 = *((void *)&v89 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v89 + 1) + 16))(&v76);
                        }
                        uint64_t v77 = v90;
                        LOWORD(v72) = (_WORD)v78;
                        if ((_BYTE)v78) {
                          uint64_t v73 = v79;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 16))(&v73);
                        }
                        uint64_t v74 = v80;
                        *(void *)&long long v91 = v92;
                        *((void *)&v91 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v83, v84);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v91, NumElements);
                        uint64_t v44 = mlir::ElementsAttr::getNumElements((uint64_t)v83, v84);
                        if (v44)
                        {
                          uint64_t v45 = v44;
                          uint64_t v46 = v77;
                          while (1)
                          {
                            if (BYTE1(__p)) {
                              uint64_t v47 = 0;
                            }
                            else {
                              uint64_t v47 = v46;
                            }
                            if ((_BYTE)__p)
                            {
                              uint64_t v48 = v76 + 16 * v47;
                              unsigned int v68 = *(_DWORD *)(v48 + 8);
                              if (v68 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const void **)v48);
                              }
                              else {
                                long long v67 = *(void **)v48;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v76 + 24))(&v67);
                            }
                            if (BYTE1(v72)) {
                              uint64_t v49 = 0;
                            }
                            else {
                              uint64_t v49 = v74;
                            }
                            if ((_BYTE)v72)
                            {
                              uint64_t v50 = v73 + 16 * v49;
                              unsigned int v66 = *(_DWORD *)(v50 + 8);
                              if (v66 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v65, (const void **)v50);
                              }
                              else {
                                uint64_t v65 = *(void **)v50;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v73 + 24))(&v65);
                            }
                            unsigned int v51 = v68;
                            unsigned int v86 = v68;
                            if (v68 > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v85, (const void **)&v67);
                              unsigned int v51 = v86;
                              unint64_t v52 = v85;
                            }
                            else
                            {
                              unint64_t v52 = v67;
                              uint64_t v85 = v67;
                            }
                            unsigned int v88 = v51;
                            uint64_t v87 = v52;
                            unsigned int v86 = 0;
                            llvm::APInt::operator-=((uint64_t)&v87, (void **)&v65);
                            unsigned int v70 = v88;
                            uint64_t v69 = v87;
                            char v71 = 1;
                            if (v86 >= 0x41 && v85) {
                              operator delete[](v85);
                            }
                            if (v66 >= 0x41 && v65) {
                              operator delete[](v65);
                            }
                            if (v68 >= 0x41 && v67) {
                              operator delete[](v67);
                            }
                            if (!v71) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v91, (unint64_t)&v69, 1);
                            unint64_t v54 = (llvm::APInt *)(v91 + 16 * DWORD2(v91));
                            unsigned int v55 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v54 + 2) = v55;
                            if (v55 > 0x40) {
                              llvm::APInt::initSlowCase(v54, (const void **)Address);
                            }
                            else {
                              *(void *)unint64_t v54 = *(void *)Address;
                            }
                            ++DWORD2(v91);
                            if (v71 && v70 >= 0x41 && v69) {
                              operator delete[](v69);
                            }
                            uint64_t v46 = ++v77;
                            ++v74;
                            if (!--v45) {
                              goto LABEL_140;
                            }
                          }
                          uint64_t v16 = 0;
                        }
                        else
                        {
LABEL_140:
                          uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v56, (llvm::APInt *)v91, DWORD2(v91));
                        }
                        uint64_t v57 = (char *)v91;
                        if (DWORD2(v91))
                        {
                          uint64_t v58 = 16 * DWORD2(v91);
                          do
                          {
                            if (*(_DWORD *)&v57[v58 - 8] >= 0x41u)
                            {
                              unint64_t v59 = *(void **)&v57[v58 - 16];
                              if (v59) {
                                operator delete[](v59);
                              }
                            }
                            v58 -= 16;
                          }
                          while (v58);
                          uint64_t v57 = (char *)v91;
                        }
                        if (v57 != (char *)v92) {
                          free(v57);
                        }
                        if (!(_BYTE)v72)
                        {
                          uint64_t v60 = v73;
                          uint64_t v73 = 0;
                          if (v60) {
                            (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
                          }
                        }
                        if (!(_BYTE)__p)
                        {
                          uint64_t v61 = v76;
                          uint64_t v76 = 0;
                          if (v61) {
                            (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
                          }
                        }
                        int v42 = v81;
                      }
                      if (v42)
                      {
                        if (!(_BYTE)v78)
                        {
                          uint64_t v62 = v79;
                          uint64_t v79 = 0;
                          if (v62) {
                            (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
                          }
                        }
                      }
                      if (BYTE8(v90))
                      {
                        if (!(_BYTE)v89)
                        {
                          uint64_t v63 = *((void *)&v89 + 1);
                          *((void *)&v89 + 1) = 0;
                          if (v63) {
                            (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
                          }
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v16 = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
          long long v91 = 0uLL;
        }
      }
      else
      {
        long long v91 = 0uLL;
      }
    }
  }
  return v16 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::SubIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF360;
  long long v244 = *(_OWORD *)&off_1E4FBF370;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)uint64_t v4 = &unk_1EC9992A8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    int v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubIRHSAddConstant]";
  *((void *)&v243 + 1) = 91;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v243 + 1);
  }
  uint64_t v11 = v243 + v10;
  unint64_t v12 = *((void *)&v243 + 1) - v10;
  if (*((void *)&v243 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v243 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  int v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)int v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_269;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_272;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      int v28 = &v7[-v27];
      v22 -= v27;
      int v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)int v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      int v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)int v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      int v7 = (char *)a1[1];
      int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF380;
  long long v244 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)uint64_t v38 = &unk_1EC999268;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubILHSAddConstant]";
  *((void *)&v243 + 1) = 91;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v243 + 1);
  }
  uint64_t v45 = v243 + v44;
  unint64_t v46 = *((void *)&v243 + 1) - v44;
  if (*((void *)&v243 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v243 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_269;
    }
    unsigned int v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    uint64_t v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    unsigned int v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_273;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v62 = &v41[-v61];
      v56 -= v61;
      uint64_t v63 = &v55[8 * v51 - 16];
      uint64_t v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)uint64_t v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)uint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  uint64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF380;
  long long v244 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)uint64_t v72 = &unk_1EC99AB78;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    uint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubIRHSSubConstantRHS]";
  *((void *)&v243 + 1) = 94;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = *((void *)&v243 + 1);
  }
  uint64_t v79 = v243 + v78;
  unint64_t v80 = *((void *)&v243 + 1) - v78;
  if (*((void *)&v243 + 1) - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = *((void *)&v243 + 1) - v78;
  }
  uint64_t v82 = v79 + v81;
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  uint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)uint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  uint64_t v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_269;
    }
    long long v89 = (char *)operator new(8 * v88);
    long long v90 = &v89[8 * v85];
    long long v91 = &v89[8 * v88];
    *(void *)long long v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    long long v89 = 0;
    long long v90 = (char *)(8 * v85);
    long long v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_274;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      long long v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)long long v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      uint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)uint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      uint64_t v75 = (char *)a1[1];
      uint64_t v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)uint64_t v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  unint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF380;
  long long v244 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)unint64_t v106 = &unk_1EC99AB38;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    unint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubIRHSSubConstantLHS]";
  *((void *)&v243 + 1) = 94;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = *((void *)&v243 + 1);
  }
  uint64_t v113 = v243 + v112;
  unint64_t v114 = *((void *)&v243 + 1) - v112;
  if (*((void *)&v243 + 1) - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = *((void *)&v243 + 1) - v112;
  }
  uint64_t v116 = v113 + v115;
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  unint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)unint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (v122)
  {
    if (v122 >> 61) {
      goto LABEL_269;
    }
    unint64_t v123 = (char *)operator new(8 * v122);
    uint64_t v124 = &v123[8 * v119];
    unint64_t v125 = &v123[8 * v122];
    *(void *)uint64_t v124 = v106;
    uint64_t v110 = (uint64_t)(v124 + 8);
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
  }
  else
  {
    unint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    unint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      unint64_t v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_275;
      }
      uint64_t v128 = (v127 >> 3) + 1;
      uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      long long v130 = &v109[-v129];
      v124 -= v129;
      uint64_t v131 = &v123[8 * v119 - 16];
      long long v132 = v109 - 16;
      uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v135 = *((_OWORD *)v132 - 1);
        long long v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)long long v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)uint64_t v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      unint64_t v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_275:
        do
        {
          uint64_t v136 = *((void *)v109 - 1);
          v109 -= 8;
          *(void *)unint64_t v109 = 0;
          *((void *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      unint64_t v109 = (char *)a1[1];
      uint64_t v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        uint64_t v139 = *((void *)v137 - 1);
        v137 -= 8;
        uint64_t v138 = v139;
        *(void *)uint64_t v137 = 0;
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
  unint64_t v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF380;
  long long v244 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)unint64_t v140 = &unk_1EC99AAF8;
  if (*((void *)v140 + 9))
  {
    unint64_t v141 = v140[22];
    if (v141 <= v140[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    unint64_t v143 = (char *)a1[2];
    unint64_t v142 = a1[3];
    if ((unint64_t)v143 < v142) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubILHSSubConstantRHS]";
  *((void *)&v243 + 1) = 94;
  unint64_t v145 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v145) {
    unint64_t v146 = v145;
  }
  else {
    unint64_t v146 = *((void *)&v243 + 1);
  }
  uint64_t v147 = v243 + v146;
  unint64_t v148 = *((void *)&v243 + 1) - v146;
  if (*((void *)&v243 + 1) - v146 >= 0x12) {
    uint64_t v149 = 18;
  }
  else {
    uint64_t v149 = *((void *)&v243 + 1) - v146;
  }
  uint64_t v150 = v147 + v149;
  unint64_t v151 = v148 - v149;
  if (v151 >= v151 - 1) {
    --v151;
  }
  *((void *)v140 + 8) = v150;
  *((void *)v140 + 9) = v151;
  unint64_t v141 = v140[22];
  if (v141 > v140[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v140[22] = v141;
  unint64_t v143 = (char *)a1[2];
  unint64_t v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(void *)unint64_t v143 = v140;
    uint64_t v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  uint64_t v152 = (char *)a1[1];
  uint64_t v153 = (v143 - v152) >> 3;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v155 = v142 - (void)v152;
  if (v155 >> 2 > v154) {
    unint64_t v154 = v155 >> 2;
  }
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v156 = v154;
  }
  if (v156)
  {
    if (v156 >> 61) {
      goto LABEL_269;
    }
    uint64_t v157 = (char *)operator new(8 * v156);
    uint64_t v158 = &v157[8 * v153];
    unint64_t v159 = &v157[8 * v156];
    *(void *)uint64_t v158 = v140;
    uint64_t v144 = (uint64_t)(v158 + 8);
    uint64_t v160 = (char *)(v143 - v152);
    if (v143 != v152) {
      goto LABEL_176;
    }
  }
  else
  {
    uint64_t v157 = 0;
    uint64_t v158 = (char *)(8 * v153);
    unint64_t v159 = 0;
    *(void *)(8 * v153) = v140;
    uint64_t v144 = 8 * v153 + 8;
    uint64_t v160 = (char *)(v143 - v152);
    if (v143 != v152)
    {
LABEL_176:
      unint64_t v161 = (unint64_t)(v160 - 8);
      if (v161 < 0x78
        || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
        && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
      {
        goto LABEL_276;
      }
      uint64_t v162 = (v161 >> 3) + 1;
      uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      long long v164 = &v143[-v163];
      v158 -= v163;
      uint64_t v165 = &v157[8 * v153 - 16];
      long long v166 = v143 - 16;
      uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v169 = *((_OWORD *)v166 - 1);
        long long v168 = *(_OWORD *)v166;
        *((_OWORD *)v166 - 1) = 0uLL;
        *(_OWORD *)long long v166 = 0uLL;
        *((_OWORD *)v165 - 1) = v169;
        *(_OWORD *)uint64_t v165 = v168;
        v165 -= 32;
        v166 -= 32;
        v167 -= 4;
      }
      while (v167);
      unint64_t v143 = v164;
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          uint64_t v170 = *((void *)v143 - 1);
          v143 -= 8;
          *(void *)unint64_t v143 = 0;
          *((void *)v158 - 1) = v170;
          v158 -= 8;
        }
        while (v143 != v152);
      }
      unint64_t v143 = (char *)a1[1];
      uint64_t v171 = (char *)a1[2];
      a1[1] = v158;
      a1[2] = v144;
      a1[3] = v159;
      while (v171 != v143)
      {
        uint64_t v173 = *((void *)v171 - 1);
        v171 -= 8;
        uint64_t v172 = v173;
        *(void *)uint64_t v171 = 0;
        if (v173) {
          (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
        }
      }
      goto LABEL_189;
    }
  }
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143) {
    operator delete(v143);
  }
LABEL_191:
  a1[2] = v144;
  __int16 v174 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF360;
  long long v244 = *(_OWORD *)&off_1E4FBF370;
  mlir::Pattern::Pattern((uint64_t)(v174 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)__int16 v174 = &unk_1EC99AAB8;
  if (*((void *)v174 + 9))
  {
    unint64_t v175 = v174[22];
    if (v175 <= v174[23]) {
      goto LABEL_193;
    }
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 20), v174 + 24, v175, 16);
    v174[22] = v174[22];
    uint64_t v177 = (char *)a1[2];
    unint64_t v176 = a1[3];
    if ((unint64_t)v177 < v176) {
      goto LABEL_194;
    }
    goto LABEL_205;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubILHSSubConstantLHS]";
  *((void *)&v243 + 1) = 94;
  unint64_t v179 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v179) {
    unint64_t v180 = v179;
  }
  else {
    unint64_t v180 = *((void *)&v243 + 1);
  }
  uint64_t v181 = v243 + v180;
  unint64_t v182 = *((void *)&v243 + 1) - v180;
  if (*((void *)&v243 + 1) - v180 >= 0x12) {
    uint64_t v183 = 18;
  }
  else {
    uint64_t v183 = *((void *)&v243 + 1) - v180;
  }
  uint64_t v184 = v181 + v183;
  unint64_t v185 = v182 - v183;
  if (v185 >= v185 - 1) {
    --v185;
  }
  *((void *)v174 + 8) = v184;
  *((void *)v174 + 9) = v185;
  unint64_t v175 = v174[22];
  if (v175 > v174[23]) {
    goto LABEL_204;
  }
LABEL_193:
  v174[22] = v175;
  uint64_t v177 = (char *)a1[2];
  unint64_t v176 = a1[3];
  if ((unint64_t)v177 < v176)
  {
LABEL_194:
    *(void *)uint64_t v177 = v174;
    uint64_t v178 = (uint64_t)(v177 + 8);
    goto LABEL_229;
  }
LABEL_205:
  uint64_t v186 = (char *)a1[1];
  uint64_t v187 = (v177 - v186) >> 3;
  unint64_t v188 = v187 + 1;
  if ((unint64_t)(v187 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v189 = v176 - (void)v186;
  if (v189 >> 2 > v188) {
    unint64_t v188 = v189 >> 2;
  }
  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v190 = v188;
  }
  if (v190)
  {
    if (v190 >> 61) {
      goto LABEL_269;
    }
    uint64_t v191 = (char *)operator new(8 * v190);
    v192 = &v191[8 * v187];
    unint64_t v193 = &v191[8 * v190];
    *(void *)v192 = v174;
    uint64_t v178 = (uint64_t)(v192 + 8);
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186) {
      goto LABEL_214;
    }
  }
  else
  {
    uint64_t v191 = 0;
    v192 = (char *)(8 * v187);
    unint64_t v193 = 0;
    *(void *)(8 * v187) = v174;
    uint64_t v178 = 8 * v187 + 8;
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186)
    {
LABEL_214:
      unint64_t v195 = (unint64_t)(v194 - 8);
      if (v195 < 0x78
        || &v177[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
        && &v191[v177 - v186 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v177)
      {
        goto LABEL_277;
      }
      uint64_t v196 = (v195 >> 3) + 1;
      uint64_t v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v198 = &v177[-v197];
      v192 -= v197;
      uint64_t v199 = &v191[8 * v187 - 16];
      long long v200 = v177 - 16;
      uint64_t v201 = v196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v203 = *((_OWORD *)v200 - 1);
        long long v202 = *(_OWORD *)v200;
        *((_OWORD *)v200 - 1) = 0uLL;
        *(_OWORD *)long long v200 = 0uLL;
        *((_OWORD *)v199 - 1) = v203;
        *(_OWORD *)uint64_t v199 = v202;
        v199 -= 32;
        v200 -= 32;
        v201 -= 4;
      }
      while (v201);
      uint64_t v177 = v198;
      if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_277:
        do
        {
          uint64_t v204 = *((void *)v177 - 1);
          v177 -= 8;
          *(void *)uint64_t v177 = 0;
          *((void *)v192 - 1) = v204;
          v192 -= 8;
        }
        while (v177 != v186);
      }
      uint64_t v177 = (char *)a1[1];
      uint64_t v205 = (char *)a1[2];
      a1[1] = v192;
      a1[2] = v178;
      a1[3] = v193;
      while (v205 != v177)
      {
        uint64_t v207 = *((void *)v205 - 1);
        v205 -= 8;
        uint64_t v206 = v207;
        *(void *)uint64_t v205 = 0;
        if (v207) {
          (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
        }
      }
      goto LABEL_227;
    }
  }
  a1[1] = v192;
  a1[2] = v178;
  a1[3] = v193;
LABEL_227:
  if (v177) {
    operator delete(v177);
  }
LABEL_229:
  a1[2] = v178;
  unint64_t v208 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 2);
  long long v243 = xmmword_1E4FBF380;
  long long v244 = *(_OWORD *)&off_1E4FBF390;
  mlir::Pattern::Pattern((uint64_t)(v208 + 2), (uint64_t)"arith.subi", 10, v242, a2, &v243, 2uLL);
  *(void *)unint64_t v208 = &unk_1EC998D68;
  if (*((void *)v208 + 9))
  {
    unint64_t v209 = v208[22];
    if (v209 <= v208[23]) {
      goto LABEL_231;
    }
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 20), v208 + 24, v209, 16);
    v208[22] = v208[22];
    unint64_t v211 = (char *)a1[2];
    unint64_t v210 = a1[3];
    if ((unint64_t)v211 < v210) {
      goto LABEL_232;
    }
    goto LABEL_243;
  }
  *(void *)&long long v243 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubISubILHSRHSLHS]";
  *((void *)&v243 + 1) = 90;
  unint64_t v213 = llvm::StringRef::find((uint64_t *)&v243, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v243 + 1) >= v213) {
    unint64_t v214 = v213;
  }
  else {
    unint64_t v214 = *((void *)&v243 + 1);
  }
  uint64_t v215 = v243 + v214;
  unint64_t v216 = *((void *)&v243 + 1) - v214;
  if (*((void *)&v243 + 1) - v214 >= 0x12) {
    uint64_t v217 = 18;
  }
  else {
    uint64_t v217 = *((void *)&v243 + 1) - v214;
  }
  uint64_t v218 = v215 + v217;
  unint64_t v219 = v216 - v217;
  if (v219 >= v219 - 1) {
    --v219;
  }
  *((void *)v208 + 8) = v218;
  *((void *)v208 + 9) = v219;
  unint64_t v209 = v208[22];
  if (v209 > v208[23]) {
    goto LABEL_242;
  }
LABEL_231:
  v208[22] = v209;
  unint64_t v211 = (char *)a1[2];
  unint64_t v210 = a1[3];
  if ((unint64_t)v211 < v210)
  {
LABEL_232:
    *(void *)unint64_t v211 = v208;
    uint64_t v212 = (uint64_t)(v211 + 8);
    goto LABEL_267;
  }
LABEL_243:
  uint64_t v220 = (char *)a1[1];
  uint64_t v221 = (v211 - v220) >> 3;
  unint64_t v222 = v221 + 1;
  if ((unint64_t)(v221 + 1) >> 61) {
LABEL_268:
  }
    abort();
  uint64_t v223 = v210 - (void)v220;
  if (v223 >> 2 > v222) {
    unint64_t v222 = v223 >> 2;
  }
  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v224 = v222;
  }
  if (!v224)
  {
    unint64_t v225 = 0;
    uint64_t v226 = (char *)(8 * v221);
    unint64_t v227 = 0;
    *(void *)(8 * v221) = v208;
    uint64_t v212 = 8 * v221 + 8;
    uint64_t v228 = (char *)(v211 - v220);
    if (v211 != v220) {
      goto LABEL_252;
    }
    goto LABEL_264;
  }
  if (v224 >> 61) {
LABEL_269:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unint64_t v225 = (char *)operator new(8 * v224);
  uint64_t v226 = &v225[8 * v221];
  unint64_t v227 = &v225[8 * v224];
  *(void *)uint64_t v226 = v208;
  uint64_t v212 = (uint64_t)(v226 + 8);
  uint64_t v228 = (char *)(v211 - v220);
  if (v211 != v220)
  {
LABEL_252:
    unint64_t v229 = (unint64_t)(v228 - 8);
    if (v229 < 0x78
      || &v211[-(v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v226
      && &v225[v211 - v220 - (v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
    {
      goto LABEL_278;
    }
    uint64_t v230 = (v229 >> 3) + 1;
    uint64_t v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
    long long v232 = &v211[-v231];
    v226 -= v231;
    uint64_t v233 = &v225[8 * v221 - 16];
    long long v234 = v211 - 16;
    uint64_t v235 = v230 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v237 = *((_OWORD *)v234 - 1);
      long long v236 = *(_OWORD *)v234;
      *((_OWORD *)v234 - 1) = 0uLL;
      *(_OWORD *)long long v234 = 0uLL;
      *((_OWORD *)v233 - 1) = v237;
      *(_OWORD *)uint64_t v233 = v236;
      v233 -= 32;
      v234 -= 32;
      v235 -= 4;
    }
    while (v235);
    unint64_t v211 = v232;
    if (v230 != (v230 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_278:
      do
      {
        uint64_t v238 = *((void *)v211 - 1);
        v211 -= 8;
        *(void *)unint64_t v211 = 0;
        *((void *)v226 - 1) = v238;
        v226 -= 8;
      }
      while (v211 != v220);
    }
    unint64_t v211 = (char *)a1[1];
    uint64_t v239 = (char *)a1[2];
    a1[1] = v226;
    a1[2] = v212;
    a1[3] = v227;
    while (v239 != v211)
    {
      uint64_t v241 = *((void *)v239 - 1);
      v239 -= 8;
      uint64_t v240 = v241;
      *(void *)uint64_t v239 = 0;
      if (v241) {
        (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
      }
    }
    goto LABEL_265;
  }
LABEL_264:
  a1[1] = v226;
  a1[2] = v212;
  a1[3] = v227;
LABEL_265:
  if (v211) {
    operator delete(v211);
  }
LABEL_267:
  a1[2] = v212;
}

uint64_t mlir::arith::MulIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_29;
  }
  DWORD2(v78) = 1;
  *(void *)&long long v78 = 0;
  *(void *)&long long v76 = &v78;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v76, v4);
  int v7 = DWORD2(v78);
  if (v6)
  {
    if (DWORD2(v78) < 0x41)
    {
      BOOL v8 = (void)v78 == 0;
      goto LABEL_11;
    }
    if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) > 0x40)
    {
      if ((void)v78) {
        operator delete[]((void *)v78);
      }
      goto LABEL_15;
    }
    BOOL v8 = *(void *)v78 == 0;
  }
  else
  {
    BOOL v8 = 0;
    if (DWORD2(v78) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v78)
  {
LABEL_11:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 56) | 4;
    }
    goto LABEL_15;
  }
  operator delete[]((void *)v78);
  if (v8) {
    return *(void *)(*(void *)(*(void *)a1 + 72) + 56) | 4;
  }
LABEL_15:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v10 = v3[1];
  if (v10)
  {
    DWORD2(v78) = 1;
    *(void *)&long long v78 = 0;
    *(void *)&long long v76 = &v78;
    int v11 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v76, v10);
    int v12 = DWORD2(v78);
    if (v11)
    {
      if (DWORD2(v78) < 0x41)
      {
        BOOL v13 = (void)v78 == 1;
        goto LABEL_22;
      }
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) > 0x40)
      {
        if ((void)v78) {
          operator delete[]((void *)v78);
        }
LABEL_28:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_29;
      }
      BOOL v13 = *(void *)v78 == 1;
    }
    else
    {
      BOOL v13 = 0;
      if (DWORD2(v78) < 0x41) {
        goto LABEL_22;
      }
    }
    if ((void)v78) {
      operator delete[]((void *)v78);
    }
LABEL_22:
    if (v13) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v15 = *v3;
  }
  else
  {
    uint64_t v15 = v3[1];
    if (!v15 || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v78 = canMapOperands;
          *((void *)&v78 + 1) = v16;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v78);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v78 = 0uLL;
        }
      }
      else
      {
        long long v78 = 0uLL;
      }
      uint64_t v15 = v3[1];
      if (v15)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v15 + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v15 + 8);
          *(void *)&long long v78 = v15;
          *((void *)&v78 + 1) = v17;
          uint64_t v18 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v78);
          uint64_t v15 = 0;
          if (canMapOperands && v18 && canMapOperands == v18)
          {
            uint64_t v19 = *v3;
            if (*v3
              && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v15 = *v3;
            }
            else
            {
              unint64_t v20 = (void *)v3[1];
              if (v20)
              {
                uint64_t v21 = *(void **)(*(void *)v20 + 136);
                if (v21 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v15 = v3[1];
                }
                else {
                  uint64_t v15 = 0;
                }
                if (!v19 || v21 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v15 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v21 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v61 = *v3;
                  uint64_t v58 = v20;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58))
                  {
                    mlir::IntegerAttr::getValue(&v61, (llvm::APInt *)&v67);
                    mlir::IntegerAttr::getValue(&v58, (llvm::APInt *)&__p);
                    llvm::APInt::operator*((uint64_t)&v67, (const unint64_t **)&__p, (uint64_t)&v76);
                    DWORD2(v78) = DWORD2(v76);
                    *(void *)&long long v78 = v76;
                    LOBYTE(v79[0]) = 1;
                    if (v65 >= 0x41 && __p) {
                      operator delete[](__p);
                    }
                    if (v68 >= 0x41 && v67) {
                      operator delete[](v67);
                    }
                    uint64_t v15 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v78);
                    if (!LOBYTE(v79[0])) {
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_65;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v3)) {
                    uint64_t v23 = v19;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  *(void *)&long long v78 = v23;
                  if (v23
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v78)
                    && ((uint64_t v24 = v3[1], !mlir::DenseElementsAttr::classof(v24)) ? (v25 = 0) : (v25 = v24),
                        (*(void *)&long long v78 = v25) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v78)))
                  {
                    uint64_t v26 = (void *)v3[1];
                    uint64_t v61 = *v3;
                    uint64_t v58 = v26;
                    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
                    if (v27 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v78);
                      long long v76 = v78;
                      long long v77 = v79[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v76, (llvm::APInt *)&v67);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v58, (uint64_t)&v78);
                      long long v76 = v78;
                      long long v77 = v79[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v76, (llvm::APInt *)&__p);
                      llvm::APInt::operator*((uint64_t)&v67, (const unint64_t **)&__p, (uint64_t)&v76);
                      DWORD2(v78) = DWORD2(v76);
                      *(void *)&long long v78 = v76;
                      LOBYTE(v79[0]) = 1;
                      if (v65 >= 0x41 && __p) {
                        operator delete[](__p);
                      }
                      if (v68 >= 0x41 && v67) {
                        operator delete[](v67);
                      }
                      uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v15 = mlir::DenseElementsAttr::get(canMapOperands, v28, (llvm::APInt *)&v78, 1);
                      if (!LOBYTE(v79[0])) {
                        return v15 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_65:
                      if (DWORD2(v78) >= 0x41)
                      {
                        if ((void)v78) {
                          operator delete[]((void *)v78);
                        }
                      }
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
                  }
                  {
                    int v29 = (void *)*v3;
                    uint64_t v30 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v29 + 8) : 0;
                    uint64_t v72 = v29;
                    uint64_t v73 = v30;
                    uint64_t v31 = (void *)v3[1];
                    uint64_t v32 = v31 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8) : 0;
                    v71[0] = v31;
                    v71[1] = v32;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v76);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&v67);
                      uint64_t v15 = 0;
                      int v34 = v70;
                      if (BYTE8(v77) && v70)
                      {
                        LOWORD(__p) = v76;
                        if ((_BYTE)v76) {
                          uint64_t v65 = *((void *)&v76 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v76 + 1) + 16))(&v65);
                        }
                        uint64_t v66 = v77;
                        LOWORD(v61) = (_WORD)v67;
                        if ((_BYTE)v67) {
                          uint64_t v62 = v68;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
                        }
                        uint64_t v63 = v69;
                        *(void *)&long long v78 = v79;
                        *((void *)&v78 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v78, NumElements);
                        uint64_t v36 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
                        if (v36)
                        {
                          uint64_t v37 = v36;
                          uint64_t v38 = v66;
                          while (1)
                          {
                            if (BYTE1(__p)) {
                              uint64_t v39 = 0;
                            }
                            else {
                              uint64_t v39 = v38;
                            }
                            if ((_BYTE)__p)
                            {
                              uint64_t v40 = v65 + 16 * v39;
                              unsigned int v57 = *(_DWORD *)(v40 + 8);
                              if (v57 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v40);
                              }
                              else {
                                uint64_t v56 = *(void **)v40;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v65 + 24))(&v56);
                            }
                            if (BYTE1(v61)) {
                              uint64_t v41 = 0;
                            }
                            else {
                              uint64_t v41 = v63;
                            }
                            if ((_BYTE)v61)
                            {
                              uint64_t v42 = v62 + 16 * v41;
                              unsigned int v55 = *(_DWORD *)(v42 + 8);
                              if (v55 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v42);
                              }
                              else {
                                unint64_t v54 = *(void **)v42;
                              }
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v62 + 24))(&v54);
                            }
                            llvm::APInt::operator*((uint64_t)&v56, (const unint64_t **)&v54, (uint64_t)&v74);
                            unsigned int v59 = v75;
                            uint64_t v58 = v74;
                            char v60 = 1;
                            if (v55 >= 0x41 && v54) {
                              operator delete[](v54);
                            }
                            if (v57 >= 0x41 && v56) {
                              operator delete[](v56);
                            }
                            if (!v60) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v78, (unint64_t)&v58, 1);
                            unint64_t v44 = (llvm::APInt *)(v78 + 16 * DWORD2(v78));
                            unsigned int v45 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v44 + 2) = v45;
                            if (v45 > 0x40) {
                              llvm::APInt::initSlowCase(v44, (const void **)Address);
                            }
                            else {
                              *(void *)unint64_t v44 = *(void *)Address;
                            }
                            ++DWORD2(v78);
                            if (v60 && v59 >= 0x41 && v58) {
                              operator delete[](v58);
                            }
                            uint64_t v38 = ++v66;
                            ++v63;
                            if (!--v37) {
                              goto LABEL_140;
                            }
                          }
                          uint64_t v15 = 0;
                        }
                        else
                        {
LABEL_140:
                          uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v15 = mlir::DenseElementsAttr::get(canMapOperands, v46, (llvm::APInt *)v78, DWORD2(v78));
                        }
                        uint64_t v47 = (char *)v78;
                        if (DWORD2(v78))
                        {
                          uint64_t v48 = 16 * DWORD2(v78);
                          do
                          {
                            if (*(_DWORD *)&v47[v48 - 8] >= 0x41u)
                            {
                              unint64_t v49 = *(void **)&v47[v48 - 16];
                              if (v49) {
                                operator delete[](v49);
                              }
                            }
                            v48 -= 16;
                          }
                          while (v48);
                          uint64_t v47 = (char *)v78;
                        }
                        if (v47 != (char *)v79) {
                          free(v47);
                        }
                        if (!(_BYTE)v61)
                        {
                          uint64_t v50 = v62;
                          uint64_t v62 = 0;
                          if (v50) {
                            (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                          }
                        }
                        if (!(_BYTE)__p)
                        {
                          uint64_t v51 = v65;
                          uint64_t v65 = 0;
                          if (v51) {
                            (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
                          }
                        }
                        int v34 = v70;
                      }
                      if (v34)
                      {
                        if (!(_BYTE)v67)
                        {
                          uint64_t v52 = v68;
                          uint64_t v68 = 0;
                          if (v52) {
                            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
                          }
                        }
                      }
                      if (BYTE8(v77))
                      {
                        if (!(_BYTE)v76)
                        {
                          uint64_t v53 = *((void *)&v76 + 1);
                          *((void *)&v76 + 1) = 0;
                          if (v53) {
                            (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
                          }
                        }
                      }
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v15 = 0;
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
          long long v78 = 0uLL;
        }
      }
      else
      {
        long long v78 = 0uLL;
      }
    }
  }
  return v15 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::MulIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 2);
  v39[0] = xmmword_1E4FBF3A0;
  v39[1] = *(_OWORD *)&off_1E4FBF3B0;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.muli", 10, v38, a2, v39, 2uLL);
  *(void *)uint64_t v4 = &unk_1EC998208;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    int v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&v39[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulIMulIConstant]";
  *((void *)&v39[0] + 1) = 89;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v39[0] + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v39[0] + 1);
  }
  unint64_t v11 = *(void *)&v39[0] + v10;
  unint64_t v12 = *((void *)&v39[0] + 1) - v10;
  if (*((void *)&v39[0] + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v39[0] + 1) - v10;
  }
  unint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  int v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)int v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      int v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)int v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      int v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)int v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      int v7 = (char *)a1[1];
      int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::MulSIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = v5[1];
  if (!v6)
  {
LABEL_17:
    unint64_t v14 = (void *)*v5;
    if (*v5 && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v15 = *v5;
      goto LABEL_28;
    }
    uint64_t v15 = v5[1];
    if (v15 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_28:
      uint64_t v19 = *(uint64_t **)(a2 + 40);
      uint64_t canMapOperands = (void *)*v19;
      if (*v19
        && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v21 = *v19;
        goto LABEL_162;
      }
      uint64_t v21 = v19[1];
      if (v21 && *(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
        goto LABEL_162;
      }
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v22 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v131 = canMapOperands;
          *((void *)&v131 + 1) = v22;
          uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v131);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v131 = 0uLL;
        }
      }
      else
      {
        long long v131 = 0uLL;
      }
      uint64_t v21 = v19[1];
      if (!v21)
      {
        long long v131 = 0uLL;
        goto LABEL_162;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v21 + 8))
      {
        uint64_t v21 = 0;
        long long v131 = 0uLL;
        goto LABEL_162;
      }
      uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v21 + 8);
      *(void *)&long long v131 = v21;
      *((void *)&v131 + 1) = v23;
      uint64_t v30 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v131);
      uint64_t v21 = 0;
      if (!canMapOperands || !v30 || canMapOperands != (void *)v30) {
        goto LABEL_162;
      }
      uint64_t v31 = *v19;
      if (*v19
        && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v21 = *v19;
        goto LABEL_162;
      }
      uint64_t v32 = v19[1];
      if (v32)
      {
        long long v33 = *(void **)(*(void *)v32 + 136);
        if (v33 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v21 = v19[1];
        }
        else {
          uint64_t v21 = 0;
        }
        if (!v31 || v33 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_162;
        }
        if (v33 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v118 = (void *)*v19;
          uint64_t v115 = v32;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v118);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v115))
          {
            mlir::IntegerAttr::getValue(&v118, (llvm::APInt *)&v129);
            mlir::IntegerAttr::getValue(&v115, (llvm::APInt *)&v121);
            mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v131, (llvm::APInt *)&v129, (const void **)&v121);
            if (v122 >= 0x41 && v121) {
              operator delete[](v121);
            }
            if (DWORD2(v129) >= 0x41 && (void)v129) {
              operator delete[]((void *)v129);
            }
            if (LOBYTE(v132[0]))
            {
              uint64_t v21 = mlir::IntegerAttr::get((uint64_t)canMapOperands, (llvm::APInt *)&v131);
              if (LOBYTE(v132[0]))
              {
LABEL_93:
                if (DWORD2(v131) >= 0x41 && (void)v131) {
                  operator delete[]((void *)v131);
                }
              }
LABEL_162:
              unint64_t v58 = v15 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v59 = *(unsigned int *)(a3 + 8);
              if (v59 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v59 + 1, 8);
                LODWORD(v59) = *(_DWORD *)(a3 + 8);
              }
              *(void *)(*(void *)a3 + 8 * v59) = v58;
              unsigned int v12 = *(_DWORD *)(a3 + 12);
              uint64_t v13 = (*(_DWORD *)(a3 + 8) + 1);
              *(_DWORD *)(a3 + 8) = v13;
              unint64_t v10 = v21 & 0xFFFFFFFFFFFFFFFBLL;
              goto LABEL_165;
            }
          }
        }
        else
        {
          if (mlir::DenseElementsAttr::classof(*v19)) {
            uint64_t v43 = v31;
          }
          else {
            uint64_t v43 = 0;
          }
          *(void *)&long long v131 = v43;
          if (v43
            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v131)
            && ((uint64_t v44 = v19[1], !mlir::DenseElementsAttr::classof(v44)) ? (v45 = 0) : (v45 = v44),
                (*(void *)&long long v131 = v45) != 0
             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v131)))
          {
            uint64_t v46 = (void *)v19[1];
            uint64_t v115 = *v19;
            unint64_t v112 = v46;
            uint64_t v47 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v115);
            if (v47 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v112))
            {
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v115, (uint64_t)&v131);
              long long v129 = v131;
              long long v130 = v132[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v129, (llvm::APInt *)&v121);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v112, (uint64_t)&v131);
              long long v129 = v131;
              long long v130 = v132[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v129, (llvm::APInt *)&v118);
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v131, (llvm::APInt *)&v121, (const void **)&v118);
              if (v119 >= 0x41 && v118) {
                operator delete[](v118);
              }
              if (v122 >= 0x41 && v121) {
                operator delete[](v121);
              }
              if (LOBYTE(v132[0]))
              {
                uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                uint64_t v21 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v48, (llvm::APInt *)&v131, 1);
                if (LOBYTE(v132[0])) {
                  goto LABEL_93;
                }
                goto LABEL_162;
              }
            }
          }
          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v19 + 8) {
                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v19[1] + 8))
          }
          {
            unint64_t v49 = (void *)*v19;
            uint64_t v50 = *v19 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v49 + 8) : 0;
            unint64_t v127 = v49;
            uint64_t v128 = v50;
            unsigned int v55 = (void *)v19[1];
            uint64_t v56 = v55 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v55 + 8) : 0;
            unint64_t v125 = v55;
            uint64_t v126 = v56;
            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v127);
            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v125))
            {
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v127, (uint64_t)&v129);
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v125, (uint64_t)&v121);
              uint64_t v21 = 0;
              int v60 = v124;
              if (BYTE8(v130) && v124)
              {
                LOWORD(v118) = v129;
                if ((_BYTE)v129) {
                  uint64_t v119 = *((void *)&v129 + 1);
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v129 + 1) + 16))(&v119);
                }
                uint64_t v120 = v130;
                LOWORD(v115) = (_WORD)v121;
                if ((_BYTE)v121) {
                  uint64_t v116 = v122;
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v122 + 16))(&v116);
                }
                uint64_t v117 = v123;
                *(void *)&long long v131 = v132;
                *((void *)&v131 + 1) = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v127, v128);
                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v131, NumElements);
                uint64_t v81 = mlir::ElementsAttr::getNumElements((uint64_t)v127, v128);
                if (v81)
                {
                  uint64_t v82 = v81;
                  uint64_t v83 = v120;
                  while (1)
                  {
                    if (BYTE1(v118)) {
                      uint64_t v84 = 0;
                    }
                    else {
                      uint64_t v84 = v83;
                    }
                    if ((_BYTE)v118)
                    {
                      uint64_t v85 = v119 + 16 * v84;
                      unsigned int v111 = *(_DWORD *)(v85 + 8);
                      if (v111 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v85);
                      }
                      else {
                        long long __p = *(void **)v85;
                      }
                    }
                    else
                    {
                      (*(void (**)(void **__return_ptr))(*(void *)v119 + 24))(&__p);
                    }
                    if (BYTE1(v115)) {
                      uint64_t v86 = 0;
                    }
                    else {
                      uint64_t v86 = v117;
                    }
                    if ((_BYTE)v115)
                    {
                      uint64_t v87 = v116 + 16 * v86;
                      unsigned int v109 = *(_DWORD *)(v87 + 8);
                      if (v109 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v108, (const void **)v87);
                      }
                      else {
                        unint64_t v108 = *(void **)v87;
                      }
                    }
                    else
                    {
                      (*(void (**)(void **__return_ptr))(*(void *)v116 + 24))(&v108);
                    }
                    mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v112, (llvm::APInt *)&__p, (const void **)&v108);
                    if (v109 >= 0x41 && v108) {
                      operator delete[](v108);
                    }
                    if (v111 >= 0x41 && __p) {
                      operator delete[](__p);
                    }
                    if (!v114) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v131, (unint64_t)&v112, 1);
                    long long v89 = (llvm::APInt *)(v131 + 16 * DWORD2(v131));
                    unsigned int v90 = *((_DWORD *)Address + 2);
                    *((_DWORD *)v89 + 2) = v90;
                    if (v90 > 0x40) {
                      llvm::APInt::initSlowCase(v89, (const void **)Address);
                    }
                    else {
                      *(void *)long long v89 = *(void *)Address;
                    }
                    ++DWORD2(v131);
                    if (v114 && v113 >= 0x41 && v112) {
                      operator delete[](v112);
                    }
                    uint64_t v83 = ++v120;
                    ++v117;
                    if (!--v82) {
                      goto LABEL_273;
                    }
                  }
                  uint64_t v21 = 0;
                }
                else
                {
LABEL_273:
                  uint64_t v91 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v21 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v91, (llvm::APInt *)v131, DWORD2(v131));
                }
                uint64_t v92 = (char *)v131;
                if (DWORD2(v131))
                {
                  uint64_t v93 = 16 * DWORD2(v131);
                  do
                  {
                    if (*(_DWORD *)&v92[v93 - 8] >= 0x41u)
                    {
                      uint64_t v94 = *(void **)&v92[v93 - 16];
                      if (v94) {
                        operator delete[](v94);
                      }
                    }
                    v93 -= 16;
                  }
                  while (v93);
                  uint64_t v92 = (char *)v131;
                }
                if (v92 != (char *)v132) {
                  free(v92);
                }
                if (!(_BYTE)v115)
                {
                  uint64_t v95 = v116;
                  uint64_t v116 = 0;
                  if (v95) {
                    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
                  }
                }
                if (!(_BYTE)v118)
                {
                  uint64_t v96 = v119;
                  uint64_t v119 = 0;
                  if (v96) {
                    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
                  }
                }
                int v60 = v124;
              }
              if (v60)
              {
                if (!(_BYTE)v121)
                {
                  uint64_t v97 = v122;
                  uint64_t v122 = 0;
                  if (v97) {
                    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
                  }
                }
              }
              if (BYTE8(v130))
              {
                if (!(_BYTE)v129)
                {
                  uint64_t v98 = *((void *)&v129 + 1);
                  *((void *)&v129 + 1) = 0;
                  if (v98) {
                    (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
                  }
                }
              }
              goto LABEL_162;
            }
          }
        }
      }
      uint64_t v21 = 0;
      goto LABEL_162;
    }
    if (v14)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
      {
        uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
        *(void *)&long long v131 = v14;
        *((void *)&v131 + 1) = v16;
        unint64_t v14 = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v131);
      }
      else
      {
        unint64_t v14 = 0;
        long long v131 = 0uLL;
      }
    }
    else
    {
      long long v131 = 0uLL;
    }
    uint64_t v17 = (void *)v5[1];
    if (v17)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v17 + 8))
      {
        uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v17 + 8);
        *(void *)&long long v131 = v17;
        *((void *)&v131 + 1) = v18;
        uint64_t v24 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v131);
        uint64_t result = 0;
        if (!v14 || !v24 || v14 != (void *)v24) {
          return result;
        }
        uint64_t v15 = *v5;
        if (*v5
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_28;
        }
        uint64_t v26 = (void *)v5[1];
        if (v26)
        {
          uint64_t v27 = *(void **)(*(void *)v26 + 136);
          if (v27 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v28 = v5[1];
          }
          else {
            uint64_t v28 = 0;
          }
          if (!v15 || v27 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_150;
          }
          if (v27 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v121 = (void *)*v5;
            uint64_t v118 = v26;
            uint64_t v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
            if (v29 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v118))
            {
              mlir::IntegerAttr::getValue(&v121, (llvm::APInt *)&v125);
              mlir::IntegerAttr::getValue(&v118, (llvm::APInt *)&__p);
              llvm::APInt::operator*((uint64_t)&v125, (const unint64_t **)&__p, (uint64_t)&v129);
              DWORD2(v131) = DWORD2(v129);
              *(void *)&long long v131 = v129;
              LOBYTE(v132[0]) = 1;
              if (v111 >= 0x41 && __p) {
                operator delete[](__p);
              }
              if (v126 >= 0x41 && v125) {
                operator delete[](v125);
              }
              uint64_t v28 = mlir::IntegerAttr::get((uint64_t)v14, (llvm::APInt *)&v131);
              if (LOBYTE(v132[0]))
              {
LABEL_63:
                if (DWORD2(v131) >= 0x41 && (void)v131) {
                  operator delete[]((void *)v131);
                }
              }
LABEL_150:
              uint64_t v15 = v28;
              if (!v28) {
                return 0;
              }
              goto LABEL_28;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v5)) {
              uint64_t v35 = v15;
            }
            else {
              uint64_t v35 = 0;
            }
            *(void *)&long long v131 = v35;
            if (v35
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v131)
              && ((uint64_t v36 = v5[1], !mlir::DenseElementsAttr::classof(v36)) ? (v37 = 0) : (v37 = v36),
                  (*(void *)&long long v131 = v37) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v131)))
            {
              __int16 v38 = (void *)v5[1];
              uint64_t v121 = (void *)*v5;
              uint64_t v118 = v38;
              uint64_t v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v121);
              if (v39 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v118))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v121, (uint64_t)&v131);
                long long v129 = v131;
                long long v130 = v132[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v129, (llvm::APInt *)&v108);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v118, (uint64_t)&v131);
                long long v129 = v131;
                long long v130 = v132[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v129, (llvm::APInt *)&v106);
                llvm::APInt::operator*((uint64_t)&v108, (const unint64_t **)&v106, (uint64_t)&v129);
                DWORD2(v131) = DWORD2(v129);
                *(void *)&long long v131 = v129;
                LOBYTE(v132[0]) = 1;
                if (v107 >= 0x41 && v106) {
                  operator delete[](v106);
                }
                if (v109 >= 0x41 && v108) {
                  operator delete[](v108);
                }
                uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
                uint64_t v28 = mlir::DenseElementsAttr::get((uint64_t)v14, v40, (llvm::APInt *)&v131, 1);
                if (LOBYTE(v132[0])) {
                  goto LABEL_63;
                }
                goto LABEL_150;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
              {
                return 0;
              }
              uint64_t v41 = (void *)*v5;
              if (*v5) {
                uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v104 = v41;
              uint64_t v105 = v42;
              uint64_t v51 = (void *)v5[1];
              if (v51) {
                uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v51 + 8);
              }
              else {
                uint64_t v52 = 0;
              }
              v103[0] = v51;
              v103[1] = v52;
              uint64_t v53 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v104);
              if (v53 == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v103))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v104, (uint64_t)&v129);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v103, (uint64_t)&v121);
                uint64_t v28 = 0;
                int v54 = v124;
                if (BYTE8(v130) && v124)
                {
                  LOWORD(v118) = v129;
                  if ((_BYTE)v129) {
                    uint64_t v119 = *((void *)&v129 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v129 + 1) + 16))(&v119);
                  }
                  uint64_t v120 = v130;
                  LOWORD(v115) = (_WORD)v121;
                  if ((_BYTE)v121) {
                    uint64_t v116 = v122;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v122 + 16))(&v116);
                  }
                  uint64_t v117 = v123;
                  *(void *)&long long v131 = v132;
                  *((void *)&v131 + 1) = 0x400000000;
                  unint64_t v61 = mlir::ElementsAttr::getNumElements((uint64_t)v104, v105);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v131, v61);
                  uint64_t v62 = mlir::ElementsAttr::getNumElements((uint64_t)v104, v105);
                  if (v62)
                  {
                    uint64_t v63 = v62;
                    uint64_t v64 = v120;
                    while (1)
                    {
                      if (BYTE1(v118)) {
                        uint64_t v65 = 0;
                      }
                      else {
                        uint64_t v65 = v64;
                      }
                      if ((_BYTE)v118)
                      {
                        uint64_t v66 = v119 + 16 * v65;
                        unsigned int v102 = *(_DWORD *)(v66 + 8);
                        if (v102 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v101, (const void **)v66);
                        }
                        else {
                          long long v101 = *(void **)v66;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v119 + 24))(&v101);
                      }
                      if (BYTE1(v115)) {
                        uint64_t v67 = 0;
                      }
                      else {
                        uint64_t v67 = v117;
                      }
                      if ((_BYTE)v115)
                      {
                        uint64_t v68 = v116 + 16 * v67;
                        unsigned int v100 = *(_DWORD *)(v68 + 8);
                        if (v100 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v99, (const void **)v68);
                        }
                        else {
                          uint64_t v99 = *(void **)v68;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v116 + 24))(&v99);
                      }
                      llvm::APInt::operator*((uint64_t)&v101, (const unint64_t **)&v99, (uint64_t)&v127);
                      unsigned int v113 = v128;
                      unint64_t v112 = v127;
                      char v114 = 1;
                      if (v100 >= 0x41 && v99) {
                        operator delete[](v99);
                      }
                      if (v102 >= 0x41 && v101) {
                        operator delete[](v101);
                      }
                      if (!v114) {
                        break;
                      }
                      uint64_t v69 = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v131, (unint64_t)&v112, 1);
                      unsigned __int8 v70 = (llvm::APInt *)(v131 + 16 * DWORD2(v131));
                      unsigned int v71 = *((_DWORD *)v69 + 2);
                      *((_DWORD *)v70 + 2) = v71;
                      if (v71 > 0x40) {
                        llvm::APInt::initSlowCase(v70, (const void **)v69);
                      }
                      else {
                        *(void *)unsigned __int8 v70 = *(void *)v69;
                      }
                      ++DWORD2(v131);
                      if (v114 && v113 >= 0x41 && v112) {
                        operator delete[](v112);
                      }
                      uint64_t v64 = ++v120;
                      ++v117;
                      if (!--v63) {
                        goto LABEL_210;
                      }
                    }
                    uint64_t v28 = 0;
                  }
                  else
                  {
LABEL_210:
                    uint64_t v72 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
                    uint64_t v28 = mlir::DenseElementsAttr::get((uint64_t)v14, v72, (llvm::APInt *)v131, DWORD2(v131));
                  }
                  uint64_t v73 = (char *)v131;
                  if (DWORD2(v131))
                  {
                    uint64_t v74 = 16 * DWORD2(v131);
                    do
                    {
                      if (*(_DWORD *)&v73[v74 - 8] >= 0x41u)
                      {
                        unsigned int v75 = *(void **)&v73[v74 - 16];
                        if (v75) {
                          operator delete[](v75);
                        }
                      }
                      v74 -= 16;
                    }
                    while (v74);
                    uint64_t v73 = (char *)v131;
                  }
                  if (v73 != (char *)v132) {
                    free(v73);
                  }
                  if (!(_BYTE)v115)
                  {
                    uint64_t v76 = v116;
                    uint64_t v116 = 0;
                    if (v76) {
                      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
                    }
                  }
                  if (!(_BYTE)v118)
                  {
                    uint64_t v77 = v119;
                    uint64_t v119 = 0;
                    if (v77) {
                      (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
                    }
                  }
                  int v54 = v124;
                }
                if (v54)
                {
                  if (!(_BYTE)v121)
                  {
                    uint64_t v78 = v122;
                    uint64_t v122 = 0;
                    if (v78) {
                      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
                    }
                  }
                }
                if (BYTE8(v130))
                {
                  if (!(_BYTE)v129)
                  {
                    uint64_t v79 = *((void *)&v129 + 1);
                    *((void *)&v129 + 1) = 0;
                    if (v79) {
                      (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
                    }
                  }
                }
                goto LABEL_150;
              }
            }
          }
          uint64_t v28 = 0;
          goto LABEL_150;
        }
      }
      else
      {
        long long v131 = 0uLL;
      }
    }
    else
    {
      long long v131 = 0uLL;
    }
    return 0;
  }
  DWORD2(v131) = 1;
  *(void *)&long long v131 = 0;
  *(void *)&long long v129 = &v131;
  int v7 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v129, v6);
  int v8 = DWORD2(v131);
  if (v7)
  {
    if (DWORD2(v131) < 0x41)
    {
      BOOL v9 = (void)v131 == 0;
      goto LABEL_8;
    }
    if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v131) > 0x40)
    {
      if ((void)v131) {
        operator delete[]((void *)v131);
      }
      goto LABEL_16;
    }
    BOOL v9 = *(void *)v131 == 0;
  }
  else
  {
    BOOL v9 = 0;
    if (DWORD2(v131) < 0x41) {
      goto LABEL_8;
    }
  }
  if ((void)v131) {
    operator delete[]((void *)v131);
  }
LABEL_8:
  if (!v9)
  {
LABEL_16:
    unint64_t v5 = *(uint64_t **)(a2 + 40);
    goto LABEL_17;
  }
  unint64_t v10 = *(void *)(*(void *)(a2 + 40) + 8) & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  uint64_t v13 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v13;
LABEL_165:
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v13) = v10;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

void mlir::arith::MulSIExtendedOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  *(void *)&v73[0] = "arith.muli";
  *((void *)&v73[0] + 1) = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.mulsi_extended", 20, v72, a2, v73, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC999FB0;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    int v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&v73[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulSIExtendedToMulI]";
  *((void *)&v73[0] + 1) = 92;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73[0] + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v73[0] + 1);
  }
  unint64_t v11 = *(void *)&v73[0] + v10;
  unint64_t v12 = *((void *)&v73[0] + 1) - v10;
  if (*((void *)&v73[0] + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v73[0] + 1) - v10;
  }
  unint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  int v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)int v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      int v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)int v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      int v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  __int16 v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  v73[0] = xmmword_1E4FBF3C0;
  v73[1] = *(_OWORD *)&off_1E4FBF3D0;
  void v73[2] = xmmword_1E4FBF3E0;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.mulsi_extended", 20, v72, a2, v73, 3uLL);
  *(void *)__int16 v38 = &unk_1EC999F70;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&v73[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulSIExtendedRHSOne]";
  *((void *)&v73[0] + 1) = 92;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73[0] + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v73[0] + 1);
  }
  unint64_t v45 = *(void *)&v73[0] + v44;
  unint64_t v46 = *((void *)&v73[0] + 1) - v44;
  if (*((void *)&v73[0] + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v73[0] + 1) - v44;
  }
  unint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    unsigned int v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    unsigned int v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    unint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unsigned int v55 = (char *)operator new(8 * v54);
  uint64_t v56 = &v55[8 * v51];
  unsigned int v57 = &v55[8 * v54];
  *(void *)uint64_t v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  unint64_t v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    uint64_t v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)uint64_t v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    uint64_t v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)uint64_t v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    uint64_t v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::arith::MulUIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = v5[1];
  if (!v6) {
    goto LABEL_31;
  }
  DWORD2(v139) = 1;
  *(void *)&long long v139 = 0;
  *(void *)&long long v137 = &v139;
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v137, v6);
  int v9 = DWORD2(v139);
  if (!v8)
  {
    BOOL v10 = 0;
    if (DWORD2(v139) < 0x41) {
      goto LABEL_22;
    }
    goto LABEL_6;
  }
  if (DWORD2(v139) < 0x41)
  {
    BOOL v10 = (void)v139 == 0;
    goto LABEL_22;
  }
  if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v139) < 0x41)
  {
    BOOL v10 = *(void *)v139 == 0;
LABEL_6:
    unint64_t v11 = (void *)v139;
    if ((void)v139) {
      goto LABEL_7;
    }
LABEL_22:
    unint64_t v5 = *(uint64_t **)(a2 + 40);
    uint64_t v12 = v5[1];
    if (v10) {
      goto LABEL_23;
    }
LABEL_8:
    if (v12)
    {
      DWORD2(v139) = 1;
      *(void *)&long long v139 = 0;
      *(void *)&long long v137 = &v139;
      int v13 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v137, v12);
      int v14 = DWORD2(v139);
      if (v13)
      {
        if (DWORD2(v139) < 0x41)
        {
          BOOL v15 = (void)v139 == 1;
          goto LABEL_17;
        }
        if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v139) > 0x40)
        {
          if ((void)v139) {
            operator delete[]((void *)v139);
          }
LABEL_30:
          unint64_t v5 = *(uint64_t **)(a2 + 40);
          goto LABEL_31;
        }
        BOOL v15 = *(void *)v139 == 1;
      }
      else
      {
        BOOL v15 = 0;
        if (DWORD2(v139) < 0x41) {
          goto LABEL_17;
        }
      }
      if ((void)v139) {
        operator delete[]((void *)v139);
      }
LABEL_17:
      if (v15)
      {
        *(void *)&long long v139 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
        unint64_t ZeroAttr = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v139, (mlir::MLIRContext *)(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v17 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
        uint64_t v18 = *(unsigned int *)(a3 + 8);
        if (v18 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18 + 1, 8);
          LODWORD(v18) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v18) = v17;
        unsigned int v19 = *(_DWORD *)(a3 + 12);
        uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
        *(_DWORD *)(a3 + 8) = v20;
        unint64_t v21 = ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_179;
      }
      goto LABEL_30;
    }
LABEL_31:
    uint64_t v23 = (void *)*v5;
    if (*v5 && *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v24 = *v5;
      goto LABEL_42;
    }
    uint64_t v24 = v5[1];
    if (v24 && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_42:
      uint64_t v28 = *(uint64_t **)(a2 + 40);
      uint64_t canMapOperands = (void *)*v28;
      if (*v28
        && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v30 = *v28;
        goto LABEL_176;
      }
      uint64_t v30 = v28[1];
      if (v30 && *(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
        goto LABEL_176;
      }
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v139 = canMapOperands;
          *((void *)&v139 + 1) = v31;
          uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v139 = 0uLL;
        }
      }
      else
      {
        long long v139 = 0uLL;
      }
      uint64_t v30 = v28[1];
      if (!v30)
      {
        long long v139 = 0uLL;
        goto LABEL_176;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v30 + 8))
      {
        uint64_t v30 = 0;
        long long v139 = 0uLL;
        goto LABEL_176;
      }
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v30 + 8);
      *(void *)&long long v139 = v30;
      *((void *)&v139 + 1) = v32;
      uint64_t v39 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
      uint64_t v30 = 0;
      if (!canMapOperands || !v39 || canMapOperands != (void *)v39) {
        goto LABEL_176;
      }
      uint64_t v40 = *v28;
      if (*v28
        && *(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v30 = *v28;
        goto LABEL_176;
      }
      uint64_t v41 = v28[1];
      if (v41)
      {
        uint64_t v42 = *(void **)(*(void *)v41 + 136);
        if (v42 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v30 = v28[1];
        }
        else {
          uint64_t v30 = 0;
        }
        if (!v40 || v42 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_176;
        }
        if (v42 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v126 = (void *)*v28;
          uint64_t v123 = v41;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v126);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123))
          {
            mlir::IntegerAttr::getValue(&v126, (llvm::APInt *)&v137);
            mlir::IntegerAttr::getValue(&v123, (llvm::APInt *)&v129);
            mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v139, (llvm::APInt *)&v137, (const void **)&v129);
            if (v130 >= 0x41 && v129) {
              operator delete[](v129);
            }
            if (DWORD2(v137) >= 0x41 && (void)v137) {
              operator delete[]((void *)v137);
            }
            if (LOBYTE(v140[0]))
            {
              uint64_t v30 = mlir::IntegerAttr::get((uint64_t)canMapOperands, (llvm::APInt *)&v139);
              if (LOBYTE(v140[0]))
              {
LABEL_107:
                if (DWORD2(v139) >= 0x41 && (void)v139) {
                  operator delete[]((void *)v139);
                }
              }
LABEL_176:
              uint64_t v67 = *(unsigned int *)(a3 + 8);
              if (v67 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v67 + 1, 8);
                LODWORD(v67) = *(_DWORD *)(a3 + 8);
              }
              *(void *)(*(void *)a3 + 8 * v67) = v24 & 0xFFFFFFFFFFFFFFFBLL;
              unsigned int v19 = *(_DWORD *)(a3 + 12);
              uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
              *(_DWORD *)(a3 + 8) = v20;
              unint64_t v21 = v30 & 0xFFFFFFFFFFFFFFFBLL;
              goto LABEL_179;
            }
          }
        }
        else
        {
          if (mlir::DenseElementsAttr::classof(*v28)) {
            uint64_t v52 = v40;
          }
          else {
            uint64_t v52 = 0;
          }
          *(void *)&long long v139 = v52;
          if (v52
            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)
            && ((v53 = v28[1], !mlir::DenseElementsAttr::classof(v53)) ? (uint64_t v54 = 0) : (uint64_t v54 = v53),
                (*(void *)&long long v139 = v54) != 0
             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)))
          {
            unsigned int v55 = (void *)v28[1];
            uint64_t v123 = *v28;
            uint64_t v120 = v55;
            uint64_t v56 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v123);
            if (v56 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v120))
            {
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v123, (uint64_t)&v139);
              long long v137 = v139;
              long long v138 = v140[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v137, (llvm::APInt *)&v129);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v120, (uint64_t)&v139);
              long long v137 = v139;
              long long v138 = v140[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v137, (llvm::APInt *)&v126);
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v139, (llvm::APInt *)&v129, (const void **)&v126);
              if (v127 >= 0x41 && v126) {
                operator delete[](v126);
              }
              if (v130 >= 0x41 && v129) {
                operator delete[](v129);
              }
              if (LOBYTE(v140[0]))
              {
                uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v57, (llvm::APInt *)&v139, 1);
                if (LOBYTE(v140[0])) {
                  goto LABEL_107;
                }
                goto LABEL_176;
              }
            }
          }
          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v28 + 8) {
                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v28[1] + 8))
          }
          {
            unint64_t v58 = (void *)*v28;
            uint64_t v59 = *v28 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v58 + 8) : 0;
            long long v135 = v58;
            uint64_t v136 = v59;
            uint64_t v64 = (void *)v28[1];
            uint64_t v65 = v64 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v64 + 8) : 0;
            uint64_t v133 = v64;
            uint64_t v134 = v65;
            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v135);
            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v133))
            {
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v135, (uint64_t)&v137);
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v133, (uint64_t)&v129);
              uint64_t v30 = 0;
              int v68 = v132;
              if (BYTE8(v138) && v132)
              {
                LOWORD(v126) = v137;
                if ((_BYTE)v137) {
                  uint64_t v127 = *((void *)&v137 + 1);
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v137 + 1) + 16))(&v127);
                }
                uint64_t v128 = v138;
                LOWORD(v123) = (_WORD)v129;
                if ((_BYTE)v129) {
                  uint64_t v124 = v130;
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v130 + 16))(&v124);
                }
                uint64_t v125 = v131;
                *(void *)&long long v139 = v140;
                *((void *)&v139 + 1) = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v135, v136);
                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v139, NumElements);
                uint64_t v89 = mlir::ElementsAttr::getNumElements((uint64_t)v135, v136);
                if (v89)
                {
                  uint64_t v90 = v89;
                  uint64_t v91 = v128;
                  while (1)
                  {
                    if (BYTE1(v126)) {
                      uint64_t v92 = 0;
                    }
                    else {
                      uint64_t v92 = v91;
                    }
                    if ((_BYTE)v126)
                    {
                      uint64_t v93 = v127 + 16 * v92;
                      unsigned int v119 = *(_DWORD *)(v93 + 8);
                      if (v119 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v93);
                      }
                      else {
                        long long __p = *(void **)v93;
                      }
                    }
                    else
                    {
                      (*(void (**)(void **__return_ptr))(*(void *)v127 + 24))(&__p);
                    }
                    if (BYTE1(v123)) {
                      uint64_t v94 = 0;
                    }
                    else {
                      uint64_t v94 = v125;
                    }
                    if ((_BYTE)v123)
                    {
                      uint64_t v95 = v124 + 16 * v94;
                      unsigned int v117 = *(_DWORD *)(v95 + 8);
                      if (v117 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v116, (const void **)v95);
                      }
                      else {
                        uint64_t v116 = *(void **)v95;
                      }
                    }
                    else
                    {
                      (*(void (**)(void **__return_ptr))(*(void *)v124 + 24))(&v116);
                    }
                    mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v120, (llvm::APInt *)&__p, (const void **)&v116);
                    if (v117 >= 0x41 && v116) {
                      operator delete[](v116);
                    }
                    if (v119 >= 0x41 && __p) {
                      operator delete[](__p);
                    }
                    if (!v122) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v139, (unint64_t)&v120, 1);
                    uint64_t v97 = (llvm::APInt *)(v139 + 16 * DWORD2(v139));
                    unsigned int v98 = *((_DWORD *)Address + 2);
                    *((_DWORD *)v97 + 2) = v98;
                    if (v98 > 0x40) {
                      llvm::APInt::initSlowCase(v97, (const void **)Address);
                    }
                    else {
                      *(void *)uint64_t v97 = *(void *)Address;
                    }
                    ++DWORD2(v139);
                    if (v122 && v121 >= 0x41 && v120) {
                      operator delete[](v120);
                    }
                    uint64_t v91 = ++v128;
                    ++v125;
                    if (!--v90) {
                      goto LABEL_287;
                    }
                  }
                  uint64_t v30 = 0;
                }
                else
                {
LABEL_287:
                  uint64_t v99 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v99, (llvm::APInt *)v139, DWORD2(v139));
                }
                unsigned int v100 = (char *)v139;
                if (DWORD2(v139))
                {
                  uint64_t v101 = 16 * DWORD2(v139);
                  do
                  {
                    if (*(_DWORD *)&v100[v101 - 8] >= 0x41u)
                    {
                      unsigned int v102 = *(void **)&v100[v101 - 16];
                      if (v102) {
                        operator delete[](v102);
                      }
                    }
                    v101 -= 16;
                  }
                  while (v101);
                  unsigned int v100 = (char *)v139;
                }
                if (v100 != (char *)v140) {
                  free(v100);
                }
                if (!(_BYTE)v123)
                {
                  uint64_t v103 = v124;
                  uint64_t v124 = 0;
                  if (v103) {
                    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
                  }
                }
                if (!(_BYTE)v126)
                {
                  uint64_t v104 = v127;
                  uint64_t v127 = 0;
                  if (v104) {
                    (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
                  }
                }
                int v68 = v132;
              }
              if (v68)
              {
                if (!(_BYTE)v129)
                {
                  uint64_t v105 = v130;
                  uint64_t v130 = 0;
                  if (v105) {
                    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
                  }
                }
              }
              if (BYTE8(v138))
              {
                if (!(_BYTE)v137)
                {
                  uint64_t v106 = *((void *)&v137 + 1);
                  *((void *)&v137 + 1) = 0;
                  if (v106) {
                    (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
                  }
                }
              }
              goto LABEL_176;
            }
          }
        }
      }
      uint64_t v30 = 0;
      goto LABEL_176;
    }
    if (v23)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8))
      {
        uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8);
        *(void *)&long long v139 = v23;
        *((void *)&v139 + 1) = v25;
        uint64_t v23 = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
      }
      else
      {
        uint64_t v23 = 0;
        long long v139 = 0uLL;
      }
    }
    else
    {
      long long v139 = 0uLL;
    }
    uint64_t v26 = (void *)v5[1];
    if (v26)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v26 + 8))
      {
        uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v26 + 8);
        *(void *)&long long v139 = v26;
        *((void *)&v139 + 1) = v27;
        uint64_t v33 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
        uint64_t result = 0;
        if (!v23 || !v33 || v23 != (void *)v33) {
          return result;
        }
        uint64_t v24 = *v5;
        if (*v5
          && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_42;
        }
        uint64_t v35 = (void *)v5[1];
        if (v35)
        {
          uint64_t v36 = *(void **)(*(void *)v35 + 136);
          if (v36 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v37 = v5[1];
          }
          else {
            uint64_t v37 = 0;
          }
          if (!v24 || v36 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_164;
          }
          if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            long long v129 = (void *)*v5;
            uint64_t v126 = v35;
            uint64_t v38 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v129);
            if (v38 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v126))
            {
              mlir::IntegerAttr::getValue(&v129, (llvm::APInt *)&v133);
              mlir::IntegerAttr::getValue(&v126, (llvm::APInt *)&__p);
              llvm::APInt::operator*((uint64_t)&v133, (const unint64_t **)&__p, (uint64_t)&v137);
              DWORD2(v139) = DWORD2(v137);
              *(void *)&long long v139 = v137;
              LOBYTE(v140[0]) = 1;
              if (v119 >= 0x41 && __p) {
                operator delete[](__p);
              }
              if (v134 >= 0x41 && v133) {
                operator delete[](v133);
              }
              uint64_t v37 = mlir::IntegerAttr::get((uint64_t)v23, (llvm::APInt *)&v139);
              if (LOBYTE(v140[0]))
              {
LABEL_77:
                if (DWORD2(v139) >= 0x41 && (void)v139) {
                  operator delete[]((void *)v139);
                }
              }
LABEL_164:
              uint64_t v24 = v37;
              if (!v37) {
                return 0;
              }
              goto LABEL_42;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v5)) {
              uint64_t v44 = v24;
            }
            else {
              uint64_t v44 = 0;
            }
            *(void *)&long long v139 = v44;
            if (v44
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)
              && ((v45 = v5[1], !mlir::DenseElementsAttr::classof(v45)) ? (uint64_t v46 = 0) : (uint64_t v46 = v45),
                  (*(void *)&long long v139 = v46) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)))
            {
              uint64_t v47 = (void *)v5[1];
              long long v129 = (void *)*v5;
              uint64_t v126 = v47;
              uint64_t v48 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v129);
              if (v48 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v126))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v129, (uint64_t)&v139);
                long long v137 = v139;
                long long v138 = v140[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v137, (llvm::APInt *)&v116);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v126, (uint64_t)&v139);
                long long v137 = v139;
                long long v138 = v140[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v137, (llvm::APInt *)&v114);
                llvm::APInt::operator*((uint64_t)&v116, (const unint64_t **)&v114, (uint64_t)&v137);
                DWORD2(v139) = DWORD2(v137);
                *(void *)&long long v139 = v137;
                LOBYTE(v140[0]) = 1;
                if (v115 >= 0x41 && v114) {
                  operator delete[](v114);
                }
                if (v117 >= 0x41 && v116) {
                  operator delete[](v116);
                }
                uint64_t v49 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
                uint64_t v37 = mlir::DenseElementsAttr::get((uint64_t)v23, v49, (llvm::APInt *)&v139, 1);
                if (LOBYTE(v140[0])) {
                  goto LABEL_77;
                }
                goto LABEL_164;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
              {
                return 0;
              }
              uint64_t v50 = (void *)*v5;
              if (*v5) {
                uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v50 + 8);
              }
              else {
                uint64_t v51 = 0;
              }
              unint64_t v112 = v50;
              uint64_t v113 = v51;
              uint64_t v60 = (void *)v5[1];
              if (v60) {
                uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v60 + 8);
              }
              else {
                uint64_t v61 = 0;
              }
              v111[0] = v60;
              v111[1] = v61;
              uint64_t v62 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v112);
              if (v62 == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v111))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v112, (uint64_t)&v137);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v111, (uint64_t)&v129);
                uint64_t v37 = 0;
                int v63 = v132;
                if (BYTE8(v138) && v132)
                {
                  LOWORD(v126) = v137;
                  if ((_BYTE)v137) {
                    uint64_t v127 = *((void *)&v137 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v137 + 1) + 16))(&v127);
                  }
                  uint64_t v128 = v138;
                  LOWORD(v123) = (_WORD)v129;
                  if ((_BYTE)v129) {
                    uint64_t v124 = v130;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v130 + 16))(&v124);
                  }
                  uint64_t v125 = v131;
                  *(void *)&long long v139 = v140;
                  *((void *)&v139 + 1) = 0x400000000;
                  unint64_t v69 = mlir::ElementsAttr::getNumElements((uint64_t)v112, v113);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v139, v69);
                  uint64_t v70 = mlir::ElementsAttr::getNumElements((uint64_t)v112, v113);
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    uint64_t v72 = v128;
                    while (1)
                    {
                      if (BYTE1(v126)) {
                        uint64_t v73 = 0;
                      }
                      else {
                        uint64_t v73 = v72;
                      }
                      if ((_BYTE)v126)
                      {
                        uint64_t v74 = v127 + 16 * v73;
                        unsigned int v110 = *(_DWORD *)(v74 + 8);
                        if (v110 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v109, (const void **)v74);
                        }
                        else {
                          unsigned int v109 = *(void **)v74;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v127 + 24))(&v109);
                      }
                      if (BYTE1(v123)) {
                        uint64_t v75 = 0;
                      }
                      else {
                        uint64_t v75 = v125;
                      }
                      if ((_BYTE)v123)
                      {
                        uint64_t v76 = v124 + 16 * v75;
                        unsigned int v108 = *(_DWORD *)(v76 + 8);
                        if (v108 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v107, (const void **)v76);
                        }
                        else {
                          unsigned int v107 = *(void **)v76;
                        }
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v124 + 24))(&v107);
                      }
                      llvm::APInt::operator*((uint64_t)&v109, (const unint64_t **)&v107, (uint64_t)&v135);
                      unsigned int v121 = v136;
                      uint64_t v120 = v135;
                      char v122 = 1;
                      if (v108 >= 0x41 && v107) {
                        operator delete[](v107);
                      }
                      if (v110 >= 0x41 && v109) {
                        operator delete[](v109);
                      }
                      if (!v122) {
                        break;
                      }
                      uint64_t v77 = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v139, (unint64_t)&v120, 1);
                      uint64_t v78 = (llvm::APInt *)(v139 + 16 * DWORD2(v139));
                      unsigned int v79 = *((_DWORD *)v77 + 2);
                      *((_DWORD *)v78 + 2) = v79;
                      if (v79 > 0x40) {
                        llvm::APInt::initSlowCase(v78, (const void **)v77);
                      }
                      else {
                        *(void *)uint64_t v78 = *(void *)v77;
                      }
                      ++DWORD2(v139);
                      if (v122 && v121 >= 0x41 && v120) {
                        operator delete[](v120);
                      }
                      uint64_t v72 = ++v128;
                      ++v125;
                      if (!--v71) {
                        goto LABEL_224;
                      }
                    }
                    uint64_t v37 = 0;
                  }
                  else
                  {
LABEL_224:
                    uint64_t v80 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
                    uint64_t v37 = mlir::DenseElementsAttr::get((uint64_t)v23, v80, (llvm::APInt *)v139, DWORD2(v139));
                  }
                  uint64_t v81 = (char *)v139;
                  if (DWORD2(v139))
                  {
                    uint64_t v82 = 16 * DWORD2(v139);
                    do
                    {
                      if (*(_DWORD *)&v81[v82 - 8] >= 0x41u)
                      {
                        uint64_t v83 = *(void **)&v81[v82 - 16];
                        if (v83) {
                          operator delete[](v83);
                        }
                      }
                      v82 -= 16;
                    }
                    while (v82);
                    uint64_t v81 = (char *)v139;
                  }
                  if (v81 != (char *)v140) {
                    free(v81);
                  }
                  if (!(_BYTE)v123)
                  {
                    uint64_t v84 = v124;
                    uint64_t v124 = 0;
                    if (v84) {
                      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
                    }
                  }
                  if (!(_BYTE)v126)
                  {
                    uint64_t v85 = v127;
                    uint64_t v127 = 0;
                    if (v85) {
                      (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
                    }
                  }
                  int v63 = v132;
                }
                if (v63)
                {
                  if (!(_BYTE)v129)
                  {
                    uint64_t v86 = v130;
                    uint64_t v130 = 0;
                    if (v86) {
                      (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
                    }
                  }
                }
                if (BYTE8(v138))
                {
                  if (!(_BYTE)v137)
                  {
                    uint64_t v87 = *((void *)&v137 + 1);
                    *((void *)&v137 + 1) = 0;
                    if (v87) {
                      (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
                    }
                  }
                }
                goto LABEL_164;
              }
            }
          }
          uint64_t v37 = 0;
          goto LABEL_164;
        }
      }
      else
      {
        long long v139 = 0uLL;
      }
    }
    else
    {
      long long v139 = 0uLL;
    }
    return 0;
  }
  BOOL v10 = 0;
  unint64_t v11 = (void *)v139;
  if (!(void)v139) {
    goto LABEL_22;
  }
LABEL_7:
  operator delete[](v11);
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  uint64_t v12 = v5[1];
  if (!v10) {
    goto LABEL_8;
  }
LABEL_23:
  unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v22 = *(unsigned int *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v22 + 1, 8);
    LODWORD(v22) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v22) = v21;
  unsigned int v19 = *(_DWORD *)(a3 + 12);
  uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
LABEL_179:
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

void mlir::arith::MulUIExtendedOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  uint64_t v39 = "arith.muli";
  unint64_t v40 = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.mului_extended", 20, v38, a2, &v39, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC999FF0;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    int v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulUIExtendedToMulI]";
  unint64_t v40 = 92;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  unint64_t v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  int v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  int v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)int v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      int v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)int v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      int v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::DivUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v88) = 1;
    *(void *)&long long v88 = 0;
    *(void *)&long long v86 = &v88;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v86, v4);
    int v7 = DWORD2(v88);
    if (v6)
    {
      if (DWORD2(v88) < 0x41)
      {
        BOOL v8 = (void)v88 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v88) > 0x40)
      {
        if ((void)v88) {
          operator delete[]((void *)v88);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v88 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v88) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v88) {
      operator delete[]((void *)v88);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v88 = canMapOperands;
      *((void *)&v88 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v88 = 0uLL;
    }
  }
  else
  {
    long long v88 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v88 = 0uLL;
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v88 = 0uLL;
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v88 = v11;
  *((void *)&v88 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v3[1];
  if (!v16)
  {
LABEL_90:
    uint64_t v11 = 0;
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v88 = v19;
    if (v19 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
    {
      uint64_t v20 = v3[1];
      uint64_t v21 = mlir::DenseElementsAttr::classof(v20) ? v20 : 0;
      *(void *)&long long v88 = v21;
      if (v21)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
        {
          uint64_t v22 = v3[1];
          uint64_t v64 = *v3;
          uint64_t v61 = v22;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v64);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61)) {
            goto LABEL_88;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v64, (uint64_t)&v88);
          long long v86 = v88;
          long long v87 = v89[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v76);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v88);
          long long v86 = v88;
          long long v87 = v89[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v74);
          LODWORD(v68) = v77;
          if (v77 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v76);
          }
          else {
            long long __p = v76;
          }
          unsigned int v52 = v75;
          if (v75 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) != v52)
            {
LABEL_176:
              llvm::APInt::udiv((const void **)&__p, (size_t)&v74, (llvm::APInt *)&v86);
              int v27 = 0;
              DWORD2(v88) = DWORD2(v86);
              *(void *)&long long v88 = v86;
              DWORD2(v86) = 0;
              LOBYTE(v89[0]) = 1;
              if (v68 >= 0x41)
              {
                if (__p) {
                  operator delete[](__p);
                }
                int v27 = 0;
              }
LABEL_182:
              if (v75 >= 0x41 && v74) {
                operator delete[](v74);
              }
              if (v77 >= 0x41 && v76) {
                operator delete[](v76);
              }
              uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
              uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v53, (llvm::APInt *)&v88, 1);
              if (LOBYTE(v89[0])) {
                goto LABEL_80;
              }
              goto LABEL_89;
            }
          }
          else if (v74)
          {
            goto LABEL_176;
          }
          DWORD2(v88) = v68;
          *(void *)&long long v88 = __p;
          int v27 = 1;
          LOBYTE(v89[0]) = 1;
          goto LABEL_182;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_90;
    }
    uint64_t v24 = (void *)*v3;
    if (*v3) {
      uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v72 = v24;
    uint64_t v73 = v25;
    uint64_t v28 = (void *)v3[1];
    if (v28) {
      uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    v71[0] = v28;
    v71[1] = v29;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71)) {
      goto LABEL_88;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v86);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&__p);
    uint64_t v11 = 0;
    int v27 = 0;
    int v31 = v70;
    if (BYTE8(v87) && v70)
    {
      LOWORD(v64) = v86;
      if ((_BYTE)v86) {
        uint64_t v65 = *((void *)&v86 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v86 + 1) + 16))(&v65);
      }
      uint64_t v66 = v87;
      LOWORD(v61) = (_WORD)__p;
      if ((_BYTE)__p) {
        uint64_t v62 = v68;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
      }
      uint64_t v63 = v69;
      *(void *)&long long v88 = v89;
      *((void *)&v88 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v88, NumElements);
      uint64_t v33 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
      if (v33)
      {
        uint64_t v34 = v33;
        int v27 = 0;
        uint64_t v35 = v66;
        while (1)
        {
          uint64_t v36 = BYTE1(v64) ? 0 : v35;
          if ((_BYTE)v64)
          {
            uint64_t v37 = v65 + 16 * v36;
            unsigned int v57 = *(_DWORD *)(v37 + 8);
            if (v57 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v37);
            }
            else {
              uint64_t v56 = *(void **)v37;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v65 + 24))(&v56);
          }
          uint64_t v38 = BYTE1(v61) ? 0 : v63;
          if ((_BYTE)v61)
          {
            uint64_t v39 = v62 + 16 * v38;
            unsigned int v55 = *(_DWORD *)(v39 + 8);
            if (v55 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v39);
            }
            else {
              uint64_t v54 = *(void **)v39;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v62 + 24))(&v54);
          }
          unsigned int v83 = v57;
          if (v57 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v82, (const void **)&v56);
          }
          else {
            uint64_t v82 = v56;
          }
          if (v27) {
            break;
          }
          unsigned int v43 = v55;
          if (v55 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v54) == v43) {
              break;
            }
          }
          else if (!v54)
          {
            break;
          }
          llvm::APInt::udiv((const void **)&v82, (size_t)&v54, (llvm::APInt *)&v84);
          int v27 = 0;
          unsigned int v59 = v85;
          unint64_t v58 = v84;
          unsigned int v85 = 0;
          char v60 = 1;
          if (v83 >= 0x41)
          {
            if (v82) {
              operator delete[](v82);
            }
            int v27 = 0;
          }
LABEL_124:
          if (v55 >= 0x41 && v54) {
            operator delete[](v54);
          }
          if (v57 >= 0x41 && v56) {
            operator delete[](v56);
          }
          if (!v60)
          {
            uint64_t v11 = 0;
            goto LABEL_149;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v88, (unint64_t)&v58, 1);
          uint64_t v41 = (llvm::APInt *)(v88 + 16 * DWORD2(v88));
          unsigned int v42 = *((_DWORD *)Address + 2);
          *((_DWORD *)v41 + 2) = v42;
          if (v42 > 0x40) {
            llvm::APInt::initSlowCase(v41, (const void **)Address);
          }
          else {
            *(void *)uint64_t v41 = *(void *)Address;
          }
          ++DWORD2(v88);
          if (v60 && v59 >= 0x41 && v58) {
            operator delete[](v58);
          }
          uint64_t v35 = ++v66;
          ++v63;
          if (!--v34) {
            goto LABEL_147;
          }
        }
        unsigned int v59 = v83;
        unint64_t v58 = v82;
        int v27 = 1;
        char v60 = 1;
        goto LABEL_124;
      }
      int v27 = 0;
LABEL_147:
      uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v44, (llvm::APInt *)v88, DWORD2(v88));
LABEL_149:
      uint64_t v45 = (char *)v88;
      if (DWORD2(v88))
      {
        uint64_t v46 = 16 * DWORD2(v88);
        do
        {
          if (*(_DWORD *)&v45[v46 - 8] >= 0x41u)
          {
            uint64_t v47 = *(void **)&v45[v46 - 16];
            if (v47) {
              operator delete[](v47);
            }
          }
          v46 -= 16;
        }
        while (v46);
        uint64_t v45 = (char *)v88;
      }
      if (v45 != (char *)v89) {
        free(v45);
      }
      if (!(_BYTE)v61)
      {
        uint64_t v48 = v62;
        uint64_t v62 = 0;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
      }
      if (!(_BYTE)v64)
      {
        uint64_t v49 = v65;
        uint64_t v65 = 0;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
      }
      int v31 = v70;
    }
    if (v31)
    {
      if (!(_BYTE)__p)
      {
        uint64_t v50 = v68;
        uint64_t v68 = 0;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
        }
      }
    }
    if (BYTE8(v87))
    {
      if (!(_BYTE)v86)
      {
        uint64_t v51 = *((void *)&v86 + 1);
        *((void *)&v86 + 1) = 0;
        if (v51) {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
      }
    }
    goto LABEL_89;
  }
  uint64_t v64 = *v3;
  uint64_t v61 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v64);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61))
  {
LABEL_88:
    int v27 = 0;
    uint64_t v11 = 0;
    goto LABEL_89;
  }
  mlir::IntegerAttr::getValue(&v64, (llvm::APInt *)&v80);
  mlir::IntegerAttr::getValue(&v61, (llvm::APInt *)&v78);
  LODWORD(v68) = v81;
  if (v81 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v80);
  }
  else {
    long long __p = v80;
  }
  unsigned int v26 = v79;
  if (v79 <= 0x40)
  {
    if (v78) {
      goto LABEL_67;
    }
LABEL_72:
    DWORD2(v88) = v68;
    *(void *)&long long v88 = __p;
    int v27 = 1;
    LOBYTE(v89[0]) = 1;
    goto LABEL_73;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) == v26) {
    goto LABEL_72;
  }
LABEL_67:
  llvm::APInt::udiv((const void **)&__p, (size_t)&v78, (llvm::APInt *)&v86);
  int v27 = 0;
  DWORD2(v88) = DWORD2(v86);
  *(void *)&long long v88 = v86;
  DWORD2(v86) = 0;
  LOBYTE(v89[0]) = 1;
  if (v68 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
    int v27 = 0;
  }
LABEL_73:
  if (v79 >= 0x41 && v78) {
    operator delete[](v78);
  }
  if (v81 >= 0x41 && v80) {
    operator delete[](v80);
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v88);
  if (LOBYTE(v89[0]))
  {
LABEL_80:
    if (DWORD2(v88) >= 0x41)
    {
      if ((void)v88) {
        operator delete[]((void *)v88);
      }
    }
  }
LABEL_89:
  if (v27) {
    goto LABEL_90;
  }
  return v11 & 0xFFFFFFFFFFFFFFFBLL;
}

mlir::Operation *mlir::arith::DivUIOp::getSpeculatability(mlir::arith::DivUIOp *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this + 72) + 56);
  uint64_t v3 = mlir::m_NonZero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  uint64_t v4 = v1;
  uint64_t result = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v4);
  if (result) {
    return (mlir::Operation *)mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v3, result);
  }
  return result;
}

unint64_t mlir::arith::DivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v80) = 1;
    *(void *)&long long v80 = 0;
    *(void *)&long long v78 = &v80;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v78, v4);
    int v7 = DWORD2(v80);
    if (v6)
    {
      if (DWORD2(v80) < 0x41)
      {
        BOOL v8 = (void)v80 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
      {
        if ((void)v80) {
          operator delete[]((void *)v80);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v80 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v80) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v80) {
      operator delete[]((void *)v80);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  BOOL v53 = 0;
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_85;
  }
  uint64_t v11 = v3[1];
  if (!v11 || *(_UNKNOWN **)(*(void *)v11 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v80 = canMapOperands;
        *((void *)&v80 + 1) = v12;
        uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v80);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v80 = 0uLL;
      }
    }
    else
    {
      long long v80 = 0uLL;
    }
    uint64_t v11 = v3[1];
    if (!v11)
    {
      long long v80 = 0uLL;
      goto LABEL_85;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
    {
      uint64_t v11 = 0;
      long long v80 = 0uLL;
      goto LABEL_85;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
    *(void *)&long long v80 = v11;
    *((void *)&v80 + 1) = v13;
    uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v80);
    uint64_t v11 = 0;
    if (canMapOperands)
    {
      if (v14 && canMapOperands == (void *)v14)
      {
        uint64_t v15 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v11 = *v3;
          goto LABEL_85;
        }
        uint64_t v16 = (void *)v3[1];
        if (!v16) {
          goto LABEL_84;
        }
        uint64_t v17 = *(void **)(*(void *)v16 + 136);
        if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v11 = v3[1];
        }
        else {
          uint64_t v11 = 0;
        }
        if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_85;
        }
        if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          unint64_t v58 = (void *)*v3;
          uint64_t v76 = v16;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76))
          {
            mlir::IntegerAttr::getValue(&v58, (llvm::APInt *)&v64);
            mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&__p);
            LODWORD(v68) = v65;
            if (v65 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const void **)&v64);
            }
            else {
              uint64_t v67 = v64;
            }
            int v26 = v62;
            if (v62 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v26)
              {
LABEL_65:
                BOOL v53 = 1;
                DWORD2(v80) = v68;
                *(void *)&long long v80 = v67;
                LOBYTE(v81[0]) = 1;
                goto LABEL_66;
              }
            }
            else if (!__p)
            {
              goto LABEL_65;
            }
            llvm::APInt::sdiv_ov((const void **)&v67, (size_t)&__p, &v53, (llvm::APInt *)&v78);
            DWORD2(v80) = DWORD2(v78);
            *(void *)&long long v80 = v78;
            DWORD2(v78) = 0;
            LOBYTE(v81[0]) = 1;
            if (v68 >= 0x41 && v67) {
              operator delete[](v67);
            }
LABEL_66:
            if (v62 >= 0x41 && __p) {
              operator delete[](__p);
            }
            if (v65 >= 0x41 && v64) {
              operator delete[](v64);
            }
            uint64_t v11 = mlir::IntegerAttr::get((uint64_t)canMapOperands, (llvm::APInt *)&v80);
            if (!LOBYTE(v81[0])) {
              goto LABEL_85;
            }
            goto LABEL_73;
          }
LABEL_84:
          uint64_t v11 = 0;
          goto LABEL_85;
        }
        if (mlir::DenseElementsAttr::classof(*v3)) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = 0;
        }
        *(void *)&long long v80 = v19;
        if (v19 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v80))
        {
          uint64_t v20 = v3[1];
          uint64_t v21 = mlir::DenseElementsAttr::classof(v20) ? v20 : 0;
          *(void *)&long long v80 = v21;
          if (v21)
          {
            if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v80))
            {
              uint64_t v22 = (void *)v3[1];
              unint64_t v58 = (void *)*v3;
              uint64_t v76 = v22;
              uint64_t v23 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
              if (v23 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76)) {
                goto LABEL_84;
              }
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v58, (uint64_t)&v80);
              long long v78 = v80;
              long long v79 = v81[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v78, (llvm::APInt *)&v64);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v80);
              long long v78 = v80;
              long long v79 = v81[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v78, (llvm::APInt *)&__p);
              LODWORD(v68) = v65;
              if (v65 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const void **)&v64);
              }
              else {
                uint64_t v67 = v64;
              }
              int v52 = v62;
              if (v62 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v52)
                {
LABEL_172:
                  BOOL v53 = 1;
                  DWORD2(v80) = v68;
                  *(void *)&long long v80 = v67;
                  LOBYTE(v81[0]) = 1;
                  goto LABEL_173;
                }
              }
              else if (!__p)
              {
                goto LABEL_172;
              }
              llvm::APInt::sdiv_ov((const void **)&v67, (size_t)&__p, &v53, (llvm::APInt *)&v78);
              DWORD2(v80) = DWORD2(v78);
              *(void *)&long long v80 = v78;
              DWORD2(v78) = 0;
              LOBYTE(v81[0]) = 1;
              if (v68 >= 0x41 && v67) {
                operator delete[](v67);
              }
LABEL_173:
              if (v62 >= 0x41 && __p) {
                operator delete[](__p);
              }
              if (v65 >= 0x41 && v64) {
                operator delete[](v64);
              }
              uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
              uint64_t v11 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v51, (llvm::APInt *)&v80, 1);
              if (!LOBYTE(v81[0])) {
                goto LABEL_85;
              }
LABEL_73:
              if (DWORD2(v80) >= 0x41 && (void)v80) {
                operator delete[]((void *)v80);
              }
              goto LABEL_85;
            }
          }
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
          || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
        {
          goto LABEL_84;
        }
        uint64_t v24 = (void *)*v3;
        uint64_t v25 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8) : 0;
        uint64_t v72 = v24;
        uint64_t v73 = v25;
        int v27 = (void *)v3[1];
        uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
        v71[0] = v27;
        v71[1] = v28;
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
        if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71)) {
          goto LABEL_84;
        }
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v78);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&v67);
        uint64_t v11 = 0;
        int v30 = v70;
        if (!BYTE8(v79) || !v70) {
          goto LABEL_163;
        }
        LOWORD(v64) = v78;
        if ((_BYTE)v78) {
          uint64_t v65 = *((void *)&v78 + 1);
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v78 + 1) + 16))(&v65);
        }
        uint64_t v66 = v79;
        LOWORD(__p) = (_WORD)v67;
        if ((_BYTE)v67) {
          uint64_t v62 = v68;
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
        }
        uint64_t v63 = v69;
        *(void *)&long long v80 = v81;
        *((void *)&v80 + 1) = 0x400000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v80, NumElements);
        uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
        if (!v32)
        {
LABEL_145:
          uint64_t v43 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get((uint64_t)canMapOperands, v43, (llvm::APInt *)v80, DWORD2(v80));
          goto LABEL_147;
        }
        uint64_t v33 = v32;
        uint64_t v34 = v66;
        while (1)
        {
          uint64_t v35 = BYTE1(v64) ? 0 : v34;
          if ((_BYTE)v64)
          {
            uint64_t v36 = v65 + 16 * v35;
            unsigned int v57 = *(_DWORD *)(v36 + 8);
            if (v57 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v36);
            }
            else {
              uint64_t v56 = *(void **)v36;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v65 + 24))(&v56);
          }
          uint64_t v37 = BYTE1(__p) ? 0 : v63;
          if ((_BYTE)__p)
          {
            uint64_t v38 = v62 + 16 * v37;
            unsigned int v55 = *(_DWORD *)(v38 + 8);
            if (v55 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v38);
            }
            else {
              uint64_t v54 = *(void **)v38;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v62 + 24))(&v54);
          }
          unsigned int v75 = v57;
          if (v57 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const void **)&v56);
          }
          else {
            uint64_t v74 = v56;
          }
          if (v53) {
            break;
          }
          unsigned int v42 = v55;
          if (v55 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v54) == v42) {
              break;
            }
          }
          else if (!v54)
          {
            break;
          }
          llvm::APInt::sdiv_ov((const void **)&v74, (size_t)&v54, &v53, (llvm::APInt *)&v76);
          unsigned int v59 = v77;
          unint64_t v58 = v76;
          unsigned int v77 = 0;
          char v60 = 1;
          if (v75 >= 0x41 && v74) {
            operator delete[](v74);
          }
LABEL_124:
          if (v55 >= 0x41 && v54) {
            operator delete[](v54);
          }
          if (v57 >= 0x41 && v56) {
            operator delete[](v56);
          }
          if (!v60)
          {
            uint64_t v11 = 0;
LABEL_147:
            uint64_t v44 = (char *)v80;
            if (DWORD2(v80))
            {
              uint64_t v45 = 16 * DWORD2(v80);
              do
              {
                if (*(_DWORD *)&v44[v45 - 8] >= 0x41u)
                {
                  uint64_t v46 = *(void **)&v44[v45 - 16];
                  if (v46) {
                    operator delete[](v46);
                  }
                }
                v45 -= 16;
              }
              while (v45);
              uint64_t v44 = (char *)v80;
            }
            if (v44 != (char *)v81) {
              free(v44);
            }
            if (!(_BYTE)__p)
            {
              uint64_t v47 = v62;
              uint64_t v62 = 0;
              if (v47) {
                (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
              }
            }
            if (!(_BYTE)v64)
            {
              uint64_t v48 = v65;
              uint64_t v65 = 0;
              if (v48) {
                (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
              }
            }
            int v30 = v70;
LABEL_163:
            if (v30)
            {
              if (!(_BYTE)v67)
              {
                uint64_t v49 = v68;
                uint64_t v68 = 0;
                if (v49) {
                  (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
                }
              }
            }
            if (BYTE8(v79))
            {
              if (!(_BYTE)v78)
              {
                uint64_t v50 = *((void *)&v78 + 1);
                *((void *)&v78 + 1) = 0;
                if (v50) {
                  (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                }
              }
            }
            goto LABEL_85;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v80, (unint64_t)&v58, 1);
          unint64_t v40 = (llvm::APInt *)(v80 + 16 * DWORD2(v80));
          unsigned int v41 = *((_DWORD *)Address + 2);
          *((_DWORD *)v40 + 2) = v41;
          if (v41 > 0x40) {
            llvm::APInt::initSlowCase(v40, (const void **)Address);
          }
          else {
            *(void *)unint64_t v40 = *(void *)Address;
          }
          ++DWORD2(v80);
          if (v60 && v59 >= 0x41 && v58) {
            operator delete[](v58);
          }
          uint64_t v34 = ++v66;
          ++v63;
          if (!--v33) {
            goto LABEL_145;
          }
        }
        BOOL v53 = 1;
        unsigned int v59 = v75;
        unint64_t v58 = v74;
        char v60 = 1;
        goto LABEL_124;
      }
    }
  }
LABEL_85:
  if (v53) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

BOOL mlir::arith::DivSIOp::getSpeculatability(mlir::arith::DivSIOp *this)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  unsigned int v16 = 1;
  uint64_t v1 = *(void *)(*(void *)(*(void *)this + 72) + 56);
  p_p = &__p;
  long long __p = 0;
  uint64_t v17 = v1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (!DefiningOp) {
    goto LABEL_27;
  }
  uint64_t v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_27;
  }
  v18[0] = v19;
  v18[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v18);
  unint64_t v4 = *(void *)v18[0] & 0xFFFFFFFFFFFFFFF8;
  if (v18[0] != v19) {
    free(v18[0]);
  }
  if (!v4
    || ((unint64_t v5 = *(void **)(*(void *)(*(void *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
         v5 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      ? (BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = v5 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v8 = 1),
        !v8))
  {
LABEL_27:
    unsigned int v10 = v16;
LABEL_28:
    BOOL v12 = 0;
    if (v10 < 0x41) {
      return v12;
    }
    goto LABEL_29;
  }
  int v9 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v4);
  unsigned int v10 = v16;
  if (!v9) {
    goto LABEL_28;
  }
  if (!v16) {
    return 0;
  }
  if (v16 > 0x40)
  {
    BOOL v12 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) != v10
       && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) != v10;
LABEL_29:
    if (__p) {
      operator delete[](__p);
    }
    return v12;
  }
  return __p != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) && __p != 0;
}

unint64_t mlir::arith::CeilDivUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          operator delete[]((void *)v74);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      operator delete[]((void *)v74);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = (void *)v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&__p);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&__p, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          operator delete[](v62);
        }
        if (v66 >= 0x41 && __p) {
          operator delete[](__p);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&__p);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = (_WORD)__p;
          if ((_BYTE)__p) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              if (BYTE1(v62)) {
                uint64_t v35 = 0;
              }
              else {
                uint64_t v35 = v34;
              }
              if ((_BYTE)v62)
              {
                uint64_t v36 = v63 + 16 * v35;
                unsigned int v55 = *(_DWORD *)(v36 + 8);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v36);
                }
                else {
                  uint64_t v54 = *(void **)v36;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              if (BYTE1(v59)) {
                uint64_t v37 = 0;
              }
              else {
                uint64_t v37 = v61;
              }
              if ((_BYTE)v59)
              {
                uint64_t v38 = v60 + 16 * v37;
                unsigned int v53 = *(_DWORD *)(v38 + 8);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)v38);
                }
                else {
                  int v52 = *(void **)v38;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                operator delete[](v52);
              }
              if (v55 >= 0x41 && v54) {
                operator delete[](v54);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              unint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const void **)Address);
              }
              else {
                *(void *)unint64_t v40 = *(void *)Address;
              }
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                operator delete[](v56);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void **)&v43[v44 - 16];
                if (v45) {
                  operator delete[](v45);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)__p)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = (void *)*v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue(&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&__p);
  if (v66 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    operator delete[]((void *)v72);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      operator delete[]((void *)v74);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::CeilDivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          operator delete[]((void *)v74);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      operator delete[]((void *)v74);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = (void *)v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&__p);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&__p, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          operator delete[](v62);
        }
        if (v66 >= 0x41 && __p) {
          operator delete[](__p);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&__p);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = (_WORD)__p;
          if ((_BYTE)__p) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              if (BYTE1(v62)) {
                uint64_t v35 = 0;
              }
              else {
                uint64_t v35 = v34;
              }
              if ((_BYTE)v62)
              {
                uint64_t v36 = v63 + 16 * v35;
                unsigned int v55 = *(_DWORD *)(v36 + 8);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v36);
                }
                else {
                  uint64_t v54 = *(void **)v36;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              if (BYTE1(v59)) {
                uint64_t v37 = 0;
              }
              else {
                uint64_t v37 = v61;
              }
              if ((_BYTE)v59)
              {
                uint64_t v38 = v60 + 16 * v37;
                unsigned int v53 = *(_DWORD *)(v38 + 8);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)v38);
                }
                else {
                  int v52 = *(void **)v38;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                operator delete[](v52);
              }
              if (v55 >= 0x41 && v54) {
                operator delete[](v54);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              unint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const void **)Address);
              }
              else {
                *(void *)unint64_t v40 = *(void *)Address;
              }
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                operator delete[](v56);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void **)&v43[v44 - 16];
                if (v45) {
                  operator delete[](v45);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)__p)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = (void *)*v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue(&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&__p);
  if (v66 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    operator delete[]((void *)v72);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      operator delete[]((void *)v74);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::FloorDivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          operator delete[]((void *)v74);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      operator delete[]((void *)v74);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = (void *)v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&__p);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&__p, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          operator delete[](v62);
        }
        if (v66 >= 0x41 && __p) {
          operator delete[](__p);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&__p);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = (_WORD)__p;
          if ((_BYTE)__p) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              if (BYTE1(v62)) {
                uint64_t v35 = 0;
              }
              else {
                uint64_t v35 = v34;
              }
              if ((_BYTE)v62)
              {
                uint64_t v36 = v63 + 16 * v35;
                unsigned int v55 = *(_DWORD *)(v36 + 8);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v36);
                }
                else {
                  uint64_t v54 = *(void **)v36;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              if (BYTE1(v59)) {
                uint64_t v37 = 0;
              }
              else {
                uint64_t v37 = v61;
              }
              if ((_BYTE)v59)
              {
                uint64_t v38 = v60 + 16 * v37;
                unsigned int v53 = *(_DWORD *)(v38 + 8);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)v38);
                }
                else {
                  int v52 = *(void **)v38;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                operator delete[](v52);
              }
              if (v55 >= 0x41 && v54) {
                operator delete[](v54);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              unint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const void **)Address);
              }
              else {
                *(void *)unint64_t v40 = *(void *)Address;
              }
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                operator delete[](v56);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void **)&v43[v44 - 16];
                if (v45) {
                  operator delete[](v45);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)__p)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = (void *)*v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue(&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&__p);
  if (v66 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    operator delete[]((void *)v72);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      operator delete[]((void *)v74);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::RemUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v88) = 1;
  *(void *)&long long v88 = 0;
  *(void *)&long long v86 = &v88;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v86, v4);
  int v7 = DWORD2(v88);
  if (!v6)
  {
    BOOL v8 = 0;
    if (DWORD2(v88) < 0x41) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (DWORD2(v88) < 0x41)
  {
    BOOL v8 = (void)v88 == 1;
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v88) <= 0x40)
  {
    BOOL v8 = *(void *)v88 == 1;
LABEL_6:
    if ((void)v88) {
      operator delete[]((void *)v88);
    }
LABEL_8:
    if (v8)
    {
      *(void *)&long long v88 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      uint64_t ZeroAttr = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v88, (mlir::MLIRContext *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_14;
  }
  if ((void)v88) {
    operator delete[]((void *)v88);
  }
LABEL_14:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t ZeroAttr = *v3;
    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t ZeroAttr = v3[1];
  if (!ZeroAttr
    || *(_UNKNOWN **)(*(void *)ZeroAttr + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v88 = canMapOperands;
        *((void *)&v88 + 1) = v11;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v88 = 0uLL;
      }
    }
    else
    {
      long long v88 = 0uLL;
    }
    uint64_t ZeroAttr = v3[1];
    if (!ZeroAttr)
    {
      long long v88 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8))
    {
      uint64_t ZeroAttr = 0;
      long long v88 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8);
    *(void *)&long long v88 = ZeroAttr;
    *((void *)&v88 + 1) = v12;
    uint64_t v13 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
    uint64_t ZeroAttr = 0;
    if (canMapOperands)
    {
      if (v13 && canMapOperands == v13)
      {
        uint64_t v14 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t ZeroAttr = *v3;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v15 = v3[1];
        if (!v15)
        {
LABEL_90:
          uint64_t ZeroAttr = 0;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v16 = *(void **)(*(void *)v15 + 136);
        uint64_t ZeroAttr = v16 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id ? v3[1] : 0;
        if (v14 && v16 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          if (v16 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v64 = *v3;
            uint64_t v61 = v15;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v64);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61))
            {
              mlir::IntegerAttr::getValue(&v64, (llvm::APInt *)&v80);
              mlir::IntegerAttr::getValue(&v61, (llvm::APInt *)&v78);
              LODWORD(v68) = v81;
              if (v81 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v80);
              }
              else {
                long long __p = v80;
              }
              unsigned int v25 = v79;
              if (v79 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) != v25)
                {
LABEL_67:
                  llvm::APInt::urem((const void **)&__p, (size_t)&v78, (llvm::APInt *)&v86);
                  int v26 = 0;
                  DWORD2(v88) = DWORD2(v86);
                  *(void *)&long long v88 = v86;
                  DWORD2(v86) = 0;
                  LOBYTE(v89[0]) = 1;
                  if (v68 >= 0x41)
                  {
                    if (__p) {
                      operator delete[](__p);
                    }
                    int v26 = 0;
                  }
LABEL_73:
                  if (v79 >= 0x41 && v78) {
                    operator delete[](v78);
                  }
                  if (v81 >= 0x41 && v80) {
                    operator delete[](v80);
                  }
                  uint64_t ZeroAttr = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v88);
                  if (LOBYTE(v89[0]))
                  {
LABEL_80:
                    if (DWORD2(v88) >= 0x41 && (void)v88) {
                      operator delete[]((void *)v88);
                    }
                  }
LABEL_89:
                  if (!v26) {
                    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  goto LABEL_90;
                }
              }
              else if (v78)
              {
                goto LABEL_67;
              }
              DWORD2(v88) = v68;
              *(void *)&long long v88 = __p;
              int v26 = 1;
              LOBYTE(v89[0]) = 1;
              goto LABEL_73;
            }
LABEL_88:
            int v26 = 0;
            uint64_t ZeroAttr = 0;
            goto LABEL_89;
          }
          if (mlir::DenseElementsAttr::classof(*v3)) {
            uint64_t v18 = v14;
          }
          else {
            uint64_t v18 = 0;
          }
          *(void *)&long long v88 = v18;
          if (v18 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
          {
            uint64_t v19 = v3[1];
            uint64_t v20 = mlir::DenseElementsAttr::classof(v19) ? v19 : 0;
            *(void *)&long long v88 = v20;
            if (v20)
            {
              if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
              {
                uint64_t v21 = v3[1];
                uint64_t v64 = *v3;
                uint64_t v61 = v21;
                uint64_t v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v64);
                if (v22 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61)) {
                  goto LABEL_88;
                }
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v64, (uint64_t)&v88);
                long long v86 = v88;
                long long v87 = v89[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v76);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v88);
                long long v86 = v88;
                long long v87 = v89[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v74);
                LODWORD(v68) = v77;
                if (v77 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v76);
                }
                else {
                  long long __p = v76;
                }
                unsigned int v52 = v75;
                if (v75 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) != v52)
                  {
LABEL_176:
                    llvm::APInt::urem((const void **)&__p, (size_t)&v74, (llvm::APInt *)&v86);
                    int v26 = 0;
                    DWORD2(v88) = DWORD2(v86);
                    *(void *)&long long v88 = v86;
                    DWORD2(v86) = 0;
                    LOBYTE(v89[0]) = 1;
                    if (v68 >= 0x41)
                    {
                      if (__p) {
                        operator delete[](__p);
                      }
                      int v26 = 0;
                    }
LABEL_182:
                    if (v75 >= 0x41 && v74) {
                      operator delete[](v74);
                    }
                    if (v77 >= 0x41 && v76) {
                      operator delete[](v76);
                    }
                    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                    uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v53, (llvm::APInt *)&v88, 1);
                    if (LOBYTE(v89[0])) {
                      goto LABEL_80;
                    }
                    goto LABEL_89;
                  }
                }
                else if (v74)
                {
                  goto LABEL_176;
                }
                DWORD2(v88) = v68;
                *(void *)&long long v88 = __p;
                int v26 = 1;
                LOBYTE(v89[0]) = 1;
                goto LABEL_182;
              }
            }
          }
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
            || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
          {
            goto LABEL_90;
          }
          uint64_t v23 = (void *)*v3;
          if (*v3) {
            uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v23 + 8);
          }
          else {
            uint64_t v24 = 0;
          }
          long long v72 = v23;
          uint64_t v73 = v24;
          int v27 = (void *)v3[1];
          if (v27) {
            uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8);
          }
          else {
            uint64_t v28 = 0;
          }
          v71[0] = v27;
          v71[1] = v28;
          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
          if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71)) {
            goto LABEL_88;
          }
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v86);
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&__p);
          uint64_t ZeroAttr = 0;
          int v26 = 0;
          int v31 = v70;
          if (BYTE8(v87) && v70)
          {
            LOWORD(v64) = v86;
            if ((_BYTE)v86) {
              uint64_t v65 = *((void *)&v86 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v86 + 1) + 16))(&v65);
            }
            uint64_t v66 = v87;
            LOWORD(v61) = (_WORD)__p;
            if ((_BYTE)__p) {
              uint64_t v62 = v68;
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
            }
            uint64_t v63 = v69;
            *(void *)&long long v88 = v89;
            *((void *)&v88 + 1) = 0x400000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v88, NumElements);
            uint64_t v33 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
            if (v33)
            {
              uint64_t v34 = v33;
              int v26 = 0;
              uint64_t v35 = v66;
              while (1)
              {
                uint64_t v36 = BYTE1(v64) ? 0 : v35;
                if ((_BYTE)v64)
                {
                  uint64_t v37 = v65 + 16 * v36;
                  unsigned int v57 = *(_DWORD *)(v37 + 8);
                  if (v57 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v37);
                  }
                  else {
                    uint64_t v56 = *(void **)v37;
                  }
                }
                else
                {
                  (*(void (**)(void **__return_ptr))(*(void *)v65 + 24))(&v56);
                }
                uint64_t v38 = BYTE1(v61) ? 0 : v63;
                if ((_BYTE)v61)
                {
                  uint64_t v39 = v62 + 16 * v38;
                  unsigned int v55 = *(_DWORD *)(v39 + 8);
                  if (v55 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v39);
                  }
                  else {
                    uint64_t v54 = *(void **)v39;
                  }
                }
                else
                {
                  (*(void (**)(void **__return_ptr))(*(void *)v62 + 24))(&v54);
                }
                unsigned int v83 = v57;
                if (v57 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v82, (const void **)&v56);
                }
                else {
                  uint64_t v82 = v56;
                }
                if (v26) {
                  break;
                }
                unsigned int v43 = v55;
                if (v55 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v54) == v43) {
                    break;
                  }
                }
                else if (!v54)
                {
                  break;
                }
                llvm::APInt::urem((const void **)&v82, (size_t)&v54, (llvm::APInt *)&v84);
                int v26 = 0;
                unsigned int v59 = v85;
                char v58 = v84;
                unsigned int v85 = 0;
                char v60 = 1;
                if (v83 >= 0x41)
                {
                  if (v82) {
                    operator delete[](v82);
                  }
                  int v26 = 0;
                }
LABEL_124:
                if (v55 >= 0x41 && v54) {
                  operator delete[](v54);
                }
                if (v57 >= 0x41 && v56) {
                  operator delete[](v56);
                }
                if (!v60)
                {
                  uint64_t ZeroAttr = 0;
                  goto LABEL_149;
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v88, (unint64_t)&v58, 1);
                unsigned int v41 = (llvm::APInt *)(v88 + 16 * DWORD2(v88));
                unsigned int v42 = *((_DWORD *)Address + 2);
                *((_DWORD *)v41 + 2) = v42;
                if (v42 > 0x40) {
                  llvm::APInt::initSlowCase(v41, (const void **)Address);
                }
                else {
                  *(void *)unsigned int v41 = *(void *)Address;
                }
                ++DWORD2(v88);
                if (v60 && v59 >= 0x41 && v58) {
                  operator delete[](v58);
                }
                uint64_t v35 = ++v66;
                ++v63;
                if (!--v34) {
                  goto LABEL_147;
                }
              }
              unsigned int v59 = v83;
              char v58 = v82;
              int v26 = 1;
              char v60 = 1;
              goto LABEL_124;
            }
            int v26 = 0;
LABEL_147:
            uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v44, (llvm::APInt *)v88, DWORD2(v88));
LABEL_149:
            uint64_t v45 = (char *)v88;
            if (DWORD2(v88))
            {
              uint64_t v46 = 16 * DWORD2(v88);
              do
              {
                if (*(_DWORD *)&v45[v46 - 8] >= 0x41u)
                {
                  uint64_t v47 = *(void **)&v45[v46 - 16];
                  if (v47) {
                    operator delete[](v47);
                  }
                }
                v46 -= 16;
              }
              while (v46);
              uint64_t v45 = (char *)v88;
            }
            if (v45 != (char *)v89) {
              free(v45);
            }
            if (!(_BYTE)v61)
            {
              uint64_t v48 = v62;
              uint64_t v62 = 0;
              if (v48) {
                (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
              }
            }
            if (!(_BYTE)v64)
            {
              uint64_t v49 = v65;
              uint64_t v65 = 0;
              if (v49) {
                (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
              }
            }
            int v31 = v70;
          }
          if (v31)
          {
            if (!(_BYTE)__p)
            {
              uint64_t v50 = v68;
              uint64_t v68 = 0;
              if (v50) {
                (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
              }
            }
          }
          if (BYTE8(v87))
          {
            if (!(_BYTE)v86)
            {
              uint64_t v51 = *((void *)&v86 + 1);
              *((void *)&v86 + 1) = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
            }
          }
          goto LABEL_89;
        }
      }
    }
  }
  return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::RemSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v88) = 1;
  *(void *)&long long v88 = 0;
  *(void *)&long long v86 = &v88;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v86, v4);
  int v7 = DWORD2(v88);
  if (!v6)
  {
    BOOL v8 = 0;
    if (DWORD2(v88) < 0x41) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (DWORD2(v88) < 0x41)
  {
    BOOL v8 = (void)v88 == 1;
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v88) <= 0x40)
  {
    BOOL v8 = *(void *)v88 == 1;
LABEL_6:
    if ((void)v88) {
      operator delete[]((void *)v88);
    }
LABEL_8:
    if (v8)
    {
      *(void *)&long long v88 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      uint64_t ZeroAttr = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v88, (mlir::MLIRContext *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_14;
  }
  if ((void)v88) {
    operator delete[]((void *)v88);
  }
LABEL_14:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t ZeroAttr = *v3;
    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t ZeroAttr = v3[1];
  if (!ZeroAttr
    || *(_UNKNOWN **)(*(void *)ZeroAttr + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v88 = canMapOperands;
        *((void *)&v88 + 1) = v11;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v88 = 0uLL;
      }
    }
    else
    {
      long long v88 = 0uLL;
    }
    uint64_t ZeroAttr = v3[1];
    if (!ZeroAttr)
    {
      long long v88 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8))
    {
      uint64_t ZeroAttr = 0;
      long long v88 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8);
    *(void *)&long long v88 = ZeroAttr;
    *((void *)&v88 + 1) = v12;
    uint64_t v13 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v88);
    uint64_t ZeroAttr = 0;
    if (canMapOperands)
    {
      if (v13 && canMapOperands == v13)
      {
        uint64_t v14 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t ZeroAttr = *v3;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v15 = v3[1];
        if (!v15)
        {
LABEL_90:
          uint64_t ZeroAttr = 0;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v16 = *(void **)(*(void *)v15 + 136);
        uint64_t ZeroAttr = v16 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id ? v3[1] : 0;
        if (v14 && v16 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          if (v16 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v64 = *v3;
            uint64_t v61 = v15;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v64);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61))
            {
              mlir::IntegerAttr::getValue(&v64, (llvm::APInt *)&v80);
              mlir::IntegerAttr::getValue(&v61, (llvm::APInt *)&v78);
              LODWORD(v68) = v81;
              if (v81 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v80);
              }
              else {
                long long __p = v80;
              }
              unsigned int v25 = v79;
              if (v79 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) != v25)
                {
LABEL_67:
                  llvm::APInt::srem((const void **)&__p, (size_t)&v78, (llvm::APInt *)&v86);
                  int v26 = 0;
                  DWORD2(v88) = DWORD2(v86);
                  *(void *)&long long v88 = v86;
                  DWORD2(v86) = 0;
                  LOBYTE(v89[0]) = 1;
                  if (v68 >= 0x41)
                  {
                    if (__p) {
                      operator delete[](__p);
                    }
                    int v26 = 0;
                  }
LABEL_73:
                  if (v79 >= 0x41 && v78) {
                    operator delete[](v78);
                  }
                  if (v81 >= 0x41 && v80) {
                    operator delete[](v80);
                  }
                  uint64_t ZeroAttr = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v88);
                  if (LOBYTE(v89[0]))
                  {
LABEL_80:
                    if (DWORD2(v88) >= 0x41 && (void)v88) {
                      operator delete[]((void *)v88);
                    }
                  }
LABEL_89:
                  if (!v26) {
                    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  goto LABEL_90;
                }
              }
              else if (v78)
              {
                goto LABEL_67;
              }
              DWORD2(v88) = v68;
              *(void *)&long long v88 = __p;
              int v26 = 1;
              LOBYTE(v89[0]) = 1;
              goto LABEL_73;
            }
LABEL_88:
            int v26 = 0;
            uint64_t ZeroAttr = 0;
            goto LABEL_89;
          }
          if (mlir::DenseElementsAttr::classof(*v3)) {
            uint64_t v18 = v14;
          }
          else {
            uint64_t v18 = 0;
          }
          *(void *)&long long v88 = v18;
          if (v18 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
          {
            uint64_t v19 = v3[1];
            uint64_t v20 = mlir::DenseElementsAttr::classof(v19) ? v19 : 0;
            *(void *)&long long v88 = v20;
            if (v20)
            {
              if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v88))
              {
                uint64_t v21 = v3[1];
                uint64_t v64 = *v3;
                uint64_t v61 = v21;
                uint64_t v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v64);
                if (v22 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61)) {
                  goto LABEL_88;
                }
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v64, (uint64_t)&v88);
                long long v86 = v88;
                long long v87 = v89[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v76);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v88);
                long long v86 = v88;
                long long v87 = v89[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v86, (llvm::APInt *)&v74);
                LODWORD(v68) = v77;
                if (v77 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v76);
                }
                else {
                  long long __p = v76;
                }
                unsigned int v52 = v75;
                if (v75 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) != v52)
                  {
LABEL_176:
                    llvm::APInt::srem((const void **)&__p, (size_t)&v74, (llvm::APInt *)&v86);
                    int v26 = 0;
                    DWORD2(v88) = DWORD2(v86);
                    *(void *)&long long v88 = v86;
                    DWORD2(v86) = 0;
                    LOBYTE(v89[0]) = 1;
                    if (v68 >= 0x41)
                    {
                      if (__p) {
                        operator delete[](__p);
                      }
                      int v26 = 0;
                    }
LABEL_182:
                    if (v75 >= 0x41 && v74) {
                      operator delete[](v74);
                    }
                    if (v77 >= 0x41 && v76) {
                      operator delete[](v76);
                    }
                    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                    uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v53, (llvm::APInt *)&v88, 1);
                    if (LOBYTE(v89[0])) {
                      goto LABEL_80;
                    }
                    goto LABEL_89;
                  }
                }
                else if (v74)
                {
                  goto LABEL_176;
                }
                DWORD2(v88) = v68;
                *(void *)&long long v88 = __p;
                int v26 = 1;
                LOBYTE(v89[0]) = 1;
                goto LABEL_182;
              }
            }
          }
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
            || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
          {
            goto LABEL_90;
          }
          uint64_t v23 = (void *)*v3;
          if (*v3) {
            uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v23 + 8);
          }
          else {
            uint64_t v24 = 0;
          }
          long long v72 = v23;
          uint64_t v73 = v24;
          int v27 = (void *)v3[1];
          if (v27) {
            uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8);
          }
          else {
            uint64_t v28 = 0;
          }
          v71[0] = v27;
          v71[1] = v28;
          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
          if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71)) {
            goto LABEL_88;
          }
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v86);
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&__p);
          uint64_t ZeroAttr = 0;
          int v26 = 0;
          int v31 = v70;
          if (BYTE8(v87) && v70)
          {
            LOWORD(v64) = v86;
            if ((_BYTE)v86) {
              uint64_t v65 = *((void *)&v86 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v86 + 1) + 16))(&v65);
            }
            uint64_t v66 = v87;
            LOWORD(v61) = (_WORD)__p;
            if ((_BYTE)__p) {
              uint64_t v62 = v68;
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
            }
            uint64_t v63 = v69;
            *(void *)&long long v88 = v89;
            *((void *)&v88 + 1) = 0x400000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v88, NumElements);
            uint64_t v33 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
            if (v33)
            {
              uint64_t v34 = v33;
              int v26 = 0;
              uint64_t v35 = v66;
              while (1)
              {
                uint64_t v36 = BYTE1(v64) ? 0 : v35;
                if ((_BYTE)v64)
                {
                  uint64_t v37 = v65 + 16 * v36;
                  unsigned int v57 = *(_DWORD *)(v37 + 8);
                  if (v57 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v37);
                  }
                  else {
                    uint64_t v56 = *(void **)v37;
                  }
                }
                else
                {
                  (*(void (**)(void **__return_ptr))(*(void *)v65 + 24))(&v56);
                }
                uint64_t v38 = BYTE1(v61) ? 0 : v63;
                if ((_BYTE)v61)
                {
                  uint64_t v39 = v62 + 16 * v38;
                  unsigned int v55 = *(_DWORD *)(v39 + 8);
                  if (v55 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)v39);
                  }
                  else {
                    uint64_t v54 = *(void **)v39;
                  }
                }
                else
                {
                  (*(void (**)(void **__return_ptr))(*(void *)v62 + 24))(&v54);
                }
                unsigned int v83 = v57;
                if (v57 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v82, (const void **)&v56);
                }
                else {
                  uint64_t v82 = v56;
                }
                if (v26) {
                  break;
                }
                unsigned int v43 = v55;
                if (v55 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v54) == v43) {
                    break;
                  }
                }
                else if (!v54)
                {
                  break;
                }
                llvm::APInt::srem((const void **)&v82, (size_t)&v54, (llvm::APInt *)&v84);
                int v26 = 0;
                unsigned int v59 = v85;
                char v58 = v84;
                unsigned int v85 = 0;
                char v60 = 1;
                if (v83 >= 0x41)
                {
                  if (v82) {
                    operator delete[](v82);
                  }
                  int v26 = 0;
                }
LABEL_124:
                if (v55 >= 0x41 && v54) {
                  operator delete[](v54);
                }
                if (v57 >= 0x41 && v56) {
                  operator delete[](v56);
                }
                if (!v60)
                {
                  uint64_t ZeroAttr = 0;
                  goto LABEL_149;
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v88, (unint64_t)&v58, 1);
                unsigned int v41 = (llvm::APInt *)(v88 + 16 * DWORD2(v88));
                unsigned int v42 = *((_DWORD *)Address + 2);
                *((_DWORD *)v41 + 2) = v42;
                if (v42 > 0x40) {
                  llvm::APInt::initSlowCase(v41, (const void **)Address);
                }
                else {
                  *(void *)unsigned int v41 = *(void *)Address;
                }
                ++DWORD2(v88);
                if (v60 && v59 >= 0x41 && v58) {
                  operator delete[](v58);
                }
                uint64_t v35 = ++v66;
                ++v63;
                if (!--v34) {
                  goto LABEL_147;
                }
              }
              unsigned int v59 = v83;
              char v58 = v82;
              int v26 = 1;
              char v60 = 1;
              goto LABEL_124;
            }
            int v26 = 0;
LABEL_147:
            uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v44, (llvm::APInt *)v88, DWORD2(v88));
LABEL_149:
            uint64_t v45 = (char *)v88;
            if (DWORD2(v88))
            {
              uint64_t v46 = 16 * DWORD2(v88);
              do
              {
                if (*(_DWORD *)&v45[v46 - 8] >= 0x41u)
                {
                  uint64_t v47 = *(void **)&v45[v46 - 16];
                  if (v47) {
                    operator delete[](v47);
                  }
                }
                v46 -= 16;
              }
              while (v46);
              uint64_t v45 = (char *)v88;
            }
            if (v45 != (char *)v89) {
              free(v45);
            }
            if (!(_BYTE)v61)
            {
              uint64_t v48 = v62;
              uint64_t v62 = 0;
              if (v48) {
                (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
              }
            }
            if (!(_BYTE)v64)
            {
              uint64_t v49 = v65;
              uint64_t v65 = 0;
              if (v49) {
                (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
              }
            }
            int v31 = v70;
          }
          if (v31)
          {
            if (!(_BYTE)__p)
            {
              uint64_t v50 = v68;
              uint64_t v68 = 0;
              if (v50) {
                (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
              }
            }
          }
          if (BYTE8(v87))
          {
            if (!(_BYTE)v86)
            {
              uint64_t v51 = *((void *)&v86 + 1);
              *((void *)&v86 + 1) = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
            }
          }
          goto LABEL_89;
        }
      }
    }
  }
  return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::AndIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4)
  {
    unsigned int v81 = 1;
    long long __p = 0;
    goto LABEL_21;
  }
  DWORD2(v108) = 1;
  *(void *)&long long v108 = 0;
  *(void *)&long long v106 = &v108;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v106, v4);
  int v6 = DWORD2(v108);
  if (v5)
  {
    if (DWORD2(v108) < 0x41)
    {
      BOOL v7 = (void)v108 == 0;
      goto LABEL_12;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v108) > 0x40)
    {
      if ((void)v108) {
        operator delete[]((void *)v108);
      }
      goto LABEL_16;
    }
    BOOL v7 = *(void *)v108 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v108) < 0x41) {
      goto LABEL_12;
    }
  }
  if (!(void)v108)
  {
LABEL_12:
    if (v7) {
      return *(void *)(*(void *)(*a1 + 72) + 56) | 4;
    }
    goto LABEL_16;
  }
  operator delete[]((void *)v108);
  if (v7) {
    return *(void *)(*(void *)(*a1 + 72) + 56) | 4;
  }
LABEL_16:
  uint64_t v9 = *(void *)(*(void *)(a2 + 40) + 8);
  unsigned int v81 = 1;
  long long __p = 0;
  *(void *)&long long v108 = &__p;
  if (v9 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v108, v9))
  {
    unsigned int v10 = v81;
    if (v81)
    {
      if (v81 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) != v10) {
          goto LABEL_21;
        }
      }
      else if (__p != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v81))
      {
        goto LABEL_21;
      }
    }
    unint64_t v8 = *(void *)(*(void *)(*a1 + 72) + 24) | 4;
    if (v81 >= 0x41) {
      goto LABEL_94;
    }
    return v8;
  }
LABEL_21:
  uint64_t v11 = *(void *)(*a1 + 72);
  uint64_t v12 = *(void *)(v11 + 56);
  *(void *)&long long v108 = *(void *)(v11 + 24);
  *((void *)&v108 + 1) = &__p;
  *(void *)&long long v106 = v12;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v106);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      uint64_t v14 = *(void *)(*(void *)(DefiningOp + 72) + 24);
      uint64_t v15 = v108;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(DefiningOp, 1u, (uint64_t *)&v108 + 1))
      {
        if (v15 == v14)
        {
          unsigned int v16 = v81;
          if (!v81) {
            goto LABEL_98;
          }
          if (v81 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) == v16) {
              goto LABEL_98;
            }
          }
          else if (__p == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v81))
          {
LABEL_98:
            *(void *)&long long v108 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
            unint64_t v8 = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v108, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
            if (v81 >= 0x41) {
              goto LABEL_94;
            }
            return v8;
          }
        }
      }
    }
  }
  uint64_t v17 = *(void *)(*a1 + 72);
  uint64_t v18 = *(void *)(v17 + 24);
  *(void *)&long long v108 = *(void *)(v17 + 56);
  *((void *)&v108 + 1) = &__p;
  *(void *)&long long v106 = v18;
  uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)&v106);
  if (v19)
  {
    if (*(_UNKNOWN **)(*(void *)(v19 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(v19 + 46) & 0x80) != 0
      && *(_DWORD *)(v19 + 68) == 2)
    {
      uint64_t v20 = *(void *)(*(void *)(v19 + 72) + 24);
      uint64_t v21 = v108;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v19, 1u, (uint64_t *)&v108 + 1))
      {
        if (v21 == v20)
        {
          unsigned int v22 = v81;
          if (!v81) {
            goto LABEL_98;
          }
          if (v81 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) == v22) {
              goto LABEL_98;
            }
          }
          else if (__p == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v81))
          {
            goto LABEL_98;
          }
        }
      }
    }
  }
  uint64_t v23 = *a1;
  *(void *)&long long v108 = *(void *)(*(void *)(v23 + 72) + 24);
  uint64_t v24 = mlir::Value::getDefiningOp((mlir::Value *)&v108);
  if (!v24)
  {
    uint64_t v25 = *(void *)(v23 + 72);
    goto LABEL_50;
  }
  uint64_t v25 = *(void *)(v23 + 72);
  if (*(_UNKNOWN **)(*(void *)(v24 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id
    || (uint64_t v26 = *(void *)(v25 + 56), v27 = *(void *)(v24 + 72), v26 != *(void *)(v27 + 24))
    && v26 != *(void *)(v27 + 56))
  {
LABEL_50:
    *(void *)&long long v108 = *(void *)(v25 + 56);
    uint64_t v24 = mlir::Value::getDefiningOp((mlir::Value *)&v108);
    if (!v24) {
      goto LABEL_60;
    }
    if (*(_UNKNOWN **)(*(void *)(v24 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
      goto LABEL_60;
    }
    uint64_t v28 = *(void *)(*(void *)(v23 + 72) + 24);
    uint64_t v29 = *(void *)(v24 + 72);
    if (v28 != *(void *)(v29 + 24) && v28 != *(void *)(v29 + 56)) {
      goto LABEL_60;
    }
  }
  if (*(_DWORD *)(v24 + 36)) {
    uint64_t v30 = v24 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v30, 0);
  if (NextResultAtOffset)
  {
    unint64_t v8 = NextResultAtOffset | 4;
    if (v81 >= 0x41) {
      goto LABEL_94;
    }
    return v8;
  }
LABEL_60:
  uint64_t v32 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v32;
  if (*v32
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    unint64_t v8 = canMapOperands & 0xFFFFFFFFFFFFFFFBLL;
    if (v81 >= 0x41) {
      goto LABEL_94;
    }
    return v8;
  }
  uint64_t v34 = v32[1];
  if (v34 && *(_UNKNOWN **)(*(void *)v34 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_93;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v108 = canMapOperands;
      *((void *)&v108 + 1) = v35;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v108);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v108 = 0uLL;
    }
  }
  else
  {
    long long v108 = 0uLL;
  }
  uint64_t v34 = v32[1];
  if (!v34)
  {
    long long v108 = 0uLL;
    goto LABEL_93;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v34 + 8))
  {
    uint64_t v34 = 0;
    long long v108 = 0uLL;
    goto LABEL_93;
  }
  uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v34 + 8);
  *(void *)&long long v108 = v34;
  *((void *)&v108 + 1) = v36;
  uint64_t v37 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v108);
  uint64_t v34 = 0;
  if (!canMapOperands || !v37 || canMapOperands != v37)
  {
LABEL_93:
    unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
    if (v81 >= 0x41) {
      goto LABEL_94;
    }
    return v8;
  }
  uint64_t v38 = *v32;
  if (*v32 && *(_UNKNOWN **)(*(void *)v38 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v34 = *v32;
    goto LABEL_93;
  }
  uint64_t v39 = (void *)v32[1];
  if (!v39) {
    goto LABEL_135;
  }
  unint64_t v40 = *(void **)(*(void *)v39 + 136);
  if (v40 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v34 = v32[1];
  }
  else {
    uint64_t v34 = 0;
  }
  if (!v38 || v40 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_93;
  }
  if (v40 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v38 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v89 = *v32;
    long long v86 = v39;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v89);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86))
    {
      mlir::IntegerAttr::getValue(&v89, (llvm::APInt *)&v95);
      mlir::IntegerAttr::getValue(&v86, (llvm::APInt *)&v92);
      int v42 = v96;
      DWORD2(v106) = v96;
      if (v96 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v106, (const void **)&v95);
        int v42 = DWORD2(v106);
        DWORD2(v108) = DWORD2(v106);
        unint64_t v43 = v106;
        *(void *)&long long v108 = v106;
        DWORD2(v106) = 0;
        if (DWORD2(v108) > 0x40)
        {
          llvm::APInt::andAssignSlowCase((uint64_t)&v108, (const llvm::APInt *)&v92);
          LOBYTE(v109[0]) = 1;
          if (DWORD2(v106) >= 0x41 && (void)v106) {
            operator delete[]((void *)v106);
          }
LABEL_119:
          if (v93 >= 0x41 && v92) {
            operator delete[](v92);
          }
          if (v96 >= 0x41 && v95) {
            operator delete[](v95);
          }
          uint64_t v34 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v108);
          if (LOBYTE(v109[0])) {
            goto LABEL_126;
          }
          goto LABEL_93;
        }
      }
      else
      {
        unint64_t v43 = (unint64_t)v95;
      }
      DWORD2(v108) = v42;
      *(void *)&long long v108 = (unint64_t)v92 & v43;
      LOBYTE(v109[0]) = 1;
      goto LABEL_119;
    }
LABEL_135:
    unint64_t v8 = 0;
    if (v81 >= 0x41) {
      goto LABEL_94;
    }
    return v8;
  }
  if (mlir::DenseElementsAttr::classof(*v32)) {
    uint64_t v45 = v38;
  }
  else {
    uint64_t v45 = 0;
  }
  *(void *)&long long v108 = v45;
  if (v45 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v108))
  {
    uint64_t v46 = v32[1];
    uint64_t v47 = mlir::DenseElementsAttr::classof(v46) ? v46 : 0;
    *(void *)&long long v108 = v47;
    if (v47)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v108))
      {
        uint64_t v48 = (void *)v32[1];
        uint64_t v89 = *v32;
        long long v86 = v48;
        uint64_t v49 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
        if (v49 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86)) {
          goto LABEL_135;
        }
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v89, (uint64_t)&v108);
        long long v106 = v108;
        long long v107 = v109[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v106, (llvm::APInt *)&v95);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v86, (uint64_t)&v108);
        long long v106 = v108;
        long long v107 = v109[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v106, (llvm::APInt *)&v92);
        int v50 = v96;
        DWORD2(v106) = v96;
        if (v96 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v106, (const void **)&v95);
          int v50 = DWORD2(v106);
          DWORD2(v108) = DWORD2(v106);
          unint64_t v51 = v106;
          *(void *)&long long v108 = v106;
          DWORD2(v106) = 0;
          if (DWORD2(v108) > 0x40)
          {
            llvm::APInt::andAssignSlowCase((uint64_t)&v108, (const llvm::APInt *)&v92);
            LOBYTE(v109[0]) = 1;
            if (DWORD2(v106) >= 0x41 && (void)v106) {
              operator delete[]((void *)v106);
            }
LABEL_217:
            if (v93 >= 0x41 && v92) {
              operator delete[](v92);
            }
            if (v96 >= 0x41 && v95) {
              operator delete[](v95);
            }
            uint64_t v79 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v34 = mlir::DenseElementsAttr::get(canMapOperands, v79, (llvm::APInt *)&v108, 1);
            if (LOBYTE(v109[0]))
            {
LABEL_126:
              if (DWORD2(v108) >= 0x41 && (void)v108)
              {
                operator delete[]((void *)v108);
                unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
                if (v81 >= 0x41) {
                  goto LABEL_94;
                }
                return v8;
              }
              goto LABEL_93;
            }
            goto LABEL_93;
          }
        }
        else
        {
          unint64_t v51 = (unint64_t)v95;
        }
        DWORD2(v108) = v50;
        *(void *)&long long v108 = (unint64_t)v92 & v51;
        LOBYTE(v109[0]) = 1;
        goto LABEL_217;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v32 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v32[1] + 8))
  {
    goto LABEL_135;
  }
  unsigned int v52 = (void *)*v32;
  uint64_t v53 = *v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v52 + 8) : 0;
  unsigned int v100 = v52;
  uint64_t v101 = v53;
  uint64_t v54 = (void *)v32[1];
  uint64_t v55 = v54 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v54 + 8) : 0;
  v99[0] = v54;
  v99[1] = v55;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v100);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v99)) {
    goto LABEL_135;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v100, (uint64_t)&v106);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v99, (uint64_t)&v95);
  uint64_t v34 = 0;
  int v57 = v98;
  if (!BYTE8(v107) || !v98) {
    goto LABEL_206;
  }
  LOWORD(v92) = v106;
  if ((_BYTE)v106) {
    uint64_t v93 = *((void *)&v106 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v106 + 1) + 16))(&v93);
  }
  uint64_t v94 = v107;
  LOWORD(v89) = (_WORD)v95;
  if ((_BYTE)v95) {
    uint64_t v90 = v96;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v96 + 16))(&v90);
  }
  uint64_t v91 = v97;
  *(void *)&long long v108 = v109;
  *((void *)&v108 + 1) = 0x400000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v100, v101);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v108, NumElements);
  uint64_t v59 = mlir::ElementsAttr::getNumElements((uint64_t)v100, v101);
  if (!v59)
  {
LABEL_188:
    uint64_t v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
    uint64_t v34 = mlir::DenseElementsAttr::get(canMapOperands, v71, (llvm::APInt *)v108, DWORD2(v108));
    goto LABEL_190;
  }
  uint64_t v60 = v59;
  uint64_t v61 = v94;
  while (1)
  {
    if (BYTE1(v92)) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = v61;
    }
    if ((_BYTE)v92)
    {
      uint64_t v63 = v93 + 16 * v62;
      unsigned int v85 = *(_DWORD *)(v63 + 8);
      if (v85 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v84, (const void **)v63);
      }
      else {
        uint64_t v84 = *(void **)v63;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v93 + 24))(&v84);
    }
    if (BYTE1(v89)) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = v91;
    }
    if ((_BYTE)v89)
    {
      uint64_t v65 = v90 + 16 * v64;
      unsigned int v83 = *(_DWORD *)(v65 + 8);
      if (v83 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v82, (const void **)v65);
      }
      else {
        uint64_t v82 = *(void **)v65;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v90 + 24))(&v82);
    }
    unsigned int v66 = v85;
    unsigned int v103 = v85;
    if (v85 <= 0x40)
    {
      unint64_t v67 = (unint64_t)v84;
LABEL_170:
      unsigned int v87 = v66;
      long long v86 = (void *)((unint64_t)v82 & v67);
      char v88 = 1;
      goto LABEL_171;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v102, (const void **)&v84);
    unsigned int v66 = v103;
    unsigned int v105 = v103;
    unint64_t v67 = (unint64_t)v102;
    uint64_t v104 = v102;
    unsigned int v103 = 0;
    if (v105 <= 0x40) {
      goto LABEL_170;
    }
    llvm::APInt::andAssignSlowCase((uint64_t)&v104, (const llvm::APInt *)&v82);
    unsigned int v87 = v105;
    long long v86 = v104;
    char v88 = 1;
    if (v103 >= 0x41 && v102) {
      operator delete[](v102);
    }
LABEL_171:
    if (v83 >= 0x41 && v82) {
      operator delete[](v82);
    }
    if (v85 >= 0x41 && v84) {
      operator delete[](v84);
    }
    if (!v88) {
      break;
    }
    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v108, (unint64_t)&v86, 1);
    uint64_t v69 = (llvm::APInt *)(v108 + 16 * DWORD2(v108));
    unsigned int v70 = *((_DWORD *)Address + 2);
    *((_DWORD *)v69 + 2) = v70;
    if (v70 > 0x40) {
      llvm::APInt::initSlowCase(v69, (const void **)Address);
    }
    else {
      *(void *)uint64_t v69 = *(void *)Address;
    }
    ++DWORD2(v108);
    if (v88 && v87 >= 0x41 && v86) {
      operator delete[](v86);
    }
    uint64_t v61 = ++v94;
    ++v91;
    if (!--v60) {
      goto LABEL_188;
    }
  }
  uint64_t v34 = 0;
LABEL_190:
  long long v72 = (char *)v108;
  if (DWORD2(v108))
  {
    uint64_t v73 = 16 * DWORD2(v108);
    do
    {
      if (*(_DWORD *)&v72[v73 - 8] >= 0x41u)
      {
        long long v74 = *(void **)&v72[v73 - 16];
        if (v74) {
          operator delete[](v74);
        }
      }
      v73 -= 16;
    }
    while (v73);
    long long v72 = (char *)v108;
  }
  if (v72 != (char *)v109) {
    free(v72);
  }
  if (!(_BYTE)v89)
  {
    uint64_t v75 = v90;
    uint64_t v90 = 0;
    if (v75) {
      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
    }
  }
  if (!(_BYTE)v92)
  {
    uint64_t v76 = v93;
    uint64_t v93 = 0;
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    }
  }
  int v57 = v98;
LABEL_206:
  if (v57)
  {
    if (!(_BYTE)v95)
    {
      uint64_t v77 = v96;
      uint64_t v96 = 0;
      if (v77) {
        (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
      }
    }
  }
  if (!BYTE8(v107)) {
    goto LABEL_93;
  }
  if ((_BYTE)v106) {
    goto LABEL_93;
  }
  uint64_t v78 = *((void *)&v106 + 1);
  *((void *)&v106 + 1) = 0;
  if (!v78) {
    goto LABEL_93;
  }
  (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
  if (v81 < 0x41) {
    return v8;
  }
LABEL_94:
  if (__p) {
    operator delete[](__p);
  }
  return v8;
}

unint64_t mlir::arith::OrIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  DWORD2(v100) = 1;
  *(void *)&long long v100 = 0;
  uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v98 = &v100;
  if (!v5) {
    goto LABEL_16;
  }
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v98, v5);
  char v7 = v6;
  unsigned int v8 = DWORD2(v100);
  if (v6)
  {
    if (DWORD2(v100) > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v100) != v8)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v100) != v8)
        {
          if ((void)v100) {
            operator delete[]((void *)v100);
          }
          goto LABEL_16;
        }
LABEL_14:
        unint64_t v2 = *(void *)(*(void *)(a2 + 40) + 8) & 0xFFFFFFFFFFFFFFFBLL;
        if (v8 < 0x41) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
    }
    else if ((void)v100)
    {
      if (DWORD2(v100) && (void)v100 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v100)) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    unint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
  }
  if (v8 < 0x41) {
    goto LABEL_15;
  }
LABEL_11:
  if ((void)v100) {
    operator delete[]((void *)v100);
  }
LABEL_15:
  if (v7) {
    return v2;
  }
LABEL_16:
  unsigned int v73 = 1;
  long long __p = 0;
  uint64_t v9 = *(void *)(*(void *)a1 + 72);
  uint64_t v10 = *(void *)(v9 + 56);
  *(void *)&long long v100 = *(void *)(v9 + 24);
  *((void *)&v100 + 1) = &__p;
  *(void *)&long long v98 = v10;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v98);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      uint64_t v12 = *(void *)(*(void *)(DefiningOp + 72) + 24);
      uint64_t v13 = v100;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(DefiningOp, 1u, (uint64_t *)&v100 + 1))
      {
        if (v13 == v12)
        {
          unsigned int v14 = v73;
          if (v73)
          {
            if (v73 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) != v14) {
                goto LABEL_25;
              }
            }
            else if (__p != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v73))
            {
              goto LABEL_25;
            }
          }
          uint64_t v41 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
          goto LABEL_94;
        }
      }
    }
  }
LABEL_25:
  uint64_t v15 = *(void *)(*(void *)a1 + 72);
  uint64_t v16 = *(void *)(v15 + 24);
  *(void *)&long long v100 = *(void *)(v15 + 56);
  *((void *)&v100 + 1) = &__p;
  *(void *)&long long v98 = v16;
  uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)&v98);
  if (v17)
  {
    if (*(_UNKNOWN **)(*(void *)(v17 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(v17 + 46) & 0x80) != 0
      && *(_DWORD *)(v17 + 68) == 2)
    {
      uint64_t v18 = *(void *)(*(void *)(v17 + 72) + 24);
      uint64_t v19 = v100;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v17, 1u, (uint64_t *)&v100 + 1))
      {
        if (v19 == v18)
        {
          unsigned int v20 = v73;
          if (v73)
          {
            if (v73 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) != v20) {
                goto LABEL_34;
              }
            }
            else if (__p != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v73))
            {
              goto LABEL_34;
            }
          }
          uint64_t v41 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
LABEL_94:
          *(void *)&long long v100 = v41;
          uint64_t v44 = mlir::Value::getDefiningOp((mlir::Value *)&v100);
          if (*(_UNKNOWN **)(*(void *)(v44 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          unint64_t v2 = *(void *)(*(void *)(v45 + 72) + 56) | 4;
          if (v73 >= 0x41) {
            goto LABEL_70;
          }
          return v2;
        }
      }
    }
  }
LABEL_34:
  uint64_t v21 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v21;
  if (*v21
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    unint64_t v2 = canMapOperands & 0xFFFFFFFFFFFFFFFBLL;
    if (v73 >= 0x41) {
      goto LABEL_70;
    }
    return v2;
  }
  uint64_t v23 = v21[1];
  if (v23 && *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_69;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v100 = canMapOperands;
      *((void *)&v100 + 1) = v24;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v100 = 0uLL;
    }
  }
  else
  {
    long long v100 = 0uLL;
  }
  uint64_t v23 = v21[1];
  if (!v23)
  {
    long long v100 = 0uLL;
    goto LABEL_69;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8))
  {
    uint64_t v23 = 0;
    long long v100 = 0uLL;
    goto LABEL_69;
  }
  uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8);
  *(void *)&long long v100 = v23;
  *((void *)&v100 + 1) = v25;
  uint64_t v26 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v23 = 0;
  if (!canMapOperands || !v26 || canMapOperands != v26)
  {
LABEL_69:
    unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
    if (v73 >= 0x41) {
      goto LABEL_70;
    }
    return v2;
  }
  uint64_t v27 = *v21;
  if (*v21 && *(_UNKNOWN **)(*(void *)v27 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v23 = *v21;
    goto LABEL_69;
  }
  uint64_t v28 = (void *)v21[1];
  if (!v28) {
    goto LABEL_117;
  }
  uint64_t v29 = *(void **)(*(void *)v28 + 136);
  if (v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v23 = v21[1];
  }
  else {
    uint64_t v23 = 0;
  }
  if (!v27 || v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_69;
  }
  if (v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v27 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v81 = *v21;
    uint64_t v78 = v28;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v81);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v78))
    {
      mlir::IntegerAttr::getValue(&v81, (llvm::APInt *)&v87);
      mlir::IntegerAttr::getValue(&v78, (llvm::APInt *)&v84);
      int v31 = v88;
      DWORD2(v98) = v88;
      if (v88 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v98, (const void **)&v87);
        int v31 = DWORD2(v98);
        DWORD2(v100) = DWORD2(v98);
        unint64_t v32 = v98;
        *(void *)&long long v100 = v98;
        DWORD2(v98) = 0;
        if (DWORD2(v100) > 0x40)
        {
          llvm::APInt::orAssignSlowCase((uint64_t)&v100, (const llvm::APInt *)&v84);
          LOBYTE(v101[0]) = 1;
          if (DWORD2(v98) >= 0x41 && (void)v98) {
            operator delete[]((void *)v98);
          }
LABEL_101:
          if (v85 >= 0x41 && v84) {
            operator delete[](v84);
          }
          if (v88 >= 0x41 && v87) {
            operator delete[](v87);
          }
          uint64_t v23 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v100);
          if (LOBYTE(v101[0])) {
            goto LABEL_108;
          }
          goto LABEL_69;
        }
      }
      else
      {
        unint64_t v32 = (unint64_t)v87;
      }
      DWORD2(v100) = v31;
      *(void *)&long long v100 = (unint64_t)v84 | v32;
      LOBYTE(v101[0]) = 1;
      goto LABEL_101;
    }
LABEL_117:
    unint64_t v2 = 0;
    if (v73 >= 0x41) {
      goto LABEL_70;
    }
    return v2;
  }
  if (mlir::DenseElementsAttr::classof(*v21)) {
    uint64_t v34 = v27;
  }
  else {
    uint64_t v34 = 0;
  }
  *(void *)&long long v100 = v34;
  if (v34 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100))
  {
    uint64_t v35 = v21[1];
    uint64_t v36 = mlir::DenseElementsAttr::classof(v35) ? v35 : 0;
    *(void *)&long long v100 = v36;
    if (v36)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100))
      {
        uint64_t v37 = (void *)v21[1];
        uint64_t v81 = *v21;
        uint64_t v78 = v37;
        uint64_t v38 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
        if (v38 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78)) {
          goto LABEL_117;
        }
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v81, (uint64_t)&v100);
        long long v98 = v100;
        long long v99 = v101[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v98, (llvm::APInt *)&v87);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v78, (uint64_t)&v100);
        long long v98 = v100;
        long long v99 = v101[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v98, (llvm::APInt *)&v84);
        int v39 = v88;
        DWORD2(v98) = v88;
        if (v88 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v98, (const void **)&v87);
          int v39 = DWORD2(v98);
          DWORD2(v100) = DWORD2(v98);
          unint64_t v40 = v98;
          *(void *)&long long v100 = v98;
          DWORD2(v98) = 0;
          if (DWORD2(v100) > 0x40)
          {
            llvm::APInt::orAssignSlowCase((uint64_t)&v100, (const llvm::APInt *)&v84);
            LOBYTE(v101[0]) = 1;
            if (DWORD2(v98) >= 0x41 && (void)v98) {
              operator delete[]((void *)v98);
            }
LABEL_199:
            if (v85 >= 0x41 && v84) {
              operator delete[](v84);
            }
            if (v88 >= 0x41 && v87) {
              operator delete[](v87);
            }
            uint64_t v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v23 = mlir::DenseElementsAttr::get(canMapOperands, v71, (llvm::APInt *)&v100, 1);
            if (LOBYTE(v101[0]))
            {
LABEL_108:
              if (DWORD2(v100) >= 0x41 && (void)v100)
              {
                operator delete[]((void *)v100);
                unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
                if (v73 >= 0x41) {
                  goto LABEL_70;
                }
                return v2;
              }
              goto LABEL_69;
            }
            goto LABEL_69;
          }
        }
        else
        {
          unint64_t v40 = (unint64_t)v87;
        }
        DWORD2(v100) = v39;
        *(void *)&long long v100 = (unint64_t)v84 | v40;
        LOBYTE(v101[0]) = 1;
        goto LABEL_199;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v21 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v21[1] + 8))
  {
    goto LABEL_117;
  }
  int v42 = (void *)*v21;
  uint64_t v43 = *v21 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v42 + 8) : 0;
  uint64_t v92 = v42;
  uint64_t v93 = v43;
  uint64_t v46 = (void *)v21[1];
  uint64_t v47 = v46 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v46 + 8) : 0;
  v91[0] = v46;
  v91[1] = v47;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v92);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v91)) {
    goto LABEL_117;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v92, (uint64_t)&v98);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v91, (uint64_t)&v87);
  uint64_t v23 = 0;
  int v49 = v90;
  if (!BYTE8(v99) || !v90) {
    goto LABEL_188;
  }
  LOWORD(v84) = v98;
  if ((_BYTE)v98) {
    uint64_t v85 = *((void *)&v98 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v98 + 1) + 16))(&v85);
  }
  uint64_t v86 = v99;
  LOWORD(v81) = (_WORD)v87;
  if ((_BYTE)v87) {
    uint64_t v82 = v88;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v88 + 16))(&v82);
  }
  uint64_t v83 = v89;
  *(void *)&long long v100 = v101;
  *((void *)&v100 + 1) = 0x400000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v100, NumElements);
  uint64_t v51 = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
  if (!v51)
  {
LABEL_170:
    uint64_t v63 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
    uint64_t v23 = mlir::DenseElementsAttr::get(canMapOperands, v63, (llvm::APInt *)v100, DWORD2(v100));
    goto LABEL_172;
  }
  uint64_t v52 = v51;
  uint64_t v53 = v86;
  while (1)
  {
    if (BYTE1(v84)) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v53;
    }
    if ((_BYTE)v84)
    {
      uint64_t v55 = v85 + 16 * v54;
      unsigned int v77 = *(_DWORD *)(v55 + 8);
      if (v77 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v76, (const void **)v55);
      }
      else {
        uint64_t v76 = *(void **)v55;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v85 + 24))(&v76);
    }
    if (BYTE1(v81)) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = v83;
    }
    if ((_BYTE)v81)
    {
      uint64_t v57 = v82 + 16 * v56;
      unsigned int v75 = *(_DWORD *)(v57 + 8);
      if (v75 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const void **)v57);
      }
      else {
        long long v74 = *(void **)v57;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v82 + 24))(&v74);
    }
    unsigned int v58 = v77;
    unsigned int v95 = v77;
    if (v77 <= 0x40)
    {
      unint64_t v59 = (unint64_t)v76;
LABEL_152:
      unsigned int v79 = v58;
      uint64_t v78 = (void *)((unint64_t)v74 | v59);
      char v80 = 1;
      goto LABEL_153;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v94, (const void **)&v76);
    unsigned int v58 = v95;
    unsigned int v97 = v95;
    unint64_t v59 = (unint64_t)v94;
    uint64_t v96 = v94;
    unsigned int v95 = 0;
    if (v58 <= 0x40) {
      goto LABEL_152;
    }
    llvm::APInt::orAssignSlowCase((uint64_t)&v96, (const llvm::APInt *)&v74);
    unsigned int v79 = v97;
    uint64_t v78 = v96;
    char v80 = 1;
    if (v95 >= 0x41 && v94) {
      operator delete[](v94);
    }
LABEL_153:
    if (v75 >= 0x41 && v74) {
      operator delete[](v74);
    }
    if (v77 >= 0x41 && v76) {
      operator delete[](v76);
    }
    if (!v80) {
      break;
    }
    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v100, (unint64_t)&v78, 1);
    uint64_t v61 = (llvm::APInt *)(v100 + 16 * DWORD2(v100));
    unsigned int v62 = *((_DWORD *)Address + 2);
    *((_DWORD *)v61 + 2) = v62;
    if (v62 > 0x40) {
      llvm::APInt::initSlowCase(v61, (const void **)Address);
    }
    else {
      *(void *)uint64_t v61 = *(void *)Address;
    }
    ++DWORD2(v100);
    if (v80 && v79 >= 0x41 && v78) {
      operator delete[](v78);
    }
    uint64_t v53 = ++v86;
    ++v83;
    if (!--v52) {
      goto LABEL_170;
    }
  }
  uint64_t v23 = 0;
LABEL_172:
  uint64_t v64 = (char *)v100;
  if (DWORD2(v100))
  {
    uint64_t v65 = 16 * DWORD2(v100);
    do
    {
      if (*(_DWORD *)&v64[v65 - 8] >= 0x41u)
      {
        unsigned int v66 = *(void **)&v64[v65 - 16];
        if (v66) {
          operator delete[](v66);
        }
      }
      v65 -= 16;
    }
    while (v65);
    uint64_t v64 = (char *)v100;
  }
  if (v64 != (char *)v101) {
    free(v64);
  }
  if (!(_BYTE)v81)
  {
    uint64_t v67 = v82;
    uint64_t v82 = 0;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
    }
  }
  if (!(_BYTE)v84)
  {
    uint64_t v68 = v85;
    uint64_t v85 = 0;
    if (v68) {
      (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
    }
  }
  int v49 = v90;
LABEL_188:
  if (v49)
  {
    if (!(_BYTE)v87)
    {
      uint64_t v69 = v88;
      uint64_t v88 = 0;
      if (v69) {
        (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
      }
    }
  }
  if (!BYTE8(v99)) {
    goto LABEL_69;
  }
  if ((_BYTE)v98) {
    goto LABEL_69;
  }
  uint64_t v70 = *((void *)&v98 + 1);
  *((void *)&v98 + 1) = 0;
  if (!v70) {
    goto LABEL_69;
  }
  (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
  if (v73 < 0x41) {
    return v2;
  }
LABEL_70:
  if (__p) {
    operator delete[](__p);
  }
  return v2;
}

uint64_t mlir::arith::XOrIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v93) = 1;
  *(void *)&long long v93 = 0;
  *(void *)&long long v91 = &v93;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v4);
  int v6 = DWORD2(v93);
  if (v5)
  {
    if (DWORD2(v93) < 0x41)
    {
      BOOL v7 = (void)v93 == 0;
      goto LABEL_11;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v93) > 0x40)
    {
      if ((void)v93) {
        operator delete[]((void *)v93);
      }
      goto LABEL_15;
    }
    BOOL v7 = *(void *)v93 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v93) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v93)
  {
LABEL_11:
    if (v7) {
      return *(void *)(*(void *)(*a1 + 72) + 24) | 4;
    }
    goto LABEL_15;
  }
  operator delete[]((void *)v93);
  if (v7) {
    return *(void *)(*(void *)(*a1 + 72) + 24) | 4;
  }
LABEL_15:
  uint64_t v9 = *(void *)(*a1 + 72);
  if (*(void *)(v9 + 24) == *(void *)(v9 + 56))
  {
    *(void *)&long long v93 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    return (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v93, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(void *)&long long v93 = *(void *)(v9 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v93);
  if (DefiningOp)
  {
    uint64_t v11 = *a1;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      uint64_t v13 = *(void *)(v12 + 56);
      uint64_t v14 = *(void *)(*(void *)(v11 + 72) + 56);
      uint64_t v15 = *(void *)(v12 + 24);
      if (v13 == v14) {
        return v15 | 4;
      }
      if (v15 == v14) {
        return v13 | 4;
      }
    }
  }
  else
  {
    uint64_t v11 = *a1;
  }
  *(void *)&long long v93 = *(void *)(*(void *)(v11 + 72) + 56);
  uint64_t v16 = mlir::Value::getDefiningOp((mlir::Value *)&v93);
  if (v16
    && *(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
  {
    uint64_t v22 = *(void *)(v16 + 72);
    uint64_t v23 = *(void *)(v22 + 56);
    uint64_t v24 = *(void *)(*(void *)(*a1 + 72) + 24);
    uint64_t v13 = *(void *)(v22 + 24);
    if (v23 == v24) {
      return v13 | 4;
    }
    if (v13 == v24) {
      return v23 | 4;
    }
  }
  uint64_t v17 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v17;
  if (*v17
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v19 = *v17;
    return v19 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v19 = v17[1];
  if (!v19 || *(_UNKNOWN **)(*(void *)v19 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v93 = canMapOperands;
        *((void *)&v93 + 1) = v20;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v93 = 0uLL;
      }
    }
    else
    {
      long long v93 = 0uLL;
    }
    uint64_t v19 = v17[1];
    if (!v19)
    {
      long long v93 = 0uLL;
      return v19 & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8))
    {
      uint64_t v19 = 0;
      long long v93 = 0uLL;
      return v19 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8);
    *(void *)&long long v93 = v19;
    *((void *)&v93 + 1) = v21;
    uint64_t v25 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
    uint64_t v19 = 0;
    if (canMapOperands)
    {
      if (v25 && canMapOperands == v25)
      {
        uint64_t v26 = *v17;
        if (*v17
          && *(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v19 = *v17;
          return v19 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v27 = (void *)v17[1];
        if (!v27) {
          goto LABEL_96;
        }
        uint64_t v28 = *(void **)(*(void *)v27 + 136);
        if (v28 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v19 = v17[1];
        }
        else {
          uint64_t v19 = 0;
        }
        if (!v26 || v28 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          return v19 & 0xFFFFFFFFFFFFFFFBLL;
        }
        if (v28 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v74 = *v17;
          uint64_t v71 = v27;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v74);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v71))
          {
            mlir::IntegerAttr::getValue(&v74, (llvm::APInt *)&v80);
            mlir::IntegerAttr::getValue(&v71, (llvm::APInt *)&__p);
            int v30 = v81;
            DWORD2(v91) = v81;
            if (v81 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)&v80);
              int v30 = DWORD2(v91);
              DWORD2(v93) = DWORD2(v91);
              unint64_t v31 = v91;
              *(void *)&long long v93 = v91;
              DWORD2(v91) = 0;
              if (DWORD2(v93) > 0x40)
              {
                llvm::APInt::xorAssignSlowCase((uint64_t)&v93, (const llvm::APInt *)&__p);
                LOBYTE(v94[0]) = 1;
                if (DWORD2(v91) >= 0x41 && (void)v91) {
                  operator delete[]((void *)v91);
                }
LABEL_81:
                if (v78 >= 0x41 && __p) {
                  operator delete[](__p);
                }
                if (v81 >= 0x41 && v80) {
                  operator delete[](v80);
                }
                uint64_t v19 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                if (!LOBYTE(v94[0])) {
                  return v19 & 0xFFFFFFFFFFFFFFFBLL;
                }
                goto LABEL_88;
              }
            }
            else
            {
              unint64_t v31 = (unint64_t)v80;
            }
            DWORD2(v93) = v30;
            *(void *)&long long v93 = (unint64_t)__p ^ v31;
            LOBYTE(v94[0]) = 1;
            goto LABEL_81;
          }
LABEL_96:
          uint64_t v19 = 0;
          return v19 & 0xFFFFFFFFFFFFFFFBLL;
        }
        if (mlir::DenseElementsAttr::classof(*v17)) {
          uint64_t v32 = v26;
        }
        else {
          uint64_t v32 = 0;
        }
        *(void *)&long long v93 = v32;
        if (v32 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93))
        {
          uint64_t v33 = v17[1];
          uint64_t v34 = mlir::DenseElementsAttr::classof(v33) ? v33 : 0;
          *(void *)&long long v93 = v34;
          if (v34)
          {
            if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93))
            {
              uint64_t v35 = (void *)v17[1];
              uint64_t v74 = *v17;
              uint64_t v71 = v35;
              uint64_t v36 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v74);
              if (v36 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71)) {
                goto LABEL_96;
              }
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v74, (uint64_t)&v93);
              long long v91 = v93;
              long long v92 = v94[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v80);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v71, (uint64_t)&v93);
              long long v91 = v93;
              long long v92 = v94[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&__p);
              int v37 = v81;
              DWORD2(v91) = v81;
              if (v81 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)&v80);
                int v37 = DWORD2(v91);
                DWORD2(v93) = DWORD2(v91);
                unint64_t v38 = v91;
                *(void *)&long long v93 = v91;
                DWORD2(v91) = 0;
                if (DWORD2(v93) > 0x40)
                {
                  llvm::APInt::xorAssignSlowCase((uint64_t)&v93, (const llvm::APInt *)&__p);
                  LOBYTE(v94[0]) = 1;
                  if (DWORD2(v91) >= 0x41 && (void)v91) {
                    operator delete[]((void *)v91);
                  }
LABEL_177:
                  if (v78 >= 0x41 && __p) {
                    operator delete[](__p);
                  }
                  if (v81 >= 0x41 && v80) {
                    operator delete[](v80);
                  }
                  uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v19 = mlir::DenseElementsAttr::get(canMapOperands, v66, (llvm::APInt *)&v93, 1);
                  if (!LOBYTE(v94[0])) {
                    return v19 & 0xFFFFFFFFFFFFFFFBLL;
                  }
LABEL_88:
                  if (DWORD2(v93) >= 0x41)
                  {
                    if ((void)v93) {
                      operator delete[]((void *)v93);
                    }
                  }
                  return v19 & 0xFFFFFFFFFFFFFFFBLL;
                }
              }
              else
              {
                unint64_t v38 = (unint64_t)v80;
              }
              DWORD2(v93) = v37;
              *(void *)&long long v93 = (unint64_t)__p ^ v38;
              LOBYTE(v94[0]) = 1;
              goto LABEL_177;
            }
          }
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v17 + 8)
          || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v17[1] + 8))
        {
          goto LABEL_96;
        }
        int v39 = (void *)*v17;
        uint64_t v40 = *v17 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v39 + 8) : 0;
        uint64_t v85 = v39;
        uint64_t v86 = v40;
        uint64_t v41 = (void *)v17[1];
        uint64_t v42 = v41 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8) : 0;
        v84[0] = v41;
        v84[1] = v42;
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v85);
        if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v84)) {
          goto LABEL_96;
        }
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v85, (uint64_t)&v91);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v84, (uint64_t)&v80);
        uint64_t v19 = 0;
        int v44 = v83;
        if (!BYTE8(v92) || !v83) {
          goto LABEL_167;
        }
        LOWORD(__p) = v91;
        if ((_BYTE)v91) {
          uint64_t v78 = *((void *)&v91 + 1);
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v91 + 1) + 16))(&v78);
        }
        uint64_t v79 = v92;
        LOWORD(v74) = (_WORD)v80;
        if ((_BYTE)v80) {
          uint64_t v75 = v81;
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v81 + 16))(&v75);
        }
        uint64_t v76 = v82;
        *(void *)&long long v93 = v94;
        *((void *)&v93 + 1) = 0x400000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v85, v86);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
        uint64_t v46 = mlir::ElementsAttr::getNumElements((uint64_t)v85, v86);
        if (!v46)
        {
LABEL_149:
          uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v19 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)v93, DWORD2(v93));
          goto LABEL_151;
        }
        uint64_t v47 = v46;
        uint64_t v48 = v79;
        while (1)
        {
          uint64_t v49 = BYTE1(__p) ? 0 : v48;
          if ((_BYTE)__p)
          {
            uint64_t v50 = v78 + 16 * v49;
            unsigned int v70 = *(_DWORD *)(v50 + 8);
            if (v70 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v50);
            }
            else {
              uint64_t v69 = *(void **)v50;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v78 + 24))(&v69);
          }
          uint64_t v51 = BYTE1(v74) ? 0 : v76;
          if ((_BYTE)v74)
          {
            uint64_t v52 = v75 + 16 * v51;
            unsigned int v68 = *(_DWORD *)(v52 + 8);
            if (v68 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const void **)v52);
            }
            else {
              uint64_t v67 = *(void **)v52;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v75 + 24))(&v67);
          }
          unsigned int v53 = v70;
          unsigned int v88 = v70;
          if (v70 <= 0x40) {
            break;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&v87, (const void **)&v69);
          unsigned int v53 = v88;
          unsigned int v90 = v88;
          unint64_t v54 = (unint64_t)v87;
          uint64_t v89 = v87;
          unsigned int v88 = 0;
          if (v90 <= 0x40) {
            goto LABEL_131;
          }
          llvm::APInt::xorAssignSlowCase((uint64_t)&v89, (const llvm::APInt *)&v67);
          unsigned int v72 = v90;
          uint64_t v71 = v89;
          char v73 = 1;
          if (v88 >= 0x41 && v87) {
            operator delete[](v87);
          }
LABEL_132:
          if (v68 >= 0x41 && v67) {
            operator delete[](v67);
          }
          if (v70 >= 0x41 && v69) {
            operator delete[](v69);
          }
          if (!v73)
          {
            uint64_t v19 = 0;
LABEL_151:
            unint64_t v59 = (char *)v93;
            if (DWORD2(v93))
            {
              uint64_t v60 = 16 * DWORD2(v93);
              do
              {
                if (*(_DWORD *)&v59[v60 - 8] >= 0x41u)
                {
                  uint64_t v61 = *(void **)&v59[v60 - 16];
                  if (v61) {
                    operator delete[](v61);
                  }
                }
                v60 -= 16;
              }
              while (v60);
              unint64_t v59 = (char *)v93;
            }
            if (v59 != (char *)v94) {
              free(v59);
            }
            if (!(_BYTE)v74)
            {
              uint64_t v62 = v75;
              uint64_t v75 = 0;
              if (v62) {
                (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
              }
            }
            if (!(_BYTE)__p)
            {
              uint64_t v63 = v78;
              uint64_t v78 = 0;
              if (v63) {
                (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
              }
            }
            int v44 = v83;
LABEL_167:
            if (v44)
            {
              if (!(_BYTE)v80)
              {
                uint64_t v64 = v81;
                uint64_t v81 = 0;
                if (v64) {
                  (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                }
              }
            }
            if (BYTE8(v92))
            {
              if (!(_BYTE)v91)
              {
                uint64_t v65 = *((void *)&v91 + 1);
                *((void *)&v91 + 1) = 0;
                if (v65) {
                  (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                }
              }
            }
            return v19 & 0xFFFFFFFFFFFFFFFBLL;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v71, 1);
          uint64_t v56 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
          unsigned int v57 = *((_DWORD *)Address + 2);
          *((_DWORD *)v56 + 2) = v57;
          if (v57 > 0x40) {
            llvm::APInt::initSlowCase(v56, (const void **)Address);
          }
          else {
            *(void *)uint64_t v56 = *(void *)Address;
          }
          ++DWORD2(v93);
          if (v73 && v72 >= 0x41 && v71) {
            operator delete[](v71);
          }
          uint64_t v48 = ++v79;
          ++v76;
          if (!--v47) {
            goto LABEL_149;
          }
        }
        unint64_t v54 = (unint64_t)v69;
LABEL_131:
        unsigned int v72 = v53;
        uint64_t v71 = (void *)((unint64_t)v67 ^ v54);
        char v73 = 1;
        goto LABEL_132;
      }
    }
  }
  return v19 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::XOrIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 2);
  *(void *)&long long v107 = "arith.cmpi";
  *((void *)&v107 + 1) = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.xori", 10, v106, a2, &v107, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC997788;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    BOOL v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v107 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::XOrINotCmpI]";
  *((void *)&v107 + 1) = 84;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v107, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v107 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v107 + 1);
  }
  uint64_t v11 = v107 + v10;
  unint64_t v12 = *((void *)&v107 + 1) - v10;
  if (*((void *)&v107 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v107 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  BOOL v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)BOOL v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_116;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_117;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_120;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      int v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)int v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      BOOL v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)BOOL v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      BOOL v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  unint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 3);
  long long v107 = xmmword_1E4FBF3F0;
  long long v108 = *(_OWORD *)&off_1E4FBF400;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.xori", 10, v106, a2, &v107, 2uLL);
  *(void *)unint64_t v38 = &unk_1EC997808;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v107 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::XOrIOfExtUI]";
  *((void *)&v107 + 1) = 84;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v107, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v107 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v107 + 1);
  }
  uint64_t v45 = v107 + v44;
  unint64_t v46 = *((void *)&v107 + 1) - v44;
  if (*((void *)&v107 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v107 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_116;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_117;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    unsigned int v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    unsigned int v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_121;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v62 = &v41[-v61];
      v56 -= v61;
      uint64_t v63 = &v55[8 * v51 - 16];
      uint64_t v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)uint64_t v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)uint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_121:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  unsigned int v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 3);
  long long v107 = xmmword_1E4FBF410;
  long long v108 = *(_OWORD *)&off_1E4FBF420;
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"arith.xori", 10, v106, a2, &v107, 2uLL);
  *(void *)unsigned int v72 = &unk_1EC9977C8;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    uint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  *(void *)&long long v107 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::XOrIOfExtSI]";
  *((void *)&v107 + 1) = 84;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v107, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v107 + 1) >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = *((void *)&v107 + 1);
  }
  uint64_t v79 = v107 + v78;
  unint64_t v80 = *((void *)&v107 + 1) - v78;
  if (*((void *)&v107 + 1) - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = *((void *)&v107 + 1) - v78;
  }
  uint64_t v82 = v79 + v81;
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  uint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)uint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  uint64_t v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
LABEL_116:
  }
    abort();
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (!v88)
  {
    uint64_t v89 = 0;
    unsigned int v90 = (char *)(8 * v85);
    long long v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    long long v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
    goto LABEL_112;
  }
  if (v88 >> 61) {
LABEL_117:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v89 = (char *)operator new(8 * v88);
  unsigned int v90 = &v89[8 * v85];
  long long v91 = &v89[8 * v88];
  *(void *)unsigned int v90 = v72;
  uint64_t v76 = (uint64_t)(v90 + 8);
  long long v92 = (char *)(v75 - v84);
  if (v75 != v84)
  {
LABEL_100:
    unint64_t v93 = (unint64_t)(v92 - 8);
    if (v93 < 0x78
      || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
    {
      goto LABEL_122;
    }
    uint64_t v94 = (v93 >> 3) + 1;
    uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v96 = &v75[-v95];
    v90 -= v95;
    unsigned int v97 = &v89[8 * v85 - 16];
    long long v98 = v75 - 16;
    uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v101 = *((_OWORD *)v98 - 1);
      long long v100 = *(_OWORD *)v98;
      *((_OWORD *)v98 - 1) = 0uLL;
      *(_OWORD *)long long v98 = 0uLL;
      *((_OWORD *)v97 - 1) = v101;
      *(_OWORD *)unsigned int v97 = v100;
      v97 -= 32;
      v98 -= 32;
      v99 -= 4;
    }
    while (v99);
    uint64_t v75 = v96;
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_122:
      do
      {
        uint64_t v102 = *((void *)v75 - 1);
        v75 -= 8;
        *(void *)uint64_t v75 = 0;
        *((void *)v90 - 1) = v102;
        v90 -= 8;
      }
      while (v75 != v84);
    }
    uint64_t v75 = (char *)a1[1];
    unsigned int v103 = (char *)a1[2];
    a1[1] = v90;
    a1[2] = v76;
    a1[3] = v91;
    while (v103 != v75)
    {
      uint64_t v105 = *((void *)v103 - 1);
      v103 -= 8;
      uint64_t v104 = v105;
      *(void *)unsigned int v103 = 0;
      if (v105) {
        (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
      }
    }
    goto LABEL_113;
  }
LABEL_112:
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
}

uint64_t mlir::arith::NegFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unsigned int v72 = *(void ***)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v72);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    return *(void *)(*(void *)(DefiningOp + 72) + 24) | 4;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  uint64_t v5 = *v4;
  if (*v4)
  {
    unint64_t v6 = *(void **)(*(void *)v5 + 136);
    if (v6 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (v6 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      {
        if (mlir::DenseElementsAttr::classof(*v4)) {
          uint64_t v7 = v5;
        }
        else {
          uint64_t v7 = 0;
        }
        unsigned int v72 = (void **)v7;
        if (v7 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v72))
        {
          uint64_t v61 = *v4;
          mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v69);
          mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v72, (uint64_t)&v69);
          uint64_t v8 = (void *)v70[0];
          unint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v9);
          if (v10 != v8)
          {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
            if (!v75) {
              goto LABEL_33;
            }
            goto LABEL_30;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
          if (v75)
          {
LABEL_30:
            uint64_t Value = (llvm::APFloatBase *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
            uint64_t v5 = mlir::DenseElementsAttr::get(Value, v19, (uint64_t)&v72, 1);
            if (!v75) {
              return v5 & 0xFFFFFFFFFFFFFFFBLL;
            }
            if (v10 == (void *)v73) {
              goto LABEL_32;
            }
            goto LABEL_25;
          }
LABEL_33:
          uint64_t v5 = 0;
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v4 + 8)) {
          goto LABEL_33;
        }
        unint64_t v12 = (void *)*v4;
        if (v12)
        {
          uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
          uint64_t v65 = v12;
          uint64_t v66 = v13;
          mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v65, (uint64_t)&v61);
          if (!v64) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v65, (uint64_t)&v61);
          if (!v64) {
            goto LABEL_33;
          }
        }
        __int16 v58 = v61;
        if ((_BYTE)v61) {
          unint64_t v59 = v62;
        }
        else {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v62 + 16))(&v59);
        }
        uint64_t v60 = v63;
        unsigned int v72 = (void **)v74;
        uint64_t v73 = 0x100000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v65, v66);
        if (NumElements > HIDWORD(v73))
        {
          unint64_t v69 = 0;
          uint64_t v21 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v72, v74, NumElements, 32, &v69);
          uint64_t v22 = (uint64_t)v21;
          uint64_t v23 = v72;
          uint64_t v24 = v73;
          if (v73)
          {
            unint64_t v25 = llvm::APFloatBase::PPCDoubleDouble(v21);
            uint64_t v26 = (void *)(v22 + 8);
            uint64_t v27 = 32 * v24;
            uint64_t v28 = v23 + 1;
            do
            {
              while (v25 == *v28)
              {
                uint64_t v26 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v26, v28) + 4;
                v28 += 4;
                v27 -= 32;
                if (!v27) {
                  goto LABEL_42;
                }
              }
              uint64_t v26 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v26, (uint64_t)v28) + 32);
              v28 += 4;
              v27 -= 32;
            }
            while (v27);
LABEL_42:
            uint64_t v23 = v72;
            if (v73)
            {
              uint64_t v29 = v72 - 3;
              uint64_t v30 = 4 * v73;
              do
              {
                while (1)
                {
                  uint64_t v31 = (llvm::detail::DoubleAPFloat *)&v29[v30];
                  if (v25 != v29[v30]) {
                    break;
                  }
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v31);
                  v30 -= 4;
                  if (!(v30 * 8)) {
                    goto LABEL_47;
                  }
                }
                llvm::detail::IEEEFloat::~IEEEFloat(v31);
                v30 -= 4;
              }
              while (v30 * 8);
LABEL_47:
              uint64_t v23 = v72;
            }
          }
          int v32 = v69;
          if (v23 != (void **)v74) {
            free(v23);
          }
          unsigned int v72 = (void **)v22;
          HIDWORD(v73) = v32;
        }
        uint64_t v33 = mlir::ElementsAttr::getNumElements((uint64_t)v65, v66);
        if (!v33)
        {
LABEL_73:
          uint64_t ArgOperands = (llvm::APFloatBase *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v65);
          unint64_t v43 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(ArgOperands, v49, (uint64_t)v72, v73);
          uint64_t v5 = (uint64_t)v43;
          uint64_t v50 = v72;
          uint64_t v51 = v73;
          if (v73)
          {
LABEL_76:
            unint64_t v52 = llvm::APFloatBase::PPCDoubleDouble(v43);
            uint64_t v53 = (char *)(v50 - 3);
            uint64_t v54 = 32 * v51;
            do
            {
              while (1)
              {
                uint64_t v55 = (llvm::detail::DoubleAPFloat *)&v53[v54];
                if (v52 != *(void **)&v53[v54]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v55);
                v54 -= 32;
                if (!v54) {
                  goto LABEL_80;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v55);
              v54 -= 32;
            }
            while (v54);
LABEL_80:
            uint64_t v50 = v72;
          }
LABEL_81:
          if (v50 != (void **)v74) {
            free(v50);
          }
          if (!(_BYTE)v58)
          {
            uint64_t v56 = v59;
            unint64_t v59 = 0;
            if (v56) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v56 + 8))(v56);
            }
          }
          if (v64 && !(_BYTE)v61)
          {
            unsigned int v57 = v62;
            uint64_t v62 = 0;
            if (v57) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v57 + 8))(v57);
            }
          }
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v34 = v33;
        uint64_t v35 = v60;
        while (1)
        {
          if (HIBYTE(v58)) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35;
          }
          if ((_BYTE)v58)
          {
            uint64_t v37 = (char *)v59 + 32 * v36;
            unint64_t v39 = (void *)*((void *)v37 + 1);
            unint64_t v38 = (const llvm::detail::DoubleAPFloat *)(v37 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v59) == v39) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v68, v38);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v68, v38);
            }
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v59 + 24))(&v67);
          }
          mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v69, (uint64_t)&v67);
          unint64_t v40 = (void *)v68[0];
          uint64_t v42 = llvm::APFloatBase::PPCDoubleDouble(v41);
          if (v42 == v40)
          {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v68);
            if (!v71)
            {
LABEL_75:
              uint64_t v5 = 0;
              uint64_t v50 = v72;
              uint64_t v51 = v73;
              if (v73) {
                goto LABEL_76;
              }
              goto LABEL_81;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v68);
            if (!v71) {
              goto LABEL_75;
            }
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v72, (unint64_t)&v69, 1);
          uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v72[4 * v73 + 1];
          uint64_t v47 = (void *)*((void *)Address + 1);
          unint64_t v46 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
          if (v42 == v47)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v45, v46);
            LODWORD(v73) = v73 + 1;
            if (v71)
            {
LABEL_71:
              if (v42 == (void *)v70[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
              }
            }
          }
          else
          {
            llvm::detail::IEEEFloat::IEEEFloat(v45, v46);
            LODWORD(v73) = v73 + 1;
            if (v71) {
              goto LABEL_71;
            }
          }
          uint64_t v35 = ++v60;
          if (!--v34) {
            goto LABEL_73;
          }
        }
      }
      uint64_t v61 = *v4;
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v61, (uint64_t)&v69);
      mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v72, (uint64_t)&v69);
      uint64_t v14 = (void *)v70[0];
      uint64_t v16 = llvm::APFloatBase::PPCDoubleDouble(v15);
      if (v16 == v14)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
        if (!v75) {
          goto LABEL_33;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
        if (!v75) {
          goto LABEL_33;
        }
      }
      uint64_t v17 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61);
      uint64_t v5 = mlir::FloatAttr::get(v17, (uint64_t)&v72);
      if (v75)
      {
        if (v16 == (void *)v73)
        {
LABEL_32:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v73);
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
LABEL_25:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v73);
      }
    }
  }
  return v5 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::AddFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  uint64_t v99 = mlir::m_NegZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
  }
  unint64_t v10 = (void *)v3[1];
  if (!v10)
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  uint64_t v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      unint64_t v20 = v13;
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (uint64_t v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        unint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      unsigned int v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            unint64_t v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          uint64_t v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              unint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              unint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  unint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                unint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                unint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            uint64_t v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                uint64_t v53 = (void *)*((void *)v51 + 1);
                unint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::DoubleAPFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                unsigned int v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            unint64_t v74 = v83;
            unint64_t v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            unint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::SubFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  uint64_t v99 = mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
  }
  unint64_t v10 = (void *)v3[1];
  if (!v10)
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  uint64_t v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      unint64_t v20 = v13;
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (uint64_t v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        unint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      unsigned int v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            unint64_t v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          uint64_t v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              unint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              unint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  unint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                unint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                unint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            uint64_t v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                uint64_t v53 = (void *)*((void *)v51 + 1);
                unint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::DoubleAPFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                unsigned int v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            unint64_t v74 = v83;
            unint64_t v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            unint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaximumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      uint64_t v22 = v15;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((uint64_t v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      uint64_t v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            unint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              uint64_t v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              uint64_t v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  uint64_t v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                uint64_t v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              unint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                unint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                uint64_t v53 = (char *)v84 + 32 * v52;
                uint64_t v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                unsigned int v57 = (char *)v80 + 32 * v56;
                unint64_t v59 = (void *)*((void *)v57 + 1);
                __int16 v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::maximum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              char v64 = (llvm::detail::DoubleAPFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            uint64_t v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            uint64_t v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            unint64_t v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            char v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            uint64_t v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  unint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaxSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v93) = 1;
  *(void *)&long long v93 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v91 = &v93;
  if (!v6)
  {
LABEL_21:
    uint64_t v12 = *(uint64_t **)(a2 + 40);
    uint64_t canMapOperands = *v12;
    if (*v12
      && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v14 = *v12;
    }
    else
    {
      uint64_t v14 = v12[1];
      if (!v14
        || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        if (canMapOperands)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
          {
            uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
            *(void *)&long long v93 = canMapOperands;
            *((void *)&v93 + 1) = v15;
            uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
          }
          else
          {
            uint64_t canMapOperands = 0;
            long long v93 = 0uLL;
          }
        }
        else
        {
          long long v93 = 0uLL;
        }
        uint64_t v14 = v12[1];
        if (v14)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
          {
            uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
            *(void *)&long long v93 = v14;
            *((void *)&v93 + 1) = v16;
            uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
            uint64_t v14 = 0;
            if (canMapOperands && v17 && canMapOperands == v17)
            {
              uint64_t v18 = *v12;
              if (*v12
                && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                uint64_t v14 = *v12;
              }
              else
              {
                uint64_t v19 = (void *)v12[1];
                if (v19)
                {
                  unint64_t v20 = *(void **)(*(void *)v19 + 136);
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                    uint64_t v14 = v12[1];
                  }
                  else {
                    uint64_t v14 = 0;
                  }
                  if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                    return v14 & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                    && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v76 = *v12;
                    uint64_t v73 = v19;
                    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                    {
                      mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                      mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&__p);
                      int v22 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                      if (v22 <= 0) {
                        p_p = &__p;
                      }
                      else {
                        p_p = &v82;
                      }
                      unsigned int v24 = v83;
                      unsigned int v25 = v80;
                      if (v22 <= 0) {
                        unsigned int v24 = v80;
                      }
                      DWORD2(v91) = v24;
                      if (v24 >= 0x41)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)p_p);
                        unsigned int v24 = DWORD2(v91);
                        unsigned int v25 = v80;
                        p_p = (void **)&v91;
                      }
                      uint64_t v26 = *p_p;
                      DWORD2(v93) = v24;
                      *(void *)&long long v93 = v26;
                      LOBYTE(v94[0]) = 1;
                      if (v25 >= 0x41 && __p) {
                        operator delete[](__p);
                      }
                      if (v83 >= 0x41 && v82) {
                        operator delete[](v82);
                      }
                      uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                      if (!LOBYTE(v94[0])) {
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (mlir::DenseElementsAttr::classof(*v12)) {
                      uint64_t v27 = v18;
                    }
                    else {
                      uint64_t v27 = 0;
                    }
                    *(void *)&long long v93 = v27;
                    if (v27
                      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                      && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (uint64_t v29 = 0) : (uint64_t v29 = v28),
                          (*(void *)&long long v93 = v29) != 0
                       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                    {
                      uint64_t v30 = (void *)v12[1];
                      uint64_t v76 = *v12;
                      uint64_t v73 = v30;
                      uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                      if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                      {
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                        long long v91 = v93;
                        long long v92 = v94[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                        long long v91 = v93;
                        long long v92 = v94[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&__p);
                        int v32 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                        if (v32 <= 0) {
                          uint64_t v33 = &__p;
                        }
                        else {
                          uint64_t v33 = &v82;
                        }
                        unsigned int v34 = v83;
                        unsigned int v35 = v80;
                        if (v32 <= 0) {
                          unsigned int v34 = v80;
                        }
                        DWORD2(v91) = v34;
                        if (v34 >= 0x41)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)v33);
                          unsigned int v34 = DWORD2(v91);
                          unsigned int v35 = v80;
                          uint64_t v33 = (void **)&v91;
                        }
                        uint64_t v36 = *v33;
                        DWORD2(v93) = v34;
                        *(void *)&long long v93 = v36;
                        LOBYTE(v94[0]) = 1;
                        if (v35 >= 0x41 && __p) {
                          operator delete[](__p);
                        }
                        if (v83 >= 0x41 && v82) {
                          operator delete[](v82);
                        }
                        uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                        uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                        if (!LOBYTE(v94[0])) {
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
                        }
LABEL_64:
                        if (DWORD2(v93) >= 0x41 && (void)v93) {
                          operator delete[]((void *)v93);
                        }
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                    }
                    {
                      uint64_t v38 = (void *)*v12;
                      uint64_t v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                      uint64_t v87 = v38;
                      uint64_t v88 = v39;
                      uint64_t v40 = (void *)v12[1];
                      uint64_t v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                      v86[0] = v40;
                      v86[1] = v41;
                      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                      {
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                        uint64_t v14 = 0;
                        int v44 = v85;
                        if (BYTE8(v92) && v85)
                        {
                          LOWORD(__p) = v91;
                          if ((_BYTE)v91) {
                            uint64_t v80 = *((void *)&v91 + 1);
                          }
                          else {
                            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v91 + 1) + 16))(&v80);
                          }
                          uint64_t v81 = v92;
                          LOWORD(v76) = (_WORD)v82;
                          if ((_BYTE)v82) {
                            uint64_t v77 = v83;
                          }
                          else {
                            (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 16))(&v77);
                          }
                          uint64_t v78 = v84;
                          *(void *)&long long v93 = v94;
                          *((void *)&v93 + 1) = 0x400000000;
                          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                          uint64_t v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                          if (v46)
                          {
                            uint64_t v47 = v46;
                            uint64_t v48 = v81;
                            while (1)
                            {
                              if (BYTE1(__p)) {
                                uint64_t v49 = 0;
                              }
                              else {
                                uint64_t v49 = v48;
                              }
                              if ((_BYTE)__p)
                              {
                                uint64_t v50 = v80 + 16 * v49;
                                unsigned int v72 = *(_DWORD *)(v50 + 8);
                                if (v72 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                }
                                else {
                                  uint64_t v71 = *(void **)v50;
                                }
                              }
                              else
                              {
                                (*(void (**)(void **__return_ptr))(*(void *)v80 + 24))(&v71);
                              }
                              if (BYTE1(v76)) {
                                uint64_t v51 = 0;
                              }
                              else {
                                uint64_t v51 = v78;
                              }
                              if ((_BYTE)v76)
                              {
                                uint64_t v52 = v77 + 16 * v51;
                                unsigned int v70 = *(_DWORD *)(v52 + 8);
                                if (v70 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                }
                                else {
                                  uint64_t v69 = *(void **)v52;
                                }
                              }
                              else
                              {
                                (*(void (**)(void **__return_ptr))(*(void *)v77 + 24))(&v69);
                              }
                              int v53 = llvm::APInt::compareSigned((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                              if (v53 <= 0) {
                                uint64_t v54 = &v69;
                              }
                              else {
                                uint64_t v54 = &v71;
                              }
                              unsigned int v55 = v72;
                              unsigned int v56 = v70;
                              if (v53 <= 0) {
                                unsigned int v55 = v70;
                              }
                              unsigned int v90 = v55;
                              if (v55 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)v89, (const void **)v54);
                                unsigned int v55 = v90;
                                unsigned int v56 = v70;
                                uint64_t v54 = (void **)v89;
                              }
                              unsigned int v57 = *v54;
                              unsigned int v74 = v55;
                              uint64_t v73 = v57;
                              char v75 = 1;
                              if (v56 >= 0x41 && v69) {
                                operator delete[](v69);
                              }
                              if (v72 >= 0x41 && v71) {
                                operator delete[](v71);
                              }
                              if (!v75) {
                                break;
                              }
                              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                              unint64_t v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                              unsigned int v60 = *((_DWORD *)Address + 2);
                              *((_DWORD *)v59 + 2) = v60;
                              if (v60 > 0x40) {
                                llvm::APInt::initSlowCase(v59, (const void **)Address);
                              }
                              else {
                                *(void *)unint64_t v59 = *(void *)Address;
                              }
                              ++DWORD2(v93);
                              if (v75 && v74 >= 0x41 && v73) {
                                operator delete[](v73);
                              }
                              uint64_t v48 = ++v81;
                              ++v78;
                              if (!--v47) {
                                goto LABEL_154;
                              }
                            }
                            uint64_t v14 = 0;
                          }
                          else
                          {
LABEL_154:
                            uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                            uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                          }
                          uint64_t v62 = (char *)v93;
                          if (DWORD2(v93))
                          {
                            uint64_t v63 = 16 * DWORD2(v93);
                            do
                            {
                              if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                              {
                                char v64 = *(void **)&v62[v63 - 16];
                                if (v64) {
                                  operator delete[](v64);
                                }
                              }
                              v63 -= 16;
                            }
                            while (v63);
                            uint64_t v62 = (char *)v93;
                          }
                          if (v62 != (char *)v94) {
                            free(v62);
                          }
                          if (!(_BYTE)v76)
                          {
                            uint64_t v65 = v77;
                            uint64_t v77 = 0;
                            if (v65) {
                              (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                            }
                          }
                          if (!(_BYTE)__p)
                          {
                            uint64_t v66 = v80;
                            uint64_t v80 = 0;
                            if (v66) {
                              (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                            }
                          }
                          int v44 = v85;
                        }
                        if (v44)
                        {
                          if (!(_BYTE)v82)
                          {
                            uint64_t v67 = v83;
                            uint64_t v83 = 0;
                            if (v67) {
                              (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                            }
                          }
                        }
                        if (BYTE8(v92))
                        {
                          if (!(_BYTE)v91)
                          {
                            uint64_t v68 = *((void *)&v91 + 1);
                            *((void *)&v91 + 1) = 0;
                            if (v68) {
                              (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                            }
                          }
                        }
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                  }
                }
                uint64_t v14 = 0;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
            long long v93 = 0uLL;
          }
        }
        else
        {
          long long v93 = 0uLL;
        }
      }
    }
    return v14 & 0xFFFFFFFFFFFFFFFBLL;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  unsigned int v9 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93) <= 0x40)
    {
      if ((void)v93 == ~(-1 << (BYTE8(v93) - 1)))
      {
        uint64_t v10 = 1;
LABEL_14:
        uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v10 + 24) | 4;
        goto LABEL_15;
      }
      if ((void)v93 != 1 << (BYTE8(v93) - 1)) {
        goto LABEL_21;
      }
LABEL_12:
      uint64_t v10 = 0;
      goto LABEL_14;
    }
    uint64_t v2 = (DWORD2(v93) - 1);
    if ((*(void *)(v93 + 8 * (v2 >> 6)) >> (BYTE8(v93) - 1)))
    {
      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v93) == v2) {
        goto LABEL_12;
      }
      LODWORD(v10) = 1;
    }
    else
    {
      uint64_t v10 = 1;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) == v2) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = (void *)v93;
    if ((void)v93) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
LABEL_15:
  LODWORD(v10) = v8 ^ 1;
  if (v9 < 0x41 || (uint64_t v11 = (void *)v93) == 0)
  {
LABEL_20:
    if (!v10) {
      return v2;
    }
    goto LABEL_21;
  }
LABEL_17:
  operator delete[](v11);
  if (v10) {
    goto LABEL_21;
  }
  return v2;
}

uint64_t mlir::arith::MaxUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v93) = 1;
  *(void *)&long long v93 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v91 = &v93;
  if (!v6) {
    goto LABEL_17;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  char v9 = v8;
  unsigned int v10 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93))
    {
      if (DWORD2(v93) > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) != v10)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v93) != v10)
          {
            if ((void)v93) {
              operator delete[]((void *)v93);
            }
LABEL_17:
            uint64_t v12 = *(uint64_t **)(a2 + 40);
            uint64_t canMapOperands = *v12;
            if (*v12
              && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v14 = *v12;
            }
            else
            {
              uint64_t v14 = v12[1];
              if (!v14
                || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                if (canMapOperands)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
                  {
                    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                    *(void *)&long long v93 = canMapOperands;
                    *((void *)&v93 + 1) = v15;
                    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                  }
                  else
                  {
                    uint64_t canMapOperands = 0;
                    long long v93 = 0uLL;
                  }
                }
                else
                {
                  long long v93 = 0uLL;
                }
                uint64_t v14 = v12[1];
                if (v14)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
                  {
                    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                    *(void *)&long long v93 = v14;
                    *((void *)&v93 + 1) = v16;
                    uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                    uint64_t v14 = 0;
                    if (canMapOperands && v17 && canMapOperands == v17)
                    {
                      uint64_t v18 = *v12;
                      if (*v12
                        && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                      {
                        uint64_t v14 = *v12;
                      }
                      else
                      {
                        uint64_t v19 = (void *)v12[1];
                        if (v19)
                        {
                          unint64_t v20 = *(void **)(*(void *)v19 + 136);
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                            uint64_t v14 = v12[1];
                          }
                          else {
                            uint64_t v14 = 0;
                          }
                          if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                            && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                          {
                            uint64_t v76 = *v12;
                            uint64_t v73 = v19;
                            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                            {
                              mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                              mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&__p);
                              int v22 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                              if (v22 <= 0) {
                                p_p = &__p;
                              }
                              else {
                                p_p = &v82;
                              }
                              unsigned int v24 = v83;
                              unsigned int v25 = v80;
                              if (v22 <= 0) {
                                unsigned int v24 = v80;
                              }
                              DWORD2(v91) = v24;
                              if (v24 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)p_p);
                                unsigned int v24 = DWORD2(v91);
                                unsigned int v25 = v80;
                                p_p = (void **)&v91;
                              }
                              uint64_t v26 = *p_p;
                              DWORD2(v93) = v24;
                              *(void *)&long long v93 = v26;
                              LOBYTE(v94[0]) = 1;
                              if (v25 >= 0x41 && __p) {
                                operator delete[](__p);
                              }
                              if (v83 >= 0x41 && v82) {
                                operator delete[](v82);
                              }
                              uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                              if (!LOBYTE(v94[0])) {
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                              goto LABEL_60;
                            }
                          }
                          else
                          {
                            if (mlir::DenseElementsAttr::classof(*v12)) {
                              uint64_t v27 = v18;
                            }
                            else {
                              uint64_t v27 = 0;
                            }
                            *(void *)&long long v93 = v27;
                            if (v27
                              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                              && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (uint64_t v29 = 0) : (uint64_t v29 = v28),
                                  (*(void *)&long long v93 = v29) != 0
                               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                            {
                              uint64_t v30 = (void *)v12[1];
                              uint64_t v76 = *v12;
                              uint64_t v73 = v30;
                              uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                              if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                              {
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                                long long v91 = v93;
                                long long v92 = v94[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                                long long v91 = v93;
                                long long v92 = v94[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&__p);
                                int v32 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                                if (v32 <= 0) {
                                  uint64_t v33 = &__p;
                                }
                                else {
                                  uint64_t v33 = &v82;
                                }
                                unsigned int v34 = v83;
                                unsigned int v35 = v80;
                                if (v32 <= 0) {
                                  unsigned int v34 = v80;
                                }
                                DWORD2(v91) = v34;
                                if (v34 >= 0x41)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)v33);
                                  unsigned int v34 = DWORD2(v91);
                                  unsigned int v35 = v80;
                                  uint64_t v33 = (void **)&v91;
                                }
                                uint64_t v36 = *v33;
                                DWORD2(v93) = v34;
                                *(void *)&long long v93 = v36;
                                LOBYTE(v94[0]) = 1;
                                if (v35 >= 0x41 && __p) {
                                  operator delete[](__p);
                                }
                                if (v83 >= 0x41 && v82) {
                                  operator delete[](v82);
                                }
                                uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                                if (!LOBYTE(v94[0])) {
                                  return v14 & 0xFFFFFFFFFFFFFFFBLL;
                                }
LABEL_60:
                                if (DWORD2(v93) >= 0x41 && (void)v93) {
                                  operator delete[]((void *)v93);
                                }
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                            else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                                   && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                            }
                            {
                              uint64_t v38 = (void *)*v12;
                              uint64_t v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                              uint64_t v87 = v38;
                              uint64_t v88 = v39;
                              uint64_t v40 = (void *)v12[1];
                              uint64_t v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                              v86[0] = v40;
                              v86[1] = v41;
                              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                              if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                              {
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                                uint64_t v14 = 0;
                                int v44 = v85;
                                if (BYTE8(v92) && v85)
                                {
                                  LOWORD(__p) = v91;
                                  if ((_BYTE)v91) {
                                    uint64_t v80 = *((void *)&v91 + 1);
                                  }
                                  else {
                                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v91 + 1) + 16))(&v80);
                                  }
                                  uint64_t v81 = v92;
                                  LOWORD(v76) = (_WORD)v82;
                                  if ((_BYTE)v82) {
                                    uint64_t v77 = v83;
                                  }
                                  else {
                                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 16))(&v77);
                                  }
                                  uint64_t v78 = v84;
                                  *(void *)&long long v93 = v94;
                                  *((void *)&v93 + 1) = 0x400000000;
                                  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                                  uint64_t v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                  if (v46)
                                  {
                                    uint64_t v47 = v46;
                                    uint64_t v48 = v81;
                                    while (1)
                                    {
                                      if (BYTE1(__p)) {
                                        uint64_t v49 = 0;
                                      }
                                      else {
                                        uint64_t v49 = v48;
                                      }
                                      if ((_BYTE)__p)
                                      {
                                        uint64_t v50 = v80 + 16 * v49;
                                        unsigned int v72 = *(_DWORD *)(v50 + 8);
                                        if (v72 > 0x40) {
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                        }
                                        else {
                                          uint64_t v71 = *(void **)v50;
                                        }
                                      }
                                      else
                                      {
                                        (*(void (**)(void **__return_ptr))(*(void *)v80 + 24))(&v71);
                                      }
                                      if (BYTE1(v76)) {
                                        uint64_t v51 = 0;
                                      }
                                      else {
                                        uint64_t v51 = v78;
                                      }
                                      if ((_BYTE)v76)
                                      {
                                        uint64_t v52 = v77 + 16 * v51;
                                        unsigned int v70 = *(_DWORD *)(v52 + 8);
                                        if (v70 > 0x40) {
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                        }
                                        else {
                                          uint64_t v69 = *(void **)v52;
                                        }
                                      }
                                      else
                                      {
                                        (*(void (**)(void **__return_ptr))(*(void *)v77 + 24))(&v69);
                                      }
                                      int v53 = llvm::APInt::compare((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                      if (v53 <= 0) {
                                        uint64_t v54 = &v69;
                                      }
                                      else {
                                        uint64_t v54 = &v71;
                                      }
                                      unsigned int v55 = v72;
                                      unsigned int v56 = v70;
                                      if (v53 <= 0) {
                                        unsigned int v55 = v70;
                                      }
                                      unsigned int v90 = v55;
                                      if (v55 >= 0x41)
                                      {
                                        llvm::APInt::initSlowCase((llvm::APInt *)v89, (const void **)v54);
                                        unsigned int v55 = v90;
                                        unsigned int v56 = v70;
                                        uint64_t v54 = (void **)v89;
                                      }
                                      unsigned int v57 = *v54;
                                      unsigned int v74 = v55;
                                      uint64_t v73 = v57;
                                      char v75 = 1;
                                      if (v56 >= 0x41 && v69) {
                                        operator delete[](v69);
                                      }
                                      if (v72 >= 0x41 && v71) {
                                        operator delete[](v71);
                                      }
                                      if (!v75) {
                                        break;
                                      }
                                      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                      unint64_t v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                      unsigned int v60 = *((_DWORD *)Address + 2);
                                      *((_DWORD *)v59 + 2) = v60;
                                      if (v60 > 0x40) {
                                        llvm::APInt::initSlowCase(v59, (const void **)Address);
                                      }
                                      else {
                                        *(void *)unint64_t v59 = *(void *)Address;
                                      }
                                      ++DWORD2(v93);
                                      if (v75 && v74 >= 0x41 && v73) {
                                        operator delete[](v73);
                                      }
                                      uint64_t v48 = ++v81;
                                      ++v78;
                                      if (!--v47) {
                                        goto LABEL_154;
                                      }
                                    }
                                    uint64_t v14 = 0;
                                  }
                                  else
                                  {
LABEL_154:
                                    uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                    uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                                  }
                                  uint64_t v62 = (char *)v93;
                                  if (DWORD2(v93))
                                  {
                                    uint64_t v63 = 16 * DWORD2(v93);
                                    do
                                    {
                                      if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                      {
                                        char v64 = *(void **)&v62[v63 - 16];
                                        if (v64) {
                                          operator delete[](v64);
                                        }
                                      }
                                      v63 -= 16;
                                    }
                                    while (v63);
                                    uint64_t v62 = (char *)v93;
                                  }
                                  if (v62 != (char *)v94) {
                                    free(v62);
                                  }
                                  if (!(_BYTE)v76)
                                  {
                                    uint64_t v65 = v77;
                                    uint64_t v77 = 0;
                                    if (v65) {
                                      (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                    }
                                  }
                                  if (!(_BYTE)__p)
                                  {
                                    uint64_t v66 = v80;
                                    uint64_t v80 = 0;
                                    if (v66) {
                                      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                                    }
                                  }
                                  int v44 = v85;
                                }
                                if (v44)
                                {
                                  if (!(_BYTE)v82)
                                  {
                                    uint64_t v67 = v83;
                                    uint64_t v83 = 0;
                                    if (v67) {
                                      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                                    }
                                  }
                                }
                                if (BYTE8(v92))
                                {
                                  if (!(_BYTE)v91)
                                  {
                                    uint64_t v68 = *((void *)&v91 + 1);
                                    *((void *)&v91 + 1) = 0;
                                    if (v68) {
                                      (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                                    }
                                  }
                                }
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                          }
                        }
                        uint64_t v14 = 0;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v14 = 0;
                    long long v93 = 0uLL;
                  }
                }
                else
                {
                  long long v93 = 0uLL;
                }
              }
            }
            return v14 & 0xFFFFFFFFFFFFFFFBLL;
          }
          uint64_t v11 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v11 = v93;
        if ((void)v93 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v93))
        {
          if ((void)v93) {
            goto LABEL_17;
          }
          goto LABEL_12;
        }
      }
    }
    uint64_t v11 = 1;
LABEL_12:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (void)v93) {
    operator delete[]((void *)v93);
  }
  if ((v9 & 1) == 0) {
    goto LABEL_17;
  }
  return v2;
}

uint64_t mlir::arith::MinimumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      int v22 = v15;
    }
    else {
      int v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((uint64_t v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      long long v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            uint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              uint64_t v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              int v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  uint64_t v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                uint64_t v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              uint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                uint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                int v53 = (char *)v84 + 32 * v52;
                unsigned int v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                unsigned int v57 = (char *)v80 + 32 * v56;
                unint64_t v59 = (void *)*((void *)v57 + 1);
                __int16 v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minimum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              char v64 = (llvm::detail::DoubleAPFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            unsigned int v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            uint64_t v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            unsigned int v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            char v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            uint64_t v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  unint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinNumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      int v22 = v15;
    }
    else {
      int v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((uint64_t v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (v24 = 0) : (v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      long long v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            uint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              uint64_t v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              int v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  uint64_t v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                uint64_t v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              uint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                uint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                int v53 = (char *)v84 + 32 * v52;
                unsigned int v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                unsigned int v57 = (char *)v80 + 32 * v56;
                unint64_t v59 = (void *)*((void *)v57 + 1);
                __int16 v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minnum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              char v64 = (llvm::detail::DoubleAPFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            unsigned int v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            uint64_t v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            unsigned int v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            char v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            uint64_t v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  unint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v93) = 1;
  *(void *)&long long v93 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v91 = &v93;
  if (!v6) {
    goto LABEL_22;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  unsigned int v9 = DWORD2(v93);
  if (!v8) {
    goto LABEL_16;
  }
  if (DWORD2(v93) <= 0x40)
  {
    uint64_t v10 = 1;
    if ((void)v93 != 1 << (BYTE8(v93) - 1))
    {
      if ((void)v93 != ~(-1 << (BYTE8(v93) - 1))) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v10 + 24) | 4;
LABEL_16:
    LODWORD(v10) = v8 ^ 1;
    if (v9 >= 0x41)
    {
      uint64_t v11 = (void *)v93;
      if ((void)v93)
      {
LABEL_18:
        operator delete[](v11);
        if ((v10 & 1) == 0) {
          return v2;
        }
LABEL_22:
        uint64_t v12 = *(uint64_t **)(a2 + 40);
        uint64_t canMapOperands = *v12;
        if (*v12
          && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v14 = *v12;
        }
        else
        {
          uint64_t v14 = v12[1];
          if (!v14
            || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (canMapOperands)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
              {
                uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                *(void *)&long long v93 = canMapOperands;
                *((void *)&v93 + 1) = v15;
                uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
              }
              else
              {
                uint64_t canMapOperands = 0;
                long long v93 = 0uLL;
              }
            }
            else
            {
              long long v93 = 0uLL;
            }
            uint64_t v14 = v12[1];
            if (v14)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
              {
                uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                *(void *)&long long v93 = v14;
                *((void *)&v93 + 1) = v16;
                uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                uint64_t v14 = 0;
                if (canMapOperands && v17 && canMapOperands == v17)
                {
                  uint64_t v18 = *v12;
                  if (*v12
                    && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                  {
                    uint64_t v14 = *v12;
                  }
                  else
                  {
                    uint64_t v19 = (void *)v12[1];
                    if (v19)
                    {
                      unint64_t v20 = *(void **)(*(void *)v19 + 136);
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                        uint64_t v14 = v12[1];
                      }
                      else {
                        uint64_t v14 = 0;
                      }
                      if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                        && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                      {
                        uint64_t v76 = *v12;
                        uint64_t v73 = v19;
                        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                        if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                        {
                          mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                          mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&__p);
                          int v22 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                          if (v22 >= 0) {
                            p_p = &__p;
                          }
                          else {
                            p_p = &v82;
                          }
                          unsigned int v24 = v83;
                          unsigned int v25 = v80;
                          if (v22 >= 0) {
                            unsigned int v24 = v80;
                          }
                          DWORD2(v91) = v24;
                          if (v24 >= 0x41)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)p_p);
                            unsigned int v24 = DWORD2(v91);
                            unsigned int v25 = v80;
                            p_p = (void **)&v91;
                          }
                          uint64_t v26 = *p_p;
                          DWORD2(v93) = v24;
                          *(void *)&long long v93 = v26;
                          LOBYTE(v94[0]) = 1;
                          if (v25 >= 0x41 && __p) {
                            operator delete[](__p);
                          }
                          if (v83 >= 0x41 && v82) {
                            operator delete[](v82);
                          }
                          uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                          if (!LOBYTE(v94[0])) {
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                          goto LABEL_65;
                        }
                      }
                      else
                      {
                        if (mlir::DenseElementsAttr::classof(*v12)) {
                          uint64_t v27 = v18;
                        }
                        else {
                          uint64_t v27 = 0;
                        }
                        *(void *)&long long v93 = v27;
                        if (v27
                          && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                          && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (uint64_t v29 = 0) : (uint64_t v29 = v28),
                              (*(void *)&long long v93 = v29) != 0
                           && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                        {
                          uint64_t v30 = (void *)v12[1];
                          uint64_t v76 = *v12;
                          uint64_t v73 = v30;
                          uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                          if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                          {
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                            long long v91 = v93;
                            long long v92 = v94[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                            long long v91 = v93;
                            long long v92 = v94[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&__p);
                            int v32 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                            if (v32 >= 0) {
                              uint64_t v33 = &__p;
                            }
                            else {
                              uint64_t v33 = &v82;
                            }
                            unsigned int v34 = v83;
                            unsigned int v35 = v80;
                            if (v32 >= 0) {
                              unsigned int v34 = v80;
                            }
                            DWORD2(v91) = v34;
                            if (v34 >= 0x41)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)v33);
                              unsigned int v34 = DWORD2(v91);
                              unsigned int v35 = v80;
                              uint64_t v33 = (void **)&v91;
                            }
                            uint64_t v36 = *v33;
                            DWORD2(v93) = v34;
                            *(void *)&long long v93 = v36;
                            LOBYTE(v94[0]) = 1;
                            if (v35 >= 0x41 && __p) {
                              operator delete[](__p);
                            }
                            if (v83 >= 0x41 && v82) {
                              operator delete[](v82);
                            }
                            uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                            uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                            if (!LOBYTE(v94[0])) {
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
LABEL_65:
                            if (DWORD2(v93) >= 0x41 && (void)v93) {
                              operator delete[]((void *)v93);
                            }
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                        else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                               && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                        }
                        {
                          uint64_t v38 = (void *)*v12;
                          uint64_t v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                          uint64_t v87 = v38;
                          uint64_t v88 = v39;
                          uint64_t v40 = (void *)v12[1];
                          uint64_t v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                          v86[0] = v40;
                          v86[1] = v41;
                          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                          if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                          {
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                            uint64_t v14 = 0;
                            int v44 = v85;
                            if (BYTE8(v92) && v85)
                            {
                              LOWORD(__p) = v91;
                              if ((_BYTE)v91) {
                                uint64_t v80 = *((void *)&v91 + 1);
                              }
                              else {
                                (*(void (**)(uint64_t *__return_ptr))(**((void **)&v91 + 1) + 16))(&v80);
                              }
                              uint64_t v81 = v92;
                              LOWORD(v76) = (_WORD)v82;
                              if ((_BYTE)v82) {
                                uint64_t v77 = v83;
                              }
                              else {
                                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 16))(&v77);
                              }
                              uint64_t v78 = v84;
                              *(void *)&long long v93 = v94;
                              *((void *)&v93 + 1) = 0x400000000;
                              unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                              llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                              uint64_t v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                              if (v46)
                              {
                                uint64_t v47 = v46;
                                uint64_t v48 = v81;
                                while (1)
                                {
                                  if (BYTE1(__p)) {
                                    uint64_t v49 = 0;
                                  }
                                  else {
                                    uint64_t v49 = v48;
                                  }
                                  if ((_BYTE)__p)
                                  {
                                    uint64_t v50 = v80 + 16 * v49;
                                    unsigned int v72 = *(_DWORD *)(v50 + 8);
                                    if (v72 > 0x40) {
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                    }
                                    else {
                                      uint64_t v71 = *(void **)v50;
                                    }
                                  }
                                  else
                                  {
                                    (*(void (**)(void **__return_ptr))(*(void *)v80 + 24))(&v71);
                                  }
                                  if (BYTE1(v76)) {
                                    uint64_t v51 = 0;
                                  }
                                  else {
                                    uint64_t v51 = v78;
                                  }
                                  if ((_BYTE)v76)
                                  {
                                    uint64_t v52 = v77 + 16 * v51;
                                    unsigned int v70 = *(_DWORD *)(v52 + 8);
                                    if (v70 > 0x40) {
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                    }
                                    else {
                                      uint64_t v69 = *(void **)v52;
                                    }
                                  }
                                  else
                                  {
                                    (*(void (**)(void **__return_ptr))(*(void *)v77 + 24))(&v69);
                                  }
                                  int v53 = llvm::APInt::compareSigned((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                  if (v53 >= 0) {
                                    uint64_t v54 = &v69;
                                  }
                                  else {
                                    uint64_t v54 = &v71;
                                  }
                                  unsigned int v55 = v72;
                                  unsigned int v56 = v70;
                                  if (v53 >= 0) {
                                    unsigned int v55 = v70;
                                  }
                                  unsigned int v90 = v55;
                                  if (v55 >= 0x41)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)v89, (const void **)v54);
                                    unsigned int v55 = v90;
                                    unsigned int v56 = v70;
                                    uint64_t v54 = (void **)v89;
                                  }
                                  unsigned int v57 = *v54;
                                  unsigned int v74 = v55;
                                  uint64_t v73 = v57;
                                  char v75 = 1;
                                  if (v56 >= 0x41 && v69) {
                                    operator delete[](v69);
                                  }
                                  if (v72 >= 0x41 && v71) {
                                    operator delete[](v71);
                                  }
                                  if (!v75) {
                                    break;
                                  }
                                  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                  unint64_t v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                  unsigned int v60 = *((_DWORD *)Address + 2);
                                  *((_DWORD *)v59 + 2) = v60;
                                  if (v60 > 0x40) {
                                    llvm::APInt::initSlowCase(v59, (const void **)Address);
                                  }
                                  else {
                                    *(void *)unint64_t v59 = *(void *)Address;
                                  }
                                  ++DWORD2(v93);
                                  if (v75 && v74 >= 0x41 && v73) {
                                    operator delete[](v73);
                                  }
                                  uint64_t v48 = ++v81;
                                  ++v78;
                                  if (!--v47) {
                                    goto LABEL_155;
                                  }
                                }
                                uint64_t v14 = 0;
                              }
                              else
                              {
LABEL_155:
                                uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                              }
                              uint64_t v62 = (char *)v93;
                              if (DWORD2(v93))
                              {
                                uint64_t v63 = 16 * DWORD2(v93);
                                do
                                {
                                  if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                  {
                                    char v64 = *(void **)&v62[v63 - 16];
                                    if (v64) {
                                      operator delete[](v64);
                                    }
                                  }
                                  v63 -= 16;
                                }
                                while (v63);
                                uint64_t v62 = (char *)v93;
                              }
                              if (v62 != (char *)v94) {
                                free(v62);
                              }
                              if (!(_BYTE)v76)
                              {
                                uint64_t v65 = v77;
                                uint64_t v77 = 0;
                                if (v65) {
                                  (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                }
                              }
                              if (!(_BYTE)__p)
                              {
                                uint64_t v66 = v80;
                                uint64_t v80 = 0;
                                if (v66) {
                                  (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                                }
                              }
                              int v44 = v85;
                            }
                            if (v44)
                            {
                              if (!(_BYTE)v82)
                              {
                                uint64_t v67 = v83;
                                uint64_t v83 = 0;
                                if (v67) {
                                  (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                                }
                              }
                            }
                            if (BYTE8(v92))
                            {
                              if (!(_BYTE)v91)
                              {
                                uint64_t v68 = *((void *)&v91 + 1);
                                *((void *)&v91 + 1) = 0;
                                if (v68) {
                                  (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                                }
                              }
                            }
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                      }
                    }
                    uint64_t v14 = 0;
                  }
                }
              }
              else
              {
                uint64_t v14 = 0;
                long long v93 = 0uLL;
              }
            }
            else
            {
              long long v93 = 0uLL;
            }
          }
        }
        return v14 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_21;
  }
  uint64_t v2 = (DWORD2(v93) - 1);
  if ((*(void *)(v93 + 8 * (v2 >> 6)) >> (BYTE8(v93) - 1)))
  {
    uint64_t v10 = 1;
    if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v93) == v2) {
      goto LABEL_15;
    }
    uint64_t v11 = (void *)v93;
    if ((void)v93) {
      goto LABEL_18;
    }
  }
  else
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) == v2)
    {
LABEL_14:
      uint64_t v10 = 0;
      goto LABEL_15;
    }
    LODWORD(v10) = 1;
    uint64_t v11 = (void *)v93;
    if ((void)v93) {
      goto LABEL_18;
    }
  }
LABEL_21:
  if (v10) {
    goto LABEL_22;
  }
  return v2;
}

uint64_t mlir::arith::MinUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v93) = 1;
  *(void *)&long long v93 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v91 = &v93;
  if (!v6) {
    goto LABEL_19;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v91, v6);
  char v9 = v8;
  unsigned int v10 = DWORD2(v93);
  if (v8)
  {
    if (DWORD2(v93) > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v93) != v10)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v93) != v10)
        {
          if ((void)v93) {
            operator delete[]((void *)v93);
          }
LABEL_19:
          uint64_t v12 = *(uint64_t **)(a2 + 40);
          uint64_t canMapOperands = *v12;
          if (*v12
            && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            uint64_t v14 = *v12;
          }
          else
          {
            uint64_t v14 = v12[1];
            if (!v14
              || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              if (canMapOperands)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
                {
                  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                  *(void *)&long long v93 = canMapOperands;
                  *((void *)&v93 + 1) = v15;
                  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                }
                else
                {
                  uint64_t canMapOperands = 0;
                  long long v93 = 0uLL;
                }
              }
              else
              {
                long long v93 = 0uLL;
              }
              uint64_t v14 = v12[1];
              if (v14)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
                {
                  uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                  *(void *)&long long v93 = v14;
                  *((void *)&v93 + 1) = v16;
                  uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v93);
                  uint64_t v14 = 0;
                  if (canMapOperands && v17 && canMapOperands == v17)
                  {
                    uint64_t v18 = *v12;
                    if (*v12
                      && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                    {
                      uint64_t v14 = *v12;
                    }
                    else
                    {
                      uint64_t v19 = (void *)v12[1];
                      if (v19)
                      {
                        unint64_t v20 = *(void **)(*(void *)v19 + 136);
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                          uint64_t v14 = v12[1];
                        }
                        else {
                          uint64_t v14 = 0;
                        }
                        if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
                        }
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                          && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                        {
                          uint64_t v76 = *v12;
                          uint64_t v73 = v19;
                          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
                          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
                          {
                            mlir::IntegerAttr::getValue(&v76, (llvm::APInt *)&v82);
                            mlir::IntegerAttr::getValue(&v73, (llvm::APInt *)&__p);
                            int v22 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                            if (v22 >= 0) {
                              p_p = &__p;
                            }
                            else {
                              p_p = &v82;
                            }
                            unsigned int v24 = v83;
                            unsigned int v25 = v80;
                            if (v22 >= 0) {
                              unsigned int v24 = v80;
                            }
                            DWORD2(v91) = v24;
                            if (v24 >= 0x41)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)p_p);
                              unsigned int v24 = DWORD2(v91);
                              unsigned int v25 = v80;
                              p_p = (void **)&v91;
                            }
                            uint64_t v26 = *p_p;
                            DWORD2(v93) = v24;
                            *(void *)&long long v93 = v26;
                            LOBYTE(v94[0]) = 1;
                            if (v25 >= 0x41 && __p) {
                              operator delete[](__p);
                            }
                            if (v83 >= 0x41 && v82) {
                              operator delete[](v82);
                            }
                            uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v93);
                            if (!LOBYTE(v94[0])) {
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                            goto LABEL_62;
                          }
                        }
                        else
                        {
                          if (mlir::DenseElementsAttr::classof(*v12)) {
                            uint64_t v27 = v18;
                          }
                          else {
                            uint64_t v27 = 0;
                          }
                          *(void *)&long long v93 = v27;
                          if (v27
                            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)
                            && ((v28 = v12[1], !mlir::DenseElementsAttr::classof(v28)) ? (uint64_t v29 = 0) : (uint64_t v29 = v28),
                                (*(void *)&long long v93 = v29) != 0
                             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v93)))
                          {
                            uint64_t v30 = (void *)v12[1];
                            uint64_t v76 = *v12;
                            uint64_t v73 = v30;
                            uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
                            if (v31 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
                            {
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v93);
                              long long v91 = v93;
                              long long v92 = v94[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&v82);
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v93);
                              long long v91 = v93;
                              long long v92 = v94[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v91, (llvm::APInt *)&__p);
                              int v32 = llvm::APInt::compare((llvm::APInt *)&v82, (const llvm::APInt *)&__p);
                              if (v32 >= 0) {
                                uint64_t v33 = &__p;
                              }
                              else {
                                uint64_t v33 = &v82;
                              }
                              unsigned int v34 = v83;
                              unsigned int v35 = v80;
                              if (v32 >= 0) {
                                unsigned int v34 = v80;
                              }
                              DWORD2(v91) = v34;
                              if (v34 >= 0x41)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const void **)v33);
                                unsigned int v34 = DWORD2(v91);
                                unsigned int v35 = v80;
                                uint64_t v33 = (void **)&v91;
                              }
                              uint64_t v36 = *v33;
                              DWORD2(v93) = v34;
                              *(void *)&long long v93 = v36;
                              LOBYTE(v94[0]) = 1;
                              if (v35 >= 0x41 && __p) {
                                operator delete[](__p);
                              }
                              if (v83 >= 0x41 && v82) {
                                operator delete[](v82);
                              }
                              uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                              uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v37, (llvm::APInt *)&v93, 1);
                              if (!LOBYTE(v94[0])) {
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
LABEL_62:
                              if (DWORD2(v93) >= 0x41 && (void)v93) {
                                operator delete[]((void *)v93);
                              }
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                          }
                          {
                            uint64_t v38 = (void *)*v12;
                            uint64_t v39 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                            uint64_t v87 = v38;
                            uint64_t v88 = v39;
                            uint64_t v40 = (void *)v12[1];
                            uint64_t v41 = v40 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8) : 0;
                            v86[0] = v40;
                            v86[1] = v41;
                            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
                            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v86))
                            {
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v87, (uint64_t)&v91);
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v86, (uint64_t)&v82);
                              uint64_t v14 = 0;
                              int v44 = v85;
                              if (BYTE8(v92) && v85)
                              {
                                LOWORD(__p) = v91;
                                if ((_BYTE)v91) {
                                  uint64_t v80 = *((void *)&v91 + 1);
                                }
                                else {
                                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v91 + 1) + 16))(&v80);
                                }
                                uint64_t v81 = v92;
                                LOWORD(v76) = (_WORD)v82;
                                if ((_BYTE)v82) {
                                  uint64_t v77 = v83;
                                }
                                else {
                                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 16))(&v77);
                                }
                                uint64_t v78 = v84;
                                *(void *)&long long v93 = v94;
                                *((void *)&v93 + 1) = 0x400000000;
                                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v93, NumElements);
                                uint64_t v46 = mlir::ElementsAttr::getNumElements((uint64_t)v87, v88);
                                if (v46)
                                {
                                  uint64_t v47 = v46;
                                  uint64_t v48 = v81;
                                  while (1)
                                  {
                                    if (BYTE1(__p)) {
                                      uint64_t v49 = 0;
                                    }
                                    else {
                                      uint64_t v49 = v48;
                                    }
                                    if ((_BYTE)__p)
                                    {
                                      uint64_t v50 = v80 + 16 * v49;
                                      unsigned int v72 = *(_DWORD *)(v50 + 8);
                                      if (v72 > 0x40) {
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const void **)v50);
                                      }
                                      else {
                                        uint64_t v71 = *(void **)v50;
                                      }
                                    }
                                    else
                                    {
                                      (*(void (**)(void **__return_ptr))(*(void *)v80 + 24))(&v71);
                                    }
                                    if (BYTE1(v76)) {
                                      uint64_t v51 = 0;
                                    }
                                    else {
                                      uint64_t v51 = v78;
                                    }
                                    if ((_BYTE)v76)
                                    {
                                      uint64_t v52 = v77 + 16 * v51;
                                      unsigned int v70 = *(_DWORD *)(v52 + 8);
                                      if (v70 > 0x40) {
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v69, (const void **)v52);
                                      }
                                      else {
                                        uint64_t v69 = *(void **)v52;
                                      }
                                    }
                                    else
                                    {
                                      (*(void (**)(void **__return_ptr))(*(void *)v77 + 24))(&v69);
                                    }
                                    int v53 = llvm::APInt::compare((llvm::APInt *)&v71, (const llvm::APInt *)&v69);
                                    if (v53 >= 0) {
                                      uint64_t v54 = &v69;
                                    }
                                    else {
                                      uint64_t v54 = &v71;
                                    }
                                    unsigned int v55 = v72;
                                    unsigned int v56 = v70;
                                    if (v53 >= 0) {
                                      unsigned int v55 = v70;
                                    }
                                    unsigned int v90 = v55;
                                    if (v55 >= 0x41)
                                    {
                                      llvm::APInt::initSlowCase((llvm::APInt *)v89, (const void **)v54);
                                      unsigned int v55 = v90;
                                      unsigned int v56 = v70;
                                      uint64_t v54 = (void **)v89;
                                    }
                                    unsigned int v57 = *v54;
                                    unsigned int v74 = v55;
                                    uint64_t v73 = v57;
                                    char v75 = 1;
                                    if (v56 >= 0x41 && v69) {
                                      operator delete[](v69);
                                    }
                                    if (v72 >= 0x41 && v71) {
                                      operator delete[](v71);
                                    }
                                    if (!v75) {
                                      break;
                                    }
                                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v93, (unint64_t)&v73, 1);
                                    unint64_t v59 = (llvm::APInt *)(v93 + 16 * DWORD2(v93));
                                    unsigned int v60 = *((_DWORD *)Address + 2);
                                    *((_DWORD *)v59 + 2) = v60;
                                    if (v60 > 0x40) {
                                      llvm::APInt::initSlowCase(v59, (const void **)Address);
                                    }
                                    else {
                                      *(void *)unint64_t v59 = *(void *)Address;
                                    }
                                    ++DWORD2(v93);
                                    if (v75 && v74 >= 0x41 && v73) {
                                      operator delete[](v73);
                                    }
                                    uint64_t v48 = ++v81;
                                    ++v78;
                                    if (!--v47) {
                                      goto LABEL_154;
                                    }
                                  }
                                  uint64_t v14 = 0;
                                }
                                else
                                {
LABEL_154:
                                  uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                  uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v61, (llvm::APInt *)v93, DWORD2(v93));
                                }
                                uint64_t v62 = (char *)v93;
                                if (DWORD2(v93))
                                {
                                  uint64_t v63 = 16 * DWORD2(v93);
                                  do
                                  {
                                    if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
                                    {
                                      char v64 = *(void **)&v62[v63 - 16];
                                      if (v64) {
                                        operator delete[](v64);
                                      }
                                    }
                                    v63 -= 16;
                                  }
                                  while (v63);
                                  uint64_t v62 = (char *)v93;
                                }
                                if (v62 != (char *)v94) {
                                  free(v62);
                                }
                                if (!(_BYTE)v76)
                                {
                                  uint64_t v65 = v77;
                                  uint64_t v77 = 0;
                                  if (v65) {
                                    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                  }
                                }
                                if (!(_BYTE)__p)
                                {
                                  uint64_t v66 = v80;
                                  uint64_t v80 = 0;
                                  if (v66) {
                                    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                                  }
                                }
                                int v44 = v85;
                              }
                              if (v44)
                              {
                                if (!(_BYTE)v82)
                                {
                                  uint64_t v67 = v83;
                                  uint64_t v83 = 0;
                                  if (v67) {
                                    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                                  }
                                }
                              }
                              if (BYTE8(v92))
                              {
                                if (!(_BYTE)v91)
                                {
                                  uint64_t v68 = *((void *)&v91 + 1);
                                  *((void *)&v91 + 1) = 0;
                                  if (v68) {
                                    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
                                  }
                                }
                              }
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                        }
                      }
                      uint64_t v14 = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v14 = 0;
                  long long v93 = 0uLL;
                }
              }
              else
              {
                long long v93 = 0uLL;
              }
            }
          }
          return v14 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v11 = 0;
        goto LABEL_14;
      }
    }
    else if ((void)v93)
    {
      uint64_t v11 = 0;
      if (DWORD2(v93) && (void)v93 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v93)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t v11 = 1;
LABEL_14:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (void)v93) {
    operator delete[]((void *)v93);
  }
  if ((v9 & 1) == 0) {
    goto LABEL_19;
  }
  return v2;
}

uint64_t mlir::arith::MulFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  char v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      char v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      char v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    char v99 = 0;
    uint64_t v100 = 0;
  }
  unsigned int v10 = (void *)v3[1];
  if (!v10)
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  char v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      unint64_t v20 = v13;
    }
    else {
      unint64_t v20 = 0;
    }
    char v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (char v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        unsigned int v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      unsigned int v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            uint64_t v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            __int16 v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          char v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            unsigned int v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              uint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  uint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                uint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            char v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                unsigned int v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                unsigned int v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::DoubleAPFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            uint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            unsigned int v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                unsigned int v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            __int16 v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            unsigned int v74 = v83;
            uint64_t v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::MulFOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 3);
  uint64_t v39 = "arith.mulf";
  unint64_t v40 = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.mulf", 10, v38, a2, &v39, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC997518;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MulFOfNegF]";
  unint64_t v40 = 83;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  uint64_t v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      unsigned int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::DivFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  char v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      char v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      char v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    char v99 = 0;
    uint64_t v100 = 0;
  }
  unint64_t v10 = (void *)v3[1];
  if (!v10)
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  char v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      unint64_t v20 = v13;
    }
    else {
      unint64_t v20 = 0;
    }
    char v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (char v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        unint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      unsigned int v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            uint64_t v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            __int16 v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          char v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            unsigned int v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              unint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  unint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                unint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            char v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                unsigned int v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                unsigned int v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              unsigned int v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::DoubleAPFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            uint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            unsigned int v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                unsigned int v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            __int16 v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            unsigned int v74 = v83;
            uint64_t v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::DivFOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 3);
  uint64_t v39 = "arith.divf";
  unint64_t v40 = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.divf", 10, v38, a2, &v39, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC9974D8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DivFOfNegF]";
  unint64_t v40 = 83;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  uint64_t v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      unsigned int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::arith::RemFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a2 + 48);
  uint64_t canMapOperands = (void *)*v2;
  if (*v2
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v4 = *v2;
  }
  else
  {
    uint64_t v4 = v2[1];
    if (!v4 || *(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          unint64_t v97 = canMapOperands;
          uint64_t v98 = v5;
          uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
        }
        else
        {
          uint64_t canMapOperands = 0;
          unint64_t v97 = 0;
          uint64_t v98 = 0;
        }
      }
      else
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
      }
      unint64_t v6 = (void *)v2[1];
      if (!v6)
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
        goto LABEL_65;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8))
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
        goto LABEL_65;
      }
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8);
      unint64_t v97 = v6;
      uint64_t v98 = v7;
      uint64_t v8 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
      uint64_t v4 = 0;
      if (canMapOperands && v8 && canMapOperands == (void *)v8)
      {
        unint64_t v9 = (void *)*v2;
        if (*v2
          && *(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v4 = *v2;
        }
        else
        {
          uint64_t v10 = v2[1];
          if (!v10) {
            goto LABEL_65;
          }
          uint64_t v11 = *(void **)(*(void *)v10 + 136);
          if (v11 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v4 = v2[1];
          }
          else {
            uint64_t v4 = 0;
          }
          if (v9 && v11 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (v11 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
              && *(void *)(*(void *)v9 + 136) == (void)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              uint64_t v83 = *v2;
              uint64_t v92 = v10;
              uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
              if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v92)) {
                goto LABEL_65;
              }
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v83, (uint64_t)&v94);
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v92, (uint64_t)v101);
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
              int v22 = (void *)v102[0];
              unsigned int v24 = llvm::APFloatBase::PPCDoubleDouble(v23);
              if (v24 == v22) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
              }
              if (v24 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v100) {
                goto LABEL_65;
              }
              uint64_t v4 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v97);
              if (v100)
              {
                if (v24 == (void *)v98)
                {
LABEL_155:
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v98);
                  return v4 & 0xFFFFFFFFFFFFFFFBLL;
                }
LABEL_59:
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v98);
              }
            }
            else
            {
              if (mlir::DenseElementsAttr::classof(*v2)) {
                uint64_t v13 = v9;
              }
              else {
                uint64_t v13 = 0;
              }
              unint64_t v97 = v13;
              if (v13 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
              {
                uint64_t v14 = v2[1];
                unint64_t v15 = mlir::DenseElementsAttr::classof(v14) ? (void *)v14 : 0;
                unint64_t v97 = v15;
                if (v15)
                {
                  if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
                  {
                    uint64_t v16 = v2[1];
                    uint64_t v83 = *v2;
                    uint64_t v92 = v16;
                    uint64_t v17 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
                    if (v17 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v92))
                    {
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v83, (uint64_t)&v94);
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v92, (uint64_t)v101);
                      mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
                      unint64_t v18 = (void *)v102[0];
                      unint64_t v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
                      if (v20 == v18) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
                      }
                      if (v20 == (void *)v95[0]) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                      }
                      if (v100)
                      {
                        uint64_t v75 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                        uint64_t v4 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v75, (uint64_t)&v97, 1);
                        if (!v100) {
                          return v4 & 0xFFFFFFFFFFFFFFFBLL;
                        }
                        if (v20 == (void *)v98) {
                          goto LABEL_155;
                        }
                        goto LABEL_59;
                      }
                    }
LABEL_65:
                    uint64_t v4 = 0;
                    return v4 & 0xFFFFFFFFFFFFFFFBLL;
                  }
                }
              }
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v2 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v2[1] + 8))
              {
                goto LABEL_65;
              }
              unint64_t v25 = (void *)*v2;
              uint64_t v26 = *v2 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
              unsigned __int8 v88 = v25;
              uint64_t v89 = v26;
              uint64_t v27 = (void *)v2[1];
              uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
              v87[0] = v27;
              v87[1] = v28;
              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v88);
              if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v87)) {
                goto LABEL_65;
              }
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v88, (uint64_t)v101);
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v87, (uint64_t)&v83);
              uint64_t v4 = 0;
              int v31 = v86;
              if (v103 && v86)
              {
                char v79 = v101[0];
                char v80 = v101[1];
                if (v101[0]) {
                  char v81 = (llvm::APFloatBase *)v102[0];
                }
                else {
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v102[0] + 16))(&v81);
                }
                uint64_t v82 = v102[1];
                __int16 v76 = v83;
                if ((_BYTE)v83) {
                  uint64_t v77 = v84;
                }
                else {
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v84 + 16))(&v77);
                }
                uint64_t v78 = v85;
                unint64_t v97 = v99;
                uint64_t v98 = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (NumElements > HIDWORD(v98))
                {
                  unint64_t v94 = 0;
                  long long v33 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v97, v99, NumElements, 32, &v94);
                  uint64_t v34 = v33;
                  unsigned int v35 = (void **)v97;
                  uint64_t v36 = v98;
                  if (v98)
                  {
                    uint64_t v37 = llvm::APFloatBase::PPCDoubleDouble(v33);
                    __int16 v38 = (void *)((char *)v34 + 8);
                    uint64_t v39 = 32 * v36;
                    unint64_t v40 = v35 + 1;
                    do
                    {
                      while (v37 == *v40)
                      {
                        __int16 v38 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v38, v40) + 4;
                        v40 += 4;
                        v39 -= 32;
                        if (!v39) {
                          goto LABEL_81;
                        }
                      }
                      __int16 v38 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v38, (uint64_t)v40) + 32);
                      v40 += 4;
                      v39 -= 32;
                    }
                    while (v39);
LABEL_81:
                    unsigned int v35 = (void **)v97;
                    if (v98)
                    {
                      uint64_t v41 = (char *)v97 - 24;
                      uint64_t v42 = 32 * v98;
                      do
                      {
                        while (1)
                        {
                          uint64_t v43 = (llvm::detail::DoubleAPFloat *)&v41[v42];
                          if (v37 != *(void **)&v41[v42]) {
                            break;
                          }
                          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v43);
                          v42 -= 32;
                          if (!v42) {
                            goto LABEL_86;
                          }
                        }
                        llvm::detail::IEEEFloat::~IEEEFloat(v43);
                        v42 -= 32;
                      }
                      while (v42);
LABEL_86:
                      unsigned int v35 = (void **)v97;
                    }
                  }
                  int v44 = v94;
                  if (v35 != (void **)v99) {
                    free(v35);
                  }
                  unint64_t v97 = v34;
                  HIDWORD(v98) = v44;
                }
                uint64_t v45 = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (v45)
                {
                  uint64_t v46 = v45;
                  uint64_t v47 = v82;
                  while (1)
                  {
                    uint64_t v48 = v80 ? 0 : v47;
                    if (v79)
                    {
                      uint64_t v49 = (char *)v81 + 32 * v48;
                      uint64_t v51 = (void *)*((void *)v49 + 1);
                      uint64_t v50 = (const llvm::detail::DoubleAPFloat *)(v49 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v81) == v51) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93, v50);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v50);
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v81 + 24))(&v92);
                    }
                    uint64_t v52 = HIBYTE(v76) ? 0 : v78;
                    if ((_BYTE)v76)
                    {
                      int v53 = (char *)v77 + 32 * v52;
                      unsigned int v55 = (void *)*((void *)v53 + 1);
                      uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v77) == v55) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91, v54);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, v54);
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v90);
                    }
                    mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v94, (uint64_t)&v92, (uint64_t)&v90);
                    unsigned int v56 = (void *)v91[0];
                    __int16 v58 = llvm::APFloatBase::PPCDoubleDouble(v57);
                    if (v58 == v56) {
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
                    }
                    else {
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
                    }
                    if (v58 == (void *)v93[0]) {
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
                    }
                    else {
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
                    }
                    if (!v96) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v97, (unint64_t)&v94, 1);
                    uint64_t v61 = (llvm::detail::DoubleAPFloat *)((char *)v97 + 32 * v98 + 8);
                    uint64_t v63 = (void *)*((void *)Address + 1);
                    uint64_t v62 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
                    if (v58 == v63) {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(v61, v62);
                    }
                    else {
                      llvm::detail::IEEEFloat::IEEEFloat(v61, v62);
                    }
                    LODWORD(v98) = v98 + 1;
                    if (v96)
                    {
                      if (v58 == (void *)v95[0]) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                      }
                    }
                    uint64_t v47 = ++v82;
                    ++v78;
                    if (!--v46) {
                      goto LABEL_123;
                    }
                  }
                  uint64_t v4 = 0;
                }
                else
                {
LABEL_123:
                  uint64_t v64 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  unint64_t v59 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v64, (uint64_t)v97, v98);
                  uint64_t v4 = (uint64_t)v59;
                }
                uint64_t v65 = (char *)v97;
                uint64_t v66 = v98;
                if (v98)
                {
                  uint64_t v67 = llvm::APFloatBase::PPCDoubleDouble(v59);
                  uint64_t v68 = v65 - 24;
                  uint64_t v69 = 32 * v66;
                  do
                  {
                    while (1)
                    {
                      unsigned int v70 = (llvm::detail::DoubleAPFloat *)&v68[v69];
                      if (v67 != *(void **)&v68[v69]) {
                        break;
                      }
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v70);
                      v69 -= 32;
                      if (!v69) {
                        goto LABEL_130;
                      }
                    }
                    llvm::detail::IEEEFloat::~IEEEFloat(v70);
                    v69 -= 32;
                  }
                  while (v69);
LABEL_130:
                  uint64_t v65 = (char *)v97;
                }
                if (v65 != v99) {
                  free(v65);
                }
                if (!(_BYTE)v76)
                {
                  uint64_t v71 = v77;
                  uint64_t v77 = 0;
                  if (v71) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v71 + 8))(v71);
                  }
                }
                if (!v79)
                {
                  unsigned int v72 = v81;
                  char v81 = 0;
                  if (v72) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v72 + 8))(v72);
                  }
                }
                int v31 = v86;
              }
              if (v31)
              {
                if (!(_BYTE)v83)
                {
                  uint64_t v73 = v84;
                  uint64_t v84 = 0;
                  if (v73) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
                  }
                }
              }
              if (v103)
              {
                if (!v101[0])
                {
                  uint64_t v74 = v102[0];
                  v102[0] = 0;
                  if (v74) {
                    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ExtUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  v45[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    unint64_t v6 = *(void ***)(a2 + 40);
    uint64_t v7 = (uint64_t)*v6;
    if (!*v6) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v8 = *(void **)(*(void *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    unsigned int v9 = Width;
    uint64_t v10 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      long long __p = *v6;
      mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)v43);
      llvm::APInt::zext((const void **)v43, v9, (uint64_t)v45);
      if (LODWORD(v43[1]) >= 0x41 && v43[0]) {
        operator delete[](v43[0]);
      }
      uint64_t v7 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_37:
      if (v45[0]) {
        operator delete[](v45[0]);
      }
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (mlir::DenseElementsAttr::classof((uint64_t)*v6)) {
      uint64_t v11 = (void *)v7;
    }
    else {
      uint64_t v11 = 0;
    }
    v45[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
    {
      uint64_t v41 = (uint64_t)*v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v45;
      long long v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v43, (llvm::APInt *)&__p);
      llvm::APInt::zext((const void **)&__p, v9, (uint64_t)v45);
      if (v39 >= 0x41 && __p) {
        operator delete[](__p);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      goto LABEL_37;
    }
    uint64_t v7 = (uint64_t)*v6;
    if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v6 + 8))
    {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
      uint64_t v41 = v7;
      uint64_t v42 = v18;
      if (!v7) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)v43);
      if (BYTE8(v44))
      {
        LOWORD(__p) = v43[0];
        if (LOBYTE(v43[0])) {
          uint64_t v39 = (char *)v43[1];
        }
        else {
          (*(void (**)(char **__return_ptr))(*(void *)v43[1] + 16))(&v39);
        }
        uint64_t v40 = v44;
        v45[0] = v46;
        v45[1] = (void *)0x300000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
        uint64_t v20 = mlir::ElementsAttr::getNumElements(v41, v42);
        if (!v20)
        {
LABEL_60:
          if (v10) {
            uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
          uint64_t v29 = (char *)v45[0];
          if (LODWORD(v45[1]))
          {
            uint64_t v30 = 16 * LODWORD(v45[1]);
            do
            {
              if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
              {
                int v31 = *(void **)&v29[v30 - 16];
                if (v31) {
                  operator delete[](v31);
                }
              }
              v30 -= 16;
            }
            while (v30);
            uint64_t v29 = (char *)v45[0];
          }
          if (v29 != (char *)v46) {
            free(v29);
          }
          if (!(_BYTE)__p)
          {
            long long v32 = v39;
            uint64_t v39 = 0;
            if (v32) {
              (*(void (**)(char *))(*(void *)v32 + 8))(v32);
            }
          }
          if (BYTE8(v44))
          {
            if (!LOBYTE(v43[0]))
            {
              long long v33 = v43[1];
              v43[1] = 0;
              if (v33) {
                (*(void (**)(void *))(*(void *)v33 + 8))(v33);
              }
            }
          }
          return v7 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v21 = v20;
        uint64_t v22 = v40;
        while (1)
        {
          if (BYTE1(__p)) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if ((_BYTE)__p)
          {
            unsigned int v24 = &v39[16 * v23];
            unsigned int v35 = *((_DWORD *)v24 + 2);
            if (v35 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v24);
            }
            else {
              uint64_t v34 = *(void **)v24;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v39 + 24))(&v34);
          }
          llvm::APInt::zext((const void **)&v34, v9, (uint64_t)&v36);
          if (v35 >= 0x41 && v34) {
            operator delete[](v34);
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
          uint64_t v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
          unsigned int v27 = *((_DWORD *)Address + 2);
          *((_DWORD *)v26 + 2) = v27;
          if (v27 > 0x40)
          {
            llvm::APInt::initSlowCase(v26, (const void **)Address);
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
            {
LABEL_58:
              if (v36) {
                operator delete[](v36);
              }
            }
          }
          else
          {
            *(void *)uint64_t v26 = *(void *)Address;
            ++LODWORD(v45[1]);
            if (v37 >= 0x41) {
              goto LABEL_58;
            }
          }
          uint64_t v22 = ++v40;
          if (!--v21) {
            goto LABEL_60;
          }
        }
      }
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v14 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
  unint64_t v15 = (uint64_t *)v13[1];
  if (v15)
  {
    *unint64_t v15 = *v13;
    if (*v13) {
      *(void *)(*v13 + 8) = v13[1];
    }
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  uint64_t v16 = *v14;
  uint64_t *v13 = *v14;
  if (v16) {
    *(void *)(v16 + 8) = v13;
  }
  *uint64_t v14 = (uint64_t)v13;
  return (*(void *)a1 - 16) | 4;
}

BOOL checkWidthChangeCast<std::greater,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((uint64_t v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v12 = ElementTypeOrSelf;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v22 = v12;
    uint64_t v13 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((uint64_t v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v15 = 1),
          !v15 ? (BOOL v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v16 = 1),
          v16))
    {
      uint64_t v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v21 = v18;
      if (v12) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        return 0;
      }
      else
      {
        unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtUIOp::verify(uint64_t **this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width < mlir::IntegerType::getWidth((mlir::IntegerType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    uint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    unint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v6 = (char *)v41;
        uint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v5 = &v37;
        unint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      __int16 v38 = " must be wider than operand type ";
      uint64_t v39 = 33;
      BOOL v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        BOOL v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            BOOL v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            BOOL v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      BOOL v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          BOOL v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unint64_t v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

uint64_t mlir::arith::ExtSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  v45[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    unint64_t v6 = *(void ***)(a2 + 40);
    uint64_t v7 = (uint64_t)*v6;
    if (!*v6) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    long long v8 = *(void **)(*(void *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    unsigned int v9 = Width;
    BOOL v10 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      long long __p = *v6;
      mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)v43);
      llvm::APInt::sext((const void **)v43, v9, (uint64_t)v45);
      if (LODWORD(v43[1]) >= 0x41 && v43[0]) {
        operator delete[](v43[0]);
      }
      uint64_t v7 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_37:
      if (v45[0]) {
        operator delete[](v45[0]);
      }
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (mlir::DenseElementsAttr::classof((uint64_t)*v6)) {
      uint64_t v11 = (void *)v7;
    }
    else {
      uint64_t v11 = 0;
    }
    v45[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
    {
      uint64_t v41 = (uint64_t)*v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      *(_OWORD *)unsigned int v43 = *(_OWORD *)v45;
      long long v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v43, (llvm::APInt *)&__p);
      llvm::APInt::sext((const void **)&__p, v9, (uint64_t)v45);
      if (v39 >= 0x41 && __p) {
        operator delete[](__p);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      goto LABEL_37;
    }
    uint64_t v7 = (uint64_t)*v6;
    if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v6 + 8))
    {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
      uint64_t v41 = v7;
      uint64_t v42 = v18;
      if (!v7) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)v43);
      if (BYTE8(v44))
      {
        LOWORD(__p) = v43[0];
        if (LOBYTE(v43[0])) {
          uint64_t v39 = (char *)v43[1];
        }
        else {
          (*(void (**)(char **__return_ptr))(*(void *)v43[1] + 16))(&v39);
        }
        uint64_t v40 = v44;
        v45[0] = v46;
        v45[1] = (void *)0x300000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
        uint64_t v20 = mlir::ElementsAttr::getNumElements(v41, v42);
        if (!v20)
        {
LABEL_60:
          if (v10) {
            uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
          BOOL v29 = (char *)v45[0];
          if (LODWORD(v45[1]))
          {
            uint64_t v30 = 16 * LODWORD(v45[1]);
            do
            {
              if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
              {
                int64_t v31 = *(void **)&v29[v30 - 16];
                if (v31) {
                  operator delete[](v31);
                }
              }
              v30 -= 16;
            }
            while (v30);
            BOOL v29 = (char *)v45[0];
          }
          if (v29 != (char *)v46) {
            free(v29);
          }
          if (!(_BYTE)__p)
          {
            int64_t v32 = v39;
            uint64_t v39 = 0;
            if (v32) {
              (*(void (**)(char *))(*(void *)v32 + 8))(v32);
            }
          }
          if (BYTE8(v44))
          {
            if (!LOBYTE(v43[0]))
            {
              int64_t v33 = v43[1];
              v43[1] = 0;
              if (v33) {
                (*(void (**)(void *))(*(void *)v33 + 8))(v33);
              }
            }
          }
          return v7 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v21 = v20;
        uint64_t v22 = v40;
        while (1)
        {
          if (BYTE1(__p)) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if ((_BYTE)__p)
          {
            unsigned int v24 = &v39[16 * v23];
            unsigned int v35 = *((_DWORD *)v24 + 2);
            if (v35 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v24);
            }
            else {
              uint64_t v34 = *(void **)v24;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v39 + 24))(&v34);
          }
          llvm::APInt::sext((const void **)&v34, v9, (uint64_t)&v36);
          if (v35 >= 0x41 && v34) {
            operator delete[](v34);
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
          uint64_t v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
          unsigned int v27 = *((_DWORD *)Address + 2);
          *((_DWORD *)v26 + 2) = v27;
          if (v27 > 0x40)
          {
            llvm::APInt::initSlowCase(v26, (const void **)Address);
            ++LODWORD(v45[1]);
            if (v37 >= 0x41)
            {
LABEL_58:
              if (v36) {
                operator delete[](v36);
              }
            }
          }
          else
          {
            *(void *)uint64_t v26 = *(void *)Address;
            ++LODWORD(v45[1]);
            if (v37 >= 0x41) {
              goto LABEL_58;
            }
          }
          uint64_t v22 = ++v40;
          if (!--v21) {
            goto LABEL_60;
          }
        }
      }
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  long long v13 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v14 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
  BOOL v15 = (uint64_t *)v13[1];
  if (v15)
  {
    *BOOL v15 = *v13;
    if (*v13) {
      *(void *)(*v13 + 8) = v13[1];
    }
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  uint64_t v16 = *v14;
  uint64_t *v13 = *v14;
  if (v16) {
    *(void *)(v16 + 8) = v13;
  }
  *uint64_t v14 = (uint64_t)v13;
  return (*(void *)a1 - 16) | 4;
}

void mlir::arith::ExtSIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 2);
  uint64_t v39 = "arith.extui";
  unint64_t v40 = 11;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.extsi", 11, v38, a2, &v39, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC997870;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtSIOfExtUI]";
  unint64_t v40 = 85;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  uint64_t v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      BOOL v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)BOOL v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      unsigned int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::arith::ExtFOp::fold(void *a1, uint64_t a2)
{
  unint64_t v11[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a2 + 40);
  if (!v2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v9 = v2;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v9, (uint64_t)&v10);
  double v4 = llvm::APFloat::convertToDouble(&v10);
  unint64_t v5 = mlir::FloatAttr::get(v3, v4);
  unint64_t v6 = (unint64_t)v5 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v7 = (void *)v11[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v7) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
  }
  return v6;
}

void llvm::APFloat::~APFloat(llvm::APFloat *this)
{
  uint64_t v1 = (llvm::APFloat *)((char *)this + 8);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v1);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat(v1);
  }
}

BOOL mlir::arith::ExtFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((uint64_t v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      unint64_t v12 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v29 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v29 = 0;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v31 = v29;
    unsigned int v24 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (unint64_t v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((uint64_t v26 = mlir::getElementTypeOrSelf(v24),
           uint64_t v27 = *(void **)(*(void *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (uint64_t v30 = v26, v29))
    {
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtFOp::verify(uint64_t **this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width < mlir::FloatType::getWidth((mlir::FloatType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    unint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    unint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v6 = (char *)v41;
        unint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v5 = &v37;
        unint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      __int16 v38 = " must be wider than operand type ";
      uint64_t v39 = 33;
      BOOL v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      unint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        unint64_t v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            unint64_t v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            unint64_t v15 = (char *)v41;
          }
        }
        uint64_t v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    unint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      uint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unint64_t v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

uint64_t mlir::arith::TruncIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  v50[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v50);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id
    || (v50[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24),
        (uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)v50)) != 0)
    && *(_UNKNOWN **)(*(void *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v50[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
    unint64_t v15 = *(void *)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)v50) + 72) + 24);
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8));
    long long v17 = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    v50[0] = ElementTypeOrSelf;
    LODWORD(ElementTypeOrSelf) = mlir::IntegerType::getWidth((mlir::IntegerType *)v50);
    v48[0] = v17;
    if (ElementTypeOrSelf <= mlir::IntegerType::getWidth((mlir::IntegerType *)v48)) {
      return v15 | 4;
    }
    unint64_t v18 = *(void **)(*(void *)a1 + 72);
    uint64_t v19 = (void *)v18[1];
    if (v19)
    {
      void *v19 = *v18;
      if (*v18) {
        *(void *)(*v18 + 8) = v18[1];
      }
    }
    v18[3] = v15;
    v18[1] = v15;
    uint64_t v20 = *(void *)v15;
    void *v18 = *(void *)v15;
    if (v20) {
      *(void *)(v20 + 8) = v18;
    }
    *(void *)unint64_t v15 = v18;
    return (*(void *)a1 - 16) | 4;
  }
  v50[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v6 = mlir::Value::getDefiningOp((mlir::Value *)v50);
  if (v6
    && *(_UNKNOWN **)(*(void *)(v6 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
  {
    v50[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
    uint64_t v22 = *(uint64_t **)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)v50) + 72) + 24);
    uint64_t v23 = *(uint64_t **)(*(void *)a1 + 72);
    unsigned int v24 = (uint64_t *)v23[1];
    if (v24)
    {
      *unsigned int v24 = *v23;
      if (*v23) {
        *(void *)(*v23 + 8) = v23[1];
      }
    }
    v23[3] = (uint64_t)v22;
    v23[1] = (uint64_t)v22;
    uint64_t v25 = *v22;
    *uint64_t v23 = *v22;
    if (v25) {
      *(void *)(v25 + 8) = v23;
    }
    uint64_t *v22 = (uint64_t)v23;
    return (*(void *)a1 - 16) | 4;
  }
  v50[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v50);
  long long v8 = *(void ***)(a2 + 40);
  uint64_t v9 = (uint64_t)*v8;
  if (!*v8) {
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  BOOL v10 = *(void **)(*(void *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v11 = Width;
  unint64_t v12 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    long long __p = *v8;
    mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)v48);
    llvm::APInt::trunc((char *)v48, v11, (uint64_t)v50);
    if (LODWORD(v48[1]) >= 0x41 && v48[0]) {
      operator delete[](v48[0]);
    }
    uint64_t v9 = mlir::IntegerAttr::get((uint64_t)v12, (llvm::APInt *)v50);
    if (LODWORD(v50[1]) < 0x41) {
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_50:
    if (v50[0]) {
      operator delete[](v50[0]);
    }
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof((uint64_t)*v8)) {
    long long v13 = (void *)v9;
  }
  else {
    long long v13 = 0;
  }
  v50[0] = v13;
  if (v13 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v50))
  {
    uint64_t v46 = (uint64_t)*v8;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v46, (uint64_t)v50);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v50;
    long long v49 = v51;
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v48, (llvm::APInt *)&__p);
    llvm::APInt::trunc((char *)&__p, v11, (uint64_t)v50);
    if (v44 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v12) {
      uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v14, (llvm::APInt *)v50, 1);
    if (LODWORD(v50[1]) < 0x41) {
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_50;
  }
  uint64_t v9 = (uint64_t)*v8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v8 + 8))
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v9 + 8);
    uint64_t v46 = v9;
    uint64_t v47 = v26;
    if (!v9) {
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v46, (uint64_t)v48);
    if (BYTE8(v49))
    {
      LOWORD(__p) = v48[0];
      if (LOBYTE(v48[0])) {
        long long v44 = (char *)v48[1];
      }
      else {
        (*(void (**)(char **__return_ptr))(*(void *)v48[1] + 16))(&v44);
      }
      uint64_t v45 = v49;
      v50[0] = &v51;
      v50[1] = (void *)0x300000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements(v46, v47);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v50, NumElements);
      uint64_t v28 = mlir::ElementsAttr::getNumElements(v46, v47);
      if (!v28)
      {
LABEL_73:
        if (v12) {
          uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v36, (llvm::APInt *)v50[0], LODWORD(v50[1]));
        llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)v50);
        if (!(_BYTE)__p)
        {
          int v37 = v44;
          long long v44 = 0;
          if (v37) {
            (*(void (**)(char *))(*(void *)v37 + 8))(v37);
          }
        }
        if (BYTE8(v49))
        {
          if (!LOBYTE(v48[0]))
          {
            __int16 v38 = v48[1];
            v48[1] = 0;
            if (v38) {
              (*(void (**)(void *))(*(void *)v38 + 8))(v38);
            }
          }
        }
        return v9 & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v29 = v28;
      uint64_t v30 = v45;
      while (1)
      {
        if (BYTE1(__p)) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v30;
        }
        if ((_BYTE)__p)
        {
          int64_t v32 = &v44[16 * v31];
          unsigned int v40 = *((_DWORD *)v32 + 2);
          if (v40 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v39, (const void **)v32);
          }
          else {
            uint64_t v39 = *(void **)v32;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(void *)v44 + 24))(&v39);
        }
        llvm::APInt::trunc((char *)&v39, v11, (uint64_t)&v41);
        if (v40 >= 0x41 && v39) {
          operator delete[](v39);
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v50, (unint64_t)&v41, 1);
        uint64_t v34 = (llvm::APInt *)((char *)v50[0] + 16 * LODWORD(v50[1]));
        unsigned int v35 = *((_DWORD *)Address + 2);
        *((_DWORD *)v34 + 2) = v35;
        if (v35 > 0x40)
        {
          llvm::APInt::initSlowCase(v34, (const void **)Address);
          ++LODWORD(v50[1]);
          if (v42 >= 0x41)
          {
LABEL_71:
            if (v41) {
              operator delete[](v41);
            }
          }
        }
        else
        {
          *(void *)uint64_t v34 = *(void *)Address;
          ++LODWORD(v50[1]);
          if (v42 >= 0x41) {
            goto LABEL_71;
          }
        }
        uint64_t v30 = ++v45;
        if (!--v29) {
          goto LABEL_73;
        }
      }
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL mlir::arith::TruncIOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((long long v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v12 = ElementTypeOrSelf;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v22 = v12;
    long long v13 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((uint64_t v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v15 = 1),
          !v15 ? (BOOL v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v16 = 1),
          v16))
    {
      uint64_t v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v21 = v18;
      if (v12) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        return 0;
      }
      else
      {
        unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::arith::TruncIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(void *)&v175[0] = "arith.extsi";
  *((void *)&v175[0] + 1) = 11;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC9992E8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIExtSIToExtSI]";
  *((void *)&v175[0] + 1) = 91;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175[0] + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v175[0] + 1);
  }
  unint64_t v11 = *(void *)&v175[0] + v10;
  unint64_t v12 = *((void *)&v175[0] + 1) - v10;
  if (*((void *)&v175[0] + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v175[0] + 1) - v10;
  }
  unint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  BOOL v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_193;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_196;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_196:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      unsigned int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  __int16 v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  *(void *)&v175[0] = "arith.extui";
  *((void *)&v175[0] + 1) = 11;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(void *)__int16 v38 = &unk_1EC999328;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIExtUIToExtUI]";
  *((void *)&v175[0] + 1) = 91;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175[0] + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v175[0] + 1);
  }
  unint64_t v45 = *(void *)&v175[0] + v44;
  unint64_t v46 = *((void *)&v175[0] + 1) - v44;
  if (*((void *)&v175[0] + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v175[0] + 1) - v44;
  }
  unint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_193;
    }
    unsigned int v55 = (char *)operator new(8 * v54);
    unsigned int v56 = &v55[8 * v51];
    unsigned int v57 = &v55[8 * v54];
    *(void *)unsigned int v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    unsigned int v55 = 0;
    unsigned int v56 = (char *)(8 * v51);
    unsigned int v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_197;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v62 = &v41[-v61];
      v56 -= v61;
      uint64_t v63 = &v55[8 * v51 - 16];
      uint64_t v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)uint64_t v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)uint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  unsigned int v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 2);
  v175[0] = xmmword_1E4FBF430;
  v175[1] = *(_OWORD *)&off_1E4FBF440;
  v175[2] = xmmword_1E4FBF450;
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"arith.trunci", 12, v174, a2, v175, 3uLL);
  *(void *)unsigned int v72 = &unk_1EC99B638;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    uint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  *(void *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrSIToTrunciShrUI]";
  *((void *)&v175[0] + 1) = 97;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175[0] + 1) >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = *((void *)&v175[0] + 1);
  }
  unint64_t v79 = *(void *)&v175[0] + v78;
  unint64_t v80 = *((void *)&v175[0] + 1) - v78;
  if (*((void *)&v175[0] + 1) - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = *((void *)&v175[0] + 1) - v78;
  }
  unint64_t v82 = v79 + v81;
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  uint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)uint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  uint64_t v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_193;
    }
    uint64_t v89 = (char *)operator new(8 * v88);
    uint64_t v90 = &v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *(void *)uint64_t v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v89 = 0;
    uint64_t v90 = (char *)(8 * v85);
    uint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_198;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      char v96 = &v75[-v95];
      v90 -= v95;
      unint64_t v97 = &v89[8 * v85 - 16];
      uint64_t v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)uint64_t v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)unint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      uint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_198:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)uint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      uint64_t v75 = (char *)a1[1];
      char v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)char v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  uint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 5);
  *(void *)&v175[0] = "arith.mulsi_extended";
  *((void *)&v175[0] + 1) = 20;
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(void *)uint64_t v106 = &unk_1EC99C058;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    uint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  *(void *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrUIMulIToMulSIExtended]";
  *((void *)&v175[0] + 1) = 103;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175[0] + 1) >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = *((void *)&v175[0] + 1);
  }
  unint64_t v113 = *(void *)&v175[0] + v112;
  unint64_t v114 = *((void *)&v175[0] + 1) - v112;
  if (*((void *)&v175[0] + 1) - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = *((void *)&v175[0] + 1) - v112;
  }
  unint64_t v116 = v113 + v115;
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  uint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)uint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
    goto LABEL_192;
  }
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (v122)
  {
    if (v122 >> 61) {
      goto LABEL_193;
    }
    uint64_t v123 = (char *)operator new(8 * v122);
    uint64_t v124 = &v123[8 * v119];
    uint64_t v125 = &v123[8 * v122];
    *(void *)uint64_t v124 = v106;
    uint64_t v110 = (uint64_t)(v124 + 8);
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    uint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    uint64_t v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      unint64_t v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_199;
      }
      uint64_t v128 = (v127 >> 3) + 1;
      uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v130 = &v109[-v129];
      v124 -= v129;
      uint64_t v131 = &v123[8 * v119 - 16];
      unsigned __int8 v132 = v109 - 16;
      uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v135 = *((_OWORD *)v132 - 1);
        long long v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)unsigned __int8 v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)uint64_t v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      uint64_t v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          uint64_t v136 = *((void *)v109 - 1);
          v109 -= 8;
          *(void *)uint64_t v109 = 0;
          *((void *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      uint64_t v109 = (char *)a1[1];
      long long v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        uint64_t v139 = *((void *)v137 - 1);
        v137 -= 8;
        uint64_t v138 = v139;
        *(void *)long long v137 = 0;
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
  unint64_t v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 5);
  *(void *)&v175[0] = "arith.mului_extended";
  *((void *)&v175[0] + 1) = 20;
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"arith.trunci", 12, v174, a2, v175, 1uLL);
  *(void *)unint64_t v140 = &unk_1EC99C098;
  if (*((void *)v140 + 9))
  {
    unint64_t v141 = v140[22];
    if (v141 <= v140[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    unint64_t v143 = (char *)a1[2];
    unint64_t v142 = a1[3];
    if ((unint64_t)v143 < v142) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  *(void *)&v175[0] = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TruncIShrUIMulIToMulUIExtended]";
  *((void *)&v175[0] + 1) = 103;
  unint64_t v145 = llvm::StringRef::find((uint64_t *)v175, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v175[0] + 1) >= v145) {
    unint64_t v146 = v145;
  }
  else {
    unint64_t v146 = *((void *)&v175[0] + 1);
  }
  unint64_t v147 = *(void *)&v175[0] + v146;
  unint64_t v148 = *((void *)&v175[0] + 1) - v146;
  if (*((void *)&v175[0] + 1) - v146 >= 0x12) {
    uint64_t v149 = 18;
  }
  else {
    uint64_t v149 = *((void *)&v175[0] + 1) - v146;
  }
  unint64_t v150 = v147 + v149;
  unint64_t v151 = v148 - v149;
  if (v151 >= v151 - 1) {
    --v151;
  }
  *((void *)v140 + 8) = v150;
  *((void *)v140 + 9) = v151;
  unint64_t v141 = v140[22];
  if (v141 > v140[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v140[22] = v141;
  unint64_t v143 = (char *)a1[2];
  unint64_t v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(void *)unint64_t v143 = v140;
    uint64_t v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  uint64_t v152 = (char *)a1[1];
  uint64_t v153 = (v143 - v152) >> 3;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61) {
LABEL_192:
  }
    abort();
  uint64_t v155 = v142 - (void)v152;
  if (v155 >> 2 > v154) {
    unint64_t v154 = v155 >> 2;
  }
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v156 = v154;
  }
  if (!v156)
  {
    uint64_t v157 = 0;
    uint64_t v158 = (char *)(8 * v153);
    unint64_t v159 = 0;
    *(void *)(8 * v153) = v140;
    uint64_t v144 = 8 * v153 + 8;
    uint64_t v160 = (char *)(v143 - v152);
    if (v143 != v152) {
      goto LABEL_176;
    }
    goto LABEL_188;
  }
  if (v156 >> 61) {
LABEL_193:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v157 = (char *)operator new(8 * v156);
  uint64_t v158 = &v157[8 * v153];
  unint64_t v159 = &v157[8 * v156];
  *(void *)uint64_t v158 = v140;
  uint64_t v144 = (uint64_t)(v158 + 8);
  uint64_t v160 = (char *)(v143 - v152);
  if (v143 != v152)
  {
LABEL_176:
    unint64_t v161 = (unint64_t)(v160 - 8);
    if (v161 < 0x78
      || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
      && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
    {
      goto LABEL_200;
    }
    uint64_t v162 = (v161 >> 3) + 1;
    uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
    long long v164 = &v143[-v163];
    v158 -= v163;
    uint64_t v165 = &v157[8 * v153 - 16];
    long long v166 = v143 - 16;
    uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v169 = *((_OWORD *)v166 - 1);
      long long v168 = *(_OWORD *)v166;
      *((_OWORD *)v166 - 1) = 0uLL;
      *(_OWORD *)long long v166 = 0uLL;
      *((_OWORD *)v165 - 1) = v169;
      *(_OWORD *)uint64_t v165 = v168;
      v165 -= 32;
      v166 -= 32;
      v167 -= 4;
    }
    while (v167);
    unint64_t v143 = v164;
    if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_200:
      do
      {
        uint64_t v170 = *((void *)v143 - 1);
        v143 -= 8;
        *(void *)unint64_t v143 = 0;
        *((void *)v158 - 1) = v170;
        v158 -= 8;
      }
      while (v143 != v152);
    }
    unint64_t v143 = (char *)a1[1];
    uint64_t v171 = (char *)a1[2];
    a1[1] = v158;
    a1[2] = v144;
    a1[3] = v159;
    while (v171 != v143)
    {
      uint64_t v173 = *((void *)v171 - 1);
      v171 -= 8;
      uint64_t v172 = v173;
      *(void *)uint64_t v171 = 0;
      if (v173) {
        (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
      }
    }
    goto LABEL_189;
  }
LABEL_188:
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143) {
    operator delete(v143);
  }
LABEL_191:
  a1[2] = v144;
}

uint64_t mlir::arith::TruncIOp::verify(uint64_t **this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width > mlir::IntegerType::getWidth((mlir::IntegerType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    unint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    unint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v6 = (char *)v41;
        unint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v5 = &v37;
        unint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      __int16 v38 = " must be shorter than operand type ";
      uint64_t v39 = 35;
      unint64_t v10 = &v37;
      unint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          unint64_t v11 = (char *)v41;
          unint64_t v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          unint64_t v10 = &v37;
          unint64_t v11 = (char *)v41;
        }
      }
      unint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        unint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        unint64_t v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            unint64_t v15 = (char *)v41;
            unint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            unint64_t v14 = &v37;
            unint64_t v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    unint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      unint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unint64_t v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      unint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

unint64_t mlir::arith::TruncFOp::fold(void *a1, uint64_t a2)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a2 + 40);
  if (!v2 || *(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    return 0;
  }
  unint64_t v10 = **(llvm::APFloatBase ***)(a2 + 40);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)&v11);
  double v5 = llvm::APFloat::convertToDouble(&v11);
  unint64_t v6 = (void *)v12[0];
  long long v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == v6) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  }
  unint64_t v10 = mlir::FloatAttr::get(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8, v5);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)&v11);
  double v9 = llvm::APFloat::convertToDouble(&v11);
  if (v8 == (void *)v12[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  }
  if (v5 == v9) {
    return (unint64_t)v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else {
    return 0;
  }
}

BOOL mlir::arith::TruncFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((long long v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      unint64_t v12 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v29 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v29 = 0;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v31 = v29;
    unsigned int v24 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (unint64_t v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((uint64_t v26 = mlir::getElementTypeOrSelf(v24),
           unint64_t v27 = *(void **)(*(void *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (uint64_t v30 = v26, v29))
    {
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::TruncFOp::verify(uint64_t **this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v36[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(v36 - 1) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width > mlir::FloatType::getWidth((mlir::FloatType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    double v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    unint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v6 = (char *)v41;
        double v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        double v5 = &v37;
        unint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      __int16 v38 = " must be shorter than operand type ";
      uint64_t v39 = 35;
      BOOL v10 = &v37;
      unint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          unint64_t v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          unint64_t v11 = (char *)v41;
        }
      }
      unint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        unint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        unint64_t v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            unint64_t v15 = (char *)v41;
            unint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            unint64_t v14 = &v37;
            unint64_t v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    unint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      unint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unint64_t v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      unint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

void mlir::arith::AndIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  long long v73 = xmmword_1E4FBF460;
  long long v74 = *(_OWORD *)&off_1E4FBF470;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.andi", 10, v72, a2, &v73, 2uLL);
  *(void *)uint64_t v4 = &unk_1EC997440;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AndOfExtUI]";
  *((void *)&v73 + 1) = 83;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v73 + 1);
  }
  uint64_t v11 = v73 + v10;
  unint64_t v12 = *((void *)&v73 + 1) - v10;
  if (*((void *)&v73 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v73 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  BOOL v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      BOOL v29 = &v21[8 * v17 - 16];
      unint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)unint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)BOOL v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      __int16 v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)__int16 v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  __int16 v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  long long v73 = xmmword_1E4FBF480;
  long long v74 = *(_OWORD *)&off_1E4FBF490;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.andi", 10, v72, a2, &v73, 2uLL);
  *(void *)__int16 v38 = &unk_1EC997400;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AndOfExtSI]";
  *((void *)&v73 + 1) = 83;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v73 + 1);
  }
  uint64_t v45 = v73 + v44;
  unint64_t v46 = *((void *)&v73 + 1) - v44;
  if (*((void *)&v73 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v73 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    unsigned int v55 = 0;
    unsigned int v56 = (char *)(8 * v51);
    unsigned int v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unsigned int v55 = (char *)operator new(8 * v54);
  unsigned int v56 = &v55[8 * v51];
  unsigned int v57 = &v55[8 * v54];
  *(void *)unsigned int v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  __int16 v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    uint64_t v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)uint64_t v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    uint64_t v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)uint64_t v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    uint64_t v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

void mlir::arith::OrIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  long long v73 = xmmword_1E4FBF4A0;
  long long v74 = *(_OWORD *)&off_1E4FBF4B0;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.ori", 9, v72, a2, &v73, 2uLL);
  *(void *)uint64_t v4 = &unk_1EC99C840;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::OrOfExtUI]";
  *((void *)&v73 + 1) = 82;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v73 + 1);
  }
  uint64_t v11 = v73 + v10;
  unint64_t v12 = *((void *)&v73 + 1) - v10;
  if (*((void *)&v73 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v73 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  BOOL v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      BOOL v29 = &v21[8 * v17 - 16];
      unint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)unint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)BOOL v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      __int16 v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)__int16 v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  __int16 v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  long long v73 = xmmword_1E4FBF4C0;
  long long v74 = *(_OWORD *)&off_1E4FBF4D0;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.ori", 9, v72, a2, &v73, 2uLL);
  *(void *)__int16 v38 = &unk_1EC99C800;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::OrOfExtSI]";
  *((void *)&v73 + 1) = 82;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v73 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v73 + 1);
  }
  uint64_t v45 = v73 + v44;
  unint64_t v46 = *((void *)&v73 + 1) - v44;
  if (*((void *)&v73 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v73 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    unsigned int v55 = 0;
    unsigned int v56 = (char *)(8 * v51);
    unsigned int v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unsigned int v55 = (char *)operator new(8 * v54);
  unsigned int v56 = &v55[8 * v51];
  unsigned int v57 = &v55[8 * v54];
  *(void *)unsigned int v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  __int16 v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    uint64_t v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)uint64_t v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    uint64_t v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)uint64_t v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    uint64_t v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

BOOL checkIntFloatCast<mlir::IntegerType,mlir::FloatType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((unint64_t v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v13 = ElementTypeOrSelf;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8))
    {
      unint64_t v15 = *(void **)(*v14 + 136);
      BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v15 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v16 && v15 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_61;
      }
    }
    uint64_t v18 = mlir::getElementTypeOrSelf(v14);
    uint64_t v19 = *(void **)(*(void *)v18 + 136);
    BOOL v20 = v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    BOOL v21 = v20 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    BOOL v22 = v21 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    BOOL v23 = v22 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    BOOL v24 = v23 || v19 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    BOOL v25 = v24 || v19 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    BOOL v26 = v25 || v19 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    BOOL v27 = v26 || v19 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    BOOL v28 = v27 || v19 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    BOOL v29 = v28 || v19 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v29 || v19 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      if (!v13) {
        return 0;
      }
    }
    else
    {
LABEL_61:
      uint64_t v18 = 0;
      if (!v13) {
        return 0;
      }
    }
    return v18 != 0;
  }
  return result;
}

unint64_t mlir::arith::UIToFPOp::fold(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  unint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = ElementTypeOrSelf;
  unint64_t v9 = (llvm::APFloatBase *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v60 = *v5;
    mlir::IntegerAttr::getValue(&v60, (llvm::APInt *)v58);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)__p, v8, (uint64_t)v58);
    if (LODWORD(v58[1]) >= 0x41 && v58[0]) {
      operator delete[](v58[0]);
    }
    unint64_t v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)__p);
    uint64_t v14 = (llvm::detail::IEEEFloat *)&__p[1];
    unint64_t v15 = __p[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15) {
      goto LABEL_29;
    }
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  __p[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__p))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)__p);
    *(_OWORD *)__int16 v58 = *(_OWORD *)__p;
    long long v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v58, (llvm::APInt *)__p);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)__p);
    if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
      operator delete[](__p[0]);
    }
    if (v9) {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    uint64_t v14 = (llvm::detail::IEEEFloat *)v61;
    BOOL v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  unint64_t v12 = (void *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    unsigned int v56 = 0;
    uint64_t v57 = 0;
LABEL_26:
    unint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  unsigned int v56 = v12;
  uint64_t v57 = v13;
  if (!v12) {
    goto LABEL_26;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)v58);
  if (!BYTE8(v59)) {
    goto LABEL_26;
  }
  LOWORD(v53) = v58[0];
  if (LOBYTE(v58[0])) {
    unint64_t v54 = (char *)v58[1];
  }
  else {
    (*(void (**)(char **__return_ptr))(*(void *)v58[1] + 16))(&v54);
  }
  uint64_t v55 = v59;
  __p[0] = v63;
  __p[1] = (void *)0x100000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(__p[1]))
  {
    uint64_t v60 = 0;
    uint64_t v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)__p, v63, NumElements, 32, (unint64_t *)&v60);
    BOOL v20 = v19;
    BOOL v21 = (void **)__p[0];
    uint64_t v22 = LODWORD(__p[1]);
    if (LODWORD(__p[1]))
    {
      BOOL v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      BOOL v24 = (void *)((char *)v20 + 8);
      uint64_t v25 = 32 * v22;
      BOOL v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          BOOL v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25) {
            goto LABEL_38;
          }
        }
        BOOL v24 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      BOOL v21 = (void **)__p[0];
      if (LODWORD(__p[1]))
      {
        BOOL v27 = (char *)__p[0] - 24;
        uint64_t v28 = 32 * LODWORD(__p[1]);
        do
        {
          while (1)
          {
            BOOL v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28]) {
              break;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28) {
              goto LABEL_43;
            }
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        BOOL v21 = (void **)__p[0];
      }
    }
    int v30 = v60;
    if (v21 != (void **)v63) {
      free(v21);
    }
    __p[0] = v20;
    HIDWORD(__p[1]) = v30;
  }
  uint64_t v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = v55;
    do
    {
      while (1)
      {
        if (BYTE1(v53)) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v33;
        }
        if ((_BYTE)v53)
        {
          __int16 v35 = &v54[16 * v34];
          unsigned int v52 = *((_DWORD *)v35 + 2);
          if (v52 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, (const void **)v35);
          }
          else {
            uint64_t v51 = *(void **)v35;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(void *)v54 + 24))(&v51);
        }
        mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)&v51);
        if (v52 >= 0x41 && v51) {
          operator delete[](v51);
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)__p, (unint64_t)&v60, 1);
        uint64_t v37 = (llvm::detail::DoubleAPFloat *)((char *)__p[0] + 32 * LODWORD(__p[1]) + 8);
        __int16 v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        unint64_t v39 = (void *)*((void *)Address + 1);
        unint64_t v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        }
        ++LODWORD(__p[1]);
        if (v40 != (void *)v61[0]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        uint64_t v33 = ++v55;
        if (!--v32) {
          goto LABEL_66;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      uint64_t v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9) {
    uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)__p[0], LODWORD(__p[1]));
  unint64_t v6 = (unint64_t)v42;
  unint64_t v43 = (char *)__p[0];
  uint64_t v44 = LODWORD(__p[1]);
  if (LODWORD(__p[1]))
  {
    uint64_t v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    unint64_t v46 = v43 - 24;
    uint64_t v47 = 32 * v44;
    do
    {
      while (1)
      {
        uint64_t v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47) {
          goto LABEL_74;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    unint64_t v43 = (char *)__p[0];
  }
  if (v43 != (char *)v63) {
    free(v43);
  }
  if (!(_BYTE)v53)
  {
    unint64_t v49 = v54;
    unint64_t v54 = 0;
    if (v49) {
      (*(void (**)(char *))(*(void *)v49 + 8))(v49);
    }
  }
  if (BYTE8(v59))
  {
    if (!LOBYTE(v58[0]))
    {
      uint64_t v50 = v58[1];
      v58[1] = 0;
      if (v50) {
        (*(void (**)(void *))(*(void *)v50 + 8))(v50);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::SIToFPOp::fold(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  unint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = ElementTypeOrSelf;
  unint64_t v9 = (llvm::APFloatBase *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v60 = *v5;
    mlir::IntegerAttr::getValue(&v60, (llvm::APInt *)v58);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)__p, v8, (uint64_t)v58);
    if (LODWORD(v58[1]) >= 0x41 && v58[0]) {
      operator delete[](v58[0]);
    }
    unint64_t v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)__p);
    uint64_t v14 = (llvm::detail::IEEEFloat *)&__p[1];
    unint64_t v15 = __p[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15) {
      goto LABEL_29;
    }
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  __p[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__p))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)__p);
    *(_OWORD *)__int16 v58 = *(_OWORD *)__p;
    long long v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v58, (llvm::APInt *)__p);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)__p);
    if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
      operator delete[](__p[0]);
    }
    if (v9) {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    uint64_t v14 = (llvm::detail::IEEEFloat *)v61;
    BOOL v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  unint64_t v12 = (void *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    unsigned int v56 = 0;
    uint64_t v57 = 0;
LABEL_26:
    unint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  unsigned int v56 = v12;
  uint64_t v57 = v13;
  if (!v12) {
    goto LABEL_26;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)v58);
  if (!BYTE8(v59)) {
    goto LABEL_26;
  }
  LOWORD(v53) = v58[0];
  if (LOBYTE(v58[0])) {
    unint64_t v54 = (char *)v58[1];
  }
  else {
    (*(void (**)(char **__return_ptr))(*(void *)v58[1] + 16))(&v54);
  }
  uint64_t v55 = v59;
  __p[0] = v63;
  __p[1] = (void *)0x100000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(__p[1]))
  {
    uint64_t v60 = 0;
    uint64_t v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)__p, v63, NumElements, 32, (unint64_t *)&v60);
    BOOL v20 = v19;
    BOOL v21 = (void **)__p[0];
    uint64_t v22 = LODWORD(__p[1]);
    if (LODWORD(__p[1]))
    {
      BOOL v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      BOOL v24 = (void *)((char *)v20 + 8);
      uint64_t v25 = 32 * v22;
      BOOL v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          BOOL v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25) {
            goto LABEL_38;
          }
        }
        BOOL v24 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      BOOL v21 = (void **)__p[0];
      if (LODWORD(__p[1]))
      {
        BOOL v27 = (char *)__p[0] - 24;
        uint64_t v28 = 32 * LODWORD(__p[1]);
        do
        {
          while (1)
          {
            BOOL v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28]) {
              break;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28) {
              goto LABEL_43;
            }
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        BOOL v21 = (void **)__p[0];
      }
    }
    int v30 = v60;
    if (v21 != (void **)v63) {
      free(v21);
    }
    __p[0] = v20;
    HIDWORD(__p[1]) = v30;
  }
  uint64_t v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = v55;
    do
    {
      while (1)
      {
        if (BYTE1(v53)) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v33;
        }
        if ((_BYTE)v53)
        {
          __int16 v35 = &v54[16 * v34];
          unsigned int v52 = *((_DWORD *)v35 + 2);
          if (v52 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, (const void **)v35);
          }
          else {
            uint64_t v51 = *(void **)v35;
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(void *)v54 + 24))(&v51);
        }
        mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (uint64_t)&v51);
        if (v52 >= 0x41 && v51) {
          operator delete[](v51);
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)__p, (unint64_t)&v60, 1);
        uint64_t v37 = (llvm::detail::DoubleAPFloat *)((char *)__p[0] + 32 * LODWORD(__p[1]) + 8);
        __int16 v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        unint64_t v39 = (void *)*((void *)Address + 1);
        unint64_t v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        }
        ++LODWORD(__p[1]);
        if (v40 != (void *)v61[0]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        uint64_t v33 = ++v55;
        if (!--v32) {
          goto LABEL_66;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      uint64_t v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9) {
    uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)__p[0], LODWORD(__p[1]));
  unint64_t v6 = (unint64_t)v42;
  unint64_t v43 = (char *)__p[0];
  uint64_t v44 = LODWORD(__p[1]);
  if (LODWORD(__p[1]))
  {
    uint64_t v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    unint64_t v46 = v43 - 24;
    uint64_t v47 = 32 * v44;
    do
    {
      while (1)
      {
        uint64_t v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47) {
          goto LABEL_74;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    unint64_t v43 = (char *)__p[0];
  }
  if (v43 != (char *)v63) {
    free(v43);
  }
  if (!(_BYTE)v53)
  {
    unint64_t v49 = v54;
    unint64_t v54 = 0;
    if (v49) {
      (*(void (**)(char *))(*(void *)v49 + 8))(v49);
    }
  }
  if (BYTE8(v59))
  {
    if (!LOBYTE(v58[0]))
    {
      uint64_t v50 = v58[1];
      v58[1] = 0;
      if (v50) {
        (*(void (**)(void *))(*(void *)v50 + 8))(v50);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL checkIntFloatCast<mlir::FloatType,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((unint64_t v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      uint64_t v13 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v25 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    BOOL v26 = (void *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8)
      || (BOOL v27 = *(void **)(*v26 + 136), v27 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      || v27 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v27 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v29 = mlir::getElementTypeOrSelf(v26);
      if (*(_UNKNOWN **)(*(void *)v29 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v28 = v29;
      }
      else {
        uint64_t v28 = 0;
      }
      if (!v25) {
        return 0;
      }
    }
    else
    {
      uint64_t v28 = 0;
      if (!v25) {
        return 0;
      }
    }
    return v28 != 0;
  }
  return result;
}

unint64_t mlir::arith::FPToUIOp::fold(void *a1, uint64_t a2)
{
  v57[6] = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v8 = Width;
  unint64_t v9 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v53 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v53, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v47) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    }
    else {
      unint64_t v46 = 0;
    }
    LOBYTE(v43) = 0;
    BYTE4(v47) = 1;
    unint64_t v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v46, 0, &v43);
    int v13 = (int)v12;
    uint64_t v14 = (void *)v56;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v56);
      if (v13 == 1)
      {
LABEL_19:
        uint64_t v6 = 0;
        if (v47 < 0x41) {
          return v6 & 0xFFFFFFFFFFFFFFFBLL;
        }
        goto LABEL_88;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v56);
      if (v13 == 1) {
        goto LABEL_19;
      }
    }
    uint64_t v6 = mlir::IntegerAttr::get((uint64_t)v9, (llvm::APInt *)&v46);
    if (v47 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_88:
    if (v46) {
      operator delete[](v46);
    }
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v53, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v47) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    }
    else {
      unint64_t v46 = 0;
    }
    LOBYTE(v43) = 0;
    BYTE4(v47) = 1;
    unint64_t v15 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v46, 0, &v43);
    int v16 = (int)v15;
    uint64_t v17 = (void *)v56;
    if (llvm::APFloatBase::PPCDoubleDouble(v15) == v17)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v56);
      if (v16 == 1) {
        goto LABEL_32;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v56);
      if (v16 == 1)
      {
LABEL_32:
        uint64_t v6 = 0;
        goto LABEL_87;
      }
    }
    if (v9) {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v18, (llvm::APInt *)&v46, 1);
LABEL_87:
    if (v47 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_88;
  }
  uint64_t v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
  uint64_t v50 = v6;
  uint64_t v51 = v11;
  if (!v6) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v50, (uint64_t)&v46);
  if (!v49)
  {
    uint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  __int16 v43 = (__int16)v46;
  if ((_BYTE)v46) {
    uint64_t v44 = v47;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v47 + 16))(&v44);
  }
  uint64_t v45 = v48;
  uint64_t ElementTypeOrSelf = v57;
  uint64_t v56 = 0x300000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements(v50, v51);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  uint64_t v20 = mlir::ElementsAttr::getNumElements(v50, v51);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v45;
    do
    {
      if (HIBYTE(v43)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      if ((_BYTE)v43)
      {
        BOOL v24 = (char *)v44 + 32 * v23;
        BOOL v26 = (void *)*((void *)v24 + 1);
        uint64_t v25 = (const llvm::detail::DoubleAPFloat *)(v24 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v44) == v26)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v54, v25);
          unsigned int v41 = v8;
          if (v8 <= 0x40)
          {
LABEL_45:
            long long __p = 0;
            goto LABEL_48;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v54, v25);
          unsigned int v41 = v8;
          if (v8 <= 0x40) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v44 + 24))(&v53);
        unsigned int v41 = v8;
        if (v8 <= 0x40) {
          goto LABEL_45;
        }
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
LABEL_48:
      char v52 = 0;
      char v42 = 1;
      BOOL v27 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v53, (uint64_t)&__p, 0, &v52);
      int v28 = (int)v27;
      uint64_t v29 = (void *)v54[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v27) == v29)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v54);
        if (v28 == 1)
        {
LABEL_50:
          if (v41 < 0x41) {
            goto LABEL_59;
          }
          goto LABEL_57;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v54);
        if (v28 == 1) {
          goto LABEL_50;
        }
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&__p, 1);
      uint64_t v31 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v56);
      unsigned int v32 = *((_DWORD *)Address + 2);
      *((_DWORD *)v31 + 2) = v32;
      if (v32 > 0x40)
      {
        llvm::APInt::initSlowCase(v31, (const void **)Address);
        LODWORD(v56) = v56 + 1;
        if (v41 < 0x41) {
          goto LABEL_59;
        }
      }
      else
      {
        *(void *)uint64_t v31 = *(void *)Address;
        LODWORD(v56) = v56 + 1;
        if (v41 < 0x41) {
          goto LABEL_59;
        }
      }
LABEL_57:
      if (__p) {
        operator delete[](__p);
      }
LABEL_59:
      if (v28 == 1)
      {
        uint64_t v6 = 0;
        goto LABEL_69;
      }
      uint64_t v22 = ++v45;
      --v21;
    }
    while (v21);
  }
  if (v9) {
    uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v33, (llvm::APInt *)ElementTypeOrSelf, v56);
LABEL_69:
  uint64_t v34 = (char *)ElementTypeOrSelf;
  if (v56)
  {
    uint64_t v35 = 16 * v56;
    do
    {
      if (*(_DWORD *)&v34[v35 - 8] >= 0x41u)
      {
        uint64_t v36 = *(void **)&v34[v35 - 16];
        if (v36) {
          operator delete[](v36);
        }
      }
      v35 -= 16;
    }
    while (v35);
    uint64_t v34 = (char *)ElementTypeOrSelf;
  }
  if (v34 != (char *)v57) {
    free(v34);
  }
  if (!(_BYTE)v43)
  {
    uint64_t v37 = v44;
    uint64_t v44 = 0;
    if (v37) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v37 + 8))(v37);
    }
  }
  if (v49)
  {
    if (!(_BYTE)v46)
    {
      __int16 v38 = v47;
      uint64_t v47 = 0;
      if (v38) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v38 + 8))(v38);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::FPToSIOp::fold(void *a1, uint64_t a2)
{
  v57[6] = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  unint64_t v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v8 = Width;
  unint64_t v9 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v53 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v53, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v47) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    }
    else {
      unint64_t v46 = 0;
    }
    LOBYTE(v43) = 0;
    BYTE4(v47) = 0;
    unint64_t v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v46, 0, &v43);
    int v13 = (int)v12;
    uint64_t v14 = (void *)v56;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v56);
      if (v13 == 1)
      {
LABEL_19:
        uint64_t v6 = 0;
        if (v47 < 0x41) {
          return v6 & 0xFFFFFFFFFFFFFFFBLL;
        }
        goto LABEL_88;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v56);
      if (v13 == 1) {
        goto LABEL_19;
      }
    }
    uint64_t v6 = mlir::IntegerAttr::get((uint64_t)v9, (llvm::APInt *)&v46);
    if (v47 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_88:
    if (v46) {
      operator delete[](v46);
    }
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v53, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v47) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    }
    else {
      unint64_t v46 = 0;
    }
    LOBYTE(v43) = 0;
    BYTE4(v47) = 0;
    unint64_t v15 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v46, 0, &v43);
    int v16 = (int)v15;
    uint64_t v17 = (void *)v56;
    if (llvm::APFloatBase::PPCDoubleDouble(v15) == v17)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v56);
      if (v16 == 1) {
        goto LABEL_32;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v56);
      if (v16 == 1)
      {
LABEL_32:
        uint64_t v6 = 0;
        goto LABEL_87;
      }
    }
    if (v9) {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v18, (llvm::APInt *)&v46, 1);
LABEL_87:
    if (v47 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_88;
  }
  uint64_t v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
  uint64_t v50 = v6;
  uint64_t v51 = v11;
  if (!v6) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v50, (uint64_t)&v46);
  if (!v49)
  {
    uint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  __int16 v43 = (__int16)v46;
  if ((_BYTE)v46) {
    uint64_t v44 = v47;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v47 + 16))(&v44);
  }
  uint64_t v45 = v48;
  uint64_t ElementTypeOrSelf = v57;
  uint64_t v56 = 0x300000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements(v50, v51);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  uint64_t v20 = mlir::ElementsAttr::getNumElements(v50, v51);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v45;
    do
    {
      if (HIBYTE(v43)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      if ((_BYTE)v43)
      {
        BOOL v24 = (char *)v44 + 32 * v23;
        BOOL v26 = (void *)*((void *)v24 + 1);
        uint64_t v25 = (const llvm::detail::DoubleAPFloat *)(v24 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v44) == v26)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v54, v25);
          unsigned int v41 = v8;
          if (v8 <= 0x40)
          {
LABEL_45:
            long long __p = 0;
            goto LABEL_48;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v54, v25);
          unsigned int v41 = v8;
          if (v8 <= 0x40) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v44 + 24))(&v53);
        unsigned int v41 = v8;
        if (v8 <= 0x40) {
          goto LABEL_45;
        }
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
LABEL_48:
      char v52 = 0;
      char v42 = 0;
      BOOL v27 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v53, (uint64_t)&__p, 0, &v52);
      int v28 = (int)v27;
      uint64_t v29 = (void *)v54[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v27) == v29)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v54);
        if (v28 == 1)
        {
LABEL_50:
          if (v41 < 0x41) {
            goto LABEL_59;
          }
          goto LABEL_57;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v54);
        if (v28 == 1) {
          goto LABEL_50;
        }
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&__p, 1);
      uint64_t v31 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v56);
      unsigned int v32 = *((_DWORD *)Address + 2);
      *((_DWORD *)v31 + 2) = v32;
      if (v32 > 0x40)
      {
        llvm::APInt::initSlowCase(v31, (const void **)Address);
        LODWORD(v56) = v56 + 1;
        if (v41 < 0x41) {
          goto LABEL_59;
        }
      }
      else
      {
        *(void *)uint64_t v31 = *(void *)Address;
        LODWORD(v56) = v56 + 1;
        if (v41 < 0x41) {
          goto LABEL_59;
        }
      }
LABEL_57:
      if (__p) {
        operator delete[](__p);
      }
LABEL_59:
      if (v28 == 1)
      {
        uint64_t v6 = 0;
        goto LABEL_69;
      }
      uint64_t v22 = ++v45;
      --v21;
    }
    while (v21);
  }
  if (v9) {
    uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v33, (llvm::APInt *)ElementTypeOrSelf, v56);
LABEL_69:
  uint64_t v34 = (char *)ElementTypeOrSelf;
  if (v56)
  {
    uint64_t v35 = 16 * v56;
    do
    {
      if (*(_DWORD *)&v34[v35 - 8] >= 0x41u)
      {
        uint64_t v36 = *(void **)&v34[v35 - 16];
        if (v36) {
          operator delete[](v36);
        }
      }
      v35 -= 16;
    }
    while (v35);
    uint64_t v34 = (char *)ElementTypeOrSelf;
  }
  if (v34 != (char *)v57) {
    free(v34);
  }
  if (!(_BYTE)v43)
  {
    uint64_t v37 = v44;
    uint64_t v44 = 0;
    if (v37) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v37 + 8))(v37);
    }
  }
  if (v49)
  {
    if (!(_BYTE)v46)
    {
      __int16 v38 = v47;
      uint64_t v47 = 0;
      if (v38) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v38 + 8))(v38);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t areIndexCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((unsigned int v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      int v13 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        uint64_t v26 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v26 = 0;
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v28 = v26;
    unint64_t v15 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
    {
      int v16 = *(void **)(*v15 + 136);
      BOOL v17 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v16 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
      BOOL v18 = v17 || v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v18 && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        return 0;
      }
    }
    uint64_t v20 = mlir::getElementTypeOrSelf(v15);
    uint64_t v21 = *(void **)(*(void *)v20 + 136);
    BOOL v22 = v21 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
       || v21 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
    uint64_t v23 = v22 ? v20 : 0;
    uint64_t v27 = v23;
    if (!v26 || v23 == 0)
    {
      return 0;
    }
    else
    {
      BOOL isIndex = mlir::Type::isIndex((mlir::Type *)&v28);
      if (isIndex && mlir::Type::isSignlessInteger((mlir::Type *)&v27))
      {
        return 1;
      }
      else
      {
        uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&v28);
        if (result) {
          return mlir::Type::isIndex((mlir::Type *)&v27);
        }
      }
    }
  }
  return result;
}

unint64_t mlir::arith::IndexCastOp::fold(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v5 = (void *)ElementTypeOrSelf;
  }
  else {
    unint64_t v5 = 0;
  }
  v41[0] = v5;
  if (v5)
  {
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    unsigned int Width = 64;
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  BOOL v9 = *(void **)(*(void *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  BOOL v10 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    long long __p = (void *)v8;
    mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)v39);
    llvm::APInt::sextOrTrunc((char *)v39, Width, (uint64_t)v41);
    if (LODWORD(v39[1]) >= 0x41 && v39[0]) {
      operator delete[](v39[0]);
    }
    uint64_t v8 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41) {
      goto LABEL_35;
    }
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(v8)) {
    BOOL v11 = (void *)v8;
  }
  else {
    BOOL v11 = 0;
  }
  v41[0] = v11;
  if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
  {
    uint64_t v8 = *v7;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v7 + 8))
    {
      uint64_t v8 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v8 + 8);
    uint64_t v37 = v8;
    uint64_t v38 = v13;
    if (!v8) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)v39);
    if (!BYTE8(v40))
    {
      uint64_t v8 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    LOWORD(__p) = v39[0];
    if (LOBYTE(v39[0])) {
      uint64_t v35 = (char *)v39[1];
    }
    else {
      (*(void (**)(char **__return_ptr))(*(void *)v39[1] + 16))(&v35);
    }
    uint64_t v36 = v40;
    v41[0] = v42;
    v41[1] = (void *)0x300000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
    uint64_t v15 = mlir::ElementsAttr::getNumElements(v37, v38);
    if (!v15)
    {
LABEL_58:
      if (v10) {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
      BOOL v24 = (char *)v41[0];
      if (LODWORD(v41[1]))
      {
        uint64_t v25 = 16 * LODWORD(v41[1]);
        do
        {
          if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
          {
            uint64_t v26 = *(void **)&v24[v25 - 16];
            if (v26) {
              operator delete[](v26);
            }
          }
          v25 -= 16;
        }
        while (v25);
        BOOL v24 = (char *)v41[0];
      }
      if (v24 != (char *)v42) {
        free(v24);
      }
      if (!(_BYTE)__p)
      {
        uint64_t v27 = v35;
        uint64_t v35 = 0;
        if (v27) {
          (*(void (**)(char *))(*(void *)v27 + 8))(v27);
        }
      }
      if (BYTE8(v40))
      {
        if (!LOBYTE(v39[0]))
        {
          uint64_t v28 = v39[1];
          v39[1] = 0;
          if (v28) {
            (*(void (**)(void *))(*(void *)v28 + 8))(v28);
          }
        }
      }
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v16 = v15;
    uint64_t v17 = v36;
    while (1)
    {
      if (BYTE1(__p)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      if ((_BYTE)__p)
      {
        uint64_t v19 = &v35[16 * v18];
        unsigned int v31 = *((_DWORD *)v19 + 2);
        if (v31 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, (const void **)v19);
        }
        else {
          int v30 = *(void **)v19;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(void *)v35 + 24))(&v30);
      }
      llvm::APInt::sextOrTrunc((char *)&v30, Width, (uint64_t)&v32);
      if (v31 >= 0x41 && v30) {
        operator delete[](v30);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
      uint64_t v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
      unsigned int v22 = *((_DWORD *)Address + 2);
      *((_DWORD *)v21 + 2) = v22;
      if (v22 > 0x40)
      {
        llvm::APInt::initSlowCase(v21, (const void **)Address);
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
        {
LABEL_56:
          if (v32) {
            operator delete[](v32);
          }
        }
      }
      else
      {
        *(void *)uint64_t v21 = *(void *)Address;
        ++LODWORD(v41[1]);
        if (v33 >= 0x41) {
          goto LABEL_56;
        }
      }
      uint64_t v17 = ++v36;
      if (!--v16) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v37 = *v7;
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
  *(_OWORD *)unint64_t v39 = *(_OWORD *)v41;
  long long v40 = v42[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v39, (llvm::APInt *)&__p);
  llvm::APInt::sextOrTrunc((char *)&__p, Width, (uint64_t)v41);
  if (v35 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v10) {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
  if (LODWORD(v41[1]) >= 0x41)
  {
LABEL_35:
    if (v41[0]) {
      operator delete[](v41[0]);
    }
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v73, 2);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.index_cast", 16, (__int16)v73, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC99A6A8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastOfIndexCast]";
  unint64_t v74 = 93;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v74;
  }
  BOOL v11 = &v73[v10];
  unint64_t v12 = v74 - v10;
  if (v74 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v74 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      int v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)int v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 2);
  long long v73 = "arith.index_cast";
  unint64_t v74 = 16;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.index_cast", 16, v72, a2, &v73, 1uLL);
  *(void *)uint64_t v38 = &unk_1EC9981A0;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    unsigned int v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastOfExtSI]";
  unint64_t v74 = 89;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v74;
  }
  uint64_t v45 = &v73[v44];
  unint64_t v46 = v74 - v44;
  if (v74 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v74 - v44;
  }
  uint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  unsigned int v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)unsigned int v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v55 = (char *)operator new(8 * v54);
  uint64_t v56 = &v55[8 * v51];
  uint64_t v57 = &v55[8 * v54];
  *(void *)uint64_t v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  __int16 v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    uint64_t v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)uint64_t v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    unsigned int v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)unsigned int v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    unsigned int v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

unint64_t mlir::arith::IndexCastUIOp::fold(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v5 = (void *)ElementTypeOrSelf;
  }
  else {
    unint64_t v5 = 0;
  }
  v41[0] = v5;
  if (v5)
  {
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    unsigned int Width = 64;
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  unint64_t v9 = *(void **)(*(void *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v10 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    long long __p = (void *)v8;
    mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)v39);
    llvm::APInt::zextOrTrunc((const void **)v39, Width, (uint64_t)v41);
    if (LODWORD(v39[1]) >= 0x41 && v39[0]) {
      operator delete[](v39[0]);
    }
    uint64_t v8 = mlir::IntegerAttr::get((uint64_t)v10, (llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41) {
      goto LABEL_35;
    }
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(v8)) {
    BOOL v11 = (void *)v8;
  }
  else {
    BOOL v11 = 0;
  }
  v41[0] = v11;
  if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
  {
    uint64_t v8 = *v7;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v7 + 8))
    {
      uint64_t v8 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v8 + 8);
    uint64_t v37 = v8;
    uint64_t v38 = v13;
    if (!v8) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)v39);
    if (!BYTE8(v40))
    {
      uint64_t v8 = 0;
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    LOWORD(__p) = v39[0];
    if (LOBYTE(v39[0])) {
      uint64_t v35 = (char *)v39[1];
    }
    else {
      (*(void (**)(char **__return_ptr))(*(void *)v39[1] + 16))(&v35);
    }
    uint64_t v36 = v40;
    v41[0] = v42;
    v41[1] = (void *)0x300000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
    uint64_t v15 = mlir::ElementsAttr::getNumElements(v37, v38);
    if (!v15)
    {
LABEL_58:
      if (v10) {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
      BOOL v24 = (char *)v41[0];
      if (LODWORD(v41[1]))
      {
        uint64_t v25 = 16 * LODWORD(v41[1]);
        do
        {
          if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
          {
            uint64_t v26 = *(void **)&v24[v25 - 16];
            if (v26) {
              operator delete[](v26);
            }
          }
          v25 -= 16;
        }
        while (v25);
        BOOL v24 = (char *)v41[0];
      }
      if (v24 != (char *)v42) {
        free(v24);
      }
      if (!(_BYTE)__p)
      {
        uint64_t v27 = v35;
        uint64_t v35 = 0;
        if (v27) {
          (*(void (**)(char *))(*(void *)v27 + 8))(v27);
        }
      }
      if (BYTE8(v40))
      {
        if (!LOBYTE(v39[0]))
        {
          uint64_t v28 = v39[1];
          v39[1] = 0;
          if (v28) {
            (*(void (**)(void *))(*(void *)v28 + 8))(v28);
          }
        }
      }
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v16 = v15;
    uint64_t v17 = v36;
    while (1)
    {
      if (BYTE1(__p)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      if ((_BYTE)__p)
      {
        uint64_t v19 = &v35[16 * v18];
        unsigned int v31 = *((_DWORD *)v19 + 2);
        if (v31 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, (const void **)v19);
        }
        else {
          int v30 = *(void **)v19;
        }
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(void *)v35 + 24))(&v30);
      }
      llvm::APInt::zextOrTrunc((const void **)&v30, Width, (uint64_t)&v32);
      if (v31 >= 0x41 && v30) {
        operator delete[](v30);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
      uint64_t v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
      unsigned int v22 = *((_DWORD *)Address + 2);
      *((_DWORD *)v21 + 2) = v22;
      if (v22 > 0x40)
      {
        llvm::APInt::initSlowCase(v21, (const void **)Address);
        ++LODWORD(v41[1]);
        if (v33 >= 0x41)
        {
LABEL_56:
          if (v32) {
            operator delete[](v32);
          }
        }
      }
      else
      {
        *(void *)uint64_t v21 = *(void *)Address;
        ++LODWORD(v41[1]);
        if (v33 >= 0x41) {
          goto LABEL_56;
        }
      }
      uint64_t v17 = ++v36;
      if (!--v16) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v37 = *v7;
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
  *(_OWORD *)unint64_t v39 = *(_OWORD *)v41;
  long long v40 = v42[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v39, (llvm::APInt *)&__p);
  llvm::APInt::zextOrTrunc((const void **)&__p, Width, (uint64_t)v41);
  if (v35 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v10) {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
  if (LODWORD(v41[1]) >= 0x41)
  {
LABEL_35:
    if (v41[0]) {
      operator delete[](v41[0]);
    }
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastUIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v73, 2);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.index_castui", 18, (__int16)v73, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC99B540;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastUIOfIndexCastUI]";
  unint64_t v74 = 97;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v74;
  }
  BOOL v11 = &v73[v10];
  unint64_t v12 = v74 - v10;
  if (v74 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v74 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      int v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)int v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 2);
  long long v73 = "arith.index_castui";
  unint64_t v74 = 18;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.index_castui", 18, v72, a2, &v73, 1uLL);
  *(void *)uint64_t v38 = &unk_1EC999108;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    unsigned int v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  long long v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::IndexCastUIOfExtUI]";
  unint64_t v74 = 91;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v74;
  }
  uint64_t v45 = &v73[v44];
  unint64_t v46 = v74 - v44;
  if (v74 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v74 - v44;
  }
  uint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  unsigned int v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)unsigned int v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v55 = (char *)operator new(8 * v54);
  uint64_t v56 = &v55[8 * v51];
  uint64_t v57 = &v55[8 * v54];
  *(void *)uint64_t v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  __int16 v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    uint64_t v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)uint64_t v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    unsigned int v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)unsigned int v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    unsigned int v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

BOOL mlir::arith::BitcastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    uint64_t v12 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v7);
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    uint64_t v9 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v8);
    BOOL result = 0;
    uint64_t v11 = v9;
    if (v12)
    {
      if (v9)
      {
        int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v12);
        return IntOrFloatBitWidth == mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11);
      }
    }
  }
  return result;
}

BOOL areValidCastInputsAndOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a2 == 1 && a4 == 1)
  {
    unint64_t v7 = mlir::TypeRange::dereference_iterator(a1, 0);
    unint64_t v8 = mlir::TypeRange::dereference_iterator(a3, 0);
    if (*(_UNKNOWN **)(*(void *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v14 = v9;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0;
    }
    unint64_t v13 = v10;
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11
      || (uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v14),
          Values == mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v13)))
    {
      unint64_t v14 = mlir::TypeRange::dereference_iterator(a1, 0);
      mlir::ValueRange::ValueRange(v16, (uint64_t)&v14, 1uLL);
      unint64_t v13 = mlir::TypeRange::dereference_iterator(a3, 0);
      mlir::ValueRange::ValueRange(v15, (uint64_t)&v13, 1uLL);
      return mlir::verifyCompatibleShapes(v16[0], v16[1], v15[0], v15[1]) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(void *a1)
{
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    uint64_t v2 = *(void **)(*a1 + 136);
    BOOL v3 = v2 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
      || v2 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
    BOOL v4 = v3 || v2 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
    if (!v4 && v2 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
      return 0;
    }
  }
  uint64_t result = mlir::getElementTypeOrSelf(a1);
  unint64_t v7 = *(void **)(*(void *)result + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  BOOL v9 = v8 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  BOOL v10 = v9 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v11 = v10 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v12 = v11 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v13 = v12 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v14 = v13 || v7 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v15 = v14 || v7 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v16 = v15 || v7 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v17 = v16 || v7 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v18 = v17 || v7 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  BOOL v19 = v18 || v7 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (!v19 && v7 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id) {
    return 0;
  }
  return result;
}

unint64_t mlir::arith::BitcastOp::fold(void *a1, uint64_t a2)
{
  void v33[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void ***)(a2 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  BOOL v4 = mlir::DenseElementsAttr::classof(**(void **)(a2 + 40));
  if (v4) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0;
  }
  long long __p = v5;
  if (v4)
  {
    if (v3) {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    unint64_t v32 = v3;
    v33[0] = v6;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v32);
    return mlir::DenseElementsAttr::bitcast((uint64_t)&__p, OperandRange) & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8)) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    unint64_t v29 = (unint64_t)v2;
    uint64_t Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v29, (uint64_t)&v32);
    BOOL v11 = (void *)v33[0];
    BOOL v12 = llvm::APFloatBase::PPCDoubleDouble(Value);
    if (v12 == v11)
    {
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v33, (llvm::APInt *)&__p);
      if (v12 != (void *)v33[0]) {
        goto LABEL_17;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v33, (uint64_t)&__p);
      if (v12 != (void *)v33[0])
      {
LABEL_17:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
        goto LABEL_20;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
    goto LABEL_20;
  }
  uint64_t v28 = v2;
  mlir::IntegerAttr::getValue(&v28, (llvm::APInt *)&__p);
LABEL_20:
  BOOL v13 = *(void **)(*(void *)v3 + 136);
  BOOL v24 = v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v24 && (unint64_t v29 = v3) != 0)
  {
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v29);
    uint64_t v26 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v26 == FloatSemantics) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v33, (uint64_t)v26, (uint64_t)&__p);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v33, FloatSemantics, (const llvm::APInt **)&__p);
    }
    uint64_t v27 = mlir::FloatAttr::get(v3, (uint64_t)&v32);
    if (v26 == (llvm::APFloatBase *)v33[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      unint64_t v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41) {
        return v7;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
      unint64_t v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41) {
        return v7;
      }
    }
  }
  else
  {
    unint64_t v7 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p) & 0xFFFFFFFFFFFFFFFBLL;
    if (v31 < 0x41) {
      return v7;
    }
  }
  if (__p) {
    operator delete[](__p);
  }
  return v7;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2, const llvm::APInt **a3)
{
  uint64_t v6 = (llvm::APFloatBase *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (uint64_t)a2, (uint64_t)a3);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat(v6, a2, a3);
  }
  return a1;
}

void mlir::arith::BitcastOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  BOOL v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 2);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.bitcast", 13, (__int16)v38, a2, 0, 0);
  *(void *)BOOL v4 = &unk_1EC997F98;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    unint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::BitcastOfBitcast]";
  unint64_t v39 = 89;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  BOOL v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  BOOL v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  unint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)unint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  BOOL v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      int v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)int v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      unint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)unint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      unint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::arith::applyCmpPredicate(uint64_t a1, const void **this, const void **a3)
{
  switch(a1)
  {
    case 1:
      if (*((_DWORD *)this + 2) > 0x40u) {
        uint64_t result = !llvm::APInt::equalSlowCase(this, a3);
      }
      else {
        uint64_t result = *this != *a3;
      }
      break;
    case 2:
      uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) >> 31;
      break;
    case 3:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) < 1;
      break;
    case 4:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) > 0;
      break;
    case 5:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) >= 0;
      break;
    case 6:
      uint64_t result = llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) >> 31;
      break;
    case 7:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) < 1;
      break;
    case 8:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) > 0;
      break;
    case 9:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) >= 0;
      break;
    default:
      if (*((_DWORD *)this + 2) > 0x40u)
      {
        uint64_t result = llvm::APInt::equalSlowCase(this, a3);
      }
      else
      {
        uint64_t result = *this == *a3;
      }
      break;
  }
  return result;
}

uint64_t mlir::arith::CmpIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*a1 + 72) + 24) == *(void *)(*(void *)(*a1 + 72) + 56))
  {
    *(void *)uint64_t v118 = *(void *)(*a1 + 80);
    uint64_t v8 = (mlir::MLIRContext *)((0x2A9u >> mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v118)) & 1);
    *(void *)uint64_t v118 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v118);
    I1Sameuint64_t Shape = mlir::BoolAttr::get(Context, v8);
    *(void *)&long long v116 = I1SameShape;
    BOOL v11 = *(void **)v118;
    if (*(void *)v118)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**(void **)v118 + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
        if (v11) {
          I1Sameuint64_t Shape = mlir::DenseElementsAttr::get((uint64_t)v11, v12, (uint64_t *)&v116, 1uLL);
        }
      }
    }
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 48) + 8);
  if (!v4) {
    goto LABEL_50;
  }
  *(_DWORD *)&void v118[8] = 1;
  *(void *)uint64_t v118 = 0;
  *(void *)&long long v116 = v118;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v116, v4);
  int v6 = *(_DWORD *)&v118[8];
  if (v5)
  {
    if (*(_DWORD *)&v118[8] < 0x41u)
    {
      BOOL v7 = *(void *)v118 == 0;
      goto LABEL_17;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v118) > 0x40)
    {
      if (*(void *)v118) {
        operator delete[](*(void **)v118);
      }
      goto LABEL_50;
    }
    BOOL v7 = **(void **)v118 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (*(_DWORD *)&v118[8] < 0x41u) {
      goto LABEL_17;
    }
  }
  if (!*(void *)v118)
  {
LABEL_17:
    if (!v7) {
      goto LABEL_50;
    }
    goto LABEL_18;
  }
  operator delete[](*(void **)v118);
  if (!v7) {
    goto LABEL_50;
  }
LABEL_18:
  *(void *)uint64_t v118 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v118);
  if (!DefiningOp) {
    goto LABEL_20;
  }
  uint64_t v14 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id) {
    goto LABEL_20;
  }
  unint64_t v19 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = *(void **)(*(void *)v19 + 136);
  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v21 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v21 = 0;
  }
  *(void *)uint64_t v118 = v21;
  if (!v21)
  {
    if (v20 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
      unint64_t v19 = 0;
    }
    *(void *)uint64_t v118 = v19;
    if (!v19) {
      goto LABEL_20;
    }
    *(void *)&long long v116 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v118);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v116) != 1) {
      goto LABEL_20;
    }
LABEL_42:
    *(void *)uint64_t v118 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v118) == 1) {
      return *(void *)(*(void *)(v14 + 72) + 24) | 4;
    }
    goto LABEL_20;
  }
  if (mlir::IntegerType::getWidth((mlir::IntegerType *)v118) == 1) {
    goto LABEL_42;
  }
LABEL_20:
  *(void *)uint64_t v118 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v118);
  if (!v15) {
    goto LABEL_50;
  }
  uint64_t v14 = v15;
  if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v18 = *(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v18 = 0;
  }
  *(void *)uint64_t v118 = v18;
  if (v18)
  {
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)v118) != 1) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v17 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
      unint64_t v16 = 0;
    }
    *(void *)uint64_t v118 = v16;
    if (!v16) {
      goto LABEL_50;
    }
    *(void *)&long long v116 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v118);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v116) != 1) {
      goto LABEL_50;
    }
  }
  *(void *)uint64_t v118 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v118) == 1) {
    return *(void *)(*(void *)(v14 + 72) + 24) | 4;
  }
LABEL_50:
  uint64_t v23 = *(void *)(a2 + 48);
  BOOL v24 = *(void **)v23;
  if (!*(void *)v23)
  {
    unint64_t v86 = 0;
    uint64_t v87 = 0;
    return 0;
  }
  if (!*(void *)(v23 + 8))
  {
    *(int64x2_t *)&void v118[8] = vdupq_n_s64(4uLL);
    *(_OWORD *)&v118[24] = xmmword_1810FE510;
    int64x2_t v119 = vdupq_n_s64(5uLL);
    long long v120 = xmmword_1810FE520;
    int64x2_t v121 = vdupq_n_s64(8uLL);
    long long v122 = xmmword_1810FE530;
    int64x2_t v123 = vdupq_n_s64(9uLL);
    v125[0] = 0;
    v125[1] = 0;
    uint64_t v124 = 7;
    int64x2_t v126 = vdupq_n_s64(1uLL);
    *(void *)&long long v116 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v116);
    uint64_t v26 = (int64x2_t *)v118;
    switch(result)
    {
      case 0:
        uint64_t v26 = (int64x2_t *)v125;
        goto LABEL_95;
      case 1:
        uint64_t v26 = &v126;
        goto LABEL_95;
      case 2:
        goto LABEL_95;
      case 3:
        uint64_t v26 = (int64x2_t *)&v118[32];
        goto LABEL_95;
      case 4:
        uint64_t v26 = (int64x2_t *)&v118[16];
        goto LABEL_95;
      case 5:
        uint64_t v26 = (int64x2_t *)&v119.u64[1];
        goto LABEL_95;
      case 6:
        uint64_t v26 = (int64x2_t *)((char *)&v120 + 8);
        goto LABEL_95;
      case 7:
        uint64_t v26 = (int64x2_t *)((char *)&v122 + 8);
        goto LABEL_95;
      case 8:
        uint64_t v26 = (int64x2_t *)&v121.u64[1];
        goto LABEL_95;
      case 9:
        uint64_t v26 = (int64x2_t *)&v123.u64[1];
LABEL_95:
        uint64_t v42 = v26->i64[1];
        uint64_t v43 = *a1;
        uint64_t v44 = **(void **)(*(void *)(*a1 + 48) + 96);
        uint64_t v45 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
        uint64_t v46 = mlir::IntegerType::get(v45, 0x40u, 0);
        uint64_t v47 = mlir::IntegerAttr::get(v46, v42);
        mlir::Operation::setAttr(v43, v44, v47);
        uint64_t v48 = *(uint64_t **)(*a1 + 72);
        unint64_t v49 = (uint64_t *)v48[3];
        uint64_t v50 = (uint64_t *)v48[7];
        uint64_t v51 = (uint64_t *)v48[1];
        if (v51)
        {
          *uint64_t v51 = *v48;
          if (*v48) {
            *(void *)(*v48 + 8) = v48[1];
          }
        }
        v48[3] = (uint64_t)v50;
        v48[1] = (uint64_t)v50;
        uint64_t v52 = *v50;
        *uint64_t v48 = *v50;
        if (v52) {
          *(void *)(v52 + 8) = v48;
        }
        *uint64_t v50 = (uint64_t)v48;
        uint64_t v53 = *(void **)(*a1 + 72);
        unint64_t v54 = v53 + 4;
        uint64_t v55 = (void *)v53[5];
        if (v55)
        {
          void *v55 = *v54;
          if (*v54) {
            *(void *)(*v54 + 8) = v53[5];
          }
        }
        v53[7] = v49;
        v53[5] = v49;
        uint64_t v56 = *v49;
        v53[4] = *v49;
        if (v56) {
          *(void *)(v56 + 8) = v54;
        }
        *unint64_t v49 = (uint64_t)v54;
        if (*(_DWORD *)(*a1 + 36)) {
          uint64_t v57 = *a1 - 16;
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v57, 0) | 4;
        break;
      default:
        return result;
    }
    return result;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8))
  {
    unint64_t v86 = 0;
    uint64_t v87 = 0;
    return 0;
  }
  uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8);
  unint64_t v86 = v24;
  uint64_t v87 = v25;
  if (!v24) {
    return 0;
  }
  uint64_t v27 = *(uint64_t **)(a2 + 48);
  uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v86);
  I1Sameuint64_t Shape = getI1SameShape(canMapOperands);
  *(void *)uint64_t v118 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v118);
  if (!I1SameShape) {
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v30 = *v27;
  if (!*v27) {
    goto LABEL_110;
  }
  uint64_t v31 = v27[1];
  if (!v31) {
    goto LABEL_110;
  }
  uint64_t v32 = Int;
  if (*(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *(void *)&long long v116 = *v27;
    uint64_t v101 = v31;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v116);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v101))
    {
      mlir::IntegerAttr::getValue(&v116, (llvm::APInt *)&v114);
      mlir::IntegerAttr::getValue(&v101, (llvm::APInt *)&v112);
      unsigned int v64 = mlir::arith::applyCmpPredicate(v32, (const void **)&v114, (const void **)&v112);
      *(_DWORD *)&void v118[8] = 1;
      *(void *)uint64_t v118 = v64;
      v118[16] = 1;
      if (v113 >= 0x41 && v112) {
        operator delete[](v112);
      }
      if (v115 >= 0x41 && v114) {
        operator delete[](v114);
      }
      I1Sameuint64_t Shape = mlir::IntegerAttr::get(I1SameShape, (llvm::APInt *)v118);
      if (!v118[16]) {
        return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_129:
      if (*(_DWORD *)&v118[8] >= 0x41u)
      {
        if (*(void *)v118) {
          operator delete[](*(void **)v118);
        }
      }
      return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_110;
  }
  if (mlir::DenseElementsAttr::classof(*v27)) {
    uint64_t v33 = v30;
  }
  else {
    uint64_t v33 = 0;
  }
  *(void *)uint64_t v118 = v33;
  if (v33 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v118))
  {
    uint64_t v34 = v27[1];
    uint64_t v35 = mlir::DenseElementsAttr::classof(v34) ? v34 : 0;
    *(void *)uint64_t v118 = v35;
    if (v35)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v118))
      {
        uint64_t v36 = v27[1];
        uint64_t v101 = *v27;
        uint64_t v98 = v36;
        uint64_t v37 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v101);
        if (v37 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v98))
        {
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v101, (uint64_t)v118);
          long long v116 = *(_OWORD *)v118;
          long long v117 = *(_OWORD *)&v118[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v116, (llvm::APInt *)&v110);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v98, (uint64_t)v118);
          long long v116 = *(_OWORD *)v118;
          long long v117 = *(_OWORD *)&v118[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v116, (llvm::APInt *)&__p);
          unsigned int v38 = mlir::arith::applyCmpPredicate(v32, (const void **)&v110, (const void **)&__p);
          *(_DWORD *)&void v118[8] = 1;
          *(void *)uint64_t v118 = v38;
          v118[16] = 1;
          if (v109 >= 0x41 && __p) {
            operator delete[](__p);
          }
          if (v111 >= 0x41 && v110) {
            operator delete[](v110);
          }
          uint64_t v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)I1SameShape + 8);
          I1Sameuint64_t Shape = mlir::DenseElementsAttr::get(I1SameShape, v39, (llvm::APInt *)v118, 1);
          if (!v118[16]) {
            return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
          }
          goto LABEL_129;
        }
        goto LABEL_110;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v27 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v27[1] + 8))
  {
LABEL_110:
    I1Sameuint64_t Shape = 0;
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  unint64_t v40 = (void *)*v27;
  if (*v27) {
    uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v40 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v106 = v40;
  uint64_t v107 = v41;
  unint64_t v59 = (void *)v27[1];
  if (v59) {
    uint64_t v60 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v59 + 8);
  }
  else {
    uint64_t v60 = 0;
  }
  v105[0] = v59;
  v105[1] = v60;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v106);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v105)) {
    return 0;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v106, (uint64_t)&v116);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v105, (uint64_t)&v101);
  uint64_t v62 = 0;
  int v63 = v104;
  if (!BYTE8(v117) || !v104) {
    goto LABEL_188;
  }
  LOWORD(v98) = v116;
  if ((_BYTE)v116) {
    uint64_t v99 = *((void *)&v116 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v116 + 1) + 16))(&v99);
  }
  uint64_t v100 = v117;
  __int16 v95 = v101;
  if ((_BYTE)v101) {
    uint64_t v96 = v102;
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v102 + 16))(&v96);
  }
  uint64_t v97 = v103;
  *(void *)uint64_t v118 = &v118[16];
  *(void *)&void v118[8] = 0x400000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v106, v107);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v118, NumElements);
  uint64_t v66 = mlir::ElementsAttr::getNumElements((uint64_t)v106, v107);
  if (!v66)
  {
LABEL_170:
    uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)I1SameShape + 8);
    uint64_t v62 = mlir::DenseElementsAttr::get(I1SameShape, v78, *(llvm::APInt **)v118, *(unsigned int *)&v118[8]);
    goto LABEL_172;
  }
  uint64_t v67 = v66;
  uint64_t v68 = v100;
  while (1)
  {
    if (BYTE1(v98)) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = v68;
    }
    if ((_BYTE)v98)
    {
      uint64_t v70 = v99 + 16 * v69;
      unsigned int v91 = *(_DWORD *)(v70 + 8);
      if (v91 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const void **)v70);
      }
      else {
        uint64_t v90 = *(void **)v70;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(void *)v99 + 24))(&v90);
    }
    if (HIBYTE(v95)) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = v97;
    }
    if (!(_BYTE)v95)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v96 + 24))(&v88);
LABEL_155:
      unsigned int v73 = v89;
      goto LABEL_156;
    }
    uint64_t v72 = v96 + 16 * v71;
    unsigned int v73 = *(_DWORD *)(v72 + 8);
    unsigned int v89 = v73;
    if (v73 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const void **)v72);
      goto LABEL_155;
    }
    unint64_t v88 = *(void **)v72;
LABEL_156:
    unsigned int v74 = mlir::arith::applyCmpPredicate(v32, (const void **)&v90, (const void **)&v88);
    unsigned int v93 = 1;
    uint64_t v92 = (void *)v74;
    char v94 = 1;
    if (v73 >= 0x41 && v88) {
      operator delete[](v88);
    }
    if (v91 >= 0x41 && v90) {
      operator delete[](v90);
    }
    if (!v94) {
      break;
    }
    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v118, (unint64_t)&v92, 1);
    uint64_t v76 = (llvm::APInt *)(*(void *)v118 + 16 * *(unsigned int *)&v118[8]);
    unsigned int v77 = *((_DWORD *)Address + 2);
    *((_DWORD *)v76 + 2) = v77;
    if (v77 > 0x40) {
      llvm::APInt::initSlowCase(v76, (const void **)Address);
    }
    else {
      *(void *)uint64_t v76 = *(void *)Address;
    }
    ++*(_DWORD *)&v118[8];
    if (v94 && v93 >= 0x41 && v92) {
      operator delete[](v92);
    }
    uint64_t v68 = ++v100;
    ++v97;
    if (!--v67) {
      goto LABEL_170;
    }
  }
  uint64_t v62 = 0;
LABEL_172:
  unint64_t v79 = *(char **)v118;
  if (*(_DWORD *)&v118[8])
  {
    uint64_t v80 = 16 * *(unsigned int *)&v118[8];
    do
    {
      if (*(_DWORD *)&v79[v80 - 8] >= 0x41u)
      {
        uint64_t v81 = *(void **)&v79[v80 - 16];
        if (v81) {
          operator delete[](v81);
        }
      }
      v80 -= 16;
    }
    while (v80);
    unint64_t v79 = *(char **)v118;
  }
  if (v79 != &v118[16]) {
    free(v79);
  }
  if (!(_BYTE)v95)
  {
    uint64_t v82 = v96;
    uint64_t v96 = 0;
    if (v82) {
      (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
    }
  }
  if (!(_BYTE)v98)
  {
    uint64_t v83 = v99;
    uint64_t v99 = 0;
    if (v83) {
      (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
    }
  }
  int v63 = v104;
LABEL_188:
  if (v63)
  {
    if (!(_BYTE)v101)
    {
      uint64_t v84 = v102;
      uint64_t v102 = 0;
      if (v84) {
        (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
      }
    }
  }
  if (BYTE8(v117))
  {
    if (!(_BYTE)v116)
    {
      uint64_t v85 = *((void *)&v116 + 1);
      *((void *)&v116 + 1) = 0;
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
      }
    }
  }
  return v62 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::CmpIOp::getPredicate(mlir::arith::CmpIOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v2);
}

void mlir::arith::CmpIOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  unsigned int v73 = "arith.cmpi";
  unint64_t v74 = 10;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.cmpi", 10, v72, a2, &v73, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC99C780;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    BOOL v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unsigned int v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CmpIExtSI]";
  unint64_t v74 = 82;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v74;
  }
  BOOL v11 = &v73[v10];
  unint64_t v12 = v74 - v10;
  if (v74 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v74 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  BOOL v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)BOOL v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  unint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    unint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    BOOL v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      BOOL v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)BOOL v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      BOOL v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  unsigned int v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 3);
  unsigned int v73 = "arith.cmpi";
  unint64_t v74 = 10;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.cmpi", 10, v72, a2, &v73, 1uLL);
  *(void *)unsigned int v38 = &unk_1EC99C7C0;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  unsigned int v73 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CmpIExtUI]";
  unint64_t v74 = 82;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
  if (v74 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v74;
  }
  uint64_t v45 = &v73[v44];
  unint64_t v46 = v74 - v44;
  if (v74 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v74 - v44;
  }
  uint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v55 = (char *)operator new(8 * v54);
  uint64_t v56 = &v55[8 * v51];
  uint64_t v57 = &v55[8 * v54];
  *(void *)uint64_t v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  __int16 v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    int v63 = &v55[8 * v51 - 16];
    unsigned int v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)unsigned int v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)int v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    uint64_t v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)uint64_t v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    uint64_t v41 = (char *)a1[1];
    uint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)uint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::arith::applyCmpPredicate(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  unint64_t v6 = *(void **)(a2 + 8);
  BOOL v7 = llvm::APFloatBase::PPCDoubleDouble(a1);
  uint64_t v8 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v7 == v6) {
    unsigned int v9 = llvm::detail::DoubleAPFloat::compare(v5, v8);
  }
  else {
    unsigned int v9 = llvm::detail::IEEEFloat::compare(v5, v8);
  }
  unsigned int v10 = v9;
  uint64_t result = 0;
  switch((unint64_t)a1)
  {
    case 1uLL:
      uint64_t result = v10 == 1;
      break;
    case 2uLL:
      uint64_t result = v10 == 2;
      break;
    case 3uLL:
      uint64_t result = v10 - 1 < 2;
      break;
    case 4uLL:
      uint64_t result = v10 == 0;
      break;
    case 5uLL:
      uint64_t result = v10 < 2;
      break;
    case 6uLL:
      uint64_t result = (v10 & 0xFFFFFFFD) != 1;
      break;
    case 7uLL:
      uint64_t result = v10 != 3;
      break;
    case 8uLL:
      uint64_t result = (v10 & 0xFFFFFFFD) == 1;
      break;
    case 9uLL:
      uint64_t result = (v10 & 0xFFFFFFFE) == 2;
      break;
    case 0xAuLL:
      uint64_t result = v10 == 1 || (v10 & 0xFFFFFFFE) == 2;
      break;
    case 0xBuLL:
      uint64_t result = v10 == 3 || v10 == 0;
      break;
    case 0xCuLL:
      BOOL v14 = v10 >= 4;
      unsigned int v15 = (0xBu >> (v10 & 0xF)) & 1;
      if (v14) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v15;
      }
      break;
    case 0xDuLL:
      uint64_t result = v10 != 1;
      break;
    case 0xEuLL:
      uint64_t result = v10 == 3;
      break;
    case 0xFuLL:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t mlir::arith::CmpFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v4 = 0;
  }
  uint64_t v25 = v4;
  uint64_t v5 = v3[1];
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v24 = 0;
    if (!v4) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)&v28);
    uint64_t v8 = v29;
    unsigned int v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    unsigned int v10 = v30;
    if (v9 != v8) {
      unsigned int v10 = &v28;
    }
    int v11 = *((unsigned char *)v10 + 28) & 7;
    if (v9 == v8)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
      if (v11 != 1) {
        goto LABEL_16;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
      if (v11 != 1) {
        goto LABEL_16;
      }
    }
    uint64_t v6 = v25;
    uint64_t v24 = v25;
    goto LABEL_16;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v24 = v6;
  if (v4) {
    goto LABEL_11;
  }
LABEL_16:
  if (v6)
  {
    unint64_t v12 = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v24, (uint64_t)&v28);
    uint64_t v13 = v29;
    BOOL v14 = llvm::APFloatBase::PPCDoubleDouble(v12);
    unsigned int v15 = v30;
    if (v14 != v13) {
      unsigned int v15 = &v28;
    }
    int v16 = *((unsigned char *)v15 + 28) & 7;
    if (v14 == v13)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
      if (v16 == 1)
      {
LABEL_21:
        uint64_t v17 = v24;
        uint64_t v25 = v24;
        unint64_t result = 0;
        if (!v24) {
          return result;
        }
LABEL_29:
        if (!v17) {
          return result;
        }
        uint64_t v28 = *(void *)(*(void *)a1
                        + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                        + 64);
        uint64_t Int = (llvm::APFloatBase *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)&v28);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v24, (uint64_t)v26);
        unint64_t v20 = (llvm::APFloatBase *)mlir::arith::applyCmpPredicate(Int, (uint64_t)&v28, (uint64_t)v26);
        unint64_t v21 = (void *)v27[0];
        unsigned int v22 = llvm::APFloatBase::PPCDoubleDouble(v20);
        if (v22 == v21)
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
          if (v22 != v29) {
            goto LABEL_32;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
          if (v22 != v29)
          {
LABEL_32:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
LABEL_35:
            uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
            return mlir::BoolAttr::get(Context, v20) & 0xFFFFFFFFFFFFFFFBLL;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
        goto LABEL_35;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
      if (v16 == 1) {
        goto LABEL_21;
      }
    }
    uint64_t v17 = v24;
    unint64_t result = 0;
    if (!v25) {
      return result;
    }
    goto LABEL_29;
  }
  uint64_t v17 = 0;
  unint64_t result = 0;
  if (v25) {
    goto LABEL_29;
  }
  return result;
}

void mlir::arith::CmpFOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::RewritePatternSet::addImpl<CmpFIntToFPConst,mlir::MLIRContext *&>(a1, 0, 0, &v2);
}

void mlir::arith::SelectOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  uint64_t v247 = a2;
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(void *)&long long v249 = "arith.select";
  *((void *)&v249 + 1) = 12;
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"arith.select", 12, v248, a2, &v249, 1uLL);
  *(void *)uint64_t v4 = &unk_1EC99A720;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    BOOL v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RedundantSelectFalse]";
  *((void *)&v249 + 1) = 93;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = *((void *)&v249 + 1);
  }
  uint64_t v11 = v249 + v10;
  unint64_t v12 = *((void *)&v249 + 1) - v10;
  if (*((void *)&v249 + 1) - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = *((void *)&v249 + 1) - v10;
  }
  uint64_t v14 = v11 + v13;
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  BOOL v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)BOOL v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  int v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_269;
    }
    unint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_272;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      BOOL v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)BOOL v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      BOOL v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  unsigned int v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(void *)&long long v249 = "arith.select";
  *((void *)&v249 + 1) = 12;
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"arith.select", 12, v248, v247, &v249, 1uLL);
  *(void *)unsigned int v38 = &unk_1EC99A1C0;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RedundantSelectTrue]";
  *((void *)&v249 + 1) = 92;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = *((void *)&v249 + 1);
  }
  uint64_t v45 = v249 + v44;
  unint64_t v46 = *((void *)&v249 + 1) - v44;
  if (*((void *)&v249 + 1) - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = *((void *)&v249 + 1) - v44;
  }
  uint64_t v48 = v45 + v47;
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_269;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    uint64_t v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    __int16 v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_273;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v62 = &v41[-v61];
      v56 -= v61;
      int v63 = &v55[8 * v51 - 16];
      unsigned int v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)unsigned int v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)int v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  mlir::RewritePatternSet::addImpl<SelectI1Simplify,mlir::MLIRContext *&>(a1, 0, 0, &v247);
  uint64_t v72 = v247;
  unsigned int v73 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  long long v249 = xmmword_1E4FBF4E0;
  long long v250 = *(_OWORD *)&off_1E4FBF4F0;
  mlir::Pattern::Pattern((uint64_t)(v73 + 2), (uint64_t)"arith.select", 12, v248, v72, &v249, 2uLL);
  *(void *)unsigned int v73 = &unk_1EC997CA0;
  if (*((void *)v73 + 9))
  {
    unint64_t v74 = v73[22];
    if (v74 <= v73[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v73 + 20), v73 + 24, v74, 16);
    v73[22] = v73[22];
    uint64_t v76 = (char *)a1[2];
    unint64_t v75 = a1[3];
    if ((unint64_t)v76 < v75) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectAndCond]";
  *((void *)&v249 + 1) = 86;
  unint64_t v78 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v78) {
    unint64_t v79 = v78;
  }
  else {
    unint64_t v79 = *((void *)&v249 + 1);
  }
  uint64_t v80 = v249 + v79;
  unint64_t v81 = *((void *)&v249 + 1) - v79;
  if (*((void *)&v249 + 1) - v79 >= 0x12) {
    uint64_t v82 = 18;
  }
  else {
    uint64_t v82 = *((void *)&v249 + 1) - v79;
  }
  uint64_t v83 = v80 + v82;
  unint64_t v84 = v81 - v82;
  if (v84 >= v84 - 1) {
    --v84;
  }
  *((void *)v73 + 8) = v83;
  *((void *)v73 + 9) = v84;
  unint64_t v74 = v73[22];
  if (v74 > v73[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v73[22] = v74;
  uint64_t v76 = (char *)a1[2];
  unint64_t v75 = a1[3];
  if ((unint64_t)v76 < v75)
  {
LABEL_80:
    *(void *)uint64_t v76 = v73;
    uint64_t v77 = (uint64_t)(v76 + 8);
    goto LABEL_115;
  }
LABEL_91:
  uint64_t v85 = (char *)a1[1];
  uint64_t v86 = (v76 - v85) >> 3;
  unint64_t v87 = v86 + 1;
  if ((unint64_t)(v86 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v88 = v75 - (void)v85;
  if (v88 >> 2 > v87) {
    unint64_t v87 = v88 >> 2;
  }
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v89 = v87;
  }
  if (v89)
  {
    if (v89 >> 61) {
      goto LABEL_269;
    }
    uint64_t v90 = (char *)operator new(8 * v89);
    unsigned int v91 = &v90[8 * v86];
    uint64_t v92 = &v90[8 * v89];
    *(void *)unsigned int v91 = v73;
    uint64_t v77 = (uint64_t)(v91 + 8);
    unsigned int v93 = (char *)(v76 - v85);
    if (v76 != v85) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v90 = 0;
    unsigned int v91 = (char *)(8 * v86);
    uint64_t v92 = 0;
    *(void *)(8 * v86) = v73;
    uint64_t v77 = 8 * v86 + 8;
    unsigned int v93 = (char *)(v76 - v85);
    if (v76 != v85)
    {
LABEL_100:
      unint64_t v94 = (unint64_t)(v93 - 8);
      if (v94 < 0x78
        || &v76[-(v94 & 0xFFFFFFFFFFFFFFF8) - 8] < v91 && &v90[v76 - v85 - (v94 & 0xFFFFFFFFFFFFFFF8) - 8] < v76)
      {
        goto LABEL_274;
      }
      uint64_t v95 = (v94 >> 3) + 1;
      uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v97 = &v76[-v96];
      v91 -= v96;
      uint64_t v98 = &v90[8 * v86 - 16];
      uint64_t v99 = v76 - 16;
      uint64_t v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v102 = *((_OWORD *)v99 - 1);
        long long v101 = *(_OWORD *)v99;
        *((_OWORD *)v99 - 1) = 0uLL;
        *(_OWORD *)uint64_t v99 = 0uLL;
        *((_OWORD *)v98 - 1) = v102;
        *(_OWORD *)uint64_t v98 = v101;
        v98 -= 32;
        v99 -= 32;
        v100 -= 4;
      }
      while (v100);
      uint64_t v76 = v97;
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          uint64_t v103 = *((void *)v76 - 1);
          v76 -= 8;
          *(void *)uint64_t v76 = 0;
          *((void *)v91 - 1) = v103;
          v91 -= 8;
        }
        while (v76 != v85);
      }
      uint64_t v76 = (char *)a1[1];
      unsigned __int8 v104 = (char *)a1[2];
      a1[1] = v91;
      a1[2] = v77;
      a1[3] = v92;
      while (v104 != v76)
      {
        uint64_t v106 = *((void *)v104 - 1);
        v104 -= 8;
        uint64_t v105 = v106;
        *(void *)unsigned __int8 v104 = 0;
        if (v106) {
          (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v91;
  a1[2] = v77;
  a1[3] = v92;
LABEL_113:
  if (v76) {
    operator delete(v76);
  }
LABEL_115:
  a1[2] = v77;
  uint64_t v107 = v247;
  unint64_t v108 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  long long v249 = xmmword_1E4FBF500;
  long long v250 = *(_OWORD *)&off_1E4FBF510;
  long long v251 = xmmword_1E4FBF520;
  long long v252 = *(_OWORD *)&off_1E4FBF530;
  mlir::Pattern::Pattern((uint64_t)(v108 + 2), (uint64_t)"arith.select", 12, v248, v107, &v249, 4uLL);
  *(void *)unint64_t v108 = &unk_1EC998420;
  if (*((void *)v108 + 9))
  {
    unint64_t v109 = v108[22];
    if (v109 <= v108[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v108 + 20), v108 + 24, v109, 16);
    v108[22] = v108[22];
    unsigned int v111 = (char *)a1[2];
    unint64_t v110 = a1[3];
    if ((unint64_t)v111 < v110) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectAndNotCond]";
  *((void *)&v249 + 1) = 89;
  unint64_t v113 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v113) {
    unint64_t v114 = v113;
  }
  else {
    unint64_t v114 = *((void *)&v249 + 1);
  }
  uint64_t v115 = v249 + v114;
  unint64_t v116 = *((void *)&v249 + 1) - v114;
  if (*((void *)&v249 + 1) - v114 >= 0x12) {
    uint64_t v117 = 18;
  }
  else {
    uint64_t v117 = *((void *)&v249 + 1) - v114;
  }
  uint64_t v118 = v115 + v117;
  unint64_t v119 = v116 - v117;
  if (v119 >= v119 - 1) {
    --v119;
  }
  *((void *)v108 + 8) = v118;
  *((void *)v108 + 9) = v119;
  unint64_t v109 = v108[22];
  if (v109 > v108[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v108[22] = v109;
  unsigned int v111 = (char *)a1[2];
  unint64_t v110 = a1[3];
  if ((unint64_t)v111 < v110)
  {
LABEL_118:
    *(void *)unsigned int v111 = v108;
    uint64_t v112 = (uint64_t)(v111 + 8);
    goto LABEL_153;
  }
LABEL_129:
  long long v120 = (char *)a1[1];
  uint64_t v121 = (v111 - v120) >> 3;
  unint64_t v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v123 = v110 - (void)v120;
  if (v123 >> 2 > v122) {
    unint64_t v122 = v123 >> 2;
  }
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v124 = v122;
  }
  if (v124)
  {
    if (v124 >> 61) {
      goto LABEL_269;
    }
    uint64_t v125 = (char *)operator new(8 * v124);
    int64x2_t v126 = &v125[8 * v121];
    uint64_t v127 = &v125[8 * v124];
    *(void *)int64x2_t v126 = v108;
    uint64_t v112 = (uint64_t)(v126 + 8);
    uint64_t v128 = (char *)(v111 - v120);
    if (v111 != v120) {
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v125 = 0;
    int64x2_t v126 = (char *)(8 * v121);
    uint64_t v127 = 0;
    *(void *)(8 * v121) = v108;
    uint64_t v112 = 8 * v121 + 8;
    uint64_t v128 = (char *)(v111 - v120);
    if (v111 != v120)
    {
LABEL_138:
      unint64_t v129 = (unint64_t)(v128 - 8);
      if (v129 < 0x78
        || &v111[-(v129 & 0xFFFFFFFFFFFFFFF8) - 8] < v126
        && &v125[v111 - v120 - (v129 & 0xFFFFFFFFFFFFFFF8) - 8] < v111)
      {
        goto LABEL_275;
      }
      uint64_t v130 = (v129 >> 3) + 1;
      uint64_t v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned __int8 v132 = &v111[-v131];
      v126 -= v131;
      uint64_t v133 = &v125[8 * v121 - 16];
      long long v134 = v111 - 16;
      uint64_t v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v137 = *((_OWORD *)v134 - 1);
        long long v136 = *(_OWORD *)v134;
        *((_OWORD *)v134 - 1) = 0uLL;
        *(_OWORD *)long long v134 = 0uLL;
        *((_OWORD *)v133 - 1) = v137;
        *(_OWORD *)uint64_t v133 = v136;
        v133 -= 32;
        v134 -= 32;
        v135 -= 4;
      }
      while (v135);
      unsigned int v111 = v132;
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_275:
        do
        {
          uint64_t v138 = *((void *)v111 - 1);
          v111 -= 8;
          *(void *)unsigned int v111 = 0;
          *((void *)v126 - 1) = v138;
          v126 -= 8;
        }
        while (v111 != v120);
      }
      unsigned int v111 = (char *)a1[1];
      uint64_t v139 = (char *)a1[2];
      a1[1] = v126;
      a1[2] = v112;
      a1[3] = v127;
      while (v139 != v111)
      {
        uint64_t v141 = *((void *)v139 - 1);
        v139 -= 8;
        uint64_t v140 = v141;
        *(void *)uint64_t v139 = 0;
        if (v141) {
          (*(void (**)(uint64_t))(*(void *)v140 + 8))(v140);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v126;
  a1[2] = v112;
  a1[3] = v127;
LABEL_151:
  if (v111) {
    operator delete(v111);
  }
LABEL_153:
  a1[2] = v112;
  uint64_t v142 = v247;
  unint64_t v143 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  long long v249 = xmmword_1E4FBF540;
  long long v250 = *(_OWORD *)&off_1E4FBF550;
  mlir::Pattern::Pattern((uint64_t)(v143 + 2), (uint64_t)"arith.select", 12, v248, v142, &v249, 2uLL);
  *(void *)unint64_t v143 = &unk_1EC997930;
  if (*((void *)v143 + 9))
  {
    unint64_t v144 = v143[22];
    if (v144 <= v143[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v143 + 20), v143 + 24, v144, 16);
    v143[22] = v143[22];
    unint64_t v146 = (char *)a1[2];
    unint64_t v145 = a1[3];
    if ((unint64_t)v146 < v145) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectOrCond]";
  *((void *)&v249 + 1) = 85;
  unint64_t v148 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v148) {
    unint64_t v149 = v148;
  }
  else {
    unint64_t v149 = *((void *)&v249 + 1);
  }
  uint64_t v150 = v249 + v149;
  unint64_t v151 = *((void *)&v249 + 1) - v149;
  if (*((void *)&v249 + 1) - v149 >= 0x12) {
    uint64_t v152 = 18;
  }
  else {
    uint64_t v152 = *((void *)&v249 + 1) - v149;
  }
  uint64_t v153 = v150 + v152;
  unint64_t v154 = v151 - v152;
  if (v154 >= v154 - 1) {
    --v154;
  }
  *((void *)v143 + 8) = v153;
  *((void *)v143 + 9) = v154;
  unint64_t v144 = v143[22];
  if (v144 > v143[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v143[22] = v144;
  unint64_t v146 = (char *)a1[2];
  unint64_t v145 = a1[3];
  if ((unint64_t)v146 < v145)
  {
LABEL_156:
    *(void *)unint64_t v146 = v143;
    uint64_t v147 = (uint64_t)(v146 + 8);
    goto LABEL_191;
  }
LABEL_167:
  uint64_t v155 = (char *)a1[1];
  uint64_t v156 = (v146 - v155) >> 3;
  unint64_t v157 = v156 + 1;
  if ((unint64_t)(v156 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v158 = v145 - (void)v155;
  if (v158 >> 2 > v157) {
    unint64_t v157 = v158 >> 2;
  }
  if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v159 = v157;
  }
  if (v159)
  {
    if (v159 >> 61) {
      goto LABEL_269;
    }
    uint64_t v160 = (char *)operator new(8 * v159);
    unint64_t v161 = &v160[8 * v156];
    uint64_t v162 = &v160[8 * v159];
    *(void *)unint64_t v161 = v143;
    uint64_t v147 = (uint64_t)(v161 + 8);
    uint64_t v163 = (char *)(v146 - v155);
    if (v146 != v155) {
      goto LABEL_176;
    }
  }
  else
  {
    uint64_t v160 = 0;
    unint64_t v161 = (char *)(8 * v156);
    uint64_t v162 = 0;
    *(void *)(8 * v156) = v143;
    uint64_t v147 = 8 * v156 + 8;
    uint64_t v163 = (char *)(v146 - v155);
    if (v146 != v155)
    {
LABEL_176:
      unint64_t v164 = (unint64_t)(v163 - 8);
      if (v164 < 0x78
        || &v146[-(v164 & 0xFFFFFFFFFFFFFFF8) - 8] < v161
        && &v160[v146 - v155 - (v164 & 0xFFFFFFFFFFFFFFF8) - 8] < v146)
      {
        goto LABEL_276;
      }
      uint64_t v165 = (v164 >> 3) + 1;
      uint64_t v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v167 = &v146[-v166];
      v161 -= v166;
      long long v168 = &v160[8 * v156 - 16];
      long long v169 = v146 - 16;
      uint64_t v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v172 = *((_OWORD *)v169 - 1);
        long long v171 = *(_OWORD *)v169;
        *((_OWORD *)v169 - 1) = 0uLL;
        *(_OWORD *)long long v169 = 0uLL;
        *((_OWORD *)v168 - 1) = v172;
        *(_OWORD *)long long v168 = v171;
        v168 -= 32;
        v169 -= 32;
        v170 -= 4;
      }
      while (v170);
      unint64_t v146 = v167;
      if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          uint64_t v173 = *((void *)v146 - 1);
          v146 -= 8;
          *(void *)unint64_t v146 = 0;
          *((void *)v161 - 1) = v173;
          v161 -= 8;
        }
        while (v146 != v155);
      }
      unint64_t v146 = (char *)a1[1];
      __int16 v174 = (char *)a1[2];
      a1[1] = v161;
      a1[2] = v147;
      a1[3] = v162;
      while (v174 != v146)
      {
        uint64_t v176 = *((void *)v174 - 1);
        v174 -= 8;
        uint64_t v175 = v176;
        *(void *)__int16 v174 = 0;
        if (v176) {
          (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
        }
      }
      goto LABEL_189;
    }
  }
  a1[1] = v161;
  a1[2] = v147;
  a1[3] = v162;
LABEL_189:
  if (v146) {
    operator delete(v146);
  }
LABEL_191:
  a1[2] = v147;
  uint64_t v177 = v247;
  uint64_t v178 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  long long v249 = xmmword_1E4FBF560;
  long long v250 = *(_OWORD *)&off_1E4FBF570;
  long long v251 = xmmword_1E4FBF580;
  long long v252 = *(_OWORD *)&off_1E4FBF590;
  mlir::Pattern::Pattern((uint64_t)(v178 + 2), (uint64_t)"arith.select", 12, v248, v177, &v249, 4uLL);
  *(void *)uint64_t v178 = &unk_1EC997F30;
  if (*((void *)v178 + 9))
  {
    unint64_t v179 = v178[22];
    if (v179 <= v178[23]) {
      goto LABEL_193;
    }
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v178 + 20), v178 + 24, v179, 16);
    v178[22] = v178[22];
    uint64_t v181 = (char *)a1[2];
    unint64_t v180 = a1[3];
    if ((unint64_t)v181 < v180) {
      goto LABEL_194;
    }
    goto LABEL_205;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectOrNotCond]";
  *((void *)&v249 + 1) = 88;
  unint64_t v183 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v183) {
    unint64_t v184 = v183;
  }
  else {
    unint64_t v184 = *((void *)&v249 + 1);
  }
  uint64_t v185 = v249 + v184;
  unint64_t v186 = *((void *)&v249 + 1) - v184;
  if (*((void *)&v249 + 1) - v184 >= 0x12) {
    uint64_t v187 = 18;
  }
  else {
    uint64_t v187 = *((void *)&v249 + 1) - v184;
  }
  uint64_t v188 = v185 + v187;
  unint64_t v189 = v186 - v187;
  if (v189 >= v189 - 1) {
    --v189;
  }
  *((void *)v178 + 8) = v188;
  *((void *)v178 + 9) = v189;
  unint64_t v179 = v178[22];
  if (v179 > v178[23]) {
    goto LABEL_204;
  }
LABEL_193:
  v178[22] = v179;
  uint64_t v181 = (char *)a1[2];
  unint64_t v180 = a1[3];
  if ((unint64_t)v181 < v180)
  {
LABEL_194:
    *(void *)uint64_t v181 = v178;
    uint64_t v182 = (uint64_t)(v181 + 8);
    goto LABEL_229;
  }
LABEL_205:
  unint64_t v190 = (char *)a1[1];
  uint64_t v191 = (v181 - v190) >> 3;
  unint64_t v192 = v191 + 1;
  if ((unint64_t)(v191 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v193 = v180 - (void)v190;
  if (v193 >> 2 > v192) {
    unint64_t v192 = v193 >> 2;
  }
  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v194 = v192;
  }
  if (v194)
  {
    if (v194 >> 61) {
      goto LABEL_269;
    }
    unint64_t v195 = (char *)operator new(8 * v194);
    uint64_t v196 = &v195[8 * v191];
    uint64_t v197 = &v195[8 * v194];
    *(void *)uint64_t v196 = v178;
    uint64_t v182 = (uint64_t)(v196 + 8);
    uint64_t v198 = (char *)(v181 - v190);
    if (v181 != v190) {
      goto LABEL_214;
    }
  }
  else
  {
    unint64_t v195 = 0;
    uint64_t v196 = (char *)(8 * v191);
    uint64_t v197 = 0;
    *(void *)(8 * v191) = v178;
    uint64_t v182 = 8 * v191 + 8;
    uint64_t v198 = (char *)(v181 - v190);
    if (v181 != v190)
    {
LABEL_214:
      unint64_t v199 = (unint64_t)(v198 - 8);
      if (v199 < 0x78
        || &v181[-(v199 & 0xFFFFFFFFFFFFFFF8) - 8] < v196
        && &v195[v181 - v190 - (v199 & 0xFFFFFFFFFFFFFFF8) - 8] < v181)
      {
        goto LABEL_277;
      }
      uint64_t v200 = (v199 >> 3) + 1;
      uint64_t v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
      long long v202 = &v181[-v201];
      v196 -= v201;
      long long v203 = &v195[8 * v191 - 16];
      uint64_t v204 = v181 - 16;
      uint64_t v205 = v200 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v207 = *((_OWORD *)v204 - 1);
        long long v206 = *(_OWORD *)v204;
        *((_OWORD *)v204 - 1) = 0uLL;
        *(_OWORD *)uint64_t v204 = 0uLL;
        *((_OWORD *)v203 - 1) = v207;
        *(_OWORD *)long long v203 = v206;
        v203 -= 32;
        v204 -= 32;
        v205 -= 4;
      }
      while (v205);
      uint64_t v181 = v202;
      if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_277:
        do
        {
          uint64_t v208 = *((void *)v181 - 1);
          v181 -= 8;
          *(void *)uint64_t v181 = 0;
          *((void *)v196 - 1) = v208;
          v196 -= 8;
        }
        while (v181 != v190);
      }
      uint64_t v181 = (char *)a1[1];
      unint64_t v209 = (char *)a1[2];
      a1[1] = v196;
      a1[2] = v182;
      a1[3] = v197;
      while (v209 != v181)
      {
        uint64_t v211 = *((void *)v209 - 1);
        v209 -= 8;
        uint64_t v210 = v211;
        *(void *)unint64_t v209 = 0;
        if (v211) {
          (*(void (**)(uint64_t))(*(void *)v210 + 8))(v210);
        }
      }
      goto LABEL_227;
    }
  }
  a1[1] = v196;
  a1[2] = v182;
  a1[3] = v197;
LABEL_227:
  if (v181) {
    operator delete(v181);
  }
LABEL_229:
  a1[2] = v182;
  uint64_t v212 = v247;
  unint64_t v213 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v248, 2);
  *(void *)&long long v249 = "arith.select";
  *((void *)&v249 + 1) = 12;
  mlir::Pattern::Pattern((uint64_t)(v213 + 2), (uint64_t)"arith.select", 12, v248, v212, &v249, 1uLL);
  *(void *)unint64_t v213 = &unk_1EC997CE0;
  if (*((void *)v213 + 9))
  {
    unint64_t v214 = v213[22];
    if (v214 <= v213[23]) {
      goto LABEL_231;
    }
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v213 + 20), v213 + 24, v214, 16);
    v213[22] = v213[22];
    unint64_t v216 = (char *)a1[2];
    unint64_t v215 = a1[3];
    if ((unint64_t)v216 < v215) {
      goto LABEL_232;
    }
    goto LABEL_243;
  }
  *(void *)&long long v249 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SelectNotCond]";
  *((void *)&v249 + 1) = 86;
  unint64_t v218 = llvm::StringRef::find((uint64_t *)&v249, "DesiredTypeName = ", 0x12uLL, 0);
  if (*((void *)&v249 + 1) >= v218) {
    unint64_t v219 = v218;
  }
  else {
    unint64_t v219 = *((void *)&v249 + 1);
  }
  uint64_t v220 = v249 + v219;
  unint64_t v221 = *((void *)&v249 + 1) - v219;
  if (*((void *)&v249 + 1) - v219 >= 0x12) {
    uint64_t v222 = 18;
  }
  else {
    uint64_t v222 = *((void *)&v249 + 1) - v219;
  }
  uint64_t v223 = v220 + v222;
  unint64_t v224 = v221 - v222;
  if (v224 >= v224 - 1) {
    --v224;
  }
  *((void *)v213 + 8) = v223;
  *((void *)v213 + 9) = v224;
  unint64_t v214 = v213[22];
  if (v214 > v213[23]) {
    goto LABEL_242;
  }
LABEL_231:
  v213[22] = v214;
  unint64_t v216 = (char *)a1[2];
  unint64_t v215 = a1[3];
  if ((unint64_t)v216 < v215)
  {
LABEL_232:
    *(void *)unint64_t v216 = v213;
    uint64_t v217 = (uint64_t)(v216 + 8);
    goto LABEL_267;
  }
LABEL_243:
  unint64_t v225 = (char *)a1[1];
  uint64_t v226 = (v216 - v225) >> 3;
  unint64_t v227 = v226 + 1;
  if ((unint64_t)(v226 + 1) >> 61) {
LABEL_268:
  }
    abort();
  uint64_t v228 = v215 - (void)v225;
  if (v228 >> 2 > v227) {
    unint64_t v227 = v228 >> 2;
  }
  if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v229 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v229 = v227;
  }
  if (!v229)
  {
    uint64_t v230 = 0;
    uint64_t v231 = (char *)(8 * v226);
    long long v232 = 0;
    *(void *)(8 * v226) = v213;
    uint64_t v217 = 8 * v226 + 8;
    uint64_t v233 = (char *)(v216 - v225);
    if (v216 != v225) {
      goto LABEL_252;
    }
    goto LABEL_264;
  }
  if (v229 >> 61) {
LABEL_269:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v230 = (char *)operator new(8 * v229);
  uint64_t v231 = &v230[8 * v226];
  long long v232 = &v230[8 * v229];
  *(void *)uint64_t v231 = v213;
  uint64_t v217 = (uint64_t)(v231 + 8);
  uint64_t v233 = (char *)(v216 - v225);
  if (v216 != v225)
  {
LABEL_252:
    unint64_t v234 = (unint64_t)(v233 - 8);
    if (v234 < 0x78
      || &v216[-(v234 & 0xFFFFFFFFFFFFFFF8) - 8] < v231
      && &v230[v216 - v225 - (v234 & 0xFFFFFFFFFFFFFFF8) - 8] < v216)
    {
      goto LABEL_278;
    }
    uint64_t v235 = (v234 >> 3) + 1;
    uint64_t v236 = 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
    long long v237 = &v216[-v236];
    v231 -= v236;
    uint64_t v238 = &v230[8 * v226 - 16];
    uint64_t v239 = v216 - 16;
    uint64_t v240 = v235 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v242 = *((_OWORD *)v239 - 1);
      long long v241 = *(_OWORD *)v239;
      *((_OWORD *)v239 - 1) = 0uLL;
      *(_OWORD *)uint64_t v239 = 0uLL;
      *((_OWORD *)v238 - 1) = v242;
      *(_OWORD *)uint64_t v238 = v241;
      v238 -= 32;
      v239 -= 32;
      v240 -= 4;
    }
    while (v240);
    unint64_t v216 = v237;
    if (v235 != (v235 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_278:
      do
      {
        uint64_t v243 = *((void *)v216 - 1);
        v216 -= 8;
        *(void *)unint64_t v216 = 0;
        *((void *)v231 - 1) = v243;
        v231 -= 8;
      }
      while (v216 != v225);
    }
    unint64_t v216 = (char *)a1[1];
    long long v244 = (char *)a1[2];
    a1[1] = v231;
    a1[2] = v217;
    a1[3] = v232;
    while (v244 != v216)
    {
      uint64_t v246 = *((void *)v244 - 1);
      v244 -= 8;
      uint64_t v245 = v246;
      *(void *)long long v244 = 0;
      if (v246) {
        (*(void (**)(uint64_t))(*(void *)v245 + 8))(v245);
      }
    }
    goto LABEL_265;
  }
LABEL_264:
  a1[1] = v231;
  a1[2] = v217;
  a1[3] = v232;
LABEL_265:
  if (v216) {
    operator delete(v216);
  }
LABEL_267:
  a1[2] = v217;
  mlir::RewritePatternSet::addImpl<SelectToExtUI,mlir::MLIRContext *&>(a1, 0, 0, &v247);
}

uint64_t mlir::arith::SelectOp::fold(uint64_t a1, uint64_t a2)
{
  v82[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(*(void *)a1 + 72);
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[11];
  if (v3 == v4) {
    return v3 | 4;
  }
  uint64_t v7 = v2[3];
  uint64_t v74 = v7;
  uint64_t v8 = *(uint64_t **)(a2 + 40);
  uint64_t v9 = *v8;
  if (!*v8) {
    goto LABEL_25;
  }
  LODWORD(v81) = 1;
  long long __p = 0;
  v75.n128_u64[0] = (unint64_t)&__p;
  int v10 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v9);
  int v11 = v81;
  if (!v10)
  {
    BOOL v12 = 0;
    if (v81 < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v81 < 0x41)
  {
    BOOL v12 = __p == (void *)1;
    goto LABEL_12;
  }
  if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) <= 0x40)
  {
    BOOL v12 = *(void *)__p == 1;
LABEL_7:
    if (__p)
    {
      operator delete[](__p);
      if (!v12) {
        goto LABEL_16;
      }
      return v3 | 4;
    }
LABEL_12:
    if (!v12) {
      goto LABEL_16;
    }
    return v3 | 4;
  }
  if (__p) {
    operator delete[](__p);
  }
LABEL_16:
  uint64_t v8 = *(uint64_t **)(a2 + 40);
  uint64_t v13 = *v8;
  if (*v8)
  {
    LODWORD(v81) = 1;
    long long __p = 0;
    v75.n128_u64[0] = (unint64_t)&__p;
    int v14 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v13);
    int v15 = v81;
    if (v14)
    {
      if (v81 < 0x41)
      {
        BOOL v16 = __p == 0;
        goto LABEL_23;
      }
      if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
      {
        if (__p) {
          operator delete[](__p);
        }
LABEL_24:
        uint64_t v8 = *(uint64_t **)(a2 + 40);
        goto LABEL_25;
      }
      BOOL v16 = *(void *)__p == 0;
    }
    else
    {
      BOOL v16 = 0;
      if (v81 < 0x41) {
        goto LABEL_23;
      }
    }
    if (__p) {
      operator delete[](__p);
    }
LABEL_23:
    if (v16) {
      return v4 | 4;
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v17 = v8[1];
  if (v17 && *(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v4 | 4;
  }
  uint64_t v18 = v8[2];
  if (v18 && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v3 | 4;
  }
  unint64_t v68 = *(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isInteger((mlir::Type *)&v68, 1)) {
    goto LABEL_60;
  }
  uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v19) {
    goto LABEL_60;
  }
  LODWORD(v81) = 1;
  long long __p = 0;
  v75.n128_u64[0] = (unint64_t)&__p;
  int v20 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v19);
  unsigned int v21 = v81;
  if (!v20)
  {
    BOOL v24 = 0;
    if (v81 >= 0x41) {
      goto LABEL_43;
    }
LABEL_46:
    if (!v24) {
      goto LABEL_60;
    }
LABEL_47:
    uint64_t v25 = *(void *)(*(void *)(a2 + 40) + 16);
    if (v25)
    {
      LODWORD(v81) = 1;
      long long __p = 0;
      v75.n128_u64[0] = (unint64_t)&__p;
      if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v25)) {
        BOOL v26 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke((llvm::APInt *)&__p);
      }
      else {
        BOOL v26 = 0;
      }
      if (v81 >= 0x41 && __p) {
        operator delete[](__p);
      }
      if (v26) {
        return v7 | 4;
      }
    }
    goto LABEL_60;
  }
  if (v81 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
    {
      if (__p) {
        operator delete[](__p);
      }
      goto LABEL_60;
    }
    p_p = __p;
  }
  else
  {
    p_p = &__p;
  }
  BOOL v24 = *p_p == 1;
  if (v21 < 0x41) {
    goto LABEL_46;
  }
LABEL_43:
  if (!__p) {
    goto LABEL_46;
  }
  operator delete[](__p);
  if (v24) {
    goto LABEL_47;
  }
LABEL_60:
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v74);
  if (!DefiningOp) {
    goto LABEL_71;
  }
  uint64_t v28 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    goto LABEL_71;
  }
  long long __p = *(void **)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
  unint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&__p);
  if (Int > 1) {
    goto LABEL_71;
  }
  uint64_t v30 = *(void *)(v28 + 72);
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v32 = *(void *)(v30 + 56);
  BOOL v33 = v31 == v3 && v32 == v4;
  if (v33 || (v31 == v4 ? (BOOL v34 = v32 == v3) : (BOOL v34 = 0), v34))
  {
    if (Int == 1) {
      uint64_t v58 = v3;
    }
    else {
      uint64_t v58 = v4;
    }
    return v58 | 4;
  }
  else
  {
LABEL_71:
    uint64_t v35 = *(uint64_t **)(a2 + 40);
    uint64_t v36 = *v35;
    if (!*v35) {
      return 0;
    }
    BOOL v37 = mlir::DenseElementsAttr::classof(*v35);
    uint64_t v38 = v37 ? v36 : 0;
    uint64_t v73 = v38;
    if (!v37) {
      return 0;
    }
    uint64_t v39 = *(void *)(a2 + 40);
    uint64_t v40 = *(void *)(v39 + 8);
    if (!v40) {
      return 0;
    }
    BOOL v41 = mlir::DenseElementsAttr::classof(*(void *)(v39 + 8));
    uint64_t v42 = v41 ? v40 : 0;
    if ((uint64_t v72 = v42, v41)
      && (uint64_t v43 = *(void *)(a2 + 40), (v44 = *(void *)(v43 + 16)) != 0)
      && (!(v45 = mlir::DenseElementsAttr::classof(*(void *)(v43 + 16))) ? (v46 = 0) : (v46 = v44), uint64_t v71 = v46, v45))
    {
      long long __p = v82;
      uint64_t v81 = 0x600000000;
      unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v73);
      if (NumElements > HIDWORD(v81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v82, NumElements, 8);
      }
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      __n128 v48 = v75;
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      uint64_t v49 = v76;
      unint64_t v50 = v77;
      uint64_t v51 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      unint64_t v53 = v52;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      uint64_t v54 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      uint64_t v56 = v55;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      __n128 v75 = v48;
      uint64_t v76 = v51;
      unint64_t v77 = v53;
      uint64_t v78 = v54;
      uint64_t v79 = v56;
      if (*(_OWORD *)&v48 != __PAIR128__(v50, v49))
      {
        do
        {
          uint64_t v59 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v75);
          uint64_t v60 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v76);
          uint64_t v61 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v78);
          unint64_t v68 = v59;
          uint64_t v69 = v60;
          uint64_t v70 = v61;
          if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&v68)) {
            uint64_t v62 = &v69;
          }
          else {
            uint64_t v62 = &v70;
          }
          uint64_t v63 = *v62;
          uint64_t v64 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v82, v81 + 1, 8);
            uint64_t v64 = v81;
          }
          *((void *)__p + v64) = v63;
          LODWORD(v81) = v81 + 1;
          unint64_t v65 = ++v75.n128_u64[1];
          ++v77;
          ++v79;
        }
        while (v75.n128_u64[0] != v49 || v65 != v50);
      }
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
      unint64_t v23 = mlir::DenseElementsAttr::get(Value, v67, (uint64_t *)__p, v81) & 0xFFFFFFFFFFFFFFFBLL;
      if (__p != v82) {
        free(__p);
      }
    }
    else
    {
      return 0;
    }
  }
  return v23;
}

uint64_t mlir::DenseElementsAttr::value_begin<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(&v6, *(void *)a1, 0);
  uint64_t v2 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v5, v2, NumElements);
  return v6;
}

uint64_t mlir::DenseElementsAttr::value_end<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(&v6, *(void *)a1, 0);
  uint64_t v2 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v5, v2, NumElements);
  return v5;
}

uint64_t mlir::arith::SelectOp::parse(uint64_t a1, uint64_t a2)
{
  v15[12] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  v14[0] = v15;
  v14[1] = (void *)0x300000000;
  if ((*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v14, 0, 1, 3)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v12))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      I1uint64_t Type = v12;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v12)) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      I1uint64_t Type = mlir::Builder::getI1Type(v8);
    }
    uint64_t v9 = *(unsigned int *)(a2 + 72);
    if (v9 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v9) = v12;
    ++*(_DWORD *)(a2 + 72);
    v13[0] = I1Type;
    v13[1] = v12;
    v13[2] = v12;
    v11[0] = v13;
    v11[1] = 3;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)v14, v11, v10, a2 + 16);
    uint64_t v6 = v14[0];
    if (v14[0] != v15) {
      goto LABEL_7;
    }
    return v5;
  }
LABEL_6:
  uint64_t v5 = 0;
  uint64_t v6 = v14[0];
  if (v14[0] != v15) {
LABEL_7:
  }
    free(v6);
  return v5;
}

void mlir::OperationState::addTypes(uint64_t a1, void *__src, uint64_t a3)
{
  size_t v6 = 8 * a3;
  uint64_t v7 = *(unsigned int *)(a1 + 72);
  unint64_t v8 = v7 + ((8 * a3) >> 3);
  if (v8 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (void *)(a1 + 80), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  if (a3)
  {
    memcpy((void *)(*(void *)(a1 + 64) + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v7 + (v6 >> 3);
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  size_t v6 = (const char *)*((unsigned int *)a2 + 2);
  uint64_t v7 = (const char *)a3[1];
  if (v7 == v6)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = (void *)*a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      uint64_t v47 = v6;
      uint64_t v13 = &v46;
      int v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          int v14 = (char *)v50;
          uint64_t v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v13 = &v46;
          int v14 = (char *)v50;
        }
      }
      int v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)int v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        uint64_t v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        uint64_t v18 = &v46;
        uint64_t v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            uint64_t v19 = (char *)v50;
            uint64_t v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            uint64_t v18 = &v46;
            uint64_t v19 = (char *)v50;
          }
        }
        int v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)int v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          uint64_t v47 = v7;
          unint64_t v23 = &v46;
          BOOL v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              BOOL v24 = (char *)v50;
              unint64_t v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              unint64_t v23 = &v46;
              BOOL v24 = (char *)v50;
            }
          }
          uint64_t v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)uint64_t v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = (void **)__p;
      if (__p)
      {
        uint64_t v28 = v57;
        unint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          unint64_t v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v54;
      if (v54)
      {
        uint64_t v31 = v55;
        uint64_t v32 = v54;
        if (v55 != v54)
        {
          do
          {
            BOOL v34 = (void *)*--v31;
            BOOL v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              operator delete[](v33);
            }
          }
          while (v31 != v30);
          uint64_t v32 = v54;
        }
        uint64_t v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

uint64_t mlir::arith::SelectOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
    size_t v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *uint64_t v5 = 32;
    ++*((void *)v4 + 4);
    size_t v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_3:
      uint64_t v7 = *((void *)v6 + 9);
      uint64_t v8 = *((unsigned int *)v6 + 17);
      goto LABEL_4;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
LABEL_4:
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v20[0] = ", ";
  v20[1] = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v7, 0, v7, v8, (uint64_t)a2, v9, (uint64_t)v20);
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v20[0] = mlir::Operation::getAttrDictionary(v10);
    uint64_t v11 = (mlir::ArrayAttr *)v20;
  }
  else
  {
    uint64_t v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v11);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v13, 0, 0);
  int v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v15) > 2)
  {
    *(unsigned char *)(v15 + 2) = 32;
    *(_WORD *)uint64_t v15 = 14880;
    *((void *)v14 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v14, " : ", 3uLL);
  }
  long long v16 = (void *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    if (v16)
    {
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 32))(a2, v16);
      uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v18 = (_WORD *)*((void *)v17 + 4);
      if (*((void *)v17 + 3) - (void)v18 > 1uLL)
      {
        _WORD *v18 = 8236;
        *((void *)v17 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", ", 2uLL);
      }
    }
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *((void *)*this - 1) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::arith::SelectOp::verify(uint64_t **this)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  unint64_t v64 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = 1;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v64, 1)) {
    return v2;
  }
  uint64_t v3 = (void *)(*(*this - 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = *(void **)(*v3 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    I1Sameuint64_t Shape = getI1SameShape(v3);
    if (v64 != I1SameShape)
    {
      uint64_t v8 = I1SameShape;
      __int16 v63 = 257;
      mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
      if (v68[0])
      {
        int v65 = 3;
        long long v66 = "expected condition type to have the same shape as the result type, expected ";
        uint64_t v67 = 76;
        uint64_t v9 = &v65;
        uint64_t v10 = (char *)v69;
        if (v70 >= v71)
        {
          unint64_t v50 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            int64_t v57 = (char *)&v65 - (unsigned char *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            uint64_t v10 = (char *)v69;
            uint64_t v9 = (int *)((char *)v69 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            uint64_t v9 = &v65;
            uint64_t v10 = (char *)v69;
          }
        }
        uint64_t v11 = &v10[24 * v70];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v11 = v12;
        ++v70;
        if (v68[0])
        {
          uint64_t v13 = &v65;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v8);
          int v14 = (char *)v69;
          if (v70 >= v71)
          {
            unint64_t v52 = v70 + 1;
            if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
            {
              int64_t v59 = (char *)&v65 - (unsigned char *)v69;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              int v14 = (char *)v69;
              uint64_t v13 = (int *)((char *)v69 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              uint64_t v13 = &v65;
              int v14 = (char *)v69;
            }
          }
          uint64_t v15 = &v14[24 * v70];
          long long v16 = *(_OWORD *)v13;
          *((void *)v15 + 2) = *((void *)v13 + 2);
          *(_OWORD *)uint64_t v15 = v16;
          uint64_t v17 = ++v70;
          if (v68[0])
          {
            int v65 = 3;
            long long v66 = ", but got ";
            uint64_t v67 = 10;
            uint64_t v18 = &v65;
            uint64_t v19 = (char *)v69;
            if (v17 >= v71)
            {
              unint64_t v53 = v17 + 1;
              BOOL v54 = (char *)v69 + 24 * v17 > (char *)&v65;
              if (v69 <= &v65 && v54)
              {
                int64_t v60 = (char *)&v65 - (unsigned char *)v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                uint64_t v19 = (char *)v69;
                uint64_t v18 = (int *)((char *)v69 + v60);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                uint64_t v18 = &v65;
                uint64_t v19 = (char *)v69;
              }
            }
            int v20 = &v19[24 * v70];
            long long v21 = *(_OWORD *)v18;
            *((void *)v20 + 2) = *((void *)v18 + 2);
            *(_OWORD *)int v20 = v21;
            ++v70;
            if (v68[0])
            {
              uint64_t v22 = &v65;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
              unint64_t v23 = (char *)v69;
              if (v70 >= v71)
              {
                unint64_t v55 = v70 + 1;
                if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
                {
                  int64_t v61 = (char *)&v65 - (unsigned char *)v69;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  unint64_t v23 = (char *)v69;
                  uint64_t v22 = (int *)((char *)v69 + v61);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  uint64_t v22 = &v65;
                  unint64_t v23 = (char *)v69;
                }
              }
              BOOL v24 = &v23[24 * v70];
              long long v25 = *(_OWORD *)v22;
              *((void *)v24 + 2) = *((void *)v22 + 2);
              *(_OWORD *)BOOL v24 = v25;
              ++v70;
            }
          }
        }
      }
      uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      }
      if (v77)
      {
        long long v26 = (void **)__p;
        if (__p)
        {
          uint64_t v27 = v76;
          uint64_t v28 = __p;
          if (v76 != __p)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            uint64_t v28 = __p;
          }
          uint64_t v76 = v26;
          operator delete(v28);
        }
        unint64_t v29 = v73;
        if (!v73) {
          goto LABEL_55;
        }
        uint64_t v30 = v74;
        uint64_t v31 = v73;
        if (v74 == v73) {
          goto LABEL_54;
        }
        do
        {
          BOOL v33 = (void *)*--v30;
          uint64_t v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        goto LABEL_53;
      }
    }
  }
  else
  {
    __int16 v63 = 257;
    mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
    if (v68[0])
    {
      int v65 = 3;
      long long v66 = "expected condition to be a signless i1, but got ";
      uint64_t v67 = 48;
      BOOL v34 = &v65;
      uint64_t v35 = (char *)v69;
      if (v70 >= v71)
      {
        unint64_t v49 = v70 + 1;
        if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
        {
          int64_t v56 = (char *)&v65 - (unsigned char *)v69;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          uint64_t v35 = (char *)v69;
          BOOL v34 = (int *)((char *)v69 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          BOOL v34 = &v65;
          uint64_t v35 = (char *)v69;
        }
      }
      unint64_t v36 = &v35[24 * v70];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = *((void *)v34 + 2);
      *(_OWORD *)unint64_t v36 = v37;
      ++v70;
      if (v68[0])
      {
        BOOL v38 = &v65;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
        unint64_t v39 = (char *)v69;
        if (v70 >= v71)
        {
          unint64_t v51 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            int64_t v58 = (char *)&v65 - (unsigned char *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            unint64_t v39 = (char *)v69;
            BOOL v38 = (int *)((char *)v69 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            BOOL v38 = &v65;
            unint64_t v39 = (char *)v69;
          }
        }
        BOOL v40 = &v39[24 * v70];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)BOOL v40 = v41;
        ++v70;
      }
    }
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    }
    if (v77)
    {
      int64_t v42 = (void **)__p;
      if (__p)
      {
        int64_t v43 = v76;
        uint64_t v44 = __p;
        if (v76 != __p)
        {
          do
            int64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = __p;
        }
        uint64_t v76 = v42;
        operator delete(v44);
      }
      unint64_t v29 = v73;
      if (!v73) {
        goto LABEL_55;
      }
      __int16 v45 = v74;
      uint64_t v31 = v73;
      if (v74 == v73)
      {
LABEL_54:
        uint64_t v74 = v29;
        operator delete(v31);
LABEL_55:
        if (v69 != v72) {
          free(v69);
        }
        return v2;
      }
      do
      {
        uint64_t v47 = (void *)*--v45;
        int v46 = v47;
        void *v45 = 0;
        if (v47) {
          operator delete[](v46);
        }
      }
      while (v45 != v29);
LABEL_53:
      uint64_t v31 = v73;
      goto LABEL_54;
    }
  }
  return v2;
}

uint64_t mlir::arith::ShLIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v91) = 1;
  *(void *)&long long v91 = 0;
  *(void *)&long long v89 = &v91;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v89, v4);
  int v7 = DWORD2(v91);
  if (!v6)
  {
    BOOL v8 = 0;
    if (DWORD2(v91) < 0x41) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (DWORD2(v91) < 0x41)
  {
    BOOL v8 = (void)v91 == 0;
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v91) <= 0x40)
  {
    BOOL v8 = *(void *)v91 == 0;
LABEL_6:
    if ((void)v91) {
      operator delete[]((void *)v91);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
  if ((void)v91) {
    operator delete[]((void *)v91);
  }
LABEL_14:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_68;
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v91 = canMapOperands;
      *((void *)&v91 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v91 = 0uLL;
    }
  }
  else
  {
    long long v91 = 0uLL;
  }
  uint64_t v13 = (void *)v3[1];
  if (!v13)
  {
    long long v91 = 0uLL;
LABEL_68:
    uint64_t v35 = 0;
    return v35 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8))
  {
    long long v91 = 0uLL;
    goto LABEL_68;
  }
  uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8);
  *(void *)&long long v91 = v13;
  *((void *)&v91 + 1) = v14;
  uint64_t v15 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
  if (!canMapOperands) {
    goto LABEL_68;
  }
  if (!v15) {
    goto LABEL_68;
  }
  if (canMapOperands != v15) {
    goto LABEL_68;
  }
  uint64_t v16 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  uint64_t v17 = v3[1];
  if (!v17) {
    goto LABEL_68;
  }
  if (!v16) {
    goto LABEL_68;
  }
  uint64_t v18 = *(void **)(*(void *)v17 + 136);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_68;
  }
  if (v18 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v23 = v16;
    }
    else {
      uint64_t v23 = 0;
    }
    *(void *)&long long v91 = v23;
    if (v23 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
    {
      uint64_t v24 = v3[1];
      uint64_t v25 = mlir::DenseElementsAttr::classof(v24) ? v24 : 0;
      *(void *)&long long v91 = v25;
      if (v25)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
        {
          uint64_t v26 = v3[1];
          uint64_t v72 = *v3;
          uint64_t v69 = v26;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69)) {
            goto LABEL_66;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v72, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v81);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v69, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          uint64_t v28 = (unint64_t *)&v79;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v79);
          unint64_t v29 = v80;
          if (v80 >= 0x41)
          {
            if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_164;
            }
            uint64_t v28 = (unint64_t *)v79;
          }
          BOOL v22 = *v28 <= v29;
LABEL_164:
          DWORD2(v89) = v82;
          if (v82 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v81);
          }
          else {
            *(void *)&long long v89 = v81;
          }
          llvm::APInt::operator<<=((uint64_t)&v89, (uint64_t)&v79);
          DWORD2(v91) = DWORD2(v89);
          *(void *)&long long v91 = v89;
          LOBYTE(v92[0]) = 1;
          if (v80 >= 0x41 && v79) {
            operator delete[](v79);
          }
          if (v82 >= 0x41 && v81) {
            operator delete[](v81);
          }
          uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)&v91, 1);
          if (LOBYTE(v92[0])) {
            goto LABEL_86;
          }
          goto LABEL_67;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_68;
    }
    uint64_t v30 = (void *)*v3;
    if (*v3) {
      uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
    }
    else {
      uint64_t v31 = 0;
    }
    char v77 = v30;
    uint64_t v78 = v31;
    uint64_t v32 = (void *)v3[1];
    if (v32) {
      uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8);
    }
    else {
      uint64_t v33 = 0;
    }
    v76[0] = v32;
    v76[1] = v33;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v77);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v76)) {
      goto LABEL_66;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v77, (uint64_t)&v89);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v76, (uint64_t)&v72);
    uint64_t v35 = 0;
    BOOL v22 = 0;
    int v36 = v75;
    if (BYTE8(v90) && v75)
    {
      LOWORD(v69) = v89;
      if ((_BYTE)v89) {
        uint64_t v70 = *((void *)&v89 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v89 + 1) + 16))(&v70);
      }
      uint64_t v71 = v90;
      __int16 v66 = v72;
      if ((_BYTE)v72) {
        uint64_t v67 = v73;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 16))(&v67);
      }
      uint64_t v68 = v74;
      *(void *)&long long v91 = v92;
      *((void *)&v91 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v91, NumElements);
      uint64_t v38 = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = v71;
        while (1)
        {
          if (BYTE1(v69)) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = v40;
          }
          if ((_BYTE)v69)
          {
            uint64_t v42 = v70 + 16 * v41;
            unsigned int v62 = *(_DWORD *)(v42 + 8);
            if (v62 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)v42);
            }
            else {
              int64_t v61 = *(void **)v42;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v70 + 24))(&v61);
          }
          if (HIBYTE(v66)) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v68;
          }
          if ((_BYTE)v66)
          {
            uint64_t v44 = v67 + 16 * v43;
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            unsigned int v60 = v45;
            if (v45 <= 0x40)
            {
              int64_t v59 = *(void **)v44;
              int v46 = &v59;
              goto LABEL_117;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const void **)v44);
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v67 + 24))(&v59);
          }
          unsigned int v45 = v60;
          if (v60 >= 0x41)
          {
            if (v45 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v59) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_118;
            }
            int v46 = v59;
          }
          else
          {
            int v46 = &v59;
          }
LABEL_117:
          BOOL v22 = *v46 <= (unint64_t)v45;
LABEL_118:
          unsigned int v88 = v62;
          if (v62 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v87, (const void **)&v61);
          }
          else {
            unint64_t v87 = v61;
          }
          llvm::APInt::operator<<=((uint64_t)&v87, (uint64_t)&v59);
          unsigned int v64 = v88;
          __int16 v63 = v87;
          char v65 = 1;
          if (v60 >= 0x41 && v59) {
            operator delete[](v59);
          }
          if (v62 >= 0x41 && v61) {
            operator delete[](v61);
          }
          if (!v65)
          {
            uint64_t v35 = 0;
            goto LABEL_138;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v91, (unint64_t)&v63, 1);
          uint64_t v48 = (llvm::APInt *)(v91 + 16 * DWORD2(v91));
          unsigned int v49 = *((_DWORD *)Address + 2);
          *((_DWORD *)v48 + 2) = v49;
          if (v49 > 0x40) {
            llvm::APInt::initSlowCase(v48, (const void **)Address);
          }
          else {
            *(void *)uint64_t v48 = *(void *)Address;
          }
          ++DWORD2(v91);
          if (v65 && v64 >= 0x41 && v63) {
            operator delete[](v63);
          }
          uint64_t v40 = ++v71;
          ++v68;
          if (!--v39) {
            goto LABEL_136;
          }
        }
      }
      BOOL v22 = 0;
LABEL_136:
      uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v50, (llvm::APInt *)v91, DWORD2(v91));
LABEL_138:
      unint64_t v51 = (char *)v91;
      if (DWORD2(v91))
      {
        uint64_t v52 = 16 * DWORD2(v91);
        do
        {
          if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
          {
            unint64_t v53 = *(void **)&v51[v52 - 16];
            if (v53) {
              operator delete[](v53);
            }
          }
          v52 -= 16;
        }
        while (v52);
        unint64_t v51 = (char *)v91;
      }
      if (v51 != (char *)v92) {
        free(v51);
      }
      if (!(_BYTE)v66)
      {
        uint64_t v54 = v67;
        uint64_t v67 = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
      }
      if (!(_BYTE)v69)
      {
        uint64_t v55 = v70;
        uint64_t v70 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      int v36 = v75;
    }
    if (v36)
    {
      if (!(_BYTE)v72)
      {
        uint64_t v56 = v73;
        uint64_t v73 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
    }
    if (BYTE8(v90))
    {
      if (!(_BYTE)v89)
      {
        uint64_t v57 = *((void *)&v89 + 1);
        *((void *)&v89 + 1) = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    goto LABEL_67;
  }
  uint64_t v72 = *v3;
  uint64_t v69 = v17;
  uint64_t v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
  if (v19 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69))
  {
LABEL_66:
    BOOL v22 = 0;
    uint64_t v35 = 0;
    goto LABEL_67;
  }
  mlir::IntegerAttr::getValue(&v72, (llvm::APInt *)&v85);
  p_p = (unint64_t *)&__p;
  mlir::IntegerAttr::getValue(&v69, (llvm::APInt *)&__p);
  unint64_t v21 = v84;
  if (v84 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
    {
      BOOL v22 = 0;
      goto LABEL_76;
    }
    p_p = (unint64_t *)__p;
  }
  BOOL v22 = *p_p <= v21;
LABEL_76:
  DWORD2(v89) = v86;
  if (v86 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v85);
  }
  else {
    *(void *)&long long v89 = v85;
  }
  llvm::APInt::operator<<=((uint64_t)&v89, (uint64_t)&__p);
  DWORD2(v91) = DWORD2(v89);
  *(void *)&long long v91 = v89;
  LOBYTE(v92[0]) = 1;
  if (v84 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v86 >= 0x41 && v85) {
    operator delete[](v85);
  }
  uint64_t v35 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v91);
  if (LOBYTE(v92[0]))
  {
LABEL_86:
    if (DWORD2(v91) >= 0x41)
    {
      if ((void)v91) {
        operator delete[]((void *)v91);
      }
    }
  }
LABEL_67:
  if (!v22) {
    goto LABEL_68;
  }
  return v35 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v91) = 1;
  *(void *)&long long v91 = 0;
  *(void *)&long long v89 = &v91;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v89, v4);
  int v7 = DWORD2(v91);
  if (!v6)
  {
    BOOL v8 = 0;
    if (DWORD2(v91) < 0x41) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (DWORD2(v91) < 0x41)
  {
    BOOL v8 = (void)v91 == 0;
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v91) <= 0x40)
  {
    BOOL v8 = *(void *)v91 == 0;
LABEL_6:
    if ((void)v91) {
      operator delete[]((void *)v91);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
  if ((void)v91) {
    operator delete[]((void *)v91);
  }
LABEL_14:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_68;
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v91 = canMapOperands;
      *((void *)&v91 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v91 = 0uLL;
    }
  }
  else
  {
    long long v91 = 0uLL;
  }
  uint64_t v13 = (void *)v3[1];
  if (!v13)
  {
    long long v91 = 0uLL;
LABEL_68:
    uint64_t v35 = 0;
    return v35 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8))
  {
    long long v91 = 0uLL;
    goto LABEL_68;
  }
  uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8);
  *(void *)&long long v91 = v13;
  *((void *)&v91 + 1) = v14;
  uint64_t v15 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
  if (!canMapOperands) {
    goto LABEL_68;
  }
  if (!v15) {
    goto LABEL_68;
  }
  if (canMapOperands != v15) {
    goto LABEL_68;
  }
  uint64_t v16 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  uint64_t v17 = v3[1];
  if (!v17) {
    goto LABEL_68;
  }
  if (!v16) {
    goto LABEL_68;
  }
  uint64_t v18 = *(void **)(*(void *)v17 + 136);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_68;
  }
  if (v18 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v23 = v16;
    }
    else {
      uint64_t v23 = 0;
    }
    *(void *)&long long v91 = v23;
    if (v23 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
    {
      uint64_t v24 = v3[1];
      uint64_t v25 = mlir::DenseElementsAttr::classof(v24) ? v24 : 0;
      *(void *)&long long v91 = v25;
      if (v25)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
        {
          uint64_t v26 = v3[1];
          uint64_t v72 = *v3;
          uint64_t v69 = v26;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69)) {
            goto LABEL_66;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v72, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v81);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v69, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          uint64_t v28 = (unint64_t *)&v79;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v79);
          unint64_t v29 = v80;
          if (v80 >= 0x41)
          {
            if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_164;
            }
            uint64_t v28 = (unint64_t *)v79;
          }
          BOOL v22 = *v28 <= v29;
LABEL_164:
          DWORD2(v89) = v82;
          if (v82 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v81);
          }
          else {
            *(void *)&long long v89 = v81;
          }
          llvm::APInt::lshrInPlace((llvm::APInt *)&v89, (const llvm::APInt *)&v79);
          DWORD2(v91) = DWORD2(v89);
          *(void *)&long long v91 = v89;
          LOBYTE(v92[0]) = 1;
          if (v80 >= 0x41 && v79) {
            operator delete[](v79);
          }
          if (v82 >= 0x41 && v81) {
            operator delete[](v81);
          }
          uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)&v91, 1);
          if (LOBYTE(v92[0])) {
            goto LABEL_86;
          }
          goto LABEL_67;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_68;
    }
    uint64_t v30 = (void *)*v3;
    if (*v3) {
      uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
    }
    else {
      uint64_t v31 = 0;
    }
    char v77 = v30;
    uint64_t v78 = v31;
    uint64_t v32 = (void *)v3[1];
    if (v32) {
      uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8);
    }
    else {
      uint64_t v33 = 0;
    }
    v76[0] = v32;
    v76[1] = v33;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v77);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v76)) {
      goto LABEL_66;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v77, (uint64_t)&v89);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v76, (uint64_t)&v72);
    uint64_t v35 = 0;
    BOOL v22 = 0;
    int v36 = v75;
    if (BYTE8(v90) && v75)
    {
      LOWORD(v69) = v89;
      if ((_BYTE)v89) {
        uint64_t v70 = *((void *)&v89 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v89 + 1) + 16))(&v70);
      }
      uint64_t v71 = v90;
      __int16 v66 = v72;
      if ((_BYTE)v72) {
        uint64_t v67 = v73;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 16))(&v67);
      }
      uint64_t v68 = v74;
      *(void *)&long long v91 = v92;
      *((void *)&v91 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v91, NumElements);
      uint64_t v38 = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = v71;
        while (1)
        {
          if (BYTE1(v69)) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = v40;
          }
          if ((_BYTE)v69)
          {
            uint64_t v42 = v70 + 16 * v41;
            unsigned int v62 = *(_DWORD *)(v42 + 8);
            if (v62 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)v42);
            }
            else {
              int64_t v61 = *(void **)v42;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v70 + 24))(&v61);
          }
          if (HIBYTE(v66)) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v68;
          }
          if ((_BYTE)v66)
          {
            uint64_t v44 = v67 + 16 * v43;
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            unsigned int v60 = v45;
            if (v45 <= 0x40)
            {
              int64_t v59 = *(void **)v44;
              int v46 = &v59;
              goto LABEL_117;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const void **)v44);
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v67 + 24))(&v59);
          }
          unsigned int v45 = v60;
          if (v60 >= 0x41)
          {
            if (v45 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v59) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_118;
            }
            int v46 = v59;
          }
          else
          {
            int v46 = &v59;
          }
LABEL_117:
          BOOL v22 = *v46 <= (unint64_t)v45;
LABEL_118:
          unsigned int v88 = v62;
          if (v62 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v87, (const void **)&v61);
          }
          else {
            unint64_t v87 = v61;
          }
          llvm::APInt::lshrInPlace((llvm::APInt *)&v87, (const llvm::APInt *)&v59);
          unsigned int v64 = v88;
          __int16 v63 = v87;
          char v65 = 1;
          if (v60 >= 0x41 && v59) {
            operator delete[](v59);
          }
          if (v62 >= 0x41 && v61) {
            operator delete[](v61);
          }
          if (!v65)
          {
            uint64_t v35 = 0;
            goto LABEL_138;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v91, (unint64_t)&v63, 1);
          uint64_t v48 = (llvm::APInt *)(v91 + 16 * DWORD2(v91));
          unsigned int v49 = *((_DWORD *)Address + 2);
          *((_DWORD *)v48 + 2) = v49;
          if (v49 > 0x40) {
            llvm::APInt::initSlowCase(v48, (const void **)Address);
          }
          else {
            *(void *)uint64_t v48 = *(void *)Address;
          }
          ++DWORD2(v91);
          if (v65 && v64 >= 0x41 && v63) {
            operator delete[](v63);
          }
          uint64_t v40 = ++v71;
          ++v68;
          if (!--v39) {
            goto LABEL_136;
          }
        }
      }
      BOOL v22 = 0;
LABEL_136:
      uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v50, (llvm::APInt *)v91, DWORD2(v91));
LABEL_138:
      unint64_t v51 = (char *)v91;
      if (DWORD2(v91))
      {
        uint64_t v52 = 16 * DWORD2(v91);
        do
        {
          if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
          {
            unint64_t v53 = *(void **)&v51[v52 - 16];
            if (v53) {
              operator delete[](v53);
            }
          }
          v52 -= 16;
        }
        while (v52);
        unint64_t v51 = (char *)v91;
      }
      if (v51 != (char *)v92) {
        free(v51);
      }
      if (!(_BYTE)v66)
      {
        uint64_t v54 = v67;
        uint64_t v67 = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
      }
      if (!(_BYTE)v69)
      {
        uint64_t v55 = v70;
        uint64_t v70 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      int v36 = v75;
    }
    if (v36)
    {
      if (!(_BYTE)v72)
      {
        uint64_t v56 = v73;
        uint64_t v73 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
    }
    if (BYTE8(v90))
    {
      if (!(_BYTE)v89)
      {
        uint64_t v57 = *((void *)&v89 + 1);
        *((void *)&v89 + 1) = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    goto LABEL_67;
  }
  uint64_t v72 = *v3;
  uint64_t v69 = v17;
  uint64_t v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
  if (v19 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69))
  {
LABEL_66:
    BOOL v22 = 0;
    uint64_t v35 = 0;
    goto LABEL_67;
  }
  mlir::IntegerAttr::getValue(&v72, (llvm::APInt *)&v85);
  p_p = (unint64_t *)&__p;
  mlir::IntegerAttr::getValue(&v69, (llvm::APInt *)&__p);
  unint64_t v21 = v84;
  if (v84 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
    {
      BOOL v22 = 0;
      goto LABEL_76;
    }
    p_p = (unint64_t *)__p;
  }
  BOOL v22 = *p_p <= v21;
LABEL_76:
  DWORD2(v89) = v86;
  if (v86 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v85);
  }
  else {
    *(void *)&long long v89 = v85;
  }
  llvm::APInt::lshrInPlace((llvm::APInt *)&v89, (const llvm::APInt *)&__p);
  DWORD2(v91) = DWORD2(v89);
  *(void *)&long long v91 = v89;
  LOBYTE(v92[0]) = 1;
  if (v84 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v86 >= 0x41 && v85) {
    operator delete[](v85);
  }
  uint64_t v35 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v91);
  if (LOBYTE(v92[0]))
  {
LABEL_86:
    if (DWORD2(v91) >= 0x41)
    {
      if ((void)v91) {
        operator delete[]((void *)v91);
      }
    }
  }
LABEL_67:
  if (!v22) {
    goto LABEL_68;
  }
  return v35 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v91) = 1;
  *(void *)&long long v91 = 0;
  *(void *)&long long v89 = &v91;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v89, v4);
  int v7 = DWORD2(v91);
  if (!v6)
  {
    BOOL v8 = 0;
    if (DWORD2(v91) < 0x41) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (DWORD2(v91) < 0x41)
  {
    BOOL v8 = (void)v91 == 0;
    goto LABEL_8;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v91) <= 0x40)
  {
    BOOL v8 = *(void *)v91 == 0;
LABEL_6:
    if ((void)v91) {
      operator delete[]((void *)v91);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
  if ((void)v91) {
    operator delete[]((void *)v91);
  }
LABEL_14:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_15:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_68;
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v91 = canMapOperands;
      *((void *)&v91 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v91 = 0uLL;
    }
  }
  else
  {
    long long v91 = 0uLL;
  }
  uint64_t v13 = (void *)v3[1];
  if (!v13)
  {
    long long v91 = 0uLL;
LABEL_68:
    uint64_t v35 = 0;
    return v35 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8))
  {
    long long v91 = 0uLL;
    goto LABEL_68;
  }
  uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v13 + 8);
  *(void *)&long long v91 = v13;
  *((void *)&v91 + 1) = v14;
  uint64_t v15 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v91);
  if (!canMapOperands) {
    goto LABEL_68;
  }
  if (!v15) {
    goto LABEL_68;
  }
  if (canMapOperands != v15) {
    goto LABEL_68;
  }
  uint64_t v16 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_68;
    }
  }
  uint64_t v17 = v3[1];
  if (!v17) {
    goto LABEL_68;
  }
  if (!v16) {
    goto LABEL_68;
  }
  uint64_t v18 = *(void **)(*(void *)v17 + 136);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_68;
  }
  if (v18 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v23 = v16;
    }
    else {
      uint64_t v23 = 0;
    }
    *(void *)&long long v91 = v23;
    if (v23 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
    {
      uint64_t v24 = v3[1];
      uint64_t v25 = mlir::DenseElementsAttr::classof(v24) ? v24 : 0;
      *(void *)&long long v91 = v25;
      if (v25)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v91))
        {
          uint64_t v26 = v3[1];
          uint64_t v72 = *v3;
          uint64_t v69 = v26;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69)) {
            goto LABEL_66;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v72, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v81);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v69, (uint64_t)&v91);
          long long v89 = v91;
          long long v90 = v92[0];
          uint64_t v28 = (unint64_t *)&v79;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v89, (llvm::APInt *)&v79);
          unint64_t v29 = v80;
          if (v80 >= 0x41)
          {
            if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_164;
            }
            uint64_t v28 = (unint64_t *)v79;
          }
          BOOL v22 = *v28 <= v29;
LABEL_164:
          DWORD2(v89) = v82;
          if (v82 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v81);
          }
          else {
            *(void *)&long long v89 = v81;
          }
          llvm::APInt::ashrInPlace((unsigned int *)&v89, (unint64_t **)&v79);
          DWORD2(v91) = DWORD2(v89);
          *(void *)&long long v91 = v89;
          LOBYTE(v92[0]) = 1;
          if (v80 >= 0x41 && v79) {
            operator delete[](v79);
          }
          if (v82 >= 0x41 && v81) {
            operator delete[](v81);
          }
          uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)&v91, 1);
          if (LOBYTE(v92[0])) {
            goto LABEL_86;
          }
          goto LABEL_67;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_68;
    }
    uint64_t v30 = (void *)*v3;
    if (*v3) {
      uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
    }
    else {
      uint64_t v31 = 0;
    }
    char v77 = v30;
    uint64_t v78 = v31;
    uint64_t v32 = (void *)v3[1];
    if (v32) {
      uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8);
    }
    else {
      uint64_t v33 = 0;
    }
    v76[0] = v32;
    v76[1] = v33;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v77);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v76)) {
      goto LABEL_66;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v77, (uint64_t)&v89);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v76, (uint64_t)&v72);
    uint64_t v35 = 0;
    BOOL v22 = 0;
    int v36 = v75;
    if (BYTE8(v90) && v75)
    {
      LOWORD(v69) = v89;
      if ((_BYTE)v89) {
        uint64_t v70 = *((void *)&v89 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v89 + 1) + 16))(&v70);
      }
      uint64_t v71 = v90;
      __int16 v66 = v72;
      if ((_BYTE)v72) {
        uint64_t v67 = v73;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 16))(&v67);
      }
      uint64_t v68 = v74;
      *(void *)&long long v91 = v92;
      *((void *)&v91 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v91, NumElements);
      uint64_t v38 = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = v71;
        while (1)
        {
          if (BYTE1(v69)) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = v40;
          }
          if ((_BYTE)v69)
          {
            uint64_t v42 = v70 + 16 * v41;
            unsigned int v62 = *(_DWORD *)(v42 + 8);
            if (v62 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)v42);
            }
            else {
              int64_t v61 = *(void **)v42;
            }
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v70 + 24))(&v61);
          }
          if (HIBYTE(v66)) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v68;
          }
          if ((_BYTE)v66)
          {
            uint64_t v44 = v67 + 16 * v43;
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            unsigned int v60 = v45;
            if (v45 <= 0x40)
            {
              int64_t v59 = *(void **)v44;
              int v46 = &v59;
              goto LABEL_117;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const void **)v44);
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v67 + 24))(&v59);
          }
          unsigned int v45 = v60;
          if (v60 >= 0x41)
          {
            if (v45 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v59) > 0x40)
            {
              BOOL v22 = 0;
              goto LABEL_118;
            }
            int v46 = v59;
          }
          else
          {
            int v46 = &v59;
          }
LABEL_117:
          BOOL v22 = *v46 <= (unint64_t)v45;
LABEL_118:
          unsigned int v88 = v62;
          if (v62 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v87, (const void **)&v61);
          }
          else {
            unint64_t v87 = v61;
          }
          llvm::APInt::ashrInPlace((unsigned int *)&v87, (unint64_t **)&v59);
          unsigned int v64 = v88;
          __int16 v63 = v87;
          char v65 = 1;
          if (v60 >= 0x41 && v59) {
            operator delete[](v59);
          }
          if (v62 >= 0x41 && v61) {
            operator delete[](v61);
          }
          if (!v65)
          {
            uint64_t v35 = 0;
            goto LABEL_138;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v91, (unint64_t)&v63, 1);
          uint64_t v48 = (llvm::APInt *)(v91 + 16 * DWORD2(v91));
          unsigned int v49 = *((_DWORD *)Address + 2);
          *((_DWORD *)v48 + 2) = v49;
          if (v49 > 0x40) {
            llvm::APInt::initSlowCase(v48, (const void **)Address);
          }
          else {
            *(void *)uint64_t v48 = *(void *)Address;
          }
          ++DWORD2(v91);
          if (v65 && v64 >= 0x41 && v63) {
            operator delete[](v63);
          }
          uint64_t v40 = ++v71;
          ++v68;
          if (!--v39) {
            goto LABEL_136;
          }
        }
      }
      BOOL v22 = 0;
LABEL_136:
      uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v35 = mlir::DenseElementsAttr::get(canMapOperands, v50, (llvm::APInt *)v91, DWORD2(v91));
LABEL_138:
      unint64_t v51 = (char *)v91;
      if (DWORD2(v91))
      {
        uint64_t v52 = 16 * DWORD2(v91);
        do
        {
          if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
          {
            unint64_t v53 = *(void **)&v51[v52 - 16];
            if (v53) {
              operator delete[](v53);
            }
          }
          v52 -= 16;
        }
        while (v52);
        unint64_t v51 = (char *)v91;
      }
      if (v51 != (char *)v92) {
        free(v51);
      }
      if (!(_BYTE)v66)
      {
        uint64_t v54 = v67;
        uint64_t v67 = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
      }
      if (!(_BYTE)v69)
      {
        uint64_t v55 = v70;
        uint64_t v70 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      int v36 = v75;
    }
    if (v36)
    {
      if (!(_BYTE)v72)
      {
        uint64_t v56 = v73;
        uint64_t v73 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
    }
    if (BYTE8(v90))
    {
      if (!(_BYTE)v89)
      {
        uint64_t v57 = *((void *)&v89 + 1);
        *((void *)&v89 + 1) = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    goto LABEL_67;
  }
  uint64_t v72 = *v3;
  uint64_t v69 = v17;
  uint64_t v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
  if (v19 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69))
  {
LABEL_66:
    BOOL v22 = 0;
    uint64_t v35 = 0;
    goto LABEL_67;
  }
  mlir::IntegerAttr::getValue(&v72, (llvm::APInt *)&v85);
  p_p = (unint64_t *)&__p;
  mlir::IntegerAttr::getValue(&v69, (llvm::APInt *)&__p);
  unint64_t v21 = v84;
  if (v84 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
    {
      BOOL v22 = 0;
      goto LABEL_76;
    }
    p_p = (unint64_t *)__p;
  }
  BOOL v22 = *p_p <= v21;
LABEL_76:
  DWORD2(v89) = v86;
  if (v86 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&v85);
  }
  else {
    *(void *)&long long v89 = v85;
  }
  llvm::APInt::ashrInPlace((unsigned int *)&v89, (unint64_t **)&__p);
  DWORD2(v91) = DWORD2(v89);
  *(void *)&long long v91 = v89;
  LOBYTE(v92[0]) = 1;
  if (v84 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v86 >= 0x41 && v85) {
    operator delete[](v85);
  }
  uint64_t v35 = mlir::IntegerAttr::get(canMapOperands, (llvm::APInt *)&v91);
  if (LOBYTE(v92[0]))
  {
LABEL_86:
    if (DWORD2(v91) >= 0x41)
    {
      if ((void)v91) {
        operator delete[]((void *)v91);
      }
    }
  }
LABEL_67:
  if (!v22) {
    goto LABEL_68;
  }
  return v35 & 0xFFFFFFFFFFFFFFFBLL;
}

void llvm::APFloat::getLargest(llvm::APFloatBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void **)(a3 + 8);
  int v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v6 == a1)
  {
    int v7 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v5, (uint64_t)a1);
    int v8 = a2;
    if (v6 != *v5) {
      goto LABEL_3;
    }
  }
  else
  {
    int v7 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v5, (uint64_t)a1);
    int v8 = a2;
    if (v6 != *v5)
    {
LABEL_3:
      llvm::detail::IEEEFloat::makeLargest(v7, v8);
      return;
    }
  }

  llvm::detail::DoubleAPFloat::makeLargest(v7, v8);
}

void llvm::APInt::getSignedMinValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v3 = (uint64_t)a2;
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, 0, 0);
    LODWORD(a2) = v2 - 1;
    if (*(_DWORD *)(v3 + 8) > 0x40u) {
      uint64_t v3 = *(void *)v3 + 8 * (a2 >> 6);
    }
  }
  else
  {
    *(void *)a2 = 0;
    LOBYTE(a2) = (_BYTE)this - 1;
  }
  *(void *)v3 |= 1 << (char)a2;
}

void llvm::APInt::getSignedMaxValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v3 = (uint64_t)a2;
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
    LODWORD(v4) = v2 - 1;
    if (*(_DWORD *)(v3 + 8) > 0x40u) {
      uint64_t v3 = *(void *)v3 + 8 * (v4 >> 6);
    }
  }
  else
  {
    unint64_t v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
    if (!this) {
      unint64_t v4 = 0;
    }
    *(void *)uint64_t v3 = v4;
    LOBYTE(v4) = (_BYTE)this - 1;
  }
  *(void *)v3 &= ~(1 << v4);
}

void llvm::APInt::getMaxValue(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
  }
  else
  {
    unint64_t v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
    if (!this) {
      unint64_t v2 = 0;
    }
    *(void *)a2 = v2;
  }
}

uint64_t mlir::emitOptionalError<char const(&)[39]>(uint64_t a1, char a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    unint64_t v21 = a3;
    size_t v22 = strlen(a3);
    unint64_t v4 = &v20;
    uint64_t v5 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v18 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v19 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        uint64_t v5 = (char *)v24;
        unint64_t v4 = (int *)((char *)v24 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        unint64_t v4 = &v20;
        uint64_t v5 = (char *)v24;
      }
    }
    int v6 = &v5[24 * v25];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)int v6 = v7;
    ++v25;
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    uint64_t v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v31;
      uint64_t v11 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      uint64_t v31 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v28;
    if (v28)
    {
      uint64_t v13 = v29;
      uint64_t v14 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v16 = (void *)*--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        uint64_t v14 = v28;
      }
      unint64_t v29 = v12;
      operator delete(v14);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v8;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::OrIOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.ori", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.ori";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

uint64_t mlir::arith::detail::AddFOpGenericAdaptorBase::AddFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      unsigned int v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      unsigned int v26 = &v44;
      uint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v27 = (char *)v48;
          unsigned int v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unsigned int v26 = &v44;
          uint64_t v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      char v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        char v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      BOOL v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "fastmath", 8uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 53;
    char v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        char v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        char v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      uint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          uint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  unint64_t v18 = (void **)__p;
  if (__p)
  {
    __int16 v19 = v55;
    int v20 = __p;
    if (v55 != __p)
    {
      do
        __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      int v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  unint64_t v21 = v52;
  if (v52)
  {
    size_t v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unsigned int v25 = (void *)*--v22;
      uint64_t v24 = v25;
      void *v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::arith::AddFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"fastmath", 8, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::AddFOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v16 = v1;
    unint64_t v1 = v16;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v1 = v16;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  {
    uint64_t v15 = v3;
    unint64_t v17 = v1;
    uint64_t v3 = v15;
    unint64_t v1 = v17;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      uint64_t v3 = v15;
      unint64_t v1 = v17;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v4 = HIDWORD(v1);
  uint64_t v5 = (v3 + 8 * v1) ^ HIDWORD(v1);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * v5) >> 47) ^ (0x9DDFEA08EB382D69 * v5));
  unint64_t v7 = v6 ^ (v6 >> 47);
  unint64_t v8 = *(void *)(v2 + 3024) ^ ((0x9DDFEA08EB382D69 * v7) >> 32);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (((0x759C16B48 * v7) & 0x7FFFFFFF8) + 8));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
}

unint64_t mlir::arith::AddFOp::getInherentAttr(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4 == 8 && *a3 == 0x6874616D74736166) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

void *mlir::arith::AddFOp::setInherentAttr(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 8 && *a2 == 0x6874616D74736166)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        uint64_t v4 = a4;
      }
      else {
        uint64_t v4 = 0;
      }
      mlir::Operation *result = v4;
    }
    else
    {
      mlir::Operation *result = 0;
    }
  }
  return result;
}

void mlir::arith::AddFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"fastmath", 8, *a2);
  }
}

BOOL mlir::arith::AddFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    unint64_t v7 = &v29;
    unint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        unint64_t v8 = (char *)v35;
        unint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        unint64_t v7 = &v29;
        unint64_t v8 = (char *)v35;
      }
    }
    unint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)unint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: Floating point fast math flags";
        uint64_t v31 = 62;
        int v11 = &v29;
        unint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v12 = (char *)v35;
            int v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            int v11 = &v29;
            unint64_t v12 = (char *)v35;
          }
        }
        int v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)int v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    unint64_t v16 = (void **)__p;
    if (__p)
    {
      unint64_t v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      int64_t v42 = v16;
      operator delete(v18);
    }
    __int16 v19 = v39;
    if (v39)
    {
      int v20 = v40;
      unint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          size_t v22 = v23;
          *int v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        unint64_t v21 = v39;
      }
      int64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::arith::AddFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::AddFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[342];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    unint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)unint64_t v8 = v9;
    ++v47;
  }
  int64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::FastMathFlagsAttr]";
  unint64_t v41 = 80;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    int64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      unint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)unint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        __int16 v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            __int16 v19 = (char *)v46;
            unint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            __int16 v19 = (char *)v46;
          }
        }
        int v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)int v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          *int64_t v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      unint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::arith::AddFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::AddFOp::getFastmathAttr(mlir::arith::AddFOp *this)
{
  return *(void *)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
}

uint64_t mlir::arith::AddFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

mlir::MLIRContext *mlir::arith::AddFOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  if (!*a2)
  {
    uint64_t result = (mlir::MLIRContext *)mlir::arith::FastMathFlagsAttr::get(result, 0);
    *a2 = result;
  }
  return result;
}

BOOL mlir::arith::AddFOp::verifyInvariantsImpl(uint64_t **this)
{
  unint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  unint64_t v6 = (void *)*((void *)*a2 + 17);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    int64_t v61 = a3;
    uint64_t v63 = a4;
    char v65 = a1;
    uint64_t v71 = a2;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    int v5 = *a2;
    if (v47 < 1)
    {
      a4 = v63;
      a1 = v65;
      a3 = v61;
    }
    else
    {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
      v74[0] = a2;
      v74[1] = v48;
      unsigned int v49 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74)
                     + 136);
      a4 = v63;
      a1 = v65;
      a3 = v61;
      if (v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      int v5 = *a2;
    }
  }
  __int16 v19 = (void *)v5[17];
  if (v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unsigned int v60 = a3;
    uint64_t v62 = a4;
    unsigned int v64 = a1;
    uint64_t v68 = a2;
    uint64_t v69 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
    uint64_t v46 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68) + 136);
    if (v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    {
      uint64_t v16 = 1;
      a4 = v62;
      a1 = v64;
      a3 = v60;
      if (v46 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v46 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return v16;
      }
      goto LABEL_39;
    }
    return 1;
  }
LABEL_39:
  __int16 v70 = 261;
  uint64_t v68 = a3;
  uint64_t v69 = a4;
  mlir::Operation::emitOpError(a1, &v68, (uint64_t)v74);
  if (v74[0])
  {
    LODWORD(v71) = 3;
    uint64_t v72 = " #";
    uint64_t v73 = 2;
    int v20 = &v71;
    long long v21 = (char *)v75;
    if (v76 >= v77)
    {
      unint64_t v50 = v76 + 1;
      if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
      {
        int64_t v56 = (char *)&v71 - (unsigned char *)v75;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        long long v21 = (char *)v75;
        int v20 = (const void ***)((char *)v75 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        int v20 = &v71;
        long long v21 = (char *)v75;
      }
    }
    uint64_t v22 = &v21[24 * v76];
    long long v23 = *(_OWORD *)v20;
    *((void *)v22 + 2) = v20[2];
    *(_OWORD *)uint64_t v22 = v23;
    uint64_t v24 = ++v76;
    if (v74[0])
    {
      LODWORD(v71) = 5;
      uint64_t v72 = (const char *)a5;
      unint64_t v25 = &v71;
      unint64_t v26 = (char *)v75;
      if (v24 >= v77)
      {
        unint64_t v51 = v24 + 1;
        BOOL v52 = (char *)v75 + 24 * v24 > (char *)&v71;
        if (v75 <= &v71 && v52)
        {
          int64_t v57 = (char *)&v71 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          unint64_t v26 = (char *)v75;
          unint64_t v25 = (const void ***)((char *)v75 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          unint64_t v25 = &v71;
          unint64_t v26 = (char *)v75;
        }
      }
      int64_t v27 = &v26[24 * v76];
      long long v28 = *(_OWORD *)v25;
      *((void *)v27 + 2) = v25[2];
      *(_OWORD *)int64_t v27 = v28;
      uint64_t v29 = ++v76;
      if (v74[0])
      {
        LODWORD(v71) = 3;
        uint64_t v72 = " must be floating-point-like, but got ";
        uint64_t v73 = 38;
        uint64_t v30 = &v71;
        uint64_t v31 = (char *)v75;
        if (v29 >= v77)
        {
          unint64_t v53 = v29 + 1;
          BOOL v54 = (char *)v75 + 24 * v29 > (char *)&v71;
          if (v75 <= &v71 && v54)
          {
            int64_t v58 = (char *)&v71 - (unsigned char *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            uint64_t v31 = (char *)v75;
            uint64_t v30 = (const void ***)((char *)v75 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            uint64_t v30 = &v71;
            uint64_t v31 = (char *)v75;
          }
        }
        unint64_t v32 = &v31[24 * v76];
        long long v33 = *(_OWORD *)v30;
        *((void *)v32 + 2) = v30[2];
        *(_OWORD *)unint64_t v32 = v33;
        ++v76;
        if (v74[0])
        {
          unint64_t v34 = &v71;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v71, (uint64_t)a2);
          int64_t v35 = (char *)v75;
          if (v76 >= v77)
          {
            unint64_t v55 = v76 + 1;
            if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
            {
              int64_t v59 = (char *)&v71 - (unsigned char *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              int64_t v35 = (char *)v75;
              unint64_t v34 = (const void ***)((char *)v75 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              unint64_t v34 = &v71;
              int64_t v35 = (char *)v75;
            }
          }
          int64_t v36 = &v35[24 * v76];
          long long v37 = *(_OWORD *)v34;
          *((void *)v36 + 2) = v34[2];
          *(_OWORD *)int64_t v36 = v37;
          ++v76;
        }
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
  if (v74[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
  }
  if (v83)
  {
    unint64_t v38 = (void **)__p;
    if (__p)
    {
      uint64_t v39 = v82;
      int64_t v40 = __p;
      if (v82 != __p)
      {
        do
          uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        int64_t v40 = __p;
      }
      unsigned int v82 = v38;
      operator delete(v40);
    }
    unint64_t v41 = v79;
    if (v79)
    {
      uint64_t v42 = v80;
      __int16 v43 = v79;
      if (v80 != v79)
      {
        do
        {
          uint64_t v45 = (void *)*--v42;
          uint64_t v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        __int16 v43 = v79;
      }
      unsigned int v80 = v41;
      operator delete(v43);
    }
    if (v75 != v78) {
      free(v75);
    }
  }
  return v16;
}

BOOL mlir::arith::AddFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::AddFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  v21[0] = a1;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t, BOOL (*)(mlir::AsmParser **, uint64_t *), void *))(*(void *)a1 + 416))(a1, &v20, a3, _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_5arith17FastMathFlagsAttrEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSF_S5_EUlS4_S5_E_EES2_lS4_S5_, v21))return 0; {
  uint64_t v7 = v20;
  }
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  unint64_t v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      int v11 = v27;
      unsigned int v12 = __p;
      if (v27 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unsigned int v12 = __p;
      }
      int64_t v27 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = v25;
      uint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          long long v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v24;
      }
      unint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

void mlir::arith::AddFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v10 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v10)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v10 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      unsigned int v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      unint64_t v13 = (unsigned char *)*((void *)v12 + 4);
      if ((unint64_t)v13 >= *((void *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 32);
      }
      else
      {
        *((void *)v12 + 4) = v13 + 1;
        unsigned char *v13 = 32;
      }
      unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v15 = (void *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v15 > 7uLL)
      {
        *uint64_t v15 = 0x6874616D74736166;
        *((void *)v14 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v14, "fastmath", 8uLL);
      }
      int64_t v35 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        uint64_t v16 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v17 = (*(uint64_t (**)(void *))(*v16 + 80))(v16) + v16[4] - v16[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v35, a2);
        if (v17 == (*(uint64_t (**)(void *))(*v16 + 80))(v16) + v16[4] - v16[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v35);
        }
      }
    }
  }
  int64_t v35 = v37;
  v37[0] = "fastmath";
  v37[1] = 8;
  uint64_t v36 = 0x200000001;
  unint64_t v18 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v19 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v19 && v19 == mlir::arith::FastMathFlagsAttr::get(v18, 0))
  {
    unsigned int v22 = v36;
    if (v36 >= HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 16);
      unsigned int v22 = v36;
    }
    uint64_t v23 = (char *)v35 + 16 * v22;
    *uint64_t v23 = "fastmath";
    v23[1] = 8;
    LODWORD(v36) = v36 + 1;
    uint64_t v20 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v20 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_24:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
      goto LABEL_29;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_29:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v25, v35, v36);
  unint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *int64_t v27 = 32;
  }
  char v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v29 = (unsigned char *)*((void *)v28 + 4);
  if (*((unsigned char **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *uint64_t v29 = 58;
    ++*((void *)v28 + 4);
  }
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v32 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v35 != v37) {
    free(v35);
  }
}

uint64_t mlir::arith::detail::AddIOpGenericAdaptorBase::AddIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AddIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v22;
  uint64_t v21 = 0x200000000;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v19, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v23[0] = a3;
  v23[1] = a4;
  if (v21 != 1)
  {
    if (!v21)
    {
      if (HIDWORD(v21))
      {
        unsigned int v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v22, 1uLL, 8);
      unsigned int v13 = v21;
      if (v21 != 1) {
        goto LABEL_10;
      }
    }
LABEL_11:
    LODWORD(v21) = 1;
  }
  uint64_t v14 = mlir::ValueRange::dereference_iterator(v23, 0);
  *(void *)__src = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = __src;
  uint64_t v16 = v21;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v21;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v22) {
    free(__src);
  }
}

BOOL mlir::arith::AddIOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int64_t v57 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v57)) {
    return 1;
  }
  uint64_t v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    uint64_t v11 = v57;
    if (v41 >= 1)
    {
      if (v57) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v61[0] = v11;
      v61[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v11 = v57;
    }
  }
  unsigned int v12 = *v11;
  unsigned int v13 = (void *)*((void *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v53 = v11;
    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v55 = 261;
  unint64_t v53 = a3;
  uint64_t v54 = a4;
  mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
  if (v61[0])
  {
    LODWORD(OperandRange) = 3;
    int64_t v59 = " #";
    uint64_t v60 = 2;
    p_uint64_t OperandRange = &OperandRange;
    uint64_t v16 = (char *)v62;
    if (v63 >= v64)
    {
      unint64_t v43 = v63 + 1;
      if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
      {
        int64_t v49 = (char *)&OperandRange - (unsigned char *)v62;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        uint64_t v16 = (char *)v62;
        p_uint64_t OperandRange = (uint64_t *)((char *)v62 + v49);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v16 = (char *)v62;
      }
    }
    uint64_t v17 = &v16[24 * v63];
    long long v18 = *(_OWORD *)p_OperandRange;
    *((void *)v17 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v63;
    if (v61[0])
    {
      LODWORD(OperandRange) = 5;
      int64_t v59 = (const char *)a5;
      uint64_t v20 = &OperandRange;
      uint64_t v21 = (char *)v62;
      if (v19 >= v64)
      {
        unint64_t v44 = v19 + 1;
        BOOL v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
        if (v62 <= &OperandRange && v45)
        {
          int64_t v50 = (char *)&OperandRange - (unsigned char *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          uint64_t v21 = (char *)v62;
          uint64_t v20 = (uint64_t *)((char *)v62 + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          uint64_t v20 = &OperandRange;
          uint64_t v21 = (char *)v62;
        }
      }
      unsigned int v22 = &v21[24 * v63];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)unsigned int v22 = v23;
      uint64_t v24 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 3;
        int64_t v59 = " must be signless-integer-like, but got ";
        uint64_t v60 = 40;
        uint64_t v25 = &OperandRange;
        unint64_t v26 = (char *)v62;
        if (v24 >= v64)
        {
          unint64_t v46 = v24 + 1;
          BOOL v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v47)
          {
            int64_t v51 = (char *)&OperandRange - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            unint64_t v26 = (char *)v62;
            uint64_t v25 = (uint64_t *)((char *)v62 + v51);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            uint64_t v25 = &OperandRange;
            unint64_t v26 = (char *)v62;
          }
        }
        int64_t v27 = &v26[24 * v63];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)int64_t v27 = v28;
        ++v63;
        if (v61[0])
        {
          uint64_t v29 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
          uint64_t v30 = (char *)v62;
          if (v63 >= v64)
          {
            unint64_t v48 = v63 + 1;
            if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
            {
              int64_t v52 = (char *)&OperandRange - (unsigned char *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              uint64_t v30 = (char *)v62;
              uint64_t v29 = (uint64_t *)((char *)v62 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              uint64_t v29 = &OperandRange;
              uint64_t v30 = (char *)v62;
            }
          }
          uint64_t v31 = &v30[24 * v63];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)uint64_t v31 = v32;
          ++v63;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
  if (v61[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
  }
  if (v70)
  {
    long long v33 = (void **)__p;
    if (__p)
    {
      unint64_t v34 = v69;
      int64_t v35 = __p;
      if (v69 != __p)
      {
        do
          unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      uint64_t v69 = v33;
      operator delete(v35);
    }
    uint64_t v36 = v66;
    if (v66)
    {
      long long v37 = v67;
      unint64_t v38 = v66;
      if (v67 != v66)
      {
        do
        {
          int64_t v40 = (void *)*--v37;
          uint64_t v39 = v40;
          *long long v37 = 0;
          if (v40) {
            operator delete[](v39);
          }
        }
        while (v37 != v36);
        unint64_t v38 = v66;
      }
      uint64_t v67 = v36;
      operator delete(v38);
    }
    if (v62 != v65) {
      free(v62);
    }
  }
  return v9;
}

BOOL mlir::arith::AddIOp::parse(uint64_t a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  long long v23 = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v23, v24);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    unsigned char *v19 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v20 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v23 != v25) {
    free(v23);
  }
}

uint64_t mlir::arith::detail::AddUIExtendedOpGenericAdaptorBase::AddUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addui_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddUIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v5 = *(void *)a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "sum", 3);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v7 = *(void *)a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);

  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "overflow", 8);
}

uint64_t mlir::arith::AddUIExtendedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0; {
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 1u))return 0; {
  uint64_t v7 = *this;
  }
  uint64_t v8 = (*this)[9];
  unint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (*(void *)(*(void *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    int v10 = *((_DWORD *)v7 + 9);
    uint64_t v11 = v7 - 2;
    uint64_t v12 = v10 ? (uint64_t)v11 : 0;
    if (v9 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v13 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      if ((*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
        return 1;
      }
    }
  }
  uint64_t v24 = (const void **)"failed to verify that all of {lhs, rhs, sum} have same type";
  __int16 v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v33)
  {
    uint64_t v15 = (void **)__p;
    if (__p)
    {
      uint64_t v16 = v32;
      uint64_t v17 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      long long v32 = v15;
      operator delete(v17);
    }
    long long v18 = v29;
    if (v29)
    {
      uint64_t v19 = v30;
      uint64_t v20 = v29;
      if (v30 != v29)
      {
        do
        {
          unsigned int v22 = (void *)*--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        uint64_t v20 = v29;
      }
      uint64_t v30 = v18;
      operator delete(v20);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v14;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int64_t v57 = (const void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v57, 1)) {
    return 1;
  }
  uint64_t v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    uint64_t v11 = v57;
    if (v41 >= 1)
    {
      if (v57) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v61[0] = v11;
      v61[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
        return 1;
      }
      uint64_t v11 = v57;
    }
  }
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)*((void *)*v11 + 17);
  BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (!v14
    || (unint64_t v53 = v11,
        uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8),
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53),
        uint64_t v9 = 1,
        !mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)))
  {
    __int16 v55 = 261;
    unint64_t v53 = a3;
    uint64_t v54 = a4;
    mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
    if (v61[0])
    {
      LODWORD(OperandRange) = 3;
      int64_t v59 = " #";
      uint64_t v60 = 2;
      p_uint64_t OperandRange = &OperandRange;
      uint64_t v16 = (char *)v62;
      if (v63 >= v64)
      {
        unint64_t v43 = v63 + 1;
        if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          uint64_t v16 = (char *)v62;
          p_uint64_t OperandRange = (uint64_t *)((char *)v62 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          p_uint64_t OperandRange = &OperandRange;
          uint64_t v16 = (char *)v62;
        }
      }
      uint64_t v17 = &v16[24 * v63];
      long long v18 = *(_OWORD *)p_OperandRange;
      *((void *)v17 + 2) = p_OperandRange[2];
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 5;
        int64_t v59 = (const char *)a5;
        uint64_t v20 = &OperandRange;
        uint64_t v21 = (char *)v62;
        if (v19 >= v64)
        {
          unint64_t v44 = v19 + 1;
          BOOL v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v45)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            uint64_t v21 = (char *)v62;
            uint64_t v20 = (uint64_t *)((char *)v62 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            uint64_t v20 = &OperandRange;
            uint64_t v21 = (char *)v62;
          }
        }
        unsigned int v22 = &v21[24 * v63];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unsigned int v22 = v23;
        uint64_t v24 = ++v63;
        if (v61[0])
        {
          LODWORD(OperandRange) = 3;
          int64_t v59 = " must be BOOL-like, but got ";
          uint64_t v60 = 28;
          __int16 v25 = &OperandRange;
          unint64_t v26 = (char *)v62;
          if (v24 >= v64)
          {
            unint64_t v46 = v24 + 1;
            BOOL v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
            if (v62 <= &OperandRange && v47)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              unint64_t v26 = (char *)v62;
              __int16 v25 = (uint64_t *)((char *)v62 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              __int16 v25 = &OperandRange;
              unint64_t v26 = (char *)v62;
            }
          }
          int64_t v27 = &v26[24 * v63];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = v25[2];
          *(_OWORD *)int64_t v27 = v28;
          ++v63;
          if (v61[0])
          {
            uint64_t v29 = &OperandRange;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
            uint64_t v30 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v48 = v63 + 1;
              if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
              {
                int64_t v52 = (char *)&OperandRange - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                uint64_t v30 = (char *)v62;
                uint64_t v29 = (uint64_t *)((char *)v62 + v52);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                uint64_t v29 = &OperandRange;
                uint64_t v30 = (char *)v62;
              }
            }
            uint64_t v31 = &v30[24 * v63];
            long long v32 = *(_OWORD *)v29;
            *((void *)v31 + 2) = v29[2];
            *(_OWORD *)uint64_t v31 = v32;
            ++v63;
          }
        }
      }
    }
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
    if (v61[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
    }
    if (v70)
    {
      char v33 = (void **)__p;
      if (__p)
      {
        uint64_t v34 = v69;
        int64_t v35 = __p;
        if (v69 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          int64_t v35 = __p;
        }
        uint64_t v69 = v33;
        operator delete(v35);
      }
      uint64_t v36 = v66;
      if (v66)
      {
        long long v37 = v67;
        unint64_t v38 = v66;
        if (v67 != v66)
        {
          do
          {
            int64_t v40 = (void *)*--v37;
            uint64_t v39 = v40;
            *long long v37 = 0;
            if (v40) {
              operator delete[](v39);
            }
          }
          while (v37 != v36);
          unint64_t v38 = v66;
        }
        uint64_t v67 = v36;
        operator delete(v38);
      }
      if (v62 != v65) {
        free(v62);
      }
    }
  }
  return v9;
}

BOOL mlir::arith::AddUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  memset(v9, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7, (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t v7 = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &v7, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v10, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddUIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v30 = v32;
  uint64_t v31 = 0x200000000;
  int v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v30, v31);
  BOOL v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    unsigned char *v19 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v20 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ",", 1uLL);
  }
  else
  {
    *long long v23 = 44;
    ++*((void *)v22 + 4);
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v26 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 1);
  uint64_t v28 = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::AndIOpGenericAdaptorBase::AndIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.andi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AndIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  uint64_t __src = v18;
  uint64_t v17 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v15, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v14, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v19 = v15;
  if (v17 != 1)
  {
    if (!v17)
    {
      if (HIDWORD(v17))
      {
        unsigned int v6 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v6, 8 - 8 * v6);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v18, 1uLL, 8);
      unsigned int v6 = v17;
      if (v17 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v17) = 1;
  }
  uint64_t v7 = mlir::ValueRange::dereference_iterator(&v19, 0);
  *(void *)uint64_t __src = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = __src;
  uint64_t v9 = v17;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  unint64_t v11 = v10 + v17;
  if (v11 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  if (v9)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v10), v8, 8 * v9);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v10 + v9;
  if (__src != v18) {
    free(__src);
  }
}

BOOL mlir::arith::AndIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.bitcast", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::BitcastOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  unsigned int v80 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v80)) {
    return 1;
  }
  uint64_t v9 = v80;
  if (*((_UNKNOWN **)*v80 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v79 = (uint64_t)v80;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    uint64_t v9 = v80;
    if (v26 >= 1)
    {
      if (v80) {
        uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      }
      else {
        uint64_t v27 = 0;
      }
      v85[0] = v9;
      v85[1] = v27;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v85);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v9 = v80;
    }
  }
  uint64_t v10 = (void *)*((void *)*v9 + 17);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v9 + 8);
    uint64_t v73 = v9;
    uint64_t v74 = v12;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v9 = v80;
    uint64_t v10 = (void *)*((void *)*v80 + 17);
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v78 = v9;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78);
    uint64_t v9 = v80;
    if (v60 >= 1)
    {
      if (v80) {
        uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      }
      else {
        uint64_t v61 = 0;
      }
      unsigned int v82 = v9;
      uint64_t v83 = v61;
      uint64_t v62 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v82)
                     + 136);
      if (v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      uint64_t v9 = v80;
    }
  }
  uint64_t v28 = *v9;
  uint64_t v29 = (void *)*((void *)*v9 + 17);
  if (v29 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v77[0] = v9;
    v77[1] = v56;
    int64_t v57 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v77) + 136);
    if (v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 1;
    }
    uint64_t v9 = v80;
    uint64_t v28 = *v80;
    if (*((_UNKNOWN **)*v80 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      goto LABEL_57;
    }
    goto LABEL_93;
  }
  if (v29 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
LABEL_93:
    uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v76[0] = v9;
    v76[1] = v58;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76);
    if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
    {
      int64_t v59 = *(void **)(*(void *)OperandRange + 136);
      if (v59 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
      {
        uint64_t v24 = 1;
        if (v59 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          || v59 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          return v24;
        }
        goto LABEL_57;
      }
    }
    return 1;
  }
LABEL_57:
  __int16 v75 = 261;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  mlir::Operation::emitOpError(a1, &v73, (uint64_t)v85);
  if (v85[0])
  {
    LODWORD(v82) = 3;
    uint64_t v83 = (uint64_t)" #";
    uint64_t v84 = 2;
    uint64_t v30 = &v82;
    uint64_t v31 = (char *)v86;
    if (v87 >= v88)
    {
      unint64_t v63 = v87 + 1;
      if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
      {
        int64_t v69 = (char *)&v82 - (unsigned char *)v86;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        uint64_t v31 = (char *)v86;
        uint64_t v30 = (const void ***)((char *)v86 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        uint64_t v30 = &v82;
        uint64_t v31 = (char *)v86;
      }
    }
    long long v32 = &v31[24 * v87];
    long long v33 = *(_OWORD *)v30;
    *((void *)v32 + 2) = v30[2];
    *(_OWORD *)long long v32 = v33;
    uint64_t v34 = ++v87;
    if (v85[0])
    {
      LODWORD(v82) = 5;
      uint64_t v83 = a5;
      int64_t v35 = &v82;
      uint64_t v36 = (char *)v86;
      if (v34 >= v88)
      {
        unint64_t v64 = v34 + 1;
        BOOL v65 = (char *)v86 + 24 * v34 > (char *)&v82;
        if (v86 <= &v82 && v65)
        {
          int64_t v70 = (char *)&v82 - (unsigned char *)v86;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          uint64_t v36 = (char *)v86;
          int64_t v35 = (const void ***)((char *)v86 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          int64_t v35 = &v82;
          uint64_t v36 = (char *)v86;
        }
      }
      long long v37 = &v36[24 * v87];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = v35[2];
      *(_OWORD *)long long v37 = v38;
      uint64_t v39 = ++v87;
      if (v85[0])
      {
        LODWORD(v82) = 3;
        uint64_t v83 = (uint64_t)" must be signless-integer-or-float-like or memref of signless-integer or float, but got ";
        uint64_t v84 = 88;
        int64_t v40 = &v82;
        uint64_t v41 = (char *)v86;
        if (v39 >= v88)
        {
          unint64_t v66 = v39 + 1;
          BOOL v67 = (char *)v86 + 24 * v39 > (char *)&v82;
          if (v86 <= &v82 && v67)
          {
            int64_t v71 = (char *)&v82 - (unsigned char *)v86;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            uint64_t v41 = (char *)v86;
            int64_t v40 = (const void ***)((char *)v86 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            int64_t v40 = &v82;
            uint64_t v41 = (char *)v86;
          }
        }
        uint64_t v42 = &v41[24 * v87];
        long long v43 = *(_OWORD *)v40;
        *((void *)v42 + 2) = v40[2];
        *(_OWORD *)uint64_t v42 = v43;
        ++v87;
        if (v85[0])
        {
          unint64_t v44 = &v82;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v82, (uint64_t)v80);
          BOOL v45 = (char *)v86;
          if (v87 >= v88)
          {
            unint64_t v68 = v87 + 1;
            if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
            {
              int64_t v72 = (char *)&v82 - (unsigned char *)v86;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              BOOL v45 = (char *)v86;
              unint64_t v44 = (const void ***)((char *)v86 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              unint64_t v44 = &v82;
              BOOL v45 = (char *)v86;
            }
          }
          unint64_t v46 = &v45[24 * v87];
          long long v47 = *(_OWORD *)v44;
          *((void *)v46 + 2) = v44[2];
          *(_OWORD *)unint64_t v46 = v47;
          ++v87;
        }
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v85);
  if (v85[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v85);
  }
  if (v94)
  {
    unint64_t v48 = (void **)__p;
    if (__p)
    {
      int64_t v49 = v93;
      int64_t v50 = __p;
      if (v93 != __p)
      {
        do
          int64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        int64_t v50 = __p;
      }
      uint64_t v93 = v48;
      operator delete(v50);
    }
    int64_t v51 = v90;
    if (v90)
    {
      int64_t v52 = v91;
      unint64_t v53 = v90;
      if (v91 != v90)
      {
        do
        {
          __int16 v55 = (void *)*--v52;
          uint64_t v54 = v55;
          void *v52 = 0;
          if (v55) {
            operator delete[](v54);
          }
        }
        while (v52 != v51);
        unint64_t v53 = v90;
      }
      long long v91 = v51;
      operator delete(v53);
    }
    if (v86 != v89) {
      free(v86);
    }
  }
  return v24;
}

BOOL mlir::arith::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (const char *)a2[1];
  uint64_t v7 = (const char *)a3[1];
  if (v6 == v7)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = (void *)*a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      long long v47 = v6;
      uint64_t v13 = &v46;
      unint64_t v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          unint64_t v14 = (char *)v50;
          uint64_t v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v13 = &v46;
          unint64_t v14 = (char *)v50;
        }
      }
      long long v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)long long v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        long long v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        long long v18 = &v46;
        long long v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v19 = (char *)v50;
            long long v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v18 = &v46;
            long long v19 = (char *)v50;
          }
        }
        uint64_t v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)uint64_t v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          long long v47 = v7;
          long long v23 = &v46;
          uint64_t v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              uint64_t v24 = (char *)v50;
              long long v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              long long v23 = &v46;
              uint64_t v24 = (char *)v50;
            }
          }
          __int16 v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)__int16 v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = (void **)__p;
      if (__p)
      {
        uint64_t v28 = v57;
        uint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        int64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v54;
      if (v54)
      {
        uint64_t v31 = v55;
        long long v32 = v54;
        if (v55 != v54)
        {
          do
          {
            uint64_t v34 = (void *)*--v31;
            long long v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              operator delete[](v33);
            }
          }
          while (v31 != v30);
          long long v32 = v54;
        }
        __int16 v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

void mlir::arith::BitcastOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  __int16 v25 = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v25, v26);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    unsigned char *v13 = 58;
    ++*((void *)v12 + 4);
  }
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *long long v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 32;
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    _WORD *v19 = 28532;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "to", 2uLL);
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v22 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t mlir::arith::detail::CeilDivSIOpGenericAdaptorBase::CeilDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivsi", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CeilDivUIOpGenericAdaptorBase::CeilDivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivui", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CmpFOpGenericAdaptorBase::CmpFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      uint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          uint64_t v12 = (char *)v60;
        }
      }
      uint64_t v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    long long v15 = (void **)__p;
    if (__p)
    {
      long long v16 = v67;
      uint64_t v17 = __p;
      if (v67 != __p)
      {
        do
          long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      BOOL v67 = v15;
      operator delete(v17);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    long long v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = (void *)*--v19;
      long long v21 = v22;
      void *v19 = 0;
      if (v22) {
        operator delete[](v21);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      uint64_t v58 = 69;
      long long v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          long long v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          long long v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      __int16 v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)__int16 v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v27 = (void **)__p;
    if (__p)
    {
      uint64_t v28 = v67;
      uint64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = __p;
      }
      BOOL v67 = v27;
      operator delete(v29);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      long long v32 = (void *)*--v30;
      uint64_t v31 = v32;
      *uint64_t v30 = 0;
      if (v32) {
        operator delete[](v31);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::arith::CmpFPredicateAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 54;
    long long v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        long long v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        long long v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    int64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)int64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      unint64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      BOOL v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          BOOL v38 = (char *)v60;
          unint64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v37 = &v56;
          BOOL v38 = (char *)v60;
        }
      }
      unint64_t v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)unint64_t v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    int64_t v41 = (void **)__p;
    if (__p)
    {
      int64_t v42 = v67;
      int64_t v43 = __p;
      if (v67 != __p)
      {
        do
          int64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        int64_t v43 = __p;
      }
      BOOL v67 = v41;
      operator delete(v43);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    unint64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      BOOL v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      int v46 = (void *)*--v44;
      __int16 v45 = v46;
      *unint64_t v44 = 0;
      if (v46) {
        operator delete[](v45);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"predicate", 9, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::CmpFOp::getInherentAttr(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 9 && (*(void *)a3 == 0x7461636964657270 ? (BOOL v4 = *(unsigned char *)(a3 + 8) == 101) : (BOOL v4 = 0), v4)) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::arith::CmpFOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 9 && *(void *)a2 == 0x7461636964657270 && *(unsigned char *)(a2 + 8) == 101)
  {
    uint64_t v6 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::arith::CmpFPredicateAttr::classof(a4);
      if (result) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *uint64_t v6 = v7;
  }
  return result;
}

void mlir::arith::CmpFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"predicate", 9, *a2);
  }
}

BOOL mlir::arith::CmpFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v6, (const void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1 || (mlir::arith::CmpFPredicateAttr::classof(a1) & 1) != 0) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    long long v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        uint64_t v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    uint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      long long v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        long long v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"
              "1, 12, 13, 14, 15";
        uint64_t v33 = 123;
        long long v15 = &v31;
        long long v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v16 = (char *)v37;
            long long v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v15 = &v31;
            long long v16 = (char *)v37;
          }
        }
        uint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)uint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v44;
      long long v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        long long v21 = __p;
      }
      unint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      long long v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          long long v26 = (void *)*--v23;
          __int16 v25 = v26;
          *long long v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      int64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[344];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::arith::CmpFPredicateAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    BOOL v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        BOOL v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        BOOL v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  long long v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpFPredicateAttr]";
  unint64_t v41 = 80;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          long long v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        long long v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v21 = (char *)v46;
            uint64_t v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            long long v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      __int16 v25 = v53;
      long long v26 = __p;
      if (v53 != __p)
      {
        do
          __int16 v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        long long v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          int64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      int64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::arith::CmpFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::CmpFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v15[2] = *MEMORY[0x1E4F143B8];
  v15[0] = a4;
  v15[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  uint64_t v13 = mlir::ValueRange::dereference_iterator(v15, 0);
  **(void **)a11 = getI1SameShape((void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
  return 1;
}

uint64_t mlir::arith::CmpFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v3, (const void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      return 0;
    }
    if (*((_DWORD *)*this + 9)) {
      uint64_t v4 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0; {
    I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    }
    if (*((_DWORD *)*this + 9)) {
      uint64_t v7 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v7 = 0;
    }
    if (I1SameShape == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    v24[0] = (const void **)"failed to verify that result type has i1 element type and same shape as operands";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v32;
        int v11 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          int v11 = __p;
        }
        unint64_t v32 = v9;
        operator delete(v11);
      }
      unsigned int v12 = v29;
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v13 = v30;
      uint64_t v14 = v29;
      if (v30 == v29)
      {
LABEL_43:
        int64_t v30 = v12;
        operator delete(v14);
LABEL_44:
        if (v27 != &v28) {
          free(v27);
        }
        return v8;
      }
      do
      {
        long long v16 = (void *)*--v13;
        unint64_t v15 = v16;
        void *v13 = 0;
        if (v16) {
          operator delete[](v15);
        }
      }
      while (v13 != v12);
LABEL_42:
      uint64_t v14 = v29;
      goto LABEL_43;
    }
  }
  else
  {
    v24[0] = (const void **)"requires attribute 'predicate'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        long long v18 = v32;
        long long v19 = __p;
        if (v32 != __p)
        {
          do
            long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          long long v19 = __p;
        }
        unint64_t v32 = v17;
        operator delete(v19);
      }
      unsigned int v12 = v29;
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v20 = v30;
      uint64_t v14 = v29;
      if (v30 == v29) {
        goto LABEL_43;
      }
      do
      {
        uint64_t v22 = (void *)*--v20;
        long long v21 = v22;
        *uint64_t v20 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v20 != v12);
      goto LABEL_42;
    }
  }
  return v8;
}

BOOL mlir::arith::CmpFOp::parse(uint64_t a1, void *a2)
{
  _OWORD v81[4] = *MEMORY[0x1E4F143B8];
  memset(v81, 0, 24);
  v59[0] = (uint64_t)v81;
  v59[1] = 1;
  memset(v80, 0, 24);
  v58[0] = &v79;
  v58[1] = 1;
  uint64_t AttrData = 0;
  int64_t v57 = 0;
  __int16 v75 = v77;
  uint64_t v76 = 0x400000000;
  uint64_t v78 = 4;
  uint64_t v79 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  long long v71 = xmmword_1E4FBF280;
  long long v72 = *(_OWORD *)&off_1E4FBF290;
  long long v73 = xmmword_1E4FBF2A0;
  long long v74 = *(_OWORD *)&off_1E4FBF2B0;
  *(_OWORD *)BOOL v67 = xmmword_1E4FBF240;
  long long v68 = *(_OWORD *)&off_1E4FBF250;
  *(_OWORD *)long long __p = xmmword_1E4FBF260;
  long long v70 = *(_OWORD *)&off_1E4FBF270;
  v66[2] = xmmword_1E4FBF200;
  v66[3] = *(_OWORD *)&off_1E4FBF210;
  v66[4] = xmmword_1E4FBF220;
  v66[5] = *(_OWORD *)&off_1E4FBF230;
  long long __src = xmmword_1E4FBF1C0;
  *(_OWORD *)BOOL v65 = *(_OWORD *)&off_1E4FBF1D0;
  v66[0] = xmmword_1E4FBF1E0;
  v66[1] = *(_OWORD *)&off_1E4FBF1F0;
  if ((*(unsigned __int8 (**)(uint64_t, const void ***, long long *, uint64_t))(*(void *)a1 + 392))(a1, &AttrData, &__src, 16))
  {
    uint64_t v5 = (uint64_t)v57;
    if (!v57) {
      goto LABEL_3;
    }
    goto LABEL_50;
  }
  v54[0] = 0;
  long long v18 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Noneuint64_t Type = mlir::Builder::getNoneType(v18, v19);
  unsigned __int16 v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, v54, NoneType);
  if (v21 >= 0x100u && (_BYTE)v21)
  {
    mlir::NamedAttrList::append((uint64_t)&v75, (uint64_t)"predicate", 9, v54[0]);
  }
  else
  {
    if (v21 < 0x100u)
    {
      uint64_t v60 = (const void **)"expected string or keyword containing one of the following enum values for attribute 'predica"
                           "te' [false, oeq, ogt, oge, olt, ole, one, ord, ueq, ugt, uge, ult, ule, une, uno, true]";
      __int16 v63 = 259;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const void ***))(*(void *)a1 + 24))(&__src, a1, v4, &v60);
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((void)__src) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      }
      if (!BYTE8(v70))
      {
LABEL_76:
        uint64_t v46 = v75;
        if (v75 == v77) {
          return v17;
        }
LABEL_77:
        free(v46);
        return v17;
      }
      uint64_t v22 = (void **)__p[0];
      if (__p[0])
      {
        long long v23 = (void **)__p[1];
        uint64_t v24 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            long long v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          uint64_t v24 = __p[0];
        }
        __p[1] = v22;
        operator delete(v24);
      }
      __int16 v25 = v67[1];
      if (!v67[1])
      {
LABEL_74:
        if (v65[1] != (char *)v66 + 8) {
          free(v65[1]);
        }
        goto LABEL_76;
      }
      long long v26 = (void *)v68;
      unint64_t v27 = v67[1];
      if ((void *)v68 == v67[1])
      {
LABEL_73:
        *(void *)&long long v68 = v25;
        operator delete(v27);
        goto LABEL_74;
      }
      do
      {
        int64_t v29 = (void *)*--v26;
        uint64_t v28 = v29;
        *long long v26 = 0;
        if (v29) {
          operator delete[](v28);
        }
      }
      while (v26 != v25);
LABEL_72:
      unint64_t v27 = v67[1];
      goto LABEL_73;
    }
    if (!(_BYTE)v21)
    {
      uint64_t v17 = 0;
      uint64_t v46 = v75;
      if (v75 == v77) {
        return v17;
      }
      goto LABEL_77;
    }
  }
  uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v54);
  int64_t v57 = (const char *)v5;
  if (v5)
  {
LABEL_50:
    uint64_t v30 = mlir::arith::symbolizeCmpFPredicate((uint64_t)AttrData, v5);
    if (v31)
    {
      uint64_t v32 = v30;
      char v33 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v34 = mlir::IntegerType::get(*v33, 0x40u, 0);
      uint64_t v35 = mlir::IntegerAttr::get(v34, v32);
      *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(a2) = v35;
      uint64_t v6 = v75;
      if (v75 == v77) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    v54[0] = (uint64_t)"invalid ";
    __int16 v55 = 259;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(&__src, a1, v4, v54);
    if ((void)__src)
    {
      LODWORD(v60) = 3;
      unsigned int v61 = "predicate attribute specification: \"";
      uint64_t v62 = 36;
      int64_t v36 = &v60;
      int64_t v37 = (char *)v65[1];
      if (LODWORD(v66[0]) >= DWORD1(v66[0]))
      {
        unint64_t v52 = LODWORD(v66[0]) + 1;
        if (v65[1] <= &v60 && (char *)v65[1] + 24 * LODWORD(v66[0]) > (char *)&v60)
        {
          int64_t v53 = (char *)&v60 - (char *)v65[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          int64_t v37 = (char *)v65[1];
          int64_t v36 = (const void ***)((char *)v65[1] + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          int64_t v36 = &v60;
          int64_t v37 = (char *)v65[1];
        }
      }
      unsigned int v38 = &v37[24 * LODWORD(v66[0])];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)unsigned int v38 = v39;
      ++LODWORD(v66[0]);
      if ((void)__src)
      {
        __int16 v63 = 261;
        uint64_t v60 = AttrData;
        unsigned int v61 = v57;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &v60);
        if ((void)__src) {
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
        }
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((void)__src) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    }
    if (!BYTE8(v70)) {
      goto LABEL_76;
    }
    long long v40 = (void **)__p[0];
    if (__p[0])
    {
      unint64_t v41 = (void **)__p[1];
      uint64_t v42 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p[0];
      }
      __p[1] = v40;
      operator delete(v42);
    }
    __int16 v25 = v67[1];
    if (!v67[1]) {
      goto LABEL_74;
    }
    __int16 v43 = (void *)v68;
    unint64_t v27 = v67[1];
    if ((void *)v68 == v67[1]) {
      goto LABEL_73;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v25);
    goto LABEL_72;
  }
LABEL_3:
  uint64_t v6 = v75;
  if (v75 != v77) {
LABEL_4:
  }
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v81, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v80, 1)) {
    return 0;
  }
  __int16 v75 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v8 = a2[1];
  *(void *)&long long __src = a1;
  *((void *)&__src + 1) = &v75;
  v65[0] = a2;
  if (!mlir::arith::CmpFOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    return 0;
  *(void *)&long long __src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &__src)) {
    return 0;
  }
  unint64_t v9 = (_WORD *)__src;
  uint64_t v79 = (void *)__src;
  uint64_t v60 = (const void **)__src;
  uint64_t v10 = *(void **)(*(void *)__src + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v54[0] = __src;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v54);
    if (v47 >= 1)
    {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
      *(void *)&long long __src = v9;
      *((void *)&__src + 1) = v48;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
      if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(OperandRange)) {
        goto LABEL_82;
      }
    }
  }
  int v11 = *(void **)(*(void *)v9 + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    __int16 v75 = v9;
    uint64_t v76 = v12;
    uint64_t v13 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75);
    if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(v13))
    {
LABEL_82:
      *(void *)&long long __src = getI1SameShape(v79);
      mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
      uint64_t v50 = (uint64_t)(a2 + 2);
      if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v59, v58, v7, v50))return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v80, *(void *)v58[0], v50) != 0; {
      return 0;
      }
    }
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v77[8] = 257;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, _WORD **))(*(void *)a1 + 24))(&__src, a1, v14, &v75);
  uint64_t v15 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be floating-point-like, but got ");
  uint64_t v16 = mlir::InFlightDiagnostic::append<mlir::Type &>(v15, (uint64_t *)&v60);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v16);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
  return v17;
}

uint64_t mlir::arith::symbolizeCmpFPredicate(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 25967 && *(unsigned char *)(a1 + 2) == 113)
      {
        return 1;
      }
      else if (*(_WORD *)a1 == 26479 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 2;
      }
      else if (*(_WORD *)a1 == 26479 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 3;
      }
      else if (*(_WORD *)a1 == 27759 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 4;
      }
      else if (*(_WORD *)a1 == 27759 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 5;
      }
      else if (*(_WORD *)a1 == 28271 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 6;
      }
      else if (*(_WORD *)a1 == 29295 && *(unsigned char *)(a1 + 2) == 100)
      {
        return 7;
      }
      else if (*(_WORD *)a1 == 25973 && *(unsigned char *)(a1 + 2) == 113)
      {
        return 8;
      }
      else if (*(_WORD *)a1 == 26485 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 9;
      }
      else if (*(_WORD *)a1 == 26485 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 10;
      }
      else if (*(_WORD *)a1 == 27765 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 11;
      }
      else if (*(_WORD *)a1 == 27765 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 12;
      }
      else if (*(_WORD *)a1 == 28277 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 13;
      }
      else
      {
        if (*(_WORD *)a1 != 28277 || *(unsigned char *)(a1 + 2) != 111) {
          return 0;
        }
        return 14;
      }
    case 4:
      if (*(_DWORD *)a1 == 1702195828) {
        return 15;
      }
      else {
        return 0;
      }
    case 5:
      if (*(_DWORD *)a1 != 1936482662 || *(unsigned char *)(a1 + 4) != 101) {
        return 0;
      }
      return 0;
    default:
      return 0;
  }
}

BOOL mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(uint64_t a1)
{
  unint64_t v1 = *(void **)(*(void *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  BOOL result = 1;
  if (v1 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(uint64_t a1, char *__s)
{
  if (*(void *)a1)
  {
    size_t v4 = strlen(__s);
    uint64_t v5 = a1 + 24;
    unint64_t v6 = *(void *)(a1 + 24);
    int v15 = 3;
    uint64_t v16 = __s;
    size_t v17 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = &v15;
    if (v7 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v12 = v7 + 1;
      BOOL v13 = v6 + 24 * v7 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = &v15;
      }
    }
    uint64_t v9 = v6 + 24 * *(unsigned int *)(a1 + 32);
    long long v10 = *(_OWORD *)v8;
    *(void *)(v9 + 16) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void mlir::arith::CmpFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  size_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v30 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  char v6 = 0;
  uint64_t v7 = "false";
  size_t v8 = 5;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      char v6 = 0;
      uint64_t v7 = "oeq";
      size_t v8 = 3;
      break;
    case 2:
      char v6 = 0;
      uint64_t v7 = "ogt";
      size_t v8 = 3;
      break;
    case 3:
      char v6 = 0;
      uint64_t v7 = "oge";
      size_t v8 = 3;
      break;
    case 4:
      char v6 = 0;
      uint64_t v7 = "olt";
      size_t v8 = 3;
      break;
    case 5:
      char v6 = 0;
      uint64_t v7 = "ole";
      size_t v8 = 3;
      break;
    case 6:
      char v6 = 0;
      uint64_t v7 = "one";
      size_t v8 = 3;
      break;
    case 7:
      char v6 = 0;
      uint64_t v7 = "ord";
      size_t v8 = 3;
      break;
    case 8:
      char v6 = 0;
      uint64_t v7 = "ueq";
      size_t v8 = 3;
      break;
    case 9:
      char v6 = 0;
      uint64_t v7 = "ugt";
      size_t v8 = 3;
      break;
    case 10:
      char v6 = 0;
      uint64_t v7 = "uge";
      size_t v8 = 3;
      break;
    case 11:
      char v6 = 0;
      uint64_t v7 = "ult";
      size_t v8 = 3;
      break;
    case 12:
      char v6 = 0;
      uint64_t v7 = "ule";
      size_t v8 = 3;
      break;
    case 13:
      char v6 = 0;
      uint64_t v7 = "une";
      size_t v8 = 3;
      break;
    case 14:
      char v6 = 0;
      uint64_t v7 = "uno";
      size_t v8 = 3;
      break;
    case 15:
      char v6 = 0;
      uint64_t v7 = "true";
      size_t v8 = 4;
      break;
    default:
      size_t v8 = 0;
      uint64_t v7 = "";
      char v6 = 1;
      break;
  }
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v10 = (void *)*((void *)v9 + 4);
  if (v8 <= *((void *)v9 + 3) - (void)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((void *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *unint64_t v12 = 44;
    ++*((void *)v11 + 4);
  }
  BOOL v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  int v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *uint64_t v16 = 44;
    ++*((void *)v15 + 4);
  }
  size_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  uint64_t v31 = 0x200000001;
  long long v19 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v22, v30, v31);
  long long v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *uint64_t v24 = 32;
  }
  __int16 v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *long long v26 = 58;
    ++*((void *)v25 + 4);
  }
  unint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::CmpIOpGenericAdaptorBase::CmpIOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpIOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      unint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          unint64_t v12 = (char *)v60;
        }
      }
      BOOL v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)BOOL v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    int v15 = (void **)__p;
    if (__p)
    {
      uint64_t v16 = v67;
      size_t v17 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        size_t v17 = __p;
      }
      BOOL v67 = v15;
      operator delete(v17);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    long long v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = (void *)*--v19;
      unsigned __int16 v21 = v22;
      void *v19 = 0;
      if (v22) {
        operator delete[](v21);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      uint64_t v58 = 69;
      long long v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          long long v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          long long v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      __int16 v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)__int16 v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v27 = (void **)__p;
    if (__p)
    {
      uint64_t v28 = v67;
      int64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        int64_t v29 = __p;
      }
      BOOL v67 = v27;
      operator delete(v29);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = (void *)*--v30;
      uint64_t v31 = v32;
      *uint64_t v30 = 0;
      if (v32) {
        operator delete[](v31);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::arith::CmpIPredicateAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 54;
    char v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        char v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        char v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    uint64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)uint64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      int64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      unsigned int v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unsigned int v38 = (char *)v60;
          int64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int64_t v37 = &v56;
          unsigned int v38 = (char *)v60;
        }
      }
      long long v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)long long v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v41 = (void **)__p;
    if (__p)
    {
      uint64_t v42 = v67;
      __int16 v43 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        __int16 v43 = __p;
      }
      BOOL v67 = v41;
      operator delete(v43);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      BOOL v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = (void *)*--v44;
      uint64_t v45 = v46;
      *uint64_t v44 = 0;
      if (v46) {
        operator delete[](v45);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpIOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 9 && *(void *)a2 == 0x7461636964657270 && *(unsigned char *)(a2 + 8) == 101)
  {
    uint64_t v6 = (void *)result;
    if (a4)
    {
      BOOL result = mlir::arith::CmpIPredicateAttr::classof(a4);
      if (result) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *uint64_t v6 = v7;
  }
  return result;
}

BOOL mlir::arith::CmpIOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v6, (const void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1 || (mlir::arith::CmpIPredicateAttr::classof(a1) & 1) != 0) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    unint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unint64_t v12 = (char *)v37;
        uint64_t v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        unint64_t v12 = (char *)v37;
      }
    }
    BOOL v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)BOOL v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9";
        uint64_t v33 = 99;
        int v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            int v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            int v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        size_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)size_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v44;
      unsigned __int16 v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        unsigned __int16 v21 = __p;
      }
      uint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      long long v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          long long v26 = (void *)*--v23;
          __int16 v25 = v26;
          *long long v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      uint64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        BOOL v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[346];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::arith::CmpIPredicateAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  long long v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpIPredicateAttr]";
  unint64_t v41 = 80;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      size_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          size_t v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          size_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned __int16 v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned __int16 v21 = (char *)v46;
            uint64_t v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            unsigned __int16 v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      __int16 v25 = v53;
      long long v26 = __p;
      if (v53 != __p)
      {
        do
          __int16 v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        long long v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          int64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      int64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

void mlir::arith::CmpIOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a5;
  uint64_t v19 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  uint64_t v8 = mlir::IntegerType::get(*a1, 0x40u, 0);
  uint64_t v9 = mlir::IntegerAttr::get(v8, a3);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>((void *)a2) = v9;
  long long __src = v24;
  uint64_t v23 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v25 = v21;
  if (v23 != 1)
  {
    if (!v23)
    {
      if (HIDWORD(v23))
      {
        unsigned int v11 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v11, 8 - 8 * v11);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v24, 1uLL, 8);
      unsigned int v11 = v23;
      if (v23 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v23) = 1;
  }
  uint64_t v12 = mlir::ValueRange::dereference_iterator(&v25, 0);
  I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  *(void *)long long __src = I1SameShape;
  uint64_t v14 = __src;
  uint64_t v15 = v23;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  unint64_t v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24) {
    free(__src);
  }
}

void mlir::arith::CmpIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  mlir::OperationState::addOperands(a2, a5, a6);
  *(void *)(a2 + 192) = 0;
  uint64_t v13 = *(unsigned int *)(a2 + 120);
  if (a8 + v13 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v13, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v13), a7, 16 * a8);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v13 + a8;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (a4 + v14 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v14, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a2 + 64) + 8 * v14;
    do
    {
      *(void *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + a4;
}

uint64_t mlir::arith::CmpIOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v73[0] = v2;
    if (mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v3, (const void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v73)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
    {
      uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      uint64_t v6 = *this;
      unint64_t v69 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::Type::isSignlessInteger((mlir::Type *)&v69, 1)) {
        goto LABEL_57;
      }
      unint64_t v7 = (const void **)v69;
      uint64_t v8 = *(void *)v69;
      uint64_t v9 = *(void **)(*(void *)v69 + 136);
      if (v9 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      {
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        v73[0] = v7;
        v73[1] = v10;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v73);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
          goto LABEL_57;
        }
        unint64_t v7 = (const void **)v69;
        uint64_t v8 = *(void *)v69;
        uint64_t v9 = *(void **)(*(void *)v69 + 136);
      }
      if (v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        unint64_t v66 = v7;
        uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
          goto LABEL_57;
        }
      }
      __int16 v68 = 261;
      unint64_t v66 = (const void **)"result";
      uint64_t v67 = 6;
      mlir::Operation::emitOpError(v6, &v66, (uint64_t)v73);
      if (v73[0])
      {
        LODWORD(OperandRange) = 3;
        long long v71 = " #";
        uint64_t v72 = 2;
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v12 = (char *)v74;
        if (v75 >= v76)
        {
          unint64_t v56 = v75 + 1;
          if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
          {
            int64_t v62 = (char *)&OperandRange - (unsigned char *)v74;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            uint64_t v12 = (char *)v74;
            p_uint64_t OperandRange = (uint64_t *)((char *)v74 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            p_uint64_t OperandRange = &OperandRange;
            uint64_t v12 = (char *)v74;
          }
        }
        uint64_t v13 = &v12[24 * v75];
        long long v14 = *(_OWORD *)p_OperandRange;
        *((void *)v13 + 2) = p_OperandRange[2];
        *(_OWORD *)uint64_t v13 = v14;
        uint64_t v15 = ++v75;
        if (v73[0])
        {
          LODWORD(OperandRange) = 5;
          long long v71 = 0;
          uint64_t v16 = &OperandRange;
          unint64_t v17 = (char *)v74;
          if (v15 >= v76)
          {
            unint64_t v57 = v15 + 1;
            BOOL v58 = (char *)v74 + 24 * v15 > (char *)&OperandRange;
            if (v74 <= &OperandRange && v58)
            {
              int64_t v63 = (char *)&OperandRange - (unsigned char *)v74;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              unint64_t v17 = (char *)v74;
              uint64_t v16 = (uint64_t *)((char *)v74 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              uint64_t v16 = &OperandRange;
              unint64_t v17 = (char *)v74;
            }
          }
          uint64_t v18 = &v17[24 * v75];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)uint64_t v18 = v19;
          uint64_t v20 = ++v75;
          if (v73[0])
          {
            LODWORD(OperandRange) = 3;
            long long v71 = " must be BOOL-like, but got ";
            uint64_t v72 = 28;
            long long v21 = &OperandRange;
            uint64_t v22 = (char *)v74;
            if (v20 >= v76)
            {
              unint64_t v59 = v20 + 1;
              BOOL v60 = (char *)v74 + 24 * v20 > (char *)&OperandRange;
              if (v74 <= &OperandRange && v60)
              {
                int64_t v64 = (char *)&OperandRange - (unsigned char *)v74;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                uint64_t v22 = (char *)v74;
                long long v21 = (uint64_t *)((char *)v74 + v64);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                long long v21 = &OperandRange;
                uint64_t v22 = (char *)v74;
              }
            }
            uint64_t v23 = &v22[24 * v75];
            long long v24 = *(_OWORD *)v21;
            *((void *)v23 + 2) = v21[2];
            *(_OWORD *)uint64_t v23 = v24;
            ++v75;
            if (v73[0])
            {
              long long v25 = &OperandRange;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, v69);
              uint64_t v26 = (char *)v74;
              if (v75 >= v76)
              {
                unint64_t v61 = v75 + 1;
                if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
                {
                  int64_t v65 = (char *)&OperandRange - (unsigned char *)v74;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  uint64_t v26 = (char *)v74;
                  long long v25 = (uint64_t *)((char *)v74 + v65);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  long long v25 = &OperandRange;
                  uint64_t v26 = (char *)v74;
                }
              }
              unint64_t v27 = &v26[24 * v75];
              long long v28 = *(_OWORD *)v25;
              *((void *)v27 + 2) = v25[2];
              *(_OWORD *)unint64_t v27 = v28;
              ++v75;
            }
          }
        }
      }
      char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
      if (v73[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
      }
      if (v82)
      {
        int64_t v30 = (void **)__p;
        if (__p)
        {
          uint64_t v31 = v81;
          unint64_t v32 = __p;
          if (v81 != __p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            unint64_t v32 = __p;
          }
          uint64_t v81 = v30;
          operator delete(v32);
        }
        unint64_t v33 = v78;
        if (v78)
        {
          unint64_t v34 = v79;
          int64_t v35 = v78;
          if (v79 != v78)
          {
            do
            {
              uint64_t v46 = (void *)*--v34;
              uint64_t v45 = v46;
              *unint64_t v34 = 0;
              if (v46) {
                operator delete[](v45);
              }
            }
            while (v34 != v33);
            int64_t v35 = v78;
          }
          uint64_t v79 = v33;
          operator delete(v35);
        }
        if (v74 != v77) {
          free(v74);
        }
      }
      if (v29)
      {
LABEL_57:
        I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (*((_DWORD *)*this + 9)) {
          uint64_t v48 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v48 = 0;
        }
        if (I1SameShape == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
          return 1;
        }
        unint64_t v66 = (const void **)"failed to verify that result type has i1 element type and same shape as operands";
        __int16 v68 = 259;
        mlir::OpState::emitOpError(this, &v66, (uint64_t)v73);
        uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
        if (v73[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
        }
        if (v82)
        {
          unint64_t v49 = (void **)__p;
          if (__p)
          {
            unint64_t v50 = v81;
            int64_t v51 = __p;
            if (v81 != __p)
            {
              do
                unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
              while (v50 != v49);
              int64_t v51 = __p;
            }
            uint64_t v81 = v49;
            operator delete(v51);
          }
          long long v40 = v78;
          if (!v78) {
            goto LABEL_78;
          }
          int64_t v52 = v79;
          uint64_t v42 = v78;
          if (v79 == v78)
          {
LABEL_77:
            uint64_t v79 = v40;
            operator delete(v42);
LABEL_78:
            if (v74 != v77) {
              free(v74);
            }
            return v36;
          }
          do
          {
            char v54 = (void *)*--v52;
            int64_t v53 = v54;
            void *v52 = 0;
            if (v54) {
              operator delete[](v53);
            }
          }
          while (v52 != v40);
LABEL_76:
          uint64_t v42 = v78;
          goto LABEL_77;
        }
        return v36;
      }
    }
    return 0;
  }
  unint64_t v66 = (const void **)"requires attribute 'predicate'";
  __int16 v68 = 259;
  mlir::OpState::emitOpError(this, &v66, (uint64_t)v73);
  uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
  if (v73[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
  }
  if (v82)
  {
    int64_t v37 = (void **)__p;
    if (__p)
    {
      unsigned int v38 = v81;
      uint64_t v39 = __p;
      if (v81 != __p)
      {
        do
          unsigned int v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        uint64_t v39 = __p;
      }
      uint64_t v81 = v37;
      operator delete(v39);
    }
    long long v40 = v78;
    if (!v78) {
      goto LABEL_78;
    }
    unint64_t v41 = v79;
    uint64_t v42 = v78;
    if (v79 == v78) {
      goto LABEL_77;
    }
    do
    {
      uint64_t v44 = (void *)*--v41;
      __int16 v43 = v44;
      *unint64_t v41 = 0;
      if (v44) {
        operator delete[](v43);
      }
    }
    while (v41 != v40);
    goto LABEL_76;
  }
  return v36;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v55)) {
    return 1;
  }
  unsigned int v11 = v55;
  uint64_t v12 = *v55;
  uint64_t v13 = (void *)*((void *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    unsigned int v11 = v55;
    uint64_t v12 = *v55;
    uint64_t v13 = (void *)*((void *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    int64_t v52 = v11;
    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v54 = 261;
  int64_t v52 = a3;
  uint64_t v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    unint64_t v57 = " #";
    uint64_t v58 = 2;
    p_uint64_t OperandRange = &OperandRange;
    unint64_t v17 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        int64_t v48 = (char *)&OperandRange - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        unint64_t v17 = (char *)v60;
        p_uint64_t OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_uint64_t OperandRange = &OperandRange;
        unint64_t v17 = (char *)v60;
      }
    }
    uint64_t v18 = &v17[24 * v61];
    long long v19 = *(_OWORD *)p_OperandRange;
    *((void *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      unint64_t v57 = (const char *)a5;
      long long v21 = &OperandRange;
      uint64_t v22 = (char *)v60;
      if (v20 >= v62)
      {
        unint64_t v43 = v20 + 1;
        BOOL v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v22 = (char *)v60;
          long long v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          long long v21 = &OperandRange;
          uint64_t v22 = (char *)v60;
        }
      }
      uint64_t v23 = &v22[24 * v61];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = v21[2];
      *(_OWORD *)uint64_t v23 = v24;
      uint64_t v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        unint64_t v57 = " must be signless-integer-like, but got ";
        uint64_t v58 = 40;
        uint64_t v26 = &OperandRange;
        unint64_t v27 = (char *)v60;
        if (v25 >= v62)
        {
          unint64_t v45 = v25 + 1;
          BOOL v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            unint64_t v27 = (char *)v60;
            uint64_t v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            uint64_t v26 = &OperandRange;
            unint64_t v27 = (char *)v60;
          }
        }
        long long v28 = &v27[24 * v61];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)long long v28 = v29;
        ++v61;
        if (v59[0])
        {
          int64_t v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          uint64_t v31 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              uint64_t v31 = (char *)v60;
              int64_t v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              int64_t v30 = &OperandRange;
              uint64_t v31 = (char *)v60;
            }
          }
          unint64_t v32 = &v31[24 * v61];
          long long v33 = *(_OWORD *)v30;
          *((void *)v32 + 2) = v30[2];
          *(_OWORD *)unint64_t v32 = v33;
          ++v61;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  }
  if (v68)
  {
    unint64_t v34 = (void **)__p;
    if (__p)
    {
      int64_t v35 = v67;
      uint64_t v36 = __p;
      if (v67 != __p)
      {
        do
          int64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = __p;
      }
      uint64_t v67 = v34;
      operator delete(v36);
    }
    int64_t v37 = v64;
    if (v64)
    {
      unsigned int v38 = v65;
      uint64_t v39 = v64;
      if (v65 != v64)
      {
        do
        {
          unint64_t v41 = (void *)*--v38;
          long long v40 = v41;
          *unsigned int v38 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v38 != v37);
        uint64_t v39 = v64;
      }
      int64_t v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::parse(uint64_t a1, void *a2)
{
  _OWORD v75[4] = *MEMORY[0x1E4F143B8];
  memset(v75, 0, 24);
  v56[0] = (uint64_t)v75;
  v56[1] = 1;
  memset(v74, 0, 24);
  v55[0] = &v73;
  v55[1] = 1;
  uint64_t AttrData = 0;
  __int16 v54 = 0;
  uint64_t v69 = v71;
  uint64_t v70 = 0x400000000;
  uint64_t v72 = 4;
  uint64_t v73 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  _OWORD v63[4] = xmmword_1E4FBF320;
  v63[5] = *(_OWORD *)&off_1E4FBF330;
  *(_OWORD *)int64_t v64 = xmmword_1E4FBF340;
  long long v65 = *(_OWORD *)&off_1E4FBF350;
  v63[0] = xmmword_1E4FBF2E0;
  v63[1] = *(_OWORD *)&off_1E4FBF2F0;
  v63[2] = xmmword_1E4FBF300;
  v63[3] = *(_OWORD *)&off_1E4FBF310;
  long long __src = xmmword_1E4FBF2C0;
  *(_OWORD *)unsigned int v62 = *(_OWORD *)&off_1E4FBF2D0;
  if ((*(unsigned __int8 (**)(uint64_t, unsigned __int16 **, long long *, uint64_t))(*(void *)a1 + 392))(a1, &AttrData, &__src, 10))
  {
    uint64_t v5 = (uint64_t)v54;
    if (!v54) {
      goto LABEL_3;
    }
    goto LABEL_37;
  }
  v51[0] = 0;
  unsigned int v11 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Noneuint64_t Type = mlir::Builder::getNoneType(v11, v12);
  unsigned __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, v51, NoneType);
  if (v14 >= 0x100u && (_BYTE)v14)
  {
    mlir::NamedAttrList::append((uint64_t)&v69, (uint64_t)"predicate", 9, v51[0]);
  }
  else
  {
    if (v14 < 0x100u)
    {
      uint64_t OperandRange = (const void **)"expected string or keyword containing one of the following enum values for attribute"
                                    " 'predicate' [eq, ne, slt, sle, sgt, sge, ult, ule, ugt, uge]";
      __int16 v60 = 259;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const void ***))(*(void *)a1 + 24))(&__src, a1, v4, &OperandRange);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((void)__src) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      }
      if (!v68)
      {
LABEL_63:
        uint64_t v39 = v69;
        if (v69 == v71) {
          return v10;
        }
LABEL_64:
        free(v39);
        return v10;
      }
      uint64_t v15 = (void **)__p;
      if (__p)
      {
        uint64_t v16 = v67;
        unint64_t v17 = __p;
        if (v67 != __p)
        {
          do
            uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          unint64_t v17 = __p;
        }
        uint64_t v67 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v64[1];
      if (!v64[1])
      {
LABEL_61:
        if (v62[1] != (char *)v63 + 8) {
          free(v62[1]);
        }
        goto LABEL_63;
      }
      long long v19 = (void *)v65;
      uint64_t v20 = v64[1];
      if ((void *)v65 == v64[1])
      {
LABEL_60:
        *(void *)&long long v65 = v18;
        operator delete(v20);
        goto LABEL_61;
      }
      do
      {
        uint64_t v22 = (void *)*--v19;
        long long v21 = v22;
        void *v19 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v19 != v18);
LABEL_59:
      uint64_t v20 = v64[1];
      goto LABEL_60;
    }
    if (!(_BYTE)v14)
    {
      uint64_t v10 = 0;
      uint64_t v39 = v69;
      if (v69 == v71) {
        return v10;
      }
      goto LABEL_64;
    }
  }
  uint64_t AttrData = (unsigned __int16 *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v51);
  __int16 v54 = (const char *)v5;
  if (v5)
  {
LABEL_37:
    uint64_t v23 = mlir::arith::symbolizeCmpIPredicate(AttrData, v5);
    if (v24)
    {
      uint64_t v25 = v23;
      uint64_t v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v27 = mlir::IntegerType::get(*v26, 0x40u, 0);
      uint64_t v28 = mlir::IntegerAttr::get(v27, v25);
      *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2) = v28;
      uint64_t v6 = v69;
      if (v69 == v71) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    v51[0] = (uint64_t)"invalid ";
    __int16 v52 = 259;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(&__src, a1, v4, v51);
    if ((void)__src)
    {
      LODWORD(OperandRange) = 3;
      uint64_t v58 = "predicate attribute specification: \"";
      uint64_t v59 = 36;
      long long v29 = &OperandRange;
      int64_t v30 = (char *)v62[1];
      if (LODWORD(v63[0]) >= DWORD1(v63[0]))
      {
        unint64_t v49 = LODWORD(v63[0]) + 1;
        if (v62[1] <= &OperandRange && (char *)v62[1] + 24 * LODWORD(v63[0]) > (char *)&OperandRange)
        {
          int64_t v50 = (char *)&OperandRange - (char *)v62[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          int64_t v30 = (char *)v62[1];
          long long v29 = (const void ***)((char *)v62[1] + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          long long v29 = &OperandRange;
          int64_t v30 = (char *)v62[1];
        }
      }
      uint64_t v31 = &v30[24 * LODWORD(v63[0])];
      long long v32 = *(_OWORD *)v29;
      *((void *)v31 + 2) = v29[2];
      *(_OWORD *)uint64_t v31 = v32;
      ++LODWORD(v63[0]);
      if ((void)__src)
      {
        __int16 v60 = 261;
        uint64_t OperandRange = (const void **)AttrData;
        uint64_t v58 = v54;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &OperandRange);
        if ((void)__src) {
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((void)__src) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    }
    if (!v68) {
      goto LABEL_63;
    }
    long long v33 = (void **)__p;
    if (__p)
    {
      unint64_t v34 = v67;
      int64_t v35 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      uint64_t v67 = v33;
      operator delete(v35);
    }
    uint64_t v18 = v64[1];
    if (!v64[1]) {
      goto LABEL_61;
    }
    uint64_t v36 = (void *)v65;
    uint64_t v20 = v64[1];
    if ((void *)v65 == v64[1]) {
      goto LABEL_60;
    }
    do
    {
      unsigned int v38 = (void *)*--v36;
      int64_t v37 = v38;
      *uint64_t v36 = 0;
      if (v38) {
        operator delete[](v37);
      }
    }
    while (v36 != v18);
    goto LABEL_59;
  }
LABEL_3:
  uint64_t v6 = v69;
  if (v69 != v71) {
LABEL_4:
  }
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v75, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v74, 1)) {
    return 0;
  }
  uint64_t v69 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v8 = a2[1];
  *(void *)&long long __src = a1;
  *((void *)&__src + 1) = &v69;
  v62[0] = a2;
  if (!mlir::arith::CmpIOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpIOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    return 0;
  *(void *)&long long __src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &__src)) {
    return 0;
  }
  uint64_t v73 = __src;
  v51[0] = __src;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)v51)) {
    goto LABEL_14;
  }
  uint64_t v41 = v51[0];
  uint64_t v42 = *(void *)v51[0];
  unint64_t v43 = *(void **)(*(void *)v51[0] + 136);
  if (v43 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8);
    *(void *)&long long __src = v41;
    *((void *)&__src + 1) = v44;
    uint64_t OperandRange = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      goto LABEL_14;
    }
    uint64_t v41 = v51[0];
    uint64_t v42 = *(void *)v51[0];
    unint64_t v43 = *(void **)(*(void *)v51[0] + 136);
  }
  if (v43 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v43 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8),
        uint64_t v69 = (_WORD *)v41,
        uint64_t v70 = v45,
        uint64_t OperandRange = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
        !mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)))
  {
    uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v71[8] = 257;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, _WORD **))(*(void *)a1 + 24))(&__src, a1, v46, &v69);
    uint64_t v47 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be signless-integer-like, but got ");
    uint64_t v48 = mlir::InFlightDiagnostic::append<mlir::Type &>(v47, v51);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v48);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
    return v10;
  }
LABEL_14:
  *(void *)&long long __src = getI1SameShape(*(void **)v55[0]);
  mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
  uint64_t v9 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v56, v55, v7, v9))return 0; {
  return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v74, *(void *)v55[0], v9) != 0;
  }
}

uint64_t mlir::arith::symbolizeCmpIPredicate(unsigned __int16 *a1, uint64_t a2)
{
  if (a2 == 3)
  {
    if (*a1 == 27763 && *((unsigned char *)a1 + 2) == 116)
    {
      return 2;
    }
    else if (*a1 == 27763 && *((unsigned char *)a1 + 2) == 101)
    {
      return 3;
    }
    else if (*a1 == 26483 && *((unsigned char *)a1 + 2) == 116)
    {
      return 4;
    }
    else if (*a1 == 26483 && *((unsigned char *)a1 + 2) == 101)
    {
      return 5;
    }
    else if (*a1 == 27765 && *((unsigned char *)a1 + 2) == 116)
    {
      return 6;
    }
    else if (*a1 == 27765 && *((unsigned char *)a1 + 2) == 101)
    {
      return 7;
    }
    else if (*a1 == 26485 && *((unsigned char *)a1 + 2) == 116)
    {
      return 8;
    }
    else if (*a1 ^ 0x6775 | *((unsigned __int8 *)a1 + 2) ^ 0x65)
    {
      return 0;
    }
    else
    {
      return 9;
    }
  }
  else
  {
    if (a2 != 2) {
      return 0;
    }
    return *a1 != 29029 && *a1 == 25966;
  }
}

void mlir::arith::CmpIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  int64_t v30 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  char v6 = 0;
  uint64_t v7 = "eq";
  size_t v8 = 2;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      char v6 = 0;
      uint64_t v7 = "ne";
      size_t v8 = 2;
      break;
    case 2:
      char v6 = 0;
      uint64_t v7 = "slt";
      goto LABEL_15;
    case 3:
      char v6 = 0;
      uint64_t v7 = "sle";
      goto LABEL_15;
    case 4:
      char v6 = 0;
      uint64_t v7 = "sgt";
      goto LABEL_15;
    case 5:
      char v6 = 0;
      uint64_t v7 = "sge";
      goto LABEL_15;
    case 6:
      char v6 = 0;
      uint64_t v7 = "ult";
      goto LABEL_15;
    case 7:
      char v6 = 0;
      uint64_t v7 = "ule";
      goto LABEL_15;
    case 8:
      char v6 = 0;
      uint64_t v7 = "ugt";
      goto LABEL_15;
    case 9:
      char v6 = 0;
      uint64_t v7 = "uge";
LABEL_15:
      size_t v8 = 3;
      break;
    default:
      size_t v8 = 0;
      uint64_t v7 = "";
      char v6 = 1;
      break;
  }
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (v8 <= *((void *)v9 + 3) - (void)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((void *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  unsigned int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *uint64_t v12 = 44;
    ++*((void *)v11 + 4);
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *unsigned __int16 v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *uint64_t v16 = 44;
    ++*((void *)v15 + 4);
  }
  unint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  int64_t v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  uint64_t v31 = 0x200000001;
  long long v19 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v22, v30, v31);
  uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *char v24 = 32;
  }
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *uint64_t v26 = 58;
    ++*((void *)v25 + 4);
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.constant", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::ConstantOp::setPropertiesFromAttr(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected DictionaryAttr to set properties";
      uint64_t v59 = 41;
      uint64_t v12 = &v57;
      uint64_t v13 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v52 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v13 = (char *)v61;
          uint64_t v12 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v12 = &v57;
          uint64_t v13 = (char *)v61;
        }
      }
      unsigned __int16 v14 = &v13[24 * v62];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unsigned __int16 v14 = v15;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      unint64_t v17 = v68;
      uint64_t v18 = __p;
      if (v68 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      char v68 = v16;
      operator delete(v18);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v20 = v66;
    long long v21 = v65;
    if (v66 == v65) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v23 = (void *)*--v20;
      uint64_t v22 = v23;
      *uint64_t v20 = 0;
      if (v23) {
        operator delete[](v22);
      }
    }
    while (v20 != v19);
    goto LABEL_58;
  }
  long long v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "value", 5uLL);
  if (!v8)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected key entry for value in DictionaryAttr to set Properties.";
      uint64_t v59 = 65;
      char v24 = &v57;
      uint64_t v25 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v49 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v53 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          uint64_t v25 = (char *)v61;
          char v24 = (int *)((char *)v61 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          char v24 = &v57;
          uint64_t v25 = (char *)v61;
        }
      }
      uint64_t v26 = &v25[24 * v62];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = *((void *)v24 + 2);
      *(_OWORD *)uint64_t v26 = v27;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      long long v29 = v68;
      int64_t v30 = __p;
      if (v68 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        int64_t v30 = __p;
      }
      char v68 = v28;
      operator delete(v30);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v31 = v66;
    long long v21 = v65;
    if (v66 == v65) {
      goto LABEL_59;
    }
    do
    {
      long long v33 = (void *)*--v31;
      long long v32 = v33;
      *uint64_t v31 = 0;
      if (v33) {
        operator delete[](v32);
      }
    }
    while (v31 != v19);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v8 + 8))
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
    *a1 = v9;
    a1[1] = v10;
    return 1;
  }
  a3(v60, a4);
  if (v60[0])
  {
    int v57 = 3;
    uint64_t v59 = 50;
    unint64_t v34 = &v57;
    int64_t v35 = (char *)v61;
    if (v62 >= v63)
    {
      unint64_t v50 = v62 + 1;
      if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
      {
        int64_t v54 = (char *)&v57 - (unsigned char *)v61;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        int64_t v35 = (char *)v61;
        unint64_t v34 = (int *)((char *)v61 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        unint64_t v34 = &v57;
        int64_t v35 = (char *)v61;
      }
    }
    uint64_t v36 = &v35[24 * v62];
    long long v37 = *(_OWORD *)v34;
    *((void *)v36 + 2) = *((void *)v34 + 2);
    *(_OWORD *)uint64_t v36 = v37;
    ++v62;
    if (v60[0])
    {
      unsigned int v38 = &v57;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, (uint64_t)v9);
      uint64_t v39 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v51 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v55 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          uint64_t v39 = (char *)v61;
          unsigned int v38 = (int *)((char *)v61 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          unsigned int v38 = &v57;
          uint64_t v39 = (char *)v61;
        }
      }
      long long v40 = &v39[24 * v62];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)long long v40 = v41;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
  }
  if (v69)
  {
    uint64_t v42 = (void **)__p;
    if (__p)
    {
      unint64_t v43 = v68;
      uint64_t v44 = __p;
      if (v68 != __p)
      {
        do
          unint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = __p;
      }
      char v68 = v42;
      operator delete(v44);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v45 = v66;
    long long v21 = v65;
    if (v66 == v65)
    {
LABEL_59:
      unint64_t v66 = v19;
      operator delete(v21);
LABEL_60:
      if (v61 != v64) {
        free(v61);
      }
      return 0;
    }
    do
    {
      uint64_t v47 = (void *)*--v45;
      uint64_t v46 = v47;
      void *v45 = 0;
      if (v47) {
        operator delete[](v46);
      }
    }
    while (v45 != v19);
LABEL_58:
    long long v21 = v65;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"value", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::ConstantOp::getInherentAttr(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v4 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v4 = 0), v4)) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::arith::ConstantOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(unsigned char *)(a2 + 4) == 101)
  {
    unsigned int v5 = a4;
    uint64_t v6 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a4 + 8);
      if (result) {
        uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
      }
      else {
        unsigned int v5 = 0;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    *uint64_t v6 = v5;
    v6[1] = result;
  }
  return result;
}

void mlir::arith::ConstantOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, *a2);
  }
}

BOOL mlir::arith::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v6, (const void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(void *a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1 || mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a1 + 8)) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    long long v32 = "attribute '";
    uint64_t v33 = 11;
    unsigned int v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        unsigned int v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unsigned int v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    uint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      long long v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        long long v32 = "' failed to satisfy constraint: TypedAttr instance";
        uint64_t v33 = 50;
        long long v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            long long v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        unint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)unint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v44;
      long long v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        long long v21 = __p;
      }
      uint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      uint64_t v23 = v42;
      char v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        char v24 = v41;
      }
      uint64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::ConstantOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    *uint64_t v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 111;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        BOOL v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[348];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  BOOL v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v39 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4) {
      return 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    BOOL v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        BOOL v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        BOOL v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  long long v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
  unint64_t v41 = 65;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      unint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          unint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        long long v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v21 = (char *)v46;
            uint64_t v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            long long v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    char v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          int64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      unint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

void mlir::arith::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
  void *v7 = a3;
  v7[1] = a4;
  long long __src = v27;
  uint64_t v26 = 0x200000000;
  mlir::ValueRange::ValueRange(&v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v10 = *(long long **)(a2 + 256);
  long long v11 = mlir::ValueRange::ValueRange(&v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::arith::ConstantOp::inferReturnTypes((uint64_t)v11, v12, v13, v14, v15, Dictionary, v10, v16, v21, v22, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::arith::ConstantOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = a6;
  int v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v13 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  if (a7)
  {
    long long v17 = *a7;
    if ((void)v17)
    {
LABEL_10:
      **(void **)a11 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v17);
      return 1;
    }
  }
  else
  {
    uint64_t v15 = (void *)mlir::DictionaryAttr::get((uint64_t)&v18, "value", 5uLL);
    uint64_t v16 = v15;
    if (v15)
    {
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v15 + 8))
      {
        long long v17 = 0uLL;
        return 0;
      }
      uint64_t v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    }
    *(void *)&long long v17 = v16;
    *((void *)&v17 + 1) = v15;
    if (v16) {
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v32[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v3, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v32))return 0; {
    if (*((_DWORD *)*this + 9))
    }
      uint64_t v4 = (uint64_t)(*this - 2);
    else {
      uint64_t v4 = 0;
    }
    mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    uint64_t v5 = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (v5) {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    v32[0] = v5;
    v32[1] = v6;
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v32);
    if (*((_DWORD *)*this + 9)) {
      uint64_t v17 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v17 = 0;
    }
    if (canMapOperands == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v18 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      if (v20)
      {
        uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)*v20 + 8);
        int64_t v29 = v20;
        uint64_t v30 = v21;
        if (v19 != mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29)) {
          goto LABEL_33;
        }
        return 1;
      }
      int64_t v29 = 0;
      uint64_t v30 = 0;
      if (v19 == mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29)) {
        return 1;
      }
    }
LABEL_33:
    int64_t v29 = (const void **)"failed to verify that all of {value, result} have same type";
    __int16 v31 = 259;
    mlir::OpState::emitOpError(this, &v29, (uint64_t)v32);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    }
    if (v39)
    {
      uint64_t v22 = (void **)__p;
      if (__p)
      {
        unint64_t v23 = v38;
        unint64_t v24 = __p;
        if (v38 != __p)
        {
          do
            unint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          unint64_t v24 = __p;
        }
        unsigned int v38 = v22;
        operator delete(v24);
      }
      long long v11 = v35;
      if (!v35) {
        goto LABEL_49;
      }
      uint64_t v25 = v36;
      unsigned int v13 = v35;
      if (v36 == v35)
      {
LABEL_48:
        int64_t v36 = v11;
        operator delete(v13);
LABEL_49:
        if (v33 != &v34) {
          free(v33);
        }
        return v7;
      }
      do
      {
        unint64_t v27 = (void *)*--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          operator delete[](v26);
        }
      }
      while (v25 != v11);
LABEL_47:
      unsigned int v13 = v35;
      goto LABEL_48;
    }
    return v7;
  }
  int64_t v29 = (const void **)"requires attribute 'value'";
  __int16 v31 = 259;
  mlir::OpState::emitOpError(this, &v29, (uint64_t)v32);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
  if (v32[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
  }
  if (v39)
  {
    BOOL v8 = (void **)__p;
    if (__p)
    {
      unint64_t v9 = v38;
      uint64_t v10 = __p;
      if (v38 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      unsigned int v38 = v8;
      operator delete(v10);
    }
    long long v11 = v35;
    if (!v35) {
      goto LABEL_49;
    }
    int v12 = v36;
    unsigned int v13 = v35;
    if (v36 == v35) {
      goto LABEL_48;
    }
    do
    {
      uint64_t v15 = (void *)*--v12;
      uint64_t v14 = v15;
      *int v12 = 0;
      if (v15) {
        operator delete[](v14);
      }
    }
    while (v12 != v11);
    goto LABEL_47;
  }
  return v7;
}

uint64_t mlir::arith::ConstantOp::parse(uint64_t a1, uint64_t a2)
{
  long long v12 = 0uLL;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  v10[2] = a2;
  uint64_t v5 = (void *)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v5, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0; {
  }
    }
  if (!mlir::AsmParser::parseAttribute<mlir::TypedAttr>(a1, &v12, 0)) {
    return 0;
  }
  if ((void)v12)
  {
    uint64_t v6 = (_OWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2);
    *uint64_t v6 = v12;
  }
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v12);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = canMapOperands;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::arith::ConstantOp::print(mlir::arith::ConstantOp *this, mlir::OpAsmPrinter *a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  long long v12 = v14;
  v14[0] = "value";
  v14[1] = 5;
  uint64_t v13 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v12, v13);
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
    uint64_t v10 = *(void **)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *((void *)v8 + 4) = v9 + 1;
  *unint64_t v9 = 32;
  uint64_t v10 = *(void **)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  if (v10) {
LABEL_8:
  }
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
LABEL_9:
  (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v10);
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t mlir::arith::detail::DivFOpGenericAdaptorBase::DivFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::DivFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[350];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::DivFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::DivFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::DivSIOpGenericAdaptorBase::DivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::DivUIOpGenericAdaptorBase::DivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ExtFOpGenericAdaptorBase::ExtFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtFOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::ExtFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtSIOpGenericAdaptorBase::ExtSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtSIOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = (const void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v55)) {
    return 1;
  }
  uint64_t v11 = v55;
  __int16 v12 = *v55;
  uint64_t v13 = (void *)*((void *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v11 = v55;
    __int16 v12 = *v55;
    uint64_t v13 = (void *)*((void *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    int64_t v52 = v11;
    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v54 = 261;
  int64_t v52 = a3;
  uint64_t v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    int v57 = " #";
    uint64_t v58 = 2;
    p_uint64_t OperandRange = &OperandRange;
    uint64_t v17 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        int64_t v48 = (char *)&OperandRange - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        uint64_t v17 = (char *)v60;
        p_uint64_t OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v17 = (char *)v60;
      }
    }
    uint64_t v18 = &v17[24 * v61];
    long long v19 = *(_OWORD *)p_OperandRange;
    *((void *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      int v57 = (const char *)a5;
      uint64_t v21 = &OperandRange;
      uint64_t v22 = (char *)v60;
      if (v20 >= v62)
      {
        unint64_t v43 = v20 + 1;
        BOOL v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v22 = (char *)v60;
          uint64_t v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v21 = &OperandRange;
          uint64_t v22 = (char *)v60;
        }
      }
      unint64_t v23 = &v22[24 * v61];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = v21[2];
      *(_OWORD *)unint64_t v23 = v24;
      uint64_t v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        int v57 = " must be signless-fixed-width-integer-like, but got ";
        uint64_t v58 = 52;
        uint64_t v26 = &OperandRange;
        unint64_t v27 = (char *)v60;
        if (v25 >= v62)
        {
          unint64_t v45 = v25 + 1;
          BOOL v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            unint64_t v27 = (char *)v60;
            uint64_t v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            uint64_t v26 = &OperandRange;
            unint64_t v27 = (char *)v60;
          }
        }
        unint64_t v28 = &v27[24 * v61];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)unint64_t v28 = v29;
        ++v61;
        if (v59[0])
        {
          uint64_t v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          __int16 v31 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              __int16 v31 = (char *)v60;
              uint64_t v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              uint64_t v30 = &OperandRange;
              __int16 v31 = (char *)v60;
            }
          }
          unint64_t v32 = &v31[24 * v61];
          long long v33 = *(_OWORD *)v30;
          *((void *)v32 + 2) = v30[2];
          *(_OWORD *)unint64_t v32 = v33;
          ++v61;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  }
  if (v68)
  {
    uint64_t v34 = (void **)__p;
    if (__p)
    {
      int64_t v35 = v67;
      int64_t v36 = __p;
      if (v67 != __p)
      {
        do
          int64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        int64_t v36 = __p;
      }
      uint64_t v67 = v34;
      operator delete(v36);
    }
    int64_t v37 = v64;
    if (v64)
    {
      unsigned int v38 = v65;
      char v39 = v64;
      if (v65 != v64)
      {
        do
        {
          unint64_t v41 = (void *)*--v38;
          uint64_t v40 = v41;
          *unsigned int v38 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v38 != v37);
        char v39 = v64;
      }
      long long v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  return v9;
}

BOOL mlir::arith::ExtSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtUIOpGenericAdaptorBase::ExtUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToSIOpGenericAdaptorBase::FPToSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.fptosi", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToSIOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::FPToSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToUIOpGenericAdaptorBase::FPToUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.fptoui", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FloorDivSIOpGenericAdaptorBase::FloorDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.floordivsi", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FloorDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::IndexCastOpGenericAdaptorBase::IndexCastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.index_cast", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(uint64_t *a1, uint64_t a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v58 = (const void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v58)) {
    return 1;
  }
  uint64_t v11 = v58;
  if (*((_UNKNOWN **)*v58 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v57 = (uint64_t)v58;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
    uint64_t v11 = v58;
    if (v41 >= 1)
    {
      if (v58) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v58 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v63[0] = v11;
      v63[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v11 = v58;
    }
  }
  __int16 v12 = *v11;
  uint64_t v13 = (void *)*((void *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    __int16 v54 = v11;
    uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v54);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v11 = v58;
    __int16 v12 = *v58;
    uint64_t v13 = (void *)*((void *)*v58 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    uint64_t v43 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    __int16 v60 = v11;
    uint64_t v61 = v43;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v60);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)
      || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      return 1;
    }
  }
  __int16 v56 = 261;
  __int16 v54 = a3;
  uint64_t v55 = a4;
  mlir::Operation::emitOpError(a1, &v54, (uint64_t)v63);
  if (v63[0])
  {
    LODWORD(v60) = 3;
    uint64_t v61 = (uint64_t)" #";
    uint64_t v62 = 2;
    uint64_t v15 = &v60;
    uint64_t v16 = (char *)v64;
    if (v65 >= v66)
    {
      unint64_t v44 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        int64_t v50 = (char *)&v60 - (unsigned char *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        uint64_t v16 = (char *)v64;
        uint64_t v15 = (const void ***)((char *)v64 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        uint64_t v15 = &v60;
        uint64_t v16 = (char *)v64;
      }
    }
    uint64_t v17 = &v16[24 * v65];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v65;
    if (v63[0])
    {
      LODWORD(v60) = 5;
      uint64_t v61 = a5;
      uint64_t v20 = &v60;
      uint64_t v21 = (char *)v64;
      if (v19 >= v66)
      {
        unint64_t v45 = v19 + 1;
        BOOL v46 = (char *)v64 + 24 * v19 > (char *)&v60;
        if (v64 <= &v60 && v46)
        {
          int64_t v51 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          uint64_t v21 = (char *)v64;
          uint64_t v20 = (const void ***)((char *)v64 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          uint64_t v20 = &v60;
          uint64_t v21 = (char *)v64;
        }
      }
      uint64_t v22 = &v21[24 * v65];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)uint64_t v22 = v23;
      uint64_t v24 = ++v65;
      if (v63[0])
      {
        LODWORD(v60) = 3;
        uint64_t v61 = (uint64_t)" must be signless-integer-like or memref of signless-integer, but got ";
        uint64_t v62 = 70;
        uint64_t v25 = &v60;
        uint64_t v26 = (char *)v64;
        if (v24 >= v66)
        {
          unint64_t v47 = v24 + 1;
          BOOL v48 = (char *)v64 + 24 * v24 > (char *)&v60;
          if (v64 <= &v60 && v48)
          {
            int64_t v52 = (char *)&v60 - (unsigned char *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v26 = (char *)v64;
            uint64_t v25 = (const void ***)((char *)v64 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v25 = &v60;
            uint64_t v26 = (char *)v64;
          }
        }
        unint64_t v27 = &v26[24 * v65];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)unint64_t v27 = v28;
        ++v65;
        if (v63[0])
        {
          long long v29 = &v60;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, (uint64_t)v58);
          uint64_t v30 = (char *)v64;
          if (v65 >= v66)
          {
            unint64_t v49 = v65 + 1;
            if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
            {
              int64_t v53 = (char *)&v60 - (unsigned char *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              uint64_t v30 = (char *)v64;
              long long v29 = (const void ***)((char *)v64 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              long long v29 = &v60;
              uint64_t v30 = (char *)v64;
            }
          }
          __int16 v31 = &v30[24 * v65];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)__int16 v31 = v32;
          ++v65;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
  if (v63[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
  }
  if (v72)
  {
    long long v33 = (void **)__p;
    if (__p)
    {
      uint64_t v34 = v71;
      int64_t v35 = __p;
      if (v71 != __p)
      {
        do
          uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      long long v71 = v33;
      operator delete(v35);
    }
    int64_t v36 = v68;
    if (v68)
    {
      int64_t v37 = v69;
      unsigned int v38 = v68;
      if (v69 != v68)
      {
        do
        {
          uint64_t v40 = (void *)*--v37;
          char v39 = v40;
          *int64_t v37 = 0;
          if (v40) {
            operator delete[](v39);
          }
        }
        while (v37 != v36);
        unsigned int v38 = v68;
      }
      uint64_t v69 = v36;
      operator delete(v38);
    }
    if (v64 != v67) {
      free(v64);
    }
  }
  return v9;
}

BOOL mlir::arith::IndexCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::IndexCastUIOpGenericAdaptorBase::IndexCastUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.index_castui", 18, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::MaxNumFOpGenericAdaptorBase::MaxNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxnumf", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxNumFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[352];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MaxNumFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaxNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MaxSIOpGenericAdaptorBase::MaxSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaxUIOpGenericAdaptorBase::MaxUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaximumFOpGenericAdaptorBase::MaximumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maximumf", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaximumFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 111;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[354];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MaximumFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaximumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinNumFOpGenericAdaptorBase::MinNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minnumf", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinNumFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[356];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MinNumFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinSIOpGenericAdaptorBase::MinSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinUIOpGenericAdaptorBase::MinUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinimumFOpGenericAdaptorBase::MinimumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minimumf", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinimumFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 111;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[358];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MinimumFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinimumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulFOpGenericAdaptorBase::MulFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mulf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::MulFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[360];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::MulFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MulFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulIOpGenericAdaptorBase::MulIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.muli", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MulSIExtendedOpGenericAdaptorBase::MulSIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mulsi_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::MulSIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v5 = *(void *)a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "low", 3);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v7 = *(void *)a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);

  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "high", 4);
}

void mlir::arith::MulSIExtendedOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  uint64_t __src = v19;
  uint64_t v18 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v16, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v15, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v20 = v16;
  unsigned int v6 = v18;
  if (v18 != 2)
  {
    if (v18 <= 2)
    {
      if (HIDWORD(v18) > 1
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v19, 2uLL, 8), unsigned int v6 = v18, v18 != 2))
      {
        bzero((char *)__src + 8 * v6, 16 - 8 * v6);
      }
    }
    LODWORD(v18) = 2;
  }
  unint64_t v7 = *(void *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t __src = v7;
  uint64_t v9 = __src;
  *((void *)__src + 1) = v8;
  uint64_t v10 = v18;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  unint64_t v12 = v11 + v18;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v19) {
    free(__src);
  }
}

uint64_t mlir::arith::MulSIExtendedOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  unint64_t v15[2] = *MEMORY[0x1E4F143B8];
  v15[0] = a4;
  v15[1] = a5;
  unsigned int v11 = a11[2];
  if (v11 != 2)
  {
    if (v11 <= 2)
    {
      if (a11[3] > 1u
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, 2uLL, 8), unsigned int v11 = a11[2], v11 != 2))
      {
        bzero((void *)(*(void *)a11 + 8 * v11), 16 - 8 * v11);
      }
    }
    a11[2] = 2;
  }
  unint64_t v12 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(void **)a11 = v12;
  *(void *)(*(void *)a11 + 8) = v13;
  return 1;
}

uint64_t mlir::arith::MulSIExtendedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 0))return 0; {
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*this, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", 6, 1u))return 0; {
  unint64_t v7 = *this;
  }
  uint64_t v8 = (*this)[9];
  unint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != (*(void *)(*(void *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_27;
  }
  int v10 = *((_DWORD *)v7 + 9);
  unsigned int v11 = v7 - 2;
  uint64_t v12 = v10 ? (uint64_t)v11 : 0;
  if (v9 != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
    || (*((_DWORD *)*this + 9) ? (uint64_t v13 = (uint64_t)(*this - 2)) : (uint64_t v13 = 0),
        (unint64_t v14 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8,
         *((_DWORD *)*this + 9))
      ? (uint64_t v15 = (uint64_t)(*this - 2))
      : (uint64_t v15 = 0),
        (uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 1),
         v14 != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
     || (*((_DWORD *)*this + 9) ? (uint64_t v17 = (uint64_t)(*this - 2)) : (uint64_t v17 = 0),
         uint64_t v18 = 1,
         uint64_t v19 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 1),
         (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
LABEL_27:
    long long v29 = (const void **)"failed to verify that all of {lhs, rhs, low, high} have same type";
    __int16 v30 = 259;
    mlir::OpState::emitOpError(this, &v29, (uint64_t)v31);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
    if (v31[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
    }
    if (v38)
    {
      long long v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v37;
        uint64_t v22 = __p;
        if (v37 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        int64_t v37 = v20;
        operator delete(v22);
      }
      long long v23 = v34;
      if (v34)
      {
        uint64_t v24 = v35;
        uint64_t v25 = v34;
        if (v35 != v34)
        {
          do
          {
            unint64_t v27 = (void *)*--v24;
            uint64_t v26 = v27;
            *uint64_t v24 = 0;
            if (v27) {
              operator delete[](v26);
            }
          }
          while (v24 != v23);
          uint64_t v25 = v34;
        }
        int64_t v35 = v23;
        operator delete(v25);
      }
      if (v32 != &v33) {
        free(v32);
      }
    }
  }
  return v18;
}

BOOL mlir::arith::MulSIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  uint64_t __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v11, *(void *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::MulSIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *unint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  int v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v21, v22);
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    unsigned char *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t mlir::arith::detail::MulUIExtendedOpGenericAdaptorBase::MulUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mului_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  uint64_t __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v11, *(void *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::NegFOpGenericAdaptorBase::NegFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.negf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::NegFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::NegFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[362];
    return a1[32];
  }
  return result;
}

void mlir::arith::NegFOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v11 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  uint64_t v9 = mlir::arith::FastMathFlagsAttr::get(*a1, a5);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>((void *)a2) = v9;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::NegFOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::NegFOp::parse(uint64_t a1, uint64_t a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  uint64_t v12 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v12, 0))return 0; {
  if (v12)
  }
  {
    uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>((void *)a2);
    void *v4 = v12;
  }
LABEL_6:
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  v10[2] = a2;
  uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
  if (v6)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::NegFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v10[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, v10)) {
    return 0;
  }
  uint64_t v7 = v10[0];
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, v7, a2 + 16) != 0;
}

void mlir::arith::NegFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v33[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v9 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        *uint64_t v9 = 32;
      }
      uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v11 = (void *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v11 > 7uLL)
      {
        *uint64_t v11 = 0x6874616D74736166;
        *((void *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      __int16 v31 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        uint64_t v12 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v31, a2);
        if (v13 == (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v31);
        }
      }
    }
  }
  __int16 v31 = v33;
  v33[0] = "fastmath";
  v33[1] = 8;
  uint64_t v32 = 0x200000001;
  unint64_t v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v15 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    unsigned int v18 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v18 = v32;
    }
    uint64_t v19 = (char *)v31 + 16 * v18;
    void *v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v32) = v32 + 1;
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_18:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v31, v32);
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *long long v23 = 32;
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if (*((unsigned char **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    unsigned char *v25 = 58;
    ++*((void *)v24 + 4);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *unint64_t v27 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v28 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v31 != v33) {
    free(v31);
  }
}

uint64_t mlir::arith::detail::OrIOpGenericAdaptorBase::OrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ori", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::OrIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemFOpGenericAdaptorBase::RemFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::RemFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[364];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::RemFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::RemFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::RemSIOpGenericAdaptorBase::RemSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemUIOpGenericAdaptorBase::RemUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SIToFPOpGenericAdaptorBase::SIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.sitofp", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SIToFPOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::SIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ShLIOpGenericAdaptorBase::ShLIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shli", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShLIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRSIOpGenericAdaptorBase::ShRSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shrsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRUIOpGenericAdaptorBase::ShRUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shrui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SubFOpGenericAdaptorBase::SubFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.subf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubFOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::detail::SubFOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[366];
    return a1[32];
  }
  return result;
}

BOOL mlir::arith::SubFOp::parse(uint64_t a1, void *a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
      void *v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::SubFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::SubIOpGenericAdaptorBase::SubIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.subi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::TruncFOpGenericAdaptorBase::TruncFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.truncf", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::TruncIOpGenericAdaptorBase::TruncIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.trunci", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::UIToFPOpGenericAdaptorBase::UIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.uitofp", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::UIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::XOrIOpGenericAdaptorBase::XOrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.xori", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::XOrIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.select", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::SelectOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  uint64_t __src = v20;
  uint64_t v19 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v17, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v16, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v21 = v17;
  if (v19 != 1)
  {
    if (!v19)
    {
      if (HIDWORD(v19))
      {
        unsigned int v7 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v7, 8 - 8 * v7);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v20, 1uLL, 8);
      unsigned int v7 = v19;
      if (v19 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v19) = 1;
  }
  uint64_t v8 = mlir::ValueRange::dereference_iterator(&v21, 2);
  *(void *)uint64_t __src = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = __src;
  uint64_t v10 = v19;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  unint64_t v12 = v11 + v19;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v20) {
    free(__src);
  }
}

uint64_t mlir::arith::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::arith::SelectOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", 7, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v2 = (uint64_t)(*this - 2);
  else {
    uint64_t v2 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  uint64_t v3 = *this;
  uint64_t v4 = (*this)[9];
  unint64_t v5 = *(void *)(*(void *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == (*(void *)(*(void *)(v4 + 88) + 8) & 0xFFFFFFFFFFFFFFF8)
    && ((int v6 = *((_DWORD *)v3 + 9), v7 = v3 - 2, v6) ? (v8 = (uint64_t)v7) : (v8 = 0),
        v5 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
     && (*((_DWORD *)*this + 9) ? (uint64_t v9 = (uint64_t)(*this - 2)) : (uint64_t v9 = 0),
         uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0),
         uint64_t v11 = (*this)[9],
         (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v11 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
    unint64_t v50 = *(void *)(*(void *)(v11 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isSignlessInteger((mlir::Type *)&v50, 1)) {
      return 1;
    }
    long long v21 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8) : 0;
    v53[0] = v21;
    v53[1] = v22;
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v53);
    uint64_t v25 = v24;
    uint64_t v26 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    unint64_t v27 = (const void **)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = v27 ? (const void **)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v27 + 8) : 0;
    v51[0] = v27;
    v51[1] = v28;
    long long v29 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    if (v25 == v30 && !memcmp(ArgAttrsAttr, v29, 8 * v25))
    {
      uint64_t v31 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      uint64_t v32 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8) : 0;
      v49[0] = v32;
      v49[1] = v33;
      uint64_t v34 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
      uint64_t v36 = v35;
      int64_t v37 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = v37 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8) : 0;
      v48[0] = v37;
      v48[1] = v38;
      uint64_t v39 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
      if (v36 == v40 && !memcmp(v34, v39, 8 * v36)) {
        return 1;
      }
    }
    v51[0] = (const void **)"failed to verify that condition is scalar or has matching shape";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v60)
    {
      uint64_t v41 = (void **)__p;
      if (__p)
      {
        uint64_t v42 = v59;
        uint64_t v43 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          uint64_t v43 = __p;
        }
        uint64_t v59 = v41;
        operator delete(v43);
      }
      unint64_t v16 = v56;
      if (!v56) {
        goto LABEL_69;
      }
      unint64_t v44 = v57;
      unsigned int v18 = v56;
      if (v57 == v56) {
        goto LABEL_68;
      }
      do
      {
        BOOL v46 = (void *)*--v44;
        unint64_t v45 = v46;
        *unint64_t v44 = 0;
        if (v46) {
          operator delete[](v45);
        }
      }
      while (v44 != v16);
      goto LABEL_67;
    }
  }
  else
  {
    v51[0] = (const void **)"failed to verify that all of {true_value, false_value, result} have same type";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v60)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        uint64_t v14 = v59;
        uint64_t v15 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v59 = v13;
        operator delete(v15);
      }
      unint64_t v16 = v56;
      if (!v56) {
        goto LABEL_69;
      }
      long long v17 = v57;
      unsigned int v18 = v56;
      if (v57 == v56)
      {
LABEL_68:
        uint64_t v57 = v16;
        operator delete(v18);
LABEL_69:
        if (v54 != &v55) {
          free(v54);
        }
        return v12;
      }
      do
      {
        long long v20 = (void *)*--v17;
        uint64_t v19 = v20;
        *long long v17 = 0;
        if (v20) {
          operator delete[](v19);
        }
      }
      while (v17 != v16);
LABEL_67:
      unsigned int v18 = v56;
      goto LABEL_68;
    }
  }
  return v12;
}

uint64_t mlir::arith::CmpFPredicateAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v19 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v18 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v18))
    {
      uint64_t v17 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17);
      if (result == 1) {
        return result;
      }
      uint64_t v16 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16) != 2)
      {
        uint64_t v15 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 3)
        {
          uint64_t v14 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 4)
          {
            uint64_t v13 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 5)
            {
              uint64_t v12 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 6)
              {
                uint64_t v11 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 7)
                {
                  uint64_t v10 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 8)
                  {
                    uint64_t v9 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 9)
                    {
                      uint64_t v8 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 10)
                      {
                        uint64_t v7 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 11)
                        {
                          uint64_t v6 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 12)
                          {
                            uint64_t v5 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 13)
                            {
                              uint64_t v4 = a1;
                              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 14)
                              {
                                uint64_t v3 = a1;
                                return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 15;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::arith::CmpIPredicateAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v13 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v12 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12))
    {
      uint64_t v11 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11);
      if (result == 1) {
        return result;
      }
      uint64_t v10 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 2)
      {
        uint64_t v9 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 3)
        {
          uint64_t v8 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 4)
          {
            uint64_t v7 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 5)
            {
              uint64_t v6 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 6)
              {
                uint64_t v5 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 7)
                {
                  uint64_t v4 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 8)
                  {
                    uint64_t v3 = a1;
                    return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 9;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

const char *mlir::arith::stringifyAtomicRMWKind(unint64_t a1)
{
  if (a1 > 0xE) {
    return "";
  }
  else {
    return (&off_1E4FBF5A0)[a1];
  }
}

uint64_t mlir::arith::symbolizeAtomicRMWKind(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 29295 || *(unsigned char *)(a1 + 2) != 105) {
        goto LABEL_33;
      }
      uint64_t result = 11;
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x66646461:
          uint64_t result = 0;
          break;
        case 0x69646461:
          uint64_t result = 1;
          break;
        case 0x7378616D:
          uint64_t result = 4;
          break;
        case 0x7578616D:
          uint64_t result = 5;
          break;
        case 0x736E696D:
          uint64_t result = 7;
          break;
        case 0x756E696D:
          uint64_t result = 8;
          break;
        case 0x666C756D:
          uint64_t result = 9;
          break;
        case 0x696C756D:
          uint64_t result = 10;
          break;
        case 0x69646E61:
          uint64_t result = 12;
          break;
        default:
          goto LABEL_33;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 != 1769173857 || *(_WORD *)(a1 + 4) != 28263) {
        goto LABEL_33;
      }
      uint64_t result = 2;
      break;
    case 7:
      if (*(_DWORD *)a1 == 1853383021 && *(_DWORD *)(a1 + 3) == 1718449518)
      {
        uint64_t result = 13;
      }
      else if (*(_DWORD *)a1 ^ 0x6E6E696D | *(_DWORD *)(a1 + 3) ^ 0x666D756E)
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 14;
      }
      break;
    case 8:
      if (*(void *)a1 == 0x666D756D6978616DLL)
      {
        uint64_t result = 3;
      }
      else
      {
        if (*(void *)a1 != 0x666D756D696E696DLL) {
          goto LABEL_33;
        }
        uint64_t result = 6;
      }
      break;
    default:
LABEL_33:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t mlir::arith::symbolizeAtomicRMWKind(unint64_t this)
{
  if (this >= 0xF) {
    return 0;
  }
  return this;
}

uint64_t mlir::arith::AtomicRMWKindAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v18 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v17 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17))
    {
      uint64_t v16 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16);
      if (result == 1) {
        return result;
      }
      uint64_t v15 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 2)
      {
        uint64_t v14 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 3)
        {
          uint64_t v13 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 4)
          {
            uint64_t v12 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 5)
            {
              uint64_t v11 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 6)
              {
                uint64_t v10 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 7)
                {
                  uint64_t v9 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 8)
                  {
                    uint64_t v8 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 9)
                    {
                      uint64_t v7 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 10)
                      {
                        uint64_t v6 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 11)
                        {
                          uint64_t v5 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 12)
                          {
                            uint64_t v4 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 13)
                            {
                              uint64_t v3 = a1;
                              return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

void mlir::arith::stringifyFastMathFlags(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *(unsigned char *)(a2 + 23) = 4;
    strcpy((char *)a2, "none");
    return;
  }
  char v3 = a1;
  uint64_t v28 = &v30;
  uint64_t v29 = 0x200000000;
  if ((~a1 & 0x7F) == 0)
  {
    uint64_t v30 = "fast";
    uint64_t v31 = 4;
    LODWORD(v29) = 1;
    uint64_t v4 = (char *)v28;
    uint64_t v5 = (char *)v28 + 16;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    unsigned int v6 = 1;
    std::string::size_type v7 = 0;
    unint64_t v8 = v5 - v4 - 16;
    uint64_t v9 = v4;
    if (v8 >= 0x40) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  if (a1)
  {
    uint64_t v30 = "reassoc";
    uint64_t v31 = 7;
    unsigned int v6 = 1;
    LODWORD(v29) = 1;
    if ((a1 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned int v6 = 0;
  if ((a1 & 2) != 0)
  {
LABEL_10:
    uint64_t v10 = &(&v30)[2 * v6];
    *uint64_t v10 = "nnan";
    v10[1] = (const char *)4;
    unsigned int v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
  }
LABEL_11:
  if ((a1 & 4) != 0)
  {
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      unsigned int v6 = v29;
    }
    uint64_t v11 = (char *)v28 + 16 * v6;
    *uint64_t v11 = "ninf";
    v11[1] = 4;
    unsigned int v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_13;
  }
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v12 = (char *)v28 + 16 * v6;
  *uint64_t v12 = "nsz";
  v12[1] = 3;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_24:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v13 = (char *)v28 + 16 * v6;
  void *v13 = "arcp";
  v13[1] = 4;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_30:
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      unsigned int v6 = v29;
    }
    uint64_t v15 = (char *)v28 + 16 * v6;
    *uint64_t v15 = "afn";
    v15[1] = 3;
    LODWORD(v29) = v29 + 1;
    unsigned int v6 = v29;
    uint64_t v4 = (char *)v28;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v6) {
      goto LABEL_43;
    }
LABEL_33:
    uint64_t v5 = &v4[16 * v6];
    std::string::size_type v7 = v6 - 1;
    unint64_t v8 = 16 * v6 - 16;
    uint64_t v9 = v4;
    if (v8 >= 0x40)
    {
LABEL_34:
      uint64_t v16 = (v8 >> 4) + 1;
      uint64_t v17 = v16 & 3;
      if ((v16 & 3) == 0) {
        uint64_t v17 = 4;
      }
      uint64_t v18 = v16 - v17;
      uint64_t v9 = &v4[16 * v18];
      int64x2_t v19 = 0uLL;
      int64x2_t v20 = (int64x2_t)v7;
      long long v21 = (const double *)(v4 + 40);
      do
      {
        uint64_t v22 = v21 - 4;
        unsigned long long v23 = (unsigned __int128)vld2q_f64(v22);
        unsigned long long v24 = (unsigned __int128)vld2q_f64(v21);
        int64x2_t v20 = vaddq_s64((int64x2_t)v23, v20);
        int64x2_t v19 = vaddq_s64((int64x2_t)v24, v19);
        v21 += 8;
        v18 -= 4;
      }
      while (v18);
      std::string::size_type v7 = vaddvq_s64(vaddq_s64(v19, v20));
      goto LABEL_39;
    }
    do
    {
LABEL_39:
      v7 += *((void *)v9 + 1);
      v9 += 16;
    }
    while (v9 != v5);
    std::string::reserve((std::string *)a2, v7);
    std::string::append((std::string *)a2, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    if (v6 != 1)
    {
      uint64_t v25 = v4 + 16;
      do
      {
        std::string::append((std::string *)a2, ",", 1uLL);
        uint64_t v26 = *(const std::string::value_type **)v25;
        std::string::size_type v27 = *((void *)v25 + 1);
        v25 += 16;
        std::string::append((std::string *)a2, v26, v27);
      }
      while (v25 != v5);
    }
    goto LABEL_43;
  }
LABEL_27:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v14 = (char *)v28 + 16 * v6;
  *uint64_t v14 = "contract";
  v14[1] = 8;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x40) != 0) {
    goto LABEL_30;
  }
LABEL_16:
  uint64_t v4 = (char *)v28;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v6) {
    goto LABEL_33;
  }
LABEL_43:
  if (v28 != &v30) {
    free(v28);
  }
}

uint64_t mlir::arith::symbolizeFastMathFlags(_DWORD *a1, uint64_t a2)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a2;
  if (a2 == 4 && *a1 == 1701736302)
  {
    unsigned __int8 v2 = 0;
    uint64_t v15 = 0x100000000;
    return v15 & 0x100000000 | v2;
  }
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  llvm::StringRef::split(&v19, (uint64_t)&v22, ",", 1uLL, -1, 1);
  if (!v23)
  {
    unsigned __int8 v2 = 0;
LABEL_43:
    uint64_t v15 = 0x100000000;
    uint64_t v16 = v22;
    if (v22 != v24) {
      goto LABEL_44;
    }
    return v15 & 0x100000000 | v2;
  }
  unsigned __int8 v2 = 0;
  uint64_t v3 = 16 * v23;
  uint64_t v4 = (long long *)v22;
  while (2)
  {
    long long v18 = *v4;
    unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v18, " \t\n\v\f\r", 6, 0);
    if (first_not_of >= *((void *)&v18 + 1)) {
      unint64_t v7 = *((void *)&v18 + 1);
    }
    else {
      unint64_t v7 = first_not_of;
    }
    unint64_t v8 = *((void *)&v18 + 1) - v7;
    uint64_t v20 = v18 + v7;
    unint64_t v21 = *((void *)&v18 + 1) - v7;
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v20, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if (last_not_of + 1 < v21) {
      unint64_t v10 = last_not_of + 1;
    }
    else {
      unint64_t v10 = v21;
    }
    unint64_t v11 = v21 - v8 + v10;
    if (v21 < v11) {
      unint64_t v11 = v21;
    }
    switch(v11)
    {
      case 3uLL:
        if (*(_WORD *)v20 == 29550 && *(unsigned char *)(v20 + 2) == 122)
        {
          char v5 = 8;
          goto LABEL_6;
        }
        if (*(_WORD *)v20 == 26209 && *(unsigned char *)(v20 + 2) == 110)
        {
          char v5 = 64;
          goto LABEL_6;
        }
        goto LABEL_46;
      case 4uLL:
        switch(*(_DWORD *)v20)
        {
          case 0x6E616E6E:
            char v5 = 2;
LABEL_6:
            v2 |= v5;
            ++v4;
            v3 -= 16;
            if (!v3) {
              goto LABEL_43;
            }
            continue;
          case 0x666E696E:
            char v5 = 4;
            goto LABEL_6;
          case 0x70637261:
            char v5 = 16;
            goto LABEL_6;
          case 0x74736166:
            char v5 = 127;
            goto LABEL_6;
        }
LABEL_46:
        uint64_t v15 = 0;
        unsigned __int8 v2 = 0;
        uint64_t v16 = v22;
        if (v22 == v24) {
          return v15 & 0x100000000 | v2;
        }
LABEL_44:
        free(v16);
        return v15 & 0x100000000 | v2;
      case 7uLL:
        if (*(_DWORD *)v20 != 1935762802 || *(_DWORD *)(v20 + 3) != 1668248435) {
          goto LABEL_46;
        }
        char v5 = 1;
        goto LABEL_6;
      case 8uLL:
        if (*(void *)v20 != 0x74636172746E6F63) {
          goto LABEL_46;
        }
        char v5 = 32;
        goto LABEL_6;
      default:
        goto LABEL_46;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v20 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v22 = 65;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[28];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 == 0;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 == 0;
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v22 = 66;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3720);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 == 1;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 == 1;
  }
  return 0;
}

BOOL mlir::m_NonZero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 != 0;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 != 0;
  }
  return 1;
}

uint64_t mlir::m_NegZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 7) == 3) {
      return (v3 >> 3) & 1;
    }
  }
  else
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
    if ((v3 & 7) == 3) {
      return (v3 >> 3) & 1;
    }
  }
  return 0;
}

BOOL mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 7) == 3) {
      return (v3 & 8) == 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 7) == 3) {
      return (v3 & 8) == 0;
    }
  }
  return 0;
}

BOOL mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 8) == 0) {
      return 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 8) == 0) {
      return 0;
    }
  }
  return (v3 & 7) == 0;
}

BOOL mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 8) == 0) {
      return (v3 & 7) == 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 8) == 0) {
      return (v3 & 7) == 0;
    }
  }
  return 0;
}

BOOL mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(llvm::APFloatBase *a1)
{
  unint64_t v8[3] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (llvm::APFloatBase *)((char *)a1 + 8);
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v3 != (void *)v2)
  {
    uint64_t v4 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v8, v2, (llvm::APInt *)1);
    uint64_t v5 = v1;
    if (v3 != (void *)v8[0]) {
      goto LABEL_3;
    }
LABEL_6:
    int v6 = llvm::detail::DoubleAPFloat::compare(v4, v5);
    if (v3 != (void *)v8[0]) {
      goto LABEL_4;
    }
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
    return v6 == 1;
  }
  uint64_t v4 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, v2, 1);
  uint64_t v5 = v1;
  if (v3 == (void *)v8[0]) {
    goto LABEL_6;
  }
LABEL_3:
  int v6 = llvm::detail::IEEEFloat::compare(v4, v5);
  if (v3 == (void *)v8[0]) {
    goto LABEL_7;
  }
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
  return v6 == 1;
}

BOOL llvm::APFloat::operator==(void *a1, uint64_t a2)
{
  char v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  int v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4) {
    return llvm::detail::DoubleAPFloat::compare(v3, v6) == 1;
  }
  else {
    return llvm::detail::IEEEFloat::compare(v3, v6) == 1;
  }
}

__n128 mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>@<Q0>(mlir::ArrayAttr *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t Value = mlir::ArrayAttr::getValue(a1);
  unint64_t v6 = v5;
  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(v15, *(void *)a1, 0);
  uint64_t v7 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v14, v7, NumElements);
  unint64_t v9 = v15[0];
  unint64_t v10 = v15[1];
  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(v15, *(void *)a1, 0);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v14, v11, v12);
  __n128 result = v14;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  a2[1] = result;
  a2[2].n128_u64[0] = Value;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u8[0] = 1;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::detail::constant_int_value_binder::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  char v3 = *(void **)(*(void *)a2 + 136);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v17[0] = v5;
  if (v4)
  {
    mlir::IntegerAttr::getValue(v17, (llvm::APInt *)&v18);
    if (*(_DWORD *)(v2 + 8) >= 0x41u && *(void *)v2) {
      operator delete[](*(void **)v2);
    }
    *(void *)uint64_t v2 = v18;
    *(_DWORD *)(v2 + 8) = v19;
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2)) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v18 = v7;
    if (v7
      && (!mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v18) ? (uint64_t v7 = 0) : (uint64_t v7 = a2),
          (uint64_t v16 = v7) != 0))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v16);
      mlir::NamedAttribute::NamedAttribute(&v18, v16, 0);
      uint64_t v8 = v16;
      uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v16);
      mlir::NamedAttribute::NamedAttribute(v17, v8, NumElements);
      uint64_t v10 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v18);
      uint64_t v11 = *(void **)(*(void *)v10 + 136);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      BOOL v13 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v14 = v10;
      }
      else {
        uint64_t v14 = 0;
      }
      v17[0] = v14;
      if (v12)
      {
        mlir::IntegerAttr::getValue(v17, (llvm::APInt *)&v18);
        if (*(_DWORD *)(v2 + 8) >= 0x41u)
        {
          if (*(void *)v2) {
            operator delete[](*(void **)v2);
          }
        }
        *(void *)uint64_t v2 = v18;
        *(_DWORD *)(v2 + 8) = v19;
      }
      return v13;
    }
    else
    {
      return v7 & a2;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v22 = 68;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3728);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void mlir::DenseElementsAttr::getSplatValue<llvm::APInt>(mlir::DenseElementsAttr *a1@<X0>, llvm::APInt *a2@<X8>)
{
  mlir::DenseElementsAttr::getValues<llvm::APInt>(a1, (uint64_t)v4);
  v3[0] = v4[0];
  v3[1] = v4[1];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v3, a2);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v17 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v9 = v8;
    a1 = v17;
    if (v9)
    {
      unint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      unint64_t v19 = 61;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v19;
      }
      int v12 = &v18[v11];
      unint64_t v13 = v19 - v11;
      if (v19 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v19 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      unint64_t v3 = 0x1E8EB8000;
      a1 = v17;
    }
  }
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, *(void *)(v3 + 2328));
  if (v20)
  {
    char v5 = BYTE1(v18);
    if ((_BYTE)v18)
    {
      unint64_t v6 = v19;
      *(unsigned char *)a2 = (_BYTE)v18;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v6;
    }
    else
    {
      unint64_t v7 = v19;
      unint64_t v19 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v7;
    }
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::APInt>::reserve(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    unint64_t v15 = 0;
    unint64_t v3 = (_DWORD *)(a1 + 16);
    BOOL v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
    char v5 = v4;
    unint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      int v8 = v4 + 8;
      uint64_t v9 = 16 * v7;
      unint64_t v10 = v6 + 2;
      do
      {
        *int v8 = *v10;
        *((void *)v8 - 1) = *((void *)v10 - 1);
        *unint64_t v10 = 0;
        v10 += 4;
        v8 += 4;
        v9 -= 16;
      }
      while (v9);
      unint64_t v6 = *(_DWORD **)a1;
      uint64_t v11 = *(unsigned int *)(a1 + 8);
      if (v11)
      {
        uint64_t v12 = 4 * v11;
        do
        {
          if (v6[v12 - 2] >= 0x41u)
          {
            unint64_t v13 = *(void **)&v6[v12 - 4];
            if (v13) {
              operator delete[](v13);
            }
          }
          v12 -= 4;
        }
        while (v12 * 4);
        unint64_t v6 = *(_DWORD **)a1;
      }
    }
    int v14 = v15;
    if (v6 != v3) {
      free(v6);
    }
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v14;
  }
}

llvm::APInt *llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back(uint64_t a1, unint64_t a2)
{
  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(a1, a2, 1);
  uint64_t result = (llvm::APInt *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 8));
  unsigned int v5 = *((_DWORD *)Address + 2);
  *((_DWORD *)result + 2) = v5;
  if (v5 > 0x40) {
    uint64_t result = (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)Address);
  }
  else {
    *(void *)uint64_t result = *(void *)Address;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

char **llvm::SmallVector<llvm::APInt,4u>::~SmallVector(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        unsigned int v5 = *(void **)&v2[v4 - 16];
        if (v5) {
          operator delete[](v5);
        }
      }
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

double mlir::DenseElementsAttr::getValues<llvm::APInt>@<D0>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)unint64_t v19 = mlir::DenseElementsAttr::getElementType(a1);
  if (mlir::Type::isIntOrIndex((mlir::Type *)v19))
  {
    uint64_t Value = mlir::ArrayAttr::getValue(a1);
    uint64_t v2 = v6;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v14, *(void *)a1, 0);
    uint64_t v7 = *(void *)a1;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v12, v7, NumElements);
    char v9 = v14;
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v15;
    *(_OWORD *)&v19[15] = *(_OWORD *)&v15[15];
    *(_OWORD *)&v19[31] = v12;
    *(_OWORD *)&v19[47] = v13;
    *(_OWORD *)&v18[15] = v13;
    long long v16 = *(_OWORD *)v19;
    long long v17 = *(_OWORD *)&v19[16];
    *(_OWORD *)unint64_t v18 = *(_OWORD *)&v19[32];
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)a2 = v9;
  long long v10 = v17;
  *(_OWORD *)(a2 + 1) = v16;
  *(_OWORD *)(a2 + 17) = v10;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)v18;
  double result = *(double *)&v18[15];
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v18[15];
  *(void *)(a2 + 64) = Value;
  *(void *)(a2 + 72) = v2;
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 16 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v22 = a2 - *(void *)a1;
      unint64_t v36 = 0;
      uint64_t v23 = (_DWORD *)(a1 + 16);
      unsigned long long v24 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      uint64_t v25 = v24;
      uint64_t v26 = *(_DWORD **)a1;
      uint64_t v27 = *(unsigned int *)(a1 + 8);
      if (v27)
      {
        uint64_t v28 = v24 + 8;
        uint64_t v29 = 16 * v27;
        uint64_t v30 = v26 + 2;
        do
        {
          _DWORD *v28 = *v30;
          *((void *)v28 - 1) = *((void *)v30 - 1);
          *uint64_t v30 = 0;
          v30 += 4;
          v28 += 4;
          v29 -= 16;
        }
        while (v29);
        uint64_t v26 = *(_DWORD **)a1;
        uint64_t v31 = *(unsigned int *)(a1 + 8);
        if (v31)
        {
          uint64_t v32 = 4 * v31;
          do
          {
            if (v26[v32 - 2] >= 0x41u)
            {
              uint64_t v33 = *(void **)&v26[v32 - 4];
              if (v33) {
                operator delete[](v33);
              }
            }
            v32 -= 4;
          }
          while (v32 * 4);
          uint64_t v26 = *(_DWORD **)a1;
        }
      }
      uint64_t v34 = v22 >> 4;
      int v35 = v36;
      if (v26 != v23) {
        free(v26);
      }
      *(void *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      return &v25[16 * v34];
    }
    else
    {
      unint64_t v36 = 0;
      long long v10 = (_DWORD *)(a1 + 16);
      uint64_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      long long v12 = v11;
      long long v13 = *(_DWORD **)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        unint64_t v15 = v11 + 8;
        uint64_t v16 = 16 * v14;
        long long v17 = v13 + 2;
        do
        {
          *unint64_t v15 = *v17;
          *((void *)v15 - 1) = *((void *)v17 - 1);
          *long long v17 = 0;
          v17 += 4;
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
        long long v13 = *(_DWORD **)a1;
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = 4 * v18;
          do
          {
            if (v13[v19 - 2] >= 0x41u)
            {
              uint64_t v20 = *(void **)&v13[v19 - 4];
              if (v20) {
                operator delete[](v20);
              }
            }
            v19 -= 4;
          }
          while (v19 * 4);
          long long v13 = *(_DWORD **)a1;
        }
      }
      int v21 = v36;
      if (v13 != v10) {
        free(v13);
      }
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v21;
    }
  }
  return (char *)v3;
}

void anonymous namespace'::AddIAddConstant::~AddIAddConstant(_anonymous_namespace_::AddIAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddIAddConstant::matchAndRewrite(_anonymous_namespace_::AddIAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        long long v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      long long v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      long long v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  long long v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
      uint64_t v9 = *(void *)(a2 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
    *a4 = v9;
    a4[1] = 1;
    uint64_t v17 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (!v14) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

uint64_t anonymous namespace'::static_dag_matcher_2(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (void **)(a2 - 16);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  long long v13 = v15;
  uint64_t v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  unint64_t v8 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15) {
    free(v13);
  }
  if (v8)
  {
    *a3 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    long long v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    uint64_t v14 = 176;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 1;
    }
    uint64_t v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9)) {
    return 0;
    }
  }
  else
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(v11);
    if (result) {
  }
    }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::IntegerAttr &>(mlir::OpBuilder *a1, uint64_t a2, void **a3)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  uint64_t v9 = *a3;
  if (v9) {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, (uint64_t)v9, v10);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::AddIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.addi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.addi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    long long v13 = v12;
  }
  else {
    long long v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t anonymous namespace'::static_dag_matcher_0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v12 = (void **)(a2 - 16);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  long long v13 = v15;
  uint64_t v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  unint64_t v8 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15) {
    free(v13);
  }
  if (v8)
  {
    *a3 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    long long v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    uint64_t v14 = 176;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 1;
    }
    int v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9)) {
    return 0;
    }
  }
  else
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(v11);
    if (result) {
  }
    }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "castedOp1 is not ::mlir::arith::AddIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>(void *a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    int v12 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[6]);
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization0(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  uint64_t v4 = mlir::Diagnostic::operator<<(a2, v14);
  uint64_t v5 = v4 + 16;
  unint64_t v6 = *(void *)(v4 + 16);
  int v16 = 3;
  __int16 v17 = ": arbitrary integer attribute";
  uint64_t v18 = 29;
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  unint64_t v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    unint64_t v11 = v7 + 1;
    BOOL v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      long long v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      unint64_t v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      unint64_t v8 = (__n128 *)&v16;
    }
  }
  unint64_t v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  __n128 result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *unint64_t v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_2(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t applyToIntegerAttrs(uint64_t a1, void *a2, void *a3, void (*a4)(void **__return_ptr, uint64_t, void **, void **), uint64_t a5)
{
  long long v13 = a2;
  mlir::IntegerAttr::getValue(&v13, (llvm::APInt *)&v15);
  long long __p = a3;
  mlir::IntegerAttr::getValue(&__p, (llvm::APInt *)&v13);
  a4(&__p, a5, &v15, &v13);
  uint64_t v9 = mlir::IntegerAttr::get(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8, (llvm::APInt *)&__p);
  if (v12 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v14 >= 0x41 && v13) {
    operator delete[](v13);
  }
  if (v16 >= 0x41 && v15) {
    operator delete[](v15);
  }
  return v9;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::plus<llvm::APInt>>@<X0>(uint64_t a1@<X1>, void **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
  }
  else {
    unint64_t v6 = *(const void **)a1;
  }
  uint64_t result = llvm::APInt::operator+=((uint64_t)&v6, a2);
  *(_DWORD *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void anonymous namespace'::AddISubConstantRHS::~AddISubConstantRHS(_anonymous_namespace_::AddISubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddISubConstantRHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        long long v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      __int16 v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      __int16 v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  __int16 v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_5(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
      uint64_t v9 = *(void *)(a2 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
    *a4 = v9;
    a4[1] = 1;
    uint64_t v17 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (!v14) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::minus<llvm::APInt>>@<X0>(uint64_t a1@<X1>, void **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
  }
  else {
    unint64_t v6 = *(const void **)a1;
  }
  uint64_t result = llvm::APInt::operator-=((uint64_t)&v6, a2);
  *(_DWORD *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void anonymous namespace'::AddISubConstantLHS::~AddISubConstantLHS(_anonymous_namespace_::AddISubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddISubConstantLHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        long long v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    uint64_t v18 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
          uint64_t v13 = *(void *)(a2 + 72);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t result = 1;
        *a5 = v13 + 32;
        a5[1] = 1;
        return result;
      }
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 16);
    if (!v16) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::SubIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.subi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.subi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AddIMulNegativeOneRhs::~AddIMulNegativeOneRhs(_anonymous_namespace_::AddIMulNegativeOneRhs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneRhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  uint64_t v34 = v36;
  v36[0] = a2;
  uint64_t v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  long long __p = *(void **)(*((void *)v5 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &__p);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  long long __p = *(void **)(*(void *)(DefiningOp + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v13)
  {
    uint64_t v14 = v13;
    {
      int v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        int v15 = v35;
      }
      v34[v15] = v14;
      uint64_t v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      uint64_t v17 = v27;
      LODWORD(v29) = 1;
      long long __p = 0;
      p_p = &__p;
      if (v27)
      {
        char v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v27);
        unsigned int v19 = v29;
        if (v18)
        {
          unint64_t v20 = __p;
          LODWORD(v33) = 1;
          p_p = 0;
          p_p_p = &p_p;
          int v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p_p, v17);
          int v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            long long __p = p_p;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(__p) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (p_p) {
                operator delete[](p_p);
              }
              goto LABEL_37;
            }
          }
          if (!v33)
          {
            if (v19 >= 0x41 && v20) {
              operator delete[](v20);
            }
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            BOOL v23 = __p == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          BOOL v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) == v22;
          if (v21 && __p) {
            operator delete[](__p);
          }
LABEL_40:
          if (v19 >= 0x41 && v20) {
            operator delete[](v20);
          }
          if (!v23) {
            goto LABEL_44;
          }
LABEL_54:
          uint64_t v26 = *(void *)(v34[1] + 24);
          long long __p = *(void **)(*v34 + 24);
          uint64_t v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&__p, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && __p) {
          operator delete[](__p);
        }
      }
LABEL_44:
      uint64_t v24 = *((void *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        uint64_t v8 = v11;
        int v12 = v34;
        if (v34 == v36) {
          return v8;
        }
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  uint64_t v8 = 0;
LABEL_48:
  int v12 = v34;
  if (v34 != v36) {
LABEL_49:
  }
    free(v12);
  return v8;
}

uint64_t anonymous namespace'::static_dag_matcher_3(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2 - 16;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp) {
    goto LABEL_7;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)v12);
  unint64_t v8 = *(void *)v12[0] & 0xFFFFFFFFFFFFFFF8;
  if (v12[0] != v13) {
    free(v12[0]);
  }
  if (v8)
  {
    *a3 = v8;
    return 1;
  }
  else
  {
LABEL_7:
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v10);
      if (result) {
    }
      }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_3(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'c0' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AddIMulNegativeOneLhs::~AddIMulNegativeOneLhs(_anonymous_namespace_::AddIMulNegativeOneLhs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneLhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  uint64_t v34 = v36;
  v36[0] = a2;
  uint64_t v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  long long __p = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &__p);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  long long __p = *(void **)(*(void *)(DefiningOp + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v13)
  {
    uint64_t v14 = v13;
    {
      int v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        int v15 = v35;
      }
      v34[v15] = v14;
      uint64_t v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      uint64_t v17 = v27;
      LODWORD(v29) = 1;
      long long __p = 0;
      p_p = &__p;
      if (v27)
      {
        char v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v27);
        unsigned int v19 = v29;
        if (v18)
        {
          unint64_t v20 = __p;
          LODWORD(v33) = 1;
          p_p = 0;
          p_p_p = &p_p;
          int v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p_p, v17);
          int v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            long long __p = p_p;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(__p) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (p_p) {
                operator delete[](p_p);
              }
              goto LABEL_37;
            }
          }
          if (!v33)
          {
            if (v19 >= 0x41 && v20) {
              operator delete[](v20);
            }
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            BOOL v23 = __p == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          BOOL v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__p) == v22;
          if (v21 && __p) {
            operator delete[](__p);
          }
LABEL_40:
          if (v19 >= 0x41 && v20) {
            operator delete[](v20);
          }
          if (!v23) {
            goto LABEL_44;
          }
LABEL_54:
          uint64_t v26 = *(void *)(v34[1] + 24);
          long long __p = *(void **)(*v34 + 24);
          uint64_t v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&__p, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && __p) {
          operator delete[](__p);
        }
      }
LABEL_44:
      uint64_t v24 = *((void *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        uint64_t v8 = v11;
        int v12 = v34;
        if (v34 == v36) {
          return v8;
        }
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  uint64_t v8 = 0;
LABEL_48:
  int v12 = v34;
  if (v34 != v36) {
LABEL_49:
  }
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'c0' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::detail::constant_int_predicate_matcher::match(uint64_t (**this)(void **), mlir::Operation *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 1;
  p_p = &__p;
  long long __p = 0;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)a2 + 6)) {
    goto LABEL_19;
  }
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v14);
  unint64_t v4 = *(void *)v14[0] & 0xFFFFFFFFFFFFFFF8;
  if (v14[0] != v15) {
    free(v14[0]);
  }
  if (v4
    && ((uint64_t v5 = *(void **)(*(void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136),
         v5 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      ? (BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = v5 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v8 = 1),
        v8 && mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v4)))
  {
    uint64_t v9 = (*this)(&__p);
    if (v13 < 0x41) {
      return v9;
    }
  }
  else
  {
LABEL_19:
    uint64_t v9 = 0;
    if (v13 < 0x41) {
      return v9;
    }
  }
  if (__p) {
    operator delete[](__p);
  }
  return v9;
}

uint64_t mlir::constFoldBinaryOpConditional<mlir::IntegerAttr,llvm::APInt,void,mlir::Attribute mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,void,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&)>(llvm::ArrayRef<mlir::Attribute>,mlir::Type,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&) &&)::{lambda(llvm::APInt,llvm::APInt)#1}>(uint64_t *a1, uint64_t a2, void *a3, void (**a4)(char **__return_ptr, void **, void **))
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v6 = a1[1];
  if (!v6) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v51 = *a1;
    uint64_t v48 = v6;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
    if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v48)) {
      return 0;
    }
    mlir::IntegerAttr::getValue(&v51, (llvm::APInt *)&v68);
    mlir::IntegerAttr::getValue(&v48, (llvm::APInt *)&v66);
    (*a4)(&v55, &v68, &v66);
    LODWORD(v73) = v56;
    char v72 = v55;
    char v74 = 1;
    if (v67 >= 0x41 && v66) {
      operator delete[](v66);
    }
    if (v69 >= 0x41 && v68) {
      operator delete[](v68);
    }
    uint64_t v15 = mlir::IntegerAttr::get((uint64_t)a3, (llvm::APInt *)&v72);
    if (v74) {
      goto LABEL_38;
    }
    return v15;
  }
  if (mlir::DenseElementsAttr::classof(*a1)) {
    uint64_t v9 = (char *)v5;
  }
  else {
    uint64_t v9 = 0;
  }
  char v72 = v9;
  if (v9 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v72))
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = mlir::DenseElementsAttr::classof(v10) ? (char *)v10 : 0;
    char v72 = v11;
    if (v11)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v72))
      {
        uint64_t v12 = a1[1];
        uint64_t v51 = *a1;
        uint64_t v48 = v12;
        uint64_t v13 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
        if (v13 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v48))
        {
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v51, (llvm::APInt *)&v64);
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v48, (llvm::APInt *)&__p);
          (*a4)(&v55, &v64, &__p);
          LODWORD(v73) = v56;
          char v72 = v55;
          char v74 = 1;
          if (v63 >= 0x41 && __p) {
            operator delete[](__p);
          }
          if (v65 >= 0x41 && v64) {
            operator delete[](v64);
          }
          uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
          uint64_t v15 = mlir::DenseElementsAttr::get((uint64_t)a3, v14, (llvm::APInt *)&v72, 1);
          if (!v74) {
            return v15;
          }
LABEL_38:
          if (v73 >= 0x41 && v72) {
            operator delete[](v72);
          }
          return v15;
        }
        return 0;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*a1 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)a1[1] + 8))
  {
    return 0;
  }
  uint64_t v16 = (void *)*a1;
  if (!*a1)
  {
    char v60 = 0;
    uint64_t v61 = 0;
    char v18 = (void *)a1[1];
    if (v18) {
      goto LABEL_29;
    }
LABEL_42:
    uint64_t v19 = 0;
    goto LABEL_43;
  }
  uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v16 + 8);
  char v60 = v16;
  uint64_t v61 = v17;
  char v18 = (void *)a1[1];
  if (!v18) {
    goto LABEL_42;
  }
LABEL_29:
  uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v18 + 8);
LABEL_43:
  v59[0] = v18;
  v59[1] = v19;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v60);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v59)) {
    return 0;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v60, (uint64_t)&v55);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v59, (uint64_t)&v51);
  uint64_t v15 = 0;
  int v23 = v54;
  if (v58 && v54)
  {
    LOWORD(v48) = (_WORD)v55;
    if ((_BYTE)v55) {
      uint64_t v49 = v56;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 16))(&v49);
    }
    uint64_t v50 = v57;
    __int16 v45 = v51;
    if ((_BYTE)v51) {
      uint64_t v46 = v52;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v52 + 16))(&v46);
    }
    uint64_t v47 = v53;
    char v72 = &v74;
    uint64_t v73 = 0x400000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v60, v61);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v72, NumElements);
    uint64_t v25 = mlir::ElementsAttr::getNumElements((uint64_t)v60, v61);
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = v50;
      do
      {
        if (BYTE1(v48)) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = v27;
        }
        if ((_BYTE)v48)
        {
          uint64_t v29 = v49 + 16 * v28;
          unsigned int v41 = *(_DWORD *)(v29 + 8);
          if (v41 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v40, (const void **)v29);
            uint64_t v30 = v46;
            if (HIBYTE(v45)) {
              uint64_t v31 = 0;
            }
            else {
              uint64_t v31 = v47;
            }
            if (!(_BYTE)v45) {
              goto LABEL_77;
            }
          }
          else
          {
            uint64_t v40 = *(void **)v29;
            uint64_t v30 = v46;
            if (HIBYTE(v45)) {
              uint64_t v31 = 0;
            }
            else {
              uint64_t v31 = v47;
            }
            if (!(_BYTE)v45) {
              goto LABEL_77;
            }
          }
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(void *)v49 + 24))(&v40);
          uint64_t v30 = v46;
          if (HIBYTE(v45)) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v47;
          }
          if (!(_BYTE)v45)
          {
LABEL_77:
            (*(void (**)(void **__return_ptr))(*(void *)v30 + 24))(&v38);
            goto LABEL_79;
          }
        }
        uint64_t v32 = v30 + 16 * v31;
        unsigned int v39 = *(_DWORD *)(v32 + 8);
        if (v39 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v38, (const void **)v32);
        }
        else {
          uint64_t v38 = *(void **)v32;
        }
LABEL_79:
        (*a4)((char **)&v70, &v40, &v38);
        unsigned int v43 = v71;
        uint64_t v42 = v70;
        char v44 = 1;
        if (v39 >= 0x41 && v38) {
          operator delete[](v38);
        }
        if (v41 >= 0x41 && v40) {
          operator delete[](v40);
        }
        if (!v44)
        {
          uint64_t v15 = 0;
          goto LABEL_92;
        }
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back((uint64_t)&v72, (unint64_t)&v42);
        if (v44 && v43 >= 0x41 && v42) {
          operator delete[](v42);
        }
        uint64_t v27 = ++v50;
        ++v47;
        --v26;
      }
      while (v26);
    }
    uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
    uint64_t v15 = mlir::DenseElementsAttr::get((uint64_t)a3, v33, (llvm::APInt *)v72, v73);
LABEL_92:
    llvm::SmallVector<llvm::APInt,4u>::~SmallVector(&v72);
    if (!(_BYTE)v45)
    {
      uint64_t v34 = v46;
      uint64_t v46 = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
    if (!(_BYTE)v48)
    {
      uint64_t v35 = v49;
      uint64_t v49 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
    int v23 = v54;
  }
  if (v23)
  {
    if (!(_BYTE)v51)
    {
      uint64_t v36 = v52;
      uint64_t v52 = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
    }
  }
  if (v58)
  {
    if (!(_BYTE)v55)
    {
      uint64_t v37 = v56;
      uint64_t v56 = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
    }
  }
  return v15;
}

void anonymous namespace'::AddUIExtendedToAddI::~AddUIExtendedToAddI(_anonymous_namespace_::AddUIExtendedToAddI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(_anonymous_namespace_::AddUIExtendedToAddI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddUIExtendedOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  BOOL v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    uint64_t v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSAddConstant::~SubIRHSAddConstant(_anonymous_namespace_::SubIRHSAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubIRHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSAddConstant::~SubILHSAddConstant(_anonymous_namespace_::SubILHSAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubILHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubILHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSSubConstantRHS::~SubIRHSSubConstantRHS(_anonymous_namespace_::SubIRHSSubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSSubConstantLHS::~SubIRHSSubConstantLHS(_anonymous_namespace_::SubIRHSSubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSSubConstantRHS::~SubILHSSubConstantRHS(_anonymous_namespace_::SubILHSSubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSSubConstantLHS::~SubILHSSubConstantLHS(_anonymous_namespace_::SubILHSSubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubISubILHSRHSLHS::~SubISubILHSRHSLHS(_anonymous_namespace_::SubISubILHSRHSLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(_anonymous_namespace_::SubISubILHSRHSLHS *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v21[4] = *MEMORY[0x1E4F143B8];
  unint64_t v19 = v21;
  v21[0] = a2;
  uint64_t v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v18[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v8 = *((void *)a3 + 2);
      if (!v8) {
        goto LABEL_22;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v18);
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(DefiningOp + 72);
      uint64_t v14 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v14 + 1, 8);
    LODWORD(v14) = v20;
LABEL_17:
    v19[v14] = v7;
    LODWORD(v20) = v20 + 1;
    if (*(void *)(v13 + 24) == *(void *)(*((void *)v5 + 9) + 56))
    {
      uint64_t v17 = *(void **)(v19[1] + 24);
      v18[0] = *(void **)(*v19 + 24);
      v18[1] = v17;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v15 = *((void *)a3 + 2);
    if (v15 && mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_13:
      uint64_t v8 = v11;
      int v12 = v19;
      if (v19 == v21) {
        return v8;
      }
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (!v8) {
    goto LABEL_22;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v9 = *((void *)v5 + 3);
    goto LABEL_12;
  }
LABEL_21:
  uint64_t v8 = 0;
LABEL_22:
  int v12 = v19;
  if (v19 != v21) {
LABEL_23:
  }
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'x' and 'x0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::MulIMulIConstant::~MulIMulIConstant(_anonymous_namespace_::MulIMulIConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::MulIMulIConstant::matchAndRewrite(_anonymous_namespace_::MulIMulIConstant *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v22[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (!DefiningOp)
  {
    uint64_t v7 = *((void *)a3 + 2);
    if (!v7) {
      goto LABEL_33;
    }
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *((void *)v4 + 3);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
  uint64_t v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v22[0] = *(void **)(*(void *)(DefiningOp + 72) + 56);
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v11)
    {
      uint64_t v12 = v11;
        goto LABEL_31;
      int v13 = v24;
      if (v24 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
        int v13 = v24;
      }
      v23[v13] = v12;
      uint64_t v14 = (v24 + 1);
      LODWORD(v24) = v14;
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v14 + 1, 8);
        LODWORD(v14) = v24;
      }
      v23[v14] = v6;
      LODWORD(v24) = v24 + 1;
      v22[0] = *(void **)(*((void *)v4 + 9) + 56);
      uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v22);
      if (v15)
      {
        uint64_t v16 = v15;
        {
          int v17 = v24;
          if (v24 >= HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
            int v17 = v24;
          }
          v23[v17] = v16;
          LODWORD(v24) = v24 + 1;
          char v18 = *(void **)(v23[1] + 24);
          v22[0] = *(void **)(*v23 + 24);
          v22[1] = v18;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
        }
        goto LABEL_31;
      }
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_33;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *((void *)v4 + 3);
LABEL_12:
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v7 + 64))(v7, v8, v9, v22);
        BOOL v10 = v23;
        if (v23 == v25) {
          return v7;
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_33;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v6 + 24);
        goto LABEL_12;
      }
    }
LABEL_31:
    uint64_t v7 = 0;
    BOOL v10 = v23;
    if (v23 == v25) {
      return v7;
    }
    goto LABEL_34;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *(void *)(v6 + 24);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_33:
  BOOL v10 = v23;
  if (v23 != v25) {
LABEL_34:
  }
    free(v10);
  return v7;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::MulIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.muli", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.muli";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::multiplies<llvm::APInt>>@<X0>(uint64_t a1@<X1>, const unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::APInt::operator*(a1, a2, a3);
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, const void **a3)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  llvm::APInt::sext((const void **)this, 2 * v5, (uint64_t)&v8);
  llvm::APInt::sext(a3, 2 * v5, (uint64_t)&__p);
  llvm::APInt::operator*((uint64_t)&v8, (const unint64_t **)&__p, (uint64_t)&v10);
  if (v7 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v9 >= 0x41 && v8) {
    operator delete[](v8);
  }
  llvm::APInt::extractBits((unint64_t *)&v10, v5, v5, (uint64_t)&v8);
  if (v11 >= 0x41 && v10) {
    operator delete[](v10);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 16) = 1;
}

void anonymous namespace'::MulSIExtendedToMulI::~MulSIExtendedToMulI(_anonymous_namespace_::MulSIExtendedToMulI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulSIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  unsigned int v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    int v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  int v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::MulSIExtendedRHSOne::~MulSIExtendedRHSOne(_anonymous_namespace_::MulSIExtendedRHSOne *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(_anonymous_namespace_::MulSIExtendedRHSOne *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v31[4] = *MEMORY[0x1E4F143B8];
  uint64_t v29 = v31;
  v31[0] = a2;
  uint64_t v30 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  long long __p = *(void **)(*((void *)v5 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    p_p = (void **)(DefiningOp - 16);
    uint64_t v8 = mlir::Value::getDefiningOp((mlir::Value *)&p_p);
    if (v8)
    {
      uint64_t v9 = v8;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v8 + 48)))
      {
        long long __p = v26;
        uint64_t v25 = 0x100000000;
        mlir::Operation::fold(v9, 0, 0, (uint64_t)&__p);
        unint64_t v10 = *(void *)__p & 0xFFFFFFFFFFFFFFF8;
        if (__p != v26) {
          free(__p);
        }
        if (v10)
        {
          int v11 = v30;
          if (v30 >= HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 8);
            int v11 = v30;
          }
          v29[v11] = v7;
          LODWORD(v30) = v30 + 1;
          LODWORD(v25) = 1;
          long long __p = 0;
          p_p = &__p;
          char v12 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v10);
          unsigned int v13 = v25;
          if ((v12 & 1) == 0)
          {
            if (v25 >= 0x41 && __p) {
              operator delete[](__p);
            }
LABEL_45:
            uint64_t v22 = *((void *)a3 + 2);
            if (v22 && mlir::RewriterBase::Listener::classof(v22))
            {
LABEL_22:
              uint64_t v15 = v18;
              __int16 v19 = v29;
              if (v29 == v31) {
                return v15;
              }
              goto LABEL_50;
            }
            goto LABEL_48;
          }
          uint64_t v14 = __p;
          LODWORD(v28) = 1;
          p_p = 0;
          long long __p = &p_p;
          if (mlir::detail::constant_int_value_binder::match((uint64_t *)&__p, v10))
          {
            LODWORD(v25) = v28;
            long long __p = p_p;
            v26[0] = 1;
          }
          else
          {
            LOBYTE(__p) = 0;
            v26[0] = 0;
            if (v28 >= 0x41 && p_p) {
              operator delete[](p_p);
            }
          }
          unsigned int v20 = v25;
          if (v25 >= 0x41)
          {
            if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
            {
              BOOL v21 = 0;
              if (!v26[0]) {
                goto LABEL_40;
              }
            }
            else
            {
              BOOL v21 = *(void *)__p == 1;
              if (!v26[0])
              {
LABEL_40:
                if (v13 >= 0x41 && v14) {
                  operator delete[](v14);
                }
                if (v21)
                {
                  long long __p = *(void **)(*v29 + 24);
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&__p, (mlir::MLIRContext *)1, 0);
                }
                goto LABEL_45;
              }
            }
          }
          else
          {
            BOOL v21 = __p == (void *)1;
            if (!v26[0]) {
              goto LABEL_40;
            }
          }
          if (v20 >= 0x41 && __p) {
            operator delete[](__p);
          }
          goto LABEL_40;
        }
      }
    }
    uint64_t v15 = *((void *)a3 + 2);
    if (!v15) {
      goto LABEL_49;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_48;
    }
    uint64_t v16 = *(void *)(v7 + 24);
LABEL_21:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v15 + 64))(v15, v16, v17, &__p);
    goto LABEL_22;
  }
  uint64_t v15 = *((void *)a3 + 2);
  if (!v15) {
    goto LABEL_49;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v16 = *((void *)v5 + 3);
    goto LABEL_21;
  }
LABEL_48:
  uint64_t v15 = 0;
LABEL_49:
  __int16 v19 = v29;
  if (v29 != v31) {
LABEL_50:
  }
    free(v19);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"arith.cmpi";
    v19[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::CmpIOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  unsigned int v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::ExtSIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extsi", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.extsi";
    v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  unsigned int v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "entities 'c1' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, const void **a3)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  llvm::APInt::zext((const void **)this, 2 * v5, (uint64_t)&v8);
  llvm::APInt::zext(a3, 2 * v5, (uint64_t)&__p);
  llvm::APInt::operator*((uint64_t)&v8, (const unint64_t **)&__p, (uint64_t)&v10);
  if (v7 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v9 >= 0x41 && v8) {
    operator delete[](v8);
  }
  llvm::APInt::extractBits((unint64_t *)&v10, v5, v5, (uint64_t)&v8);
  if (v11 >= 0x41 && v10) {
    operator delete[](v10);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 16) = 1;
}

void anonymous namespace'::MulUIExtendedToMulI::~MulUIExtendedToMulI(_anonymous_namespace_::MulUIExtendedToMulI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulUIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  unsigned int v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    int v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  int v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  unsigned int v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *__sz)
{
  unsigned int v15 = *((_DWORD *)a3 + 2);
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)a3);
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v14 = *(void **)a3;
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_12;
    }
  }
  unsigned int v8 = *((_DWORD *)__sz + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)__sz) {
      goto LABEL_7;
    }
LABEL_12:
    BOOL *v7 = 1;
    BOOL v10 = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(__sz) == v8) {
    goto LABEL_12;
  }
LABEL_7:
  llvm::APInt::udiv((const void **)&v14, (size_t)__sz, (llvm::APInt *)&v20);
  llvm::APInt::urem((const void **)&v14, (size_t)__sz, (llvm::APInt *)&__p);
  unsigned int v9 = v19;
  if (v19 > 0x40)
  {
    int v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    if (__p) {
      operator delete[](__p);
    }
    if (v11 != v9) {
      goto LABEL_9;
    }
  }
  else if (__p)
  {
LABEL_9:
    unsigned int v19 = v15;
    if (v15 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 1);
    }
    else {
      long long __p = (void *)(v15 != 0);
    }
    llvm::APInt::uadd_ov((const void **)&v20, (uint64_t **)&__p, *a2, (uint64_t)&v16);
    if (v19 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v21 >= 0x41 && v20) {
      operator delete[](v20);
    }
    goto LABEL_25;
  }
  unsigned int v17 = v21;
  uint64_t v16 = v20;
LABEL_25:
  int v12 = v16;
  unsigned int v13 = v15;
  *(_DWORD *)(a1 + 8) = v17;
  *(void *)a1 = v12;
  unsigned int v17 = 0;
  *(unsigned char *)(a1 + 16) = 1;
  if (v13 >= 0x41)
  {
    if (v14) {
      operator delete[](v14);
    }
  }
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  unsigned int v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)a3);
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v19 = *(void **)a3;
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_11;
    }
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)this) {
      goto LABEL_7;
    }
LABEL_11:
    BOOL *v7 = 1;
    unsigned int v9 = v20;
    goto LABEL_12;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v8) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned int v9 = v20;
  if (v20 <= 0x40)
  {
    BOOL v10 = v19;
    if (v19)
    {
      unsigned int v28 = v20;
      uint64_t v27 = 0;
      goto LABEL_17;
    }
LABEL_13:
    *(_DWORD *)(a1 + 8) = v9;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19) == v9)
  {
LABEL_12:
    BOOL v10 = v19;
    goto LABEL_13;
  }
  unsigned int v28 = v9;
  llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
LABEL_17:
  int v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  int v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  BOOL v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0) {
        BOOL v13 = 1;
      }
      if (v13)
      {
        llvm::APInt::ssub_ov((const void **)&v27, this, *a2, (uint64_t)&v25);
        uint64_t v14 = *a2;
        unsigned int v15 = &v19;
        uint64_t v16 = &v25;
      }
      else
      {
        llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        uint64_t v14 = *a2;
        unsigned int v15 = &v25;
        uint64_t v16 = (void **)this;
      }
      llvm::APInt::sdiv_ov((const void **)v15, (size_t)v16, v14, (llvm::APInt *)&__p);
      llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&__p, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov((const void **)&v27, this, *a2, (uint64_t)&__p);
      signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v25, (BOOL *)&__p, *a2);
    }
    if (v24 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v26 >= 0x41 && v25) {
      operator delete[](v25);
    }
  }
  else
  {
    signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v19, (BOOL *)this, *a2);
  }
  if (v28 >= 0x41 && v27) {
    operator delete[](v27);
  }
  uint64_t v17 = v21;
  unsigned int v18 = v20;
  *(_DWORD *)(a1 + 8) = v22;
  *(void *)a1 = v17;
  int v22 = 0;
  *(unsigned char *)(a1 + 16) = 1;
  if (v18 >= 0x41)
  {
    if (v19) {
      operator delete[](v19);
    }
  }
}

void signedCeilNonnegInputs(const llvm::APInt *a1, const llvm::APInt *this, BOOL *a3, BOOL *a4)
{
  unsigned int v8 = *((_DWORD *)this + 2);
  unsigned int v14 = v8;
  if (v8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, 1, 1);
  }
  else {
    BOOL v13 = (void *)(v8 != 0);
  }
  llvm::APInt::ssub_ov((const void **)this, (const llvm::APInt *)&v13, a4, (uint64_t)&__p);
  llvm::APInt::sdiv_ov((const void **)&__p, (size_t)a3, a4, (llvm::APInt *)&v11);
  if (v10 >= 0x41 && __p) {
    operator delete[](__p);
  }
  llvm::APInt::sadd_ov((const void **)&v11, (const llvm::APInt *)&v13, a4, (uint64_t)a1);
  if (v12 >= 0x41 && v11) {
    operator delete[](v11);
  }
  if (v14 >= 0x41)
  {
    if (v13) {
      operator delete[](v13);
    }
  }
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  unsigned int v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)a3);
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v19 = *(void **)a3;
    unsigned int v7 = *a2;
    if (**a2) {
      goto LABEL_11;
    }
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)this) {
      goto LABEL_7;
    }
LABEL_11:
    BOOL *v7 = 1;
    unsigned int v9 = v20;
    goto LABEL_12;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v8) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned int v9 = v20;
  if (v20 <= 0x40)
  {
    unsigned int v10 = v19;
    if (v19)
    {
      unsigned int v28 = v20;
      uint64_t v27 = 0;
      goto LABEL_17;
    }
LABEL_13:
    *(_DWORD *)(a1 + 8) = v9;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19) == v9)
  {
LABEL_12:
    unsigned int v10 = v19;
    goto LABEL_13;
  }
  unsigned int v28 = v9;
  llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
LABEL_17:
  int v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  int v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  BOOL v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0) {
        BOOL v13 = 1;
      }
      if (v13)
      {
        llvm::APInt::ssub_ov((const void **)&v27, this, *a2, (uint64_t)&v25);
        unsigned int v14 = *a2;
        unsigned int v15 = &v19;
        uint64_t v16 = (BOOL *)&v25;
      }
      else
      {
        llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        unsigned int v14 = *a2;
        unsigned int v15 = &v25;
        uint64_t v16 = (BOOL *)this;
      }
      signedCeilNonnegInputs((const llvm::APInt *)&__p, (const llvm::APInt *)v15, v16, v14);
      llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&__p, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov((const void **)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov((const void **)&v27, this, *a2, (uint64_t)&__p);
      llvm::APInt::sdiv_ov((const void **)&v25, (size_t)&__p, *a2, (llvm::APInt *)&v21);
    }
    if (v24 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v26 >= 0x41 && v25) {
      operator delete[](v25);
    }
  }
  else
  {
    llvm::APInt::sdiv_ov((const void **)&v19, (size_t)this, *a2, (llvm::APInt *)&v21);
  }
  if (v28 >= 0x41 && v27) {
    operator delete[](v27);
  }
  uint64_t v17 = v21;
  unsigned int v18 = v20;
  *(_DWORD *)(a1 + 8) = v22;
  *(void *)a1 = v17;
  int v22 = 0;
  *(unsigned char *)(a1 + 16) = 1;
  if (v18 >= 0x41)
  {
    if (v19) {
      operator delete[](v19);
    }
  }
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  v11[0] = *(void **)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v11);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(result + 48));
    if (result)
    {
      v11[0] = v12;
      v11[1] = (void *)0x100000000;
      mlir::Operation::fold(v5, 0, 0, (uint64_t)v11);
      unint64_t v6 = *(void *)v11[0] & 0xFFFFFFFFFFFFFFF8;
      if (v11[0] != v12) {
        free(v11[0]);
      }
      if (v6)
      {
        unsigned int v7 = *(void **)(*(void *)(*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          return mlir::detail::constant_int_value_binder::match(a3, v6);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void anonymous namespace'::XOrINotCmpI::~XOrINotCmpI(_anonymous_namespace_::XOrINotCmpI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::XOrINotCmpI::matchAndRewrite(_anonymous_namespace_::XOrINotCmpI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v30[4] = *MEMORY[0x1E4F143B8];
  unsigned int v28 = v30;
  v30[0] = a2;
  uint64_t v29 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  unsigned int v24 = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
    uint64_t v7 = *((void *)a3 + 2);
    if (!v7) {
      goto LABEL_45;
    }
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *((void *)v4 + 3);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
  uint64_t v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
  {
    if (!*(unsigned char *)(DefiningOp + 47)
      || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(DefiningOp, (uint64_t)"predicate", 9), !v11))
    {
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v6 + 56, "predicate", 9uLL);
    }
    if (!InherentAttr || (mlir::arith::CmpIPredicateAttr::classof(InherentAttr) & 1) == 0)
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v6 + 24);
        goto LABEL_35;
      }
      goto LABEL_43;
    }
    if ((*(unsigned char *)(v6 + 46) & 0x80) != 0)
    {
      uint64_t v12 = v29;
      if (v29 < HIDWORD(v29)) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v12 = v29;
      if (v29 < HIDWORD(v29)) {
        goto LABEL_19;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v12 + 1, 8);
    LODWORD(v12) = v29;
LABEL_19:
    v28[v12] = v6;
    LODWORD(v29) = v29 + 1;
    unsigned int v24 = *(void **)(*((void *)v4 + 9) + 56);
    uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v27 = (void **)(v13 - 16);
      uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v27);
      if (v15)
      {
        uint64_t v16 = v15;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v15 + 48)))
        {
          unsigned int v24 = v26;
          uint64_t v25 = 0x100000000;
          mlir::Operation::fold(v16, 0, 0, (uint64_t)&v24);
          unint64_t v17 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
          if (v24 != v26) {
            free(v24);
          }
          if (v17)
          {
            unsigned int v24 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Co"
                  "nstant(&$0)))' failed to satisfy constraint: 'constant attribute 1'";
            uint64_t v25 = 169;
            uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 1u);
            if (v17 == mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1) {
              || (v27 = &v24, (uint64_t v19 = *((void *)a3 + 2)) != 0)
            }
              && mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
            {
              int v20 = v29;
              if (v29 >= HIDWORD(v29))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v29 + 1, 8);
                int v20 = v29;
              }
              v28[v20] = v14;
              LODWORD(v29) = v29 + 1;
              uint64_t v21 = *(void *)(v28[1] + 24);
              unsigned int v24 = *(void **)(*v28 + 24);
              uint64_t v25 = v21;
              mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)2, 0);
            }
            goto LABEL_43;
          }
        }
      }
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v14 + 24);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *((void *)v4 + 3);
LABEL_35:
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v7 + 64))(v7, v8, v9, &v24);
        int v22 = v28;
        if (v28 == v30) {
          return v7;
        }
        goto LABEL_46;
      }
    }
LABEL_43:
    uint64_t v7 = 0;
    int v22 = v28;
    if (v28 == v30) {
      return v7;
    }
    goto LABEL_46;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *(void *)(v6 + 24);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
LABEL_45:
  int v22 = v28;
  if (v28 != v30) {
LABEL_46:
  }
    free(v22);
  return v7;
}

uint64_t llvm::SmallVectorImpl<mlir::NamedAttribute>::emplace_back<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(a1, a2, a3);
  }
  else
  {
    mlir::NamedAttribute::NamedAttribute((void *)(*(void *)a1 + 16 * v4), *a2, *a3);
    unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
    return *(void *)a1 + 16 * v5 - 16;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::CmpIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.cmpi";
    v20[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::CmpIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  uint64_t v14 = 97;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization3(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  uint64_t v4 = mlir::Diagnostic::operator<<(a2, v14);
  uint64_t v5 = v4 + 16;
  unint64_t v6 = *(void *)(v4 + 16);
  int v16 = 3;
  uint64_t v17 = ": constant attribute 1";
  uint64_t v18 = 22;
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  uint64_t v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    unint64_t v11 = v7 + 1;
    BOOL v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      uint64_t v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v16;
    }
  }
  unint64_t v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  __n128 result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *unint64_t v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  mlir::NamedAttribute::NamedAttribute(&v9, *a2, *a3);
  long long v4 = v9;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    long long v8 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + 1, 16);
    long long v4 = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(void *)a1 + 16 * v5) = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(void *)a1 + 16 * v6 - 16;
}

void anonymous namespace'::XOrIOfExtUI::~XOrIOfExtUI(_anonymous_namespace_::XOrIOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::XOrIOfExtUI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        int v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::XOrIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::ExtUIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.extui";
    v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_8(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_9(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::XOrIOfExtSI::~XOrIOfExtSI(_anonymous_namespace_::XOrIOfExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::XOrIOfExtSI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        int v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_6(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_7(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2)
{
  unint64_t v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v5 == v4)
  {
    unsigned int v6 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8, v3);
    if (v5 != (void *)v8[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::changeSign(v6);
      uint64_t v7 = a1 + 8;
      if (v5 != (void *)v8[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
      a1[32] = 1;
      if (v5 != (void *)v8[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
      return;
    }
  }
  else
  {
    unsigned int v6 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v8, v3);
    if (v5 != (void *)v8[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::changeSign(v6);
  uint64_t v7 = a1 + 8;
  if (v5 == (void *)v8[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v8);
  a1[32] = 1;
  if (v5 == (void *)v8[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v17 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v9 = v8;
    a1 = v17;
    if (v9)
    {
      uint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      unint64_t v19 = 63;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v19;
      }
      int v12 = &v18[v11];
      unint64_t v13 = v19 - v11;
      if (v19 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v19 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v17;
    }
  }
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v3[340]);
  if (v20)
  {
    char v5 = BYTE1(v18);
    if ((_BYTE)v18)
    {
      unint64_t v6 = v19;
      *(unsigned char *)a2 = (_BYTE)v18;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v6;
    }
    else
    {
      unint64_t v7 = v19;
      unint64_t v19 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v7;
    }
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1[2];
  unint64_t v5 = v4 + a3;
  if (v5 > a1[3])
  {
    unint64_t v8 = *(void *)a1 + 32 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v13 = (uint64_t)(a2 - *(void *)a1) >> 5;
      unint64_t v17 = 0;
      uint64_t v14 = a1 + 4;
      unint64_t v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v15);
      unsigned int v16 = v17;
      if (*(unsigned int **)a1 != v14) {
        free(*(void **)a1);
      }
      *(void *)a1 = v15;
      a1[3] = v16;
      return &v15[32 * v13];
    }
    else
    {
      unint64_t v17 = 0;
      unint64_t v10 = a1 + 4;
      unint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v11);
      unsigned int v12 = v17;
      if (*(unsigned int **)a1 != v10) {
        free(*(void **)a1);
      }
      *(void *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::detail::constant_float_predicate_matcher::match(llvm::APFloatBase *a1, uint64_t a2)
{
  unint64_t v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(a1);
  unint64_t v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v4);
  if (v5 != v4)
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v4);
    unint64_t v8 = v9;
    if (mlir::detail::constant_float_value_binder::match((uint64_t *)&v8, a2)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    if (v5 != (llvm::APFloatBase *)v10[0]) {
      goto LABEL_4;
    }
LABEL_8:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
    return v6;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)v4);
  unint64_t v8 = v9;
  if (!mlir::detail::constant_float_value_binder::match((uint64_t *)&v8, a2)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v6 = (*(uint64_t (**)(unsigned char *))a1)(v9);
  if (v5 == (llvm::APFloatBase *)v10[0]) {
    goto LABEL_8;
  }
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  return v6;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2)
{
  uint64_t v4 = (void *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, (uint64_t)a2);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v4, (uint64_t)a2);
  }
  return a1;
}

uint64_t mlir::detail::constant_float_value_binder::match(uint64_t *a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = *(void **)(*(void *)a2 + 136);
  uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  BOOL v5 = v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v20[0] = v6;
  if (v5)
  {
    mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
    unsigned int v16 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
    unint64_t v17 = (void *)v22[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v16) == v17) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
    }
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2)) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v8 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v21) ? a2 : 0;
      uint64_t v19 = v8;
      if (v8)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
        mlir::NamedAttribute::NamedAttribute(&v21, v19, 0);
        uint64_t v9 = v19;
        uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v19);
        mlir::NamedAttribute::NamedAttribute(v20, v9, NumElements);
        uint64_t v11 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v21);
        BOOL v12 = *(void *)(*(void *)v11 + 136) == (void)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
        LODWORD(v4) = v12;
        if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0;
        }
        v20[0] = v13;
        if (v12)
        {
          mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
          uint64_t v14 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
          unint64_t v15 = (void *)v22[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v14) == v15) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
          }
        }
        LODWORD(v8) = 1;
      }
    }
    return v8 & v4;
  }
}

llvm::APFloatBase *llvm::APFloat::Storage::operator=(llvm::APFloatBase *a1, llvm::APFloatBase *a2)
{
  uint64_t v4 = *(void **)a1;
  BOOL v5 = llvm::APFloatBase::PPCDoubleDouble(a1);
  uint64_t v6 = *(void **)a2;
  if (v5 != v4 && v5 != v6)
  {
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
    return a1;
  }
  uint64_t v8 = v5;
  if (v5 != v4)
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
    if (v8 == *(void **)a2) {
      goto LABEL_17;
    }
LABEL_14:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)a2);
    return a1;
  }
  if (v4 == v6)
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
  }
  else
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    if (v8 != *(void **)a2) {
      goto LABEL_14;
    }
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, a2);
  return a1;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x1E4F143B8];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::add(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::add((uint64_t *)v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x1E4F143B8];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::subtract(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::subtract((llvm::detail::DoubleAPFloat *)v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

llvm::detail::DoubleAPFloat *llvm::maximum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = v9;
  if (v9 == v8)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      BOOL v12 = v7;
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)this + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
LABEL_4:
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  uint64_t v14 = (void *)*((void *)a2 + 1);
  if (v9 == v14)
  {
    if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((unsigned char *)a2 + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  unint64_t v15 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v15 = this;
  }
  unsigned int v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) == 3
    && (v9 != v14 ? (unint64_t v17 = a2) : (unint64_t v17 = (const llvm::APFloat *)*((void *)a2 + 2)),
        (char v18 = *((unsigned char *)v17 + 28), (v18 & 7) == 3) && ((v16 >> 3) & 1) != (v18 & 8) >> 3))
  {
    if ((v16 & 8) != 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = this;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    char v20 = (void *)*((void *)v19 + 1);
    BOOL v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v9 == v8) {
      int v21 = llvm::detail::DoubleAPFloat::compare(v7, v12);
    }
    else {
      int v21 = llvm::detail::IEEEFloat::compare(v7, v12);
    }
    if (v21) {
      int v22 = this;
    }
    else {
      int v22 = a2;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    int v23 = (void *)*((void *)v22 + 1);
    BOOL v12 = (llvm *)((char *)v22 + 8);
    if (v10 != v23) {
      goto LABEL_4;
    }
  }
LABEL_9:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

BOOL llvm::APFloat::operator<(void *a1, uint64_t a2)
{
  unint64_t v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  uint64_t v4 = (void *)a1[1];
  BOOL v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4) {
    return llvm::detail::DoubleAPFloat::compare(v3, v6) == 0;
  }
  else {
    return llvm::detail::IEEEFloat::compare(v3, v6) == 0;
  }
}

llvm::detail::DoubleAPFloat *llvm::minimum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = v9;
  if (v9 == v8)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      BOOL v12 = v7;
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)this + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
LABEL_4:
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  uint64_t v14 = (void *)*((void *)a2 + 1);
  if (v9 == v14)
  {
    if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((unsigned char *)a2 + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  unint64_t v15 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v15 = this;
  }
  unsigned int v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) != 3) {
    goto LABEL_33;
  }
  unint64_t v17 = (const llvm::APFloat *)*((void *)a2 + 2);
  if (v9 != v14) {
    unint64_t v17 = a2;
  }
  char v18 = *((unsigned char *)v17 + 28);
  if ((v18 & 7) == 3 && ((v16 >> 3) & 1) != (v18 & 8) >> 3)
  {
    if ((v16 & 8) != 0) {
      uint64_t v19 = this;
    }
    else {
      uint64_t v19 = a2;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    char v20 = (void *)*((void *)v19 + 1);
    BOOL v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20) {
      goto LABEL_4;
    }
  }
  else
  {
LABEL_33:
    int v21 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v10 == v14)
    {
      if (llvm::detail::DoubleAPFloat::compare(v21, v7)) {
        unsigned int v24 = this;
      }
      else {
        unsigned int v24 = a2;
      }
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      uint64_t v25 = (void *)*((void *)v24 + 1);
      BOOL v12 = (llvm *)((char *)v24 + 8);
      if (v10 != v25) {
        goto LABEL_4;
      }
    }
    else
    {
      if (llvm::detail::IEEEFloat::compare(v21, v7)) {
        int v22 = this;
      }
      else {
        int v22 = a2;
      }
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      int v23 = (void *)*((void *)v22 + 1);
      BOOL v12 = (llvm *)((char *)v22 + 8);
      if (v10 != v23) {
        goto LABEL_4;
      }
    }
  }
LABEL_9:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

llvm::detail::DoubleAPFloat *llvm::minnum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v10 = this;
  }
  if ((*((unsigned char *)v10 + 28) & 7) != 1)
  {
    uint64_t v14 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v9 == *((void **)a2 + 1))
    {
      if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) != 1)
      {
        int v15 = llvm::detail::DoubleAPFloat::compare(v14, v7);
LABEL_17:
        if (v15) {
          unsigned int v16 = this;
        }
        else {
          unsigned int v16 = a2;
        }
        uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
        unint64_t v17 = (void *)*((void *)v16 + 1);
        BOOL v12 = (llvm *)((char *)v16 + 8);
        if (v9 != v17) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 7) != 1)
    {
      int v15 = llvm::detail::IEEEFloat::compare(v14, v7);
      goto LABEL_17;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
    if (v9 != v8) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  if (v9 != *((void **)a2 + 1))
  {
LABEL_5:
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
LABEL_13:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x1E4F143B8];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11, v5);
    uint64_t v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::multiply(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::multiply(v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void anonymous namespace'::MulFOfNegF::~MulFOfNegF(_anonymous_namespace_::MulFOfNegF *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::MulFOfNegF::matchAndRewrite(_anonymous_namespace_::MulFOfNegF *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v29[4] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v25[0] = v5;
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  uint64_t v27 = v29;
  v29[0] = a2;
  uint64_t v28 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = 0;
  }
  v26[0] = *(void **)(*((void *)v7 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!DefiningOp)
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_33;
    }
    uint64_t v19 = *((void *)v7 + 3);
LABEL_30:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v18 + 64))(v18, v19, v20, v26);
LABEL_31:
    uint64_t v18 = v17;
    int v21 = v27;
    if (v27 == v29) {
      return v18;
    }
    goto LABEL_35;
  }
  uint64_t v9 = DefiningOp;
  {
    int v10 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
      int v10 = v28;
    }
    v27[v10] = v9;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(void **)(*((void *)v7 + 9) + 56);
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v26);
    if (v11)
    {
      uint64_t v12 = v11;
      {
        int v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
          int v13 = v28;
        }
        v27[v13] = v12;
        LODWORD(v28) = v28 + 1;
        if (!*((unsigned char *)a2 + 47)
          || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"fastmath", 8), !v15))
        {
          uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "fastmath", 8uLL);
        }
        if (!InherentAttr
          || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        {
          mlir::arith::FastMathFlagsAttr::get(*((mlir::MLIRContext **)a3 + 1), 0);
        }
        if ((*(void *)(*(void *)(v24[0] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v25[0] + 24)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          int v23 = *(void **)(v27[1] + 24);
          v26[0] = *(void **)(*v27 + 24);
          v26[1] = v23;
          v26[2] = *(void **)(v27[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v26, (mlir::MLIRContext *)3, 0);
        }
        uint64_t v16 = *((void *)a3 + 2);
        if (v16)
        {
          if (mlir::RewriterBase::Listener::classof(v16))
          {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_33;
    }
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v19 = *((void *)v7 + 3);
      goto LABEL_30;
    }
  }
LABEL_33:
  uint64_t v18 = 0;
LABEL_34:
  int v21 = v27;
  if (v27 != v29) {
LABEL_35:
  }
    free(v21);
  return v18;
}

uint64_t anonymous namespace'::static_dag_matcher_10(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(void *)(a2 + 72);
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr) {
        goto LABEL_16;
      }
LABEL_15:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        return 1;
      }
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v7);
  if (result) {
  return result;
  }
}

uint64_t anonymous namespace'::static_dag_matcher_11(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(void *)(a2 + 72);
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr) {
        goto LABEL_16;
      }
LABEL_15:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        return 1;
      }
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v7);
  if (result) {
  return result;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::MulFOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mulf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.mulf";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_10(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_11(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  __n128 *v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}