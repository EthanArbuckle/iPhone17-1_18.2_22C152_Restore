uint64_t mlir::detail::Parser::parseDenseElementsAttr(void *a1, void *a2)
{
  const char *Loc;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t Attr;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v16;
  uint64_t v17;
  __int16 v18;
  void *v19[2];
  uint64_t v20;
  _WORD v21[16];
  void *__p;
  void *v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E4F143B8];
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(a1[1] + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 8), (uint64_t)v19);
  v5 = a1[1];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v19;
  *(void *)(v5 + 72) = v20;
  v19[0] = "expected '<' after 'dense'";
  v21[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v19)) {
    return 0;
  }
  v19[0] = a1;
  v19[1] = v21;
  v20 = 0x400000000;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  LOBYTE(v25) = 0;
  v6 = a1[1];
  v7 = *(_DWORD *)(v6 + 56);
  switch(v7)
  {
    case 11:
      v10 = *(_OWORD *)(v6 + 56);
      v26 = *(void *)(v6 + 72);
      v25 = v10;
      v27 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      v11 = a1[1];
      *(_OWORD *)(v11 + 56) = v16;
      *(void *)(v11 + 72) = v17;
      break;
    case 22:
        goto LABEL_17;
      break;
    case 19:
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v16);
      v8 = a1[1];
      *(_OWORD *)(v8 + 56) = v16;
      *(void *)(v8 + 72) = v17;
      goto LABEL_12;
    default:
        goto LABEL_17;
      break;
  }
  *(void *)&v16 = "expected '>'";
  v18 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v16)) {
    goto LABEL_17;
  }
LABEL_12:
  if (a2)
  {
    v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    if (v12) {
      goto LABEL_14;
    }
LABEL_17:
    Attr = 0;
    v14 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(a1[1] + 56));
  v12 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, 0);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_14:
  v14 = __p;
  if (__p)
  {
LABEL_18:
    v23 = v14;
    operator delete(v14);
  }
LABEL_19:
  if (v19[1] != v21) {
    free(v19[1]);
  }
  return Attr;
}

void *mlir::detail::Parser::parseDenseResourceElementsAttr(uint64_t ****a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(a1[1] + 7));
  mlir::Lexer::lexToken((mlir::Lexer *)(a1[1] + 1), (uint64_t)&v42);
  v5 = a1[1];
  *(_OWORD *)(v5 + 7) = v42;
  v5[9] = v43;
  *(void *)&long long v42 = "expected '<' after 'dense_resource'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)&v42)) {
    return 0;
  }
  LoadedDialect = (mlir::Dialect *)mlir::MLIRContext::getLoadedDialect(**a1[1], (uint64_t)"builtin", 7);
  mlir::detail::Parser::parseResourceHandle((mlir::detail::Parser *)a1, LoadedDialect, &v39);
  if (!v41) {
    return 0;
  }
  *(void *)&long long v42 = "expected '>'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v42)) {
    return 0;
  }
  uint64_t v7 = *((void *)&v39 + 1);
  v8 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v36 = v7;
    v8 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v7 = v36;
    if (v28)
    {
      *(void *)&long long v42 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
      *((void *)&v42 + 1) = 103;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v42, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v42 + 1) >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = *((void *)&v42 + 1);
      }
      uint64_t v31 = v42 + v30;
      unint64_t v32 = *((void *)&v42 + 1) - v30;
      if (*((void *)&v42 + 1) - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = *((void *)&v42 + 1) - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v31 + v33, v35);
      v8 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v7 = v36;
    }
  }
  if (v7 != v8[414])
  {
    __int16 v44 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)&v42, v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return 0;
    }
    v9 = v58;
    if (v58)
    {
      v10 = v59;
      v11 = v58;
      if (v59 != v58)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = v58;
      }
      v59 = v9;
      operator delete(v11);
    }
    v12 = v56;
    if (v56)
    {
      v13 = v57;
      v14 = v56;
      if (v57 != v56)
      {
        do
        {
          v16 = (void *)*--v13;
          v15 = v16;
          void *v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        v14 = v56;
      }
      v57 = v12;
      operator delete(v14);
    }
    v19 = v54;
    if (v54 == &v55) {
      return 0;
    }
    goto LABEL_27;
  }
  if (a2)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8)) {
      goto LABEL_22;
    }
    goto LABEL_33;
  }
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(a1[1] + 7));
  *(void *)&long long v42 = "expected ':'";
  __int16 v44 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)&v42)) {
    return 0;
  }
  result = (void *)mlir::detail::Parser::parseType((mlir::detail::Parser *)a1);
  if (result)
  {
    a2 = result;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*result + 8))
    {
LABEL_22:
      uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
      long long v37 = v39;
      uint64_t v38 = v40;
      return (void *)mlir::DenseResourceElementsAttr::get((uint64_t)a2, v17, &v37);
    }
LABEL_33:
    __int16 v44 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)&v42, v45);
    if (v45[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    }
    if (!v52) {
      return 0;
    }
    v20 = (void **)__p;
    if (__p)
    {
      v21 = v51;
      v22 = __p;
      if (v51 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v51 = v20;
      operator delete(v22);
    }
    v23 = v48;
    if (v48)
    {
      v24 = v49;
      v25 = v48;
      if (v49 != v48)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        v25 = v48;
      }
      v49 = v23;
      operator delete(v25);
    }
    v19 = v46;
    if (v46 == &v47) {
      return 0;
    }
LABEL_27:
    free(v19);
    return 0;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDenseArrayAttr(mlir::detail::Parser *a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v52);
  uint64_t v2 = *((void *)a1 + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v52;
  *(void *)(v2 + 72) = *(void *)&v52[16];
  *(void *)char v52 = "expected '<' after 'array'";
  WORD4(v53) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v52)) {
    return 0;
  }
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
  uint64_t v42 = mlir::detail::Parser::parseType(a1);
  if (!v42)
  {
    *(void *)char v52 = "expected an integer or floating point type";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)v52, v60);
    if (v60[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v67) {
      return 0;
    }
    v12 = v65;
    if (v65)
    {
      v13 = v66;
      v14 = v65;
      if (v66 != v65)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = v65;
      }
      v66 = v12;
      operator delete(v14);
    }
    v15 = v63;
    if (v63)
    {
      v16 = v64;
      uint64_t v17 = v63;
      if (v64 != v63)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          void *v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v63;
      }
      v64 = v15;
      operator delete(v17);
    }
    uint64_t v36 = v61;
    if (v61 == &v62) {
      return 0;
    }
LABEL_58:
    free(v36);
    return 0;
  }
  if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v42))
  {
    v40[0] = "expected integer or float type, got: ";
    __int16 v41 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)v40, v52);
    if (*(void *)v52)
    {
      v20 = v43;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v43, v42);
      uint64_t v21 = v53;
      if (DWORD2(v53) >= HIDWORD(v53))
      {
        unint64_t v38 = DWORD2(v53) + 1;
        if ((unint64_t)v53 <= (unint64_t)v43
          && (unint64_t)v53 + 24 * DWORD2(v53) > (unint64_t)v43)
        {
          long long v39 = &v43[-v53];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          uint64_t v21 = v53;
          v20 = &v39[v53];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v54, v38, 24);
          v20 = v43;
          uint64_t v21 = v53;
        }
      }
      uint64_t v22 = v21 + 24 * DWORD2(v53);
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v22 = v23;
      ++DWORD2(v53);
      if (*(void *)v52) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
      }
    }
    if (!v59) {
      return 0;
    }
    v24 = (void **)v57;
    if (v57)
    {
      v25 = v58;
      v26 = v57;
      if (v58 != v57)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = v57;
      }
      v58 = v24;
      operator delete(v26);
    }
    v27 = v55;
    if (v55)
    {
      int v28 = v56;
      unint64_t v29 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          unint64_t v30 = v31;
          *int v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        unint64_t v29 = v55;
      }
      v56 = v27;
      operator delete(v29);
    }
    uint64_t v36 = (uint64_t *)v53;
    if ((unsigned char *)v53 == v54) {
      return 0;
    }
    goto LABEL_58;
  }
  if (!mlir::Type::isInteger((mlir::Type *)&v42, 1) && (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v42) & 7) != 0)
  {
    *(void *)char v52 = "element type bitwidth must be a multiple of 8";
    WORD4(v53) = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)v52, v44);
    if (v44[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    }
    if (!v51) {
      return 0;
    }
    v4 = (void **)__p;
    if (__p)
    {
      v5 = v50;
      v6 = __p;
      if (v50 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v50 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v47;
    if (v47)
    {
      v8 = v48;
      v9 = v47;
      if (v48 != v47)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          void *v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        v9 = v47;
      }
      v48 = v7;
      operator delete(v9);
    }
    uint64_t v36 = v45;
    if (v45 == &v46) {
      return 0;
    }
    goto LABEL_58;
  }
  uint64_t v32 = *((void *)a1 + 1);
  if (*(_DWORD *)(v32 + 56) == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)v52);
    uint64_t v33 = *((void *)a1 + 1);
    *(_OWORD *)(v33 + 56) = *(_OWORD *)v52;
    *(void *)(v33 + 72) = *(void *)&v52[16];
    return mlir::DenseArrayAttr::get(v42, 0, 0, 0);
  }
  else
  {
    *(void *)char v52 = "expected ':' after dense array type";
    WORD4(v53) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v52)) {
      return 0;
    }
    *(void *)char v52 = v42;
    *(_OWORD *)&v52[8] = 0u;
    long long v53 = 0u;
    v40[0] = v52;
    v40[1] = a1;
    if (mlir::Type::isIntOrIndex((mlir::Type *)&v42)) {
      uint64_t v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>;
    }
    else {
      uint64_t v35 = (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>;
    }
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)a1, 0, v35, (uint64_t)v40, 0, 0)
      && (v40[0] = "expected '>' to close an array attribute",
          __int16 v41 = 259,
          mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)v40)))
    {
      uint64_t v34 = mlir::DenseArrayAttr::get(*(uint64_t *)v52, DWORD2(v53), *(uint64_t *)&v52[8], *(void *)&v52[16] - *(void *)&v52[8]);
    }
    else
    {
      uint64_t v34 = 0;
    }
    if (*(void *)&v52[8])
    {
      *(void *)&v52[16] = *(void *)&v52[8];
      operator delete(*(void **)&v52[8]);
    }
  }
  return v34;
}

uint64_t mlir::detail::Parser::parseAttributeDict(mlir::detail::Parser *this, mlir::NamedAttrList *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 1;
  v5 = (llvm *)-4096;
  uint64_t v6 = -4096;
  uint64_t v7 = -4096;
  uint64_t v8 = -4096;
  v3[0] = this;
  v3[1] = &v4;
  v3[2] = a2;
  uint64_t result = mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 4, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>, (uint64_t)v3, (uint64_t)" in attribute dictionary", 24);
  if ((v4 & 1) == 0) {
    llvm::deallocate_buffer(v5, (void *)(8 * v6));
  }
  return result;
}

llvm::APFloatBase *mlir::detail::Parser::parseFloatAttr(mlir::detail::Parser *a1, uint64_t F64Type, int a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)(*((void *)a1 + 1) + 56));
  if (v7)
  {
    double v8 = *(double *)&FloatingPointValue;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v43);
    uint64_t v10 = *((void *)a1 + 1);
    *(_OWORD *)(v10 + 56) = v43;
    *(void *)(v10 + 72) = v44;
    if (!F64Type)
    {
      uint64_t v11 = *((void *)a1 + 1);
      if (*(_DWORD *)(v11 + 56) == 15)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v43);
        uint64_t v12 = *((void *)a1 + 1);
        *(_OWORD *)(v12 + 56) = v43;
        *(void *)(v12 + 72) = v44;
        uint64_t result = (llvm::APFloatBase *)mlir::detail::Parser::parseType(a1);
        F64Type = (uint64_t)result;
        if (!result) {
          return result;
        }
      }
      else
      {
        F64Type = mlir::Builder::getF64Type((mlir::Float64Type **)a1, v9);
      }
    }
    uint64_t v22 = *(void **)(*(void *)F64Type + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      double v34 = v8;
      if (a3) {
        double v34 = -v8;
      }
      return mlir::FloatAttr::get(F64Type, v34);
    }
    else
    {
      *(void *)&long long v43 = "floating point value not valid for specified type";
      __int16 v45 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v46);
      if (v46[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      }
      if (v53)
      {
        uint64_t v35 = (void **)v51;
        if (v51)
        {
          uint64_t v36 = v52;
          long long v37 = v51;
          if (v52 != v51)
          {
            do
              uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            long long v37 = v51;
          }
          char v52 = v35;
          operator delete(v37);
        }
        unint64_t v38 = v49;
        if (v49)
        {
          long long v39 = v50;
          uint64_t v40 = v49;
          if (v50 != v49)
          {
            do
            {
              uint64_t v42 = (void *)*--v39;
              __int16 v41 = v42;
              *long long v39 = 0;
              if (v42) {
                operator delete[](v41);
              }
            }
            while (v39 != v38);
            uint64_t v40 = v49;
          }
          v50 = v38;
          operator delete(v40);
        }
        if (v47 != &v48) {
          free(v47);
        }
      }
      return 0;
    }
  }
  else
  {
    *(void *)&long long v43 = "floating point value too large for attribute";
    __int16 v45 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v43, v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (v61)
    {
      v14 = (void **)__p;
      if (__p)
      {
        v15 = v60;
        v16 = __p;
        if (v60 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        char v60 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v57;
      if (v57)
      {
        v18 = v58;
        v19 = v57;
        if (v58 != v57)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            v20 = v21;
            void *v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          v19 = v57;
        }
        v58 = v17;
        operator delete(v19);
      }
      if (v55 != &v56) {
        free(v55);
      }
    }
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseDecOrHexAttr(mlir::detail::Parser *a1, uint64_t a2, int a3)
{
  IntegerType = (void *)a2;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 1);
  long long v59 = *(_OWORD *)(v6 + 56);
  unint64_t v7 = *(void *)(v6 + 72);
  unint64_t v60 = v7;
  char v61 = (void *)a2;
  uint64_t v8 = *((void *)&v59 + 1);
  Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v59);
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v86);
  uint64_t v10 = *((void *)a1 + 1);
  *(_OWORD *)(v10 + 56) = v86;
  *(void *)(v10 + 72) = v87;
  if (!IntegerType)
  {
    uint64_t v11 = *((void *)a1 + 1);
    if (*(_DWORD *)(v11 + 56) == 15)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v86);
      uint64_t v12 = *((void *)a1 + 1);
      *(_OWORD *)(v12 + 56) = v86;
      *(void *)(v12 + 72) = v87;
      IntegerType = (void *)mlir::detail::Parser::parseType(a1);
      char v61 = IntegerType;
      if (!IntegerType) {
        return 0;
      }
    }
    else
    {
      IntegerType = (void *)mlir::Builder::getIntegerType(a1, 0x40u);
      char v61 = IntegerType;
    }
  }
  v14 = *(void **)(*(void *)IntegerType + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v56 = IntegerType;
    LOBYTE(v86) = 0;
    LOBYTE(v88) = 0;
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v56);
    unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v56);
    int v28 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral((uint64_t)a1, (uint64_t)&v86, (mlir::Token *)&v59, a3, FloatSemantics, Width);
    if ((_BYTE)v28)
    {
      int v28 = (llvm::APFloatBase *)mlir::FloatAttr::get((uint64_t)v56, (uint64_t)&v86);
      uint64_t IntegerAttr = (uint64_t)v28;
      if (!(_BYTE)v88) {
        return IntegerAttr;
      }
    }
    else
    {
      uint64_t IntegerAttr = 0;
      if (!(_BYTE)v88) {
        return IntegerAttr;
      }
    }
    unint64_t v29 = (void *)*((void *)&v86 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v28) == v29) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v86 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v86 + 8));
    }
  }
  else
  {
    if (v14 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && v14 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      *(void *)&long long v86 = "integer literal not valid for specified type";
      __int16 v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)&v86, v78);
      if (v78[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      }
      if (!v85) {
        return 0;
      }
      uint64_t v31 = (void **)__p;
      if (__p)
      {
        uint64_t v32 = v84;
        uint64_t v33 = __p;
        if (v84 != __p)
        {
          do
            uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        v84 = v31;
        operator delete(v33);
      }
      double v34 = v81;
      if (v81)
      {
        uint64_t v35 = v82;
        uint64_t v36 = v81;
        if (v82 != v81)
        {
          do
          {
            unint64_t v38 = (void *)*--v35;
            long long v37 = v38;
            *uint64_t v35 = 0;
            if (v38) {
              operator delete[](v37);
            }
          }
          while (v35 != v34);
          uint64_t v36 = v81;
        }
        v82 = v34;
        operator delete(v36);
      }
      uint64_t v55 = v79;
      if (v79 == &v80) {
        return 0;
      }
      goto LABEL_114;
    }
    if (a3)
    {
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v61))
      {
        *(void *)&long long v86 = "negative integer literal not valid for unsigned integer type";
        __int16 v88 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)&v86, v70);
        if (v70[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
        }
        if (!v77) {
          return 0;
        }
        long long v39 = (void **)v75;
        if (v75)
        {
          uint64_t v40 = v76;
          __int16 v41 = v75;
          if (v76 != v75)
          {
            do
              uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            __int16 v41 = v75;
          }
          v76 = v39;
          operator delete(v41);
        }
        uint64_t v42 = v73;
        if (v73)
        {
          long long v43 = v74;
          uint64_t v44 = v73;
          if (v74 != v73)
          {
            do
            {
              uint64_t v46 = (void *)*--v43;
              __int16 v45 = v46;
              *long long v43 = 0;
              if (v46) {
                operator delete[](v45);
              }
            }
            while (v43 != v42);
            uint64_t v44 = v73;
          }
          v74 = v42;
          operator delete(v44);
        }
        uint64_t v55 = v71;
        if (v71 == &v72) {
          return 0;
        }
LABEL_114:
        free(v55);
        return 0;
      }
      IntegerType = v61;
    }
    buildAttributeAPInt((uint64_t)&v56, (uint64_t)IntegerType, a3, v8, v7);
    if (v58)
    {
      uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, (uint64_t)v61, (llvm::APInt *)&v56);
    }
    else
    {
      *(void *)&long long v86 = "integer constant out of range for attribute";
      __int16 v88 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, Loc, (uint64_t)&v86, v62);
      if (v62[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
      }
      if (v69)
      {
        uint64_t v47 = (void **)v67;
        if (v67)
        {
          uint64_t v48 = v68;
          v49 = v67;
          if (v68 != v67)
          {
            do
              uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            v49 = v67;
          }
          uint64_t v68 = v47;
          operator delete(v49);
        }
        v50 = v65;
        if (v65)
        {
          char v51 = v66;
          char v52 = v65;
          if (v66 != v65)
          {
            do
            {
              v54 = (void *)*--v51;
              char v53 = v54;
              *char v51 = 0;
              if (v54) {
                operator delete[](v53);
              }
            }
            while (v51 != v50);
            char v52 = v65;
          }
          v66 = v50;
          operator delete(v52);
        }
        if (v63 != &v64) {
          free(v63);
        }
      }
      uint64_t IntegerAttr = 0;
    }
    if (v58 && v57 >= 0x41 && v56) {
      operator delete[](v56);
    }
  }
  return IntegerAttr;
}

uint64_t mlir::detail::Parser::parseSparseElementsAttr(char *a1, void *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v61);
  uint64_t v5 = *((void *)a1 + 1);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v61;
  *(void *)(v5 + 72) = v62;
  v61[0] = "Expected '<' after 'sparse'";
  v63[4] = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 23, (uint64_t)v61)) {
    return 0;
  }
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u);
  uint64_t v7 = *((void *)a1 + 1);
  int v9 = *(_DWORD *)(v7 + 56);
  uint64_t v8 = (mlir::Token *)(v7 + 56);
  if (v9 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)v61);
    uint64_t v10 = *((void *)a1 + 1);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)v61;
    *(void *)(v10 + 72) = v62;
    char v51 = (const char *)mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
    char v52 = v11;
    if (v51)
    {
      v61[0] = 0;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
      v61[1] = v12;
      v13 = (void *)mlir::RankedTensorType::get((uint64_t)v61, 2, IntegerType, 0);
      uint64_t v14 = (uint64_t)v13;
      if (v13) {
        uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      v61[0] = 0;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
      v24 = (void *)mlir::RankedTensorType::get((uint64_t)v61, 1, OperandRange, 0);
      uint64_t v25 = (uint64_t)v24;
      if (v24) {
        uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = mlir::DenseElementsAttr::get(v14, v15, 0, 0);
      uint64_t v28 = mlir::DenseElementsAttr::get(v25, v26, 0, 0);
      *(void *)&long long v48 = Loc;
      v61[0] = a1;
      v61[1] = &v48;
      return mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>, (uint64_t)v61, (uint64_t)v51, (uint64_t)v52, v27, v28);
    }
    return 0;
  }
  uint64_t v17 = (const char *)mlir::Token::getLoc(v8);
  v61[0] = a1;
  v61[1] = v63;
  uint64_t v62 = 0x400000000;
  char v68 = 0;
  v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  char v67 = 0;
  if (*(_DWORD *)(*((void *)a1 + 1) + 56) == 22)
  {
      goto LABEL_15;
  }
  {
    goto LABEL_15;
  }
  char v51 = "expected ','";
  v54[4] = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)a1, 16, (uint64_t)&v51))
  {
    v18 = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
    char v51 = a1;
    char v52 = v54;
    uint64_t v53 = 0x400000000;
    char v60 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    __p = 0;
    LOBYTE(v58) = 0;
    uint64_t v19 = *((void *)a1 + 1);
    int v20 = *(_DWORD *)(v19 + 56);
    if (v20 == 22)
    {
        goto LABEL_29;
    }
    else if (v20 == 11)
    {
      long long v21 = *(_OWORD *)(v19 + 56);
      uint64_t v59 = *(void *)(v19 + 72);
      long long v58 = v21;
      char v60 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(v19 + 8), (uint64_t)&v48);
      uint64_t v22 = *((void *)a1 + 1);
      *(_OWORD *)(v22 + 56) = v48;
      *(void *)(v22 + 72) = v49;
    }
    {
      goto LABEL_29;
    }
    *(void *)&long long v48 = "expected '>'";
    __int16 v50 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)a1, 19, (uint64_t)&v48))
    {
      uint64_t v45 = mlir::detail::Parser::parseElementsLiteralType((mlir::detail::Parser *)a1, a2);
      uint64_t v46 = v29;
      if (v45)
      {
        long long v43 = 0;
        uint64_t v44 = 0;
        if (v62)
        {
          unint64_t v30 = (void *)mlir::RankedTensorType::get((uint64_t)v61[1], v62, IntegerType, 0);
          if (v30)
          {
LABEL_28:
            uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
            goto LABEL_40;
          }
        }
        else
        {
          *(void *)&long long v48 = 1;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
          *((void *)&v48 + 1) = v34;
          unint64_t v30 = (void *)mlir::RankedTensorType::get((uint64_t)&v48, 2, IntegerType, 0);
          if (v30) {
            goto LABEL_28;
          }
        }
        uint64_t v31 = 0;
LABEL_40:
        long long v43 = v30;
        uint64_t v44 = v31;
        uint64_t v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v45);
        uint64_t v37 = v53;
        if (v53)
        {
          unint64_t v38 = (long long *)v52;
        }
        else
        {
          *(void *)&long long v48 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v43);
          unint64_t v38 = &v48;
          uint64_t v37 = 1;
        }
        long long v39 = (void *)mlir::RankedTensorType::get((uint64_t)v38, v37, v36, 0);
        uint64_t v40 = (uint64_t)v39;
        if (v39) {
          uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v47 = Loc;
        *(void *)&long long v48 = a1;
        *((void *)&v48 + 1) = &v47;
        uint64_t Checked = mlir::SparseElementsAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>, (uint64_t)&v48, v45, v46, Attr, v42);
        uint64_t v32 = __p;
        if (!__p)
        {
LABEL_31:
          if (v52 != v54) {
            free(v52);
          }
          goto LABEL_33;
        }
LABEL_30:
        uint64_t v56 = v32;
        operator delete(v32);
        goto LABEL_31;
      }
    }
LABEL_29:
    uint64_t Checked = 0;
    uint64_t v32 = __p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_15:
  uint64_t Checked = 0;
LABEL_33:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v61[1] != v63) {
    free(v61[1]);
  }
  return Checked;
}

uint64_t mlir::detail::Parser::parseStridedLayoutAttr(mlir::detail::Parser *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  v25[0] = this;
  v25[1] = &Loc;
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v27);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(void *)(v2 + 72) = v28[0];
  *(void *)&long long v27 = "expected '<' after 'strided'";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27)) {
    return 0;
  }
  *(void *)&long long v22 = "expected '['";
  __int16 v24 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 22, (uint64_t)&v22)) {
    return 0;
  }
  *(void *)&long long v27 = v28;
  *((void *)&v27 + 1) = 0x600000000;
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 29) {
    goto LABEL_4;
  }
  unint64_t v7 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
  if (v8)
  {
    unint64_t v9 = v7;
    while (1)
    {
      uint64_t v10 = DWORD2(v27);
      if (DWORD2(v27) >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v28, DWORD2(v27) + 1, 8);
        uint64_t v10 = DWORD2(v27);
      }
      *(void *)(v27 + 8 * v10) = v9;
      ++DWORD2(v27);
      uint64_t v11 = *((void *)this + 1);
      if (*(_DWORD *)(v11 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v11 + 8), (uint64_t)&v22);
      uint64_t v12 = *((void *)this + 1);
      *(_OWORD *)(v12 + 56) = v22;
      *(void *)(v12 + 72) = v23;
      unint64_t v9 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
      if (!v13) {
        goto LABEL_25;
      }
    }
LABEL_4:
    *(void *)&long long v22 = "expected ']'";
    __int16 v24 = 259;
    if (mlir::detail::Parser::parseToken((uint64_t)this, 29, (uint64_t)&v22))
    {
      uint64_t v3 = *((void *)this + 1);
      if (*(_DWORD *)(v3 + 56) == 19)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v22);
        uint64_t v4 = *((void *)this + 1);
        *(_OWORD *)(v4 + 56) = v22;
        *(void *)(v4 + 72) = v23;
        if (mlir::StridedLayoutAttr::verify((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, 0, (void *)v27, DWORD2(v27)))
        {
          uint64_t v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), 0, v27, DWORD2(v27));
          uint64_t v6 = (void *)v27;
          if ((void *)v27 == v28) {
            return v5;
          }
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)&long long v22 = "expected ','";
        __int16 v24 = 259;
        if (mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v22))
        {
          int v20 = "expected 'offset' after comma";
          __int16 v21 = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 65, (uint64_t)&v20))
          {
            v18 = "expected ':' after 'offset'";
            __int16 v19 = 259;
            if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v18))
            {
              unint64_t v14 = mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()((uint64_t)this);
              if (v15)
              {
                uint64_t v16 = v14;
                *(void *)&long long v22 = "expected '>'";
                __int16 v24 = 259;
                if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v22))
                {
                  if (mlir::StridedLayoutAttr::verify((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>, (uint64_t)v25, v16, (void *)v27, DWORD2(v27)))
                  {
                    uint64_t v5 = mlir::StridedLayoutAttr::get(***((mlir::MLIRContext ****)this + 1), v16, v27, DWORD2(v27));
                    uint64_t v6 = (void *)v27;
                    if ((void *)v27 == v28) {
                      return v5;
                    }
                    goto LABEL_26;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  uint64_t v5 = 0;
  uint64_t v6 = (void *)v27;
  if ((void *)v27 != v28) {
LABEL_26:
  }
    free(v6);
  return v5;
}

uint64_t mlir::detail::Parser::parseDistinctAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*(void *)(a1 + 8) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v33);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v33;
  *(void *)(v5 + 72) = v34;
  *(void *)&long long v33 = "expected '[' after 'distinct'";
  __int16 v35 = 259;
  if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v33))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unint64_t v7 = *(unsigned __int8 **)(v6 + 64);
    unint64_t v8 = *(void *)(v6 + 72);
    *(void *)&long long v33 = "expected distinct ID";
    __int16 v35 = 259;
    if (mlir::detail::Parser::parseToken(a1, 10, (uint64_t)&v33))
    {
      v32[0] = mlir::Token::getUInt64IntegerValue(v7, v8);
      v32[1] = v9;
      if (!(_BYTE)v9)
      {
        *(void *)&long long v33 = "expected an unsigned 64-bit integer";
        __int16 v35 = 259;
        mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v37);
        if (v37[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
        }
        if (v44)
        {
          unint64_t v14 = (void **)__p;
          if (__p)
          {
            char v15 = v43;
            uint64_t v16 = __p;
            if (v43 != __p)
            {
              do
                char v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              uint64_t v16 = __p;
            }
            long long v43 = v14;
            operator delete(v16);
          }
          uint64_t v17 = v40;
          if (v40)
          {
            v18 = v41;
            __int16 v19 = v40;
            if (v41 != v40)
            {
              do
              {
                __int16 v21 = (void *)*--v18;
                int v20 = v21;
                void *v18 = 0;
                if (v21) {
                  operator delete[](v20);
                }
              }
              while (v18 != v17);
              __int16 v19 = v40;
            }
            uint64_t v41 = v17;
            operator delete(v19);
          }
          if (v38 != &v39) {
            free(v38);
          }
        }
        return 0;
      }
      *(void *)&long long v33 = "expected ']' to close distinct ID";
      __int16 v35 = 259;
      if (mlir::detail::Parser::parseToken(a1, 29, (uint64_t)&v33))
      {
        v30[0] = (uint64_t)"expected '<' after distinct ID";
        __int16 v31 = 259;
        if (mlir::detail::Parser::parseToken(a1, 23, (uint64_t)v30))
        {
          uint64_t v10 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v10 + 56) == 19)
          {
            mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v33);
            uint64_t v11 = *(void *)(a1 + 8);
            *(_OWORD *)(v11 + 56) = v33;
            *(void *)(v11 + 72) = v34;
            Unituint64_t Attr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v12);
            goto LABEL_24;
          }
          uint64_t v22 = mlir::detail::Parser::parseAttribute(a1, a2);
          if (!v22)
          {
            *(void *)&long long v33 = "expected attribute";
            __int16 v35 = 259;
            mlir::detail::Parser::emitError(a1, (uint64_t)&v33, v36);
            long long v27 = (mlir::InFlightDiagnostic *)v36;
            goto LABEL_34;
          }
          Unituint64_t Attr = v22;
          *(void *)&long long v33 = "expected '>' to close distinct attribute";
          __int16 v35 = 259;
          if (mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v33))
          {
LABEL_24:
            uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 80);
            __int16 v24 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find((uint64_t *)(v23 + 72), v32);
            if ((uint64_t *)(*(void *)(v23 + 72) + 16 * *(unsigned int *)(v23 + 88)) == v24)
            {
              v30[0] = (uint64_t)mlir::DistinctAttr::create(UnitAttr);
              llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>((void *)(v23 + 72), v32, v30, (uint64_t)&v33);
              uint64_t v25 = (uint64_t *)v33;
            }
            else
            {
              uint64_t v25 = v24;
              uint64_t v26 = (mlir::AffineMapAttr *)(v24 + 1);
              if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)(v24 + 1)) != UnitAttr)
              {
                v30[0] = (uint64_t)"referenced attribute does not match previous definition: ";
                __int16 v31 = 259;
                mlir::detail::Parser::emitError(a1, Loc, (uint64_t)v30, &v33);
                uint64_t Value = mlir::AffineMapAttr::getValue(v26);
                mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&v33, &Value);
                long long v27 = (mlir::InFlightDiagnostic *)&v33;
LABEL_34:
                mlir::InFlightDiagnostic::~InFlightDiagnostic(v27);
                return 0;
              }
            }
            return v25[1];
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(mlir::detail::Parser *a1, uint64_t *a2, uint64_t a3)
{
  switch(*(_DWORD *)(*((void *)a1 + 1) + 56))
  {
    case 4:
    case 5:
    case 9:
    case 0xA:
    case 0xB:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x22:
    case 0x23:
    case 0x29:
    case 0x2A:
    case 0x36:
    case 0x3B:
    case 0x43:
    case 0x4A:
    case 0x4D:
      uint64_t v4 = mlir::detail::Parser::parseAttribute(a1, a3);
      *a2 = v4;
      BOOL v5 = v4 != 0;
      int v6 = 1;
      break;
    default:
      uint64_t v9 = 0;
      __int16 v8 = mlir::detail::Parser::parseOptionalType(a1, (mlir::Type *)&v9);
      BOOL v5 = v8;
      int v6 = HIBYTE(v8);
      if ((_BYTE)v8 && HIBYTE(v8)) {
        *a2 = mlir::TypeAttr::get(v9);
      }
      break;
  }
  return v5 | (v6 << 8);
}

uint64_t mlir::detail::Parser::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 22) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 11) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

{
  llvm::APFloatBase *v4;

  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 4) {
    return 0;
  }
  uint64_t v4 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, a3);
  if (!v4) {
    return 256;
  }
  *a2 = v4;
  return 257;
}

void buildAttributeAPInt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  v19[1] = a5;
  uint64_t v20 = a2;
  v19[0] = a4;
  unsigned int v18 = 1;
  unsigned int v7 = 10;
  __p = 0;
  if (a5 >= 2)
  {
    if (*(unsigned char *)(a4 + 1) == 120) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = 10;
    }
  }
  if (!llvm::StringRef::getAsInteger((llvm::StringRef *)v19, v7, (llvm::APInt *)&__p))
  {
    if (mlir::Type::isIndex((mlir::Type *)&v20))
    {
      IntOrFloatBitunsigned int Width = 64;
      unsigned int v9 = v18;
      unsigned int v11 = v18 - 64;
      BOOL v10 = v18 > 0x40;
      if (v18 >= 0x40) {
        goto LABEL_10;
      }
    }
    else
    {
      IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v20);
      unsigned int v9 = v18;
      unsigned int v11 = v18 - IntOrFloatBitWidth;
      BOOL v10 = v18 > IntOrFloatBitWidth;
      if (v18 >= IntOrFloatBitWidth)
      {
LABEL_10:
        if (v10)
        {
          if (v9 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) < v11) {
              goto LABEL_43;
            }
          }
          else if (v9 + __clz((unint64_t)__p) - 64 < v11)
          {
            goto LABEL_43;
          }
          llvm::APInt::trunc((char *)&__p, IntOrFloatBitWidth, (uint64_t)&v15);
          if (v18 >= 0x41 && __p) {
            operator delete[](__p);
          }
          __p = v15;
          unsigned int v9 = v16;
          unsigned int v18 = v16;
        }
        if (!IntOrFloatBitWidth)
        {
          if (a3) {
            goto LABEL_43;
          }
          goto LABEL_47;
        }
LABEL_26:
        if (a3)
        {
          if (v9 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__p);
          }
          else
          {
            unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
            if (!v9) {
              unint64_t v12 = 0;
            }
            __p = (void *)(v12 & ~(unint64_t)__p);
          }
          llvm::APInt::operator++((uint64_t **)&__p);
          unsigned int v9 = v18;
          p_p = (void **)((char *)__p + 8 * ((v18 - 1) >> 6));
          if (v18 < 0x41) {
            p_p = &__p;
          }
          if ((((unint64_t)*p_p >> (v18 - 1)) & 1) == 0) {
            goto LABEL_43;
          }
        }
        else if (mlir::Type::isSignedInteger((mlir::Type *)&v20) || mlir::Type::isIndex((mlir::Type *)&v20))
        {
          unsigned int v9 = v18;
          char v13 = (void **)((char *)__p + 8 * ((v18 - 1) >> 6));
          if (v18 < 0x41) {
            char v13 = &__p;
          }
          if (((unint64_t)*v13 >> (v18 - 1)))
          {
LABEL_43:
            *(unsigned char *)a1 = 0;
            *(unsigned char *)(a1 + 16) = 0;
            if (v9 < 0x41) {
              return;
            }
            goto LABEL_44;
          }
        }
        else
        {
          unsigned int v9 = v18;
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v9;
        *(void *)a1 = __p;
        *(unsigned char *)(a1 + 16) = 1;
        return;
      }
    }
    llvm::APInt::zext((const void **)&__p, IntOrFloatBitWidth, (uint64_t)&v15);
    if (v18 >= 0x41 && __p) {
      operator delete[](__p);
    }
    __p = v15;
    unsigned int v9 = v16;
    unsigned int v18 = v16;
    goto LABEL_26;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v18 < 0x41) {
    return;
  }
LABEL_44:
  if (__p) {
    operator delete[](__p);
  }
}

uint64_t mlir::detail::Parser::parseElementsLiteralType(mlir::detail::Parser *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a2) {
    goto LABEL_53;
  }
  v28[0] = "expected ':'";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 15, (uint64_t)v28)) {
    return 0;
  }
  uint64_t result = mlir::detail::Parser::parseType(a1);
  uint64_t v2 = (void *)result;
  if (result)
  {
LABEL_53:
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
    {
      uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
      uint64_t v26 = v2;
      uint64_t v27 = v4;
      if (v2)
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v26))
        {
          ArgAttrsuint64_t Attr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
          if (!v6) {
            return (uint64_t)v26;
          }
          uint64_t v7 = 8 * v6;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v7 -= 8;
            if (!v7) {
              return (uint64_t)v26;
            }
          }
        }
        v28[0] = "elements literal type must have static shape";
        __int16 v29 = 259;
        mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v30);
        if (v30[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
        }
        if (!v37) {
          return 0;
        }
        unsigned int v9 = (void **)__p;
        if (__p)
        {
          BOOL v10 = v36;
          unsigned int v11 = __p;
          if (v36 != __p)
          {
            do
              BOOL v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
            while (v10 != v9);
            unsigned int v11 = __p;
          }
          uint64_t v36 = v9;
          operator delete(v11);
        }
        unint64_t v12 = v33;
        if (v33)
        {
          char v13 = v34;
          unint64_t v14 = v33;
          if (v34 != v33)
          {
            do
            {
              unsigned int v16 = (void *)*--v13;
              char v15 = v16;
              void *v13 = 0;
              if (v16) {
                operator delete[](v15);
              }
            }
            while (v13 != v12);
            unint64_t v14 = v33;
          }
          uint64_t v34 = v12;
          operator delete(v14);
        }
        uint64_t v25 = v31;
        if (v31 == &v32) {
          return 0;
        }
LABEL_45:
        free(v25);
        return 0;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    v28[0] = "elements literal must be a shaped type";
    __int16 v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v28, v38);
    if (v38[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    }
    if (!v45) {
      return 0;
    }
    uint64_t v17 = v43;
    if (v43)
    {
      unsigned int v18 = v44;
      __int16 v19 = v43;
      if (v44 != v43)
      {
        do
          unsigned int v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        __int16 v19 = v43;
      }
      char v44 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v41;
    if (v41)
    {
      __int16 v21 = v42;
      uint64_t v22 = v41;
      if (v42 != v41)
      {
        do
        {
          __int16 v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *__int16 v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v41;
      }
      uint64_t v42 = v20;
      operator delete(v22);
    }
    uint64_t v25 = v39;
    if (v39 == &v40) {
      return 0;
    }
    goto LABEL_45;
  }
  return result;
}

uint64_t anonymous namespace'::TensorLiteralParser::getAttr(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v330 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v307 = a3;
  *((void *)&v307 + 1) = a4;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v307);
  uint64_t v6 = (mlir::Token *)(a1 + 80);
  if (*(unsigned char *)(a1 + 104)
    && (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&OperandRange)
     || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
  {
    long long v314 = v307;
    uint64_t v313 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v314);
    if (!mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v313)
      && *(_UNKNOWN **)(*(void *)v313 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v36 = *(void *)a1;
      __int16 v319 = 257;
      mlir::detail::Parser::emitError(v36, a2, (uint64_t)&v318, &v320);
      if ((void)v320)
      {
        LODWORD(v315) = 3;
        v316 = "expected floating-point, integer, or complex element type, got ";
        uint64_t v317 = 63;
        char v37 = &v315;
        uint64_t v38 = *((void *)&v321 + 1);
        if (v322 >= v323)
        {
          unint64_t v276 = v322 + 1;
          if (*((void *)&v321 + 1) <= (unint64_t)&v315
            && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
          {
            v291 = (char *)&v315 - *((void *)&v321 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v276, 24);
            uint64_t v38 = *((void *)&v321 + 1);
            char v37 = (void **)&v291[*((void *)&v321 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v276, 24);
            char v37 = &v315;
            uint64_t v38 = *((void *)&v321 + 1);
          }
        }
        uint64_t v39 = v38 + 24 * v322;
        long long v40 = *(_OWORD *)v37;
        *(void *)(v39 + 16) = v37[2];
        *(_OWORD *)uint64_t v39 = v40;
        ++v322;
        if ((void)v320)
        {
          uint64_t v41 = &v315;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v315, v313);
          uint64_t v42 = *((void *)&v321 + 1);
          if (v322 >= v323)
          {
            unint64_t v279 = v322 + 1;
            if (*((void *)&v321 + 1) <= (unint64_t)&v315
              && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
            {
              v294 = (char *)&v315 - *((void *)&v321 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v279, 24);
              uint64_t v42 = *((void *)&v321 + 1);
              uint64_t v41 = (void **)&v294[*((void *)&v321 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v279, 24);
              uint64_t v41 = &v315;
              uint64_t v42 = *((void *)&v321 + 1);
            }
          }
          uint64_t v43 = v42 + 24 * v322;
          long long v44 = *(_OWORD *)v41;
          *(void *)(v43 + 16) = v41[2];
          *(_OWORD *)uint64_t v43 = v44;
          ++v322;
          if ((void)v320) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
          }
        }
      }
      if (!v329) {
        return 0;
      }
      char v45 = (void **)__p;
      if (__p)
      {
        uint64_t v46 = v328;
        uint64_t v47 = __p;
        if (v328 != __p)
        {
          do
            uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          uint64_t v47 = __p;
        }
        v328 = v45;
        operator delete(v47);
      }
      __int16 v31 = v325;
      if (!v325) {
        goto LABEL_217;
      }
      long long v48 = v326;
      long long v33 = v325;
      if (v326 == v325) {
        goto LABEL_216;
      }
      do
      {
        __int16 v50 = (void *)*--v48;
        uint64_t v49 = v50;
        void *v48 = 0;
        if (v50) {
          operator delete[](v49);
        }
      }
      while (v48 != v31);
      goto LABEL_215;
    }
    v311[0] = 0;
    v311[1] = 0;
    v312 = 0;
    uint64_t v51 = *(void *)a1;
    long long v309 = *(_OWORD *)v6;
    uint64_t v310 = *(void *)(a1 + 96);
    mlir::Token::getHexStringValue((mlir::Token *)&v309, (std::string *)&v320);
    if (BYTE8(v321))
    {
      if (SHIBYTE(v312) < 0) {
        operator delete(v311[0]);
      }
      *(_OWORD *)v311 = v320;
      v312 = (llvm::APFloatBase *)v321;
    }
    else
    {
      uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v309);
      __int16 v319 = 259;
      mlir::detail::Parser::emitError(v51, Loc, (uint64_t)&v318, &v320);
      char v81 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
      if ((void)v320) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
      }
      if (v329)
      {
        v82 = (void **)__p;
        if (__p)
        {
          v83 = v328;
          v84 = __p;
          if (v328 != __p)
          {
            do
              v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
            while (v83 != v82);
            v84 = __p;
          }
          v328 = v82;
          operator delete(v84);
        }
        char v85 = v325;
        if (v325)
        {
          long long v86 = v326;
          uint64_t v87 = v325;
          if (v326 != v325)
          {
            do
            {
              uint64_t v89 = (void *)*--v86;
              __int16 v88 = v89;
              *long long v86 = 0;
              if (v89) {
                operator delete[](v88);
              }
            }
            while (v86 != v85);
            uint64_t v87 = v325;
          }
          v326 = v85;
          operator delete(v87);
        }
        if (*((unsigned char **)&v321 + 1) != v324) {
          free(*((void **)&v321 + 1));
        }
      }
      if (!v81) {
        goto LABEL_273;
      }
    }
    if (SHIBYTE(v312) >= 0) {
      v163 = (unsigned __int8 *)v311;
    }
    else {
      v163 = (unsigned __int8 *)v311[0];
    }
    if (SHIBYTE(v312) >= 0) {
      uint64_t v164 = HIBYTE(v312);
    }
    else {
      uint64_t v164 = (uint64_t)v311[1];
    }
    BOOL v308 = 0;
    if (mlir::DenseElementsAttr::isValidRawBuffer(v314, *((uint64_t *)&v314 + 1), v163, v164, &v308))
    {
      uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v314, *((void *)&v314 + 1), v163, v164, v165, v166, v167);
      if ((SHIBYTE(v312) & 0x80000000) == 0) {
        return v148;
      }
LABEL_274:
      v185 = v311[0];
      goto LABEL_377;
    }
    uint64_t v168 = *(void *)a1;
    __int16 v319 = 257;
    mlir::detail::Parser::emitError(v168, a2, (uint64_t)&v318, &v320);
    if ((void)v320)
    {
      LODWORD(v315) = 3;
      v316 = "elements hex data size is invalid for provided type: ";
      uint64_t v317 = 53;
      v169 = &v315;
      uint64_t v170 = *((void *)&v321 + 1);
      if (v322 >= v323)
      {
        unint64_t v277 = v322 + 1;
        if (*((void *)&v321 + 1) <= (unint64_t)&v315
          && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
        {
          v292 = (char *)&v315 - *((void *)&v321 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v277, 24);
          uint64_t v170 = *((void *)&v321 + 1);
          v169 = (void **)&v292[*((void *)&v321 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v277, 24);
          v169 = &v315;
          uint64_t v170 = *((void *)&v321 + 1);
        }
      }
      uint64_t v171 = v170 + 24 * v322;
      long long v172 = *(_OWORD *)v169;
      *(void *)(v171 + 16) = v169[2];
      *(_OWORD *)uint64_t v171 = v172;
      ++v322;
      if ((void)v320)
      {
        v173 = &v315;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v315, v314);
        uint64_t v174 = *((void *)&v321 + 1);
        if (v322 >= v323)
        {
          unint64_t v280 = v322 + 1;
          if (*((void *)&v321 + 1) <= (unint64_t)&v315
            && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
          {
            v295 = (char *)&v315 - *((void *)&v321 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v280, 24);
            uint64_t v174 = *((void *)&v321 + 1);
            v173 = (void **)&v295[*((void *)&v321 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v280, 24);
            v173 = &v315;
            uint64_t v174 = *((void *)&v321 + 1);
          }
        }
        uint64_t v175 = v174 + 24 * v322;
        long long v176 = *(_OWORD *)v173;
        *(void *)(v175 + 16) = v173[2];
        *(_OWORD *)uint64_t v175 = v176;
        ++v322;
        if ((void)v320) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
        }
      }
    }
    if (v329)
    {
      v177 = (void **)__p;
      if (__p)
      {
        v178 = v328;
        v179 = __p;
        if (v328 != __p)
        {
          do
            v178 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v178 - 1);
          while (v178 != v177);
          v179 = __p;
        }
        v328 = v177;
        operator delete(v179);
      }
      v180 = v325;
      if (v325)
      {
        v181 = v326;
        v182 = v325;
        if (v326 != v325)
        {
          do
          {
            v184 = (void *)*--v181;
            v183 = v184;
            void *v181 = 0;
            if (v184) {
              operator delete[](v183);
            }
          }
          while (v181 != v180);
          v182 = v325;
        }
        v326 = v180;
        operator delete(v182);
      }
      if (*((unsigned char **)&v321 + 1) != v324) {
        free(*((void **)&v321 + 1));
      }
    }
LABEL_273:
    uint64_t v148 = 0;
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      return v148;
    }
    goto LABEL_274;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (v7)
  {
    __int16 v8 = *(const void **)(a1 + 8);
    ArgAttrsuint64_t Attr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v307);
    if (v10 != v7 || memcmp(v8, ArgAttrsAttr, 8 * v7))
    {
      uint64_t v11 = *(void *)a1;
      __int16 v319 = 257;
      mlir::detail::Parser::emitError(v11, a2, (uint64_t)&v318, &v320);
      if ((void)v320)
      {
        LODWORD(v315) = 3;
        v316 = "inferred shape of elements literal ([";
        uint64_t v317 = 37;
        unint64_t v12 = &v315;
        uint64_t v13 = *((void *)&v321 + 1);
        if (v322 >= v323)
        {
          unint64_t v274 = v322 + 1;
          if (*((void *)&v321 + 1) <= (unint64_t)&v315
            && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
          {
            v289 = (char *)&v315 - *((void *)&v321 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v274, 24);
            uint64_t v13 = *((void *)&v321 + 1);
            unint64_t v12 = (void **)&v289[*((void *)&v321 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v274, 24);
            unint64_t v12 = &v315;
            uint64_t v13 = *((void *)&v321 + 1);
          }
        }
        uint64_t v14 = v13 + 24 * v322;
        long long v15 = *(_OWORD *)v12;
        *(void *)(v14 + 16) = v12[2];
        *(_OWORD *)uint64_t v14 = v15;
        ++v322;
        if ((void)v320)
        {
          uint64_t v16 = *(unsigned int *)(a1 + 16);
          uint64_t v17 = *(const char ***)(a1 + 8);
          v315 = ", ";
          llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v17, &v17[v16], (uint64_t)&v320 + 8, (uint64_t)&v320 + 8, (const char **)&v315);
          if ((void)v320)
          {
            LODWORD(v315) = 3;
            v316 = "]) does not match type ([";
            uint64_t v317 = 25;
            unsigned int v18 = &v315;
            uint64_t v19 = *((void *)&v321 + 1);
            if (v322 >= v323)
            {
              unint64_t v278 = v322 + 1;
              if (*((void *)&v321 + 1) <= (unint64_t)&v315
                && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
              {
                v293 = (char *)&v315 - *((void *)&v321 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v278, 24);
                uint64_t v19 = *((void *)&v321 + 1);
                unsigned int v18 = (void **)&v293[*((void *)&v321 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v278, 24);
                unsigned int v18 = &v315;
                uint64_t v19 = *((void *)&v321 + 1);
              }
            }
            uint64_t v20 = v19 + 24 * v322;
            long long v21 = *(_OWORD *)v18;
            *(void *)(v20 + 16) = v18[2];
            *(_OWORD *)uint64_t v20 = v21;
            ++v322;
          }
        }
      }
      uint64_t v22 = (const char **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v307);
      if ((void)v320)
      {
        v315 = ", ";
        llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v22, &v22[v23], (uint64_t)&v320 + 8, (uint64_t)&v320 + 8, (const char **)&v315);
        if ((void)v320)
        {
          LODWORD(v315) = 3;
          v316 = "])";
          uint64_t v317 = 2;
          __int16 v24 = &v315;
          uint64_t v25 = *((void *)&v321 + 1);
          if (v322 >= v323)
          {
            unint64_t v275 = v322 + 1;
            if (*((void *)&v321 + 1) <= (unint64_t)&v315
              && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
            {
              v290 = (char *)&v315 - *((void *)&v321 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v275, 24);
              uint64_t v25 = *((void *)&v321 + 1);
              __int16 v24 = (void **)&v290[*((void *)&v321 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v275, 24);
              __int16 v24 = &v315;
              uint64_t v25 = *((void *)&v321 + 1);
            }
          }
          uint64_t v26 = v25 + 24 * v322;
          long long v27 = *(_OWORD *)v24;
          *(void *)(v26 + 16) = v24[2];
          *(_OWORD *)uint64_t v26 = v27;
          ++v322;
          if ((void)v320) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
          }
        }
      }
      if (!v329) {
        return 0;
      }
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        __int16 v29 = v328;
        uint64_t v30 = __p;
        if (v328 != __p)
        {
          do
            __int16 v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        v328 = v28;
        operator delete(v30);
      }
      __int16 v31 = v325;
      if (!v325)
      {
LABEL_217:
        if (*((unsigned char **)&v321 + 1) != v324) {
          free(*((void **)&v321 + 1));
        }
        return 0;
      }
      uint64_t v32 = v326;
      long long v33 = v325;
      if (v326 == v325)
      {
LABEL_216:
        v326 = v31;
        operator delete(v33);
        goto LABEL_217;
      }
      do
      {
        __int16 v35 = (void *)*--v32;
        uint64_t v34 = v35;
        *uint64_t v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
LABEL_215:
      long long v33 = v325;
      goto LABEL_216;
    }
  }
  if (!*(unsigned char *)(a1 + 104) && *(void *)(a1 + 56) == *(void *)(a1 + 64))
  {
    v126 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v307);
    if (mlir::ShapedType::getNumElements(v126, v127))
    {
      uint64_t v128 = *(void *)a1;
      __int16 v319 = 257;
      mlir::detail::Parser::emitError(v128, a2, (uint64_t)&v318, &v320);
      if ((void)v320)
      {
        LODWORD(v315) = 3;
        v316 = "parsed zero elements, but type (";
        uint64_t v317 = 32;
        v129 = &v315;
        uint64_t v130 = *((void *)&v321 + 1);
        if (v322 >= v323)
        {
          unint64_t v283 = v322 + 1;
          if (*((void *)&v321 + 1) <= (unint64_t)&v315
            && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
          {
            v298 = (char *)&v315 - *((void *)&v321 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v283, 24);
            uint64_t v130 = *((void *)&v321 + 1);
            v129 = (void **)&v298[*((void *)&v321 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v283, 24);
            v129 = &v315;
            uint64_t v130 = *((void *)&v321 + 1);
          }
        }
        uint64_t v131 = v130 + 24 * v322;
        long long v132 = *(_OWORD *)v129;
        *(void *)(v131 + 16) = v129[2];
        *(_OWORD *)uint64_t v131 = v132;
        ++v322;
        if ((void)v320)
        {
          v133 = &v315;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v315, v307);
          uint64_t v134 = *((void *)&v321 + 1);
          if (v322 >= v323)
          {
            unint64_t v285 = v322 + 1;
            if (*((void *)&v321 + 1) <= (unint64_t)&v315
              && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
            {
              v300 = (char *)&v315 - *((void *)&v321 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v285, 24);
              uint64_t v134 = *((void *)&v321 + 1);
              v133 = (void **)&v300[*((void *)&v321 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v285, 24);
              v133 = &v315;
              uint64_t v134 = *((void *)&v321 + 1);
            }
          }
          uint64_t v135 = v134 + 24 * v322;
          long long v136 = *(_OWORD *)v133;
          *(void *)(v135 + 16) = v133[2];
          *(_OWORD *)uint64_t v135 = v136;
          uint64_t v137 = ++v322;
          if ((void)v320)
          {
            LODWORD(v315) = 3;
            v316 = ") expected at least 1";
            uint64_t v317 = 21;
            v138 = &v315;
            uint64_t v139 = *((void *)&v321 + 1);
            if (v137 >= v323)
            {
              unint64_t v286 = v137 + 1;
              BOOL v287 = *((void *)&v321 + 1) + 24 * (unint64_t)v137 > (unint64_t)&v315;
              if (*((void *)&v321 + 1) <= (unint64_t)&v315 && v287)
              {
                v301 = (char *)&v315 - *((void *)&v321 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v286, 24);
                uint64_t v139 = *((void *)&v321 + 1);
                v138 = (void **)&v301[*((void *)&v321 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v286, 24);
                v138 = &v315;
                uint64_t v139 = *((void *)&v321 + 1);
              }
            }
            uint64_t v140 = v139 + 24 * v322;
            long long v141 = *(_OWORD *)v138;
            *(void *)(v140 + 16) = v138[2];
            *(_OWORD *)uint64_t v140 = v141;
            ++v322;
            if ((void)v320) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
            }
          }
        }
      }
      if (!v329) {
        return 0;
      }
      v142 = (void **)__p;
      if (__p)
      {
        v143 = v328;
        v144 = __p;
        if (v328 != __p)
        {
          do
            v143 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v143 - 1);
          while (v143 != v142);
          v144 = __p;
        }
        v328 = v142;
        operator delete(v144);
      }
      __int16 v31 = v325;
      if (!v325) {
        goto LABEL_217;
      }
      v145 = v326;
      long long v33 = v325;
      if (v326 == v325) {
        goto LABEL_216;
      }
      do
      {
        v147 = (void *)*--v145;
        v146 = v147;
        void *v145 = 0;
        if (v147) {
          operator delete[](v146);
        }
      }
      while (v145 != v31);
      goto LABEL_215;
    }
  }
  uint64_t v52 = OperandRange;
  uint64_t v53 = *(void **)(*(void *)OperandRange + 136);
  if (v53 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v52 = 0;
  }
  *(void *)&long long v320 = v52;
  if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v320);
    if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange)) {
      goto LABEL_60;
    }
  }
  else if (mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
LABEL_60:
    v311[0] = 0;
    v311[1] = 0;
    v312 = 0;
    *(void *)&long long v309 = OperandRange;
    uint64_t v54 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
    if (!v54)
    {
LABEL_63:
      BOOL isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v309);
      uint64_t v57 = *(unsigned __int8 **)(a1 + 56);
      long long v58 = *(unsigned __int8 **)(a1 + 64);
      if (v57 == v58) {
        goto LABEL_363;
      }
      BOOL v59 = isUnsignedInteger;
      while (1)
      {
        char v61 = (int *)(v57 + 8);
        int v60 = *v57;
        uint64_t v62 = (const char *)mlir::Token::getLoc((mlir::Token *)(v57 + 8));
        if (v60) {
          BOOL v63 = v59;
        }
        else {
          BOOL v63 = 0;
        }
        if (v63)
        {
          uint64_t v186 = *(void *)a1;
          __int16 v319 = 257;
          mlir::detail::Parser::emitError(v186, v62, (uint64_t)&v318, &v320);
          if ((void)v320)
          {
            LODWORD(v315) = 3;
            v316 = "expected unsigned integer elements, but parsed negative value";
            uint64_t v317 = 61;
            v187 = &v315;
            uint64_t v188 = *((void *)&v321 + 1);
            if (v322 >= v323)
            {
              unint64_t v282 = v322 + 1;
              if (*((void *)&v321 + 1) <= (unint64_t)&v315
                && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
              {
                v297 = (char *)&v315 - *((void *)&v321 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v282, 24);
                uint64_t v188 = *((void *)&v321 + 1);
                v187 = (void **)&v297[*((void *)&v321 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v282, 24);
                v187 = &v315;
                uint64_t v188 = *((void *)&v321 + 1);
              }
            }
            uint64_t v189 = v188 + 24 * v322;
            long long v190 = *(_OWORD *)v187;
            *(void *)(v189 + 16) = v187[2];
            *(_OWORD *)uint64_t v189 = v190;
            ++v322;
          }
          char v191 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
          if ((void)v320) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
          }
          char v304 = v191;
          if (v329)
          {
            v192 = (void **)__p;
            if (__p)
            {
              v193 = v328;
              v194 = __p;
              if (v328 != __p)
              {
                do
                  v193 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v193 - 1);
                while (v193 != v192);
                v194 = __p;
              }
              v328 = v192;
              operator delete(v194);
            }
            v195 = v325;
            if (v325)
            {
              v196 = v326;
              v197 = v325;
              if (v326 == v325) {
                goto LABEL_359;
              }
              do
              {
                v199 = (void *)*--v196;
                v198 = v199;
                void *v196 = 0;
                if (v199) {
                  operator delete[](v198);
                }
              }
              while (v196 != v195);
              goto LABEL_358;
            }
LABEL_360:
            if (*((unsigned char **)&v321 + 1) != v324) {
              free(*((void **)&v321 + 1));
            }
          }
LABEL_362:
          if (v304)
          {
LABEL_363:
            if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
            {
              uint64_t v148 = mlir::DenseElementsAttr::get(v307, *((uint64_t *)&v307 + 1), v311[0], (unint64_t)((v311[1] - v311[0]) >> 4) >> 1);
              v239 = v311[0];
              if (!v311[0]) {
                return v148;
              }
            }
            else
            {
              uint64_t v148 = mlir::DenseElementsAttr::get(v307, *((uint64_t *)&v307 + 1), v311[0], (v311[1] - v311[0]) >> 4);
              v239 = v311[0];
              if (!v311[0]) {
                return v148;
              }
            }
LABEL_369:
            v240 = v311[1];
            v185 = v239;
            if (v311[1] != v239)
            {
              do
              {
                if (*((_DWORD *)v240 - 2) >= 0x41u)
                {
                  v241 = (void *)*((void *)v240 - 2);
                  if (v241) {
                    operator delete[](v241);
                  }
                }
                v240 = (llvm::APFloatBase *)((char *)v240 - 16);
              }
              while (v240 != v239);
              v185 = v311[0];
            }
            v311[1] = v239;
LABEL_377:
            operator delete(v185);
          }
          else
          {
            uint64_t v148 = 0;
            v239 = v311[0];
            if (v311[0]) {
              goto LABEL_369;
            }
          }
          return v148;
        }
        int v64 = *v61;
        if (*v61 == 54 || v64 == 74)
        {
          if (!mlir::Type::isInteger((mlir::Type *)&v309, 1))
          {
            uint64_t v200 = *(void *)a1;
            __int16 v319 = 257;
            mlir::detail::Parser::emitError(v200, v62, (uint64_t)&v318, &v320);
            if ((void)v320)
            {
              LODWORD(v315) = 3;
              v316 = "expected i1 type for 'true' or 'false' values";
              uint64_t v317 = 45;
              v201 = &v315;
              uint64_t v202 = *((void *)&v321 + 1);
              if (v322 >= v323)
              {
                unint64_t v284 = v322 + 1;
                if (*((void *)&v321 + 1) <= (unint64_t)&v315
                  && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
                {
                  v299 = (char *)&v315 - *((void *)&v321 + 1);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v284, 24);
                  uint64_t v202 = *((void *)&v321 + 1);
                  v201 = (void **)&v299[*((void *)&v321 + 1)];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v284, 24);
                  v201 = &v315;
                  uint64_t v202 = *((void *)&v321 + 1);
                }
              }
              uint64_t v203 = v202 + 24 * v322;
              long long v204 = *(_OWORD *)v201;
              *(void *)(v203 + 16) = v201[2];
              *(_OWORD *)uint64_t v203 = v204;
              ++v322;
            }
            char v205 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
            if ((void)v320) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
            }
            char v304 = v205;
            if (v329)
            {
              v206 = (void **)__p;
              if (__p)
              {
                v207 = v328;
                v208 = __p;
                if (v328 != __p)
                {
                  do
                    v207 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v207 - 1);
                  while (v207 != v206);
                  v208 = __p;
                }
                v328 = v206;
                operator delete(v208);
              }
              v195 = v325;
              if (v325)
              {
                v209 = v326;
                v197 = v325;
                if (v326 == v325) {
                  goto LABEL_359;
                }
                do
                {
                  v211 = (void *)*--v209;
                  v210 = v211;
                  void *v209 = 0;
                  if (v211) {
                    operator delete[](v210);
                  }
                }
                while (v209 != v195);
LABEL_358:
                v197 = v325;
                goto LABEL_359;
              }
              goto LABEL_360;
            }
            goto LABEL_362;
          }
          BOOL v68 = *v61 == 74;
          DWORD2(v320) = 1;
          *(void *)&long long v320 = v68;
          uint64_t v69 = v311[1];
          if (v311[1] >= v312)
          {
            v311[1] = (llvm::APFloatBase *)std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v311, (uint64_t)&v320);
            if (DWORD2(v320) >= 0x41)
            {
LABEL_83:
              if ((void)v320) {
                operator delete[]((void *)v320);
              }
            }
          }
          else
          {
            *((_DWORD *)v311[1] + 2) = 1;
            *(void *)uint64_t v69 = v68;
            v311[1] = (llvm::APFloatBase *)((char *)v69 + 16);
            if (DWORD2(v320) >= 0x41) {
              goto LABEL_83;
            }
          }
        }
        else
        {
          if (v64 == 9)
          {
            uint64_t v227 = *(void *)a1;
            __int16 v319 = 257;
            mlir::detail::Parser::emitError(v227, v62, (uint64_t)&v318, &v320);
            if ((void)v320)
            {
              LODWORD(v315) = 3;
              v316 = "expected integer elements, but parsed floating-point";
              uint64_t v317 = 52;
              v228 = &v315;
              uint64_t v229 = *((void *)&v321 + 1);
              if (v322 >= v323)
              {
                unint64_t v288 = v322 + 1;
                if (*((void *)&v321 + 1) <= (unint64_t)&v315
                  && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
                {
                  v302 = (char *)&v315 - *((void *)&v321 + 1);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v288, 24);
                  uint64_t v229 = *((void *)&v321 + 1);
                  v228 = (void **)&v302[*((void *)&v321 + 1)];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v288, 24);
                  v228 = &v315;
                  uint64_t v229 = *((void *)&v321 + 1);
                }
              }
              uint64_t v230 = v229 + 24 * v322;
              long long v231 = *(_OWORD *)v228;
              *(void *)(v230 + 16) = v228[2];
              *(_OWORD *)uint64_t v230 = v231;
              ++v322;
            }
            char v232 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
            if ((void)v320) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
            }
            char v304 = v232;
            if (v329)
            {
              v233 = (void **)__p;
              if (__p)
              {
                v234 = v328;
                v235 = __p;
                if (v328 != __p)
                {
                  do
                    v234 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v234 - 1);
                  while (v234 != v233);
                  v235 = __p;
                }
                v328 = v233;
                operator delete(v235);
              }
              v195 = v325;
              if (v325)
              {
                v236 = v326;
                v197 = v325;
                if (v326 != v325)
                {
                  do
                  {
                    v238 = (void *)*--v236;
                    v237 = v238;
                    void *v236 = 0;
                    if (v238) {
                      operator delete[](v237);
                    }
                  }
                  while (v236 != v195);
                  goto LABEL_358;
                }
LABEL_359:
                v326 = v195;
                operator delete(v197);
              }
              goto LABEL_360;
            }
            goto LABEL_362;
          }
          buildAttributeAPInt((uint64_t)&v315, v309, v60 != 0, *((void *)v57 + 2), *((void *)v57 + 3));
          int v65 = v317;
          if ((_BYTE)v317)
          {
            uint64_t v66 = v311[1];
            if (v311[1] >= v312)
            {
              v79 = std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(v311, (uint64_t)&v315);
            }
            else
            {
              unsigned int v67 = v316;
              *((_DWORD *)v311[1] + 2) = v316;
              if (v67 > 0x40) {
                llvm::APInt::initSlowCase(v66, (const void **)&v315);
              }
              else {
                *(void *)uint64_t v66 = v315;
              }
              v79 = (char *)v66 + 16;
            }
            v311[1] = (llvm::APFloatBase *)v79;
          }
          else
          {
            uint64_t v70 = *(void *)a1;
            v318.__r_.__value_.__r.__words[0] = (std::string::size_type)"integer constant out of range for type";
            __int16 v319 = 259;
            mlir::detail::Parser::emitError(v70, v62, (uint64_t)&v318, &v320);
            char v304 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
            if ((void)v320) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
            }
            if (v329)
            {
              v71 = (void **)__p;
              if (__p)
              {
                uint64_t v72 = v328;
                v73 = __p;
                if (v328 != __p)
                {
                  do
                    uint64_t v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
                  while (v72 != v71);
                  v73 = __p;
                }
                v328 = v71;
                operator delete(v73);
              }
              v74 = v325;
              if (v325)
              {
                v75 = v326;
                v76 = v325;
                if (v326 != v325)
                {
                  do
                  {
                    v78 = (void *)*--v75;
                    char v77 = v78;
                    void *v75 = 0;
                    if (v78) {
                      operator delete[](v77);
                    }
                  }
                  while (v75 != v74);
                  v76 = v325;
                }
                v326 = v74;
                operator delete(v76);
              }
              if (*((unsigned char **)&v321 + 1) != v324) {
                free(*((void **)&v321 + 1));
              }
            }
          }
          if ((_BYTE)v317 && v316 >= 0x41 && v315) {
            operator delete[](v315);
          }
          if (!v65) {
            goto LABEL_362;
          }
        }
        v57 += 32;
        if (v57 == v58) {
          goto LABEL_363;
        }
      }
    }
    if ((v54 & 0x8000000000000000) == 0)
    {
      uint64_t v55 = v54 >> 5;
      v311[0] = (llvm::APFloatBase *)operator new((unint64_t)v54 >> 1);
      v311[1] = v311[0];
      v312 = (llvm::APFloatBase *)((char *)v311[0] + 16 * v55);
      goto LABEL_63;
    }
LABEL_492:
    abort();
  }
  v90 = *(void **)(*(void *)OperandRange + 136);
  if (v90 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v90 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v311[0] = 0;
    v311[1] = 0;
    v312 = 0;
    *(void *)&long long v309 = OperandRange;
    std::vector<llvm::APFloat>::reserve((uint64_t)v311, (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 5);
    v102 = *(unsigned __int8 **)(a1 + 56);
    v103 = *(unsigned __int8 **)(a1 + 64);
    if (v102 == v103) {
      goto LABEL_328;
    }
    while (1)
    {
      int v104 = *v102;
      int v105 = *((_DWORD *)v102 + 2);
      if (v105 == 9)
      {
        double v113 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)(v102 + 8)));
        if (!v114)
        {
          uint64_t v212 = *(void *)a1;
          v318.__r_.__value_.__r.__words[0] = (std::string::size_type)"floating point value too large for attribute";
          __int16 v319 = 259;
          mlir::detail::Parser::emitError(v212, (uint64_t)&v318, &v320);
          char v154 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
          if ((void)v320) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
          }
          if (v329)
          {
            v213 = (void **)__p;
            if (__p)
            {
              v214 = v328;
              v215 = __p;
              if (v328 != __p)
              {
                do
                  v214 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v214 - 1);
                while (v214 != v213);
                v215 = __p;
              }
              v328 = v213;
              operator delete(v215);
            }
            v158 = v325;
            if (v325)
            {
              v216 = v326;
              v160 = v325;
              if (v326 != v325)
              {
                do
                {
                  v218 = (void *)*--v216;
                  v217 = v218;
                  void *v216 = 0;
                  if (v218) {
                    operator delete[](v217);
                  }
                }
                while (v216 != v158);
                goto LABEL_323;
              }
LABEL_324:
              v326 = v158;
              operator delete(v160);
            }
LABEL_325:
            if (*((unsigned char **)&v321 + 1) != v324) {
              free(*((void **)&v321 + 1));
            }
          }
LABEL_327:
          if (v154)
          {
LABEL_328:
            if (v53 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
            {
              uint64_t v148 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v307, *((uint64_t *)&v307 + 1), (uint64_t)v311[0], (unint64_t)((v311[1] - v311[0]) >> 5) >> 1);
              v219 = v311[0];
              if (!v311[0]) {
                return v148;
              }
            }
            else
            {
              uint64_t v148 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)v307, *((uint64_t *)&v307 + 1), (uint64_t)v311[0], (v311[1] - v311[0]) >> 5);
              v219 = v311[0];
              if (!v311[0]) {
                return v148;
              }
            }
          }
          else
          {
LABEL_333:
            uint64_t v148 = 0;
            v219 = v311[0];
            if (!v311[0]) {
              return v148;
            }
          }
          v220 = v311[1];
          v185 = v219;
          if (v311[1] != v219)
          {
            v221 = llvm::APFloatBase::PPCDoubleDouble(v219);
            v222 = (llvm::APFloatBase *)((char *)v220 - 24);
            do
            {
              while (v221 == *(void **)v222)
              {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v222);
                v224 = (llvm::APFloatBase *)(v223 - 8);
                v222 = (llvm::detail::DoubleAPFloat *)(v223 - 32);
                if (v224 == v219) {
                  goto LABEL_339;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v222);
              v226 = (llvm::APFloatBase *)(v225 - 8);
              v222 = (llvm::detail::DoubleAPFloat *)(v225 - 32);
            }
            while (v226 != v219);
LABEL_339:
            v185 = v311[0];
          }
          v311[1] = v219;
          goto LABEL_377;
        }
        double v115 = v113;
        if (v104) {
          double v115 = -v113;
        }
        v116 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v318, v115);
        v117 = llvm::APFloatBase::IEEEdouble(v116);
        llvm::APFloat::Storage::Storage((char *)&v320 + 8, &v318, v117);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v318);
        uint64_t isF64 = mlir::Type::isF64((mlir::Type *)&v309);
        if ((isF64 & 1) == 0)
        {
          v318.__r_.__value_.__s.__data_[0] = 0;
          FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v309);
          uint64_t isF64 = llvm::APFloat::convert((uint64_t)&v320, FloatSemantics, 1, &v318);
        }
        v120 = v311[1];
        if (v311[1] >= v312)
        {
          v123 = std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v311, (uint64_t)&v320);
          v124 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v123);
          v311[1] = (llvm::APFloatBase *)v123;
          if (v124 != *((void **)&v320 + 1)) {
            goto LABEL_184;
          }
        }
        else
        {
          v121 = (void *)*((void *)&v320 + 1);
          v122 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)isF64);
          if (v122 == v121)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v120 + 8), (const llvm::detail::DoubleAPFloat *)((char *)&v320 + 8));
            v311[1] = (llvm::APFloatBase *)((char *)v120 + 32);
            if (v122 != *((void **)&v320 + 1))
            {
LABEL_184:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v320 + 8));
              goto LABEL_165;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v120 + 8), (const llvm::detail::IEEEFloat *)((char *)&v320 + 8));
            v311[1] = (llvm::APFloatBase *)((char *)v120 + 32);
            if (v122 != *((void **)&v320 + 1)) {
              goto LABEL_184;
            }
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v320 + 8));
      }
      else
      {
        if (v105 != 10 || *((void *)v102 + 3) < 2uLL || **((_WORD **)v102 + 2) != 30768)
        {
          uint64_t v149 = *(void *)a1;
          __int16 v319 = 257;
          mlir::detail::Parser::emitError(v149, (uint64_t)&v318, &v320);
          if ((void)v320)
          {
            LODWORD(v315) = 3;
            v316 = "expected floating-point elements, but parsed integer";
            uint64_t v317 = 52;
            v150 = &v315;
            uint64_t v151 = *((void *)&v321 + 1);
            if (v322 >= v323)
            {
              unint64_t v281 = v322 + 1;
              if (*((void *)&v321 + 1) <= (unint64_t)&v315
                && *((void *)&v321 + 1) + 24 * (unint64_t)v322 > (unint64_t)&v315)
              {
                v296 = (char *)&v315 - *((void *)&v321 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v281, 24);
                uint64_t v151 = *((void *)&v321 + 1);
                v150 = (void **)&v296[*((void *)&v321 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321 + 8, v324, v281, 24);
                v150 = &v315;
                uint64_t v151 = *((void *)&v321 + 1);
              }
            }
            uint64_t v152 = v151 + 24 * v322;
            long long v153 = *(_OWORD *)v150;
            *(void *)(v152 + 16) = v150[2];
            *(_OWORD *)uint64_t v152 = v153;
            ++v322;
          }
          char v154 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v320);
          if ((void)v320) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v320);
          }
          if (v329)
          {
            v155 = (void **)__p;
            if (__p)
            {
              v156 = v328;
              v157 = __p;
              if (v328 != __p)
              {
                do
                  v156 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v156 - 1);
                while (v156 != v155);
                v157 = __p;
              }
              v328 = v155;
              operator delete(v157);
            }
            v158 = v325;
            if (v325)
            {
              v159 = v326;
              v160 = v325;
              if (v326 == v325) {
                goto LABEL_324;
              }
              do
              {
                v162 = (void *)*--v159;
                v161 = v162;
                void *v159 = 0;
                if (v162) {
                  operator delete[](v161);
                }
              }
              while (v159 != v158);
LABEL_323:
              v160 = v325;
              goto LABEL_324;
            }
            goto LABEL_325;
          }
          goto LABEL_327;
        }
        LOBYTE(v320) = 0;
        LOBYTE(v322) = 0;
        uint64_t v106 = *(void *)a1;
        v107 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v309);
        unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v309);
        v109 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v106, (uint64_t)&v320, (mlir::Token *)(v102 + 8), v104 != 0, v107, Width);
        char v110 = (char)v109;
        if ((_BYTE)v109)
        {
          v111 = v311[1];
          if (v311[1] >= v312)
          {
            v109 = (llvm::APFloatBase *)std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>((char **)v311, (uint64_t)&v320);
          }
          else
          {
            v112 = (void *)*((void *)&v320 + 1);
            if (llvm::APFloatBase::PPCDoubleDouble(v109) == v112) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v111 + 8), (const llvm::detail::DoubleAPFloat *)((char *)&v320 + 8));
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v111 + 8), (const llvm::detail::IEEEFloat *)((char *)&v320 + 8));
            }
            v109 = (llvm::APFloatBase *)((char *)v111 + 32);
          }
          v311[1] = v109;
        }
        if ((_BYTE)v322)
        {
          v125 = (void *)*((void *)&v320 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble(v109) == v125) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v320 + 8));
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v320 + 8));
          }
        }
        if (!v110) {
          goto LABEL_333;
        }
      }
LABEL_165:
      v102 += 32;
      if (v102 == v103) {
        goto LABEL_328;
      }
    }
  }
  long long v243 = v307;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v307);
  if (*(unsigned char *)(a1 + 104))
  {
    mlir::Token::getStringValue(v6, (std::string *)&v320);
    std::string::size_type v244 = BYTE7(v321);
    v245 = (long long *)v320;
    if (SBYTE7(v321) < 0) {
      std::string::size_type v244 = *((void *)&v320 + 1);
    }
    else {
      v245 = &v320;
    }
    v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
    v318.__r_.__value_.__l.__size_ = v244;
    uint64_t v148 = mlir::DenseStringElementsAttr::get(v243, *((uint64_t *)&v243 + 1), (uint64_t)&v318, 1);
    if (SBYTE7(v321) < 0)
    {
      v185 = (llvm::APFloatBase *)v320;
      goto LABEL_377;
    }
    return v148;
  }
  v246 = *(char **)(a1 + 56);
  v305 = *(char **)(a1 + 64);
  uint64_t v247 = v305 - v246;
  if (v305 == v246)
  {
    v252 = 0;
    v250 = 0;
    v251 = 0;
    v248 = 0;
  }
  else
  {
    if (v247 < 0) {
      goto LABEL_492;
    }
    v248 = (std::string *)operator new(24 * (v247 >> 5));
    v249 = &v248[v247 >> 5];
    v250 = (char *)operator new((unint64_t)v247 >> 1);
    v251 = v248;
    v252 = v250;
    v253 = &v250[16 * (v247 >> 5)];
    do
    {
      while (1)
      {
        long long v256 = *((_OWORD *)v246 + 1);
        long long v320 = *(_OWORD *)v246;
        long long v321 = v256;
        mlir::Token::getStringValue((mlir::Token *)((char *)&v320 + 8), &v318);
        if (v251 >= v249)
        {
          unint64_t v258 = 0xAAAAAAAAAAAAAAABLL * (((char *)v251 - (char *)v248) >> 3) + 1;
          if (v258 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_492;
          }
          if (0x5555555555555556 * (((char *)v249 - (char *)v248) >> 3) > v258) {
            unint64_t v258 = 0x5555555555555556 * (((char *)v249 - (char *)v248) >> 3);
          }
          unint64_t v259 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249 - (char *)v248) >> 3) >= 0x555555555555555
               ? 0xAAAAAAAAAAAAAAALL
               : v258;
          v303 = v253;
          if (v259)
          {
            if (v259 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_500;
            }
            v260 = (char *)operator new(24 * v259);
          }
          else
          {
            v260 = 0;
          }
          v261 = (std::string *)&v260[8 * (((char *)v251 - (char *)v248) >> 3)];
          std::string *v261 = v318;
          memset(&v318, 0, sizeof(v318));
          if (v251 == v248)
          {
            v263 = &v260[8 * (((char *)v251 - (char *)v248) >> 3)];
          }
          else
          {
            v262 = v251;
            v263 = &v260[8 * (((char *)v251 - (char *)v248) >> 3)];
            do
            {
              long long v264 = *(_OWORD *)&v262[-1].__r_.__value_.__l.__data_;
              *((void *)v263 - 1) = *((void *)&v262[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v263 - 24) = v264;
              v263 -= 24;
              v262[-1].__r_.__value_.__l.__size_ = 0;
              v262[-1].__r_.__value_.__r.__words[2] = 0;
              v262[-1].__r_.__value_.__r.__words[0] = 0;
              --v262;
            }
            while (v262 != v248);
            do
            {
              if (SHIBYTE(v251[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v251[-1].__r_.__value_.__l.__data_);
              }
              --v251;
            }
            while (v251 != v248);
          }
          v249 = (std::string *)&v260[24 * v259];
          v251 = v261 + 1;
          if (v248) {
            operator delete(v248);
          }
          v248 = (std::string *)v263;
          v253 = v303;
        }
        else
        {
          long long v257 = *(_OWORD *)&v318.__r_.__value_.__l.__data_;
          v251->__r_.__value_.__r.__words[2] = v318.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v251->__r_.__value_.__l.__data_ = v257;
          ++v251;
          memset(&v318, 0, sizeof(v318));
        }
        if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v318.__r_.__value_.__l.__data_);
        }
        if (v250 >= v253) {
          break;
        }
        if ((v251[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          data = v251 - 1;
        }
        else {
          data = (std::string *)v251[-1].__r_.__value_.__l.__data_;
        }
        *(void *)v250 = data;
        std::string::size_type size = HIBYTE(v251[-1].__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v251[-1].__r_.__value_.__l.__size_;
        }
        *((void *)v250 + 1) = size;
        v250 += 16;
        v246 += 32;
        if (v246 == v305) {
          goto LABEL_441;
        }
      }
      uint64_t v265 = (v250 - v252) >> 4;
      unint64_t v266 = v265 + 1;
      if ((unint64_t)(v265 + 1) >> 60) {
        goto LABEL_492;
      }
      if ((v253 - v252) >> 3 > v266) {
        unint64_t v266 = (v253 - v252) >> 3;
      }
      if ((unint64_t)(v253 - v252) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v266 = 0xFFFFFFFFFFFFFFFLL;
      }
      if (v266 >> 60) {
LABEL_500:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v267 = 16 * v266;
      v268 = (char *)operator new(16 * v266);
      v269 = &v268[16 * v265];
      std::string::size_type v270 = HIBYTE(v251[-1].__r_.__value_.__r.__words[2]);
      if ((v270 & 0x80u) == 0) {
        v271 = v251 - 1;
      }
      else {
        v271 = (std::string *)v251[-1].__r_.__value_.__l.__data_;
      }
      *(void *)v269 = v271;
      if ((v270 & 0x80u) != 0) {
        std::string::size_type v270 = v251[-1].__r_.__value_.__l.__size_;
      }
      *((void *)v269 + 1) = v270;
      if (v250 == v252)
      {
        v273 = &v268[16 * v265];
      }
      else
      {
        v272 = &v268[16 * v265];
        do
        {
          v273 = v272 - 16;
          *((_OWORD *)v272 - 1) = *((_OWORD *)v250 - 1);
          v250 -= 16;
          v272 -= 16;
        }
        while (v250 != v252);
      }
      v253 = &v268[v267];
      v250 = v269 + 16;
      if (v252) {
        operator delete(v252);
      }
      v252 = v273;
      v246 += 32;
    }
    while (v246 != v305);
  }
LABEL_441:
  uint64_t v148 = mlir::DenseStringElementsAttr::get(v243, *((uint64_t *)&v243 + 1), (uint64_t)v252, (v250 - v252) >> 4);
  if (v252) {
    operator delete(v252);
  }
  if (v248)
  {
    while (v251 != v248)
    {
      if (SHIBYTE(v251[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v251[-1].__r_.__value_.__l.__data_);
      }
      --v251;
    }
    v185 = (llvm::APFloatBase *)v248;
    goto LABEL_377;
  }
  return v148;
}

unint64_t mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v15);
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = v15;
    *(void *)(v4 + 72) = v16;
    unint64_t v5 = 0x8000000000000000;
    return v5 | v3;
  }
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(v2 + 56));
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v15);
    uint64_t v9 = *(void *)(a1 + 8);
    *(_OWORD *)(v9 + 56) = v15;
    *(void *)(v9 + 72) = v16;
    uint64_t v7 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v7 + 56) != 10) {
      goto LABEL_14;
    }
  }
  else if (v8 != 10)
  {
    goto LABEL_14;
  }
  UInt64Integeruint64_t Value = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v7 + 64), *(void *)(v7 + 72));
  if (v11)
  {
    unint64_t v12 = UInt64IntegerValue;
    if ((UInt64IntegerValue & 0x8000000000000000) == 0)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v15);
      uint64_t v13 = *(void *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v15;
      *(void *)(v13 + 72) = v16;
      if (v8 == 24) {
        unint64_t v3 = -(uint64_t)v12;
      }
      else {
        unint64_t v3 = v12;
      }
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFFF00;
      unint64_t v3 = v3;
      return v5 | v3;
    }
  }
LABEL_14:
  mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(a1, Loc);
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::find(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    uint64_t result = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *result;
    if (*a2 == *result) {
      return result;
    }
    int v7 = 1;
    while (v6 != -1)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (*a2 == v6) {
        return (uint64_t *)(v2 + 16 * v4);
      }
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>,unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::try_emplace<mlir::DistinctAttr&>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  unsigned int v8 = *((_DWORD *)result + 4);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = *result;
  unsigned int v10 = v8 - 1;
  unsigned int v11 = (37 * *a2) & (v8 - 1);
  unint64_t v12 = (uint64_t *)(*result + 16 * v11);
  uint64_t v13 = *v12;
  if (*a2 == *v12)
  {
LABEL_3:
    char v14 = 0;
    goto LABEL_10;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v13 != -1)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v13 == -2;
    }
    if (v18) {
      uint64_t v16 = v12;
    }
    unsigned int v19 = v11 + v17++;
    unsigned int v11 = v19 & v10;
    unint64_t v12 = (uint64_t *)(v9 + 16 * (v19 & v10));
    uint64_t v13 = *v12;
    if (*a2 == *v12) {
      goto LABEL_3;
    }
  }
  if (v16) {
    unint64_t v12 = v16;
  }
  int v20 = *((_DWORD *)result + 2);
  if (4 * v20 + 4 < 3 * v8)
  {
    if (v8 + ~v20 - *((_DWORD *)result + 3) > v8 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_23:
    v8 *= 2;
  }
  uint64_t result = llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow((uint64_t)result, v8);
  uint64_t v15 = *a2;
  int v21 = *((_DWORD *)v6 + 4) - 1;
  unsigned int v22 = (37 * *a2) & v21;
  unint64_t v12 = (uint64_t *)(*v6 + 16 * v22);
  uint64_t v23 = *v12;
  if (*a2 == *v12) {
    goto LABEL_7;
  }
  __int16 v24 = 0;
  int v25 = 1;
  while (v23 != -1)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == -2;
    }
    if (v26) {
      __int16 v24 = v12;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    unint64_t v12 = (uint64_t *)(*v6 + 16 * (v27 & v21));
    uint64_t v23 = *v12;
    if (v15 == *v12) {
      goto LABEL_7;
    }
  }
  if (v24) {
    unint64_t v12 = v24;
  }
LABEL_6:
  uint64_t v15 = *v12;
LABEL_7:
  ++*((_DWORD *)v6 + 2);
  if (v15 != -1) {
    --*((_DWORD *)v6 + 3);
  }
  uint64_t *v12 = *a2;
  v12[1] = *a3;
  uint64_t v9 = *v6;
  unsigned int v8 = *((_DWORD *)v6 + 4);
  char v14 = 1;
LABEL_10:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v14;
  return result;
}

uint64_t anonymous namespace'::TensorLiteralParser::parseList(uint64_t *a1, uint64_t a2)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  char v15 = 1;
  uint64_t v16 = a1;
  __src = v19;
  uint64_t v18 = 0x400000000;
  unsigned int v14 = 0;
  v13[0] = a1;
  v13[1] = &v14;
  v13[2] = &v15;
  v13[3] = &v16;
  v13[4] = &__src;
  {
    uint64_t v10 = 0;
    unsigned int v11 = __src;
    if (__src == v19) {
      return v10;
    }
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v3 = v14;
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), 1uLL, 8);
    uint64_t v4 = *(unsigned int *)(a2 + 8);
  }
  *(void *)(*(void *)a2 + 8 * v4) = v3;
  unint64_t v5 = *(unsigned int *)(a2 + 12);
  uint64_t v6 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v6;
  int v7 = __src;
  uint64_t v8 = v18;
  unint64_t v9 = v18 + v6;
  if (v9 > v5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  if (v8)
  {
    memcpy((void *)(*(void *)a2 + 8 * v6), v7, 8 * v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a2 + 8) = v6 + v8;
  uint64_t v10 = 1;
  unsigned int v11 = __src;
  if (__src != v19) {
LABEL_9:
  }
    free(v11);
  return v10;
}

uint64_t anonymous namespace'::TensorLiteralParser::parseElement(_anonymous_namespace_::TensorLiteralParser *this)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 8);
  uint64_t v3 = (long long *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 9:
    case 0xA:
    case 0x36:
    case 0x4A:
      uint64_t v6 = (char *)*((void *)this + 8);
      unint64_t v5 = *((void *)this + 9);
      if ((unint64_t)v6 < v5) {
        goto LABEL_13;
      }
      int v7 = (unsigned char *)*((void *)this + 7);
      uint64_t v8 = (v6 - v7) >> 5;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 59) {
        goto LABEL_93;
      }
      uint64_t v10 = v5 - (void)v7;
      if (v10 >> 4 > v9) {
        unint64_t v9 = v10 >> 4;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (!v11)
      {
        unint64_t v12 = 0;
        goto LABEL_37;
      }
      if (!(v11 >> 59))
      {
        unint64_t v12 = (char *)operator new(32 * v11);
LABEL_37:
        uint64_t v36 = &v12[32 * v8];
        *uint64_t v36 = 0;
        long long v37 = *v3;
        uint64_t v38 = &v12[32 * v11];
        *((void *)v36 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v37;
        char v15 = v36 + 32;
        if (v6 == v7) {
          goto LABEL_40;
        }
        do
        {
          long long v39 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v39;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v7);
        goto LABEL_39;
      }
      goto LABEL_94;
    case 0xB:
      uint64_t v6 = (char *)*((void *)this + 8);
      unint64_t v13 = *((void *)this + 9);
      if ((unint64_t)v6 < v13)
      {
LABEL_13:
        char *v6 = 0;
        long long v14 = *v3;
        *((void *)v6 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v6 + 8) = v14;
        char v15 = v6 + 32;
LABEL_42:
        *((void *)this + 8) = v15;
        goto LABEL_43;
      }
      uint64_t v43 = (unsigned char *)*((void *)this + 7);
      uint64_t v44 = (v6 - v43) >> 5;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59) {
        goto LABEL_93;
      }
      uint64_t v46 = v13 - (void)v43;
      if (v46 >> 4 > v45) {
        unint64_t v45 = v46 >> 4;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (!v47)
      {
        long long v48 = 0;
        goto LABEL_83;
      }
      if (!(v47 >> 59))
      {
        long long v48 = (char *)operator new(32 * v47);
LABEL_83:
        uint64_t v36 = &v48[32 * v44];
        *uint64_t v36 = 0;
        long long v61 = *v3;
        uint64_t v38 = &v48[32 * v47];
        *((void *)v36 + 3) = *((void *)v3 + 2);
        *(_OWORD *)(v36 + 8) = v61;
        char v15 = v36 + 32;
        if (v6 == v43)
        {
LABEL_40:
          *((void *)this + 7) = v36;
          *((void *)this + 8) = v15;
          *((void *)this + 9) = v38;
          if (v6) {
            operator delete(v6);
          }
          goto LABEL_42;
        }
        do
        {
          long long v62 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v36 - 1) = v62;
          v36 -= 32;
          v6 -= 32;
        }
        while (v6 != v43);
LABEL_39:
        uint64_t v6 = (char *)*((void *)this + 7);
        goto LABEL_40;
      }
      goto LABEL_94;
    case 0x15:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      uint64_t v25 = *(void *)(v1 + 8);
      *(_OWORD *)(v25 + 56) = v69;
      *(void *)(v25 + 72) = v70;
      {
        uint64_t v26 = *(void *)this;
        *(void *)&long long v69 = "expected ',' between complex elements";
        __int16 v72 = 259;
        if (mlir::detail::Parser::parseToken(v26, 16, (uint64_t)&v69))
        {
          {
            uint64_t v27 = *(void *)this;
            v67[0] = "expected ')' after complex elements";
            __int16 v68 = 259;
            if (mlir::detail::Parser::parseToken(v27, 28, (uint64_t)v67)) {
              return 1;
            }
          }
        }
      }
      return 0;
    case 0x18:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v69);
      uint64_t v28 = *(void *)(v1 + 8);
      *(_OWORD *)(v28 + 56) = v69;
      *(void *)(v28 + 72) = v70;
      uint64_t v29 = *(void *)this;
      uint64_t v30 = *(void *)(*(void *)this + 8);
      int v32 = *(_DWORD *)(v30 + 56);
      __int16 v31 = (long long *)(v30 + 56);
      if ((v32 - 9) < 2)
      {
        uint64_t v34 = (char *)*((void *)this + 8);
        unint64_t v33 = *((void *)this + 9);
        if ((unint64_t)v34 < v33)
        {
          *uint64_t v34 = 1;
          long long v35 = *v31;
          *((void *)v34 + 3) = *((void *)v31 + 2);
          *(_OWORD *)(v34 + 8) = v35;
          *((void *)this + 8) = v34 + 32;
          goto LABEL_43;
        }
        uint64_t v55 = (unsigned char *)*((void *)this + 7);
        uint64_t v56 = (v34 - v55) >> 5;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 59) {
LABEL_93:
        }
          abort();
        uint64_t v58 = v33 - (void)v55;
        if (v58 >> 4 > v57) {
          unint64_t v57 = v58 >> 4;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v59 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 59) {
LABEL_94:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          int v60 = (char *)operator new(32 * v59);
        }
        else
        {
          int v60 = 0;
        }
        BOOL v63 = &v60[32 * v56];
        char *v63 = 1;
        long long v64 = *v31;
        *((void *)v63 + 3) = *((void *)v31 + 2);
        *(_OWORD *)(v63 + 8) = v64;
        int v65 = v63 + 32;
        if (v34 != v55)
        {
          do
          {
            long long v66 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v63 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v63 - 1) = v66;
            v63 -= 32;
            v34 -= 32;
          }
          while (v34 != v55);
          uint64_t v34 = (char *)*((void *)this + 7);
        }
        *((void *)this + 7) = v63;
        *((void *)this + 8) = v65;
        *((void *)this + 9) = &v60[32 * v59];
        if (v34) {
          operator delete(v34);
        }
        *((void *)this + 8) = v65;
LABEL_43:
        uint64_t v40 = *(void *)this;
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v40 + 8) + 8), (uint64_t)&v69);
        uint64_t v41 = *(void *)(v40 + 8);
        *(_OWORD *)(v41 + 56) = v69;
        *(void *)(v41 + 72) = v70;
        return 1;
      }
      v67[0] = "expected integer or floating point literal";
      __int16 v68 = 259;
      mlir::detail::Parser::emitError(v29, (uint64_t)v67, &v69);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((void)v69) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      }
      if (v78)
      {
        uint64_t v49 = (void **)__p;
        if (__p)
        {
          __int16 v50 = v77;
          uint64_t v51 = __p;
          if (v77 != __p)
          {
            do
              __int16 v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            uint64_t v51 = __p;
          }
          char v77 = v49;
          operator delete(v51);
        }
        int v20 = v74;
        if (v74)
        {
          uint64_t v52 = v75;
          unsigned int v22 = v74;
          if (v75 != v74)
          {
            do
            {
              uint64_t v54 = (void *)*--v52;
              uint64_t v53 = v54;
              *uint64_t v52 = 0;
              if (v54) {
                operator delete[](v53);
              }
            }
            while (v52 != v20);
LABEL_69:
            unsigned int v22 = v74;
          }
LABEL_70:
          v75 = v20;
          operator delete(v22);
        }
LABEL_71:
        if (v71 != &v73) {
          free(v71);
        }
      }
      return v16;
    default:
      v67[0] = "expected element literal of primitive type";
      __int16 v68 = 259;
      mlir::detail::Parser::emitError(v1, (uint64_t)v67, &v69);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
      if ((void)v69) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
      }
      if (!v78) {
        return v16;
      }
      int v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v77;
        unsigned int v19 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = __p;
        }
        char v77 = v17;
        operator delete(v19);
      }
      int v20 = v74;
      if (!v74) {
        goto LABEL_71;
      }
      int v21 = v75;
      unsigned int v22 = v74;
      if (v75 == v74) {
        goto LABEL_70;
      }
      do
      {
        __int16 v24 = (void *)*--v21;
        uint64_t v23 = v24;
        *int v21 = 0;
        if (v24) {
          operator delete[](v23);
        }
      }
      while (v21 != v20);
      goto LABEL_69;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TensorLiteralParser::parseList(llvm::SmallVectorImpl<long long> &)::$_0>(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(_anonymous_namespace_::TensorLiteralParser **)a1;
  __s2 = v26;
  uint64_t v25 = 0x400000000;
  if (*(_DWORD *)(*(void *)(*(void *)v2 + 8) + 56) == 22)
  {
    {
LABEL_3:
      uint64_t v3 = 0;
      goto LABEL_35;
    }
  }
  {
    goto LABEL_3;
  }
  ++**(_DWORD **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  if (*v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if ((void **)v5 == &__s2)
    {
LABEL_33:
      *uint64_t v4 = 0;
LABEL_34:
      uint64_t v3 = 1;
      goto LABEL_35;
    }
    unint64_t v6 = v25;
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7 >= v25)
    {
      if (v25) {
        memmove(*(void **)v5, __s2, 8 * v25);
      }
      goto LABEL_32;
    }
    if (*(_DWORD *)(v5 + 12) >= v25)
    {
      if (v7)
      {
        memmove(*(void **)v5, __s2, 8 * v7);
        uint64_t v8 = v25;
        if (v7 == v25)
        {
LABEL_32:
          *(_DWORD *)(v5 + 8) = v6;
          uint64_t v4 = *(unsigned char **)(a1 + 16);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = v25;
        if (!v25) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6, 8);
      uint64_t v7 = 0;
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_32;
      }
    }
    memcpy((void *)(*(void *)v5 + 8 * v7), (char *)__s2 + 8 * v7, 8 * v8 - 8 * v7);
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = **(uint64_t ***)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(v9 + 8);
  if (v11 == v25 && !memcmp(*(const void **)v9, __s2, 8 * v11)) {
    goto LABEL_34;
  }
  uint64_t v12 = *v10;
  unsigned int v22 = "tensor literal is invalid; ranks are not consistent between elements";
  __int16 v23 = 259;
  mlir::detail::Parser::emitError(v12, (uint64_t)&v22, v27);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    unint64_t v13 = (void **)__p;
    if (__p)
    {
      long long v14 = v33;
      char v15 = __p;
      if (v33 != __p)
      {
        do
          long long v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        char v15 = __p;
      }
      unint64_t v33 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v30;
    if (v30)
    {
      int v17 = v31;
      uint64_t v18 = v30;
      if (v31 != v30)
      {
        do
        {
          int v20 = (void *)*--v17;
          unsigned int v19 = v20;
          *int v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v30;
      }
      __int16 v31 = v16;
      operator delete(v18);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
LABEL_35:
  if (__s2 != v26) {
    free(__s2);
  }
  return v3;
}

__n128 llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  if (a1 != a2)
  {
    uint64_t v47 = v5;
    uint64_t v48 = v6;
    unint64_t v13 = (unint64_t *)(a3 + 16);
    unint64_t v12 = *(void *)(a3 + 16);
    long long v14 = *a1;
    int v44 = 2;
    unint64_t v45 = v14;
    uint64_t v15 = *(unsigned int *)(a3 + 24);
    uint64_t v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      unint64_t v37 = v15 + 1;
      BOOL v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        long long v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        uint64_t v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        uint64_t v16 = (__n128 *)&v44;
      }
    }
    int v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    __n128 result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *int v17 = result;
    ++*(_DWORD *)(a3 + 24);
    unsigned int v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v42 = (void *)(a4 + 32);
      uint64_t v43 = (unint64_t *)(a4 + 16);
      uint64_t v41 = (void *)(a3 + 32);
      do
      {
        int v20 = *a5;
        if (*a5)
        {
          size_t v21 = strlen(*a5);
          int v44 = 3;
          unint64_t v45 = v20;
          size_t v46 = v21;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        else
        {
          int v44 = 3;
          unint64_t v45 = 0;
          size_t v46 = 0;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        unint64_t v32 = v22 + 1;
        BOOL v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          unint64_t v23 = *v43;
LABEL_9:
          __int16 v24 = &v44;
          goto LABEL_10;
        }
        uint64_t v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        unint64_t v23 = *v43;
        __int16 v24 = (int *)&v40[*v43];
LABEL_10:
        uint64_t v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        long long v26 = *(_OWORD *)v24;
        *(void *)(v25 + 16) = *((void *)v24 + 2);
        *(_OWORD *)uint64_t v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        uint64_t v27 = *v19;
        int v44 = 2;
        unint64_t v45 = v27;
        uint64_t v28 = *(unsigned int *)(a3 + 24);
        unint64_t v29 = *(void *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          unint64_t v34 = v28 + 1;
          BOOL v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            uint64_t v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            unint64_t v29 = *v13;
            uint64_t v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          unint64_t v29 = *v13;
        }
        uint64_t v30 = (__n128 *)&v44;
LABEL_12:
        __int16 v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        __n128 result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *__int16 v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

char *std::vector<llvm::APInt>::__push_back_slow_path<llvm::APInt const&>(llvm::APInt **a1, uint64_t a2)
{
  uint64_t v2 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = (v3 - (char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v7 = a1[2] - (llvm::APInt *)v2;
  if (v7 >> 3 > v5) {
    unint64_t v5 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = 16 * v5;
  uint64_t v10 = (char *)operator new(16 * v5);
  uint64_t v11 = v10;
  unint64_t v12 = (llvm::APInt *)&v10[16 * v4];
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v12 + 2) = v13;
  if (v13 > 0x40)
  {
    llvm::APInt::initSlowCase(v12, (const void **)a2);
    uint64_t v2 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    long long v14 = &v11[v9];
    uint64_t v15 = (char *)v12 + 16;
    if (v3 != (char *)*a1) {
      goto LABEL_9;
    }
LABEL_18:
    *a1 = v12;
    a1[1] = (llvm::APInt *)v15;
    a1[2] = (llvm::APInt *)v14;
    goto LABEL_19;
  }
  *(void *)unint64_t v12 = *(void *)a2;
  long long v14 = &v10[v9];
  uint64_t v15 = (char *)v12 + 16;
  if (v3 == v2) {
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v16 = v3;
  int v17 = v3;
  do
  {
    *((_DWORD *)v12 - 2) = *((_DWORD *)v16 - 2);
    uint64_t v18 = *((void *)v17 - 2);
    v17 -= 16;
    *((void *)v12 - 2) = v18;
    unint64_t v12 = (llvm::APInt *)((char *)v12 - 16);
    *((_DWORD *)v16 - 2) = 0;
    uint64_t v16 = v17;
  }
  while (v17 != v2);
  *a1 = v12;
  a1[1] = (llvm::APInt *)v15;
  a1[2] = (llvm::APInt *)v14;
  while (v3 != v2)
  {
    if (*((_DWORD *)v3 - 2) >= 0x41u)
    {
      unsigned int v19 = (void *)*((void *)v3 - 2);
      if (v19) {
        operator delete[](v19);
      }
    }
    v3 -= 16;
  }
LABEL_19:
  if (v2) {
    operator delete(v2);
  }
  return v15;
}

void std::vector<llvm::APFloat>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    abort();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 32 * a2;
  uint64_t v6 = (llvm::APFloatBase *)operator new(32 * a2);
  uint64_t v7 = (char *)v6 + v5;
  uint64_t v8 = (char *)v6 + (char *)v4 - (char *)v2;
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(v6);
  uint64_t v10 = v4 - 3;
  uint64_t v11 = v8;
  do
  {
    while (1)
    {
      unsigned int v13 = v11 - 24;
      if (v9 != *v10) {
        break;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v10);
      v11 -= 32;
      unint64_t v12 = v10 - 1;
      v10 -= 4;
      if (v12 == v2) {
        goto LABEL_8;
      }
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v10);
    v11 -= 32;
    long long v14 = v10 - 1;
    v10 -= 4;
  }
  while (v14 != v2);
LABEL_8:
  uint64_t v2 = *(void ***)a1;
  uint64_t v15 = *(void ***)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v15 != v2)
  {
    uint64_t v16 = (llvm::detail::IEEEFloat *)(v15 - 3);
    do
    {
      while (v9 != *(void **)v16)
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v16);
        uint64_t v18 = (void **)(v17 - 8);
        uint64_t v16 = (llvm::detail::IEEEFloat *)(v17 - 32);
        if (v18 == v2) {
          goto LABEL_13;
        }
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v16);
      int v20 = (void **)(v19 - 8);
      uint64_t v16 = (llvm::detail::IEEEFloat *)(v19 - 32);
    }
    while (v20 != v2);
  }
LABEL_13:
  if (v2)
  {
LABEL_14:
    operator delete(v2);
  }
}

char *std::vector<llvm::APFloat>::__push_back_slow_path<llvm::APFloat const&>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    a1 = (char **)operator new(32 * v7);
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (char *)&v8[4 * v2];
  uint64_t v11 = *(void **)(a2 + 8);
  uint64_t v10 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  unint64_t v12 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v12 != v11)
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(v9 + 8), v10);
    unsigned int v13 = (char *)&v8[4 * v7];
    long long v14 = v9 + 32;
    uint64_t v16 = (void **)*v5;
    uint64_t v15 = v5[1];
    if (v15 != *v5) {
      goto LABEL_13;
    }
LABEL_24:
    llvm *v5 = v9;
    v5[1] = v14;
    v5[2] = v13;
    goto LABEL_25;
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(v9 + 8), v10);
  unsigned int v13 = (char *)&v8[4 * v7];
  long long v14 = v9 + 32;
  uint64_t v16 = (void **)*v5;
  uint64_t v15 = v5[1];
  if (v15 == *v5) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v17 = (void **)(v15 - 24);
  do
  {
    while (1)
    {
      uint64_t v19 = v9 - 24;
      if (v12 != *v17) {
        break;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v17);
      v9 -= 32;
      uint64_t v18 = v17 - 1;
      v17 -= 4;
      if (v18 == v16) {
        goto LABEL_17;
      }
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v17);
    v9 -= 32;
    int v20 = v17 - 1;
    v17 -= 4;
  }
  while (v20 != v16);
LABEL_17:
  uint64_t v15 = *v5;
  size_t v21 = v5[1];
  llvm *v5 = v9;
  v5[1] = v14;
  v5[2] = v13;
  if (v21 != v15)
  {
    uint64_t v22 = (llvm::detail::IEEEFloat *)(v21 - 24);
    do
    {
      while (v12 != *(void **)v22)
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v22);
        __int16 v24 = (char *)(v23 - 8);
        uint64_t v22 = (llvm::detail::IEEEFloat *)(v23 - 32);
        if (v24 == v15) {
          goto LABEL_25;
        }
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v22);
      long long v26 = (char *)(v25 - 8);
      uint64_t v22 = (llvm::detail::IEEEFloat *)(v25 - 32);
    }
    while (v26 != v15);
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void mlir::detail::Parser::parseStridedLayoutAttr(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()(uint64_t a1, const char *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = "expected a 64-bit signed integer or '?'";
  __int16 v11 = 259;
  mlir::detail::Parser::emitError(a1, a2, (uint64_t)&v10, v12);
  if (v12[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v12);
  }
  if (v19)
  {
    uint64_t v2 = (void **)__p;
    if (__p)
    {
      unint64_t v3 = v18;
      uint64_t v4 = __p;
      if (v18 != __p)
      {
        do
          unint64_t v3 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v3 - 1);
        while (v3 != v2);
        uint64_t v4 = __p;
      }
      uint64_t v18 = v2;
      operator delete(v4);
    }
    uint64_t v5 = v15;
    if (v15)
    {
      uint64_t v6 = v16;
      unint64_t v7 = v15;
      if (v16 != v15)
      {
        do
        {
          uint64_t v9 = (void *)*--v6;
          uint64_t v8 = v9;
          void *v6 = 0;
          if (v9) {
            operator delete[](v8);
          }
        }
        while (v6 != v5);
        unint64_t v7 = v15;
      }
      uint64_t v16 = v5;
      operator delete(v7);
    }
    if (v13 != &v14) {
      free(v13);
    }
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttribute(mlir::Type)::$_0>(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = mlir::detail::Parser::parseAttribute(a1[1], 0);
  uint64_t v4 = *((unsigned int *)v2 + 2);
  if (v4 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v2 + 2, v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)v2 + 2);
  }
  *(void *)(*v2 + 8 * v4) = v3;
  ++*((_DWORD *)v2 + 2);
  return *(void *)(*(void *)*a1 + 8 * *(unsigned int *)(*a1 + 8) - 8) != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseAttributeDict(mlir::NamedAttrList &)::$_0>(uint64_t *a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  LOBYTE(StringAttr) = 0;
  char v74 = 0;
  uint64_t v3 = *(void **)(v2 + 8);
  uint64_t v4 = (mlir::Token *)(v3 + 7);
  int v5 = *((_DWORD *)v3 + 14);
  if (v5 != 3 && v5 != 12)
  {
    if (v5 == 11)
    {
      mlir::Token::getStringValue(v4, &v75);
      LOWORD(v80) = 260;
      *(void *)&long long v77 = &v75;
      char v74 = 1;
      Stringuint64_t Attr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v75.__r_.__value_.__l.__data_);
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v60) {
          goto LABEL_34;
        }
      }
      else
      {
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
        if (!v7) {
          goto LABEL_34;
        }
      }
      goto LABEL_8;
    }
    if (!mlir::Token::isKeyword(v4))
    {
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected attribute name";
      __int16 v76 = 259;
      mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)&v75, &v77);
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
      if ((void)v77) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      }
      if (v87)
      {
        long long v39 = (void **)__p;
        if (__p)
        {
          uint64_t v40 = v86;
          uint64_t v41 = __p;
          if (v86 != __p)
          {
            do
              uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            uint64_t v41 = __p;
          }
          long long v86 = v39;
          operator delete(v41);
        }
        uint64_t v42 = v83;
        if (v83)
        {
          uint64_t v43 = v84;
          int v44 = v83;
          if (v84 != v83)
          {
            do
            {
              size_t v46 = (void *)*--v43;
              unint64_t v45 = v46;
              *uint64_t v43 = 0;
              if (v46) {
                operator delete[](v45);
              }
            }
            while (v43 != v42);
            int v44 = v83;
          }
          v84 = v42;
          operator delete(v44);
        }
        if (v79 != v82) {
          free(v79);
        }
      }
      return v21;
    }
    uint64_t v3 = *(void **)(v2 + 8);
  }
  uint64_t v31 = v3[8];
  uint64_t v30 = v3[9];
  LOWORD(v80) = 261;
  *(void *)&long long v77 = v31;
  *((void *)&v77 + 1) = v30;
  char v74 = 1;
  Stringuint64_t Attr = mlir::Builder::getStringAttr((mlir::StringAttr **)v2, (mlir::MLIRContext *)&v77);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if (!v38)
  {
LABEL_34:
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected valid attribute name";
    __int16 v76 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)&v75, &v77);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if ((void)v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v87)
    {
      unint64_t v32 = (void **)__p;
      if (__p)
      {
        BOOL v33 = v86;
        unint64_t v34 = __p;
        if (v86 != __p)
        {
          do
            BOOL v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        long long v86 = v32;
        operator delete(v34);
      }
      uint64_t v25 = v83;
      if (!v83) {
        goto LABEL_52;
      }
      BOOL v35 = v84;
      uint64_t v27 = v83;
      if (v84 == v83)
      {
LABEL_51:
        v84 = v25;
        operator delete(v27);
LABEL_52:
        if (v79 != v82) {
          free(v79);
        }
        return v21;
      }
      do
      {
        unint64_t v37 = (void *)*--v35;
        uint64_t v36 = v37;
        *BOOL v35 = 0;
        if (v37) {
          operator delete[](v36);
        }
      }
      while (v35 != v25);
LABEL_50:
      uint64_t v27 = v83;
      goto LABEL_51;
    }
    return v21;
  }
LABEL_8:
  uint64_t v8 = a1[1];
  uint64_t v9 = v8 + 8;
  if (*(unsigned char *)v8)
  {
    int v10 = 4;
  }
  else
  {
    int v10 = *(_DWORD *)(v8 + 16);
    if (!v10)
    {
      uint64_t v47 = 0;
LABEL_69:
      llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(v8, v47, &StringAttr);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)&v77);
      uint64_t v48 = *(void *)(v2 + 8);
      *(_OWORD *)(v48 + 56) = v77;
      *(void *)(v48 + 72) = v78;
      *(void *)&long long v77 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
      *((void *)&v77 + 1) = v49;
      v75.__r_.__value_.__s.__data_[0] = 46;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v77, (char *)&v75, 1uLL, 0);
      if (v50 != -1 && *((void *)&v77 + 1) > v50 + 1)
      {
        if (v50 >= *((void *)&v77 + 1)) {
          size_t v52 = *((void *)&v77 + 1);
        }
        else {
          size_t v52 = v50;
        }
        mlir::MLIRContext::getOrLoadDialect(***(void ***)(v2 + 8), (void *)v77, v52);
      }
      uint64_t v53 = *(void *)(v2 + 8);
      if (*(_DWORD *)(v53 + 56) == 18)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v53 + 8), (uint64_t)&v77);
        uint64_t v54 = *(void *)(v2 + 8);
        *(_OWORD *)(v54 + 56) = v77;
        *(void *)(v54 + 72) = v78;
        uint64_t v55 = mlir::detail::Parser::parseAttribute(v2, 0);
        if (!v55) {
          return 0;
        }
        uint64_t v56 = a1[2];
        mlir::NamedAttribute::NamedAttribute(&v77, StringAttr, v55);
        uint64_t v58 = *((void *)&v77 + 1);
        uint64_t v57 = v77;
        uint64_t v59 = v56;
      }
      else
      {
        uint64_t v61 = a1[2];
        uint64_t v62 = StringAttr;
        Unituint64_t Attr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v2, v51);
        mlir::NamedAttribute::NamedAttribute(&v77, v62, UnitAttr);
        uint64_t v58 = *((void *)&v77 + 1);
        uint64_t v57 = v77;
        uint64_t v59 = v61;
      }
      mlir::NamedAttrList::push_back(v59, v57, v58);
      return 1;
    }
    uint64_t v9 = *(void *)(v8 + 8);
  }
  int v11 = v10 - 1;
  unsigned int v12 = ((StringAttr >> 4) ^ (StringAttr >> 9)) & v11;
  unsigned int v13 = (void *)(v9 + 8 * v12);
  uint64_t v14 = *v13;
  if (StringAttr != *v13)
  {
    int v65 = 0;
    int v66 = 1;
    while (v14 != -4096)
    {
      if (v65) {
        BOOL v67 = 0;
      }
      else {
        BOOL v67 = v14 == -8192;
      }
      if (v67) {
        int v65 = v13;
      }
      unsigned int v68 = v12 + v66++;
      unsigned int v12 = v68 & v11;
      unsigned int v13 = (void *)(v9 + 8 * v12);
      uint64_t v14 = *v13;
      if (StringAttr == *v13) {
        goto LABEL_13;
      }
    }
    if (v65) {
      uint64_t v47 = v65;
    }
    else {
      uint64_t v47 = v13;
    }
    goto LABEL_69;
  }
LABEL_13:
  v71 = "duplicate key '";
  __int16 v72 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v71, &v77);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StringAttr);
  if ((void)v77)
  {
    __int16 v76 = 261;
    v75.__r_.__value_.__r.__words[0] = AttrData;
    v75.__r_.__value_.__l.__size_ = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v77 + 8, (const void ***)&v75);
    if ((void)v77)
    {
      LODWORD(v75.__r_.__value_.__l.__data_) = 3;
      v75.__r_.__value_.__l.__size_ = (std::string::size_type)"' in dictionary attribute";
      v75.__r_.__value_.__r.__words[2] = 25;
      uint64_t v17 = &v75;
      uint64_t v18 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v69 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          int64_t v70 = (char *)&v75 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          uint64_t v18 = (char *)v79;
          uint64_t v17 = (std::string *)((char *)v79 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v69, 24);
          uint64_t v17 = &v75;
          uint64_t v18 = (char *)v79;
        }
      }
      char v19 = &v18[24 * v80];
      long long v20 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *((void *)v19 + 2) = *((void *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)char v19 = v20;
      ++v80;
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if ((void)v77) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  }
  if (v87)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v86;
      __int16 v24 = __p;
      if (v86 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        __int16 v24 = __p;
      }
      long long v86 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v83;
    if (!v83) {
      goto LABEL_52;
    }
    long long v26 = v84;
    uint64_t v27 = v83;
    if (v84 == v83) {
      goto LABEL_51;
    }
    do
    {
      unint64_t v29 = (void *)*--v26;
      uint64_t v28 = v29;
      void *v26 = 0;
      if (v29) {
        operator delete[](v28);
      }
    }
    while (v26 != v25);
    goto LABEL_50;
  }
  return v21;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>,mlir::StringAttr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::InsertIntoBucket<mlir::StringAttr const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow((unsigned int *)a1, v8);
  uint64_t v11 = a1 + 8;
  unsigned int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (void *)(v11 + 8 * v14);
  uint64_t v15 = *a2;
  if (*a3 != *a2)
  {
    std::string::size_type v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        std::string::size_type v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = (void *)(v11 + 8 * (v19 & v13));
      uint64_t v15 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  return a2;
}

unsigned int *llvm::SmallDenseMap<mlir::StringAttr,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::StringAttr,void>,llvm::detail::DenseSetPair<mlir::StringAttr>>::grow(unsigned int *result, unsigned int a2)
{
  uint64_t v2 = result;
  void v60[3] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    unsigned int v6 = (llvm *)*((void *)result + 1);
    uint64_t v7 = result[4];
    if (a2 > 4)
    {
      uint64_t v23 = a2;
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
      *((void *)v2 + 1) = buffer;
      *((void *)v2 + 2) = v23;
      int v25 = *v2;
      unsigned int v8 = (llvm *)((char *)v6 + 8 * v7);
      *(void *)uint64_t v2 = *v2 & 1;
      if ((v25 & 1) == 0)
      {
        long long v26 = &buffer->i8[8 * v23];
        unint64_t v27 = 8 * v23 - 8;
        if (v27 < 0x18)
        {
          unint64_t v29 = (char *)buffer;
          goto LABEL_28;
        }
LABEL_22:
        uint64_t v28 = (v27 >> 3) + 1;
        unint64_t v29 = &buffer->i8[8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v30 = buffer + 1;
        int64x2_t v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30[-1] = v31;
          *uint64_t v30 = v31;
          v30 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          if (v7)
          {
            BOOL v33 = v6;
            do
            {
              uint64_t v40 = *(void *)v33;
              if ((*(void *)v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (*(unsigned char *)v2)
                {
                  int v35 = 4;
                  unint64_t v34 = v2 + 2;
                }
                else
                {
                  unint64_t v34 = (unsigned int *)*((void *)v2 + 1);
                  int v35 = v2[4];
                }
                int v36 = v35 - 1;
                unsigned int v37 = (v35 - 1) & ((v40 >> 4) ^ (v40 >> 9));
                uint64_t v38 = &v34[2 * v37];
                uint64_t v39 = *(void *)v38;
                if (v40 != *(void *)v38)
                {
                  uint64_t v41 = 0;
                  int v42 = 1;
                  while (v39 != -4096)
                  {
                    if (v41) {
                      BOOL v43 = 0;
                    }
                    else {
                      BOOL v43 = v39 == -8192;
                    }
                    if (v43) {
                      uint64_t v41 = v38;
                    }
                    unsigned int v44 = v37 + v42++;
                    unsigned int v37 = v44 & v36;
                    uint64_t v38 = &v34[2 * (v44 & v36)];
                    uint64_t v39 = *(void *)v38;
                    if (v40 == *(void *)v38) {
                      goto LABEL_33;
                    }
                  }
                  if (v41) {
                    uint64_t v38 = v41;
                  }
                }
LABEL_33:
                *(void *)uint64_t v38 = v40;
                *v2 += 2;
              }
              BOOL v33 = (llvm *)((char *)v33 + 8);
            }
            while (v33 != v8);
          }
          llvm::deallocate_buffer(v6, (void *)(8 * v7));
        }
        do
        {
LABEL_28:
          *(void *)unint64_t v29 = -4096;
          v29 += 8;
        }
        while (v29 != v26);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v8 = (llvm *)((char *)v6 + 8 * v7);
      *(void *)__n128 result = 1;
    }
    long long v26 = (char *)(v2 + 10);
    buffer = (int64x2_t *)(v2 + 2);
    unint64_t v27 = 24;
    goto LABEL_22;
  }
  int v9 = &v59;
  if ((*((void *)result + 1) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    uint64_t v10 = *((void *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v59 = *((void *)result + 1);
    int v9 = v60;
    uint64_t v10 = *((void *)result + 2);
    if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      uint64_t v11 = *((void *)result + 3);
      if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_55;
    }
  }
  *v9++ = v10;
  uint64_t v11 = *((void *)result + 3);
  if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    uint64_t v12 = *((void *)result + 4);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  *v9++ = v11;
  uint64_t v12 = *((void *)result + 4);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    unsigned int v13 = *result;
    if (a2 < 5) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  *v9++ = v12;
  unsigned int v13 = *result;
  if (a2 < 5)
  {
LABEL_13:
    *(void *)__n128 result = v13 & 1;
    if ((v13 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_58:
    std::string::size_type v16 = (uint64_t *)(v2 + 10);
    uint64_t v15 = (int64x2_t *)(v2 + 2);
    unint64_t v17 = 24;
    goto LABEL_16;
  }
LABEL_57:
  uint64_t *result = v13 & 0xFFFFFFFE;
  uint64_t v45 = a2;
  __n128 result = (unsigned int *)llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
  *((void *)v2 + 1) = result;
  *((void *)v2 + 2) = v45;
  int v46 = *v2;
  *(void *)uint64_t v2 = *v2 & 1;
  if (v46) {
    goto LABEL_58;
  }
LABEL_14:
  uint64_t v14 = v2[4];
  if (!v14) {
    goto LABEL_61;
  }
  uint64_t v15 = (int64x2_t *)*((void *)v2 + 1);
  std::string::size_type v16 = &v15->i64[v14];
  unint64_t v17 = (char *)v16 - (char *)v15 - 8;
  if (v17 < 0x18)
  {
    unsigned int v19 = (uint64_t *)*((void *)v2 + 1);
    do
LABEL_60:
      *v19++ = -4096;
    while (v19 != v16);
    goto LABEL_61;
  }
LABEL_16:
  uint64_t v18 = (v17 >> 3) + 1;
  unsigned int v19 = &v15->i64[v18 & 0x3FFFFFFFFFFFFFFCLL];
  long long v20 = v15 + 1;
  int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v20[-1] = v21;
    int64x2_t *v20 = v21;
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_60;
  }
LABEL_61:
  if (&v59 != v9)
  {
    uint64_t v47 = &v59;
    do
    {
      uint64_t v54 = *v47;
      if ((*v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)v2)
        {
          int v49 = 4;
          uint64_t v48 = v2 + 2;
        }
        else
        {
          uint64_t v48 = (unsigned int *)*((void *)v2 + 1);
          int v49 = v2[4];
        }
        int v50 = v49 - 1;
        unsigned int v51 = (v49 - 1) & ((v54 >> 4) ^ (v54 >> 9));
        size_t v52 = &v48[2 * v51];
        uint64_t v53 = *(void *)v52;
        if (v54 != *(void *)v52)
        {
          uint64_t v55 = 0;
          int v56 = 1;
          while (v53 != -4096)
          {
            if (v55) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v53 == -8192;
            }
            if (v57) {
              uint64_t v55 = v52;
            }
            unsigned int v58 = v51 + v56++;
            unsigned int v51 = v58 & v50;
            size_t v52 = &v48[2 * (v58 & v50)];
            uint64_t v53 = *(void *)v52;
            if (v54 == *(void *)v52) {
              goto LABEL_65;
            }
          }
          if (v55) {
            size_t v52 = v55;
          }
        }
LABEL_65:
        *(void *)size_t v52 = v54;
        *v2 += 2;
      }
      ++v47;
    }
    while (v47 != v9);
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_0>(uint64_t *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 != 24)
  {
    int v6 = *(_DWORD *)(v3 + 56);
    LOBYTE(__p) = 0;
    unsigned __int8 v45 = 0;
    if (v4 != 10) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v11 = *(void *)(v3 + 64);
    unint64_t v12 = *(void *)(v3 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
    uint64_t v13 = *(void *)(v2 + 8);
    *(_OWORD *)(v13 + 56) = *(_OWORD *)__x;
    *(void *)(v13 + 72) = v47;
    buildAttributeAPInt((uint64_t)__x, *(void *)v1, v4 == 24, v11, v12);
    int v14 = v47;
    if (v45 == v47)
    {
      if (v45)
      {
        if (v44 >= 0x41 && __p) {
          operator delete[](__p);
        }
        int v15 = 0;
        __p = *(void **)__x;
        unsigned int v44 = *(_DWORD *)&__x[8];
        *(_DWORD *)&__x[8] = 0;
      }
      else
      {
        int v15 = 1;
      }
    }
    else if (v45)
    {
      if (v44 >= 0x41 && __p) {
        operator delete[](__p);
      }
      unsigned __int8 v45 = 0;
      int v15 = 1;
    }
    else
    {
      int v15 = 0;
      unsigned int v44 = *(_DWORD *)&__x[8];
      __p = *(void **)__x;
      *(_DWORD *)&__x[8] = 0;
      unsigned __int8 v45 = 1;
    }
    if (v14 && *(_DWORD *)&__x[8] >= 0x41u && *(void *)__x) {
      operator delete[](*(void **)__x);
    }
    if (!v15)
    {
      unsigned int v9 = v44;
      if (!v44)
      {
LABEL_74:
        ++*(void *)(v1 + 32);
        uint64_t v16 = 1;
        goto LABEL_75;
      }
LABEL_73:
      std::vector<char>::size_type v37 = v9 >> 3;
      v38.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)(v1 + 16);
      uint64_t v39 = &v38.__i_[-*(void *)(v1 + 8)];
      __x[0] = 0;
      std::vector<char>::insert((std::vector<char> *)(v1 + 8), v38, v37, __x);
      llvm::StoreIntToMemory((llvm **)&__p, (const llvm::APInt *)&v39[*(void *)(v1 + 8)], v37);
      goto LABEL_74;
    }
    v41[0] = "integer constant out of range";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      int64x2_t v31 = (void **)v52;
      if (v52)
      {
        uint64_t v32 = v53;
        BOOL v33 = v52;
        if (v53 != v52)
        {
          do
            uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          BOOL v33 = v52;
        }
        uint64_t v53 = v31;
        operator delete(v33);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      unint64_t v34 = v51;
      uint64_t v22 = v50;
      if (v51 == v50) {
        goto LABEL_69;
      }
      do
      {
        int v36 = (void *)*--v34;
        int v35 = v36;
        *unint64_t v34 = 0;
        if (v36) {
          operator delete[](v35);
        }
      }
      while (v34 != v20);
      goto LABEL_68;
    }
    goto LABEL_75;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__x);
  uint64_t v5 = *(void *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)__x;
  *(void *)(v5 + 72) = v47;
  uint64_t v3 = *(void *)(v2 + 8);
  int v6 = *(_DWORD *)(v3 + 56);
  LOBYTE(__p) = 0;
  unsigned __int8 v45 = 0;
  if (v6 == 10) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 == 74 || v6 == 54)
  {
    if (mlir::Type::isInteger((mlir::Type *)v1, 1))
    {
      int v7 = *(_DWORD *)(*(void *)(v2 + 8) + 56);
      mlir::Type::isUnsignedInteger((mlir::Type *)v1);
      BOOL v8 = v7 == 74;
      unsigned int v9 = 8;
      unsigned int v44 = 8;
      __p = (void *)v8;
      unsigned __int8 v45 = 1;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)__x);
      uint64_t v10 = *(void *)(v2 + 8);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)__x;
      *(void *)(v10 + 72) = v47;
      goto LABEL_73;
    }
    v41[0] = "expected i1 type for 'true' or 'false' values";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      unint64_t v17 = (void **)v52;
      if (v52)
      {
        uint64_t v18 = v53;
        unsigned int v19 = v52;
        if (v53 != v52)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = v52;
        }
        uint64_t v53 = v17;
        operator delete(v19);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      int64x2_t v21 = v51;
      uint64_t v22 = v50;
      if (v51 == v50)
      {
LABEL_69:
        unsigned int v51 = v20;
        operator delete(v22);
LABEL_70:
        if (v48 != &v49) {
          free(v48);
        }
        goto LABEL_75;
      }
      do
      {
        __int16 v24 = (void *)*--v21;
        uint64_t v23 = v24;
        *int64x2_t v21 = 0;
        if (v24) {
          operator delete[](v23);
        }
      }
      while (v21 != v20);
LABEL_68:
      uint64_t v22 = v50;
      goto LABEL_69;
    }
  }
  else
  {
    v41[0] = "expected integer literal";
    __int16 v42 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v41, __x);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__x);
    if (*(void *)__x) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__x);
    }
    if (v54)
    {
      int v25 = (void **)v52;
      if (v52)
      {
        long long v26 = v53;
        unint64_t v27 = v52;
        if (v53 != v52)
        {
          do
            long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          unint64_t v27 = v52;
        }
        uint64_t v53 = v25;
        operator delete(v27);
      }
      long long v20 = v50;
      if (!v50) {
        goto LABEL_70;
      }
      uint64_t v28 = v51;
      uint64_t v22 = v50;
      if (v51 == v50) {
        goto LABEL_69;
      }
      do
      {
        uint64_t v30 = (void *)*--v28;
        unint64_t v29 = v30;
        *uint64_t v28 = 0;
        if (v30) {
          operator delete[](v29);
        }
      }
      while (v28 != v20);
      goto LABEL_68;
    }
  }
LABEL_75:
  if (v45 && v44 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v16;
}

std::vector<char>::iterator std::vector<char>::insert(std::vector<char> *this, std::vector<char>::const_iterator __position, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  if (!__n) {
    return (std::vector<char>::iterator)__position.__i_;
  }
  uint64_t v5 = (char *)__x;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    std::vector<char>::size_type v19 = end - __position.__i_;
    long long v20 = this->__end_;
    std::vector<char>::size_type v21 = __n;
    std::vector<char>::size_type v22 = __n - (end - __position.__i_);
    if (__n <= end - __position.__i_) {
      goto LABEL_58;
    }
    long long v20 = (char *)&__position.__i_[__n];
    std::vector<char>::pointer v23 = this->__end_;
    if (v22 >= 8)
    {
      if (end >= __x + 1 || (std::vector<char>::pointer v23 = this->__end_, v20 <= __x))
      {
        if (v22 < 0x20)
        {
          unint64_t v24 = 0;
          goto LABEL_35;
        }
        unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFE0;
        int8x16_t v32 = vld1q_dup_s8(__x);
        BOOL v33 = (int8x16_t *)(end + 16);
        unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33[-1] = v32;
          *BOOL v33 = v32;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        if (v22 == v24) {
          goto LABEL_56;
        }
        if ((v22 & 0x18) != 0)
        {
LABEL_35:
          std::vector<char>::pointer v23 = (std::vector<char>::pointer)&end[v22 & 0xFFFFFFFFFFFFFFF8];
          int8x8_t v35 = vld1_dup_s8(__x);
          int v36 = (int8x8_t *)&end[v24];
          unint64_t v37 = v24 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v36++ = v35;
            v37 += 8;
          }
          while (v37);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        std::vector<char>::pointer v23 = (std::vector<char>::pointer)&end[v24];
      }
    }
    do
LABEL_55:
      *v23++ = *__x;
    while (v23 != v20);
LABEL_56:
    this->__end_ = v20;
    if (!v19) {
      return (std::vector<char>::iterator)__position.__i_;
    }
    std::vector<char>::size_type v21 = end - __position.__i_;
LABEL_58:
    unsigned int v51 = &__position.__i_[__n];
    size_t v52 = &v20[-__n];
    uint64_t v53 = v20;
    if (&v20[-__n] >= end) {
      goto LABEL_69;
    }
    if (__n <= v19) {
      std::vector<char>::size_type v54 = end - __position.__i_;
    }
    else {
      std::vector<char>::size_type v54 = __n;
    }
    std::vector<char>::size_type v55 = &end[__n] - &__position.__i_[v54];
    if (v55 >= 0x20)
    {
      unint64_t v56 = (unint64_t)&v20[__n - (unint64_t)&__position.__i_[v54]];
      uint64_t v53 = v20;
      if (v56 >= 0x20)
      {
        v52 += v55 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v53 = &v20[v55 & 0xFFFFFFFFFFFFFFE0];
        BOOL v57 = (char *)&__position.__i_[v54 + 16];
        unsigned int v58 = &v57[-v56];
        unint64_t v59 = v55 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *(_OWORD *)v58;
          *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
          *(_OWORD *)BOOL v57 = v60;
          v57 += 32;
          v58 += 32;
          v59 -= 32;
        }
        while (v59);
        if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_69:
          this->__end_ = v53;
          if (v20 != v51) {
            memmove((void *)&__position.__i_[__n], __position.__i_, v20 - v51);
          }
          if (__position.__i_ <= v5)
          {
            if (this->__end_ <= v5) {
              std::vector<char>::size_type v62 = 0;
            }
            else {
              std::vector<char>::size_type v62 = __n;
            }
            v5 += v62;
          }
          if (v21 < 8 || __position.__i_ < v5 + 1 && v5 < &__position.__i_[v21])
          {
            i = (char *)__position.__i_;
            std::vector<char>::size_type v64 = v21;
            goto LABEL_80;
          }
          if (v21 >= 0x20)
          {
            unint64_t v66 = v21 & 0xFFFFFFFFFFFFFFE0;
            int8x16_t v67 = vld1q_dup_s8(v5);
            unsigned int v68 = (char *)(__position.__i_ + 16);
            unint64_t v69 = v21 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *((int8x16_t *)v68 - 1) = v67;
              *(int8x16_t *)unsigned int v68 = v67;
              v68 += 32;
              v69 -= 32;
            }
            while (v69);
            if (v21 == v66) {
              return (std::vector<char>::iterator)__position.__i_;
            }
            if ((v21 & 0x18) == 0)
            {
              std::vector<char>::size_type v64 = v21 & 0x1F;
              i = (char *)&__position.__i_[v66];
              do
              {
LABEL_80:
                *i++ = *v5;
                --v64;
              }
              while (v64);
              return (std::vector<char>::iterator)__position.__i_;
            }
          }
          else
          {
            unint64_t v66 = 0;
          }
          i = (char *)&__position.__i_[v21 & 0xFFFFFFFFFFFFFFF8];
          std::vector<char>::size_type v64 = v21 & 7;
          int8x8_t v70 = vld1_dup_s8(v5);
          v71 = (char *)&__position.__i_[v66];
          unint64_t v72 = v66 - (v21 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(int8x8_t *)v71 = v70;
            v71 += 8;
            v72 += 8;
          }
          while (v72);
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
            return (std::vector<char>::iterator)__position.__i_;
          }
          goto LABEL_80;
        }
      }
    }
    else
    {
      uint64_t v53 = v20;
    }
    do
    {
      char v61 = *v52++;
      *v53++ = v61;
    }
    while (v52 != end);
    goto LABEL_69;
  }
  begin = this->__begin_;
  int64_t v11 = end - this->__begin_ + __n;
  if (v11 < 0) {
    abort();
  }
  unint64_t v12 = (const char *)(__position.__i_ - begin);
  unint64_t v13 = value - begin;
  if (2 * v13 > v11) {
    int64_t v11 = 2 * v13;
  }
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v14 = v11;
  }
  if (v14)
  {
    int v15 = operator new(v14);
    uint64_t v16 = &v12[(void)v15];
    unint64_t v17 = (char *)&v12[(void)v15 + __n];
    uint64_t v18 = (char *)&v12[(void)v15];
    if (__n < 8) {
      goto LABEL_40;
    }
  }
  else
  {
    int v15 = 0;
    uint64_t v16 = (const char *)(__position.__i_ - begin);
    unint64_t v17 = (char *)&v12[__n];
    uint64_t v18 = (char *)(__position.__i_ - begin);
    if (__n < 8) {
      goto LABEL_40;
    }
  }
  if (v16 < v5 + 1)
  {
    uint64_t v18 = (char *)v16;
    if (v17 > v5) {
      goto LABEL_40;
    }
  }
  if (__n < 0x20)
  {
    std::vector<char>::size_type v25 = 0;
    goto LABEL_27;
  }
  std::vector<char>::size_type v25 = __n & 0xFFFFFFFFFFFFFFE0;
  int8x16_t v26 = vld1q_dup_s8(v5);
  unint64_t v27 = (int8x16_t *)((char *)v15 + (void)v12 + 16);
  std::vector<char>::size_type v28 = __n & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v27[-1] = v26;
    int8x16_t *v27 = v26;
    v27 += 2;
    v28 -= 32;
  }
  while (v28);
  if (v25 != __n)
  {
    if ((__n & 0x18) == 0)
    {
      uint64_t v18 = (char *)&v16[v25];
      goto LABEL_40;
    }
LABEL_27:
    uint64_t v18 = (char *)&v16[__n & 0xFFFFFFFFFFFFFFF8];
    int8x8_t v29 = vld1_dup_s8(v5);
    uint64_t v30 = (char *)v15 + &__position.__i_[v25] - begin;
    std::vector<char>::size_type v31 = v25 - (__n & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *(int8x8_t *)uint64_t v30 = v29;
      v30 += 8;
      v31 += 8;
    }
    while (v31);
    if ((__n & 0xFFFFFFFFFFFFFFF8) == __n) {
      goto LABEL_41;
    }
    do
LABEL_40:
      *v18++ = *v5;
    while (v18 != v17);
  }
LABEL_41:
  std::vector<char>::const_iterator v38 = this->__begin_;
  if (this->__begin_ != __position.__i_)
  {
    int64_t v39 = __position.__i_ - v38;
    std::__wrap_iter<const char *>::iterator_type v40 = __position.__i_;
    uint64_t v41 = (char *)v16;
    if ((std::__wrap_iter<const char *>::iterator_type)(__position.__i_ - v38) < (std::__wrap_iter<const char *>::iterator_type)0x20) {
      goto LABEL_98;
    }
    std::__wrap_iter<const char *>::iterator_type v40 = __position.__i_;
    uint64_t v41 = (char *)v16;
    if ((unint64_t)(begin - (unsigned char *)v15) < 0x20) {
      goto LABEL_98;
    }
    std::__wrap_iter<const char *>::iterator_type v40 = &__position.__i_[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    uint64_t v41 = (char *)&v16[-(v39 & 0xFFFFFFFFFFFFFFE0)];
    std::__wrap_iter<const char *>::iterator_type v42 = __position.__i_ - 16;
    BOOL v43 = (char *)v15 + __position.__i_ - 16 - begin;
    unint64_t v44 = v39 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v45 = *(_OWORD *)v42;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v42 - 1);
      *(_OWORD *)BOOL v43 = v45;
      v43 -= 32;
      v42 -= 32;
      v44 -= 32;
    }
    while (v44);
    if (v39 != (v39 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_98:
      do
      {
        char v46 = *--v40;
        *--uint64_t v41 = v46;
      }
      while (v40 != v38);
    }
    uint64_t v47 = this->__end_;
    uint64_t v48 = (char *)v15 + v14;
    size_t v49 = v47 - __position.__i_;
    if (v47 == __position.__i_) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint64_t v41 = (char *)v16;
  uint64_t v48 = (char *)v15 + v14;
  size_t v49 = end - __position.__i_;
  if (end != __position.__i_) {
LABEL_49:
  }
    memmove(v17, __position.__i_, v49);
LABEL_50:
  std::vector<char>::pointer v50 = this->__begin_;
  this->__begin_ = v41;
  this->__end_ = &v17[v49];
  this->__end_cap_.__value_ = v48;
  if (v50) {
    operator delete(v50);
  }
  return (std::vector<char>::iterator)v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseDenseArrayAttr(mlir::Type)::$_1>(uint64_t **a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__p);
    uint64_t v5 = *(void *)(v2 + 8);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)__p;
    *(void *)(v5 + 72) = v44;
    uint64_t v3 = *(void *)(v2 + 8);
  }
  long long v41 = *(_OWORD *)(v3 + 56);
  uint64_t v42 = *(void *)(v3 + 72);
  v52[0] = 0;
  char v54 = 0;
  uint64_t v40 = *v1;
  if (v41 == 9)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__p);
    uint64_t v11 = *(void *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)__p;
    *(void *)(v11 + 72) = v44;
    double v9 = COERCE_DOUBLE(mlir::Token::getFloatingPointValue((mlir::Token *)&v41));
    if (!v12) {
      goto LABEL_33;
    }
    double v13 = v9;
    if (v4 == 24) {
      double v13 = -v9;
    }
    size_t v14 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v38, v13);
    int v15 = llvm::APFloatBase::IEEEdouble(v14);
    llvm::APFloat::Storage::Storage(&__p[1], v38, v15);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
    if (v54)
    {
      unint64_t v17 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)v53, (llvm::APFloatBase *)&__p[1]);
      uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v17);
      if (v10 != __p[1]) {
        goto LABEL_12;
      }
LABEL_50:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p[1]);
      if (mlir::Type::isF64((mlir::Type *)v1))
      {
LABEL_14:
        if (v10 == (void *)v53[0])
        {
          double v9 = COERCE_DOUBLE(llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v53, (llvm::APInt *)__p));
          unint64_t v19 = LODWORD(__p[1]);
          if (LODWORD(__p[1])) {
            goto LABEL_16;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v53, (uint64_t)__p);
          unint64_t v19 = LODWORD(__p[1]);
          if (LODWORD(__p[1]))
          {
LABEL_16:
            std::vector<char>::size_type v20 = v19 >> 3;
            uint64_t v22 = v1[1];
            v21.__i_ = (std::__wrap_iter<const char *>::iterator_type)v1[2];
            std::vector<char>::pointer v23 = (std::vector<char> *)(v1 + 1);
            unint64_t v24 = &v21.__i_[-v22];
            v38[0] = 0;
            std::vector<char>::insert(v23, v21, v20, v38);
            double v9 = COERCE_DOUBLE(llvm::StoreIntToMemory((llvm **)__p, (const llvm::APInt *)&v23->__begin_[(unint64_t)v24], v20));
            unsigned int v25 = __p[1];
            ++v23[1].__begin_;
            if (v25 >= 0x41)
            {
              double v9 = *(double *)__p;
              if (__p[0]) {
                operator delete[](__p[0]);
              }
            }
            goto LABEL_36;
          }
        }
        ++v1[4];
LABEL_36:
        uint64_t v26 = 1;
        goto LABEL_41;
      }
LABEL_13:
      LOBYTE(__p[0]) = 0;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
      llvm::APFloat::convert((uint64_t)v52, FloatSemantics, 1, __p);
      goto LABEL_14;
    }
    unint64_t v37 = __p[1];
    uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v16);
    if (v10 == v37)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v53, &__p[1]);
      char v54 = 1;
      if (v10 == __p[1]) {
        goto LABEL_50;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v53, (uint64_t)&__p[1]);
      char v54 = 1;
      if (v10 == __p[1]) {
        goto LABEL_50;
      }
    }
LABEL_12:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
    if (mlir::Type::isF64((mlir::Type *)v1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v41 == 10)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)__p);
    uint64_t v6 = *(void *)(v2 + 8);
    *(_OWORD *)(v6 + 56) = *(_OWORD *)__p;
    *(void *)(v6 + 72) = v44;
    int v7 = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v40);
    unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)&v40);
    double v9 = COERCE_DOUBLE(mlir::detail::Parser::parseFloatFromIntegerLiteral(v2, (uint64_t)v52, (mlir::Token *)&v41, v4 == 24, v7, Width));
    if (LOBYTE(v9))
    {
      uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9);
      goto LABEL_14;
    }
LABEL_33:
    uint64_t v26 = 0;
    goto LABEL_41;
  }
  *(void *)std::vector<char>::const_iterator v38 = "expected integer or floating point literal";
  __int16 v39 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v38, __p);
  double v9 = COERCE_DOUBLE(mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__p));
  uint64_t v26 = *(void *)&v9;
  if (__p[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
  }
  if (v51)
  {
    unint64_t v27 = (void **)v49;
    if (v49)
    {
      std::vector<char>::size_type v28 = v50;
      int8x8_t v29 = v49;
      if (v50 != v49)
      {
        do
          std::vector<char>::size_type v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        int8x8_t v29 = v49;
      }
      std::vector<char>::pointer v50 = v27;
      operator delete(v29);
    }
    uint64_t v30 = v47;
    if (v47)
    {
      std::vector<char>::size_type v31 = v48;
      int8x16_t v32 = v47;
      if (v48 != v47)
      {
        do
        {
          unint64_t v34 = (void *)*--v31;
          BOOL v33 = v34;
          *std::vector<char>::size_type v31 = 0;
          if (v34) {
            operator delete[](v33);
          }
        }
        while (v31 != v30);
        int8x16_t v32 = v47;
      }
      uint64_t v48 = v30;
      operator delete(v32);
    }
    double v9 = *(double *)&v45;
    if (v45 != &v46) {
      free(v45);
    }
  }
LABEL_41:
  if (v54)
  {
    int8x8_t v35 = (void *)v53[0];
    if (llvm::APFloatBase::PPCDoubleDouble(*(llvm::APFloatBase **)&v9) == v35) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v53);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v53);
    }
  }
  return v26;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr,mlir::DenseElementsAttr &&)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::SparseElementsAttr mlir::detail::Parser::getChecked<mlir::SparseElementsAttr,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &>(llvm::SMLoc,mlir::ShapedType &,mlir::DenseElementsAttr &,mlir::DenseElementsAttr &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseStridedLayoutAttr(void)::$_0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void *llvm::DenseMap<unsigned long long,mlir::DistinctAttr,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::DistinctAttr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      double v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        void *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[2 * v11];
        do
        {
          void *v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      uint64_t v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if (*(void *)v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v25 = v24 & (37 * v23);
          uint64_t v22 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v26 = *v22;
          if (v23 != *v22)
          {
            unint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -1)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                unint64_t v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              uint64_t v22 = (void *)(*(void *)a1 + 16 * (v30 & v24));
              uint64_t v26 = *v22;
              if (v23 == *v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          void *v22 = v23;
          v22[1] = *((void *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -1;
      void *v19 = -1;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      std::vector<char>::const_iterator v21 = &result[2 * v17];
      do
      {
        void *v10 = -1;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(mlir::detail::Parser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6 = 0;
  v49[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = *(char **)(v7 + 64);
  uint64_t v47 = v49;
  long long v48 = xmmword_1810FF9F0;
  double v9 = *(char **)(v7 + 48);
  v37[0] = this;
  v37[1] = &v47;
  while (2)
  {
    if (v8 == v9)
    {
      Enduint64_t Loc = (uint64_t)v9;
LABEL_24:
      *a3 = 1;
      *(void *)&long long v48 = 0;
LABEL_25:
      uint64_t v17 = *((void *)this + 1);
      *(void *)(v17 + 40) = EndLoc;
      mlir::Lexer::lexToken((mlir::Lexer *)(v17 + 8), (uint64_t)&v38);
      uint64_t v18 = *((void *)this + 1);
      *(_OWORD *)(v18 + 56) = v38;
      *(void *)(v18 + 72) = v39;
      *((void *)a2 + 1) = (EndLoc - *(_DWORD *)a2);
      uint64_t v19 = 1;
      goto LABEL_26;
    }
    Enduint64_t Loc = (uint64_t)(v8 + 1);
    char v13 = *v8;
    switch(*v8)
    {
      case '""':
        uint64_t v14 = *((void *)this + 1);
        *(void *)(v14 + 40) = v8;
        mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v38);
        uint64_t v15 = *((void *)this + 1);
        *(_OWORD *)(v15 + 56) = v38;
        *(void *)(v15 + 72) = v39;
        Enduint64_t Loc = mlir::Token::getEndLoc((mlir::Token *)(*((void *)this + 1) + 56));
        int v16 = *(_DWORD *)(*((void *)this + 1) + 56);
        if (v16 == 11) {
          goto LABEL_4;
        }
        if (v16 == 2) {
          goto LABEL_24;
        }
LABEL_30:
        uint64_t v19 = 0;
        goto LABEL_26;
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '*':
      case '+':
      case ',':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '\\':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case '|':
        goto LABEL_4;
      case '(':
      case '<':
      case '[':
      case '{':
        if ((unint64_t)(v6 + 1) > *((void *)&v48 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, v6 + 1, 1);
          uint64_t v6 = v48;
        }
        v47[v6] = v13;
        unsigned int v8 = (char *)EndLoc;
        uint64_t v6 = v48 + 1;
        *(void *)&long long v48 = v6;
        if (!v6) {
          goto LABEL_25;
        }
        continue;
      case ')':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x28u))goto LABEL_30; {
        goto LABEL_4;
        }
      case '-':
        int v10 = v8[1];
        uint64_t v11 = v8 + 2;
        if (v10 == 62) {
          Enduint64_t Loc = (uint64_t)v11;
        }
        goto LABEL_4;
      case '>':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x3Cu))goto LABEL_30; {
        goto LABEL_4;
        }
      case ']':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x5Bu))goto LABEL_30; {
        goto LABEL_4;
        }
      case '}':
        if (!mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(&v47, (uint64_t)v37, 0x7Bu))goto LABEL_30; {
        goto LABEL_4;
        }
      default:
        if (*v8)
        {
LABEL_4:
          uint64_t v6 = v48;
          unsigned int v8 = (char *)EndLoc;
          if (!(void)v48) {
            goto LABEL_25;
          }
          continue;
        }
        if (v6)
        {
          mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)&v38, (uint64_t)v37);
          uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((void)v38) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          }
          if (v46)
          {
            std::vector<char>::const_iterator v21 = (void **)__p;
            if (__p)
            {
              uint64_t v22 = v45;
              uint64_t v23 = __p;
              if (v45 != __p)
              {
                do
                  uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
                while (v22 != v21);
                uint64_t v23 = __p;
              }
              long long v45 = v21;
              operator delete(v23);
            }
            int v24 = v42;
            if (v42)
            {
              unsigned int v25 = v43;
              uint64_t v26 = v42;
              if (v43 == v42) {
                goto LABEL_61;
              }
              do
              {
                int v28 = (void *)*--v25;
                unint64_t v27 = v28;
                void *v25 = 0;
                if (v28) {
                  operator delete[](v27);
                }
              }
              while (v25 != v24);
LABEL_60:
              uint64_t v26 = v42;
              goto LABEL_61;
            }
            goto LABEL_62;
          }
        }
        else
        {
          int8x8_t v35 = "unexpected nul or EOF in pretty dialect name";
          __int16 v36 = 259;
          mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v35, &v38);
          uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v38);
          if ((void)v38) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
          }
          if (v46)
          {
            BOOL v29 = (void **)__p;
            if (__p)
            {
              unsigned int v30 = v45;
              std::vector<char>::size_type v31 = __p;
              if (v45 != __p)
              {
                do
                  unsigned int v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
                while (v30 != v29);
                std::vector<char>::size_type v31 = __p;
              }
              long long v45 = v29;
              operator delete(v31);
            }
            int v24 = v42;
            if (v42)
            {
              int8x16_t v32 = v43;
              uint64_t v26 = v42;
              if (v43 != v42)
              {
                do
                {
                  unint64_t v34 = (void *)*--v32;
                  BOOL v33 = v34;
                  *int8x16_t v32 = 0;
                  if (v34) {
                    operator delete[](v33);
                  }
                }
                while (v32 != v24);
                goto LABEL_60;
              }
LABEL_61:
              BOOL v43 = v24;
              operator delete(v26);
            }
LABEL_62:
            if (v40 != &v41) {
              free(v40);
            }
          }
        }
LABEL_26:
        if (v47 != (unsigned char *)v49) {
          free(v47);
        }
        return v19;
    }
  }
}

void mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  __int16 v39 = 257;
  mlir::detail::Parser::emitError(v4, (uint64_t)v38, &v43);
  uint64_t v5 = v43;
  if (v43)
  {
    int v40 = 3;
    uint64_t v41 = "unbalanced '";
    uint64_t v42 = 12;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)__src;
    if (v47 >= v48)
    {
      unint64_t v34 = v47 + 1;
      if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
      {
        int64_t v36 = (char *)&v40 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        uint64_t v7 = (char *)__src;
        uint64_t v6 = (int *)((char *)__src + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v34, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)__src;
      }
    }
    unsigned int v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)unsigned int v8 = v9;
    ++v47;
    uint64_t v5 = v43;
    if (v43)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v44, *(unsigned char *)(**(void **)(a2 + 8) + *(void *)(*(void *)(a2 + 8) + 8) - 1));
      uint64_t v5 = v43;
      if (v43)
      {
        int v40 = 3;
        uint64_t v41 = "' character in pretty dialect name";
        uint64_t v42 = 34;
        int v10 = &v40;
        uint64_t v11 = (char *)__src;
        if (v47 >= v48)
        {
          unint64_t v35 = v47 + 1;
          if (__src <= &v40 && (char *)__src + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            uint64_t v11 = (char *)__src;
            int v10 = (int *)((char *)__src + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v49, v35, 24);
            int v10 = &v40;
            uint64_t v11 = (char *)__src;
          }
        }
        uint64_t v12 = &v11[24 * v47];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v47;
        uint64_t v5 = v43;
      }
    }
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v54)
  {
    *(void *)(a1 + 8) = v44;
    unint64_t v14 = v47;
    *(_DWORD *)(a1 + 16) = v45;
    *(void *)(a1 + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v14 || &v43 == (uint64_t *)a1)
    {
      int v16 = 1;
      goto LABEL_20;
    }
    if (__src != v49)
    {
      *(void *)(a1 + 24) = __src;
      unsigned int v15 = v48;
      *(_DWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 36) = v15;
      __src = v49;
      unsigned int v48 = 0;
      int v16 = 1;
LABEL_19:
      unsigned int v47 = 0;
LABEL_20:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v50;
      *(void *)(a1 + 152) = v51;
      v50[0] = 0;
      v50[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v53;
      uint64_t v51 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v53 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v16)
      {
        uint64_t v18 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v19 = (void **)__p[1];
          uint64_t v20 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p[0];
          }
          __p[1] = v18;
          operator delete(v20);
        }
        std::vector<char>::const_iterator v21 = v50[0];
        if (v50[0])
        {
          uint64_t v22 = v50[1];
          uint64_t v23 = v50[0];
          if (v50[1] != v50[0])
          {
            do
            {
              unsigned int v25 = (void *)*--v22;
              int v24 = v25;
              void *v22 = 0;
              if (v25) {
                operator delete[](v24);
              }
            }
            while (v22 != v21);
            uint64_t v23 = v50[0];
          }
          v50[1] = v21;
          operator delete(v23);
        }
        if (__src != v49) {
          free(__src);
        }
        unsigned __int8 v54 = 0;
      }
      goto LABEL_37;
    }
    if (v14 < 5)
    {
      unint64_t v17 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v14, 24);
      unint64_t v17 = v47;
      if (!v47) {
        goto LABEL_18;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v17);
LABEL_18:
    *(_DWORD *)(a1 + 32) = v14;
    int v16 = v54;
    goto LABEL_19;
  }
LABEL_37:
  mlir::InFlightDiagnostic::abandon(&v43);
  if (v43) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  }
  if (v54)
  {
    uint64_t v26 = (void **)__p[0];
    if (__p[0])
    {
      unint64_t v27 = (void **)__p[1];
      int v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        int v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    BOOL v29 = v50[0];
    if (v50[0])
    {
      unsigned int v30 = v50[1];
      std::vector<char>::size_type v31 = v50[0];
      if (v50[1] != v50[0])
      {
        do
        {
          BOOL v33 = (void *)*--v30;
          int8x16_t v32 = v33;
          *unsigned int v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        std::vector<char>::size_type v31 = v50[0];
      }
      v50[1] = v29;
      operator delete(v31);
    }
    if (__src != v49) {
      free(__src);
    }
  }
}

uint64_t mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_1::operator()(void *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  if (*(char *)(*a1 + v3 - 1) == a3)
  {
    a1[1] = v3 - 1;
    return 1;
  }
  else
  {
    mlir::detail::Parser::parseDialectSymbolBody(llvm::StringRef &,BOOL &)::$_0::operator()((uint64_t)v14, a2);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v20;
        uint64_t v7 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v20 = v5;
        operator delete(v7);
      }
      unsigned int v8 = v17;
      if (v17)
      {
        long long v9 = v18;
        int v10 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v12 = (void *)*--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          int v10 = v17;
        }
        uint64_t v18 = v8;
        operator delete(v10);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v4;
}

void *mlir::detail::Parser::parseExtendedAttr(mlir::detail::Parser *a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = **(mlir::StringAttr ***)v4;
  uint64_t v6 = *(uint64_t **)(v4 + 128);
  uint64_t v7 = *(void *)(v4 + 80);
  int v10 = *(_DWORD *)(v4 + 56);
  unsigned int v8 = (mlir::Token *)(v4 + 56);
  int v9 = v10;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v12 = *((void *)v8 + 2);
  uint64_t v13 = v12 != 0;
  if (v12) {
    ++v11;
  }
  *(void *)&long long v99 = v11;
  *((void *)&v99 + 1) = v12 - v13;
  if (v9 == 2 && v12 == v13)
  {
    uint64_t Checked = mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)a1);
LABEL_36:
    uint64_t v41 = (void *)Checked;
    if (!Checked) {
      goto LABEL_63;
    }
    goto LABEL_73;
  }
  uint64_t LocRange = mlir::Token::getLocRange(v8);
  uint64_t v17 = v16;
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)a1 + 1) + 8), (uint64_t)&v100);
  uint64_t v19 = *((void *)a1 + 1);
  *(_OWORD *)(v19 + 56) = v100;
  *(void *)(v19 + 72) = v101;
  LOBYTE(v100) = 46;
  unint64_t v20 = llvm::StringRef::find((uint64_t *)&v99, (char *)&v100, 1uLL, 0);
  if (v20 == -1)
  {
    unsigned int v25 = 0;
    v97 = 0;
    v98 = 0;
    long long v96 = v99;
    char v21 = (const unsigned __int8 *)*((void *)&v99 + 1);
    uint64_t v22 = (int8x16_t *)v99;
  }
  else
  {
    char v21 = (const unsigned __int8 *)*((void *)&v99 + 1);
    uint64_t v22 = (int8x16_t *)v99;
    if (v20 >= *((void *)&v99 + 1)) {
      unint64_t v23 = *((void *)&v99 + 1);
    }
    else {
      unint64_t v23 = v20;
    }
    if (*((void *)&v99 + 1) >= v20 + 1) {
      unint64_t v24 = v20 + 1;
    }
    else {
      unint64_t v24 = *((void *)&v99 + 1);
    }
    unsigned int v25 = (const void **)(v99 + v24);
    *(void *)&long long v96 = v99;
    *((void *)&v96 + 1) = v23;
    uint64_t v26 = (const char *)(*((void *)&v99 + 1) - v24);
    v97 = (const void **)(v99 + v24);
    v98 = (const char *)(*((void *)&v99 + 1) - v24);
    if (*((void *)&v99 + 1) != v24)
    {
      BOOL v27 = 1;
      uint64_t v28 = *((void *)a1 + 1);
      if (*(_DWORD *)(v28 + 56) != 23) {
        goto LABEL_16;
      }
      goto LABEL_40;
    }
  }
  uint64_t v26 = 0;
  BOOL v27 = v22->u8[(void)v21 - 1] == 46;
  uint64_t v28 = *((void *)a1 + 1);
  if (*(_DWORD *)(v28 + 56) != 23)
  {
LABEL_16:
    BOOL v29 = 0;
    if (!v27) {
      goto LABEL_17;
    }
LABEL_41:
    if (v27)
    {
      if (v29)
      {
        if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&v100)) {
          goto LABEL_72;
        }
        uint64_t v42 = v97;
        uint64_t v26 = v98;
      }
      else
      {
        uint64_t v42 = v25;
      }
    }
    else
    {
      v97 = (const void **)(v96 + *((void *)&v96 + 1));
      v98 = 0;
      LOBYTE(v100) = 0;
      if (!mlir::detail::Parser::parseDialectSymbolBody(a1, (llvm::StringRef *)&v97, (BOOL *)&v100)) {
        goto LABEL_72;
      }
      uint64_t v44 = v98 != 0;
      if (v98) {
        uint64_t v42 = (const void **)((char *)v97 + 1);
      }
      else {
        uint64_t v42 = v97;
      }
      uint64_t v26 = &v98[-v44];
      v97 = v42;
      v98 -= v44;
      if (!(_BYTE)v100)
      {
        if (v26 >= v26 - 1) {
          --v26;
        }
        v98 = v26;
      }
      unsigned int v25 = (const void **)Loc;
    }
    long long v45 = v96;
    v90[0] = v25;
    uint64_t v46 = *((void *)a1 + 1);
    uint64_t v47 = a2;
    if (*(_DWORD *)(v46 + 56) != 15
      || (mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&v100),
          uint64_t v48 = *((void *)a1 + 1),
          *(_OWORD *)(v48 + 56) = v100,
          *(void *)(v48 + 72) = v101,
          (uint64_t v47 = mlir::detail::Parser::parseType(a1)) != 0))
    {
      Dialect = mlir::MLIRContext::getOrLoadDialect(*(void *)a1, (void *)v45, *((size_t *)&v45 + 1));
      if (Dialect)
      {
        std::vector<char>::pointer v50 = Dialect;
        uint64_t v51 = mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
        uint64_t v52 = *((void *)a1 + 1);
        *(void *)(v52 + 40) = v42;
        mlir::Lexer::lexToken((mlir::Lexer *)(v52 + 8), (uint64_t)&v100);
        uint64_t v53 = *((void *)a1 + 1);
        *(_OWORD *)(v53 + 56) = v100;
        *(void *)(v53 + 72) = v101;
        *((void *)&v100 + 1) = mlir::Token::getLoc((mlir::Token *)(*((void *)a1 + 1) + 56));
        v101 = a1;
        LOBYTE(v102) = 0;
        *(void *)&long long v100 = &unk_1EC99ACA8;
        v103 = v42;
        v104[0] = v26;
        uint64_t v41 = (void *)(*(uint64_t (**)(uint64_t **(*)(uint64_t, uint64_t), long long *, uint64_t))(*(void *)v50 + 32))(v50, &v100, v47);
        uint64_t v54 = *((void *)a1 + 1);
        *(void *)(v54 + 40) = v51;
        mlir::Lexer::lexToken((mlir::Lexer *)(v54 + 8), (uint64_t)&v93);
        uint64_t v55 = *((void *)a1 + 1);
        *(_OWORD *)(v55 + 56) = v93;
        *(void *)(v55 + 72) = v94;
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v100);
        if (!v41) {
          goto LABEL_63;
        }
        goto LABEL_73;
      }
      *(void *)&long long v93 = a1;
      *((void *)&v93 + 1) = v90;
      LOWORD(v103) = 261;
      long long v100 = v45;
      uint64_t v58 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v100);
      if (!v47) {
        uint64_t v47 = mlir::NoneType::get(v5, v57);
      }
      uint64_t Checked = mlir::OpaqueAttr::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v93, v58, v42, v26, v47);
      goto LABEL_36;
    }
LABEL_72:
    uint64_t v41 = 0;
    goto LABEL_63;
  }
LABEL_40:
  BOOL v29 = &v21[(void)v22] == *(const unsigned __int8 **)(v28 + 64);
  if (v29 || v27) {
    goto LABEL_41;
  }
LABEL_17:
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v7, v22, v21);
  if (Key == -1) {
    uint64_t v31 = *(unsigned int *)(v7 + 8);
  }
  else {
    uint64_t v31 = Key;
  }
  if (v31 == *(_DWORD *)(v7 + 8))
  {
    __int16 v92 = 1283;
    v90[0] = "undefined symbol alias id '";
    long long v91 = v99;
    *(void *)&long long v93 = v90;
    v94 = "'";
    __int16 v95 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v93, &v100);
    if ((void)v100) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v100);
    }
    if (v109)
    {
      int8x16_t v32 = (void **)__p;
      if (__p)
      {
        BOOL v33 = v108;
        unint64_t v34 = __p;
        if (v108 != __p)
        {
          do
            BOOL v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        v108 = v32;
        operator delete(v34);
      }
      unint64_t v35 = v105;
      if (v105)
      {
        int64_t v36 = v106;
        int64_t v37 = v105;
        if (v106 != v105)
        {
          do
          {
            __int16 v39 = (void *)*--v36;
            long long v38 = v39;
            *int64_t v36 = 0;
            if (v39) {
              operator delete[](v38);
            }
          }
          while (v36 != v35);
          int64_t v37 = v105;
        }
        uint64_t v106 = v35;
        operator delete(v37);
      }
      if (v102 != v104) {
        free(v102);
      }
    }
    goto LABEL_72;
  }
  uint64_t v43 = *(void *)v7;
  if (v6) {
    mlir::AsmParserState::addAttrAliasUses(v6, (int8x16_t *)v99, *((const unsigned __int8 **)&v99 + 1), LocRange, v17);
  }
  uint64_t v41 = *(void **)(*(void *)(v43 + 8 * v31) + 8);
  if (!v41)
  {
LABEL_63:
    unint64_t v56 = 0;
    long long v96 = 0uLL;
    if (!a2) {
      return v41;
    }
    goto LABEL_77;
  }
LABEL_73:
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8))
  {
    uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v41 + 8);
    unint64_t v56 = v41;
    *(void *)&long long v96 = v41;
    *((void *)&v96 + 1) = v59;
    if (!a2) {
      return v41;
    }
  }
  else
  {
    unint64_t v56 = 0;
    long long v96 = 0uLL;
    if (!a2) {
      return v41;
    }
  }
LABEL_77:
  if (v56 && mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96) != a2)
  {
    *(void *)&long long v93 = "attribute type different than expected: expected ";
    __int16 v95 = 259;
    mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)&v93, &v100);
    if ((void)v100)
    {
      long long v60 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, a2);
      char v61 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        unint64_t v83 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          int64_t v87 = (char *)v90 - (unsigned char *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          char v61 = (char *)v102;
          long long v60 = (char *)v102 + v87;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v83, 24);
          long long v60 = (char *)v90;
          char v61 = (char *)v102;
        }
      }
      std::vector<char>::size_type v62 = &v61[24 * v103];
      long long v63 = *(_OWORD *)v60;
      *((void *)v62 + 2) = *((void *)v60 + 2);
      *(_OWORD *)std::vector<char>::size_type v62 = v63;
      uint64_t v64 = (v103 + 1);
      LODWORD(v103) = v103 + 1;
      if ((void)v100)
      {
        LODWORD(v90[0]) = 3;
        v90[1] = ", but got ";
        *(void *)&long long v91 = 10;
        int v65 = (char *)v90;
        unint64_t v66 = (char *)v102;
        if (v64 >= HIDWORD(v103))
        {
          unint64_t v85 = v64 + 1;
          BOOL v86 = (char *)v102 + 24 * v64 > (char *)v90;
          if (v102 <= v90 && v86)
          {
            int64_t v89 = (char *)v90 - (unsigned char *)v102;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            unint64_t v66 = (char *)v102;
            int v65 = (char *)v102 + v89;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v85, 24);
            int v65 = (char *)v90;
            unint64_t v66 = (char *)v102;
          }
        }
        int8x16_t v67 = &v66[24 * v103];
        long long v68 = *(_OWORD *)v65;
        *((void *)v67 + 2) = *((void *)v65 + 2);
        *(_OWORD *)int8x16_t v67 = v68;
        LODWORD(v103) = v103 + 1;
      }
    }
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v96);
    if ((void)v100)
    {
      int8x8_t v70 = (char *)v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v90, canMapOperands);
      v71 = (char *)v102;
      if (v103 >= HIDWORD(v103))
      {
        unint64_t v84 = v103 + 1;
        if (v102 <= v90 && (char *)v102 + 24 * v103 > (char *)v90)
        {
          int64_t v88 = (char *)v90 - (unsigned char *)v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          v71 = (char *)v102;
          int8x8_t v70 = (char *)v102 + v88;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v84, 24);
          int8x8_t v70 = (char *)v90;
          v71 = (char *)v102;
        }
      }
      unint64_t v72 = &v71[24 * v103];
      long long v73 = *(_OWORD *)v70;
      *((void *)v72 + 2) = *((void *)v70 + 2);
      *(_OWORD *)unint64_t v72 = v73;
      LODWORD(v103) = v103 + 1;
      if ((void)v100) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v100);
      }
    }
    if (v109)
    {
      char v74 = (void **)__p;
      if (__p)
      {
        std::string v75 = v108;
        __int16 v76 = __p;
        if (v108 != __p)
        {
          do
            std::string v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          __int16 v76 = __p;
        }
        v108 = v74;
        operator delete(v76);
      }
      long long v77 = v105;
      if (v105)
      {
        uint64_t v78 = v106;
        uint64_t v79 = v105;
        if (v106 != v105)
        {
          do
          {
            unsigned int v81 = (void *)*--v78;
            unsigned int v80 = v81;
            void *v78 = 0;
            if (v81) {
              operator delete[](v80);
            }
          }
          while (v78 != v77);
          uint64_t v79 = v105;
        }
        uint64_t v106 = v77;
        operator delete(v79);
      }
      if (v102 != v104) {
        free(v102);
      }
    }
    return 0;
  }
  return v41;
}

uint64_t mlir::detail::Parser::parseExtendedType(mlir::detail::Parser *this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = **(mlir::StringAttr ***)v2;
  uint64_t v4 = *(uint64_t **)(v2 + 128);
  uint64_t v5 = *(void *)(v2 + 80);
  int v8 = *(_DWORD *)(v2 + 56);
  uint64_t v6 = (mlir::Token *)(v2 + 56);
  int v7 = v8;
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v10 = *((void *)v6 + 2);
  uint64_t v11 = v10 != 0;
  if (v10) {
    ++v9;
  }
  *(void *)&long long v61 = v9;
  *((void *)&v61 + 1) = v10 - v11;
  if (v7 == 2 && v10 == v11) {
    return mlir::detail::Parser::codeCompleteDialectSymbol((uint64_t)this);
  }
  uint64_t LocRange = mlir::Token::getLocRange(v6);
  uint64_t v15 = v14;
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v62);
  uint64_t v17 = *((void *)this + 1);
  *(_OWORD *)(v17 + 56) = v62;
  *(void *)(v17 + 72) = v63;
  LOBYTE(v62) = 46;
  unint64_t v18 = llvm::StringRef::find((uint64_t *)&v61, (char *)&v62, 1uLL, 0);
  if (v18 == -1)
  {
    unint64_t v23 = 0;
    uint64_t v59 = 0;
    long long v60 = 0;
    long long v58 = v61;
    uint64_t v19 = (const unsigned __int8 *)*((void *)&v61 + 1);
    unint64_t v20 = (int8x16_t *)v61;
  }
  else
  {
    uint64_t v19 = (const unsigned __int8 *)*((void *)&v61 + 1);
    unint64_t v20 = (int8x16_t *)v61;
    if (v18 >= *((void *)&v61 + 1)) {
      unint64_t v21 = *((void *)&v61 + 1);
    }
    else {
      unint64_t v21 = v18;
    }
    if (*((void *)&v61 + 1) >= v18 + 1) {
      unint64_t v22 = v18 + 1;
    }
    else {
      unint64_t v22 = *((void *)&v61 + 1);
    }
    unint64_t v23 = (const void **)(v61 + v22);
    *(void *)&long long v58 = v61;
    *((void *)&v58 + 1) = v21;
    unint64_t v24 = (const char *)(*((void *)&v61 + 1) - v22);
    uint64_t v59 = (const void **)(v61 + v22);
    long long v60 = (const char *)(*((void *)&v61 + 1) - v22);
    if (*((void *)&v61 + 1) != v22)
    {
      BOOL v25 = 1;
      uint64_t v26 = *((void *)this + 1);
      if (*(_DWORD *)(v26 + 56) != 23) {
        goto LABEL_16;
      }
LABEL_39:
      BOOL v27 = &v19[(void)v20] == *(const unsigned __int8 **)(v26 + 64);
      if (!v27 && !v25) {
        goto LABEL_17;
      }
LABEL_40:
      if (v25)
      {
        if (!v27)
        {
          int v40 = v23;
          goto LABEL_57;
        }
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&v62))
        {
          int v40 = v59;
          unint64_t v24 = v60;
LABEL_57:
          v52[0] = v23;
          Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)v3, (void *)v58, *((size_t *)&v58 + 1));
          if (Dialect)
          {
            uint64_t v44 = Dialect;
            uint64_t v45 = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
            uint64_t v46 = *((void *)this + 1);
            *(void *)(v46 + 40) = v40;
            mlir::Lexer::lexToken((mlir::Lexer *)(v46 + 8), (uint64_t)&v62);
            uint64_t v47 = *((void *)this + 1);
            *(_OWORD *)(v47 + 56) = v62;
            *(void *)(v47 + 72) = v63;
            *((void *)&v62 + 1) = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
            long long v63 = this;
            LOBYTE(v64) = 0;
            *(void *)&long long v62 = &unk_1EC99ACA8;
            int v65 = v40;
            unint64_t v66 = v24;
            uint64_t v39 = (*(uint64_t (**)(void, long long *))(*(void *)v44 + 48))(v44, &v62);
            uint64_t v48 = *((void *)this + 1);
            *(void *)(v48 + 40) = v45;
            mlir::Lexer::lexToken((mlir::Lexer *)(v48 + 8), (uint64_t)&v55);
            uint64_t v49 = *((void *)this + 1);
            *(_OWORD *)(v49 + 56) = v55;
            *(void *)(v49 + 72) = v56;
            mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v62);
            return v39;
          }
          *(void *)&long long v55 = this;
          *((void *)&v55 + 1) = v52;
          LOWORD(v65) = 261;
          long long v62 = v58;
          uint64_t v50 = mlir::StringAttr::get(v3, (mlir::MLIRContext *)&v62);
          return mlir::OpaqueType::getChecked((void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>, (uint64_t)&v55, v50, v40, v24);
        }
      }
      else
      {
        uint64_t v59 = (const void **)(v58 + *((void *)&v58 + 1));
        long long v60 = 0;
        LOBYTE(v62) = 0;
        if (mlir::detail::Parser::parseDialectSymbolBody(this, (llvm::StringRef *)&v59, (BOOL *)&v62))
        {
          uint64_t v42 = v60 != 0;
          if (v60) {
            int v40 = (const void **)((char *)v59 + 1);
          }
          else {
            int v40 = v59;
          }
          unint64_t v24 = &v60[-v42];
          uint64_t v59 = v40;
          v60 -= v42;
          if (!(_BYTE)v62)
          {
            if (v24 >= v24 - 1) {
              --v24;
            }
            long long v60 = v24;
          }
          unint64_t v23 = (const void **)Loc;
          goto LABEL_57;
        }
      }
      return 0;
    }
  }
  unint64_t v24 = 0;
  BOOL v25 = v20->u8[(void)v19 - 1] == 46;
  uint64_t v26 = *((void *)this + 1);
  if (*(_DWORD *)(v26 + 56) == 23) {
    goto LABEL_39;
  }
LABEL_16:
  BOOL v27 = 0;
  if (v25) {
    goto LABEL_40;
  }
LABEL_17:
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v5 + 24), v20, v19);
  if (Key == -1) {
    uint64_t v29 = *(unsigned int *)(v5 + 32);
  }
  else {
    uint64_t v29 = Key;
  }
  if (v29 == *(_DWORD *)(v5 + 32))
  {
    __int16 v54 = 1283;
    v52[0] = "undefined symbol alias id '";
    long long v53 = v61;
    *(void *)&long long v55 = v52;
    unint64_t v56 = "'";
    __int16 v57 = 770;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v55, &v62);
    if ((void)v62) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    }
    if (v71)
    {
      unsigned int v30 = (void **)__p;
      if (__p)
      {
        uint64_t v31 = v70;
        int8x16_t v32 = __p;
        if (v70 != __p)
        {
          do
            uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          int8x16_t v32 = __p;
        }
        int8x8_t v70 = v30;
        operator delete(v32);
      }
      BOOL v33 = v67;
      if (v67)
      {
        unint64_t v34 = v68;
        unint64_t v35 = v67;
        if (v68 != v67)
        {
          do
          {
            int64_t v37 = (void *)*--v34;
            int64_t v36 = v37;
            *unint64_t v34 = 0;
            if (v37) {
              operator delete[](v36);
            }
          }
          while (v34 != v33);
          unint64_t v35 = v67;
        }
        long long v68 = v33;
        operator delete(v35);
      }
      if (v64 != &v66) {
        free(v64);
      }
    }
    return 0;
  }
  uint64_t v41 = *(void *)(v5 + 24);
  if (v4) {
    mlir::AsmParserState::addTypeAliasUses(v4, (int8x16_t *)v61, *((const unsigned __int8 **)&v61 + 1), LocRange, v15);
  }
  return *(void *)(*(void *)(v41 + 8 * v29) + 8);
}

void mlir::parseAttribute(char *a1, unint64_t a2, uint64_t **a3, void *a4, unint64_t *a5, int a6)
{
  v95[6] = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v55);
  }
  else
  {
    __int16 v73 = 261;
    v71.n128_u64[0] = (unint64_t)a1;
    v71.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v71, 0, &v55);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v52);
  uint64_t v11 = v55;
  long long v55 = 0;
  uint64_t v72 = 0;
  __n128 v71 = (__n128)(unint64_t)v11;
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v13 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v52, &v71);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v53, &v71);
    uint64_t v13 = (__n128 *)(v12 + 24);
  }
  long long v53 = v13;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v71);
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = 0x1000000000;
  v47[3] = 0;
  v47[4] = 0;
  v47[5] = 0x1000000000;
  v47[6] = 0;
  v47[7] = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  BOOL v86 = a3;
  char v87 = 1;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  int v90 = 0;
  uint64_t v91 = 0;
  __int16 v92 = v94;
  uint64_t v93 = 0x600000000;
  v94[6] = v95;
  v94[7] = 0x600000000;
  v71.n128_u64[0] = (unint64_t)&v86;
  uint64_t v14 = mlir::Lexer::Lexer((uint64_t ***)&v71.n128_u64[1], &v52, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v14, (uint64_t)&v74);
  uint64_t v78 = 0;
  __int16 v76 = v47;
  long long v77 = 0;
  unsigned int v79 = 0;
  unsigned int v80 = v82;
  uint64_t v81 = 0;
  v82[1] = 0;
  v82[0] = 0;
  unint64_t v83 = v85;
  v85[0] = "builtin";
  v85[1] = 7;
  uint64_t v84 = 0x300000001;
  uint64_t v45 = *(mlir::StringAttr ****)v71.n128_u64[0];
  uint64_t v46 = &v71;
  long long v43 = v74;
  uint64_t v44 = v75;
  if (mlir::detail::Parser::parseAttribute(&v45, a4))
  {
    long long v41 = *(long long *)((char *)&v46[3] + 8);
    unint64_t v42 = v46[4].n128_u64[1];
    uint64_t Loc = mlir::Token::getLoc((mlir::Token *)&v41);
    unint64_t v16 = Loc - mlir::Token::getLoc((mlir::Token *)&v43);
    if (a5)
    {
      *a5 = v16;
    }
    else if (v16 != a2)
    {
      uint64_t v17 = (const char *)mlir::Token::getLoc((mlir::Token *)&v41);
      __int16 v40 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v45, v17, (uint64_t)v39, &v60);
      if (v60)
      {
        LODWORD(v56) = 3;
        __int16 v57 = "found trailing characters: '";
        uint64_t v58 = 28;
        unint64_t v18 = &v56;
        uint64_t v19 = (char *)v62;
        if (v63 >= v64)
        {
          unint64_t v35 = v63 + 1;
          if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
          {
            int64_t v37 = (char *)&v56 - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            uint64_t v19 = (char *)v62;
            unint64_t v18 = (const void ***)((char *)v62 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v35, 24);
            unint64_t v18 = &v56;
            uint64_t v19 = (char *)v62;
          }
        }
        unint64_t v20 = &v19[24 * v63];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v63;
        if (v60)
        {
          unint64_t v22 = a2 >= v16 ? v16 : a2;
          __int16 v59 = 261;
          unint64_t v56 = (const void **)&a1[v22];
          __int16 v57 = (const char *)(a2 - v22);
          mlir::Diagnostic::operator<<((uint64_t)&v61, &v56);
          if (v60)
          {
            LODWORD(v56) = 3;
            __int16 v57 = "'";
            uint64_t v58 = 1;
            unint64_t v23 = &v56;
            unint64_t v24 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v36 = v63 + 1;
              if (v62 <= &v56 && (char *)v62 + 24 * v63 > (char *)&v56)
              {
                int64_t v38 = (char *)&v56 - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                unint64_t v24 = (char *)v62;
                unint64_t v23 = (const void ***)((char *)v62 + v38);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v36, 24);
                unint64_t v23 = &v56;
                unint64_t v24 = (char *)v62;
              }
            }
            BOOL v25 = &v24[24 * v63];
            long long v26 = *(_OWORD *)v23;
            *((void *)v25 + 2) = v23[2];
            *(_OWORD *)BOOL v25 = v26;
            ++v63;
            if (v60) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
            }
          }
        }
      }
      if (v70)
      {
        BOOL v27 = (void **)__p;
        if (__p)
        {
          uint64_t v28 = v69;
          uint64_t v29 = __p;
          if (v69 != __p)
          {
            do
              uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
            while (v28 != v27);
            uint64_t v29 = __p;
          }
          unint64_t v69 = v27;
          operator delete(v29);
        }
        unsigned int v30 = v66;
        if (v66)
        {
          uint64_t v31 = v67;
          int8x16_t v32 = v66;
          if (v67 != v66)
          {
            do
            {
              unint64_t v34 = (void *)*--v31;
              BOOL v33 = v34;
              *uint64_t v31 = 0;
              if (v34) {
                operator delete[](v33);
              }
            }
            while (v31 != v30);
            int8x16_t v32 = v66;
          }
          int8x16_t v67 = v30;
          operator delete(v32);
        }
        if (v62 != v65) {
          free(v62);
        }
      }
    }
  }
  if (v83 != v85) {
    free(v83);
  }
  if (v80 != v82) {
    free(v80);
  }
  llvm::deallocate_buffer(v77, (void *)(8 * v79));
}

void mlir::parseType(char *a1, unint64_t a2, uint64_t **a3, unint64_t *a4, int a5)
{
  v93[6] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)a1, a2, &v53);
  }
  else
  {
    __int16 v71 = 261;
    v69.n128_u64[0] = (unint64_t)a1;
    v69.n128_u64[1] = a2;
    llvm::MemoryBuffer::getMemBufferCopy(a1, a2, (uint64_t)&v69, 0, &v53);
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v50);
  uint64_t v9 = v53;
  long long v53 = 0;
  uint64_t v70 = 0;
  __n128 v69 = (__n128)(unint64_t)v9;
  if ((unint64_t)v51 >= v52)
  {
    uint64_t v11 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)&v50, &v69);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v51, &v69);
    uint64_t v11 = (__n128 *)(v10 + 24);
  }
  int v51 = v11;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v69);
  v45[0] = 0;
  v45[1] = 0;
  v45[2] = 0x1000000000;
  void v45[3] = 0;
  v45[4] = 0;
  v45[5] = 0x1000000000;
  v45[6] = 0;
  v45[7] = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v84 = a3;
  char v85 = 1;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v88 = 0;
  uint64_t v89 = 0;
  int v90 = v92;
  uint64_t v91 = 0x600000000;
  v92[6] = v93;
  v92[7] = 0x600000000;
  v69.n128_u64[0] = (unint64_t)&v84;
  uint64_t v12 = mlir::Lexer::Lexer((uint64_t ***)&v69.n128_u64[1], &v50, a3, 0);
  mlir::Lexer::lexToken((mlir::Lexer *)v12, (uint64_t)&v72);
  uint64_t v76 = 0;
  long long v74 = v45;
  uint64_t v75 = 0;
  unsigned int v77 = 0;
  uint64_t v78 = v80;
  uint64_t v79 = 0;
  v80[1] = 0;
  v80[0] = 0;
  uint64_t v81 = v83;
  v83[0] = "builtin";
  v83[1] = 7;
  uint64_t v82 = 0x300000001;
  uint64_t v43 = *(void *)v69.n128_u64[0];
  uint64_t v44 = &v69;
  long long v41 = v72;
  uint64_t v42 = v73;
  if (mlir::detail::Parser::parseType((mlir::detail::Parser *)&v43))
  {
    long long v39 = *(long long *)((char *)&v44[3] + 8);
    unint64_t v40 = v44[4].n128_u64[1];
    uint64_t Loc = mlir::Token::getLoc((mlir::Token *)&v39);
    unint64_t v14 = Loc - mlir::Token::getLoc((mlir::Token *)&v41);
    if (a4)
    {
      *a4 = v14;
    }
    else if (v14 != a2)
    {
      uint64_t v15 = (const char *)mlir::Token::getLoc((mlir::Token *)&v39);
      __int16 v38 = 257;
      mlir::detail::Parser::emitError((uint64_t)&v43, v15, (uint64_t)v37, &v58);
      if (v58)
      {
        LODWORD(v54) = 3;
        long long v55 = "found trailing characters: '";
        uint64_t v56 = 28;
        unint64_t v16 = &v54;
        uint64_t v17 = (char *)v60;
        if (v61 >= v62)
        {
          unint64_t v33 = v61 + 1;
          if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
          {
            int64_t v35 = (char *)&v54 - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            uint64_t v17 = (char *)v60;
            unint64_t v16 = (const void ***)((char *)v60 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v33, 24);
            unint64_t v16 = &v54;
            uint64_t v17 = (char *)v60;
          }
        }
        unint64_t v18 = &v17[24 * v61];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)unint64_t v18 = v19;
        ++v61;
        if (v58)
        {
          unint64_t v20 = a2 >= v14 ? v14 : a2;
          __int16 v57 = 261;
          unint64_t v54 = (const void **)&a1[v20];
          long long v55 = (const char *)(a2 - v20);
          mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
          if (v58)
          {
            LODWORD(v54) = 3;
            long long v55 = "'";
            uint64_t v56 = 1;
            long long v21 = &v54;
            unint64_t v22 = (char *)v60;
            if (v61 >= v62)
            {
              unint64_t v34 = v61 + 1;
              if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
              {
                int64_t v36 = (char *)&v54 - (unsigned char *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                unint64_t v22 = (char *)v60;
                long long v21 = (const void ***)((char *)v60 + v36);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v34, 24);
                long long v21 = &v54;
                unint64_t v22 = (char *)v60;
              }
            }
            unint64_t v23 = &v22[24 * v61];
            long long v24 = *(_OWORD *)v21;
            *((void *)v23 + 2) = v21[2];
            *(_OWORD *)unint64_t v23 = v24;
            ++v61;
            if (v58) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
            }
          }
        }
      }
      if (v68)
      {
        BOOL v25 = (void **)__p;
        if (__p)
        {
          long long v26 = v67;
          BOOL v27 = __p;
          if (v67 != __p)
          {
            do
              long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            BOOL v27 = __p;
          }
          int8x16_t v67 = v25;
          operator delete(v27);
        }
        uint64_t v28 = v64;
        if (v64)
        {
          uint64_t v29 = v65;
          unsigned int v30 = v64;
          if (v65 != v64)
          {
            do
            {
              int8x16_t v32 = (void *)*--v29;
              uint64_t v31 = v32;
              *uint64_t v29 = 0;
              if (v32) {
                operator delete[](v31);
              }
            }
            while (v29 != v28);
            unsigned int v30 = v64;
          }
          int v65 = v28;
          operator delete(v30);
        }
        if (v60 != v63) {
          free(v60);
        }
      }
    }
  }
  if (v81 != v83) {
    free(v81);
  }
  if (v78 != v80) {
    free(v78);
  }
  llvm::deallocate_buffer(v75, (void *)(8 * v77));
}

void anonymous namespace'::CustomDialectAsmParser::~CustomDialectAsmParser(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getNameLoc(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(unsigned char *)(a1 + 24) = 1;
  mlir::detail::Parser::emitError(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getBuilder(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getCurrentLocation(uint64_t a1)
{
  return mlir::Token::getLoc((mlir::Token *)(*(void *)(*(void *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(void *)(*(void *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = "expected '->'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '{'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '}'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ':'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ','";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '='";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '<'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '>'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '?'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '+'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '*'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '|'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11) {
    return 0;
  }
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v7;
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(void *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseBase64Bytes(void *a1, unint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(void *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      long long v38 = *(_OWORD *)(v6 + 64);
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((void *)&v38 + 1)) {
        unint64_t v8 = *((void *)&v38 + 1);
      }
      else {
        unint64_t v8 = first_not_of;
      }
      unint64_t v9 = *((void *)&v38 + 1) - v8;
      *(void *)&long long v41 = v38 + v8;
      *((void *)&v41 + 1) = *((void *)&v38 + 1) - v8;
      uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((void *)&v41 + 1)) {
        uint64_t v11 = last_not_of + 1;
      }
      else {
        uint64_t v11 = *((void *)&v41 + 1);
      }
      unint64_t v12 = *((void *)&v41 + 1) - v9 + v11;
      if (*((void *)&v41 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v41 + 1);
      }
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        int64_t v35 = v37;
        int64_t v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        __int16 v40 = 260;
        v39[0] = &v36;
        (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
        uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((void)v41) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        }
        if (v49)
        {
          uint64_t v17 = (void **)__p;
          if (__p)
          {
            unint64_t v18 = v48;
            long long v19 = __p;
            if (v48 != __p)
            {
              do
                unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              long long v19 = __p;
            }
            uint64_t v48 = v17;
            operator delete(v19);
          }
          unint64_t v20 = v45;
          if (v45)
          {
            long long v21 = v46;
            unint64_t v22 = v45;
            if (v46 != v45)
            {
              do
              {
                long long v24 = (void *)*--v21;
                unint64_t v23 = v24;
                *long long v21 = 0;
                if (v24) {
                  operator delete[](v23);
                }
              }
              while (v21 != v20);
              unint64_t v22 = v45;
            }
            int v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44) {
            free(v43);
          }
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v35) {
          (*(void (**)(void *))(*v35 + 8))(v35);
        }
        if (v37) {
          (*(void (**)(void *))(*v37 + 8))(v37);
        }
        return v16;
      }
      uint64_t v5 = a1[2];
      uint64_t v6 = *(void *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    uint64_t v33 = *(void *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(void *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  __int16 v40 = 259;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((void)v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v49)
  {
    BOOL v25 = (void **)__p;
    if (__p)
    {
      long long v26 = v48;
      BOOL v27 = __p;
      if (v48 != __p)
      {
        do
          long long v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        BOOL v27 = __p;
      }
      uint64_t v48 = v25;
      operator delete(v27);
    }
    uint64_t v28 = v45;
    if (v45)
    {
      uint64_t v29 = v46;
      unsigned int v30 = v45;
      if (v46 != v45)
      {
        do
        {
          int8x16_t v32 = (void *)*--v29;
          uint64_t v31 = v32;
          *uint64_t v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        unsigned int v30 = v45;
      }
      int v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44) {
      free(v43);
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = "expected '('";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ')'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '['";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ']'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '...'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseFloat(void *a1, double *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    uint64_t v7 = *(void *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(void *)(v7 + 72) = v45;
    uint64_t v5 = *(void *)(a1[2] + 8);
  }
  long long v42 = *(_OWORD *)(v5 + 56);
  uint64_t v43 = *(void *)(v5 + 72);
  uint64_t Loc = (llvm::APFloatBase *)mlir::Token::getLoc((mlir::Token *)&v42);
  if (v42 == 10)
  {
    BOOL v17 = v6 == 24;
    LOBYTE(v44) = 0;
    char v47 = 0;
    uint64_t v18 = a1[2];
    long long v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(Loc);
    unint64_t v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (mlir::Token *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      uint64_t v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v21 + 8) + 8), (uint64_t)&v39);
      uint64_t v22 = *(void *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(void *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((void **)&v44);
      uint64_t v16 = 1;
      if (!v47) {
        return v16;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!v47) {
        return v16;
      }
    }
    int64_t v37 = (void *)*((void *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v44 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
    }
  }
  else
  {
    unint64_t v9 = Loc;
    if (v42 == 9)
    {
      uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        double v12 = *(double *)&FloatingPointValue;
        uint64_t v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v13 + 8) + 8), (uint64_t)&v44);
        uint64_t v14 = *(void *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(void *)(v14 + 72) = v45;
        double v15 = -v12;
        if (v6 != 24) {
          double v15 = v12;
        }
        *a2 = v15;
        return 1;
      }
      *(void *)&long long v39 = "floating point value too large";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, v9, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v31 = (void **)__p;
        if (__p)
        {
          int8x16_t v32 = v52;
          uint64_t v33 = __p;
          if (v52 != __p)
          {
            do
              int8x16_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          unint64_t v52 = v31;
          operator delete(v33);
        }
        long long v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        unint64_t v34 = v50;
        uint64_t v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          uint64_t v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48) {
            free(v46);
          }
          return v16;
        }
        do
        {
          std::string v36 = (void *)*--v34;
          int64_t v35 = v36;
          *unint64_t v34 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v34 != v26);
LABEL_43:
        uint64_t v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(void *)&long long v39 = "expected floating point literal";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, Loc, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        unint64_t v23 = (void **)__p;
        if (__p)
        {
          long long v24 = v52;
          BOOL v25 = __p;
          if (v52 != __p)
          {
            do
              long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            BOOL v25 = __p;
          }
          unint64_t v52 = v23;
          operator delete(v25);
        }
        long long v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        BOOL v27 = v50;
        uint64_t v28 = v49;
        if (v50 == v49) {
          goto LABEL_44;
        }
        do
        {
          unsigned int v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(void *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeyword(void *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  v28[0] = a2;
  v28[1] = a3;
  uint64_t v5 = a1[2];
  if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 2) {
    return mlir::detail::Parser::codeCompleteExpectedTokens(v5, (uint64_t)v28, 1);
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(void *, const void **, const char *))(*a1 + 376))(a1, a2, a3)) {
    return 1;
  }
  long long v26 = "expected '";
  __int16 v27 = 259;
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
  if (v33)
  {
    __int16 v32 = 261;
    uint64_t v29 = a2;
    unsigned int v30 = a3;
    mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
    if (v33)
    {
      LODWORD(v29) = 3;
      unsigned int v30 = "'";
      uint64_t v31 = 1;
      double v12 = &v29;
      uint64_t v13 = (char *)v35;
      if (v36 >= v37)
      {
        unint64_t v24 = v36 + 1;
        if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
        {
          int64_t v25 = (char *)&v29 - (unsigned char *)v35;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          uint64_t v13 = (char *)v35;
          double v12 = (const void ***)((char *)v35 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
          double v12 = &v29;
          uint64_t v13 = (char *)v35;
        }
      }
      uint64_t v14 = &v13[24 * v36];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = v12[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++v36;
      if (v33) {
        mlir::Diagnostic::operator<<((uint64_t)v34, a4);
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      BOOL v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          BOOL v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      long long v42 = v16;
      operator delete(v18);
    }
    long long v19 = v39;
    if (v39)
    {
      unint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v6;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  v12[0] = __s2;
  v12[1] = __n;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(void *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n)) {
      return 0;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    uint64_t v11 = *(void *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(void *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2) {
    return mlir::detail::Parser::codeCompleteOptionalTokens(v6, (uint64_t)v12, 1);
  }
  uint64_t result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  int v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    BOOL result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  uint64_t v8 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v8 + 8) + 8), (uint64_t)&v10);
  uint64_t v9 = *(void *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(void *)(v9 + 72) = v11;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeyword(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(v8 + 8);
  int v10 = *((_DWORD *)v9 + 14);
  if (v10 != 12 && v10 != 3)
  {
    if (v10 == 2)
    {
      return mlir::detail::Parser::codeCompleteOptionalTokens(v8, a3, a4);
    }
    uint64_t result = mlir::Token::isKeyword((mlir::Token *)(v9 + 7));
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void **)(*(void *)(a1 + 16) + 8);
  }
  long long v13 = (const void *)v9[8];
  size_t v14 = v9[9];
  if (a4)
  {
    if (v14)
    {
      uint64_t v15 = 16 * a4;
      uint64_t v16 = a3;
      while (*(void *)(v16 + 8) != v14 || memcmp(*(const void **)v16, v13, v14))
      {
        v16 += 16;
        v15 -= 16;
        if (!v15) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v17 = 16 * a4;
      uint64_t v16 = a3;
      while (*(void *)(v16 + 8))
      {
        v16 += 16;
        v17 -= 16;
        if (!v17)
        {
LABEL_22:
          uint64_t v16 = a3 + 16 * a4;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v16 = a3;
  }
  if (a4 == (v16 - a3) >> 4) {
    return 0;
  }
  *a2 = v13;
  a2[1] = v14;
  uint64_t v18 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v18 + 8) + 8), (uint64_t)&v20);
  uint64_t v19 = *(void *)(v18 + 8);
  *(_OWORD *)(v19 + 56) = v20;
  *(void *)(v19 + 72) = v21;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  __src = 0;
  size_t __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 384))(a1, &__src)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a2);
  }
  uint64_t v4 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v11 = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  size_t v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v8 = __len | 7;
    }
    size_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_13:
  }
    memmove(p_dst, v4, v5);
  *((unsigned char *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0) {
LABEL_15:
  }
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  uint64_t v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 5)
  {
    uint64_t v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
    *a2 = v7;
    return v7 != 0;
  }
  else
  {
    return a4(a5);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(mlir::detail::Parser **)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  uint64_t v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 20) {
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  }
  else {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalAttrDictWithKeyword(void *a1, mlir::NamedAttrList *a2)
{
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*a1 + 376))(a1, "attributes", 10)) {
    return 1;
  }
  uint64_t v4 = (mlir::detail::Parser *)a1[2];

  return mlir::detail::Parser::parseAttributeDict(v4, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalSymbolName(void *a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1[2] + 8);
  long long v16 = *(_OWORD *)(v2 + 56);
  uint64_t v17 = *(void *)(v2 + 72);
  if (v16 != 4) {
    return 0;
  }
  size_t v5 = (mlir::StringAttr **)(*(uint64_t (**)(void *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  __int16 v15 = 260;
  *(void *)&long long v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v6 + 8) + 8), (uint64_t)&v13);
  uint64_t v7 = *(void *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(void *)(v7 + 72) = v14;
  uint64_t v8 = *(void *)(*(void *)(a1[2] + 8) + 128);
  if (v8)
  {
    uint64_t v9 = mlir::SymbolRefAttr::get(*a2);
    *(void *)&long long v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((void *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  size_t v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v5 + 1) + 56) == 8)
  {
    uint64_t v6 = mlir::detail::Parser::parseType(v5);
    *a2 = v6;
    return v6 != 0;
  }
  else
  {
    return a3(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v7 = "expected ':'";
  __int16 v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = "expected ':'";
  __int16 v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6)) {
    return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (uint64_t v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(mlir::detail::Parser **)(a1 + 16), v6, (llvm::StringRef *)&v37, (uint64_t)a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    __int16 v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37) {
      goto LABEL_11;
    }
    LODWORD(v33) = 3;
    unint64_t v34 = "dialect '";
    uint64_t v35 = 9;
    long long v8 = &v33;
    uint64_t v9 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v29 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        uint64_t v9 = (char *)v39;
        long long v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        long long v8 = &v33;
        uint64_t v9 = (char *)v39;
      }
    }
    uint64_t v10 = &v9[24 * v40];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v40;
    if (!v37) {
      goto LABEL_11;
    }
    double v12 = *(const void ***)(a2 + 8);
    long long v13 = *(const char **)(a2 + 16);
    __int16 v36 = 261;
    uint64_t v33 = v12;
    unint64_t v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      unint64_t v34 = "' does not expect resource handles";
      uint64_t v35 = 34;
      uint64_t v14 = &v33;
      __int16 v15 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          int64_t v30 = (char *)&v33 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          __int16 v15 = (char *)v39;
          uint64_t v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          uint64_t v14 = &v33;
          __int16 v15 = (char *)v39;
        }
      }
      long long v16 = &v15[24 * v40];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v40;
      uint64_t v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        long long v20 = v46;
        uint64_t v21 = __p;
        if (v46 != __p)
        {
          do
            long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        int v46 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v43;
      if (v43)
      {
        unint64_t v23 = v44;
        unint64_t v24 = v43;
        if (v44 != v43)
        {
          do
          {
            long long v26 = (void *)*--v23;
            int64_t v25 = v26;
            void *v23 = 0;
            if (v26) {
              operator delete[](v25);
            }
          }
          while (v23 != v22);
          unint64_t v24 = v43;
        }
        uint64_t v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42) {
        free(v39);
      }
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(void *)(*(void *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::popCyclicParsing(uint64_t result)
{
  uint64_t v1 = *(int32x2_t **)(*(void *)(result + 16) + 8);
  __int32 v2 = v1[13].i32[0];
  if (v2)
  {
    int32x2_t v3 = v1[11];
    uint64_t v4 = v1[15].u32[0];
    uint64_t v5 = *(void *)(*(void *)&v1[14] + 8 * v4 - 8);
    __int32 v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      uint64_t *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2 = *(void *)(*((void *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(void *)(v2 + 72)) {
    return mlir::AsmParser::parseKeyword(a1, a2);
  }
  *(void *)a2 = "";
  *((void *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::DialectAsmParser>::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(result + 8);
  if (*(_DWORD *)(v4 + 56) == 2 && !*(void *)(v4 + 72)) {
    return mlir::detail::Parser::codeCompleteExpectedTokens(result, a2, a3);
  }
  return result;
}

uint64_t anonymous namespace'::CustomDialectAsmParser::getFullSymbolSpec(_anonymous_namespace_::CustomDialectAsmParser *this)
{
  return *((void *)this + 4);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      unint64_t v22 = 77;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      __int16 v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 3872);
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    __int32 v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        __int32 v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  __int32 v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedAttr(mlir::Type)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseExtendedType(void)::$_0::operator() const(llvm::StringRef,llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

uint64_t ***mlir::Lexer::Lexer(uint64_t ***result, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  void *result = a2;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  result[5] = 0;
  uint64_t v4 = **a2;
  __int16 v5 = *(uint64_t ***)(v4 + 8);
  __int32 v6 = (uint64_t **)(*(void *)(v4 + 16) - (void)v5);
  result[2] = v5;
  result[3] = v6;
  result[4] = v5;
  if (a4) {
    result[5] = *(uint64_t ***)(a4 + 8);
  }
  return result;
}

uint64_t mlir::Lexer::getEncodedSourceLocation(uint64_t a1, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  __int16 v5 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, a2);
  uint64_t v7 = v2 - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v5, LineNumber) + 1;
  int v8 = *(mlir::StringAttr **)(a1 + 8);
  int v10 = (const char *)(*(uint64_t (**)(void))(**(void **)*v4 + 16))(*(void *)*v4);

  return mlir::FileLineColLoc::get(v8, v10, v9, LineNumber, v7);
}

void mlir::Lexer::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v8 = *(llvm::SourceMgr::SrcBuffer ***)a1;
  unint64_t v9 = **(llvm::SourceMgr::SrcBuffer ***)a1;
  unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v9, a2);
  uint64_t v11 = a2
      - llvm::SourceMgr::SrcBuffer::getPointerForLineNumber((unint64_t **)v9, LineNumber)
      + 1;
  uint64_t v12 = *(void *)*v8;
  unint64_t v13 = *(mlir::StringAttr **)(a1 + 8);
  unint64_t v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  uint64_t v16 = mlir::FileLineColLoc::get(v13, v14, v15, LineNumber, v11);
  mlir::emitError(v16, a3, (uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v33)
  {
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      unint64_t v18 = v32;
      uint64_t v19 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      __int16 v32 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v29;
    if (v29)
    {
      uint64_t v21 = v30;
      unint64_t v22 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          unint64_t v23 = v24;
          *uint64_t v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        unint64_t v22 = v29;
      }
      int64_t v30 = v20;
      operator delete(v22);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  uint64_t v25 = *(void *)(a1 + 32) - (void)a2;
  *(_DWORD *)a4 = 1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = v25;
}

void mlir::Lexer::lexToken(mlir::Lexer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (const char *)*((void *)this + 4);
  uint64_t v3 = (const char *)*((void *)this + 5);
  if (v4 != v3)
  {
    do
    {
      __int32 v6 = v4 + 1;
      *((void *)this + 4) = v4 + 1;
      unsigned int v7 = *v4;
      switch(*v4)
      {
        case 0:
          if (v4 != (const char *)(*((void *)this + 2) + *((void *)this + 3))) {
            goto LABEL_4;
          }
          *(_DWORD *)a2 = 0;
          goto LABEL_64;
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
          goto LABEL_4;
        case 0x21:
        case 0x25:
        case 0x5E:
          goto LABEL_29;
        case 0x22:
          mlir::Lexer::lexString(this, v4, a2);
          return;
        case 0x23:
          if (*v6 == 45 && v4[2] == 125)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 33;
            goto LABEL_56;
          }
LABEL_29:
          mlir::Lexer::lexPrefixedIdentifier(this, v4, a2);
          return;
        case 0x28:
          int v13 = 21;
          goto LABEL_63;
        case 0x29:
          int v13 = 28;
          goto LABEL_63;
        case 0x2A:
          int v13 = 30;
          goto LABEL_63;
        case 0x2B:
          int v13 = 25;
          goto LABEL_63;
        case 0x2C:
          int v13 = 16;
          goto LABEL_63;
        case 0x2D:
          if (*v6 == 62)
          {
            *((void *)this + 4) = v4 + 2;
            *(_DWORD *)a2 = 13;
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 2;
            return;
          }
          int v13 = 24;
          goto LABEL_63;
        case 0x2E:
          if (v6 != (const char *)(*((void *)this + 2) + *((void *)this + 3)) && *v6 == 46 && v4[2] == 46)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 17;
            goto LABEL_56;
          }
          v14[0] = "expected three consecutive dots for an ellipsis";
          __int16 v15 = 259;
          mlir::Lexer::emitError((uint64_t)this, v6, (uint64_t)v14, a2);
          return;
        case 0x2F:
          if (*v6 != 47) {
            goto LABEL_70;
          }
          int v8 = (char *)(v4 + 2);
          break;
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
          mlir::Lexer::lexNumber((uint64_t)this, v4, a2);
          return;
        case 0x3A:
          int v13 = 15;
          goto LABEL_63;
        case 0x3C:
          int v13 = 23;
          goto LABEL_63;
        case 0x3D:
          int v13 = 18;
          goto LABEL_63;
        case 0x3E:
          int v13 = 19;
          goto LABEL_63;
        case 0x3F:
          int v13 = 26;
          goto LABEL_63;
        case 0x40:
          mlir::Lexer::lexAtIdentifier(this, v4, a2);
          return;
        case 0x5B:
          int v13 = 22;
          goto LABEL_63;
        case 0x5D:
          int v13 = 29;
          goto LABEL_63;
        case 0x5F:
          goto LABEL_67;
        case 0x7B:
          if (*v6 == 45 && v4[2] == 35)
          {
            *((void *)this + 4) = v4 + 3;
            int v12 = 32;
LABEL_56:
            *(_DWORD *)a2 = v12;
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 3;
          }
          else
          {
            int v13 = 20;
LABEL_63:
            *(_DWORD *)a2 = v13;
LABEL_64:
            *(void *)(a2 + 8) = v4;
            *(void *)(a2 + 16) = 1;
          }
          return;
        case 0x7C:
          int v13 = 31;
          goto LABEL_63;
        case 0x7D:
          int v13 = 27;
          goto LABEL_63;
        default:
          if ((v7 & 0x80000000) != 0) {
            int v11 = __maskrune(v7, 0x100uLL);
          }
          else {
            int v11 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v7 + 60) & 0x100;
          }
          if (v11)
          {
LABEL_67:
            mlir::Lexer::lexBareIdentifierOrKeyword(this, (unint64_t)v4, a2);
          }
          else
          {
LABEL_70:
            v14[0] = "unexpected character";
            __int16 v15 = 259;
            mlir::Lexer::emitError((uint64_t)this, v4, (uint64_t)v14, a2);
          }
          return;
      }
      do
      {
        while (1)
        {
          __int32 v6 = v8++;
          *((void *)this + 4) = v8;
          int v9 = *v6;
          if (!*v6) {
            break;
          }
          if (v9 == 10 || v9 == 13)
          {
            ++v6;
            goto LABEL_4;
          }
        }
      }
      while (v6 != (const char *)(*((void *)this + 2) + *((void *)this + 3)));
      *((void *)this + 4) = v6;
LABEL_4:
      uint64_t v4 = v6;
    }
    while (v6 != v3);
  }
  *(_DWORD *)a2 = 2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
}

uint64_t mlir::Lexer::lexBareIdentifierOrKeyword@<X0>(mlir::Lexer *this@<X0>, unint64_t __s1@<X1>, uint64_t a3@<X8>)
{
  __int32 v6 = (unsigned __int8 *)*((void *)this + 4);
  uint64_t v7 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v12 = (char)*v6;
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t result = __maskrune(v12, 0x100uLL);
      __int32 v6 = (unsigned __int8 *)*((void *)this + 4);
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = *(_DWORD *)(v7 + 4 * v12 + 60) & 0x100;
      if (result) {
        goto LABEL_6;
      }
    }
    uint64_t v14 = *v6;
    if ((char)*v6 < 0 || (*(_DWORD *)(v7 + 4 * v14 + 60) & 0x400) == 0)
    {
      unsigned int v8 = v14 - 36;
      BOOL v9 = v8 > 0x3B;
      uint64_t v10 = (1 << v8) & 0x800000000000401;
      if (v9 || v10 == 0) {
        break;
      }
    }
LABEL_6:
    *((void *)this + 4) = ++v6;
  }
  size_t v15 = (size_t)&v6[-__s1];
  uint64_t v16 = (uint64_t)&v6[-__s1 - 2];
  if ((unint64_t)&v6[-__s1] < 2) {
    goto LABEL_30;
  }
  int v17 = *(unsigned __int8 *)__s1;
  if (v17 == 105)
  {
    unint64_t v18 = (const char *)(__s1 + 1);
    uint64_t v19 = (char *)&v6[~__s1];
    while (*(unsigned __int8 *)v18 - 48 < 0xA)
    {
      ++v18;
      if (!--v19)
      {
LABEL_27:
        int v22 = 12;
        goto LABEL_31;
      }
    }
  }
  if (v15 >= 3)
  {
    if (*(unsigned char *)(__s1 + 1) == 105 && (v17 == 117 || v17 == 115))
    {
      uint64_t v20 = (const char *)(__s1 + 2);
      uint64_t v21 = v16;
      while (*(unsigned __int8 *)v20 - 48 < 0xA)
      {
        ++v20;
        if (!--v21) {
          goto LABEL_27;
        }
      }
    }
    switch(v16)
    {
      case 0:
        goto LABEL_29;
      case 1:
        if (*(_WORD *)__s1 == 12646 && *(unsigned char *)(__s1 + 2) == 54)
        {
          int v22 = 44;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13158 && *(unsigned char *)(__s1 + 2) == 50)
        {
          int v22 = 45;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 13926 && *(unsigned char *)(__s1 + 2) == 52)
        {
          int v22 = 46;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 14438 && *(unsigned char *)(__s1 + 2) == 48)
        {
          int v22 = 47;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28518 && *(unsigned char *)(__s1 + 2) == 114)
        {
          int v22 = 56;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28524 && *(unsigned char *)(__s1 + 2) == 99)
        {
          int v22 = 59;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 24941 && *(unsigned char *)(__s1 + 2) == 120)
        {
          int v22 = 60;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 26989 && *(unsigned char *)(__s1 + 2) == 110)
        {
          int v22 = 62;
          goto LABEL_31;
        }
        if (*(_WORD *)__s1 == 28525 && *(unsigned char *)(__s1 + 2) == 100)
        {
          int v22 = 63;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 2:
        switch(*(_DWORD *)__s1)
        {
          case 0x36316662:
            int v22 = 38;
            break;
          case 0x38323166:
            int v22 = 53;
            break;
          case 0x636E7566:
            int v22 = 57;
            break;
          case 0x656E6F6E:
            int v22 = 64;
            break;
          case 0x657A6973:
            int v22 = 66;
            break;
          case 0x70657473:
            int v22 = 68;
            break;
          case 0x32336674:
            int v22 = 72;
            break;
          case 0x65757274:
            int v22 = 74;
            break;
          case 0x65707974:
            int v22 = 76;
            break;
          case 0x74696E75:
            int v22 = 77;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 3:
        if (*(_DWORD *)__s1 == 1634890337 && *(unsigned char *)(__s1 + 4) == 121)
        {
          int v22 = 36;
        }
        else if (*(_DWORD *)__s1 == 1936614756 && *(unsigned char *)(__s1 + 4) == 101)
        {
          int v22 = 41;
        }
        else if (*(_DWORD *)__s1 == 1936482662 && *(unsigned char *)(__s1 + 4) == 101)
        {
          int v22 = 54;
        }
        else if (*(_DWORD *)__s1 == 1701080681 && *(unsigned char *)(__s1 + 4) == 120)
        {
          int v22 = 58;
        }
        else
        {
          uint64_t result = memcmp((const void *)__s1, "tuple", v15);
          if (result) {
            goto LABEL_30;
          }
          int v22 = 75;
        }
        goto LABEL_31;
      case 4:
        if (*(_DWORD *)__s1 == 893728870 && *(_WORD *)(__s1 + 4) == 12877)
        {
          int v22 = 48;
        }
        else if (*(_DWORD *)__s1 == 1919772013 && *(_WORD *)(__s1 + 4) == 26213)
        {
          int v22 = 61;
        }
        else if (*(_DWORD *)__s1 == 1936090735 && *(_WORD *)(__s1 + 4) == 29797)
        {
          int v22 = 65;
        }
        else if (*(_DWORD *)__s1 == 1918988403 && *(_WORD *)(__s1 + 4) == 25971)
        {
          int v22 = 67;
        }
        else if (*(_DWORD *)__s1 == 1651341683 && *(_WORD *)(__s1 + 4) == 27759)
        {
          int v22 = 70;
        }
        else if (*(_DWORD *)__s1 == 1936614772 && *(_WORD *)(__s1 + 4) == 29295)
        {
          int v22 = 71;
        }
        else
        {
          uint64_t result = memcmp((const void *)__s1, "vector", v15);
          if (result) {
            goto LABEL_30;
          }
          int v22 = 78;
        }
        goto LABEL_31;
      case 5:
        if (*(_DWORD *)__s1 == 1818846563 && *(_DWORD *)(__s1 + 3) == 1986618476)
        {
          int v22 = 39;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1886220131 && *(_DWORD *)(__s1 + 3) == 2019912816)
        {
          int v22 = 40;
          goto LABEL_31;
        }
        if (*(_DWORD *)__s1 == 1769108595 && *(_DWORD *)(__s1 + 3) == 1684366441)
        {
          int v22 = 69;
          goto LABEL_31;
        }
        goto LABEL_30;
      case 6:
        switch(*(void *)__s1)
        {
          case 0x74636E6974736964:
            int v22 = 43;
            break;
          case 0x4E46334D34453866:
            int v22 = 49;
            break;
          case 0x766964726F6F6C66:
            int v22 = 55;
            break;
          default:
            goto LABEL_30;
        }
        goto LABEL_31;
      case 8:
        if (*(void *)__s1 == 0x6D5F656E69666661 && *(_WORD *)(__s1 + 8) == 28769)
        {
          int v22 = 34;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x735F656E69666661 && *(_WORD *)(__s1 + 8) == 29797)
        {
          int v22 = 35;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x7475626972747461 && *(_WORD *)(__s1 + 8) == 29541)
        {
          int v22 = 37;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x4E46324D35453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          int v22 = 50;
          goto LABEL_31;
        }
        if (*(void *)__s1 == 0x4E46334D34453866 && *(_WORD *)(__s1 + 8) == 23125)
        {
          int v22 = 51;
          goto LABEL_31;
        }
        break;
      case 11:
        if (*(void *)__s1 != 0x3142334D34453866 || *(void *)(__s1 + 5) != 0x5A554E4631314233) {
          goto LABEL_30;
        }
        int v22 = 52;
        goto LABEL_31;
      case 12:
        if (*(void *)__s1 != 0x65725F65736E6564 || *(void *)(__s1 + 6) != 0x656372756F736572) {
          goto LABEL_30;
        }
        int v22 = 42;
        goto LABEL_31;
      default:
        goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v15 != 2) {
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = memcmp((const void *)__s1, "to", v15);
  if (result) {
LABEL_30:
  }
    int v22 = 3;
  else {
    int v22 = 73;
  }
LABEL_31:
  *(_DWORD *)a3 = v22;
  *(void *)(a3 + 8) = __s1;
  *(void *)(a3 + 16) = v15;
  return result;
}

void mlir::Lexer::lexAtIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  __int32 v6 = (char *)*((void *)this + 4);
  *((void *)this + 4) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 != 34)
  {
    if ((v7 & 0x80000000) != 0)
    {
      int v19 = __maskrune(*v6, 0x100uLL);
      BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
      if (v7 == 95 || v19 != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
      if (v7 == 95 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v7 + 60) & 0x100) != 0)
      {
LABEL_9:
        uint64_t v11 = MEMORY[0x1E4F14390];
        while (1)
        {
          unsigned int v16 = (char)*v9;
          if ((v16 & 0x80000000) != 0)
          {
            int v17 = __maskrune(v16, 0x100uLL);
            BOOL v9 = (unsigned __int8 *)*((void *)this + 4);
            if (v17) {
              goto LABEL_14;
            }
          }
          else if ((*(_DWORD *)(v11 + 4 * v16 + 60) & 0x100) != 0)
          {
            goto LABEL_14;
          }
          uint64_t v18 = *v9;
          if ((char)*v9 < 0 || (*(_DWORD *)(v11 + 4 * v18 + 60) & 0x400) == 0)
          {
            unsigned int v12 = v18 - 36;
            BOOL v13 = v12 > 0x3B;
            uint64_t v14 = (1 << v12) & 0x800000000000401;
            if (v13 || v14 == 0)
            {
              *(_DWORD *)a3 = 4;
              int64_t v8 = v9 - (unsigned __int8 *)a2;
LABEL_24:
              *(void *)(a3 + 8) = a2;
              goto LABEL_25;
            }
          }
LABEL_14:
          *((void *)this + 4) = ++v9;
        }
      }
    }
    *(void *)&long long v21 = "@ identifier expected to start with letter or '_'";
    __int16 v23 = 259;
    mlir::Lexer::emitError((uint64_t)this, (const char *)v9 - 1, (uint64_t)&v21, a3);
    return;
  }
  mlir::Lexer::lexString(this, v6 + 1, (uint64_t)&v21);
  if (v21 != 1)
  {
    int64_t v8 = *((void *)this + 4) - (void)a2;
    *(_DWORD *)a3 = 4;
    goto LABEL_24;
  }
  *(_OWORD *)a3 = v21;
  int64_t v8 = v22;
LABEL_25:
  *(void *)(a3 + 16) = v8;
}

void mlir::Lexer::lexPrefixedIdentifier(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a2;
  if (v6 > 36)
  {
    if (v6 == 94)
    {
      int v9 = 7;
      int64_t v8 = "invalid block name";
      uint64_t v7 = 18;
      uint64_t v10 = (char *)*((void *)this + 4);
      unsigned int v11 = *v10;
      uint64_t v12 = MEMORY[0x1E4F14390];
      if ((v11 & 0x80000000) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      int v9 = 6;
      int64_t v8 = "invalid SSA name";
      uint64_t v7 = 16;
      uint64_t v10 = (char *)*((void *)this + 4);
      unsigned int v11 = *v10;
      uint64_t v12 = MEMORY[0x1E4F14390];
      if ((v11 & 0x80000000) != 0) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (v6 == 33) {
      uint64_t v7 = 23;
    }
    else {
      uint64_t v7 = 22;
    }
    if (v6 == 33) {
      int64_t v8 = "invalid type identifier";
    }
    else {
      int64_t v8 = "invalid attribute name";
    }
    if (v6 == 33) {
      int v9 = 8;
    }
    else {
      int v9 = 5;
    }
    uint64_t v10 = (char *)*((void *)this + 4);
    unsigned int v11 = *v10;
    uint64_t v12 = MEMORY[0x1E4F14390];
    if ((v11 & 0x80000000) != 0)
    {
LABEL_31:
      if (__maskrune(v11, 0x100uLL)) {
        goto LABEL_41;
      }
      goto LABEL_32;
    }
  }
  int v13 = *(_DWORD *)(v12 + 4 * v11 + 60);
  if ((v13 & 0x400) != 0)
  {
    uint64_t v14 = v10 + 1;
    do
    {
      if ((*(_DWORD *)(v12 + 4 * v11 + 60) & 0x400) == 0) {
        break;
      }
      *((void *)this + 4) = v14;
      int v15 = *v14++;
      LOBYTE(v11) = v15;
    }
    while ((v15 & 0x80000000) == 0);
    unsigned int v16 = v14 - 1;
LABEL_22:
    unint64_t v17 = *((void *)this + 5);
    BOOL v18 = v17 < (unint64_t)a2 || v17 > (unint64_t)v16;
    if (!v18)
    {
      *(_DWORD *)a3 = 2;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v17 - (void)a2;
      return;
    }
    uint64_t v19 = v16 - a2;
    *(_DWORD *)a3 = v9;
    goto LABEL_28;
  }
  if ((v13 & 0x100) != 0) {
    goto LABEL_41;
  }
LABEL_32:
  uint64_t v20 = (const char *)*((void *)this + 4);
  unsigned int v21 = *(unsigned __int8 *)v20 - 36;
  BOOL v18 = v21 > 0x3B;
  uint64_t v22 = (1 << v21) & 0x800000000000601;
  if (!v18 && v22 != 0)
  {
    while (1)
    {
LABEL_41:
      while (1)
      {
        unint64_t v27 = (char *)(*((void *)this + 4) + 1);
        *((void *)this + 4) = v27;
        unsigned int v28 = *v27;
        if ((v28 & 0x80000000) != 0) {
          break;
        }
        if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x100) == 0) {
          goto LABEL_45;
        }
      }
      if (!__maskrune(v28, 0x100uLL))
      {
LABEL_45:
        unsigned int v16 = (char *)*((void *)this + 4);
        uint64_t v29 = *v16;
        if (*v16 < 0 || (*(_DWORD *)(v12 + 4 * v29 + 60) & 0x400) == 0)
        {
          unsigned int v24 = v29 - 36;
          BOOL v18 = v24 > 0x3B;
          uint64_t v25 = (1 << v24) & 0x800000000000601;
          if (v18 || v25 == 0) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  if (v20 != *((const char **)this + 5))
  {
    __int16 v31 = 261;
    v30[0] = v8;
    v30[1] = v7;
    mlir::Lexer::emitError((uint64_t)this, v20 - 1, (uint64_t)v30, a3);
    return;
  }
  *(_DWORD *)a3 = 2;
  uint64_t v19 = v20 - a2;
LABEL_28:
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v19;
}

void mlir::Lexer::lexString(mlir::Lexer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)*((void *)this + 4);
  uint64_t v4 = (char *)*((void *)this + 5);
  if (v3 == v4)
  {
LABEL_23:
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v4 - a2;
    return;
  }
  while (1)
  {
    __int16 v5 = (unsigned __int8 *)(v3 + 1);
    *((void *)this + 4) = v3 + 1;
    int v6 = *v3;
    if (v6 > 33)
    {
      if (v6 == 92)
      {
        uint64_t v7 = *v5;
        BOOL v8 = (v7 - 92) > 0x18 || ((1 << (v7 - 92)) & 0x1040001) == 0;
        if (v8 && v7 != 34)
        {
          if (llvm::hexDigitValue(char)::LUT[v7] == -1 || llvm::hexDigitValue(char)::LUT[v3[2]] == -1)
          {
            int v9 = "unknown escape in string literal";
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v5 = (unsigned __int8 *)v3;
        }
        v5 += 2;
        *((void *)this + 4) = v5;
      }
      else if (v6 == 34)
      {
        *(_DWORD *)a3 = 11;
        *(void *)(a3 + 8) = a2;
        *(void *)(a3 + 16) = v5 - (unsigned __int8 *)a2;
        return;
      }
      goto LABEL_5;
    }
    if (*v3) {
      break;
    }
    if (v3 == (char *)(*((void *)this + 2) + *((void *)this + 3))) {
      goto LABEL_24;
    }
LABEL_5:
    uint64_t v3 = (char *)v5;
    if (v5 == (unsigned __int8 *)v4) {
      goto LABEL_23;
    }
  }
  if ((v6 - 10) >= 3) {
    goto LABEL_5;
  }
LABEL_24:
  int v9 = "expected '\"' in string literal";
LABEL_25:
  uint64_t v10 = v9;
  __int16 v11 = 259;
  mlir::Lexer::emitError((uint64_t)this, v3, (uint64_t)&v10, a3);
}

uint64_t mlir::Lexer::lexNumber@<X0>(uint64_t this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned __int8 **)(this + 32);
  unsigned int v4 = *v3;
  if (__PAIR64__(v4, *(v3 - 1)) == 0x7800000030)
  {
    if (((char)v3[1] & 0x80000000) == 0
      && (uint64_t v5 = MEMORY[0x1E4F14390], (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3[1] + 60) & 0x10000) != 0))
    {
      unint64_t v17 = v3 + 2;
      *(void *)(this + 32) = v3 + 2;
      if (((char)v3[2] & 0x80000000) == 0)
      {
        uint64_t v18 = v3[2];
        uint64_t v19 = (char *)(v3 + 3);
        do
        {
          if ((*(_DWORD *)(v5 + 4 * v18 + 60) & 0x10000) == 0) {
            break;
          }
          *(void *)(this + 32) = v19;
          int v20 = *v19++;
          uint64_t v18 = v20;
        }
        while ((v20 & 0x80000000) == 0);
        unint64_t v17 = (unsigned __int8 *)(v19 - 1);
      }
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v17 - (unsigned __int8 *)a2;
    }
    else
    {
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((v4 & 0x80) != 0) {
      goto LABEL_25;
    }
    uint64_t v6 = MEMORY[0x1E4F14390];
    while ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x400) != 0)
    {
      uint64_t v7 = v3 + 1;
      *(void *)(this + 32) = v3 + 1;
      int v8 = (char)v3[1];
      unsigned int v4 = *++v3;
      if (v8 < 0)
      {
        *(_DWORD *)a3 = 10;
        *(void *)(a3 + 8) = a2;
        *(void *)(a3 + 16) = v7 - (unsigned __int8 *)a2;
        return this;
      }
    }
    if (v4 != 46)
    {
LABEL_25:
      *(_DWORD *)a3 = 10;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v3 - (unsigned __int8 *)a2;
    }
    else
    {
      int v9 = v3 + 4;
      do
      {
        uint64_t v10 = v9;
        __int16 v11 = (char *)(v9 - 3);
        *(void *)(this + 32) = v9 - 3;
        int v12 = (char)*(v9 - 3);
        uint64_t v13 = v12;
        if (v12 < 0) {
          break;
        }
        int v9 = v10 + 1;
      }
      while ((*(_DWORD *)(v6 + 4 * v13 + 60) & 0x400) != 0);
      if ((v13 | 0x20) == 0x65)
      {
        uint64_t v14 = *(v10 - 2);
        if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x400) != 0
          || (v14 == 43 || v14 == 45) && (*(_DWORD *)(v6 + 4 * *(v10 - 1) + 60) & 0x400) != 0)
        {
          __int16 v11 = (char *)(v10 - 1);
          *(void *)(this + 32) = v10 - 1;
          if (((char)*(v10 - 1) & 0x80000000) == 0)
          {
            uint64_t v15 = *(v10 - 1);
            do
            {
              if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) == 0) {
                break;
              }
              *(void *)(this + 32) = v10;
              int v16 = (char)*v10++;
              uint64_t v15 = v16;
            }
            while ((v16 & 0x80000000) == 0);
            __int16 v11 = (char *)(v10 - 1);
          }
        }
      }
      *(_DWORD *)a3 = 9;
      *(void *)(a3 + 8) = a2;
      *(void *)(a3 + 16) = v11 - a2;
    }
  }
  return this;
}

uint64_t mlir::detail::Parser::parseCallSiteLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v20);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)(v4 + 56) = v20;
  *(void *)(v4 + 72) = v21;
  *(void *)&long long v20 = "expected '(' in callsite location";
  __int16 v23 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v20)) {
    return 0;
  }
  uint64_t v19 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(a1, &v19)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v5 + 56) == 3 && *(void *)(v5 + 72) == 2 && **(_WORD **)(v5 + 64) == 29793)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v20);
    uint64_t v15 = *(void *)(a1 + 8);
    *(_OWORD *)(v15 + 56) = v20;
    *(void *)(v15 + 72) = v21;
    v17[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v17))
    {
      *(void *)&long long v20 = "expected ')' in callsite location";
      __int16 v23 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v20))
      {
        *a2 = mlir::CallSiteLoc::get(v19, v17[0]);
        return 1;
      }
    }
    return 0;
  }
  v17[0] = (uint64_t)"expected 'at' in callsite location";
  __int16 v18 = 259;
  mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v17, &v20);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if ((void)v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v29)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      int v8 = v28;
      int v9 = __p;
      if (v28 != __p)
      {
        do
          int v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        int v9 = __p;
      }
      unsigned int v28 = v7;
      operator delete(v9);
    }
    uint64_t v10 = v25;
    if (v25)
    {
      __int16 v11 = v26;
      int v12 = v25;
      if (v26 != v25)
      {
        do
        {
          uint64_t v14 = (void *)*--v11;
          uint64_t v13 = v14;
          void *v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        int v12 = v25;
      }
      long long v26 = v10;
      operator delete(v12);
    }
    if (v22 != &v24) {
      free(v22);
    }
  }
  return v6;
}

uint64_t mlir::detail::Parser::parseLocationInstance(mlir::UnknownLoc ****a1, uint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1];
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3)
  {
    __int16 v11 = v4[8];
    int v12 = v4[9];
    if (v12 == (mlir::UnknownLoc **)5)
    {
      if (!memcmp(v11, "fused", 5uLL))
      {
        return mlir::detail::Parser::parseFusedLocation((uint64_t)a1);
      }
    }
    else if (v12 == (mlir::UnknownLoc **)7)
    {
      if (!memcmp(v11, "unknown", 7uLL))
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v39);
        __int16 v32 = a1[1];
        *(_OWORD *)(v32 + 7) = v39;
        v32[9] = v40;
        *a2 = mlir::UnknownLoc::get(**a1[1], v33);
        return 1;
      }
    }
    else if (v12 == (mlir::UnknownLoc **)8 && *v11 == (mlir::UnknownLoc *)0x657469736C6C6163)
    {
      return mlir::detail::Parser::parseCallSiteLocation((uint64_t)a1, a2);
    }
    v36[0] = "expected location instance";
    __int16 v37 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v39);
    return v10;
  }
  if (v5 != 11)
  {
    if (v5 == 5)
    {
      uint64_t v6 = mlir::detail::Parser::parseExtendedAttr((mlir::detail::Parser *)a1, 0);
      if (!v6) {
        return 0;
      }
      uint64_t v7 = (uint64_t)v6;
      BOOL v8 = mlir::LocationAttr::classof((uint64_t)v6);
      if (v8) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = 0;
      }
      *a2 = v9;
      if (v8) {
        return 1;
      }
      v36[0] = "expected location attribute, but got";
      __int16 v37 = 259;
      mlir::detail::Parser::emitError((uint64_t)a1, (uint64_t)v36, &v39);
      if ((void)v39)
      {
        uint64_t v22 = v38;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v38, v7);
        __int16 v23 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v34 = v42 + 1;
          if (v41 <= v38 && (char *)v41 + 24 * v42 > v38)
          {
            int64_t v35 = v38 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            __int16 v23 = (char *)v41;
            uint64_t v22 = (char *)v41 + v35;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v34, 24);
            uint64_t v22 = v38;
            __int16 v23 = (char *)v41;
          }
        }
        uint64_t v24 = &v23[24 * v42];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v42;
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((void)v39) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      }
      if (!v49) {
        return v10;
      }
      long long v26 = (void **)__p;
      if (__p)
      {
        unint64_t v27 = v48;
        unsigned int v28 = __p;
        if (v48 != __p)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          unsigned int v28 = __p;
        }
        uint64_t v48 = v26;
        operator delete(v28);
      }
      unint64_t v17 = v45;
      if (!v45)
      {
LABEL_54:
        if (v41 != v44) {
          free(v41);
        }
        return v10;
      }
      char v29 = v46;
      uint64_t v19 = v45;
      if (v46 == v45)
      {
LABEL_53:
        int v46 = v17;
        operator delete(v19);
        goto LABEL_54;
      }
      do
      {
        __int16 v31 = (void *)*--v29;
        uint64_t v30 = v31;
        *char v29 = 0;
        if (v31) {
          operator delete[](v30);
        }
      }
      while (v29 != v17);
    }
    else
    {
      v36[0] = "expected location instance";
      __int16 v37 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)v36, &v39);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
      if ((void)v39) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
      }
      if (!v49) {
        return v10;
      }
      uint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v48;
        int v16 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          int v16 = __p;
        }
        uint64_t v48 = v14;
        operator delete(v16);
      }
      unint64_t v17 = v45;
      if (!v45) {
        goto LABEL_54;
      }
      __int16 v18 = v46;
      uint64_t v19 = v45;
      if (v46 == v45) {
        goto LABEL_53;
      }
      do
      {
        uint64_t v21 = (void *)*--v18;
        long long v20 = v21;
        void *v18 = 0;
        if (v21) {
          operator delete[](v20);
        }
      }
      while (v18 != v17);
    }
    uint64_t v19 = v45;
    goto LABEL_53;
  }

  return mlir::detail::Parser::parseNameOrFileLineColLocation((uint64_t)a1, a2);
}

uint64_t mlir::detail::Parser::parseFusedLocation(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)v9);
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v9;
  *(void *)(v2 + 72) = v10[0];
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v3 + 56) == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v9);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)v9;
    *(void *)(v4 + 72) = v10[0];
    uint64_t v5 = mlir::detail::Parser::parseAttribute(a1, 0);
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v5;
    v9[0] = "expected '>' after fused location metadata";
    __int16 v11 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)v9)) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v8[1] = v9;
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v8[0] = a1;
  if (mlir::detail::Parser::parseCommaSeparatedList(a1, 2, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>, (uint64_t)v8, (uint64_t)" in fused location", 18))mlir::FusedLoc::get((uint64_t **)v9[0], (mlir::MLIRContext *)LODWORD(v9[1]), v6, ***(mlir::UnknownLoc ****)(a1 + 8)); {
  if (v9[0] != v10)
  }
    free(v9[0]);
  return 0;
}

uint64_t mlir::detail::Parser::parseNameOrFileLineColLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(mlir::StringAttr ****)(a1 + 8);
  uint64_t v5 = **v4;
  mlir::Token::getStringValue((mlir::Token *)(v4 + 7), &v52);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)(v6 + 56) = v53;
  *(void *)(v6 + 72) = v54;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
    uint64_t v25 = *(void *)(a1 + 8);
    *(_OWORD *)(v25 + 56) = v53;
    *(void *)(v25 + 72) = v54;
    v50[0] = 0;
    if (mlir::detail::Parser::parseLocationInstance(a1, v50))
    {
      __int16 v56 = 260;
      *(void *)&long long v53 = &v52;
      uint64_t v26 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
      *a2 = mlir::NameLoc::get(v26, v50[0]);
      *(void *)&long long v53 = "expected ')' after child location of NameLoc";
      __int16 v56 = 259;
      if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v53))
      {
        uint64_t v27 = 1;
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v27;
        }
LABEL_71:
        operator delete(v52.__r_.__value_.__l.__data_);
        return v27;
      }
    }
    goto LABEL_22;
  }
  if (v8 != 15)
  {
    __int16 v56 = 260;
    *(void *)&long long v53 = &v52;
    uint64_t v28 = mlir::StringAttr::get(v5, (mlir::MLIRContext *)&v53);
    uint64_t v24 = mlir::NameLoc::get(v28);
    goto LABEL_20;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v53);
  uint64_t v9 = *(void *)(a1 + 8);
  *(_OWORD *)(v9 + 56) = v53;
  *(void *)(v9 + 72) = v54;
  uint64_t v10 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(v10 + 56);
  __int16 v11 = (mlir::Token *)(v10 + 56);
  if (v12 != 10)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      char v29 = (void **)__p;
      if (__p)
      {
        uint64_t v30 = v61;
        __int16 v31 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          __int16 v31 = __p;
        }
        unsigned int v61 = v29;
        operator delete(v31);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      char v33 = v59;
      unint64_t v34 = v58;
      if (v59 == v58) {
        goto LABEL_67;
      }
      do
      {
        __int16 v36 = (void *)*--v33;
        int64_t v35 = v36;
        *char v33 = 0;
        if (v36) {
          operator delete[](v35);
        }
      }
      while (v33 != v32);
      goto LABEL_66;
    }
    goto LABEL_70;
  }
  UnsignedIntegeruint64_t Value = mlir::Token::getUnsignedIntegerValue(v11);
  if ((UnsignedIntegerValue & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer line number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      __int16 v37 = (void **)__p;
      if (__p)
      {
        uint64_t v38 = v61;
        long long v39 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          long long v39 = __p;
        }
        unsigned int v61 = v37;
        operator delete(v39);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      unsigned int v40 = v59;
      unint64_t v34 = v58;
      if (v59 == v58) {
        goto LABEL_67;
      }
      do
      {
        unsigned int v42 = (void *)*--v40;
        unsigned int v41 = v42;
        *unsigned int v40 = 0;
        if (v42) {
          operator delete[](v41);
        }
      }
      while (v40 != v32);
      goto LABEL_66;
    }
LABEL_70:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v27;
    }
    goto LABEL_71;
  }
  unsigned int v14 = UnsignedIntegerValue;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v15 = *(void *)(a1 + 8);
  *(_OWORD *)(v15 + 56) = v53;
  *(void *)(v15 + 72) = v54;
  *(void *)&long long v53 = "expected ':' in FileLineColLoc";
  __int16 v56 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v53))
  {
LABEL_22:
    uint64_t v27 = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_71;
    }
    return v27;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  int v18 = *(_DWORD *)(v16 + 56);
  unint64_t v17 = (mlir::Token *)(v16 + 56);
  if (v18 != 10)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if ((void)v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v62)
    {
      unsigned int v43 = (void **)__p;
      if (__p)
      {
        uint64_t v44 = v61;
        uint64_t v45 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          uint64_t v45 = __p;
        }
        unsigned int v61 = v43;
        operator delete(v45);
      }
      __int16 v32 = v58;
      if (!v58) {
        goto LABEL_68;
      }
      int v46 = v59;
      unint64_t v34 = v58;
      if (v59 == v58)
      {
LABEL_67:
        uint64_t v59 = v32;
        operator delete(v34);
LABEL_68:
        if (v55 != &v57) {
          free(v55);
        }
        goto LABEL_70;
      }
      do
      {
        uint64_t v48 = (void *)*--v46;
        char v47 = v48;
        void *v46 = 0;
        if (v48) {
          operator delete[](v47);
        }
      }
      while (v46 != v32);
LABEL_66:
      unint64_t v34 = v58;
      goto LABEL_67;
    }
    goto LABEL_70;
  }
  unint64_t v19 = mlir::Token::getUnsignedIntegerValue(v17);
  if ((v19 & 0xFF00000000) == 0)
  {
    v50[0] = (uint64_t)"expected integer column number in FileLineColLoc";
    __int16 v51 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v50, &v53);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v27;
    }
    goto LABEL_71;
  }
  uint64_t v20 = v19;
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v53);
  uint64_t v21 = *(void *)(a1 + 8);
  *(_OWORD *)(v21 + 56) = v53;
  *(void *)(v21 + 72) = v54;
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v52;
  }
  else {
    uint64_t v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = mlir::FileLineColLoc::get(v5, (const char *)v22, size, v14, v20);
LABEL_20:
  *a2 = v24;
  uint64_t v27 = 1;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_71;
  }
  return v27;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseFusedLocation(mlir::LocationAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v7 = 0;
  if (!mlir::detail::Parser::parseLocationInstance(v2, &v7)) {
    return 0;
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = v7;
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(void *)(*(void *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  return 1;
}

uint64_t mlir::detail::Parser::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(a2)
  {
    case 1:
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_18;
    case 5:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 21) {
        return 1;
      }
LABEL_3:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '('";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) == 28) {
        goto LABEL_5;
      }
      goto LABEL_9;
    case 6:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 22) {
        return 1;
      }
LABEL_7:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '['";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 29) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 7:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 23) {
        return 1;
      }
LABEL_14:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '<'";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 23, (uint64_t)&v19)) {
        return 1;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) == 19)
      {
LABEL_5:
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v19);
        uint64_t v13 = *(void *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v19;
        *(void *)(v13 + 72) = v20;
        return 1;
      }
LABEL_9:
      if (!a3(a4)) {
        return 0;
      }
      while (1)
      {
        uint64_t v15 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v15 + 56) != 16) {
          break;
        }
        mlir::Lexer::lexToken((mlir::Lexer *)(v15 + 8), (uint64_t)&v19);
        uint64_t v16 = *(void *)(a1 + 8);
        *(_OWORD *)(v16 + 56) = v19;
        *(void *)(v16 + 72) = v20;
        if (!a3(a4)) {
          return 0;
        }
      }
      uint64_t result = 1;
      switch(a2)
      {
        case 1:
        case 5:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected ')'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 28;
          goto LABEL_28;
        case 2:
        case 6:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected ']'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 29;
          goto LABEL_28;
        case 3:
        case 7:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected '>'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 19;
          goto LABEL_28;
        case 4:
        case 8:
          __int16 v22 = 1283;
          *(void *)&long long v19 = "expected '}'";
          uint64_t v20 = a5;
          uint64_t v21 = a6;
          uint64_t v17 = a1;
          int v18 = 27;
LABEL_28:
          uint64_t result = mlir::detail::Parser::parseToken(v17, v18, (uint64_t)&v19);
          break;
        default:
          return result;
      }
      return result;
    case 8:
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) != 20) {
        return 1;
      }
LABEL_18:
      __int16 v22 = 1283;
      *(void *)&long long v19 = "expected '{'";
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      if (!mlir::detail::Parser::parseToken(a1, 20, (uint64_t)&v19)) {
        return 0;
      }
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 27) {
        goto LABEL_9;
      }
      goto LABEL_5;
    default:
      goto LABEL_9;
  }
}

uint64_t mlir::detail::Parser::parseToken(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == a2)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v16);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v16;
    *(void *)(v5 + 72) = v17;
    return 1;
  }
  else
  {
    mlir::detail::Parser::emitWrongTokenError(a1, a3, &v16);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
    if ((void)v16) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
    }
    if (v24)
    {
      uint64_t v7 = (void **)__p;
      if (__p)
      {
        int v8 = v23;
        uint64_t v9 = __p;
        if (v23 != __p)
        {
          do
            int v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        __int16 v23 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v20;
      if (v20)
      {
        __int16 v11 = v21;
        uint64_t v12 = v20;
        if (v21 != v20)
        {
          do
          {
            unsigned int v14 = (void *)*--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v20;
        }
        uint64_t v21 = v10;
        operator delete(v12);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
  }
  return v6;
}

BOOL mlir::detail::Parser::parseCommaSeparatedListUntil(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, char a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 56) == a2)
  {
    if (a5)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v26);
      uint64_t v7 = *(void *)(a1 + 8);
      *(_OWORD *)(v7 + 56) = v26;
      *(void *)(v7 + 72) = v27;
      return 1;
    }
    else
    {
      v24[0] = "expected list element";
      __int16 v25 = 259;
      mlir::detail::Parser::emitWrongTokenError(a1, (uint64_t)v24, &v26);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
      if ((void)v26) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
      }
      if (v35)
      {
        unsigned int v14 = (void **)__p;
        if (__p)
        {
          uint64_t v15 = v34;
          long long v16 = __p;
          if (v34 != __p)
          {
            do
              uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            long long v16 = __p;
          }
          unint64_t v34 = v14;
          operator delete(v16);
        }
        uint64_t v17 = v31;
        if (v31)
        {
          int v18 = v32;
          uint64_t v19 = v31;
          if (v32 != v31)
          {
            do
            {
              uint64_t v21 = (void *)*--v18;
              uint64_t v20 = v21;
              void *v18 = 0;
              if (v21) {
                operator delete[](v20);
              }
            }
            while (v18 != v17);
            uint64_t v19 = v31;
          }
          __int16 v32 = v17;
          operator delete(v19);
        }
        if (v28 != &v30) {
          free(v28);
        }
      }
    }
  }
  else if (a3(a4))
  {
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v12 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
      uint64_t v13 = *(void *)(a1 + 8);
      *(_OWORD *)(v13 + 56) = v26;
      *(void *)(v13 + 72) = v27;
      if (!a3(a4)) {
        return 0;
      }
    }
    __int16 v25 = 1283;
    v24[0] = "expected ',' or '";
    v24[2] = mlir::Token::getTokenSpelling(a2);
    v24[3] = v22;
    *(void *)&long long v26 = v24;
    uint64_t v27 = "'";
    __int16 v29 = 770;
    return mlir::detail::Parser::parseToken(a1, a2, (uint64_t)&v26) != 0;
  }
  else
  {
    return 0;
  }
  return v8;
}

void mlir::detail::Parser::emitWrongTokenError(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(a1 + 8) + 56));
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (const char *)(Loc - (*(_DWORD *)(v7 + 56) == 0));
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = (uint64_t)&v8[-v9];
  *(void *)&long long v24 = v9;
  *((void *)&v24 + 1) = &v8[-v9];
  while (1)
  {
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v24, " \t", 2, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < *((void *)&v24 + 1)) {
      uint64_t v12 = last_not_of + 1;
    }
    else {
      uint64_t v12 = *((void *)&v24 + 1);
    }
    unint64_t v13 = *((void *)&v24 + 1) - v10 + v12;
    if (*((void *)&v24 + 1) < v13) {
      unint64_t v13 = *((void *)&v24 + 1);
    }
    *((void *)&v24 + 1) = v13;
    if (!v13) {
      break;
    }
    int v14 = *(unsigned __int8 *)(v24 + v13 - 1);
    if (v14 != 10 && v14 != 13)
    {
      uint64_t v20 = (const char *)(v24 + v13);
      uint64_t v21 = *(void *)(a1 + 8) + 8;
      goto LABEL_26;
    }
    if (v13 >= v13 - 1) {
      unint64_t v16 = v13 - 1;
    }
    else {
      unint64_t v16 = v13;
    }
    *((void *)&v24 + 1) = v16;
    long long v23 = v24;
    unint64_t last_of = llvm::StringRef::find_last_of(&v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    if (last_of != -1)
    {
      if (*((void *)&v23 + 1) >= last_of) {
        unint64_t v18 = last_of;
      }
      else {
        unint64_t v18 = *((void *)&v23 + 1);
      }
      *(void *)&long long v23 = v23 + v18;
      *((void *)&v23 + 1) -= v18;
    }
    uint64_t v19 = llvm::StringRef::find((uint64_t *)&v23, "//", 2uLL, 0);
    uint64_t v10 = *((void *)&v24 + 1);
    if (v19 != -1)
    {
      if (*((void *)&v24 + 1) >= (unint64_t)(v19 - *((void *)&v23 + 1) + *((void *)&v24 + 1))) {
        uint64_t v10 = v19 - *((void *)&v23 + 1) + *((void *)&v24 + 1);
      }
      *((void *)&v24 + 1) = v10;
    }
  }
  uint64_t v21 = *(void *)(a1 + 8) + 8;
  uint64_t v20 = v8;
LABEL_26:
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v21, v20);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a3);
  }
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(a1 + 8) + 56));
  uint64_t v7 = (const char *)Loc;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v8 + 56)) {
    uint64_t v7 = (const char *)(Loc - 1);
  }
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v8 + 8, v7);
  mlir::emitError(EncodedSourceLocation, a2, (uint64_t)a3);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1)
  {
    mlir::InFlightDiagnostic::abandon(a3);
  }
}

void mlir::detail::Parser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, a3, (uint64_t)a4);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1)
  {
    mlir::InFlightDiagnostic::abandon(a4);
  }
}

uint64_t mlir::detail::Parser::parseOptionalInteger(mlir::detail::Parser *this, llvm::APInt *a2)
{
  int v4 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 1);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 > 53)
  {
    if (v6 == 74)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v23 = *((void *)this + 1);
      *(_OWORD *)(v23 + 56) = v33;
      *(void *)(v23 + 72) = v34;
      uint64_t v24 = *((unsigned int *)a2 + 2);
      if (v24 > 0x40)
      {
        int v4 = 1;
        **(void **)a2 = 1;
        bzero((void *)(*(void *)a2 + 8), (((unint64_t)(v24 + 63) >> 3) - 8) & 0xFFFFFFF8);
        goto LABEL_54;
      }
      *(void *)a2 = v24 != 0;
    }
    else
    {
      int v8 = 0;
      if (v6 != 54) {
        return v4 | (v8 << 8);
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v21 = *((void *)this + 1);
      *(_OWORD *)(v21 + 56) = v33;
      *(void *)(v21 + 72) = v34;
      uint64_t v22 = *((unsigned int *)a2 + 2);
      if (v22 > 0x40)
      {
        **(void **)a2 = 0;
        bzero((void *)(*(void *)a2 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
LABEL_47:
    int v4 = 1;
LABEL_54:
    int v8 = 1;
    return v4 | (v8 << 8);
  }
  BOOL v7 = v6 == 10 || v6 == 24;
  int v8 = 0;
  if (v7)
  {
    if (v6 == 24)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v33);
      uint64_t v9 = *((void *)this + 1);
      *(_OWORD *)(v9 + 56) = v33;
      *(void *)(v9 + 72) = v34;
      uint64_t v5 = *((void *)this + 1);
    }
    long long v31 = *(_OWORD *)(v5 + 56);
    unint64_t v32 = *(void *)(v5 + 72);
    *(void *)&long long v33 = "expected integer value";
    __int16 v36 = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 10, (uint64_t)&v33)) {
      goto LABEL_53;
    }
    v30[0] = *((void *)&v31 + 1);
    v30[1] = v32;
    unsigned int v10 = 10;
    if (v32 >= 2)
    {
      if (*(unsigned char *)(*((void *)&v31 + 1) + 1) == 120) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = 10;
      }
    }
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)v30, v10, a2))
    {
      uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v31);
      uint64_t v28 = "integer value too large";
      __int16 v29 = 259;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v28, (uint64_t)&v33);
      if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v33);
      }
      if ((void)v33) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      }
      if (v42)
      {
        unint64_t v13 = (void **)__p;
        if (__p)
        {
          int v14 = v41;
          uint64_t v15 = __p;
          if (v41 != __p)
          {
            do
              int v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            uint64_t v15 = __p;
          }
          unsigned int v41 = v13;
          operator delete(v15);
        }
        unint64_t v16 = v38;
        if (v38)
        {
          uint64_t v17 = v39;
          unint64_t v18 = v38;
          if (v39 != v38)
          {
            do
            {
              uint64_t v20 = (void *)*--v17;
              uint64_t v19 = v20;
              *uint64_t v17 = 0;
              if (v20) {
                operator delete[](v19);
              }
            }
            while (v17 != v16);
            unint64_t v18 = v38;
          }
          long long v39 = v16;
          operator delete(v18);
        }
        if (v35 != &v37) {
          free(v35);
        }
      }
LABEL_53:
      int v4 = 0;
      goto LABEL_54;
    }
    unsigned int v25 = *((_DWORD *)a2 + 2);
    long long v26 = (llvm::APInt *)(*(void *)a2 + 8 * ((v25 - 1) >> 6));
    if (v25 < 0x41) {
      long long v26 = a2;
    }
    if ((*(void *)v26 >> (v25 - 1)))
    {
      llvm::APInt::zext((const void **)a2, v25 + 1, (uint64_t)&v33);
      if (*((_DWORD *)a2 + 2) >= 0x41u && *(void *)a2) {
        operator delete[](*(void **)a2);
      }
      *(void *)a2 = v33;
      *((_DWORD *)a2 + 2) = DWORD2(v33);
    }
    if (v6 == 24) {
      llvm::APInt::negate(a2);
    }
    goto LABEL_47;
  }
  return v4 | (v8 << 8);
}

uint64_t **llvm::APInt::negate(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)this);
    this = v1;
  }
  else
  {
    if (v2) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    }
    else {
      unint64_t v3 = 0;
    }
    *(void *)this = v3 & ~*(void *)this;
  }
  return llvm::APInt::operator++((uint64_t **)this);
}

uint64_t mlir::detail::Parser::parseFloatFromIntegerLiteral(uint64_t a1, uint64_t a2, mlir::Token *this, int a4, llvm::APFloatBase *a5, unsigned int a6)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = (const char *)mlir::Token::getLoc(this);
  unint64_t v13 = *((void *)this + 2);
  if (v13 < 2 || (int v14 = (unsigned __int8 *)*((void *)this + 1), v14[1] != 120))
  {
    __int16 v71 = "unexpected decimal integer literal for a floating point value";
    __int16 v73 = 259;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v77);
    }
    uint64_t v26 = mlir::Diagnostic::attachNote((uint64_t *)&v78, 0, 0);
    uint64_t v27 = v26 + 16;
    unint64_t v28 = *(void *)(v26 + 16);
    LODWORD(v74) = 3;
    uint64_t v75 = "add a trailing dot to make the literal a float";
    uint64_t v76 = 46;
    uint64_t v29 = *(unsigned int *)(v26 + 24);
    uint64_t v30 = &v74;
    if (v29 >= *(_DWORD *)(v26 + 28))
    {
      unint64_t v68 = v29 + 1;
      BOOL v69 = v28 + 24 * v29 > (unint64_t)&v74;
      if (v28 <= (unint64_t)&v74 && v69)
      {
        uint64_t v70 = (char *)&v74 - v28;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        unint64_t v28 = *(void *)(v26 + 16);
        uint64_t v30 = (void **)&v70[v28];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v26 + 32), v68, 24);
        unint64_t v28 = *(void *)(v26 + 16);
        uint64_t v30 = &v74;
      }
    }
    uint64_t v31 = v28 + 24 * *(unsigned int *)(v26 + 24);
    long long v32 = *(_OWORD *)v30;
    *(void *)(v31 + 16) = v30[2];
    *(_OWORD *)uint64_t v31 = v32;
    ++*(_DWORD *)(v26 + 24);
    uint64_t v16 = mlir::Diagnostic::operator mlir::LogicalResult();
    if (v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v86)
    {
      long long v33 = (void **)__p;
      if (__p)
      {
        uint64_t v34 = v85;
        char v35 = __p;
        if (v85 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          char v35 = __p;
        }
        char v85 = v33;
        operator delete(v35);
      }
      uint64_t v20 = v82;
      if (!v82) {
        goto LABEL_61;
      }
      __int16 v36 = v83;
      uint64_t v22 = v82;
      if (v83 == v82) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v38 = (void *)*--v36;
        uint64_t v37 = v38;
        *__int16 v36 = 0;
        if (v38) {
          operator delete[](v37);
        }
      }
      while (v36 != v20);
      goto LABEL_59;
    }
    return v16;
  }
  if (a4)
  {
    __int16 v71 = "hexadecimal float literal should not have a leading minus";
    __int16 v73 = 259;
    uint64_t v15 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc);
    mlir::emitError(v15, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v77);
    }
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v86)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        unint64_t v18 = v85;
        uint64_t v19 = __p;
        if (v85 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        char v85 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v82;
      if (!v82) {
        goto LABEL_61;
      }
      uint64_t v21 = v83;
      uint64_t v22 = v82;
      if (v83 == v82)
      {
LABEL_60:
        unint64_t v83 = v20;
        operator delete(v22);
LABEL_61:
        if (v80 != v81) {
          free(v80);
        }
        return v16;
      }
      do
      {
        uint64_t v24 = (void *)*--v21;
        uint64_t v23 = v24;
        *uint64_t v21 = 0;
        if (v24) {
          operator delete[](v23);
        }
      }
      while (v21 != v20);
LABEL_59:
      uint64_t v22 = v82;
      goto LABEL_60;
    }
    return v16;
  }
  UInt64Integeruint64_t Value = (llvm::APFloatBase *)mlir::Token::getUInt64IntegerValue(v14, v13);
  if (v40)
  {
    uint64_t v41 = (uint64_t)UInt64IntegerValue;
    char v42 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(UInt64IntegerValue);
    if (v42 == a5)
    {
      unsigned int v72 = a6;
      if (a6 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v71, v41, 0);
      }
      else
      {
        unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
        if (!a6) {
          unint64_t v53 = 0;
        }
        __int16 v71 = (void *)(v41 & v53);
      }
      int v65 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v65 == a5) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v71);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, (const llvm::APInt **)&v71);
      }
      unint64_t v66 = (llvm::APFloatBase *)(a2 + 8);
      if (*(unsigned char *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v66, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v65 == v78) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v66, &v78);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v66, (uint64_t)&v78);
        }
        *(unsigned char *)(a2 + 32) = 1;
      }
      if (v65 == v78) {
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      }
      if (v72 >= 0x41 && v71) {
        operator delete[](v71);
      }
      return 1;
    }
    LODWORD(v75) = a6;
    if (a6 > 0x40)
    {
      uint64_t v44 = &v74;
      llvm::APInt::initSlowCase((llvm::APInt *)&v74, v41, 0);
      int v54 = (int)v75;
      if (v75 >= 0x41)
      {
        char v42 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74);
        if ((v54 - v42) > 0x40) {
          goto LABEL_74;
        }
        uint64_t v44 = v74;
      }
    }
    else
    {
      unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
      if (!a6) {
        unint64_t v43 = 0;
      }
      long long v74 = (void *)(v41 & v43);
      uint64_t v44 = &v74;
    }
    if (*v44 == v41)
    {
      long long v55 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v42);
      if (v55 == a5) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v78, (uint64_t)a5, (uint64_t)&v74);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v78, a5, (const llvm::APInt **)&v74);
      }
      int8x16_t v67 = (llvm::APFloatBase *)(a2 + 8);
      if (*(unsigned char *)(a2 + 32))
      {
        llvm::APFloat::Storage::operator=(v67, (llvm::APFloatBase *)&v78);
      }
      else
      {
        if (v55 == v78) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v67, &v78);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v67, (uint64_t)&v78);
        }
        *(unsigned char *)(a2 + 32) = 1;
      }
      if (v55 == v78) {
        std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v79);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v78);
      }
      uint64_t v16 = 1;
LABEL_122:
      if (v75 >= 0x41 && v74) {
        operator delete[](v74);
      }
      return v16;
    }
LABEL_74:
    __int16 v71 = "hexadecimal float constant out of range for type";
    __int16 v73 = 259;
    uint64_t v56 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc);
    mlir::emitError(v56, (uint64_t)&v71, (uint64_t)&v77);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v77);
    }
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v86)
    {
      uint64_t v57 = (void **)__p;
      if (__p)
      {
        uint64_t v58 = v85;
        uint64_t v59 = __p;
        if (v85 != __p)
        {
          do
            uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          uint64_t v59 = __p;
        }
        char v85 = v57;
        operator delete(v59);
      }
      uint64_t v60 = v82;
      if (v82)
      {
        unsigned int v61 = v83;
        char v62 = v82;
        if (v83 != v82)
        {
          do
          {
            unsigned int v64 = (void *)*--v61;
            uint64_t v63 = v64;
            *unsigned int v61 = 0;
            if (v64) {
              operator delete[](v63);
            }
          }
          while (v61 != v60);
          char v62 = v82;
        }
        unint64_t v83 = v60;
        operator delete(v62);
      }
      if (v80 != v81) {
        free(v80);
      }
    }
    goto LABEL_122;
  }
  __int16 v71 = "hexadecimal float constant out of range for type";
  __int16 v73 = 259;
  uint64_t v45 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc);
  mlir::emitError(v45, (uint64_t)&v71, (uint64_t)&v77);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v77);
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
  if (v77) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
  }
  if (v86)
  {
    int v46 = (void **)__p;
    if (__p)
    {
      char v47 = v85;
      uint64_t v48 = __p;
      if (v85 != __p)
      {
        do
          char v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        uint64_t v48 = __p;
      }
      char v85 = v46;
      operator delete(v48);
    }
    uint64_t v20 = v82;
    if (!v82) {
      goto LABEL_61;
    }
    char v49 = v83;
    uint64_t v22 = v82;
    if (v83 == v82) {
      goto LABEL_60;
    }
    do
    {
      __int16 v51 = (void *)*--v49;
      uint64_t v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v20);
    goto LABEL_59;
  }
  return v16;
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, const mlir::OpAsmDialectInterface *a2@<X1>, llvm::StringRef *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = a2;
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  uint64_t v8 = *((void *)this + 1);
  int v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 3 || v9 == 12)
  {
LABEL_6:
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 64);
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v80);
    uint64_t v11 = *((void *)this + 1);
    *(_OWORD *)(v11 + 56) = v80;
    *(void *)(v11 + 72) = v81;
    uint64_t v12 = *(void *)(*((void *)this + 1) + 80);
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v13 = v12 + 48;
    uint64_t v14 = v15;
    int v16 = *(_DWORD *)(v13 + 16);
    if (v16)
    {
      unsigned int v17 = v16 - 1;
      uint64_t v18 = ((v75 >> 4) ^ (v75 >> 9)) & (v16 - 1);
      uint64_t v19 = (uint64_t *)(v14 + 32 * v18);
      uint64_t v20 = *v19;
      if (v75 == (const mlir::OpAsmDialectInterface *)*v19) {
        goto LABEL_21;
      }
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != -4096)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -8192;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        int v24 = v18 + v22++;
        uint64_t v18 = v24 & v17;
        uint64_t v19 = (uint64_t *)(v14 + 32 * v18);
        uint64_t v20 = *v19;
        if (v75 == (const mlir::OpAsmDialectInterface *)*v19) {
          goto LABEL_21;
        }
      }
      if (v21) {
        uint64_t v26 = v21;
      }
      else {
        uint64_t v26 = v19;
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(v13, v26, (uint64_t *)&v75);
LABEL_21:
    uint64_t v27 = llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>((uint64_t)(v19 + 1), *(int8x16_t **)a3, *((const unsigned __int8 **)a3 + 1));
    uint64_t v28 = *v27;
    LODWORD(v29) = *(char *)(*v27 + 31);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v30 = v28 + 8;
      if (!*(void *)(v28 + 16)) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v28 + 8;
      if (!*(unsigned char *)(*v27 + 31))
      {
LABEL_25:
        (*(void (**)(long long *__return_ptr))(*(void *)v75 + 32))(&v72);
        if (v74)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v75 + 40))(&v80);
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)v30);
          }
          long long v31 = v80;
          *(void *)(v30 + 16) = v81;
          *(_OWORD *)uint64_t v30 = v31;
          *(_OWORD *)(v28 + 32) = v72;
          *(void *)(v28 + 48) = v73;
          LOBYTE(v29) = *(unsigned char *)(v28 + 31);
          goto LABEL_29;
        }
        v71[16] = 257;
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v71, (uint64_t)&v80);
        if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
          mlir::InFlightDiagnostic::abandon(&v80);
        }
        if (!(void)v80) {
          goto LABEL_61;
        }
        LODWORD(v76) = 3;
        uint64_t v77 = "unknown 'resource' key '";
        uint64_t v78 = 24;
        char v42 = &v76;
        unint64_t v43 = (char *)v82;
        if (v83 >= v84)
        {
          unint64_t v65 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            int64_t v68 = (char *)&v76 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            unint64_t v43 = (char *)v82;
            char v42 = (int8x16_t **)((char *)v82 + v68);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            char v42 = &v76;
            unint64_t v43 = (char *)v82;
          }
        }
        uint64_t v44 = &v43[24 * v83];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)uint64_t v44 = v45;
        ++v83;
        if (!(void)v80) {
          goto LABEL_61;
        }
        __int16 v79 = 261;
        int v46 = (const char *)*((void *)a3 + 1);
        uint64_t v76 = *(int8x16_t **)a3;
        uint64_t v77 = v46;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if (!(void)v80) {
          goto LABEL_61;
        }
        LODWORD(v76) = 3;
        uint64_t v77 = "' for dialect '";
        uint64_t v78 = 15;
        char v47 = &v76;
        uint64_t v48 = (char *)v82;
        if (v83 >= v84)
        {
          unint64_t v66 = v83 + 1;
          if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
          {
            int64_t v69 = (char *)&v76 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            uint64_t v48 = (char *)v82;
            char v47 = (int8x16_t **)((char *)v82 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
            char v47 = &v76;
            uint64_t v48 = (char *)v82;
          }
        }
        char v49 = &v48[24 * v83];
        long long v50 = *(_OWORD *)v47;
        *((void *)v49 + 2) = v47[2];
        *(_OWORD *)char v49 = v50;
        ++v83;
        if (!(void)v80) {
          goto LABEL_61;
        }
        uint64_t v51 = *((void *)v75 + 1);
        unint64_t v53 = *(const void ***)(v51 + 8);
        std::string v52 = *(const char **)(v51 + 16);
        __int16 v79 = 261;
        uint64_t v76 = (int8x16_t *)v53;
        uint64_t v77 = v52;
        mlir::Diagnostic::operator<<((uint64_t)&v80 + 8, (const void ***)&v76);
        if ((void)v80)
        {
          LODWORD(v76) = 3;
          uint64_t v77 = "'";
          uint64_t v78 = 1;
          int v54 = &v76;
          long long v55 = (char *)v82;
          if (v83 >= v84)
          {
            unint64_t v67 = v83 + 1;
            if (v82 <= &v76 && (char *)v82 + 24 * v83 > (char *)&v76)
            {
              int64_t v70 = (char *)&v76 - (unsigned char *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              long long v55 = (char *)v82;
              int v54 = (int8x16_t **)((char *)v82 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
              int v54 = &v76;
              long long v55 = (char *)v82;
            }
          }
          uint64_t v56 = &v55[24 * v83];
          long long v57 = *(_OWORD *)v54;
          *((void *)v56 + 2) = v54[2];
          *(_OWORD *)uint64_t v56 = v57;
          ++v83;
          uint64_t v58 = v80;
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 24) = 0;
          if (v58) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
          }
        }
        else
        {
LABEL_61:
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 24) = 0;
        }
        if (v90)
        {
          uint64_t v59 = (void **)__p;
          if (__p)
          {
            uint64_t v60 = v89;
            unsigned int v61 = __p;
            if (v89 != __p)
            {
              do
                uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              unsigned int v61 = __p;
            }
            uint64_t v89 = v59;
            operator delete(v61);
          }
          __int16 v36 = v86;
          if (!v86) {
            goto LABEL_76;
          }
          char v62 = v87;
          uint64_t v38 = v86;
          if (v87 == v86)
          {
LABEL_75:
            uint64_t v87 = v36;
            operator delete(v38);
LABEL_76:
            if (v82 != v85) {
              free(v82);
            }
            return;
          }
          do
          {
            unsigned int v64 = (void *)*--v62;
            uint64_t v63 = v64;
            *char v62 = 0;
            if (v64) {
              operator delete[](v63);
            }
          }
          while (v62 != v36);
LABEL_74:
          uint64_t v38 = v86;
          goto LABEL_75;
        }
        return;
      }
    }
LABEL_29:
    uint64_t v32 = *(void *)(v28 + 8);
    if ((v29 & 0x80u) == 0) {
      uint64_t v32 = v30;
    }
    uint64_t v29 = v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(v28 + 16);
    }
    *(void *)a3 = v32;
    *((void *)a3 + 1) = v29;
    *(_OWORD *)a4 = *(_OWORD *)(v28 + 32);
    *(void *)(a4 + 16) = *(void *)(v28 + 48);
    *(unsigned char *)(a4 + 24) = 1;
    return;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v8 + 56)))
  {
    uint64_t v8 = *((void *)this + 1);
    goto LABEL_6;
  }
  uint64_t v76 = (int8x16_t *)"expected identifier key for 'resource' entry";
  __int16 v79 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v76, &v80);
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 24) = 0;
  if ((void)v80) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  }
  if (v90)
  {
    long long v33 = (void **)__p;
    if (__p)
    {
      uint64_t v34 = v89;
      char v35 = __p;
      if (v89 != __p)
      {
        do
          uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        char v35 = __p;
      }
      uint64_t v89 = v33;
      operator delete(v35);
    }
    __int16 v36 = v86;
    if (!v86) {
      goto LABEL_76;
    }
    uint64_t v37 = v87;
    uint64_t v38 = v86;
    if (v87 == v86) {
      goto LABEL_75;
    }
    do
    {
      char v40 = (void *)*--v37;
      long long v39 = v40;
      *uint64_t v37 = 0;
      if (v40) {
        operator delete[](v39);
      }
    }
    while (v37 != v36);
    goto LABEL_74;
  }
}

void mlir::detail::Parser::parseResourceHandle(mlir::detail::Parser *this@<X0>, mlir::Dialect *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)
    && (int v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2)) != 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    mlir::detail::Parser::parseResourceHandle(this, v6, (llvm::StringRef *)&v36, (uint64_t)a3);
  }
  else
  {
    __int16 v31 = 257;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)v30, &v36);
    if (!v36) {
      goto LABEL_11;
    }
    LODWORD(v32) = 3;
    long long v33 = "dialect '";
    uint64_t v34 = 9;
    BOOL v7 = &v32;
    uint64_t v8 = (char *)v38;
    if (v39 >= v40)
    {
      unint64_t v26 = v39 + 1;
      if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
      {
        int64_t v28 = (char *)&v32 - (unsigned char *)v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        uint64_t v8 = (char *)v38;
        BOOL v7 = (const void ***)((char *)v38 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v26, 24);
        BOOL v7 = &v32;
        uint64_t v8 = (char *)v38;
      }
    }
    int v9 = &v8[24 * v39];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)int v9 = v10;
    ++v39;
    if (!v36) {
      goto LABEL_11;
    }
    uint64_t v11 = (const void **)*((void *)a2 + 1);
    uint64_t v12 = (const char *)*((void *)a2 + 2);
    __int16 v35 = 261;
    uint64_t v32 = v11;
    long long v33 = v12;
    mlir::Diagnostic::operator<<((uint64_t)&v37, &v32);
    if (v36)
    {
      LODWORD(v32) = 3;
      long long v33 = "' does not expect resource handles";
      uint64_t v34 = 34;
      uint64_t v13 = &v32;
      uint64_t v14 = (char *)v38;
      if (v39 >= v40)
      {
        unint64_t v27 = v39 + 1;
        if (v38 <= &v32 && (char *)v38 + 24 * v39 > (char *)&v32)
        {
          int64_t v29 = (char *)&v32 - (unsigned char *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          uint64_t v14 = (char *)v38;
          uint64_t v13 = (const void ***)((char *)v38 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
          uint64_t v13 = &v32;
          uint64_t v14 = (char *)v38;
        }
      }
      uint64_t v15 = &v14[24 * v39];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = v13[2];
      *(_OWORD *)uint64_t v15 = v16;
      ++v39;
      uint64_t v17 = v36;
      *a3 = 0;
      a3[24] = 0;
      if (v17) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v46)
    {
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v45;
        uint64_t v20 = __p;
        if (v45 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        long long v45 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v42;
      if (v42)
      {
        int v22 = v43;
        BOOL v23 = v42;
        if (v43 != v42)
        {
          do
          {
            unsigned int v25 = (void *)*--v22;
            int v24 = v25;
            void *v22 = 0;
            if (v25) {
              operator delete[](v24);
            }
          }
          while (v22 != v21);
          BOOL v23 = v42;
        }
        unint64_t v43 = v21;
        operator delete(v23);
      }
      if (v38 != v41) {
        free(v38);
      }
    }
  }
}

uint64_t mlir::detail::Parser::codeCompleteDialectOrElidedOpName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(v3 + 24);
  for (i = (char *)(a2 - 1); (unint64_t)i > v4; --i)
  {
    int v6 = *i;
    if (v6 == 10) {
      break;
    }
    BOOL v7 = memchr(" \t\r", v6, 3uLL);
    if (v7) {
      BOOL v8 = v7 - " \t\r" == -1;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  (*(void (**)(void, const char *, void))(**(void **)(v3 + 136) + 16))(*(void *)(v3 + 136), "", 0);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(v10 + 144) + 16 * *(unsigned int *)(v10 + 152);
  uint64_t v12 = *(void *)(v11 - 8);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(void **)(v11 - 16);
  uint64_t v14 = memchr(v13, 46, *(void *)(v11 - 8));
  if (v14 && v14 - (unsigned char *)v13 != -1) {
    return 0;
  }
  (*(void (**)(void, void *, uint64_t))(**(void **)(v10 + 136) + 24))(*(void *)(v10 + 136), v13, v12);
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteExpectedTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteOptionalTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteAttribute(mlir::detail::Parser *this)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteType(mlir::detail::Parser *this)
{
  return 0;
}

uint64_t mlir::detail::Parser::codeCompleteDialectSymbol(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 64))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 80))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 136));
  return 0;
}

void mlir::parseAsmSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, mlir::AsmParserState *a4, mlir::AsmParserState *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v9 = *a3;
  uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)**a1 + 16))(**a1);
  uint64_t v12 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = 0x1000000000;
  v21[3] = 0;
  v21[4] = 0;
  v21[5] = 0x1000000000;
  v21[6] = 0;
  v21[7] = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  int64_t v28 = a3;
  uint64_t v13 = mlir::Lexer::Lexer(&v29, a1, *a3, (uint64_t)a5);
  mlir::Lexer::lexToken((mlir::Lexer *)v13, (uint64_t)v30);
  void v30[4] = 0;
  v30[5] = 0;
  void v30[3] = v21;
  int v31 = 0;
  uint64_t v32 = v34;
  uint64_t v33 = 0;
  v34[0] = a4;
  v34[1] = a5;
  v34[2] = (mlir::AsmParserState *)v35;
  v35[0] = "builtin";
  v35[1] = 7;
  v34[3] = (mlir::AsmParserState *)0x300000001;
  LOBYTE(v26) = 0;
  char v27 = 0;
  uint64_t v14 = mlir::ModuleOp::create(v12, &v26);
  uint64_t v15 = v14;
  v36[0] = *v28;
  v36[1] = &v28;
  v36[2] = &v37;
  v36[3] = 0x200000000;
  uint64_t v38 = &v40;
  uint64_t v39 = 0x200000000;
  uint64_t v41 = &v43;
  uint64_t v42 = 0x200000000;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  int v46 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  unint64_t v16 = *((unsigned int *)v14 + 11);
  if ((v16 & 0x7FFFFF) != 0) {
    uint64_t v17 = (mlir::Region *)((((unint64_t)v14 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
                         + 32 * *((unsigned int *)v14 + 10));
  else {
    uint64_t v17 = 0;
  }
  uint64_t Context = mlir::Region::getContext(v17);
  uint64_t v51 = 0;
  uint64_t v53 = 0;
  uint64_t v52 = 0;
  if (*(mlir::Region **)v17 != v17)
  {
    uint64_t v18 = *((void *)v17 + 1);
    if (v18) {
      uint64_t v19 = v18 - 8;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void *)(v19 + 40);
    uint64_t v52 = v19;
    uint64_t v53 = v20;
  }
  int v54 = v15;
}

void sub_180349B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  mlir::detail::SymbolState::~SymbolState((llvm **)va);
}

uint64_t sub_180349B70()
{
  return v0;
}

void std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](llvm::APFloatBase *a1)
{
  uint64_t v1 = *(void *)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = llvm::APFloatBase::PPCDoubleDouble(a1);
      uint64_t v4 = 32 * v2;
      do
      {
        while (v3 == *(void **)(v1 + v4 - 24))
        {
          std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100](v1 + v4 - 16, 0);
          v4 -= 32;
          if (!v4) {
            goto LABEL_7;
          }
        }
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(v1 + v4 - 24));
        v4 -= 32;
      }
      while (v4);
    }
LABEL_7:
    operator delete[]((void *)(v1 - 16));
  }
}

uint64_t anonymous namespace'::OperationParser::parseOperation(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v348 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  uint64_t v3 = v317;
  v315 = v317;
  uint64_t v316 = 0x100000000;
  v292 = 0;
  uint64_t v4 = *((void *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 6)
  {
    p_uint64_t EncodedSourceLocation = this;
    std::string::size_type v338 = (std::string::size_type)&v315;
    uint64_t v339 = (uint64_t)&v292;
      goto LABEL_310;
    while (1)
    {
      uint64_t v5 = *((void *)this + 1);
      if (*(_DWORD *)(v5 + 56) != 16) {
        break;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v318);
      *(std::string *)(*((void *)this + 1) + 56) = v318;
        goto LABEL_310;
    }
    v318.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected '=' after SSA name";
    LOWORD(v320) = 259;
    if (!mlir::detail::Parser::parseToken((uint64_t)this, 18, (uint64_t)&v318)) {
      goto LABEL_310;
    }
    uint64_t v4 = *((void *)this + 1);
  }
  long long v290 = *(_OWORD *)(v4 + 56);
  uint64_t v291 = *(void *)(v4 + 72);
  if (v290 == 3)
  {
LABEL_11:
    int v6 = v315;
    uint64_t v7 = v316;
    BOOL v8 = (const char *)mlir::Token::getLoc((mlir::Token *)(v4 + 56));
    uint64_t v9 = *((void *)this + 1);
    unint64_t v11 = *(const void **)(v9 + 64);
    std::string::size_type v10 = *(void *)(v9 + 72);
    v306[0] = v12;
    v306[1] = v13;
    if (!(_BYTE)v13)
    {
      uint64_t v23 = 0;
      goto LABEL_302;
    }
    v318.__r_.__value_.__r.__words[0] = *(void *)(v12 + 8);
    __s2 = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v318);
    std::string::size_type v15 = v14;
    unint64_t v336 = 0;
    unint64_t v16 = *(void **)(v306[0] + 16);
    BOOL v17 = v16 == &mlir::detail::TypeIDResolver<void,void>::id;
    BOOL v18 = v16 != &mlir::detail::TypeIDResolver<void,void>::id;
    unint64_t v19 = v306[0] & 0xFFFFFFFFFFFFFF00;
    uint64_t v20 = LOBYTE(v306[0]);
    if (v17) {
      uint64_t v20 = 0;
    }
    v331[0] = v20 | v19;
    v331[1] = v18;
    if (!v17)
    {
      unint64_t v284 = v6;
      (*(void (**)(std::string *__return_ptr))(*(void *)(v20 | v19) + 40))(&v318);
      char v21 = v336;
      if (v336 >= 8)
      {
        if ((v336 & 4) != 0)
        {
          if ((v336 & 2) != 0) {
            int v22 = v334;
          }
          else {
            int v22 = (llvm **)v334[0];
          }
          (*(void (**)(llvm **))((v336 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
        }
        if ((v21 & 2) == 0) {
          llvm::deallocate_buffer(v334[0], v334[1]);
        }
      }
      unint64_t v336 = (unint64_t)__dst;
      if ((unint64_t)__dst >= 8)
      {
        if ((__dst & 2) != 0 && (__dst & 4) != 0)
        {
          (*(void (**)(llvm **, std::string *))(((unint64_t)__dst & 0xFFFFFFFFFFFFFFF8) + 8))(v334, &v318);
        }
        else
        {
          *(_OWORD *)v334 = *(_OWORD *)&v318.__r_.__value_.__l.__data_;
          unint64_t v335 = v318.__r_.__value_.__r.__words[2];
        }
      }
      char IsIsolatedFrom = mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v331);
      uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v331[0] + 32);
      uint64_t v67 = v66;
      if (v66)
      {
        int64_t v68 = Loc;
        uint64_t v69 = (*(uint64_t (**)(void))(v66 + 24))();
        if (v70)
        {
          __int16 v71 = (const char *)(*(uint64_t (**)(uint64_t))(v67 + 24))(v69);
          uint64_t v67 = v72;
          goto LABEL_121;
        }
        uint64_t v67 = 0;
      }
      else
      {
        int64_t v68 = Loc;
      }
LABEL_120:
      __int16 v71 = "";
LABEL_121:
      uint64_t v87 = *((void *)this + 1);
      uint64_t v88 = *(unsigned int *)(v87 + 152);
      if (v88 >= *(_DWORD *)(v87 + 156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v87 + 144, (void *)(v87 + 160), v88 + 1, 16);
        LODWORD(v88) = *(_DWORD *)(v87 + 152);
      }
      uint64_t v89 = (const char **)(*(void *)(v87 + 144) + 16 * v88);
      *uint64_t v89 = v71;
      v89[1] = (const char *)v67;
      ++*(_DWORD *)(v87 + 152);
      v318.__r_.__value_.__r.__words[0] = *(void *)(v306[0] + 8);
      uint64_t AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v318);
      llvm::PrettyStackTraceFormat::PrettyStackTraceFormat((llvm::PrettyStackTraceFormat *)v331, "MLIR Parser: custom op parser '%s'", AttrData);
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
      v91.n128_f64[0] = mlir::OperationState::OperationState(&v318, EncodedSourceLocation, v306[0]);
      __int16 v92 = *(mlir::AsmParserState **)(*((void *)this + 1) + 128);
      if (v92) {
        mlir::AsmParserState::startOperationDefinition(v92, (const mlir::OperationName *)&v318.__r_.__value_.__r.__words[1]);
      }
      v294 = (char *)v8;
      uint64_t v295 = (uint64_t)this;
      char v296 = 0;
      v293 = (char *)&unk_1EC9987D0;
      v297 = v284;
      uint64_t v298 = v7;
      v299 = llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>;
      v300 = v334;
      char v301 = IsIsolatedFrom;
      v302 = __s2;
      std::string::size_type v303 = v15;
      char v304 = this;
      if ((v336 & 2) != 0) {
        uint64_t v93 = v334;
      }
      else {
        uint64_t v93 = (llvm **)v334[0];
      }
      uint64_t Loc = v68;
      if (!(*(unsigned __int8 (**)(llvm **, char **, std::string *, __n128))(v336 & 0xFFFFFFFFFFFFFFF8))(v93, &v293, &v318, v91))
      {
        uint64_t v23 = 0;
        uint64_t v3 = v317;
        goto LABEL_163;
      }
      mlir::NamedAttrList::findDuplicate(&v322, v310);
      uint64_t v3 = v317;
      if (v310[16])
      {
        uint64_t v94 = (*((uint64_t (**)(char **))v293 + 2))(&v293);
        v308[0] = "attribute '";
        __int16 v309 = 259;
        (*((void (**)(void **__return_ptr, char **, uint64_t, void *))v293 + 3))(&p_EncodedSourceLocation, &v293, v94, v308);
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v310);
        __int16 v95 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        if (p_EncodedSourceLocation)
        {
          __int16 v314 = 261;
          v311 = v95;
          v312 = v96;
          mlir::Diagnostic::operator<<((uint64_t)&v338, &v311);
          if (p_EncodedSourceLocation)
          {
            LODWORD(v311) = 3;
            v312 = "' occurs more than once in the attribute list";
            uint64_t v313 = 45;
            v97 = &v311;
            v98 = (char *)v340;
            if (v341 >= HIDWORD(v341))
            {
              unint64_t v252 = v341 + 1;
              if (v340 <= &v311 && (char *)v340 + 24 * v341 > (char *)&v311)
              {
                int64_t v271 = (char *)&v311 - (unsigned char *)v340;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v252, 24);
                v98 = (char *)v340;
                v97 = (const void ***)((char *)v340 + v271);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v252, 24);
                v97 = &v311;
                v98 = (char *)v340;
              }
            }
            long long v99 = &v98[24 * v341];
            long long v100 = *(_OWORD *)v97;
            *((void *)v99 + 2) = v97[2];
            *(_OWORD *)long long v99 = v100;
            LODWORD(v341) = v341 + 1;
          }
        }
        char v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&p_EncodedSourceLocation);
        if (p_EncodedSourceLocation) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
        }
        if (v347)
        {
          v102 = (void **)v345;
          if ((void)v345)
          {
            v103 = (void **)*((void *)&v345 + 1);
            int v104 = (void *)v345;
            if (*((void *)&v345 + 1) != (void)v345)
            {
              do
                v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
              while (v103 != v102);
              int v104 = (void *)v345;
            }
            *((void *)&v345 + 1) = v102;
            operator delete(v104);
          }
          int v105 = (void *)v343;
          if ((void)v343)
          {
            uint64_t v106 = (void *)*((void *)&v343 + 1);
            v107 = (void *)v343;
            if (*((void *)&v343 + 1) != (void)v343)
            {
              do
              {
                char v109 = (void *)*--v106;
                v108 = v109;
                *uint64_t v106 = 0;
                if (v109) {
                  operator delete[](v108);
                }
              }
              while (v106 != v105);
              v107 = (void *)v343;
            }
            *((void *)&v343 + 1) = v105;
            operator delete(v107);
          }
          if (v340 != v342) {
            free(v340);
          }
        }
        uint64_t v23 = 0;
        if (!v101 || v296)
        {
LABEL_163:
          mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v293);
          p_uint64_t EncodedSourceLocation = &v339;
          std::string::size_type v338 = 0x400000000;
          unsigned int v111 = v329;
          if (v329 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_EncodedSourceLocation, &v339, v329, 8);
            unsigned int v111 = v329;
          }
          if (v111)
          {
            v112 = v328;
            double v113 = &v328[v111];
            do
            {
              uint64_t v114 = *v112;
              if (*v112)
              {
                for (uint64_t i = *(void *)(v114 + 8); i != v114; uint64_t i = *(void *)(i + 8))
                {
                  if (i) {
                    v116 = (void *)(i - 8);
                  }
                  else {
                    v116 = 0;
                  }
                  mlir::Block::dropAllDefinedValueUses(v116);
                }
              }
              ++v112;
            }
            while (v112 != v113);
          }
          if (p_EncodedSourceLocation != &v339) {
            free(p_EncodedSourceLocation);
          }
          mlir::OperationState::~OperationState((mlir::OperationState *)&v318);
          v331[0] = &unk_1EC9A39D8;
          if (v332 != &v333) {
            free(v332);
          }
          llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v331);
          --*(_DWORD *)(*((void *)this + 1) + 152);
          unint64_t v117 = v336;
          if (v336 < 8)
          {
LABEL_302:
            if (v23)
            {
              if (!v316)
              {
                long long v190 = *(uint64_t **)(*((void *)this + 1) + 128);
                if (v190)
                {
                  uint64_t LocRange = mlir::Token::getLocRange((mlir::Token *)&v290);
                  uint64_t v193 = v192;
                  uint64_t v194 = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
                  mlir::AsmParserState::finalizeOperationDefinition(v190, v23, LocRange, v193, v194, 0, 0);
                }
                goto LABEL_316;
              }
              uint64_t v186 = (char *)*(unsigned int *)(v23 + 36);
              if (v186)
              {
                if (v292 == v186)
                {
                  if (!*(void *)(*((void *)this + 1) + 128))
                  {
                    uint64_t v229 = v315;
                    uint64_t v230 = (char *)v315 + 32 * v316;
                    goto LABEL_374;
                  }
                  LODWORD(p_EncodedSourceLocation) = 0;
                  v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v318.__r_.__value_.__r.__words[2];
                  v318.__r_.__value_.__l.__size_ = 0x300000000;
                  if (v316 <= 3)
                  {
                    v187 = (char *)v315;
                    uint64_t v188 = (char *)v315 + 32 * v316;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v318, &v318.__r_.__value_.__r.__words[2], v316, 16);
                    if (!v316) {
                      goto LABEL_370;
                    }
                    v187 = (char *)v315;
                    uint64_t v188 = (char *)v315 + 32 * v316;
                  }
                  int v231 = 0;
                  char v232 = (uint64_t *)(v187 + 24);
                  do
                  {
                    int v233 = v318.__r_.__value_.__r.__words[1];
                    if (LODWORD(v318.__r_.__value_.__r.__words[1]) >= HIDWORD(v318.__r_.__value_.__r.__words[1]))
                    {
                      llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>((uint64_t)&v318, (unsigned int *)&p_EncodedSourceLocation, v232);
                    }
                    else
                    {
                      std::string::size_type v234 = v318.__r_.__value_.__r.__words[0] + 16 * LODWORD(v318.__r_.__value_.__r.__words[1]);
                      *(_DWORD *)std::string::size_type v234 = v231;
                      *(void *)(v234 + 8) = *v232;
                      LODWORD(v318.__r_.__value_.__r.__words[1]) = v233 + 1;
                    }
                    int v231 = p_EncodedSourceLocation + *((_DWORD *)v232 - 2);
                    LODWORD(p_EncodedSourceLocation) = v231;
                    v235 = (char *)(v232 + 1);
                    v232 += 4;
                  }
                  while (v235 != v188);
LABEL_370:
                  v236 = *(uint64_t **)(*((void *)this + 1) + 128);
                  uint64_t v237 = mlir::Token::getLocRange((mlir::Token *)&v290);
                  uint64_t v239 = v238;
                  uint64_t v240 = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
                  mlir::AsmParserState::finalizeOperationDefinition(v236, v23, v237, v239, v240, (int *)v318.__r_.__value_.__l.__data_, LODWORD(v318.__r_.__value_.__r.__words[1]));
                  if ((std::string::size_type *)v318.__r_.__value_.__l.__data_ != &v318.__r_.__value_.__r.__words[2]) {
                    free(v318.__r_.__value_.__l.__data_);
                  }
                  if (v316)
                  {
                    uint64_t v229 = v315;
                    uint64_t v230 = (char *)v315 + 32 * v316;
LABEL_374:
                    __s2a = v230;
                    uint64_t v241 = 0;
                    while (1)
                    {
                      v242 = v3;
                      uint64_t v243 = *((unsigned int *)v229 + 4);
                      if (v243) {
                        break;
                      }
                      uint64_t v245 = v241;
LABEL_384:
                      v229 += 4;
                      uint64_t v49 = 1;
                      uint64_t v241 = v245;
                      uint64_t v3 = v242;
                      if (v229 == __s2a) {
                        goto LABEL_311;
                      }
                    }
                    uint64_t v244 = 0;
                    while (1)
                    {
                      uint64_t v287 = v229[3];
                      long long v288 = *(_OWORD *)v229;
                      int v289 = v244;
                      uint64_t v245 = (v241 + 1);
                      v246 = (uint64_t *)(v241 >= 6
                                       ? v23 - 96 - 24 * (v241 - 5)
                                       : v23 - 16 * v245);
                      ++v244;
                      LODWORD(v241) = v245;
                      if (v243 == v244) {
                        goto LABEL_384;
                      }
                    }
                    uint64_t v49 = 0;
                    uint64_t v3 = v242;
                    goto LABEL_311;
                  }
LABEL_316:
                  uint64_t v49 = 1;
                  goto LABEL_311;
                }
                p_uint64_t EncodedSourceLocation = "operation defines ";
                LOWORD(v341) = 259;
                uint64_t v202 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
                mlir::emitError(v202, (uint64_t)&p_EncodedSourceLocation, (uint64_t)&v318);
                if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
                  mlir::InFlightDiagnostic::abandon(&v318);
                }
                if (v318.__r_.__value_.__r.__words[0])
                {
                  uint64_t v203 = (char *)*(unsigned int *)(v23 + 36);
                  LODWORD(v293) = 5;
                  v294 = v203;
                  long long v204 = &v293;
                  char v205 = (char *)__dst;
                  if (v320 >= HIDWORD(v320))
                  {
                    unint64_t v247 = v320 + 1;
                    if (__dst <= &v293 && (char *)__dst + 24 * v320 > (char *)&v293)
                    {
                      int64_t v268 = (char *)&v293 - (unsigned char *)__dst;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v247, 24);
                      char v205 = (char *)__dst;
                      long long v204 = (char **)((char *)__dst + v268);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v247, 24);
                      long long v204 = &v293;
                      char v205 = (char *)__dst;
                    }
                  }
                  v206 = &v205[24 * v320];
                  long long v207 = *(_OWORD *)v204;
                  *((void *)v206 + 2) = v204[2];
                  *(_OWORD *)v206 = v207;
                  uint64_t v208 = (v320 + 1);
                  LODWORD(v320) = v320 + 1;
                  if (v318.__r_.__value_.__r.__words[0])
                  {
                    LODWORD(v293) = 3;
                    v294 = " results but was provided ";
                    uint64_t v295 = 26;
                    v209 = &v293;
                    v210 = (char *)__dst;
                    if (v208 >= HIDWORD(v320))
                    {
                      unint64_t v253 = v208 + 1;
                      BOOL v254 = (char *)__dst + 24 * v208 > (char *)&v293;
                      if (__dst <= &v293 && v254)
                      {
                        int64_t v272 = (char *)&v293 - (unsigned char *)__dst;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v253, 24);
                        v210 = (char *)__dst;
                        v209 = (char **)((char *)__dst + v272);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v253, 24);
                        v209 = &v293;
                        v210 = (char *)__dst;
                      }
                    }
                    v211 = &v210[24 * v320];
                    long long v212 = *(_OWORD *)v209;
                    *((void *)v211 + 2) = v209[2];
                    *(_OWORD *)v211 = v212;
                    uint64_t v213 = (v320 + 1);
                    LODWORD(v320) = v320 + 1;
                    if (v318.__r_.__value_.__r.__words[0])
                    {
                      LODWORD(v293) = 5;
                      v294 = v292;
                      v214 = &v293;
                      v215 = (char *)__dst;
                      if (v213 >= HIDWORD(v320))
                      {
                        unint64_t v257 = v213 + 1;
                        BOOL v258 = (char *)__dst + 24 * v213 > (char *)&v293;
                        if (__dst <= &v293 && v258)
                        {
                          int64_t v275 = (char *)&v293 - (unsigned char *)__dst;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v257, 24);
                          v215 = (char *)__dst;
                          v214 = (char **)((char *)__dst + v275);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v257, 24);
                          v214 = &v293;
                          v215 = (char *)__dst;
                        }
                      }
                      v216 = &v215[24 * v320];
                      long long v217 = *(_OWORD *)v214;
                      *((void *)v216 + 2) = v214[2];
                      *(_OWORD *)v216 = v217;
                      uint64_t v218 = (v320 + 1);
                      LODWORD(v320) = v320 + 1;
                      if (v318.__r_.__value_.__r.__words[0])
                      {
                        LODWORD(v293) = 3;
                        v294 = " to bind";
                        uint64_t v295 = 8;
                        v219 = &v293;
                        v220 = (char *)__dst;
                        if (v218 >= HIDWORD(v320))
                        {
                          unint64_t v262 = v218 + 1;
                          BOOL v263 = (char *)__dst + 24 * v218 > (char *)&v293;
                          if (__dst <= &v293 && v263)
                          {
                            int64_t v279 = (char *)&v293 - (unsigned char *)__dst;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v262, 24);
                            v220 = (char *)__dst;
                            v219 = (char **)((char *)__dst + v279);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v262, 24);
                            v219 = &v293;
                            v220 = (char *)__dst;
                          }
                        }
                        v221 = &v220[24 * v320];
                        long long v222 = *(_OWORD *)v219;
                        *((void *)v221 + 2) = v219[2];
                        *(_OWORD *)v221 = v222;
                        LODWORD(v320) = v320 + 1;
                      }
                    }
                  }
                }
                uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
                if (v318.__r_.__value_.__r.__words[0]) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
                }
                if (!v327) {
                  goto LABEL_311;
                }
                uint64_t v223 = (void **)__p[0];
                if (__p[0])
                {
                  v224 = (void **)__p[1];
                  uint64_t v225 = __p[0];
                  if (__p[1] != __p[0])
                  {
                    do
                      v224 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v224 - 1);
                    while (v224 != v223);
                    uint64_t v225 = __p[0];
                  }
                  __p[1] = v223;
                  operator delete(v225);
                }
                uint64_t v76 = (void *)v323;
                if ((void)v323)
                {
                  v226 = (void *)*((void *)&v323 + 1);
                  uint64_t v78 = (void *)v323;
                  if (*((void *)&v323 + 1) == (void)v323) {
                    goto LABEL_359;
                  }
                  do
                  {
                    v228 = (void *)*--v226;
                    uint64_t v227 = v228;
                    void *v226 = 0;
                    if (v228) {
                      operator delete[](v227);
                    }
                  }
                  while (v226 != v76);
                  goto LABEL_358;
                }
LABEL_360:
                if (__dst != v321) {
                  free(__dst);
                }
                goto LABEL_311;
              }
              p_uint64_t EncodedSourceLocation = "cannot name an operation with no results";
              LOWORD(v341) = 259;
              uint64_t v195 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
              mlir::emitError(v195, (uint64_t)&p_EncodedSourceLocation, (uint64_t)&v318);
              if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
                mlir::InFlightDiagnostic::abandon(&v318);
              }
              uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
              if (v318.__r_.__value_.__r.__words[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
              }
              if (!v327) {
                goto LABEL_311;
              }
              v196 = (void **)__p[0];
              if (__p[0])
              {
                v197 = (void **)__p[1];
                v198 = __p[0];
                if (__p[1] != __p[0])
                {
                  do
                    v197 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v197 - 1);
                  while (v197 != v196);
                  v198 = __p[0];
                }
                __p[1] = v196;
                operator delete(v198);
              }
              uint64_t v76 = (void *)v323;
              if (!(void)v323) {
                goto LABEL_360;
              }
              v199 = (void *)*((void *)&v323 + 1);
              uint64_t v78 = (void *)v323;
              if (*((void *)&v323 + 1) == (void)v323) {
                goto LABEL_359;
              }
              do
              {
                v201 = (void *)*--v199;
                uint64_t v200 = v201;
                void *v199 = 0;
                if (v201) {
                  operator delete[](v200);
                }
              }
              while (v199 != v76);
LABEL_358:
              uint64_t v78 = (void *)v323;
LABEL_359:
              *((void *)&v323 + 1) = v76;
              operator delete(v78);
              goto LABEL_360;
            }
LABEL_310:
            uint64_t v49 = 0;
            goto LABEL_311;
          }
LABEL_295:
          if ((v117 & 4) != 0)
          {
            if ((v117 & 2) != 0) {
              v185 = v334;
            }
            else {
              v185 = (llvm **)v334[0];
            }
            (*(void (**)(llvm **))((v117 & 0xFFFFFFFFFFFFFFF8) + 16))(v185);
          }
          if ((v117 & 2) == 0) {
            llvm::deallocate_buffer(v334[0], v334[1]);
          }
          goto LABEL_302;
        }
      }
      else if (v296)
      {
        goto LABEL_162;
      }
      uint64_t v110 = (uint64_t)v330;
      v311 = v330;
      uint64_t v330 = 0;
      uint64_t v23 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v318);
      v308[0] = v23;
      {
        if (v110)
        {
          p_uint64_t EncodedSourceLocation = &EncodedSourceLocation;
          std::string::size_type v338 = (std::string::size_type)&v311;
          uint64_t v339 = (uint64_t)v308;
          else {
            uint64_t v23 = 0;
          }
        }
        goto LABEL_163;
      }
LABEL_162:
      uint64_t v23 = 0;
      goto LABEL_163;
    }
    v318.__r_.__value_.__r.__words[0] = *(void *)(v306[0] + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v318);
    if (Values)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)Values + 64))(&v318);
      if (v318.__r_.__value_.__s.__data_[16])
      {
        unint64_t v284 = v6;
        unint64_t v26 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
            + 2;
        long long __dst = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>,void>::Callbacks
              + 2;
        char v27 = v336;
        if (v336 >= 8)
        {
          if ((v336 & 4) != 0)
          {
            if ((v336 & 2) != 0) {
              int64_t v28 = v334;
            }
            else {
              int64_t v28 = (llvm **)v334[0];
            }
            (*(void (**)(llvm **))((v336 & 0xFFFFFFFFFFFFFFF8) + 16))(v28);
          }
          if ((v27 & 2) == 0) {
            llvm::deallocate_buffer(v334[0], v334[1]);
          }
          unint64_t v26 = (unint64_t)__dst;
        }
        unint64_t v336 = v26;
        if (v26 >= 8)
        {
          if ((v26 & 2) != 0 && (v26 & 4) != 0)
          {
            (*(void (**)(uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 8))((uint64_t (**)(uint64_t, uint64_t))v334, (uint64_t)&v318, v25);
          }
          else
          {
            *(_OWORD *)v334 = *(_OWORD *)&v318.__r_.__value_.__l.__data_;
            unint64_t v335 = v318.__r_.__value_.__r.__words[2];
          }
        }
        int64_t v68 = Loc;
        uint64_t v67 = 0;
        char IsIsolatedFrom = 0;
        goto LABEL_120;
      }
      LOWORD(v297) = 257;
      uint64_t v50 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
      mlir::emitError(v50, (uint64_t)&v293, (uint64_t)&p_EncodedSourceLocation);
      if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
      }
      uint64_t v51 = p_EncodedSourceLocation;
      if (p_EncodedSourceLocation)
      {
        LODWORD(v318.__r_.__value_.__l.__data_) = 3;
        v318.__r_.__value_.__l.__size_ = (std::string::size_type)"custom op '";
        v318.__r_.__value_.__r.__words[2] = 11;
        uint64_t v52 = &v318;
        uint64_t v53 = (char *)v340;
        if (v341 >= HIDWORD(v341))
        {
          unint64_t v260 = v341 + 1;
          if (v340 <= &v318 && (char *)v340 + 24 * v341 > (char *)&v318)
          {
            int64_t v277 = (char *)&v318 - (unsigned char *)v340;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v260, 24);
            uint64_t v53 = (char *)v340;
            uint64_t v52 = (std::string *)((char *)v340 + v277);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v260, 24);
            uint64_t v52 = &v318;
            uint64_t v53 = (char *)v340;
          }
        }
        int v54 = &v53[24 * v341];
        long long v55 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        *((void *)v54 + 2) = *((void *)&v52->__r_.__value_.__l + 2);
        *(_OWORD *)int v54 = v55;
        LODWORD(v341) = v341 + 1;
        uint64_t v51 = p_EncodedSourceLocation;
        if (p_EncodedSourceLocation)
        {
          LOWORD(v320) = 261;
          v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v318.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v338, (const void ***)&v318);
          uint64_t v51 = p_EncodedSourceLocation;
          if (p_EncodedSourceLocation)
          {
            LODWORD(v318.__r_.__value_.__l.__data_) = 3;
            v318.__r_.__value_.__l.__size_ = (std::string::size_type)"' is unknown";
            v318.__r_.__value_.__r.__words[2] = 12;
            uint64_t v56 = &v318;
            long long v57 = (char *)v340;
            if (v341 >= HIDWORD(v341))
            {
              unint64_t v266 = v341 + 1;
              if (v340 <= &v318 && (char *)v340 + 24 * v341 > (char *)&v318)
              {
                int64_t v282 = (char *)&v318 - (unsigned char *)v340;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v266, 24);
                long long v57 = (char *)v340;
                uint64_t v56 = (std::string *)((char *)v340 + v282);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v266, 24);
                uint64_t v56 = &v318;
                long long v57 = (char *)v340;
              }
            }
            uint64_t v58 = &v57[24 * v341];
            long long v59 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *((void *)v58 + 2) = *((void *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v58 = v59;
            LODWORD(v341) = v341 + 1;
            uint64_t v51 = p_EncodedSourceLocation;
          }
        }
      }
      v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      v318.__r_.__value_.__s.__data_[8] = 0;
      char v327 = 0;
      if (!v347)
      {
LABEL_249:
        mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
        if (p_EncodedSourceLocation) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
        }
        if (v347)
        {
          v163 = (void **)v345;
          if ((void)v345)
          {
            uint64_t v164 = (void **)*((void *)&v345 + 1);
            uint64_t v165 = (void *)v345;
            if (*((void *)&v345 + 1) != (void)v345)
            {
              do
                uint64_t v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
              while (v164 != v163);
              uint64_t v165 = (void *)v345;
            }
            *((void *)&v345 + 1) = v163;
            operator delete(v165);
          }
          uint64_t v166 = (void *)v343;
          if ((void)v343)
          {
            uint64_t v167 = (void *)*((void *)&v343 + 1);
            uint64_t v168 = (void *)v343;
            if (*((void *)&v343 + 1) != (void)v343)
            {
              do
              {
                uint64_t v170 = (void *)*--v167;
                v169 = v170;
                *uint64_t v167 = 0;
                if (v170) {
                  operator delete[](v169);
                }
              }
              while (v167 != v166);
              uint64_t v168 = (void *)v343;
            }
            *((void *)&v343 + 1) = v166;
            operator delete(v168);
          }
          if (v340 != v342) {
            free(v340);
          }
        }
        if (v10 != v15 || v10 && memcmp(v11, __s2, v10))
        {
          if (!v318.__r_.__value_.__r.__words[0]) {
            goto LABEL_278;
          }
          LODWORD(p_EncodedSourceLocation) = 3;
          std::string::size_type v338 = (std::string::size_type)" (tried '";
          uint64_t v339 = 9;
          p_p_uint64_t EncodedSourceLocation = &p_EncodedSourceLocation;
          long long v172 = (char *)__dst;
          if (v320 >= HIDWORD(v320))
          {
            unint64_t v261 = v320 + 1;
            if (__dst <= &p_EncodedSourceLocation
              && (char *)__dst + 24 * v320 > (char *)&p_EncodedSourceLocation)
            {
              int64_t v278 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v261, 24);
              long long v172 = (char *)__dst;
              p_p_uint64_t EncodedSourceLocation = (void **)((char *)__dst + v278);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v261, 24);
              p_p_uint64_t EncodedSourceLocation = &p_EncodedSourceLocation;
              long long v172 = (char *)__dst;
            }
          }
          v173 = &v172[24 * v320];
          long long v174 = *(_OWORD *)p_p_EncodedSourceLocation;
          *((void *)v173 + 2) = p_p_EncodedSourceLocation[2];
          *(_OWORD *)v173 = v174;
          LODWORD(v320) = v320 + 1;
          if (!v318.__r_.__value_.__r.__words[0]) {
            goto LABEL_278;
          }
          LOWORD(v341) = 261;
          p_uint64_t EncodedSourceLocation = __s2;
          std::string::size_type v338 = v15;
          mlir::Diagnostic::operator<<((uint64_t)&v318.__r_.__value_.__l.__size_, (const void ***)&p_EncodedSourceLocation);
          if (!v318.__r_.__value_.__r.__words[0]) {
            goto LABEL_278;
          }
          LODWORD(p_EncodedSourceLocation) = 3;
          std::string::size_type v338 = (std::string::size_type)"' as well)";
          uint64_t v339 = 10;
          uint64_t v175 = &p_EncodedSourceLocation;
          long long v176 = (char *)__dst;
          if (v320 >= HIDWORD(v320))
          {
            unint64_t v267 = v320 + 1;
            if (__dst <= &p_EncodedSourceLocation
              && (char *)__dst + 24 * v320 > (char *)&p_EncodedSourceLocation)
            {
              int64_t v283 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v267, 24);
              long long v176 = (char *)__dst;
              uint64_t v175 = (void **)((char *)__dst + v283);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v267, 24);
              uint64_t v175 = &p_EncodedSourceLocation;
              long long v176 = (char *)__dst;
            }
          }
          v177 = &v176[24 * v320];
          long long v178 = *(_OWORD *)v175;
          *((void *)v177 + 2) = v175[2];
          *(_OWORD *)v177 = v178;
          LODWORD(v320) = v320 + 1;
        }
        if (v318.__r_.__value_.__r.__words[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
        }
LABEL_278:
        if (!v327) {
          goto LABEL_294;
        }
        v179 = (void **)__p[0];
        if (__p[0])
        {
          v180 = (void **)__p[1];
          v181 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v180 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v180 - 1);
            while (v180 != v179);
            v181 = __p[0];
          }
          __p[1] = v179;
          operator delete(v181);
        }
        v158 = (void *)v323;
        if (!(void)v323) {
          goto LABEL_292;
        }
        v182 = (void *)*((void *)&v323 + 1);
        v160 = (void *)v323;
        if (*((void *)&v323 + 1) == (void)v323) {
          goto LABEL_291;
        }
        do
        {
          v184 = (void *)*--v182;
          v183 = v184;
          void *v182 = 0;
          if (v184) {
            operator delete[](v183);
          }
        }
        while (v182 != v158);
        goto LABEL_290;
      }
      uint64_t v60 = Loc;
      v318.__r_.__value_.__l.__size_ = v338;
      int v61 = v341;
      LODWORD(v318.__r_.__value_.__r.__words[2]) = v339;
      char v62 = v321;
      long long __dst = v321;
      uint64_t v320 = 0x400000000;
      if (!v341)
      {
        int v64 = 1;
        goto LABEL_245;
      }
      uint64_t v63 = v342;
      if (v340 != v342)
      {
        long long __dst = v340;
        uint64_t v320 = v341;
        v340 = v342;
        HIDWORD(v341) = 0;
        int v64 = 1;
LABEL_244:
        LODWORD(v341) = 0;
LABEL_245:
        uint64_t Loc = v60;
        long long v323 = v343;
        uint64_t v324 = v344;
        long long v343 = 0uLL;
        *(_OWORD *)std::string __p = v345;
        uint64_t v326 = v346;
        uint64_t v344 = 0;
        long long v345 = 0uLL;
        uint64_t v346 = 0;
        char v327 = 1;
        if (v64)
        {
          if (v340 != v342) {
            free(v340);
          }
          unsigned __int8 v347 = 0;
        }
        goto LABEL_249;
      }
      if (v341 < 5)
      {
        uint64_t v118 = v341;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v341, 24);
        uint64_t v118 = v341;
        if (!v341)
        {
LABEL_243:
          LODWORD(v320) = v61;
          int v64 = v347;
          goto LABEL_244;
        }
        uint64_t v63 = v340;
        char v62 = __dst;
      }
      memcpy(v62, v63, 24 * v118);
      goto LABEL_243;
    }
    LOWORD(v297) = 257;
    uint64_t v33 = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, v8);
    mlir::emitError(v33, (uint64_t)&v293, (uint64_t)&p_EncodedSourceLocation);
    if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
    }
    if (p_EncodedSourceLocation)
    {
      LODWORD(v318.__r_.__value_.__l.__data_) = 3;
      v318.__r_.__value_.__r.__words[2] = 9;
      uint64_t v34 = &v318;
      __int16 v35 = (char *)v340;
      if (v341 >= HIDWORD(v341))
      {
        unint64_t v255 = v341 + 1;
        if (v340 <= &v318 && (char *)v340 + 24 * v341 > (char *)&v318)
        {
          int64_t v273 = (char *)&v318 - (unsigned char *)v340;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v255, 24);
          __int16 v35 = (char *)v340;
          uint64_t v34 = (std::string *)((char *)v340 + v273);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v255, 24);
          uint64_t v34 = &v318;
          __int16 v35 = (char *)v340;
        }
      }
      uint64_t v36 = &v35[24 * v341];
      long long v37 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *((void *)v36 + 2) = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v36 = v37;
      LODWORD(v341) = v341 + 1;
    }
    uint64_t DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)v306);
    uint64_t v40 = p_EncodedSourceLocation;
    if (p_EncodedSourceLocation)
    {
      LOWORD(v320) = 261;
      v318.__r_.__value_.__r.__words[0] = DialectNamespace;
      v318.__r_.__value_.__l.__size_ = v39;
      mlir::Diagnostic::operator<<((uint64_t)&v338, (const void ***)&v318);
      uint64_t v40 = p_EncodedSourceLocation;
      if (p_EncodedSourceLocation)
      {
        LODWORD(v318.__r_.__value_.__l.__data_) = 3;
        v318.__r_.__value_.__l.__size_ = (std::string::size_type)"' not found for custom op '";
        v318.__r_.__value_.__r.__words[2] = 27;
        uint64_t v41 = &v318;
        uint64_t v42 = (char *)v340;
        if (v341 >= HIDWORD(v341))
        {
          unint64_t v259 = v341 + 1;
          if (v340 <= &v318 && (char *)v340 + 24 * v341 > (char *)&v318)
          {
            int64_t v276 = (char *)&v318 - (unsigned char *)v340;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v259, 24);
            uint64_t v42 = (char *)v340;
            uint64_t v41 = (std::string *)((char *)v340 + v276);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v259, 24);
            uint64_t v41 = &v318;
            uint64_t v42 = (char *)v340;
          }
        }
        uint64_t v43 = &v42[24 * v341];
        long long v44 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        *((void *)v43 + 2) = *((void *)&v41->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v43 = v44;
        LODWORD(v341) = v341 + 1;
        uint64_t v40 = p_EncodedSourceLocation;
        if (p_EncodedSourceLocation)
        {
          LOWORD(v320) = 261;
          v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v318.__r_.__value_.__l.__size_ = v10;
          mlir::Diagnostic::operator<<((uint64_t)&v338, (const void ***)&v318);
          uint64_t v40 = p_EncodedSourceLocation;
          if (p_EncodedSourceLocation)
          {
            LODWORD(v318.__r_.__value_.__l.__data_) = 3;
            v318.__r_.__value_.__l.__size_ = (std::string::size_type)"' ";
            v318.__r_.__value_.__r.__words[2] = 2;
            uint64_t v45 = &v318;
            int v46 = (char *)v340;
            if (v341 >= HIDWORD(v341))
            {
              unint64_t v265 = v341 + 1;
              if (v340 <= &v318 && (char *)v340 + 24 * v341 > (char *)&v318)
              {
                int64_t v281 = (char *)&v318 - (unsigned char *)v340;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v265, 24);
                int v46 = (char *)v340;
                uint64_t v45 = (std::string *)((char *)v340 + v281);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, v342, v265, 24);
                uint64_t v45 = &v318;
                int v46 = (char *)v340;
              }
            }
            uint64_t v47 = &v46[24 * v341];
            long long v48 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            *((void *)v47 + 2) = *((void *)&v45->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v47 = v48;
            LODWORD(v341) = v341 + 1;
            uint64_t v40 = p_EncodedSourceLocation;
          }
        }
      }
    }
    v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v318.__r_.__value_.__s.__data_[8] = 0;
    char v327 = 0;
    if (!v347)
    {
LABEL_192:
      mlir::InFlightDiagnostic::abandon(&p_EncodedSourceLocation);
      if (p_EncodedSourceLocation) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_EncodedSourceLocation);
      }
      if (v347)
      {
        v119 = (void **)v345;
        if ((void)v345)
        {
          v120 = (void **)*((void *)&v345 + 1);
          v121 = (void *)v345;
          if (*((void *)&v345 + 1) != (void)v345)
          {
            do
              v120 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v120 - 1);
            while (v120 != v119);
            v121 = (void *)v345;
          }
          *((void *)&v345 + 1) = v119;
          operator delete(v121);
        }
        v122 = (void *)v343;
        if ((void)v343)
        {
          v123 = (void *)*((void *)&v343 + 1);
          v124 = (void *)v343;
          if (*((void *)&v343 + 1) != (void)v343)
          {
            do
            {
              v126 = (void *)*--v123;
              v125 = v126;
              void *v123 = 0;
              if (v126) {
                operator delete[](v125);
              }
            }
            while (v123 != v122);
            v124 = (void *)v343;
          }
          *((void *)&v343 + 1) = v122;
          operator delete(v124);
        }
        if (v340 != v342) {
          free(v340);
        }
      }
      if ((v10 != v15 || v10 && memcmp(v11, __s2, v10)) && v318.__r_.__value_.__r.__words[0])
      {
        LODWORD(p_EncodedSourceLocation) = 3;
        std::string::size_type v338 = (std::string::size_type)" (tried '";
        uint64_t v339 = 9;
        uint64_t v127 = &p_EncodedSourceLocation;
        uint64_t v128 = (char *)__dst;
        if (v320 >= HIDWORD(v320))
        {
          unint64_t v256 = v320 + 1;
          if (__dst <= &p_EncodedSourceLocation
            && (char *)__dst + 24 * v320 > (char *)&p_EncodedSourceLocation)
          {
            int64_t v274 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v256, 24);
            uint64_t v128 = (char *)__dst;
            uint64_t v127 = (void **)((char *)__dst + v274);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v256, 24);
            uint64_t v127 = &p_EncodedSourceLocation;
            uint64_t v128 = (char *)__dst;
          }
        }
        v129 = &v128[24 * v320];
        long long v130 = *(_OWORD *)v127;
        *((void *)v129 + 2) = v127[2];
        *(_OWORD *)v129 = v130;
        LODWORD(v320) = v320 + 1;
        if (v318.__r_.__value_.__r.__words[0])
        {
          LOWORD(v341) = 261;
          p_uint64_t EncodedSourceLocation = __s2;
          std::string::size_type v338 = v15;
          mlir::Diagnostic::operator<<((uint64_t)&v318.__r_.__value_.__l.__size_, (const void ***)&p_EncodedSourceLocation);
          if (v318.__r_.__value_.__r.__words[0])
          {
            LODWORD(p_EncodedSourceLocation) = 3;
            std::string::size_type v338 = (std::string::size_type)"' as well)";
            uint64_t v339 = 10;
            uint64_t v131 = &p_EncodedSourceLocation;
            long long v132 = (char *)__dst;
            if (v320 >= HIDWORD(v320))
            {
              unint64_t v264 = v320 + 1;
              if (__dst <= &p_EncodedSourceLocation
                && (char *)__dst + 24 * v320 > (char *)&p_EncodedSourceLocation)
              {
                int64_t v280 = (char *)&p_EncodedSourceLocation - (unsigned char *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v264, 24);
                long long v132 = (char *)__dst;
                uint64_t v131 = (void **)((char *)__dst + v280);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v264, 24);
                uint64_t v131 = &p_EncodedSourceLocation;
                long long v132 = (char *)__dst;
              }
            }
            v133 = &v132[24 * v320];
            long long v134 = *(_OWORD *)v131;
            *((void *)v133 + 2) = v131[2];
            *(_OWORD *)v133 = v134;
            LODWORD(v320) = v320 + 1;
          }
        }
      }
      uint64_t v135 = mlir::Diagnostic::attachNote((uint64_t *)&v318.__r_.__value_.__l.__size_, 0, 0);
      uint64_t v136 = v135;
      uint64_t v138 = v135 + 16;
      unint64_t v137 = *(void *)(v135 + 16);
      LODWORD(p_EncodedSourceLocation) = 3;
      std::string::size_type v338 = (std::string::size_type)"Registered dialects: ";
      uint64_t v339 = 21;
      uint64_t v139 = *(unsigned int *)(v135 + 24);
      uint64_t v140 = &p_EncodedSourceLocation;
      if (v139 >= *(_DWORD *)(v135 + 28))
      {
        unint64_t v248 = v139 + 1;
        BOOL v249 = v137 + 24 * v139 > (unint64_t)&p_EncodedSourceLocation;
        if (v137 <= (unint64_t)&p_EncodedSourceLocation && v249)
        {
          v269 = (char *)&p_EncodedSourceLocation - v137;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v135 + 16, (void *)(v135 + 32), v248, 24);
          unint64_t v137 = *(void *)(v136 + 16);
          uint64_t v140 = (void **)&v269[v137];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v135 + 16, (void *)(v135 + 32), v248, 24);
          unint64_t v137 = *(void *)(v136 + 16);
          uint64_t v140 = &p_EncodedSourceLocation;
        }
      }
      uint64_t v141 = v137 + 24 * *(unsigned int *)(v136 + 24);
      long long v142 = *(_OWORD *)v140;
      *(void *)(v141 + 16) = v140[2];
      *(_OWORD *)uint64_t v141 = v142;
      ++*(_DWORD *)(v136 + 24);
      mlir::MLIRContext::getAvailableDialects(***((mlir::MLIRContext ****)this + 1), &v293);
      v143 = v293;
      v144 = v294;
      if (v293 != v294)
      {
        v145 = *(void **)v293;
        std::string::size_type v146 = *((void *)v293 + 1);
        v147 = v293 + 16;
        LOWORD(v341) = 261;
        p_uint64_t EncodedSourceLocation = v145;
        std::string::size_type v338 = v146;
        mlir::Diagnostic::operator<<(v136, (const void ***)&p_EncodedSourceLocation);
        while (v147 != v144)
        {
          LOWORD(v341) = 261;
          p_uint64_t EncodedSourceLocation = ", ";
          std::string::size_type v338 = 2;
          mlir::Diagnostic::operator<<(v136, (const void ***)&p_EncodedSourceLocation);
          uint64_t v148 = *(void **)v147;
          std::string::size_type v149 = *((void *)v147 + 1);
          v147 += 16;
          LOWORD(v341) = 261;
          p_uint64_t EncodedSourceLocation = v148;
          std::string::size_type v338 = v149;
          mlir::Diagnostic::operator<<(v136, (const void ***)&p_EncodedSourceLocation);
        }
        v143 = v293;
      }
      if (v143)
      {
        v294 = v143;
        operator delete(v143);
      }
      LODWORD(p_EncodedSourceLocation) = 3;
      std::string::size_type v338 = (std::string::size_type)" ; for more info on dialect registration see https://mlir.llvm.org/getting_started/"
                                     "Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
      uint64_t v339 = 149;
      uint64_t v150 = *(unsigned int *)(v136 + 24);
      unint64_t v151 = *(void *)(v136 + 16);
      uint64_t v152 = &p_EncodedSourceLocation;
      if (v150 >= *(_DWORD *)(v136 + 28))
      {
        unint64_t v250 = v150 + 1;
        BOOL v251 = v151 + 24 * v150 > (unint64_t)&p_EncodedSourceLocation;
        if (v151 <= (unint64_t)&p_EncodedSourceLocation && v251)
        {
          std::string::size_type v270 = (char *)&p_EncodedSourceLocation - v151;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v138, (void *)(v136 + 32), v250, 24);
          unint64_t v151 = *(void *)(v136 + 16);
          uint64_t v152 = (void **)&v270[v151];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v138, (void *)(v136 + 32), v250, 24);
          unint64_t v151 = *(void *)(v136 + 16);
          uint64_t v152 = &p_EncodedSourceLocation;
        }
      }
      uint64_t v153 = v151 + 24 * *(unsigned int *)(v136 + 24);
      long long v154 = *(_OWORD *)v152;
      *(void *)(v153 + 16) = v152[2];
      *(_OWORD *)uint64_t v153 = v154;
      ++*(_DWORD *)(v136 + 24);
      if (v318.__r_.__value_.__r.__words[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
      }
      if (!v327)
      {
LABEL_294:
        uint64_t v23 = 0;
        unint64_t v117 = v336;
        if (v336 < 8) {
          goto LABEL_302;
        }
        goto LABEL_295;
      }
      v155 = (void **)__p[0];
      if (__p[0])
      {
        v156 = (void **)__p[1];
        v157 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            v156 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v156 - 1);
          while (v156 != v155);
          v157 = __p[0];
        }
        __p[1] = v155;
        operator delete(v157);
      }
      v158 = (void *)v323;
      if (!(void)v323)
      {
LABEL_292:
        if (__dst != v321) {
          free(__dst);
        }
        goto LABEL_294;
      }
      v159 = (void *)*((void *)&v323 + 1);
      v160 = (void *)v323;
      if (*((void *)&v323 + 1) == (void)v323)
      {
LABEL_291:
        *((void *)&v323 + 1) = v158;
        operator delete(v160);
        goto LABEL_292;
      }
      do
      {
        v162 = (void *)*--v159;
        v161 = v162;
        void *v159 = 0;
        if (v162) {
          operator delete[](v161);
        }
      }
      while (v159 != v158);
LABEL_290:
      v160 = (void *)v323;
      goto LABEL_291;
    }
    uint64_t v81 = Loc;
    v318.__r_.__value_.__l.__size_ = v338;
    int v82 = v341;
    LODWORD(v318.__r_.__value_.__r.__words[2]) = v339;
    unsigned int v83 = v321;
    long long __dst = v321;
    uint64_t v320 = 0x400000000;
    if (!v341)
    {
      int v85 = 1;
      goto LABEL_188;
    }
    unsigned int v84 = v342;
    if (v340 != v342)
    {
      long long __dst = v340;
      uint64_t v320 = v341;
      v340 = v342;
      HIDWORD(v341) = 0;
      int v85 = 1;
LABEL_187:
      LODWORD(v341) = 0;
LABEL_188:
      uint64_t Loc = v81;
      long long v323 = v343;
      uint64_t v324 = v344;
      long long v343 = 0uLL;
      *(_OWORD *)std::string __p = v345;
      uint64_t v326 = v346;
      uint64_t v344 = 0;
      long long v345 = 0uLL;
      uint64_t v346 = 0;
      char v327 = 1;
      if (v85)
      {
        if (v340 != v342) {
          free(v340);
        }
        unsigned __int8 v347 = 0;
      }
      goto LABEL_192;
    }
    if (v341 < 5)
    {
      uint64_t v86 = v341;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v321, v341, 24);
      uint64_t v86 = v341;
      if (!v341)
      {
LABEL_186:
        LODWORD(v320) = v82;
        int v85 = v347;
        goto LABEL_187;
      }
      unsigned int v84 = v340;
      unsigned int v83 = __dst;
    }
    memcpy(v83, v84, 24 * v86);
    goto LABEL_186;
  }
  if (mlir::Token::isKeyword((mlir::Token *)&v290))
  {
    uint64_t v4 = *((void *)this + 1);
    goto LABEL_11;
  }
  if (v290 == 11)
  {
    goto LABEL_302;
  }
  if (mlir::Token::isCodeCompletionFor((uint64_t)&v290, 11))
  {
    int64_t v29 = &v318;
    mlir::Token::getStringValue((mlir::Token *)&v290, &v318);
    if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v29 = (std::string *)v318.__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = HIBYTE(v318.__r_.__value_.__r.__words[2]);
    if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v318.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (v29->__r_.__value_.__s.__data_[size - 1] == 46)
      {
        size_t v31 = size >= size - 1 ? size - 1 : size;
        if (v31)
        {
          uint64_t v32 = memchr(v29, 46, v31);
          if (!v32 || v32 - (unsigned char *)v29 == -1) {
            (*(void (**)(void, std::string *, size_t))(**(void **)(*((void *)this + 1) + 136) + 24))(*(void *)(*((void *)this + 1) + 136), v29, v31);
          }
        }
      }
    }
    else
    {
      (*(void (**)(void, const char *, void))(**(void **)(*((void *)this + 1) + 136) + 16))(*(void *)(*((void *)this + 1) + 136), "", 0);
    }
    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v318.__r_.__value_.__l.__data_);
    }
    goto LABEL_310;
  }
  if (v290 == 2)
  {
    uint64_t v49 = mlir::detail::Parser::codeCompleteDialectOrElidedOpName((uint64_t)this, (uint64_t)Loc);
    goto LABEL_311;
  }
  p_uint64_t EncodedSourceLocation = "expected operation name in quotes";
  LOWORD(v341) = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&p_EncodedSourceLocation, &v318);
  uint64_t v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v318);
  if (v318.__r_.__value_.__r.__words[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v318);
  }
  if (v327)
  {
    uint64_t v73 = (void **)__p[0];
    if (__p[0])
    {
      char v74 = (void **)__p[1];
      uint64_t v75 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
        while (v74 != v73);
        uint64_t v75 = __p[0];
      }
      __p[1] = v73;
      operator delete(v75);
    }
    uint64_t v76 = (void *)v323;
    if (!(void)v323) {
      goto LABEL_360;
    }
    uint64_t v77 = (void *)*((void *)&v323 + 1);
    uint64_t v78 = (void *)v323;
    if (*((void *)&v323 + 1) == (void)v323) {
      goto LABEL_359;
    }
    do
    {
      long long v80 = (void *)*--v77;
      __int16 v79 = v80;
      *uint64_t v77 = 0;
      if (v80) {
        operator delete[](v79);
      }
    }
    while (v77 != v76);
    goto LABEL_358;
  }
LABEL_311:
  if (v315 != v3) {
    free(v315);
  }
  return v49;
}

void anonymous namespace'::OperationParser::pushSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)((char *)this + 208);
  unint64_t v2 = *((void *)this + 26);
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v13) = 0;
  uint64_t v4 = *((unsigned int *)this + 54);
  uint64_t v5 = v12;
  if (v4 >= *((_DWORD *)this + 55))
  {
    unint64_t v9 = v4 + 1;
    BOOL v10 = v2 + 24 * v4 > (unint64_t)v12;
    if (v2 <= (unint64_t)v12 && v10)
    {
      unint64_t v11 = (char *)v12 - v2;
      unint64_t v2 = *v3;
      uint64_t v5 = (llvm **)&v11[*v3];
    }
    else
    {
      unint64_t v2 = *v3;
      uint64_t v5 = v12;
    }
  }
  uint64_t v6 = v2 + 24 * *((unsigned int *)this + 54);
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = *v5;
  mlir::StringAttr *v5 = 0;
  *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = 0;
  int v7 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = v7;
  int v8 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = v8;
  ++*((_DWORD *)this + 54);
  llvm::deallocate_buffer(v12[0], (void *)(32 * v13));
}

void anonymous namespace'::OperationParser::IsolatedSSANameScope::~IsolatedSSANameScope(_anonymous_namespace_::OperationParser::IsolatedSSANameScope *this)
{
  unint64_t v2 = (void **)*((void *)this + 3);
  unsigned int v3 = *((_DWORD *)this + 8);
  if (v3)
  {
    uint64_t v4 = &v2[3 * v3];
    do
    {
      uint64_t v5 = v4;
      v4 -= 3;
      if (*((_DWORD *)v5 - 3))
      {
        uint64_t v6 = *((unsigned int *)v5 - 4);
        if (v6)
        {
          uint64_t v7 = 0;
          do
          {
            int v8 = *(llvm **)((char *)*v4 + v7);
            if (v8 != (llvm *)-8 && v8 != 0) {
              llvm::deallocate_buffer(v8, (void *)(*(void *)v8 + 9));
            }
            v7 += 8;
          }
          while (8 * v6 != v7);
        }
      }
      free(*v4);
    }
    while (v4 != v2);
    unint64_t v2 = (void **)*((void *)this + 3);
  }
  if (v2 != (void **)((char *)this + 40)) {
    free(v2);
  }
  if (*((_DWORD *)this + 3))
  {
    uint64_t v10 = *((unsigned int *)this + 2);
    if (v10)
    {
      uint64_t v11 = 0;
      do
      {
        unint64_t v12 = *(llvm **)(*(void *)this + v11);
        if (v12 != (llvm *)-8 && v12 != 0)
        {
          uint64_t v15 = *(void *)v12;
          uint64_t v14 = (void *)*((void *)v12 + 1);
          if (v14 != (void *)((char *)v12 + 24)) {
            free(v14);
          }
          llvm::deallocate_buffer(v12, (void *)(v15 + 41));
        }
        v11 += 8;
      }
      while (8 * v10 != v11);
    }
  }
  free(*(void **)this);
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    int v8 = &v6[24 * v7];
    unint64_t v9 = v4;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      void *v9 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      int v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      int v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    uint64_t v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12) {
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(32 * *(unsigned int *)&v6[24 * v12 - 8]));
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)a1;
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    int v8 = &v6[24 * v7];
    unint64_t v9 = v4;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      *((_DWORD *)v9 + 4) = 0;
      void *v9 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = 0;
      int v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = *((_DWORD *)v6 + 3);
      *((_DWORD *)v6 + 3) = v10;
      int v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
      *((_DWORD *)v6 + 4) = v11;
      v6 += 24;
      v9 += 3;
    }
    while (v6 != v8);
    uint64_t v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12) {
      llvm::deallocate_buffer(*(llvm **)&v6[24 * v12 - 24], (void *)(16 * *(unsigned int *)&v6[24 * v12 - 8]));
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

void llvm::SmallVectorTemplateBase<anonymous namespace'::OperationParser::IsolatedSSANameScope,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = 0;
  unsigned int v3 = (char *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 88, &v15);
  uint64_t v5 = *(char **)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = 0;
    int v8 = &v5[88 * v6];
    do
    {
      unint64_t v9 = &v5[v7];
      int v10 = &v4[v7];
      *(void *)int v10 = *(void *)&v5[v7];
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&v5[v7 + 8];
      *(void *)unint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      *((void *)v10 + 3) = &v4[v7 + 40];
      *(void *)&v4[v7 + 32] = 0x200000000;
      if (*(_DWORD *)&v5[v7 + 32]) {
        llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=((uint64_t)&v4[v7 + 24], (uint64_t)(v9 + 24));
      }
      v7 += 88;
    }
    while (v9 + 88 != v8);
    uint64_t v5 = *(char **)a1;
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = 88 * v11;
      int v13 = v5 - 88;
      do
      {
        v12 -= 88;
      }
      while (v12);
      uint64_t v5 = *(char **)a1;
    }
  }
  int v14 = v15;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void ***)a2;
    if (*(void *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(a1, a2);
      return a1;
    }
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      int v14 = *(void ***)a1;
      if (v5)
      {
        unint64_t v15 = &v4[3 * v5];
        do
        {
          unint64_t v16 = *v4;
          unsigned int v17 = *((_DWORD *)v4 + 4);
          BOOL v18 = v4[1];
          *uint64_t v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          unint64_t v19 = (llvm **)*v14;
          void *v14 = v16;
          uint64_t v20 = *((unsigned int *)v14 + 2);
          LODWORD(v16) = *((_DWORD *)v14 + 3);
          v14[1] = v18;
          *((_DWORD *)v14 + 4) = v17;
          if (v16 && v20)
          {
            char v21 = v19;
            do
            {
              int v22 = *v21;
              if (*v21 != (llvm *)-8 && v22 != 0) {
                llvm::deallocate_buffer(v22, (void *)(*(void *)v22 + 9));
              }
              ++v21;
              --v20;
            }
            while (v20);
          }
          free(v19);
          v4 += 3;
          v14 += 3;
        }
        while (v4 != v15);
        uint64_t v24 = v14;
        int v14 = *(void ***)a1;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        uint64_t v24 = *(void ***)a1;
      }
      for (uint64_t i = &v14[3 * v6]; i != v24; free(*i))
      {
        std::string::size_type v39 = i;
        i -= 3;
        if (*((_DWORD *)v39 - 3))
        {
          uint64_t v40 = *((unsigned int *)v39 - 4);
          if (v40)
          {
            uint64_t v41 = 0;
            do
            {
              uint64_t v42 = *(llvm **)((char *)*i + v41);
              if (v42 != (llvm *)-8 && v42 != 0) {
                llvm::deallocate_buffer(v42, (void *)(*(void *)v42 + 9));
              }
              v41 += 8;
            }
            while (8 * v40 != v41);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      unsigned int v44 = *(_DWORD *)(a2 + 8);
      if (v44)
      {
        uint64_t v45 = *(void ***)a2;
        int v46 = (void **)(*(void *)a2 + 24 * v44);
        do
        {
          uint64_t v47 = v46;
          v46 -= 3;
          if (*((_DWORD *)v47 - 3))
          {
            uint64_t v48 = *((unsigned int *)v47 - 4);
            if (v48)
            {
              uint64_t v49 = 0;
              do
              {
                uint64_t v50 = *(llvm **)((char *)*v46 + v49);
                if (v50 != (llvm *)-8 && v50 != 0) {
                  llvm::deallocate_buffer(v50, (void *)(*(void *)v50 + 9));
                }
                v49 += 8;
              }
              while (8 * v48 != v49);
            }
          }
          free(*v46);
        }
        while (v46 != v45);
      }
      goto LABEL_90;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      uint64_t v25 = *(unsigned int **)a1;
      if (v6)
      {
        unint64_t v26 = &v4[3 * v6];
        do
        {
          char v27 = *v4;
          unsigned int v28 = *((_DWORD *)v4 + 4);
          int64_t v29 = v4[1];
          *uint64_t v4 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
          uint64_t v30 = *(llvm ***)v25;
          *(void *)uint64_t v25 = v27;
          uint64_t v31 = v25[2];
          LODWORD(v27) = v25[3];
          *((void *)v25 + 1) = v29;
          v25[4] = v28;
          if (v27 && v31)
          {
            uint64_t v32 = v30;
            do
            {
              uint64_t v33 = *v32;
              if (*v32 != (llvm *)-8 && v33 != 0) {
                llvm::deallocate_buffer(v33, (void *)(*(void *)v33 + 9));
              }
              ++v32;
              --v31;
            }
            while (v31);
          }
          free(v30);
          v4 += 3;
          v25 += 6;
        }
        while (v4 != v26);
        uint64_t v25 = *(unsigned int **)a1;
        uint64_t v36 = *(void ***)a2;
        uint64_t v37 = *(unsigned int *)(a2 + 8);
        if (v6 == v37) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v36 = *(void ***)a2;
        LODWORD(v37) = *(_DWORD *)(a2 + 8);
        if (!v37) {
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(void ***)a1;
        int v8 = (void **)(*(void *)a1 + 24 * v6);
        do
        {
          unint64_t v9 = v8;
          v8 -= 3;
          if (*((_DWORD *)v9 - 3))
          {
            uint64_t v10 = *((unsigned int *)v9 - 4);
            if (v10)
            {
              uint64_t v11 = 0;
              do
              {
                uint64_t v12 = *(llvm **)((char *)*v8 + v11);
                if (v12 != (llvm *)-8 && v12 != 0) {
                  llvm::deallocate_buffer(v12, (void *)(*(void *)v12 + 9));
                }
                v11 += 8;
              }
              while (8 * v10 != v11);
            }
          }
          free(*v8);
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      unint64_t v63 = 0;
      uint64_t v25 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v63);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v25);
      int v35 = v63;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      uint64_t v6 = 0;
      *(void *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      uint64_t v36 = *(void ***)a2;
      LODWORD(v37) = *(_DWORD *)(a2 + 8);
      if (!v37) {
        goto LABEL_78;
      }
    }
    uint64_t v52 = &v36[3 * v37];
    uint64_t v53 = &v25[6 * v6];
    int v54 = &v36[3 * v6];
    do
    {
      *(void *)uint64_t v53 = *v54;
      *(_OWORD *)(v53 + 2) = *(_OWORD *)(v54 + 1);
      char *v54 = 0;
      v54[1] = 0;
      *((_DWORD *)v54 + 4) = 0;
      v54 += 3;
      v53 += 6;
    }
    while (v54 != v52);
    uint64_t v36 = *(void ***)a2;
LABEL_78:
    *(_DWORD *)(a1 + 8) = v5;
    unsigned int v55 = *(_DWORD *)(a2 + 8);
    if (v55)
    {
      uint64_t v56 = &v36[3 * v55];
      do
      {
        long long v57 = v56;
        v56 -= 3;
        if (*((_DWORD *)v57 - 3))
        {
          uint64_t v58 = *((unsigned int *)v57 - 4);
          if (v58)
          {
            uint64_t v59 = 0;
            do
            {
              uint64_t v60 = *(llvm **)((char *)*v56 + v59);
              if (v60 != (llvm *)-8 && v60 != 0) {
                llvm::deallocate_buffer(v60, (void *)(*(void *)v60 + 9));
              }
              v59 += 8;
            }
            while (8 * v58 != v59);
          }
        }
        free(*v56);
      }
      while (v56 != v36);
    }
LABEL_90:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::StringSet<llvm::MallocAllocator>>::assignRemote(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = &v4[3 * v5];
    do
    {
      uint64_t v7 = v6;
      v6 -= 3;
      if (*((_DWORD *)v7 - 3))
      {
        uint64_t v8 = *((unsigned int *)v7 - 4);
        if (v8)
        {
          uint64_t v9 = 0;
          do
          {
            uint64_t v10 = *(llvm **)((char *)*v6 + v9);
            if (v10 != (llvm *)-8 && v10 != 0) {
              llvm::deallocate_buffer(v10, (void *)(*(void *)v10 + 9));
            }
            v9 += 8;
          }
          while (8 * v8 != v9);
        }
      }
      free(*v6);
    }
    while (v6 != v4);
    uint64_t v4 = *(void ***)a1;
  }
  if (v4 != (void **)(a1 + 16)) {
    free(v4);
  }
  *(void *)a1 = *(void *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    unsigned int v3 = *(void ***)a1;
    uint64_t v4 = *(void *)a1 + 24 * v2;
    do
    {
      *(void *)a2 = *v3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 1);
      *unsigned int v3 = 0;
      v3[1] = 0;
      *((_DWORD *)v3 + 4) = 0;
      v3 += 3;
      a2 += 24;
    }
    while (v3 != (void **)v4);
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = *(void ***)a1;
      uint64_t v7 = (void **)(*(void *)a1 + 24 * v5);
      do
      {
        uint64_t v8 = v7;
        v7 -= 3;
        if (*((_DWORD *)v8 - 3))
        {
          uint64_t v9 = *((unsigned int *)v8 - 4);
          if (v9)
          {
            uint64_t v10 = 0;
            do
            {
              uint64_t v11 = *(llvm **)((char *)*v7 + v10);
              if (v11 != (llvm *)-8 && v11 != 0) {
                llvm::deallocate_buffer(v11, (void *)(*(void *)v11 + 9));
              }
              v10 += 8;
            }
            while (8 * v9 != v10);
          }
        }
        free(*v7);
      }
      while (v7 != v6);
    }
  }
}

char *llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - *(void *)a1) >> 3);
      unint64_t v17 = 0;
      uint64_t v14 = a1 + 16;
      unint64_t v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      int v16 = v17;
      if (*(void *)a1 != v14) {
        free(*(void **)a1);
      }
      *(void *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[24 * v13];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v10 = a1 + 16;
      uint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v17);
      llvm::SmallVectorTemplateBase<llvm::StringSet<llvm::MallocAllocator>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      int v12 = v17;
      if (*(void *)a1 != v10) {
        free(*(void **)a1);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t anonymous namespace'::OperationParser::parseGenericOperation(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
  uint64_t v48 = EncodedSourceLocation;
  mlir::Token::getStringValue((mlir::Token *)(*((void *)this + 1) + 56), &v47);
  std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    *(void *)&long long v50 = "empty operation name is invalid";
    __int16 v52 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v66);
    if (v66[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
    }
    if (v73)
    {
      unint64_t v13 = (void **)v71;
      if (v71)
      {
        uint64_t v14 = v72;
        unint64_t v15 = v71;
        if (v72 != v71)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          unint64_t v15 = v71;
        }
        uint64_t v72 = v13;
        operator delete(v15);
      }
      int v16 = v69;
      if (v69)
      {
        unint64_t v17 = v70;
        BOOL v18 = v69;
        if (v70 != v69)
        {
          do
          {
            uint64_t v20 = (void *)*--v17;
            unint64_t v19 = v20;
            *unint64_t v17 = 0;
            if (v20) {
              operator delete[](v19);
            }
          }
          while (v17 != v16);
          BOOL v18 = v69;
        }
        uint64_t v70 = v16;
        operator delete(v18);
      }
      int64_t v29 = v67;
      if (v67 != &v68) {
        goto LABEL_49;
      }
    }
    goto LABEL_50;
  }
  if (std::string::find(&v47, 0, 0) == -1)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v50);
    uint64_t v21 = *((void *)this + 1);
    *(_OWORD *)(v21 + 56) = v50;
    *(void *)(v21 + 72) = v51;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v47;
    }
    else {
      int v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v47.__r_.__value_.__l.__size_;
    }
    mlir::OperationState::OperationState(&v50, EncodedSourceLocation, (uint64_t)v22, v23);
    if (*(_UNKNOWN **)(*((void *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      std::string::size_type v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      uint64_t v25 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v24 = v47.__r_.__value_.__l.__size_;
        uint64_t v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      char v74 = (char *)v25;
      unint64_t v75 = v24;
      LOBYTE(v42) = 46;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v74, (char *)&v42, 1uLL, 0);
      if (v26 == -1)
      {
        char v27 = v74;
        size_t v28 = v75;
      }
      else
      {
        char v27 = v74;
        if (v26 >= v75) {
          size_t v28 = v75;
        }
        else {
          size_t v28 = v26;
        }
      }
      if (mlir::MLIRContext::getLoadedDialect(***((uint64_t ****)this + 1), (uint64_t)v27, v28)
        || mlir::MLIRContext::getOrLoadDialect(***((void ***)this + 1), v27, v28))
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v32 = &v47;
        }
        else {
          uint64_t v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = v47.__r_.__value_.__l.__size_;
        }
        mlir::OperationName::OperationName(&v74, v32, v33, ***((void ***)this + 1));
        *((void *)&v50 + 1) = v74;
      }
      else if ((mlir::MLIRContext::allowsUnregisteredDialects(***((mlir::MLIRContext ****)this + 1)) & 1) == 0)
      {
        char v74 = "operation being parsed with an unregistered dialect. If this is intended, please use -allow-unregistered-d"
              "ialect with the MLIR tool used";
        __int16 v77 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v74, v49);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v49);
        goto LABEL_80;
      }
    }
    uint64_t v34 = *(mlir::AsmParserState **)(*((void *)this + 1) + 128);
    if (v34) {
      mlir::AsmParserState::startOperationDefinition(v34, (const mlir::OperationName *)((char *)&v50 + 8));
    }
    v46[0] = 0;
    v46[16] = 0;
    v45[0] = 0;
    v45[16] = 0;
    v44[0] = 0;
    v44[16] = 0;
    v43[0] = 0;
    v43[16] = 0;
    {
      uint64_t v35 = v56;
      uint64_t v42 = v56;
      uint64_t v56 = 0;
      if (v42 {
        || v57
      }
        || *(_UNKNOWN **)(*((void *)&v50 + 1) + 16) == &mlir::detail::TypeIDResolver<void,void>::id
        || (char v74 = (char *)&v48,
            unint64_t v75 = (unint64_t)&v47,
      {
        uint64_t v30 = (uint64_t)mlir::OpBuilder::create((_anonymous_namespace_::OperationParser *)((char *)this + 384), (const mlir::OperationState *)&v50);
        {
          if (!v35 {
            || (char v74 = (char *)&v48,
          }
                unint64_t v75 = (unint64_t)&v42,
                v76[0] = &v47,
          {
LABEL_81:
            char v74 = (char *)v76;
            unint64_t v75 = 0x400000000;
            unsigned int v36 = v55;
            if (v55 >= 5)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v55, 8);
              unsigned int v36 = v55;
            }
            if (v36)
            {
              uint64_t v37 = v54;
              uint64_t v38 = &v54[v36];
              do
              {
                uint64_t v39 = *v37;
                if (*v37)
                {
                  for (uint64_t i = *(void *)(v39 + 8); i != v39; uint64_t i = *(void *)(i + 8))
                  {
                    if (i) {
                      uint64_t v41 = (void *)(i - 8);
                    }
                    else {
                      uint64_t v41 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses(v41);
                  }
                }
                ++v37;
              }
              while (v37 != v38);
            }
            if (v74 != (char *)v76) {
              free(v74);
            }
            mlir::OperationState::~OperationState((mlir::OperationState *)&v50);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_51;
            }
            return v30;
          }
        }
      }
    }
LABEL_80:
    uint64_t v30 = 0;
    goto LABEL_81;
  }
  *(void *)&long long v50 = "null character not allowed in operation name";
  __int16 v52 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v50, v58);
  if (v58[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  }
  if (v65)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v64;
      uint64_t v7 = __p;
      if (v64 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      int v64 = v5;
      operator delete(v7);
    }
    unint64_t v8 = v61;
    if (v61)
    {
      uint64_t v9 = v62;
      uint64_t v10 = v61;
      if (v62 != v61)
      {
        do
        {
          int v12 = (void *)*--v9;
          uint64_t v11 = v12;
          void *v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v61;
      }
      char v62 = v8;
      operator delete(v10);
    }
    int64_t v29 = v59;
    if (v59 != &v60) {
LABEL_49:
    }
      free(v29);
  }
LABEL_50:
  uint64_t v30 = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
LABEL_51:
  }
    operator delete(v47.__r_.__value_.__l.__data_);
  return v30;
}

uint64_t anonymous namespace'::OperationParser::addDefinition(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2 + 8;
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 8);
  uint64_t v11 = (unsigned int *)(a2 + 24);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unint64_t v12 = v10 + 1;
  if (v9 > v10 || v9 == v12)
  {
    unint64_t v14 = *(void *)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24));
    unint64_t v59 = v14;
    if (!v14) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v9 <= v12)
    {
      if (*(_DWORD *)(v7 + 12) < v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12, 16);
        unsigned int v9 = *(_DWORD *)(v8 + 8);
      }
      if (v9 != v12) {
        bzero((void *)(*(void *)v8 + 16 * v9), 16 * (v12 - v9));
      }
    }
    *(_DWORD *)(v8 + 8) = v12;
    unint64_t v14 = *(void *)(*(void *)v8 + 16 * *v11);
    unint64_t v59 = v14;
    if (!v14) {
      goto LABEL_7;
    }
  }
  v57[0] = v14;
  int v61 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), v57, &v61))
  {
    if ((*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) != (a3[1] & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v19 = *(const char **)a2;
      __int16 v58 = 257;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v19);
      mlir::emitError(EncodedSourceLocation, (uint64_t)v57, (uint64_t)&v61);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v61);
      }
      v60[0] = a3[1] & 0xFFFFFFFFFFFFFFF8;
      if (v61) {
        mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>((uint64_t)v62, "definition of SSA value '", v6, "#", (unsigned int *)(a2 + 24), "' has type ", v60);
      }
      uint64_t v21 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v8 + 16 * *v11 + 8));
      uint64_t v22 = mlir::Diagnostic::attachNote(v62, v21, 1);
      unint64_t v56 = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Diagnostic::append<char const(&)[5],mlir::Type>(v22, "previously used here with type ", (uint64_t *)&v56);
      uint64_t v18 = mlir::Diagnostic::operator mlir::LogicalResult();
      if (v61) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
      }
      if (v69)
      {
        std::string::size_type v23 = (void **)__p;
        if (__p)
        {
          std::string::size_type v24 = v68;
          uint64_t v25 = __p;
          if (v68 != __p)
          {
            do
              std::string::size_type v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            uint64_t v25 = __p;
          }
          uint64_t v68 = v23;
          operator delete(v25);
        }
        unint64_t v26 = v65;
        if (!v65) {
          goto LABEL_62;
        }
        char v27 = v66;
        size_t v28 = v65;
        if (v66 == v65)
        {
LABEL_61:
          uint64_t v66 = v26;
          operator delete(v28);
LABEL_62:
          if (v63 != &v64) {
            free(v63);
          }
          return v18;
        }
        do
        {
          std::string::size_type v33 = (void *)*--v27;
          uint64_t v32 = v33;
          void *v27 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v27 != v26);
LABEL_60:
        size_t v28 = v65;
        goto LABEL_61;
      }
      return v18;
    }
    while (1)
    {
      int64_t v29 = *(uint64_t **)v14;
      if (!*(void *)v14) {
        break;
      }
      uint64_t v30 = (uint64_t *)v29[1];
      if (v30)
      {
        *uint64_t v30 = *v29;
        if (*v29) {
          *(void *)(*v29 + 8) = v29[1];
        }
      }
      v29[3] = (uint64_t)a3;
      v29[1] = (uint64_t)a3;
      uint64_t v31 = *a3;
      *int64_t v29 = *a3;
      if (v31) {
        *(void *)(v31 + 8) = v29;
      }
      *a3 = (uint64_t)v29;
    }
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v59);
    mlir::Operation::destroy(DefiningOp);
    int v61 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v59, &v61))
    {
      *int v61 = -8192;
      *(int32x2_t *)(a1 + 344) = vadd_s32(*(int32x2_t *)(a1 + 344), (int32x2_t)0x1FFFFFFFFLL);
    }
    uint64_t v52 = *(void *)(*(void *)(a1 + 8) + 128);
    if (v52) {
      mlir::AsmParserState::refineDefinition(v52, v59, (unint64_t)a3);
    }
LABEL_7:
    unint64_t v15 = *(const char **)a2;
    int v16 = (uint64_t **)(*(void *)v8 + 16 * *(unsigned int *)(a2 + 24));
    void *v16 = a3;
    v16[1] = (uint64_t *)v15;
    uint64_t v17 = *(void *)(a1 + 16) + 88 * *(unsigned int *)(a1 + 24);
    llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(*(void *)(v17 - 64) + 24 * *(unsigned int *)(v17 - 56) - 24, *(int8x16_t **)(a2 + 8), *(const unsigned __int8 **)(a2 + 16));
    return 1;
  }
  uint64_t v34 = *(const char **)a2;
  __int16 v58 = 257;
  uint64_t v35 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v34);
  mlir::emitError(v35, (uint64_t)v57, (uint64_t)&v61);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v61);
  }
  if (v61) {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)v62, "redefinition of SSA value '", v6, "'");
  }
  uint64_t v36 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v8 + 16 * *v11 + 8));
  uint64_t v37 = mlir::Diagnostic::attachNote(v62, v36, 1);
  uint64_t v38 = v37 + 16;
  unint64_t v39 = *(void *)(v37 + 16);
  LODWORD(v60[0]) = 3;
  v60[1] = (uint64_t)"previously defined here";
  v60[2] = 23;
  uint64_t v40 = *(unsigned int *)(v37 + 24);
  uint64_t v41 = v60;
  if (v40 >= *(_DWORD *)(v37 + 28))
  {
    unint64_t v53 = v40 + 1;
    BOOL v54 = v39 + 24 * v40 > (unint64_t)v60;
    if (v39 <= (unint64_t)v60 && v54)
    {
      unsigned int v55 = (char *)v60 - v39;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v38, (void *)(v37 + 32), v53, 24);
      unint64_t v39 = *(void *)(v37 + 16);
      uint64_t v41 = (uint64_t *)&v55[v39];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v38, (void *)(v37 + 32), v53, 24);
      unint64_t v39 = *(void *)(v37 + 16);
      uint64_t v41 = v60;
    }
  }
  uint64_t v42 = v39 + 24 * *(unsigned int *)(v37 + 24);
  long long v43 = *(_OWORD *)v41;
  *(void *)(v42 + 16) = v41[2];
  *(_OWORD *)uint64_t v42 = v43;
  ++*(_DWORD *)(v37 + 24);
  uint64_t v18 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v61) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
  }
  if (v69)
  {
    unsigned int v44 = (void **)__p;
    if (__p)
    {
      uint64_t v45 = v68;
      int v46 = __p;
      if (v68 != __p)
      {
        do
          uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        int v46 = __p;
      }
      uint64_t v68 = v44;
      operator delete(v46);
    }
    unint64_t v26 = v65;
    if (!v65) {
      goto LABEL_62;
    }
    std::string v47 = v66;
    size_t v28 = v65;
    if (v66 == v65) {
      goto LABEL_61;
    }
    do
    {
      uint64_t v49 = (void *)*--v47;
      uint64_t v48 = v49;
      *std::string v47 = 0;
      if (v49) {
        operator delete[](v48);
      }
    }
    while (v47 != v26);
    goto LABEL_60;
  }
  return v18;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseOperation(void)::$_0>(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  long long v44 = *(_OWORD *)(v3 + 56);
  uint64_t v45 = *(void *)(v3 + 72);
  *(void *)&long long v46 = "expected valid ssa identifier";
  __int16 v49 = 259;
  if (!mlir::detail::Parser::parseToken(v2, 6, (uint64_t)&v46)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v4 + 56) != 15)
  {
    uint64_t v33 = 1;
    goto LABEL_25;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v46);
  uint64_t v5 = *(void *)(v2 + 8);
  *(_OWORD *)(v5 + 56) = v46;
  *(void *)(v5 + 72) = v47;
  uint64_t v6 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v6 + 56) == 10)
  {
    UInt64Integeruint64_t Value = mlir::Token::getUInt64IntegerValue(*(unsigned __int8 **)(v6 + 64), *(void *)(v6 + 72));
    if (v8) {
      BOOL v9 = UInt64IntegerValue == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v33 = UInt64IntegerValue;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v2 + 8) + 8), (uint64_t)&v46);
      uint64_t v34 = *(void *)(v2 + 8);
      *(_OWORD *)(v34 + 56) = v46;
      *(void *)(v34 + 72) = v47;
LABEL_25:
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v21 = *((void *)&v44 + 1);
      uint64_t v20 = v45;
      uint64_t Loc = (void *)mlir::Token::getLoc((mlir::Token *)&v44);
      uint64_t v23 = *(unsigned int *)(v19 + 8);
      if (v23 >= *(_DWORD *)(v19 + 12))
      {
        *(void *)&long long v46 = v21;
        *((void *)&v46 + 1) = v20;
        LODWORD(v47) = v33;
        uint64_t v48 = Loc;
        unint64_t v35 = v23 + 1;
        BOOL v36 = *(void *)v19 + 32 * v23 > (unint64_t)&v46;
        if (*(void *)v19 <= (unint64_t)&v46 && v36)
        {
          uint64_t v41 = (char *)&v46 - *(void *)v19;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          uint64_t v37 = *(void *)v19;
          uint64_t v38 = &v41[*(void *)v19];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, (void *)(v19 + 16), v35, 32);
          uint64_t v37 = *(void *)v19;
          uint64_t v38 = (char *)&v46;
        }
        unint64_t v39 = (_OWORD *)(v37 + 32 * *(unsigned int *)(v19 + 8));
        long long v40 = *((_OWORD *)v38 + 1);
        *unint64_t v39 = *(_OWORD *)v38;
        v39[1] = v40;
        int v25 = *(_DWORD *)(v19 + 8) + 1;
      }
      else
      {
        uint64_t v24 = *(void *)v19 + 32 * v23;
        *(void *)uint64_t v24 = v21;
        *(void *)(v24 + 8) = v20;
        *(_DWORD *)(v24 + 16) = v33;
        *(void *)(v24 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = Loc;
        int v25 = v23 + 1;
      }
      *(_DWORD *)(v19 + 8) = v25;
      **(void **)(a1 + 16) += v33;
      return 1;
    }
    v42[0] = "expected named operation to have at least 1 result";
    __int16 v43 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v42, &v46);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((void)v46) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    }
    if (v55)
    {
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        unint64_t v12 = v54;
        unint64_t v13 = __p;
        if (v54 != __p)
        {
          do
            unint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unint64_t v13 = __p;
        }
        BOOL v54 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v51;
      if (!v51) {
        goto LABEL_45;
      }
      unint64_t v15 = v52;
      int v16 = v51;
      if (v52 == v51)
      {
LABEL_44:
        uint64_t v52 = v14;
        operator delete(v16);
LABEL_45:
        if (v48 != &v50) {
          free(v48);
        }
        return v10;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
LABEL_43:
      int v16 = v51;
      goto LABEL_44;
    }
  }
  else
  {
    v42[0] = "expected integer number of results";
    __int16 v43 = 259;
    mlir::detail::Parser::emitWrongTokenError(v2, (uint64_t)v42, &v46);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v46);
    if ((void)v46) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
    }
    if (v55)
    {
      char v27 = (void **)__p;
      if (__p)
      {
        size_t v28 = v54;
        int64_t v29 = __p;
        if (v54 != __p)
        {
          do
            size_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          int64_t v29 = __p;
        }
        BOOL v54 = v27;
        operator delete(v29);
      }
      unint64_t v14 = v51;
      if (!v51) {
        goto LABEL_45;
      }
      uint64_t v30 = v52;
      int v16 = v51;
      if (v52 == v51) {
        goto LABEL_44;
      }
      do
      {
        uint64_t v32 = (void *)*--v30;
        uint64_t v31 = v32;
        *uint64_t v30 = 0;
        if (v32) {
          operator delete[](v31);
        }
      }
      while (v30 != v14);
      goto LABEL_43;
    }
  }
  return v10;
}

unint64_t anonymous namespace'::OperationParser::parseCustomOperationName(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (int8x16_t *)v2[8];
  uint64_t v4 = (const unsigned __int8 *)v2[9];
  BOOL v36 = (char *)v3;
  unint64_t v37 = (unint64_t)v4;
  if (v4)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 1), (uint64_t)&v32);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = v32;
    *(void *)(v5 + 72) = v33;
    uint64_t v6 = mlir::RegisteredOperationName::lookup(v3, v4, ***((uint64_t ****)this + 1));
    if (v7)
    {
      LOBYTE(v8) = v6;
      unint64_t v9 = v6 & 0xFFFFFFFFFFFFFF00;
      return v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
    LOBYTE(v32) = 46;
    unint64_t v18 = llvm::StringRef::find((uint64_t *)&v36, (char *)&v32, 1uLL, 0);
    if (v18 == -1)
    {
      uint64_t v20 = v36;
      unint64_t v19 = v37;
      size_t v8 = v37;
      uint64_t v21 = *((void *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v20 = v36;
      unint64_t v19 = v37;
      if (v18 >= v37) {
        size_t v8 = v37;
      }
      else {
        size_t v8 = v18;
      }
      memset(&v31, 0, sizeof(v31));
      if (v37 > v18 + 1)
      {
LABEL_40:
        mlir::MLIRContext::getOrLoadDialect(***((void ***)this + 1), v20, v8);
        mlir::OperationName::OperationName(&v32, v36, v37, ***((void ***)this + 1));
        LOBYTE(v8) = v32;
        unint64_t v9 = v32 & 0xFFFFFFFFFFFFFF00;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        return v9 & 0xFFFFFFFFFFFFFF00 | v8;
      }
      uint64_t v21 = *((void *)this + 1);
      if (*(_DWORD *)(v21 + 56) != 2)
      {
LABEL_37:
        uint64_t v23 = *(void *)(v21 + 144) + 16 * *(unsigned int *)(v21 + 152);
        uint64_t v24 = *(char **)(v23 - 16);
        size_t v8 = *(void *)(v23 - 8);
        __int16 v29 = 773;
        v28[0] = v24;
        v28[1] = v8;
        void v28[2] = ".";
        *(void *)&long long v32 = v28;
        uint64_t v33 = v20;
        unint64_t v34 = v19;
        __int16 v35 = 1282;
        llvm::Twine::str((llvm::Twine *)&v32, &v30);
        std::string v31 = v30;
        std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        unint64_t v26 = &v31;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type size = v30.__r_.__value_.__l.__size_;
          unint64_t v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        BOOL v36 = (char *)v26;
        unint64_t v37 = size;
        uint64_t v20 = v24;
        goto LABEL_40;
      }
    }
    if (v20[v19 - 1] != 46) {
      goto LABEL_37;
    }
    if (v8)
    {
      uint64_t v22 = memchr(v20, 46, v8);
      if (!v22 || v22 - v20 == -1) {
        (*(void (**)(void, char *, size_t))(**(void **)(v21 + 136) + 24))(*(void *)(v21 + 136), v20, v8);
      }
      unint64_t v9 = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      unint64_t v9 = 0;
    }
  }
  else
  {
    *(void *)&long long v32 = "empty operation name is invalid";
    __int16 v35 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v32, v38);
    if (v38[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    }
    if (v45)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        uint64_t v11 = v44;
        unint64_t v12 = __p;
        if (v44 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          unint64_t v12 = __p;
        }
        long long v44 = v10;
        operator delete(v12);
      }
      unint64_t v13 = v41;
      if (v41)
      {
        unint64_t v14 = v42;
        unint64_t v15 = v41;
        if (v42 != v41)
        {
          do
          {
            uint64_t v17 = (void *)*--v14;
            int v16 = v17;
            void *v14 = 0;
            if (v17) {
              operator delete[](v16);
            }
          }
          while (v14 != v13);
          unint64_t v15 = v41;
        }
        uint64_t v42 = v13;
        operator delete(v15);
      }
      if (v39 != &v40) {
        free(v39);
      }
    }
    LOBYTE(v8) = 0;
    unint64_t v9 = 0;
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(void *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      unint64_t v14 = 91;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      char v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[17]);
}

uint64_t anonymous namespace'::OperationParser::parseTrailingLocationSpecifier(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 56) != 59) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v12);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v12;
  *(void *)(v5 + 72) = v13;
  *(void *)&long long v12 = "expected '(' in location";
  __int16 v14 = 259;
  if (mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v12))
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 56);
    uint64_t v11 = 0;
    if (v6 == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)a1, &v11))
    {
      return 0;
    }
    *(void *)&long long v12 = "expected ')' in location";
    __int16 v14 = 259;
    if (mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v12))
    {
      uint64_t v7 = (a2 >> 2) & 1;
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
        LODWORD(v7) = 1;
      }
      BOOL v8 = v7 == 0;
      uint64_t v9 = 24;
      if (!v8) {
        uint64_t v9 = 32;
      }
      *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + v9) = v11;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v22 = 72;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      unint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3760);
  int v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    BOOL v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      int v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallImpl<llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))a1)(*(void *)(a1 + 8));
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>::callback_fn<llvm::unique_function<mlir::ParseResult ()(mlir::OpAsmParser &,mlir::OperationState &)>>(void *a1)
{
  uint64_t v1 = a1[3];
  if ((v1 & 2) == 0) {
    a1 = (void *)*a1;
  }
  return (*(uint64_t (**)(void *))(v1 & 0xFFFFFFFFFFFFFFF8))(a1);
}

void anonymous namespace'::CustomOpAsmParser::~CustomOpAsmParser(_anonymous_namespace_::CustomOpAsmParser *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getNameLoc(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void anonymous namespace'::CustomOpAsmParser::emitError(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  __int16 v13 = 1283;
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  v12[0] = "custom op '";
  void v12[2] = v5;
  void v12[3] = v6;
  *(void *)&long long v14 = v12;
  *(void *)&long long v15 = "' ";
  LOWORD(v16) = 770;
  int v7 = *((unsigned __int8 *)a3 + 32);
  if (v7 == 1)
  {
    long long v17 = v14;
    long long v18 = v15;
    uint64_t v19 = v16;
  }
  else if (*((unsigned char *)a3 + 32))
  {
    BOOL v8 = (uint64_t *)*a3;
    uint64_t v9 = a3[1];
    if (*((unsigned char *)a3 + 33) != 1)
    {
      LOBYTE(v7) = 2;
      BOOL v8 = a3;
    }
    *(void *)&long long v17 = &v14;
    *(void *)&long long v18 = v8;
    *((void *)&v18 + 1) = v9;
    LOBYTE(v19) = 2;
    BYTE1(v19) = v7;
  }
  else
  {
    LOWORD(v19) = 256;
  }
  *(unsigned char *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v10 + 8) + 8, a2);
  mlir::emitError(EncodedSourceLocation, (uint64_t)&v17, (uint64_t)a4);
  if (*(_DWORD *)(*(void *)(v10 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getBuilder(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getCurrentLocation(uint64_t a1)
{
  return mlir::Token::getLoc((mlir::Token *)(*(void *)(*(void *)(a1 + 16) + 8) + 56));
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::getEncodedSourceLoc(uint64_t a1, const char *a2)
{
  return mlir::Lexer::getEncodedSourceLocation(*(void *)(*(void *)(a1 + 16) + 8) + 8, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = "expected '->'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 13, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrow(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 13)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 13;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '{'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 20)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 20;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '}'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 27, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRBrace(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 27)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 27;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ':'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColon(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 15)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 15;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ','";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 16, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalComma(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 16)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '='";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 18, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEqual(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 18)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 18;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '<'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 23, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 23)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 23;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '>'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 19, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalGreater(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 19)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 19;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '?'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 26, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalQuestion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 26)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 26;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parsePlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '+'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 25, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalPlus(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 25)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 25;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '*'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 30, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalStar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 30;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '|'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 31, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalVerticalBar(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 31)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 31;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v4 + 56) != 11) {
    return 0;
  }
  if (a2)
  {
    mlir::Token::getStringValue((mlir::Token *)(v4 + 56), &v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v7;
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(v3 + 8);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
  *(std::string *)(*(void *)(v3 + 8) + 56) = v7;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseBase64Bytes(void *a1, unint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(void *)(v5 + 8);
  if (*(_DWORD *)(v6 + 56) == 11)
  {
    if (a2)
    {
      long long v38 = *(_OWORD *)(v6 + 64);
      unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v38, "\"  \t\n\v\f\r", 8, 0);
      if (first_not_of >= *((void *)&v38 + 1)) {
        unint64_t v8 = *((void *)&v38 + 1);
      }
      else {
        unint64_t v8 = first_not_of;
      }
      unint64_t v9 = *((void *)&v38 + 1) - v8;
      *(void *)&long long v41 = v38 + v8;
      *((void *)&v41 + 1) = *((void *)&v38 + 1) - v8;
      uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v41, "\" \t\n\v\f\r", 7, 0xFFFFFFFFFFFFFFFFLL);
      if ((unint64_t)(last_not_of + 1) < *((void *)&v41 + 1)) {
        uint64_t v11 = last_not_of + 1;
      }
      else {
        uint64_t v11 = *((void *)&v41 + 1);
      }
      unint64_t v12 = *((void *)&v41 + 1) - v9 + v11;
      if (*((void *)&v41 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v41 + 1);
      }
      llvm::decodeBase64(v41, v13, a2, (uint64_t *)&v37);
      if (v37)
      {
        __int16 v35 = v37;
        unint64_t v37 = 0;
        llvm::toString(&v35, &v36, v14, v15);
        __int16 v40 = 260;
        v39[0] = &v36;
        (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
        uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
        if ((void)v41) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
        }
        if (v49)
        {
          long long v17 = (void **)__p;
          if (__p)
          {
            long long v18 = v48;
            uint64_t v19 = __p;
            if (v48 != __p)
            {
              do
                long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
              while (v18 != v17);
              uint64_t v19 = __p;
            }
            uint64_t v48 = v17;
            operator delete(v19);
          }
          uint64_t v20 = v45;
          if (v45)
          {
            uint64_t v21 = v46;
            unint64_t v22 = v45;
            if (v46 != v45)
            {
              do
              {
                uint64_t v24 = (void *)*--v21;
                uint64_t v23 = v24;
                *uint64_t v21 = 0;
                if (v24) {
                  operator delete[](v23);
                }
              }
              while (v21 != v20);
              unint64_t v22 = v45;
            }
            uint64_t v46 = v20;
            operator delete(v22);
          }
          if (v43 != v44) {
            free(v43);
          }
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (v35) {
          (*(void (**)(void *))(*v35 + 8))(v35);
        }
        if (v37) {
          (*(void (**)(void *))(*v37 + 8))(v37);
        }
        return v16;
      }
      uint64_t v5 = a1[2];
      uint64_t v6 = *(void *)(v5 + 8);
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v6 + 8), (uint64_t)&v41);
    uint64_t v33 = *(void *)(v5 + 8);
    *(_OWORD *)(v33 + 56) = v41;
    *(void *)(v33 + 72) = v42;
    return 1;
  }
  v39[0] = "expected string";
  __int16 v40 = 259;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(&v41, a1, v4, v39);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if ((void)v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v49)
  {
    int v25 = (void **)__p;
    if (__p)
    {
      unint64_t v26 = v48;
      char v27 = __p;
      if (v48 != __p)
      {
        do
          unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        char v27 = __p;
      }
      uint64_t v48 = v25;
      operator delete(v27);
    }
    size_t v28 = v45;
    if (v45)
    {
      __int16 v29 = v46;
      std::string v30 = v45;
      if (v46 != v45)
      {
        do
        {
          long long v32 = (void *)*--v29;
          std::string v31 = v32;
          *__int16 v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        std::string v30 = v45;
      }
      uint64_t v46 = v28;
      operator delete(v30);
    }
    if (v43 != v44) {
      free(v43);
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = "expected '('";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 21, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 21)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 21;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ')'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 28, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRParen(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 28;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '['";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 22, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalLSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 22)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 22;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected ']'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 29, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalRSquare(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 29;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v3 = "expected '...'";
  __int16 v4 = 259;
  return mlir::detail::Parser::parseToken(v1, 17, (uint64_t)&v3);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalEllipsis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 == 17)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v6);
    uint64_t v4 = *(void *)(v1 + 8);
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v7;
  }
  return v3 == 17;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseFloat(void *a1, double *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 + 8);
  int v6 = *(_DWORD *)(v5 + 56);
  if (v6 == 24)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v5 + 8), (uint64_t)&v44);
    uint64_t v7 = *(void *)(v4 + 8);
    *(_OWORD *)(v7 + 56) = v44;
    *(void *)(v7 + 72) = v45;
    uint64_t v5 = *(void *)(a1[2] + 8);
  }
  long long v42 = *(_OWORD *)(v5 + 56);
  uint64_t v43 = *(void *)(v5 + 72);
  uint64_t Loc = (llvm::APFloatBase *)mlir::Token::getLoc((mlir::Token *)&v42);
  if (v42 == 10)
  {
    BOOL v17 = v6 == 24;
    LOBYTE(v44) = 0;
    char v47 = 0;
    uint64_t v18 = a1[2];
    uint64_t v19 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(Loc);
    uint64_t v20 = (llvm::APFloatBase *)mlir::detail::Parser::parseFloatFromIntegerLiteral(v18, (uint64_t)&v44, (mlir::Token *)&v42, v17, v19, 0x40u);
    if ((_BYTE)v20)
    {
      uint64_t v21 = a1[2];
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v21 + 8) + 8), (uint64_t)&v39);
      uint64_t v22 = *(void *)(v21 + 8);
      *(_OWORD *)(v22 + 56) = v39;
      *(void *)(v22 + 72) = v40;
      *a2 = llvm::APFloat::convertToDouble((void **)&v44);
      uint64_t v16 = 1;
      if (!v47) {
        return v16;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!v47) {
        return v16;
      }
    }
    unint64_t v37 = (void *)*((void *)&v44 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble(v20) == v37) {
      std::unique_ptr<llvm::APFloat []>::reset[abi:nn180100]((llvm::APFloatBase *)&v45);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v44 + 8));
    }
  }
  else
  {
    unint64_t v9 = Loc;
    if (v42 == 9)
    {
      uint64_t FloatingPointValue = mlir::Token::getFloatingPointValue((mlir::Token *)&v42);
      if (v11)
      {
        double v12 = *(double *)&FloatingPointValue;
        uint64_t v13 = a1[2];
        mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v13 + 8) + 8), (uint64_t)&v44);
        uint64_t v14 = *(void *)(v13 + 8);
        *(_OWORD *)(v14 + 56) = v44;
        *(void *)(v14 + 72) = v45;
        double v15 = -v12;
        if (v6 != 24) {
          double v15 = v12;
        }
        *a2 = v15;
        return 1;
      }
      *(void *)&long long v39 = "floating point value too large";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, v9, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        std::string v31 = (void **)__p;
        if (__p)
        {
          long long v32 = v52;
          uint64_t v33 = __p;
          if (v52 != __p)
          {
            do
              long long v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          uint64_t v52 = v31;
          operator delete(v33);
        }
        unint64_t v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        unint64_t v34 = v50;
        size_t v28 = v49;
        if (v50 == v49)
        {
LABEL_44:
          uint64_t v50 = v26;
          operator delete(v28);
LABEL_45:
          if (v46 != &v48) {
            free(v46);
          }
          return v16;
        }
        do
        {
          std::string v36 = (void *)*--v34;
          __int16 v35 = v36;
          *unint64_t v34 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v34 != v26);
LABEL_43:
        size_t v28 = v49;
        goto LABEL_44;
      }
    }
    else
    {
      *(void *)&long long v39 = "expected floating point literal";
      __int16 v41 = 259;
      (*(void (**)(long long *__return_ptr, void *, llvm::APFloatBase *, long long *))(*a1 + 24))(&v44, a1, Loc, &v39);
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
      if ((void)v44) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
      }
      if (v53)
      {
        uint64_t v23 = (void **)__p;
        if (__p)
        {
          uint64_t v24 = v52;
          int v25 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            int v25 = __p;
          }
          uint64_t v52 = v23;
          operator delete(v25);
        }
        unint64_t v26 = v49;
        if (!v49) {
          goto LABEL_45;
        }
        char v27 = v50;
        size_t v28 = v49;
        if (v50 == v49) {
          goto LABEL_44;
        }
        do
        {
          std::string v30 = (void *)*--v27;
          __int16 v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        goto LABEL_43;
      }
    }
  }
  return v16;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalInteger(uint64_t a1, llvm::APInt *a2)
{
  return mlir::detail::Parser::parseOptionalInteger(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCommaSeparatedList(uint64_t a1, int a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::Parser::parseCommaSeparatedList(*(void *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeyword(void *a1, const void **a2, const char *a3, const void ***a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  v28[0] = a2;
  v28[1] = a3;
  uint64_t v4 = *(void *)(a1[2] + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    (*(void (**)(void, void *, uint64_t, void))(**(void **)(v4 + 136) + 48))(*(void *)(v4 + 136), v28, 1, 0);
    return 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(void *, const void **, const char *))(*a1 + 376))(a1, a2, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v26 = "expected '";
      __int16 v27 = 259;
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, const char **))(*a1 + 24))(&v33, a1, v10, &v26);
      if (v33)
      {
        __int16 v32 = 261;
        __int16 v29 = a2;
        std::string v30 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v34, &v29);
        if (v33)
        {
          LODWORD(v29) = 3;
          std::string v30 = "'";
          uint64_t v31 = 1;
          double v12 = &v29;
          uint64_t v13 = (char *)v35;
          if (v36 >= v37)
          {
            unint64_t v24 = v36 + 1;
            if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
            {
              int64_t v25 = (char *)&v29 - (unsigned char *)v35;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              uint64_t v13 = (char *)v35;
              double v12 = (const void ***)((char *)v35 + v25);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
              double v12 = &v29;
              uint64_t v13 = (char *)v35;
            }
          }
          uint64_t v14 = &v13[24 * v36];
          long long v15 = *(_OWORD *)v12;
          *((void *)v14 + 2) = v12[2];
          *(_OWORD *)uint64_t v14 = v15;
          ++v36;
          if (v33) {
            mlir::Diagnostic::operator<<((uint64_t)v34, a4);
          }
        }
      }
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      }
      if (v43)
      {
        uint64_t v16 = (void **)__p;
        if (__p)
        {
          BOOL v17 = v42;
          uint64_t v18 = __p;
          if (v42 != __p)
          {
            do
              BOOL v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            uint64_t v18 = __p;
          }
          long long v42 = v16;
          operator delete(v18);
        }
        uint64_t v19 = v39;
        if (v39)
        {
          uint64_t v20 = v40;
          uint64_t v21 = v39;
          if (v40 != v39)
          {
            do
            {
              uint64_t v23 = (void *)*--v20;
              uint64_t v22 = v23;
              void *v20 = 0;
              if (v23) {
                operator delete[](v22);
              }
            }
            while (v20 != v19);
            uint64_t v21 = v39;
          }
          uint64_t v40 = v19;
          operator delete(v21);
        }
        if (v35 != v38) {
          free(v35);
        }
      }
    }
  }
  return v5;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *__s2, size_t __n)
{
  v12[0] = __s2;
  v12[1] = __n;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  int v8 = *(_DWORD *)(v7 + 56);
  if (v8 == 12 || v8 == 3)
  {
LABEL_9:
    if (*(void *)(v7 + 72) != __n || __n && memcmp(*(const void **)(v7 + 64), __s2, __n)) {
      return 0;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v7 + 8), (uint64_t)&v13);
    uint64_t v11 = *(void *)(v6 + 8);
    *(_OWORD *)(v11 + 56) = v13;
    *(void *)(v11 + 72) = v14;
    return 1;
  }
  if (v8 == 2)
  {
    (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(v7 + 136) + 48))(*(void *)(v7 + 136), v12, 1, 1);
    return 0;
  }
  BOOL result = mlir::Token::isKeyword((mlir::Token *)(v7 + 56));
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(v6 + 8);
    goto LABEL_9;
  }
  return result;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  int v5 = *(_DWORD *)(v4 + 56);
  if (v5 != 3 && v5 != 12)
  {
    BOOL result = mlir::Token::isKeyword((mlir::Token *)(v4 + 56));
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  }
  *a2 = *(_OWORD *)(v4 + 64);
  uint64_t v8 = *(void *)(a1 + 16);
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v8 + 8) + 8), (uint64_t)&v10);
  uint64_t v9 = *(void *)(v8 + 8);
  *(_OWORD *)(v9 + 56) = v10;
  *(void *)(v9 + 72) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeyword(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
  int v9 = *(_DWORD *)(v8 + 56);
  if (v9 == 12 || v9 == 3) {
    goto LABEL_9;
  }
  if (v9 == 2)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v8 + 136) + 48))(*(void *)(v8 + 136), a3, a4, 1);
    return 0;
  }
  BOOL result = mlir::Token::isKeyword((mlir::Token *)(v8 + 56));
  if (result)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
LABEL_9:
    double v12 = *(const void **)(v8 + 64);
    size_t v13 = *(void *)(v8 + 72);
    if (a4)
    {
      if (v13)
      {
        uint64_t v14 = 16 * a4;
        uint64_t v15 = a3;
        while (*(void *)(v15 + 8) != v13 || memcmp(*(const void **)v15, v12, v13))
        {
          v15 += 16;
          v14 -= 16;
          if (!v14) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v16 = 16 * a4;
        uint64_t v15 = a3;
        while (*(void *)(v15 + 8))
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
LABEL_20:
            uint64_t v15 = a3 + 16 * a4;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v15 = a3;
    }
    if (a4 == (v15 - a3) >> 4)
    {
      return 0;
    }
    else
    {
      *a2 = v12;
      a2[1] = v13;
      uint64_t v17 = *(void *)(a1 + 16);
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v17 + 8) + 8), (uint64_t)&v19);
      uint64_t v18 = *(void *)(v17 + 8);
      *(_OWORD *)(v18 + 56) = v19;
      *(void *)(v18 + 72) = v20;
      return 1;
    }
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalKeywordOrString(uint64_t a1, uint64_t a2)
{
  __src = 0;
  size_t __len = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 384))(a1, &__src)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a2);
  }
  uint64_t v4 = __src;
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v11 = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  size_t v5 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v8 = __len | 7;
    }
    size_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_13:
  }
    memmove(p_dst, v4, v5);
  *((unsigned char *)p_dst + v5) = 0;
  if (*(char *)(a2 + 23) < 0) {
LABEL_15:
  }
    operator delete(*(void **)a2);
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v11;
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  uint64_t v4 = mlir::detail::Parser::parseAttribute(*(mlir::StringAttr *****)(a1 + 16), a3);
  *a2 = v4;
  return v4 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomAttributeWithFallback(uint64_t a1, llvm::APFloatBase **a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 5)
  {
    uint64_t v7 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)v6, a3);
    *a2 = v7;
    return v7 != 0;
  }
  else
  {
    return a4(a5);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(mlir::detail::Parser **)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttribute(uint64_t a1, llvm::APFloatBase **a2, void *a3)
{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

{
  return mlir::detail::Parser::parseOptionalAttribute(*(void *)(a1 + 16), a2, a3);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDict(uint64_t a1, mlir::NamedAttrList *a2)
{
  uint64_t v2 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 20) {
    return mlir::detail::Parser::parseAttributeDict(v2, a2);
  }
  else {
    return 1;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalAttrDictWithKeyword(void *a1, mlir::NamedAttrList *a2)
{
  if (!(*(unsigned __int8 (**)(void *, const char *, uint64_t))(*a1 + 376))(a1, "attributes", 10)) {
    return 1;
  }
  uint64_t v4 = (mlir::detail::Parser *)a1[2];

  return mlir::detail::Parser::parseAttributeDict(v4, a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineMap(uint64_t a1, mlir::AffineMap *a2)
{
  return mlir::detail::Parser::parseAffineMapReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseAffineExpr(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return mlir::detail::Parser::parseAffineExprReference(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseIntegerSet(uint64_t a1, mlir::IntegerSet *a2)
{
  return mlir::detail::Parser::parseIntegerSetReference(*(mlir::detail::Parser **)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalSymbolName(void *a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1[2] + 8);
  long long v16 = *(_OWORD *)(v2 + 56);
  uint64_t v17 = *(void *)(v2 + 72);
  if (v16 != 4) {
    return 0;
  }
  size_t v5 = (mlir::StringAttr **)(*(uint64_t (**)(void *))(*a1 + 32))(a1);
  mlir::Token::getSymbolReference((mlir::Token *)&v16, &__p);
  __int16 v15 = 260;
  *(void *)&long long v13 = &__p;
  *a2 = mlir::Builder::getStringAttr(v5, (mlir::MLIRContext *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a1[2];
  mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(v6 + 8) + 8), (uint64_t)&v13);
  uint64_t v7 = *(void *)(v6 + 8);
  *(_OWORD *)(v7 + 56) = v13;
  *(void *)(v7 + 72) = v14;
  uint64_t v8 = *(void *)(*(void *)(a1[2] + 8) + 128);
  if (v8)
  {
    uint64_t v9 = mlir::SymbolRefAttr::get(*a2);
    *(void *)&long long v13 = mlir::Token::getLocRange((mlir::Token *)&v16);
    *((void *)&v13 + 1) = v10;
    mlir::AsmParserState::addUses(v8, v9, (char *)&v13, 1);
  }
  return 1;
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v3;
  return v3 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseCustomTypeWithFallback(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  size_t v5 = *(mlir::detail::Parser **)(a1 + 16);
  if (*(_DWORD *)(*((void *)v5 + 1) + 56) == 8)
  {
    uint64_t v6 = mlir::detail::Parser::parseType(v5);
    *a2 = v6;
    return v6 != 0;
  }
  else
  {
    return a3(a4);
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalType(uint64_t a1, mlir::Type *a2)
{
  return mlir::detail::Parser::parseOptionalType(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseArrowTypeList(mlir::detail::Parser **a1, uint64_t a2)
{
  return (*((unsigned __int8 (**)(mlir::detail::Parser **))*a1 + 7))(a1)
      && mlir::detail::Parser::parseFunctionResultTypes(a1[2], a2) != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalArrowTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 13) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseFunctionResultTypes(*(mlir::detail::Parser **)(a1 + 16), a2);
}

BOOL mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v7 = "expected ':'";
  __int16 v8 = 259;
  if (!mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v5 = mlir::detail::Parser::parseType(*(mlir::detail::Parser **)(a1 + 16));
  *a2 = v5;
  return v5 != 0;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = "expected ':'";
  __int16 v7 = 259;
  if (mlir::detail::Parser::parseToken(v4, 15, (uint64_t)&v6)) {
    return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseOptionalColonTypeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 15) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v8);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v8;
  *(void *)(v6 + 72) = v9;
  return mlir::detail::Parser::parseTypeListNoParens(*(void *)(a1 + 16), a2);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseDimensionList(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return mlir::detail::Parser::parseDimensionListRanked(*(mlir::detail::Parser **)(a1 + 16), a2, a3, a4);
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseXInDimensionList(uint64_t a1)
{
  return mlir::detail::Parser::parseXInDimensionList(*(mlir::detail::Parser **)(a1 + 16));
}

void mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseResourceHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)
    && (uint64_t v6 = (const mlir::OpAsmDialectInterface *)mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2)) != 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    mlir::detail::Parser::parseResourceHandle(*(mlir::detail::Parser **)(a1 + 16), v6, (llvm::StringRef *)&v37, (uint64_t)a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    __int16 v32 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v31, &v37);
    if (!v37) {
      goto LABEL_11;
    }
    LODWORD(v33) = 3;
    unint64_t v34 = "dialect '";
    uint64_t v35 = 9;
    long long v8 = &v33;
    uint64_t v9 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v27 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v29 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        uint64_t v9 = (char *)v39;
        long long v8 = (const void ***)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
        long long v8 = &v33;
        uint64_t v9 = (char *)v39;
      }
    }
    uint64_t v10 = &v9[24 * v40];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v40;
    if (!v37) {
      goto LABEL_11;
    }
    double v12 = *(const void ***)(a2 + 8);
    long long v13 = *(const char **)(a2 + 16);
    __int16 v36 = 261;
    uint64_t v33 = v12;
    unint64_t v34 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    if (v37)
    {
      LODWORD(v33) = 3;
      unint64_t v34 = "' does not expect resource handles";
      uint64_t v35 = 34;
      uint64_t v14 = &v33;
      __int16 v15 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v28 = v40 + 1;
        if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
        {
          int64_t v30 = (char *)&v33 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          __int16 v15 = (char *)v39;
          uint64_t v14 = (const void ***)((char *)v39 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
          uint64_t v14 = &v33;
          __int16 v15 = (char *)v39;
        }
      }
      long long v16 = &v15[24 * v40];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v40;
      uint64_t v18 = v37;
      *a3 = 0;
      a3[24] = 0;
      if (v18) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
    }
    else
    {
LABEL_11:
      *a3 = 0;
      a3[24] = 0;
    }
    if (v47)
    {
      long long v19 = (void **)__p;
      if (__p)
      {
        uint64_t v20 = v46;
        uint64_t v21 = __p;
        if (v46 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v46 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v43;
      if (v43)
      {
        uint64_t v23 = v44;
        unint64_t v24 = v43;
        if (v44 != v43)
        {
          do
          {
            unint64_t v26 = (void *)*--v23;
            int64_t v25 = v26;
            void *v23 = 0;
            if (v26) {
              operator delete[](v25);
            }
          }
          while (v23 != v22);
          unint64_t v24 = v43;
        }
        uint64_t v44 = v22;
        operator delete(v24);
      }
      if (v39 != v42) {
        free(v39);
      }
    }
  }
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::pushCyclicParsing(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 88), &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = *(unsigned int *)(v2 + 120);
    if (v5 >= *(_DWORD *)(v2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 112, (void *)(v2 + 128), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 120);
    }
    *(void *)(*(void *)(v2 + 112) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 120);
  }
  return v3;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::popCyclicParsing(uint64_t result)
{
  uint64_t v1 = *(int32x2_t **)(*(void *)(result + 16) + 8);
  __int32 v2 = v1[13].i32[0];
  if (v2)
  {
    int32x2_t v3 = v1[11];
    uint64_t v4 = v1[15].u32[0];
    uint64_t v5 = *(void *)(*(void *)&v1[14] + 8 * v4 - 8);
    __int32 v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      uint64_t *v8 = -8192;
      v1[12] = vadd_s32(v1[12], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          long long v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[15].i32[0] = v4 - 1;
  }
  else
  {
    --v1[15].i32[0];
  }
  return result;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::parseKeywordOrCompletion(mlir::AsmParser *a1, llvm::StringRef *a2)
{
  uint64_t v2 = *(void *)(*((void *)a1 + 2) + 8);
  if (*(_DWORD *)(v2 + 56) != 2 || *(void *)(v2 + 72)) {
    return mlir::AsmParser::parseKeyword(a1, a2);
  }
  *(void *)a2 = "";
  *((void *)a2 + 1) = 0;
  return 1;
}

uint64_t mlir::detail::AsmParserImpl<mlir::OpAsmParser>::codeCompleteExpectedTokens(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 16) + 8);
  if (*(_DWORD *)(v3 + 56) == 2 && !*(void *)(v3 + 72)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v3 + 136) + 48))(*(void *)(v3 + 136), a2, a3, 0);
  }
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalLocationSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_DWORD *)(v3 + 56) != 59) {
    return 1;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v12);
  uint64_t v6 = *(void *)(v2 + 8);
  *(_OWORD *)(v6 + 56) = v12;
  *(void *)(v6 + 72) = v13;
  uint64_t v15 = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)&long long v12 = "expected '(' in location";
  __int16 v14 = 259;
  if (mlir::detail::Parser::parseToken(v7, 21, (uint64_t)&v12))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (*(_DWORD *)(*(void *)(v8 + 8) + 56) == 5)
    {
        return 0;
    }
    else if (!mlir::detail::Parser::parseLocationInstance((mlir::UnknownLoc ****)v8, &v15))
    {
      return 0;
    }
    uint64_t v9 = *(void *)(a1 + 88);
    *(void *)&long long v12 = "expected ')' in location";
    __int16 v14 = 259;
    if (mlir::detail::Parser::parseToken(v9, 28, (uint64_t)&v12))
    {
      uint64_t v10 = v15;
      if (!*(unsigned char *)(a2 + 8)) {
        *(unsigned char *)(a2 + 8) = 1;
      }
      *(void *)a2 = v10;
      return 1;
    }
  }
  return 0;
}

uint64_t anonymous namespace'::CustomOpAsmParser::getResultName@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)(*(void *)(this + 32) + 16);
    uint64_t v5 = 32 * v3;
    while (1)
    {
      unsigned int v6 = a2 - *v4;
      if (a2 < *v4) {
        break;
      }
      v4 += 8;
      a2 = v6;
      v5 -= 32;
      if (!v5) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v4 - 4;
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v9 + 1);
    if (v8) {
      ++v7;
    }
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v8 - (v8 != 0);
    *(_DWORD *)(a3 + 16) = a2;
  }
  else
  {
LABEL_5:
    *(void *)a3 = "";
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
  }
  return this;
}

uint64_t anonymous namespace'::CustomOpAsmParser::getNumResults(_anonymous_namespace_::CustomOpAsmParser *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (int32x2_t *)*((void *)this + 4);
  unint64_t v3 = (v1 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (v3 >= 4)
  {
    unint64_t v6 = v3 + 1;
    uint64_t v7 = v6 & 3;
    if ((v6 & 3) == 0) {
      uint64_t v7 = 4;
    }
    unint64_t v8 = v6 - v7;
    uint64_t v5 = &v2[4 * v8];
    uint64_t v9 = v2 + 10;
    int64x2_t v10 = 0uLL;
    int64x2_t v11 = 0uLL;
    do
    {
      uint32x2_t v12 = (uint32x2_t)vzip1_s32(v9[-8], v9[-4]);
      int32x2_t v13 = v9[4];
      int32x2_t v14 = *v9;
      v9 += 16;
      int64x2_t v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, v12);
      int64x2_t v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, (uint32x2_t)vzip1_s32(v14, v13));
      v8 -= 4;
    }
    while (v8);
    uint64_t result = vaddvq_s64(vaddq_s64(v11, v10));
  }
  else
  {
    uint64_t result = 0;
    uint64_t v5 = v2;
  }
  uint64_t v15 = &v2[4 * v1];
  do
  {
    result += v5[2].u32[0];
    v5 += 4;
  }
  while (v5 != v15);
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseGenericOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(v3 + 8);
  long long v5 = *(_OWORD *)(v4 + 56);
  uint64_t v16 = *(void *)(v4 + 72);
  long long v14 = *(_OWORD *)(v3 + 400);
  long long v15 = v5;
  *(void *)(v3 + 400) = a2;
  *(void *)(v3 + 408) = a3;
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(*(void *)(v3 + 8) + 128);
    if (v7)
    {
      uint64_t LocRange = mlir::Token::getLocRange((mlir::Token *)&v15);
      uint64_t v10 = v9;
      uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(v3 + 8) + 56));
      mlir::AsmParserState::finalizeOperationDefinition(v7, v6, LocRange, v10, Loc, 0, 0);
    }
  }
  uint32x2_t v12 = (_OWORD *)(v3 + 400);
  if ((void)v14)
  {
    _OWORD *v12 = v14;
  }
  else
  {
    *(void *)uint32x2_t v12 = 0;
    *(void *)(v3 + 408) = 0;
  }
  return v6;
}

unint64_t anonymous namespace'::CustomOpAsmParser::parseCustomOperationName(_anonymous_namespace_::OperationParser **this)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, long long *a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = *(void *)(a1 + 88);
  long long v18 = *a3;
  uint64_t v19 = *((void *)a3 + 2);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  long long v14 = *a5;
  uint64_t v15 = *((void *)a5 + 2);
  uint64_t v13 = *((void *)a6 + 2);
  long long v12 = *a6;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOperand(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = 0;
  long long v8 = 0uLL;
    return 0;
  uint64_t v4 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  int v5 = v9;
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v5;
  return 1;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalOperand(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1[11] + 8);
  int v8 = *(_DWORD *)(v6 + 56);
  uint64_t v7 = v6 + 56;
  if (v8 == 6 || mlir::Token::isCodeCompletionFor(v7, 6)) {
    return (*(unsigned __int8 (**)(void *, uint64_t, uint64_t))(*a1 + 672))(a1, a2, a3) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOperandList(void *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  char v52 = a4;
  if (a3
    || (v9 = *(void *)(a1[11] + 8), long long v53 = *(_OWORD *)(v9 + 56), v54 = *(void *)(v9 + 72), v53 == 6)
    || mlir::Token::isCodeCompletionFor((uint64_t)&v53, 6))
  {
    v49[0] = a1;
    v49[1] = a2;
    void v49[2] = &v52;
    uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(a1[11] + 8) + 56));
    if (a5 != -1 && *(_DWORD *)(a2 + 8) != (uint64_t)a5)
    {
      v50[0] = "expected ";
      __int16 v51 = 259;
      (*(void (**)(void *__return_ptr, void *, uint64_t, void *))(*a1 + 24))(v55, a1, Loc, v50);
      if (v55[0])
      {
        LODWORD(v53) = 2;
        *((void *)&v53 + 1) = a5;
        int64x2_t v11 = (char *)&v53;
        long long v12 = (char *)v56;
        if (v57 >= v58)
        {
          unint64_t v44 = v57 + 1;
          if (v56 <= &v53 && (char *)v56 + 24 * v57 > (char *)&v53)
          {
            int64_t v47 = (char *)&v53 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            long long v12 = (char *)v56;
            int64x2_t v11 = (char *)v56 + v47;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v44, 24);
            int64x2_t v11 = (char *)&v53;
            long long v12 = (char *)v56;
          }
        }
        uint64_t v13 = &v12[24 * v57];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        uint64_t v15 = ++v57;
        if (v55[0])
        {
          LODWORD(v53) = 3;
          *((void *)&v53 + 1) = " operands";
          uint64_t v54 = 9;
          long long v16 = (char *)&v53;
          uint64_t v17 = (char *)v56;
          if (v15 >= v58)
          {
            unint64_t v45 = v15 + 1;
            BOOL v46 = (char *)v56 + 24 * v15 > (char *)&v53;
            if (v56 <= &v53 && v46)
            {
              int64_t v48 = (char *)&v53 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              uint64_t v17 = (char *)v56;
              long long v16 = (char *)v56 + v48;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
              long long v16 = (char *)&v53;
              uint64_t v17 = (char *)v56;
            }
          }
          long long v18 = &v17[24 * v57];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = *((void *)v16 + 2);
          *(_OWORD *)long long v18 = v19;
          ++v57;
        }
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      }
      if (v64)
      {
        uint64_t v21 = (void **)__p;
        if (__p)
        {
          uint64_t v22 = v63;
          uint64_t v23 = __p;
          if (v63 != __p)
          {
            do
              uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            uint64_t v23 = __p;
          }
          unint64_t v63 = v21;
          operator delete(v23);
        }
        unint64_t v24 = v60;
        if (!v60) {
          goto LABEL_61;
        }
        int64_t v25 = v61;
        unint64_t v26 = v60;
        if (v61 == v60)
        {
LABEL_60:
          int v61 = v24;
          operator delete(v26);
LABEL_61:
          if (v56 != v59) {
            free(v56);
          }
          return v20;
        }
        do
        {
          unint64_t v28 = (void *)*--v25;
          unint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v25 != v24);
LABEL_59:
        unint64_t v26 = v60;
        goto LABEL_60;
      }
      return v20;
    }
    return 1;
  }
  if ((a5 + 1) <= 1) {
    return 1;
  }
  if ((v53 - 21) > 1)
  {
    uint64_t v37 = a1[11];
    v50[0] = "expected operand";
    __int16 v51 = 259;
    mlir::detail::Parser::emitWrongTokenError(v37, (uint64_t)v50, v55);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      uint64_t v38 = (void **)__p;
      if (__p)
      {
        long long v39 = v63;
        unsigned int v40 = __p;
        if (v63 != __p)
        {
          do
            long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          unsigned int v40 = __p;
        }
        unint64_t v63 = v38;
        operator delete(v40);
      }
      unint64_t v24 = v60;
      if (!v60) {
        goto LABEL_61;
      }
      unsigned int v41 = v61;
      unint64_t v26 = v60;
      if (v61 == v60) {
        goto LABEL_60;
      }
      do
      {
        char v43 = (void *)*--v41;
        long long v42 = v43;
        *unsigned int v41 = 0;
        if (v43) {
          operator delete[](v42);
        }
      }
      while (v41 != v24);
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v30 = a1[11];
    v50[0] = "unexpected delimiter";
    __int16 v51 = 259;
    mlir::detail::Parser::emitError(v30, (uint64_t)v50, v55);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      uint64_t v31 = (void **)__p;
      if (__p)
      {
        __int16 v32 = v63;
        uint64_t v33 = __p;
        if (v63 != __p)
        {
          do
            __int16 v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        unint64_t v63 = v31;
        operator delete(v33);
      }
      unint64_t v24 = v60;
      if (!v60) {
        goto LABEL_61;
      }
      unint64_t v34 = v61;
      unint64_t v26 = v60;
      if (v61 == v60) {
        goto LABEL_60;
      }
      do
      {
        __int16 v36 = (void *)*--v34;
        uint64_t v35 = v36;
        *unint64_t v34 = 0;
        if (v36) {
          operator delete[](v35);
        }
      }
      while (v34 != v24);
      goto LABEL_59;
    }
  }
  return v20;
}

unint64_t anonymous namespace'::CustomOpAsmParser::resolveOperand(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 88);
  long long v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  if (result)
  {
    unint64_t v8 = result;
    uint64_t v9 = *(unsigned int *)(a4 + 8);
    if (v9 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v9) = v8;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  return result;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  __int16 v32 = v34;
  uint64_t v33 = 0x200000000;
  void v28[2] = &v32;
  __src = v31;
  uint64_t v30 = 0x100000000;
  v28[0] = a1;
  v28[1] = &__src;
  unint64_t v27 = 0;
  {
    if (v27)
    {
      uint64_t v13 = mlir::AffineMapAttr::get(v27);
      *a3 = v13;
      Nameduint64_t Attr = mlir::Builder::getNamedAttr(*(mlir::StringAttr ***)(a1 + 88), a4, a5, v13);
      mlir::NamedAttrList::push_back(a6, NamedAttr, v15);
    }
    long long v16 = v32;
    unint64_t v17 = v33;
    *(_DWORD *)(a2 + 8) = 0;
    if (v17 <= *(_DWORD *)(a2 + 12))
    {
      if (!v17)
      {
        int v21 = 0;
LABEL_11:
        uint64_t v22 = (v21 + v17);
        *(_DWORD *)(a2 + 8) = v22;
        uint64_t v23 = __src;
        uint64_t v24 = v30;
        unint64_t v25 = v30 + v22;
        if (v25 > *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v25, 32);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        if (v24)
        {
          memcpy((void *)(*(void *)a2 + 32 * v22), v23, 32 * v24);
          LODWORD(v22) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v22 + v24;
        uint64_t v19 = 1;
        uint64_t v20 = __src;
        if (__src != v31) {
          goto LABEL_16;
        }
        goto LABEL_17;
      }
      uint64_t v18 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 32);
      uint64_t v18 = *(unsigned int *)(a2 + 8);
    }
    memcpy((void *)(*(void *)a2 + 32 * v18), v16, 32 * v17);
    int v21 = *(_DWORD *)(a2 + 8);
    goto LABEL_11;
  }
  uint64_t v19 = 0;
  uint64_t v20 = __src;
  if (__src != v31) {
LABEL_16:
  }
    free(v20);
LABEL_17:
  if (v32 != v34) {
    free(v32);
  }
  return v19;
}

BOOL anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v5[0] = a1;
  v5[1] = a3;
  v5[2] = a2;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseArgument(mlir::AsmParser *a1, uint64_t a2, int a3, int a4)
{
  v13[9] = *MEMORY[0x1E4F143B8];
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  v13[8] = 4;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, void))(*(void *)a1 + 672))(a1, a2, 0)
    && (!a3 || (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 544))(a1, a2 + 32))
    && (!a4 || (*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(void *)a1 + 456))(a1, v12))
    && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 624))(a1, a2 + 48))
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    *(void *)(a2 + 40) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v12, Context);
    uint64_t v9 = 1;
    uint64_t v10 = v12[0];
    if (v12[0] == v13) {
      return v9;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v12[0];
  if (v12[0] != v13) {
LABEL_10:
  }
    free(v10);
  return v9;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalArgument(void *a1)
{
  if (*(_DWORD *)(*(void *)(a1[11] + 8) + 56) == 6) {
    return (*(unsigned __int8 (**)(void *))(*a1 + 720))(a1) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseArgumentList(void *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  char v8 = a4;
  char v7 = a5;
  if (!a3 && *(_DWORD *)(*(void *)(a1[11] + 8) + 56) != 6) {
    return 1;
  }
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = &v8;
  v6[3] = &v7;
}

BOOL anonymous namespace'::CustomOpAsmParser::parseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(void *a1)
{
  if (*(_DWORD *)(*(void *)(a1[11] + 8) + 56) == 20) {
    return (*(unsigned __int8 (**)(void *))(*a1 + 744))(a1) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalRegion(void *a1, mlir::Region **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)(a1[11] + 8) + 56) != 20) {
    return 0;
  }
  uint64_t v10 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v10 = v10;
  *((void *)v10 + 1) = v10;
  *((void *)v10 + 2) = 0;
  if ((*(unsigned __int8 (**)(void *, mlir::Region *, uint64_t, uint64_t, uint64_t))(*a1 + 744))(a1, v10, a3, a4, a5))
  {
    int64x2_t v11 = *a2;
    *a2 = v10;
    int v12 = 1;
    uint64_t v10 = v11;
    if (!v11) {
      return 257;
    }
  }
  else
  {
    int v12 = 0;
  }
  mlir::Region::~Region(v10);
  operator delete(v14);
  return v12 | 0x100u;
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseSuccessor(_anonymous_namespace_::OperationParser **this, mlir::Block **a2)
{
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalSuccessor(_anonymous_namespace_::CustomOpAsmParser *this, mlir::Block **a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 11) + 8);
  int v6 = *(_DWORD *)(v4 + 56);
  uint64_t v5 = v4 + 56;
  if (v6 == 7 || mlir::Token::isCodeCompletionFor(v5, 7)) {
    return (*(unsigned __int8 (**)(_anonymous_namespace_::CustomOpAsmParser *, mlir::Block **))(*(void *)this + 768))(this, a2) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseSuccessorAndUseList(void *a1, uint64_t a2, uint64_t a3)
{
  v59[16] = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned __int8 (**)(void *))(*a1 + 768))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(void *))(*a1 + 272))(a1)) {
    return 1;
  }
  uint64_t v5 = a1[11];
  unsigned int v57 = v59;
  uint64_t v58 = 0x400000000;
  {
    char v13 = 0;
    long long v14 = v57;
    if (v57 == v59) {
      return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
    }
    goto LABEL_23;
  }
  if (!v58)
  {
    char v13 = 1;
    long long v14 = v57;
    if (v57 == v59) {
      return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
    }
    goto LABEL_23;
  }
  uint64_t v54 = v56;
  uint64_t v55 = 0x400000000;
  *(void *)&long long v44 = "expected ':' in operand list";
  LOWORD(v46) = 259;
  if (!mlir::detail::Parser::parseToken(v5, 15, (uint64_t)&v44)
    || !mlir::detail::Parser::parseTypeListNoParens(v5, (uint64_t)&v54))
  {
    goto LABEL_19;
  }
  unsigned int v6 = v58;
  if (v58 == v55)
  {
    if (*(_DWORD *)(a3 + 12) < v58)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v58, 8);
      unsigned int v6 = v58;
    }
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 32 * v6;
      while (1)
      {
        long long v10 = *(_OWORD *)&v57[v8 / 8 + 2];
        long long v44 = *(_OWORD *)&v57[v8 / 8];
        *(_OWORD *)unint64_t v45 = v10;
        if (!v11) {
          break;
        }
        unint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          unint64_t v38 = v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          unint64_t v11 = v38;
          unint64_t v12 = *(unsigned int *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        v8 += 32;
        v7 += 8;
        if (v9 == v8) {
          goto LABEL_49;
        }
      }
LABEL_19:
      char v13 = 0;
      goto LABEL_20;
    }
LABEL_49:
    char v13 = 1;
  }
  else
  {
    long long v39 = "expected ";
    __int16 v40 = 259;
    mlir::detail::Parser::emitError(v5, (uint64_t)&v39, &v44);
    if ((void)v44)
    {
      int v41 = 5;
      unint64_t v42 = v58;
      long long v16 = &v41;
      unint64_t v17 = (char *)v45[1];
      if (v46 >= v47)
      {
        unint64_t v33 = v46 + 1;
        if (v45[1] <= &v41 && (char *)v45[1] + 24 * v46 > (char *)&v41)
        {
          int64_t v36 = (char *)&v41 - (char *)v45[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          unint64_t v17 = (char *)v45[1];
          long long v16 = (int *)((char *)v45[1] + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v33, 24);
          long long v16 = &v41;
          unint64_t v17 = (char *)v45[1];
        }
      }
      uint64_t v18 = &v17[24 * v46];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v46;
      if ((void)v44)
      {
        int v41 = 3;
        unint64_t v42 = (unint64_t)" types to match operand list";
        uint64_t v43 = 28;
        int v21 = &v41;
        uint64_t v22 = (char *)v45[1];
        if (v20 >= v47)
        {
          unint64_t v34 = v20 + 1;
          BOOL v35 = (char *)v45[1] + 24 * v20 > (char *)&v41;
          if (v45[1] <= &v41 && v35)
          {
            int64_t v37 = (char *)&v41 - (char *)v45[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            uint64_t v22 = (char *)v45[1];
            int v21 = (int *)((char *)v45[1] + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45[1], v48, v34, 24);
            int v21 = &v41;
            uint64_t v22 = (char *)v45[1];
          }
        }
        uint64_t v23 = &v22[24 * v46];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v46;
      }
    }
    char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
    if ((void)v44) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
    }
    if (v53)
    {
      unint64_t v25 = (void **)__p;
      if (__p)
      {
        unint64_t v26 = v52;
        unint64_t v27 = __p;
        if (v52 != __p)
        {
          do
            unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          unint64_t v27 = __p;
        }
        char v52 = v25;
        operator delete(v27);
      }
      unint64_t v28 = v49;
      if (v49)
      {
        int64_t v29 = v50;
        uint64_t v30 = v49;
        if (v50 != v49)
        {
          do
          {
            __int16 v32 = (void *)*--v29;
            uint64_t v31 = v32;
            *int64_t v29 = 0;
            if (v32) {
              operator delete[](v31);
            }
          }
          while (v29 != v28);
          uint64_t v30 = v49;
        }
        uint64_t v50 = v28;
        operator delete(v30);
      }
      if (v45[1] != v48) {
        free(v45[1]);
      }
    }
  }
LABEL_20:
  if (v54 != v56) {
    free(v54);
  }
  long long v14 = v57;
  if (v57 != v59) {
LABEL_23:
  }
    free(v14);
  return v13 && (*(unsigned __int8 (**)(void *))(*a1 + 280))(a1);
}

uint64_t anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned __int8 (**)(uint64_t *))(*a1 + 272))(a1))
  {
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = a3;
    int v6 = 1;
  }
  else
  {
    BOOL v7 = 0;
    int v6 = 0;
  }
  return v7 | (v6 << 8);
}

uint64_t anonymous namespace'::OperationParser::parseLocationAlias(uint64_t a1, uint64_t *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  long long v92 = *(_OWORD *)(v4 + 56);
  uint64_t v93 = *(void *)(v4 + 72);
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v98);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(v5 + 56) = v98;
  *(void *)(v5 + 72) = v99;
  uint64_t v6 = v93 != 0;
  if (v93) {
    BOOL v7 = (int8x16_t *)(*((void *)&v92 + 1) + 1);
  }
  else {
    BOOL v7 = (int8x16_t *)*((void *)&v92 + 1);
  }
  unint64_t v8 = (const unsigned __int8 *)(v93 - v6);
  if (v93 != v6)
  {
    uint64_t v9 = memchr(v7, 46, v93 - v6);
    if (v9 && v9 - (unsigned char *)v7 != -1)
    {
      uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)&v92);
      __int16 v91 = 257;
      uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc);
      mlir::emitError(EncodedSourceLocation, (uint64_t)&v88, (uint64_t)&v98);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(&v98);
      }
      if ((void)v98)
      {
        LODWORD(v94) = 3;
        __int16 v95 = "expected location, but found dialect attribute: '#";
        uint64_t v96 = 50;
        uint64_t v60 = (const void ***)&v94;
        int v61 = (char *)v100;
        if (v101 >= v102)
        {
          unint64_t v77 = v101 + 1;
          if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
          {
            int64_t v83 = (char *)&v94 - (unsigned char *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            int v61 = (char *)v100;
            uint64_t v60 = (const void ***)((char *)v100 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v77, 24);
            uint64_t v60 = (const void ***)&v94;
            int v61 = (char *)v100;
          }
        }
        char v62 = &v61[24 * v101];
        long long v63 = *(_OWORD *)v60;
        *((void *)v62 + 2) = v60[2];
        *(_OWORD *)char v62 = v63;
        ++v101;
        if ((void)v98)
        {
          __int16 v97 = 261;
          uint64_t v94 = v7;
          __int16 v95 = (const char *)v8;
          mlir::Diagnostic::operator<<((uint64_t)&v98 + 8, (const void ***)&v94);
          if ((void)v98)
          {
            LODWORD(v94) = 3;
            __int16 v95 = "'";
            uint64_t v96 = 1;
            char v64 = (const void ***)&v94;
            uint64_t v65 = (char *)v100;
            if (v101 >= v102)
            {
              unint64_t v78 = v101 + 1;
              if (v100 <= &v94 && (char *)v100 + 24 * v101 > (char *)&v94)
              {
                int64_t v84 = (char *)&v94 - (unsigned char *)v100;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                uint64_t v65 = (char *)v100;
                char v64 = (const void ***)((char *)v100 + v84);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v78, 24);
                char v64 = (const void ***)&v94;
                uint64_t v65 = (char *)v100;
              }
            }
            uint64_t v66 = &v65[24 * v101];
            long long v67 = *(_OWORD *)v64;
            *((void *)v66 + 2) = v64[2];
            *(_OWORD *)uint64_t v66 = v67;
            ++v101;
          }
        }
      }
      uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
      if ((void)v98) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
      }
      if (v108)
      {
        uint64_t v68 = (void **)__p;
        if (__p)
        {
          char v69 = v107;
          uint64_t v70 = __p;
          if (v107 != __p)
          {
            do
              char v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
            while (v69 != v68);
            uint64_t v70 = __p;
          }
          v107 = v68;
          operator delete(v70);
        }
        int v41 = v104;
        if (!v104) {
          goto LABEL_86;
        }
        __int16 v71 = v105;
        uint64_t v43 = v104;
        if (v105 == v104)
        {
LABEL_85:
          int v105 = v41;
          operator delete(v43);
LABEL_86:
          if (v100 != v103) {
            free(v100);
          }
          return v37;
        }
        do
        {
          char v73 = (void *)*--v71;
          uint64_t v72 = v73;
          void *v71 = 0;
          if (v73) {
            operator delete[](v72);
          }
        }
        while (v71 != v41);
LABEL_84:
        uint64_t v43 = v104;
        goto LABEL_85;
      }
      return v37;
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(uint64_t **)(v11 + 128);
  if (v12)
  {
    uint64_t LocRange = mlir::Token::getLocRange((mlir::Token *)&v92);
    mlir::AsmParserState::addAttrAliasUses(v12, v7, v8, LocRange, v14);
    uint64_t v11 = *(void *)(a1 + 8);
  }
  uint64_t v15 = *(void *)(v11 + 80);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v15, v7, v8);
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v15 + 8)
    || (v18 = *(void *)(*(void *)v15 + 8 * Key), (uint64_t v19 = *(void *)(v18 + 8)) == 0))
  {
    uint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 3);
    uint64_t v45 = mlir::UnknownLoc::get(***(mlir::UnknownLoc ****)(a1 + 8), v17);
    uint64_t v46 = mlir::Token::getLoc((mlir::Token *)&v92);
    uint64_t v47 = v46;
    char v49 = *(uint64_t **)(a1 + 368);
    unint64_t v48 = *(void *)(a1 + 376);
    if ((unint64_t)v49 >= v48)
    {
      char v53 = *(void **)(a1 + 360);
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v49 - v53) + 1;
      if (v54 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v53) >> 3);
      if (2 * v55 > v54) {
        unint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v57 = (char *)operator new(24 * v56);
      }
      else
      {
        unsigned int v57 = 0;
      }
      char v74 = (uint64_t *)&v57[8 * (v49 - v53)];
      uint64_t *v74 = v47;
      v74[1] = (uint64_t)v7;
      v74[2] = (uint64_t)v8;
      uint64_t v50 = v74 + 3;
      if (v49 != v53)
      {
        do
        {
          long long v75 = *(_OWORD *)(v49 - 3);
          *(v74 - 1) = *(v49 - 1);
          *(_OWORD *)(v74 - 3) = v75;
          v74 -= 3;
          v49 -= 3;
        }
        while (v49 != v53);
        char v49 = *(uint64_t **)(a1 + 360);
      }
      *(void *)(a1 + 360) = v74;
      *(void *)(a1 + 368) = v50;
      *(void *)(a1 + 376) = &v57[24 * v56];
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      uint64_t *v49 = v46;
      v49[1] = (uint64_t)v7;
      uint64_t v50 = v49 + 3;
      void v49[2] = (uint64_t)v8;
    }
    *(void *)(a1 + 368) = v50;
    return 1;
  }
  BOOL v20 = mlir::LocationAttr::classof(*(void *)(v18 + 8));
  if (v20) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = 0;
  }
  *a2 = v21;
  if (v20) {
    return 1;
  }
  uint64_t v22 = (const char *)mlir::Token::getLoc((mlir::Token *)&v92);
  __int16 v97 = 257;
  uint64_t v23 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v22);
  mlir::emitError(v23, (uint64_t)&v94, (uint64_t)&v98);
  if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v98);
  }
  if ((void)v98)
  {
    int v88 = 3;
    uint64_t v89 = "expected location, but found '";
    uint64_t v90 = 30;
    long long v24 = &v88;
    unint64_t v25 = (char *)v100;
    if (v101 >= v102)
    {
      unint64_t v79 = v101 + 1;
      if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
      {
        int64_t v85 = (char *)&v88 - (unsigned char *)v100;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        unint64_t v25 = (char *)v100;
        long long v24 = (int *)((char *)v100 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v79, 24);
        long long v24 = &v88;
        unint64_t v25 = (char *)v100;
      }
    }
    unint64_t v26 = &v25[24 * v101];
    long long v27 = *(_OWORD *)v24;
    *((void *)v26 + 2) = *((void *)v24 + 2);
    *(_OWORD *)unint64_t v26 = v27;
    ++v101;
    if ((void)v98)
    {
      unint64_t v28 = &v88;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v19);
      int64_t v29 = (char *)v100;
      if (v101 >= v102)
      {
        unint64_t v80 = v101 + 1;
        if (v100 <= &v88 && (char *)v100 + 24 * v101 > (char *)&v88)
        {
          int64_t v86 = (char *)&v88 - (unsigned char *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          int64_t v29 = (char *)v100;
          unint64_t v28 = (int *)((char *)v100 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v80, 24);
          unint64_t v28 = &v88;
          int64_t v29 = (char *)v100;
        }
      }
      uint64_t v30 = &v29[24 * v101];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      uint64_t v32 = ++v101;
      if ((void)v98)
      {
        int v88 = 3;
        uint64_t v89 = "'";
        uint64_t v90 = 1;
        unint64_t v33 = &v88;
        unint64_t v34 = (char *)v100;
        if (v32 >= v102)
        {
          unint64_t v81 = v32 + 1;
          BOOL v82 = (char *)v100 + 24 * v32 > (char *)&v88;
          if (v100 <= &v88 && v82)
          {
            int64_t v87 = (char *)&v88 - (unsigned char *)v100;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            unint64_t v34 = (char *)v100;
            unint64_t v33 = (int *)((char *)v100 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v103, v81, 24);
            unint64_t v33 = &v88;
            unint64_t v34 = (char *)v100;
          }
        }
        BOOL v35 = &v34[24 * v101];
        long long v36 = *(_OWORD *)v33;
        *((void *)v35 + 2) = *((void *)v33 + 2);
        *(_OWORD *)BOOL v35 = v36;
        ++v101;
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v98);
  if ((void)v98) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v98);
  }
  if (v108)
  {
    unint64_t v38 = (void **)__p;
    if (__p)
    {
      long long v39 = v107;
      __int16 v40 = __p;
      if (v107 != __p)
      {
        do
          long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        __int16 v40 = __p;
      }
      v107 = v38;
      operator delete(v40);
    }
    int v41 = v104;
    if (!v104) {
      goto LABEL_86;
    }
    unint64_t v42 = v105;
    uint64_t v43 = v104;
    if (v105 == v104) {
      goto LABEL_85;
    }
    do
    {
      char v52 = (void *)*--v42;
      __int16 v51 = v52;
      *unint64_t v42 = 0;
      if (v52) {
        operator delete[](v51);
      }
    }
    while (v42 != v41);
    goto LABEL_84;
  }
  return v37;
}

uint64_t anonymous namespace'::OperationParser::parseGenericOperationAfterOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v133[32] = *MEMORY[0x1E4F143B8];
  uint64_t v109 = a9;
  uint64_t v110 = a10;
  uint64_t v131 = v133;
  uint64_t v132 = 0x800000000;
  if (!*(unsigned char *)(a3 + 16))
  {
    *(void *)&long long v116 = "expected '(' to start operand list";
    LOWORD(v119) = 259;
    if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v116)) {
      goto LABEL_83;
    }
      goto LABEL_83;
    uint64_t v127 = "expected ')' to end operand list";
    __int16 v130 = 259;
    if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v127)) {
      goto LABEL_83;
    }
    uint64_t v18 = v132;
    if (*(unsigned char *)(a3 + 16))
    {
      *(void *)a3 = v131;
      *(void *)(a3 + 8) = v18;
    }
    else
    {
      *(void *)a3 = v131;
      *(void *)(a3 + 8) = v18;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  if (*(unsigned char *)(a4 + 16))
  {
    mlir::BlockRange::BlockRange(v114, *(void *)a4, *(void *)(a4 + 8));
    mlir::OperationState::addSuccessors((unsigned int *)a2, v114[0], v114[1]);
  }
  else if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 22)
  {
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>((void ***)(a2 + 8)) & 1) == 0)
    {
      uint64_t v127 = "successors in non-terminator";
      __int16 v130 = 259;
      mlir::detail::Parser::emitError(a1, (uint64_t)&v127, &v116);
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((void)v116) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      }
      if (!v126) {
        goto LABEL_84;
      }
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        uint64_t v22 = v125;
        uint64_t v23 = __p;
        if (v125 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        v125 = v21;
        operator delete(v23);
      }
      long long v24 = v122;
      if (v122)
      {
        unint64_t v25 = v123;
        unint64_t v26 = v122;
        if (v123 == v122) {
          goto LABEL_118;
        }
        do
        {
          unint64_t v28 = (void *)*--v25;
          long long v27 = v28;
          void *v25 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v25 != v24);
LABEL_117:
        unint64_t v26 = v122;
LABEL_118:
        v123 = v24;
        operator delete(v26);
      }
LABEL_119:
      if (v118 != v121) {
        free(v118);
      }
      goto LABEL_84;
    }
    uint64_t v127 = v129;
    uint64_t v128 = 0x200000000;
    *(void *)&long long v116 = "expected '['";
    LOWORD(v119) = 259;
    if (mlir::detail::Parser::parseToken(a1, 22, (uint64_t)&v116) {
      && (*(void *)&long long v116 = a1,
    }
          *((void *)&v116 + 1) = &v127,
    {
      mlir::BlockRange::BlockRange(v115, (uint64_t)v127, v128);
      mlir::OperationState::addSuccessors((unsigned int *)a2, v115[0], v115[1]);
      char v19 = 0;
    }
    else
    {
      char v19 = 1;
    }
    if (v127 != v129) {
      free(v127);
    }
    if (v19) {
      goto LABEL_83;
    }
  }
  if (a8)
  {
    *(void *)(a2 + 248) = a7;
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v29 + 56) == 23)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v29 + 8), (uint64_t)&v116);
      uint64_t v30 = *(void *)(a1 + 8);
      *(_OWORD *)(v30 + 56) = v116;
      *(void *)(v30 + 72) = v117;
      long long v31 = mlir::detail::Parser::parseAttribute((mlir::StringAttr ****)a1, 0);
      *(void *)(a2 + 248) = v31;
      if (!v31) {
        goto LABEL_83;
      }
      *(void *)&long long v116 = "expected '>' to close properties";
      LOWORD(v119) = 259;
      if (!mlir::detail::Parser::parseToken(a1, 19, (uint64_t)&v116)) {
        goto LABEL_83;
      }
    }
  }
  if (*(unsigned char *)(a5 + 16))
  {
    mlir::OperationState::addRegions((char *)a2, *(void *)a5, *(void *)(a5 + 8));
  }
  else
  {
    uint64_t v32 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v32 + 56) == 21)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v32 + 8), (uint64_t)&v116);
        uint64_t v33 = *(void *)(a1 + 8);
        *(_OWORD *)(v33 + 56) = v116;
        *(void *)(v33 + 72) = v117;
        unint64_t v34 = operator new(0x18uLL);
        BOOL v35 = mlir::Region::Region(v34, *(mlir::Operation **)(a1 + 416));
        *(void *)&long long v116 = v35;
        unint64_t v36 = *(unsigned int *)(a2 + 232);
        if (v36 >= *(unsigned int *)(a2 + 236))
        {
          llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(a2 + 224, &v116);
          uint64_t v37 = *(void *)(a2 + 224);
          unint64_t v38 = *(unsigned int *)(a2 + 232);
        }
        else
        {
          uint64_t v37 = *(void *)(a2 + 224);
          *(void *)(v37 + 8 * v36) = v35;
          unint64_t v38 = v36 + 1;
          *(_DWORD *)(a2 + 232) = v38;
        }
        uint64_t v32 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v32 + 56) != 16)
        {
          *(void *)&long long v116 = "expected ')' to end region list";
          LOWORD(v119) = 259;
          if (!mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v116)) {
            goto LABEL_83;
          }
          break;
        }
      }
    }
  }
  if (*(unsigned char *)(a6 + 16))
  {
    __int16 v40 = *(const void **)a6;
    uint64_t v39 = *(void *)(a6 + 8);
    *(void *)(a2 + 192) = 0;
    uint64_t v41 = *(unsigned int *)(a2 + 120);
    if (v39 + v41 > (unint64_t)*(unsigned int *)(a2 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), v39 + v41, 16);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    if (v39)
    {
      memcpy((void *)(*(void *)(a2 + 112) + 16 * v41), v40, 16 * v39);
      LODWORD(v41) = *(_DWORD *)(a2 + 120);
    }
    *(_DWORD *)(a2 + 120) = v41 + v39;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 20 {
         && !mlir::detail::Parser::parseAttributeDict((mlir::detail::Parser *)a1, (mlir::NamedAttrList *)(a2 + 112)))
  }
  {
    goto LABEL_83;
  }
  if ((_BYTE)v110)
  {
    uint64_t EncodedSourceLocation = *(void *)a2;
    goto LABEL_57;
  }
  *(void *)&long long v116 = "expected ':' followed by operation type";
  LOWORD(v119) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 15, (uint64_t)&v116)
    || (uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*(void *)(a1 + 8) + 56)),
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, Loc),
        (uint64_t v62 = mlir::detail::Parser::parseType((mlir::detail::Parser *)a1)) == 0))
  {
LABEL_83:
    uint64_t v20 = 0;
    goto LABEL_84;
  }
  if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    uint64_t v127 = "expected function type";
    __int16 v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((void)v116) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    }
    if (!v126) {
      goto LABEL_84;
    }
    long long v63 = (void **)__p;
    if (__p)
    {
      char v64 = v125;
      uint64_t v65 = __p;
      if (v125 != __p)
      {
        do
          char v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
        while (v64 != v63);
        uint64_t v65 = __p;
      }
      v125 = v63;
      operator delete(v65);
    }
    long long v24 = v122;
    if (v122)
    {
      uint64_t v66 = v123;
      unint64_t v26 = v122;
      if (v123 == v122) {
        goto LABEL_118;
      }
      do
      {
        char v69 = (void *)*--v66;
        uint64_t v68 = v69;
        void *v66 = 0;
        if (v69) {
          operator delete[](v68);
        }
      }
      while (v66 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  LOBYTE(v110) = 1;
  uint64_t v109 = v62;
LABEL_57:
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v109);
  uint64_t v45 = v44;
  size_t v46 = 8 * v44;
  uint64_t v47 = *(unsigned int *)(a2 + 72);
  unint64_t v48 = v47 + ((8 * v44) >> 3);
  if (v48 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v48, 8);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  if (v45)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v47), Results, v46);
    LODWORD(v47) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v47 + (v46 >> 3);
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v109);
  __int16 v51 = v50;
  char v52 = *(const char **)(a3 + 8);
  if (v50 != v52)
  {
    BOOL v70 = v52 == (const char *)1;
    __int16 v71 = "s";
    if (v70) {
      __int16 v71 = "";
    }
    char v72 = *v71;
    uint64_t v127 = "expected ";
    __int16 v130 = 259;
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v127, (uint64_t)&v116);
    if ((void)v116)
    {
      char v73 = *(const char **)(a3 + 8);
      int v111 = 5;
      v112 = v73;
      char v74 = &v111;
      long long v75 = (char *)v118;
      if (v119 >= v120)
      {
        unint64_t v98 = v119 + 1;
        if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
        {
          int64_t v104 = (char *)&v111 - (unsigned char *)v118;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          long long v75 = (char *)v118;
          char v74 = (int *)((char *)v118 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
          char v74 = &v111;
          long long v75 = (char *)v118;
        }
      }
      uint64_t v76 = &v75[24 * v119];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = *((void *)v74 + 2);
      *(_OWORD *)uint64_t v76 = v77;
      uint64_t v78 = ++v119;
      if ((void)v116)
      {
        int v111 = 3;
        v112 = " operand type";
        uint64_t v113 = 13;
        unint64_t v79 = &v111;
        unint64_t v80 = (char *)v118;
        if (v78 >= v120)
        {
          unint64_t v99 = v78 + 1;
          BOOL v100 = (char *)v118 + 24 * v78 > (char *)&v111;
          if (v118 <= &v111 && v100)
          {
            int64_t v105 = (char *)&v111 - (unsigned char *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            unint64_t v80 = (char *)v118;
            unint64_t v79 = (int *)((char *)v118 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v99, 24);
            unint64_t v79 = &v111;
            unint64_t v80 = (char *)v118;
          }
        }
        unint64_t v81 = &v80[24 * v119];
        long long v82 = *(_OWORD *)v79;
        *((void *)v81 + 2) = *((void *)v79 + 2);
        *(_OWORD *)unint64_t v81 = v82;
        ++v119;
        if ((void)v116)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v116 + 8, v72);
          if ((void)v116)
          {
            int v111 = 3;
            v112 = " but had ";
            uint64_t v113 = 9;
            int64_t v83 = &v111;
            int64_t v84 = (char *)v118;
            if (v119 >= v120)
            {
              unint64_t v101 = v119 + 1;
              if (v118 <= &v111 && (char *)v118 + 24 * v119 > (char *)&v111)
              {
                int64_t v106 = (char *)&v111 - (unsigned char *)v118;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                int64_t v84 = (char *)v118;
                int64_t v83 = (int *)((char *)v118 + v106);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v101, 24);
                int64_t v83 = &v111;
                int64_t v84 = (char *)v118;
              }
            }
            int64_t v85 = &v84[24 * v119];
            long long v86 = *(_OWORD *)v83;
            *((void *)v85 + 2) = *((void *)v83 + 2);
            *(_OWORD *)int64_t v85 = v86;
            uint64_t v87 = ++v119;
            if ((void)v116)
            {
              int v111 = 5;
              v112 = v51;
              int v88 = &v111;
              uint64_t v89 = (char *)v118;
              if (v87 >= v120)
              {
                unint64_t v102 = v87 + 1;
                BOOL v103 = (char *)v118 + 24 * v87 > (char *)&v111;
                if (v118 <= &v111 && v103)
                {
                  int64_t v107 = (char *)&v111 - (unsigned char *)v118;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  uint64_t v89 = (char *)v118;
                  int v88 = (int *)((char *)v118 + v107);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v102, 24);
                  int v88 = &v111;
                  uint64_t v89 = (char *)v118;
                }
              }
              uint64_t v90 = &v89[24 * v119];
              long long v91 = *(_OWORD *)v88;
              *((void *)v90 + 2) = *((void *)v88 + 2);
              *(_OWORD *)uint64_t v90 = v91;
              ++v119;
            }
          }
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if ((void)v116) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    }
    if (!v126) {
      goto LABEL_84;
    }
    long long v92 = (void **)__p;
    if (__p)
    {
      uint64_t v93 = v125;
      uint64_t v94 = __p;
      if (v125 != __p)
      {
        do
          uint64_t v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
        while (v93 != v92);
        uint64_t v94 = __p;
      }
      v125 = v92;
      operator delete(v94);
    }
    long long v24 = v122;
    if (v122)
    {
      __int16 v95 = v123;
      unint64_t v26 = v122;
      if (v123 == v122) {
        goto LABEL_118;
      }
      do
      {
        __int16 v97 = (void *)*--v95;
        uint64_t v96 = v97;
        *__int16 v95 = 0;
        if (v97) {
          operator delete[](v96);
        }
      }
      while (v95 != v24);
      goto LABEL_117;
    }
    goto LABEL_119;
  }
  if (v50)
  {
    char v53 = (uint64_t *)Inputs;
    uint64_t v54 = 0;
    uint64_t v55 = 32 * v50;
    do
    {
      unint64_t v56 = (_OWORD *)(*(void *)a3 + v54);
      long long v57 = v56[1];
      v108[0] = *v56;
      v108[1] = v57;
      unint64_t v59 = *(unsigned int *)(a2 + 24);
      if (v59 >= *(unsigned int *)(a2 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v59 + 1, 8);
        unint64_t v59 = *(unsigned int *)(a2 + 24);
      }
      *(void *)(*(void *)(a2 + 16) + 8 * v59) = v58;
      unsigned int v60 = *(_DWORD *)(a2 + 24) + 1;
      *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v60;
      if (!*(void *)(*(void *)(a2 + 16) + 8 * v60 - 8)) {
        goto LABEL_83;
      }
      v54 += 32;
      ++v53;
    }
    while (v55 != v54);
  }
  uint64_t v20 = 1;
LABEL_84:
  if (v131 != v133) {
    free(v131);
  }
  return v20;
}

uint64_t anonymous namespace'::OperationParser::parseOptionalSSAUseList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(v4 + 56);
  uint64_t v5 = v4 + 56;
  if (v6 != 6 && !mlir::Token::isCodeCompletionFor(v5, 6)) {
    return 1;
  }
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  {
    uint64_t v7 = *(unsigned int *)(a2 + 8);
    unint64_t v8 = *(void *)a2;
    uint64_t v9 = (char *)&v26;
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      unint64_t v23 = v7 + 1;
      BOOL v24 = v8 + 32 * v7 > (unint64_t)&v26;
      if (v8 <= (unint64_t)&v26 && v24)
      {
        unint64_t v25 = (char *)&v26 - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        unint64_t v8 = *(void *)a2;
        uint64_t v9 = &v25[*(void *)a2];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23, 32);
        unint64_t v8 = *(void *)a2;
        uint64_t v9 = (char *)&v26;
      }
    }
    long long v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a2 + 8));
    long long v11 = *((_OWORD *)v9 + 1);
    _OWORD *v10 = *(_OWORD *)v9;
    v10[1] = v11;
    ++*(_DWORD *)(a2 + 8);
    uint64_t v12 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v12 + 56) == 16)
    {
      while (1)
      {
        mlir::Lexer::lexToken((mlir::Lexer *)(v12 + 8), (uint64_t)&v26);
        uint64_t v13 = *(void *)(a1 + 8);
        *(_OWORD *)(v13 + 56) = v26;
        *(void *)(v13 + 72) = v27;
        long long v26 = 0uLL;
        uint64_t v27 = 0;
          return 0;
        uint64_t v14 = *(unsigned int *)(a2 + 8);
        unint64_t v15 = *(void *)a2;
        if (v14 >= *(_DWORD *)(a2 + 12))
        {
          unint64_t v19 = v14 + 1;
          BOOL v20 = v15 + 32 * v14 > (unint64_t)&v26;
          if (v15 <= (unint64_t)&v26 && v20)
          {
            uint64_t v21 = (char *)&v26 - v15;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
            unint64_t v15 = *(void *)a2;
            long long v16 = &v21[*(void *)a2];
            goto LABEL_9;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v19, 32);
          unint64_t v15 = *(void *)a2;
        }
        long long v16 = (char *)&v26;
LABEL_9:
        unint64_t v17 = (_OWORD *)(v15 + 32 * *(unsigned int *)(a2 + 8));
        long long v18 = *((_OWORD *)v16 + 1);
        *unint64_t v17 = *(_OWORD *)v16;
        v17[1] = v18;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v12 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v12 + 56) != 16) {
          return 1;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(void ***a1)
{
  {
    long long v11 = a1;
    a1 = v11;
    if (v3)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v13 = 84;
      unint64_t v4 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v4) {
        unint64_t v5 = v4;
      }
      else {
        unint64_t v5 = v13;
      }
      int v6 = &v12[v5];
      unint64_t v7 = v13 - v5;
      if (v13 - v5 >= 0x12) {
        uint64_t v8 = 18;
      }
      else {
        uint64_t v8 = v13 - v5;
      }
      unint64_t v9 = v7 - v8;
      if (v9 >= v9 - 1) {
        uint64_t v10 = v9 - 1;
      }
      else {
        uint64_t v10 = v9;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      a1 = v11;
    }
  }
  uint64_t v1 = *a1;
  if (v1[2] == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  else {
    return (*((uint64_t (**)(void **, uint64_t))*v1 + 4))(v1, mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
  }
}

uint64_t anonymous namespace'::OperationParser::parseRegion(_anonymous_namespace_::OperationParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 1);
  long long v12 = *(_OWORD *)(v6 + 56);
  uint64_t v13 = *(void *)(v6 + 72);
  v14[0] = (mlir::Block *)"expected '{' to begin a region";
  __int16 v16 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)a1, 20, (uint64_t)v14)) {
    return 0;
  }
  unint64_t v7 = *(mlir::AsmParserState **)(*((void *)a1 + 1) + 128);
  if (v7) {
    mlir::AsmParserState::startRegionDefinition(v7);
  }
  if (a4 || (uint64_t v8 = *((void *)a1 + 1), *(_DWORD *)(v8 + 56) != 27))
  {
    mlir::Token::getLoc((mlir::Token *)&v12);
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)v14);
  uint64_t v10 = *((void *)a1 + 1);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)v14;
  *(void *)(v10 + 72) = v15;
  uint64_t v11 = *(void *)(*((void *)a1 + 1) + 128);
  if (v11) {
    mlir::AsmParserState::finalizeRegionDefinition(v11);
  }
  return 1;
}

unint64_t anonymous namespace'::OperationParser::resolveSSAUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v84[2] = *MEMORY[0x1E4F143B8];
  uint64_t v55 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(v6 + 8);
  if (v9 <= v8)
  {
    unint64_t v30 = (v8 + 1);
    if (v9 != v30)
    {
      if (v9 <= v30)
      {
        if (*(_DWORD *)(v6 + 12) < v30)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v30, 16);
          unsigned int v9 = *(_DWORD *)(v7 + 8);
        }
        if (v9 != v30) {
          bzero((void *)(*(void *)v7 + 16 * v9), 16 * (v30 - v9));
        }
      }
      *(_DWORD *)(v7 + 8) = v30;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(*(void *)v6 + 16 * v8);
    if (v10)
    {
      if (a3 != (*(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(const char **)a2;
        v67[0] = (unint64_t)"use of value '";
        __int16 v68 = 259;
        uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v11);
        mlir::emitError(EncodedSourceLocation, (uint64_t)v67, (uint64_t)&v69);
        if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
          mlir::InFlightDiagnostic::abandon(&v69);
        }
        v84[0] = *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v69)
        {
          __int16 v83 = 261;
          uint64_t v13 = *(mlir::OpResult **)(a2 + 16);
          unint64_t v80 = *(const void ***)(a2 + 8);
          unint64_t v81 = v13;
          mlir::Diagnostic::operator<<((uint64_t)&v70, &v80);
          mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>((uint64_t)&v70, "' expects different type than prior uses: ", &v55, " vs ", v84);
        }
        uint64_t v14 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, *(const char **)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24) + 8));
        uint64_t v15 = mlir::Diagnostic::attachNote(&v70, v14, 1);
        uint64_t v16 = v15 + 16;
        unint64_t v17 = *(void *)(v15 + 16);
        LODWORD(v80) = 3;
        unint64_t v81 = (mlir::OpResult *)"prior use here";
        uint64_t v82 = 14;
        uint64_t v18 = *(unsigned int *)(v15 + 24);
        unint64_t v19 = &v80;
        if (v18 >= *(_DWORD *)(v15 + 28))
        {
          unint64_t v52 = v18 + 1;
          BOOL v53 = v17 + 24 * v18 > (unint64_t)&v80;
          if (v17 <= (unint64_t)&v80 && v53)
          {
            uint64_t v54 = (char *)&v80 - v17;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            unint64_t v17 = *(void *)(v15 + 16);
            unint64_t v19 = (const void ***)&v54[v17];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(v15 + 32), v52, 24);
            unint64_t v17 = *(void *)(v15 + 16);
            unint64_t v19 = &v80;
          }
        }
        uint64_t v20 = v17 + 24 * *(unsigned int *)(v15 + 24);
        long long v21 = *(_OWORD *)v19;
        *(void *)(v20 + 16) = v19[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++*(_DWORD *)(v15 + 24);
        if (v69) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
        }
        if (!v79) {
          return 0;
        }
        uint64_t v22 = (void **)__p;
        if (__p)
        {
          unint64_t v23 = v78;
          BOOL v24 = __p;
          if (v78 != __p)
          {
            do
              unint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            BOOL v24 = __p;
          }
          uint64_t v78 = v22;
          operator delete(v24);
        }
        unint64_t v25 = v75;
        if (v75)
        {
          long long v26 = v76;
          uint64_t v27 = v75;
          if (v76 != v75)
          {
            do
            {
              uint64_t v29 = (void *)*--v26;
              unint64_t v28 = v29;
              void *v26 = 0;
              if (v29) {
                operator delete[](v28);
              }
            }
            while (v26 != v25);
            uint64_t v27 = v75;
          }
          uint64_t v76 = v25;
          operator delete(v27);
        }
        uint64_t v50 = v72;
        if (v72 == v74) {
          return 0;
        }
        goto LABEL_58;
      }
      goto LABEL_37;
    }
  }
  if (**(void **)v7)
  {
    unint64_t v80 = **(const void ****)v7;
    char v69 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), (unint64_t *)&v80, &v69) & 1) == 0)
    {
      __int16 v40 = *(const char **)a2;
      char v69 = "reference to invalid result number";
      __int16 v73 = 259;
      uint64_t v41 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v40);
      mlir::emitError(v41, (uint64_t)&v69, (uint64_t)v59);
      if (*(_DWORD *)(*(void *)(a1 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(v59);
      }
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
      if (!v66) {
        return 0;
      }
      unint64_t v42 = (void **)v64;
      if (v64)
      {
        uint64_t v43 = v65;
        uint64_t v44 = v64;
        if (v65 != v64)
        {
          do
            uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = v64;
        }
        uint64_t v65 = v42;
        operator delete(v44);
      }
      uint64_t v45 = v62;
      if (v62)
      {
        size_t v46 = v63;
        uint64_t v47 = v62;
        if (v63 != v62)
        {
          do
          {
            char v49 = (void *)*--v46;
            unint64_t v48 = v49;
            void *v46 = 0;
            if (v49) {
              operator delete[](v48);
            }
          }
          while (v46 != v45);
          uint64_t v47 = v62;
        }
        long long v63 = v45;
        operator delete(v47);
      }
      uint64_t v50 = v60;
      if (v60 == &v61) {
        return 0;
      }
LABEL_58:
      free(v50);
      return 0;
    }
  }
  long long v31 = *(const char **)a2;
  uint64_t v58 = a3;
  mlir::OperationName::OperationName(&v57, "builtin.unrealized_conversion_cast", 34, ***(void ***)(a1 + 8));
  uint64_t v32 = mlir::Lexer::getEncodedSourceLocation(*(void *)(a1 + 8) + 8, v31);
  uint64_t v33 = v57;
  mlir::ValueRange::ValueRange((unint64_t *)&v80, (uint64_t)&v58, 1uLL);
  mlir::ValueRange::ValueRange(v67, 0, 0);
  char v69 = &v71;
  uint64_t v70 = 0x400000000;
  v74[5] = 4;
  mlir::BlockRange::BlockRange(v84, 0, 0);
  uint64_t v34 = mlir::Operation::create(v32, v33, (uint64_t)v80, v81, v67[0], v67[1], (mlir::NamedAttrList *)&v69, 0, v84[0], v84[1], 0);
  if (v69 != &v71) {
    free(v69);
  }
  unint64_t v10 = v34 - 16;
  unint64_t v56 = v10;
  char v69 = 0;
  char v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 336), &v56, &v69);
  unint64_t v36 = v69;
  if ((v35 & 1) == 0)
  {
    unint64_t v36 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(a1 + 336, (uint64_t)&v56, &v56, v69);
    *unint64_t v36 = v56;
    v36[1] = 0;
  }
  v36[1] = v31;
  uint64_t v37 = *(const char **)a2;
  unint64_t v38 = (unint64_t *)(*(void *)v7 + 16 * *(unsigned int *)(a2 + 24));
  *unint64_t v38 = v10;
  v38[1] = (unint64_t)v37;
LABEL_37:
  uint64_t v39 = *(void *)(*(void *)(a1 + 8) + 128);
  if (v39) {
    mlir::AsmParserState::addUses(v39, v10, (unsigned char **)a2, 1);
  }
  return v10;
}

uint64_t anonymous namespace'::OperationParser::parseSSAUse(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 2)
  {
    v64[0] = 0;
    v64[1] = 0;
    uint64_t v65 = 0;
    DWORD2(v70) = 0;
    char v74 = 0;
    uint64_t v75 = 0;
    int v76 = 1;
    char v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    *(void *)&long long v70 = &unk_1EC9A38B8;
    long long v77 = v64;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v70, 0, 0, 0);
    unsigned int v5 = *(_DWORD *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v63 = v6 + 88 * v5;
      while (1)
      {
        uint64_t v7 = *(uint64_t ***)v6;
        uint64_t v8 = *(unsigned int *)(v6 + 8);
        if (v8) {
          break;
        }
        unsigned int v9 = *(uint64_t ***)v6;
        uint64_t v14 = &v7[v8];
        if (v7 != v14) {
          goto LABEL_18;
        }
LABEL_4:
        v6 += 88;
        if (v6 == v63) {
          goto LABEL_61;
        }
      }
      unsigned int v9 = *(uint64_t ***)v6;
      if (*v7) {
        BOOL v10 = *v7 + 1 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        do
        {
          long long v12 = v9[1];
          ++v9;
          uint64_t v11 = v12;
          if (v12) {
            BOOL v13 = v11 + 1 == 0;
          }
          else {
            BOOL v13 = 1;
          }
        }
        while (v13);
      }
      uint64_t v14 = &v7[v8];
      if (v9 == v14) {
        goto LABEL_4;
      }
LABEL_18:
      uint64_t v15 = *v9;
      while (!*((_DWORD *)v15 + 4))
      {
        do
        {
LABEL_46:
          char v35 = v9[1];
          ++v9;
          uint64_t v15 = v35;
          if (v35) {
            BOOL v36 = v15 + 1 == 0;
          }
          else {
            BOOL v36 = 1;
          }
        }
        while (v36);
        if (v9 == v14) {
          goto LABEL_4;
        }
      }
      uint64_t v16 = *(void *)v15[1];
      if ((~*(_DWORD *)(v16 + 8) & 7) != 0) {
        unint64_t v17 = *(mlir::detail::OpResultImpl **)v15[1];
      }
      else {
        unint64_t v17 = 0;
      }
      if (v17)
      {
        int v18 = *(_DWORD *)(a1 + 352);
        if (v18)
        {
          uint64_t v19 = *(void *)(a1 + 336);
          {
            uint64_t v62 = v17;
            unint64_t v17 = v62;
            if (v37)
            {
              unint64_t v38 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v38 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v38;
              unint64_t v17 = v62;
            }
          }
          unint64_t v20 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ ((unint64_t)v17 >> 32));
          unint64_t v21 = 0x9DDFEA08EB382D69 * (((unint64_t)v17 >> 32) ^ (v20 >> 47) ^ v20);
          unsigned int v22 = (-348639895 * ((v21 >> 47) ^ v21)) & (v18 - 1);
          unint64_t v23 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v22);
          if (v23 == v17) {
            goto LABEL_40;
          }
          int v24 = 1;
          while (v23 != (mlir::detail::OpResultImpl *)-4096)
          {
            unsigned int v25 = v22 + v24++;
            unsigned int v22 = v25 & (v18 - 1);
            unint64_t v23 = *(mlir::detail::OpResultImpl **)(v19 + 16 * v22);
            if (v23 == v17) {
              goto LABEL_40;
            }
          }
        }
        unint64_t v69 = *(void *)(mlir::detail::OpResultImpl::getOwner(v17) + 48);
        mlir::OperationName::print((mlir::OperationName *)&v69, (llvm::raw_ostream *)&v70);
        if ((char *)v72 - v73 > (char *)1)
        {
          *(_WORD *)uint64_t v73 = 8250;
          v73 += 2;
          goto LABEL_40;
        }
        unint64_t v28 = (llvm::raw_ostream *)&v70;
        goto LABEL_37;
      }
      long long v26 = (_DWORD *)v73;
      if ((char *)v72 - v73 > (char *)4)
      {
        *(unsigned char *)(v73 + 4) = 35;
        _DWORD *v26 = 543650401;
        v73 += 5;
        unint64_t v28 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, *(unsigned int *)(v16 + 24));
        uint64_t v29 = (_WORD *)*((void *)v28 + 4);
        if (*((void *)v28 + 3) - (void)v29 > 1uLL)
        {
LABEL_38:
          *uint64_t v29 = 8250;
          *((void *)v28 + 4) += 2;
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v27 = llvm::raw_ostream::write((llvm::raw_ostream *)&v70, "arg #", 5uLL);
        unint64_t v28 = llvm::raw_ostream::operator<<(v27, *(unsigned int *)(v16 + 24));
        uint64_t v29 = (_WORD *)*((void *)v28 + 4);
        if (*((void *)v28 + 3) - (void)v29 > 1uLL) {
          goto LABEL_38;
        }
      }
LABEL_37:
      llvm::raw_ostream::write(v28, ": ", 2uLL);
LABEL_40:
      unint64_t v69 = *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v69, (llvm::raw_ostream *)&v70);
      if (*((_DWORD *)v15 + 4) >= 2u)
      {
        unint64_t v30 = (_DWORD *)v73;
        if ((char *)v72 - v73 > (char *)4)
        {
          *(unsigned char *)(v73 + 4) = 46;
          *unint64_t v30 = 774774828;
          v73 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v70, ", ...", 5uLL);
        }
      }
      uint64_t v31 = *(void *)(*(void *)(a1 + 8) + 136);
      uint64_t v32 = *v15;
      uint64_t v33 = v77;
      uint64_t v34 = v77[2];
      *(_OWORD *)std::string __p = *(_OWORD *)v77;
      __int16 v68 = v34;
      v77[1] = 0;
      v33[2] = 0;
      *uint64_t v33 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v31 + 32))(v31, v15 + 5, v32, __p);
      if (SHIBYTE(v68) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_46;
    }
LABEL_61:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v70);
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
    return 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 64);
  *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(void *)a2 = mlir::Token::getLoc((mlir::Token *)(*(void *)(a1 + 8) + 56));
  *(void *)&long long v70 = "expected SSA operand";
  LOWORD(v73) = 259;
  if (!mlir::detail::Parser::parseToken(a1, 6, (uint64_t)&v70)) {
    return 0;
  }
  uint64_t v41 = *(void *)(a1 + 8);
  int v43 = *(_DWORD *)(v41 + 56);
  unint64_t v42 = (mlir::Token *)(v41 + 56);
  if (v43 != 5) {
    return 1;
  }
  if (a3)
  {
    unint64_t HashIdentifierNumber = mlir::Token::getHashIdentifierNumber(v42);
    if ((HashIdentifierNumber & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = HashIdentifierNumber;
      mlir::Lexer::lexToken((mlir::Lexer *)(*(void *)(a1 + 8) + 8), (uint64_t)&v70);
      uint64_t v45 = *(void *)(a1 + 8);
      *(_OWORD *)(v45 + 56) = v70;
      *(void *)(v45 + 72) = v71;
      return 1;
    }
    v64[0] = "invalid SSA value result number";
    __int16 v66 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v64, &v70);
    uint64_t v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if ((void)v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v82)
    {
      unint64_t v56 = (void **)v80;
      if (v80)
      {
        uint64_t v57 = v81;
        uint64_t v58 = v80;
        if (v81 != v80)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          uint64_t v58 = v80;
        }
        unint64_t v81 = v56;
        operator delete(v58);
      }
      __int16 v51 = v78;
      if (!v78) {
        goto LABEL_96;
      }
      unint64_t v59 = v79;
      BOOL v53 = v78;
      if (v79 == v78)
      {
LABEL_95:
        char v79 = v51;
        operator delete(v53);
LABEL_96:
        if (v72 != &v74) {
          free(v72);
        }
        return v46;
      }
      do
      {
        uint64_t v61 = (void *)*--v59;
        unsigned int v60 = v61;
        *unint64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v51);
LABEL_94:
      BOOL v53 = v78;
      goto LABEL_95;
    }
  }
  else
  {
    v64[0] = "result number not allowed in argument list";
    __int16 v66 = 259;
    mlir::detail::Parser::emitError(a1, (uint64_t)v64, &v70);
    uint64_t v46 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if ((void)v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v82)
    {
      unint64_t v48 = (void **)v80;
      if (v80)
      {
        char v49 = v81;
        uint64_t v50 = v80;
        if (v81 != v80)
        {
          do
            char v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          uint64_t v50 = v80;
        }
        unint64_t v81 = v48;
        operator delete(v50);
      }
      __int16 v51 = v78;
      if (!v78) {
        goto LABEL_96;
      }
      unint64_t v52 = v79;
      BOOL v53 = v78;
      if (v79 == v78) {
        goto LABEL_95;
      }
      do
      {
        uint64_t v55 = (void *)*--v52;
        uint64_t v54 = v55;
        *unint64_t v52 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v52 != v51);
      goto LABEL_94;
    }
  }
  return v46;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      unint64_t v23 = a3;
      unint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        unint64_t v6 = 0x1E8EB8000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    int v10 = v3 - 1;
    unsigned int v11 = v9 & (v3 - 1);
    long long v12 = (void *)(v4 + 16 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        unsigned int v18 = v11 + v16++;
        unsigned int v11 = v18 & v10;
        long long v12 = (void *)(v4 + 16 * (v18 & v10));
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        long long v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseSuccessors(llvm::SmallVectorImpl<mlir::Block *> &)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(_anonymous_namespace_::OperationParser **)a1;
  unint64_t v8 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v8;
  uint64_t v6 = *(unsigned int *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
  }
  *(void *)(*(void *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  return v3;
}

uint64_t anonymous namespace'::OperationParser::parseSuccessor(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  int v4 = *((_DWORD *)v3 + 14);
  if (v4 == 7)
  {
    uint64_t v12 = v3[8];
    uint64_t v13 = v3[9];
    uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(v3 + 7));
    *(void *)&long long v56 = Loc;
    int v16 = *(_OWORD **)BlockInfoByName;
    if (!*(void *)BlockInfoByName)
    {
      int v16 = operator new(0x48uLL);
      _OWORD *v16 = 0u;
      v16[1] = 0u;
      *((void *)v16 + 4) = v16 + 2;
      *((void *)v16 + 5) = v16 + 2;
      *((void *)v16 + 7) = 0;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 6) = 0;
      *(void *)uint64_t BlockInfoByName = v16;
      *(void *)(BlockInfoByName + 8) = Loc;
      uint64_t v17 = *((void *)this + 34) + 24 * *((unsigned int *)this + 70);
      uint64_t v18 = *(void *)(v17 - 24);
      unsigned int v19 = *(_DWORD *)(v17 - 8);
      if (!v19) {
        goto LABEL_65;
      }
      unsigned int v20 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      unint64_t v21 = (void *)(v18 + 16 * v20);
      int v22 = (void *)*v21;
      if ((_OWORD *)*v21 != v16)
      {
        unint64_t v23 = 0;
        int v24 = 1;
        while (v22 != (void *)-4096)
        {
          if (v23) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v22 == (void *)-8192;
          }
          if (v25) {
            unint64_t v23 = v21;
          }
          unsigned int v26 = v20 + v24++;
          unsigned int v20 = v26 & (v19 - 1);
          unint64_t v21 = (void *)(v18 + 16 * v20);
          int v22 = (void *)*v21;
          if ((_OWORD *)*v21 == v16) {
            goto LABEL_47;
          }
        }
        if (v23) {
          unint64_t v42 = v23;
        }
        else {
          unint64_t v42 = v21;
        }
        int v43 = *(_DWORD *)(v17 - 16);
        if (4 * v43 + 4 < 3 * v19)
        {
          if (v19 + ~v43 - *(_DWORD *)(v17 - 12) > v19 >> 3)
          {
            uint64_t v36 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v36 == -4096)
            {
LABEL_46:
              *unint64_t v42 = v16;
              v42[1] = Loc;
              int v16 = *(_OWORD **)BlockInfoByName;
              goto LABEL_47;
            }
LABEL_45:
            --*(_DWORD *)(v17 - 12);
            goto LABEL_46;
          }
          BOOL v53 = v16;
LABEL_67:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v17 - 24, v19);
          uint64_t v44 = *(void *)(v17 - 24);
          int v45 = *(_DWORD *)(v17 - 8) - 1;
          unsigned int v46 = v45 & ((v53 >> 4) ^ (v53 >> 9));
          unint64_t v42 = (void *)(v44 + 16 * v46);
          uint64_t v47 = *v42;
          int v16 = v53;
          if ((_OWORD *)*v42 == v53)
          {
LABEL_68:
            ++*(_DWORD *)(v17 - 16);
            if (v53 == (_OWORD *)-4096) {
              goto LABEL_46;
            }
          }
          else
          {
            unint64_t v48 = 0;
            int v49 = 1;
            while (v47 != -4096)
            {
              if (v48) {
                BOOL v50 = 0;
              }
              else {
                BOOL v50 = v47 == -8192;
              }
              if (v50) {
                unint64_t v48 = v42;
              }
              unsigned int v51 = v46 + v49++;
              unsigned int v46 = v51 & v45;
              unint64_t v42 = (void *)(v44 + 16 * (v51 & v45));
              uint64_t v47 = *v42;
              if ((_OWORD *)*v42 == v53) {
                goto LABEL_68;
              }
            }
            if (v48) {
              unint64_t v42 = v48;
            }
            uint64_t v52 = *v42;
            ++*(_DWORD *)(v17 - 16);
            if (v52 == -4096) {
              goto LABEL_46;
            }
          }
          goto LABEL_45;
        }
LABEL_65:
        BOOL v53 = v16;
        v19 *= 2;
        goto LABEL_67;
      }
    }
LABEL_47:
    int v37 = *(uint64_t **)(*((void *)this + 1) + 128);
    if (v37)
    {
      mlir::AsmParserState::addUses(v37, (uint64_t)v16, (unsigned char **)&v56, 1);
      int v16 = *(_OWORD **)BlockInfoByName;
    }
    *a2 = (mlir::Block *)v16;
    mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v56);
    uint64_t v38 = *((void *)this + 1);
    *(_OWORD *)(v38 + 56) = v56;
    *(void *)(v38 + 72) = v57;
    return 1;
  }
  if (v4 == 2)
  {
    uint64_t v5 = v3[9];
    if (!v5 || v5 == 1 && *(unsigned char *)v3[8] == 94)
    {
      uint64_t v6 = *((void *)this + 26) + 24 * *((unsigned int *)this + 54);
      if (*(_DWORD *)(v6 - 16))
      {
        uint64_t v7 = *(uint64_t **)(v6 - 24);
        uint64_t v8 = *(unsigned int *)(v6 - 8);
        if (v8)
        {
          uint64_t v9 = 32 * v8;
          for (uint64_t i = v7; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; i += 4)
          {
            v9 -= 32;
            if (!v9) {
              return 0;
            }
          }
        }
        else
        {
          uint64_t i = v7;
        }
        uint64_t v39 = &v7[4 * v8];
        if (i != v39)
        {
          uint64_t v40 = *i;
          while (1)
          {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 40))(*(void *)(*((void *)this + 1) + 136), v40, i[1]);
            i += 4;
            if (i == v39) {
              break;
            }
            while (1)
            {
              uint64_t v40 = *i;
              if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL) {
                break;
              }
              i += 4;
              if (i == v39) {
                return 0;
              }
            }
            uint64_t v27 = 0;
            if (i == v39) {
              return v27;
            }
          }
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v54 = "expected block name";
    __int16 v55 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v54, &v56);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v56);
    if ((void)v56) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v56);
    }
    if (v64)
    {
      unint64_t v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v63;
        unint64_t v30 = __p;
        if (v63 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          unint64_t v30 = __p;
        }
        uint64_t v63 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v60;
      if (v60)
      {
        uint64_t v32 = v61;
        uint64_t v33 = v60;
        if (v61 != v60)
        {
          do
          {
            char v35 = (void *)*--v32;
            uint64_t v34 = v35;
            *uint64_t v32 = 0;
            if (v35) {
              operator delete[](v34);
            }
          }
          while (v32 != v31);
          uint64_t v33 = v60;
        }
        uint64_t v61 = v31;
        operator delete(v33);
      }
      if (v58 != &v59) {
        free(v58);
      }
    }
  }
  return v27;
}

uint64_t anonymous namespace'::OperationParser::getBlockInfoByName(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  uint64_t v4 = a1 + 24 * a2;
  uint64_t v33 = 0;
  uint64_t v6 = v33;
  if ((v5 & 1) == 0)
  {
    uint64_t v34 = v33;
    int v7 = *(_DWORD *)(v4 - 16);
    uint64_t v8 = *(unsigned int *)(v4 - 8);
    if (4 * v7 + 4 >= (3 * v8))
    {
      int v9 = 2 * v8;
    }
    else
    {
      int v9 = *(_DWORD *)(v4 - 8);
      if ((int)v8 + ~v7 - *(_DWORD *)(v4 - 12) > v8 >> 3)
      {
        *(_DWORD *)(v4 - 16) = v7 + 1;
        if (*(void *)v6 == -1)
        {
LABEL_6:
          *(_OWORD *)uint64_t v6 = v32;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
          return v6 + 16;
        }
LABEL_5:
        --*(_DWORD *)(v4 - 12);
        goto LABEL_6;
      }
    }
    unsigned int v11 = *(llvm **)(v4 - 24);
    unint64_t v12 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    int v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 64;
    }
    *(_DWORD *)(v4 - 8) = v15;
    buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
    *(void *)(v4 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = buffer;
    if (v11)
    {
      *(void *)(v4 - 16) = 0;
      uint64_t v17 = *(unsigned int *)(v4 - 8);
      if (v17)
      {
        uint64_t v18 = buffer;
        if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_18;
        }
        uint64_t v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
        uint64_t v18 = &buffer[2 * (v19 & 0xFFFFFFFFFFFFFFELL)];
        unsigned int v20 = buffer + 2;
        uint64_t v21 = v19 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          *(v20 - 2) = xmmword_1810FFA60;
          _OWORD *v20 = xmmword_1810FFA60;
          v20 += 4;
          v21 -= 2;
        }
        while (v21);
        if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_18:
          int v22 = &buffer[2 * v17];
          do
          {
            _OWORD *v18 = xmmword_1810FFA60;
            v18 += 2;
          }
          while (v18 != v22);
        }
      }
      unint64_t v23 = (void *)(32 * v8);
      if (v8)
      {
        uint64_t v24 = 32 * v8;
        BOOL v25 = v11;
        do
        {
          if (*(void *)v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            char v35 = 0;
            unsigned int v26 = v35;
            *char v35 = *(_OWORD *)v25;
            v26[1] = *((_OWORD *)v25 + 1);
            ++*(_DWORD *)(v4 - 16);
          }
          BOOL v25 = (llvm *)((char *)v25 + 32);
          v24 -= 32;
        }
        while (v24);
      }
      llvm::deallocate_buffer(v11, v23);
    }
    *(void *)(v4 - 16) = 0;
    uint64_t v27 = *(unsigned int *)(v4 - 8);
    if (v27)
    {
      unint64_t v28 = buffer;
      if (((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_36;
      }
      uint64_t v29 = ((v27 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      unint64_t v28 = &buffer[2 * (v29 & 0xFFFFFFFFFFFFFFELL)];
      unint64_t v30 = buffer + 2;
      uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 2) = xmmword_1810FFA60;
        *unint64_t v30 = xmmword_1810FFA60;
        v30 += 4;
        v31 -= 2;
      }
      while (v31);
      if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *unint64_t v28 = xmmword_1810FFA60;
          v28 += 2;
        }
        while (v28 != &buffer[2 * v27]);
      }
    }
    uint64_t v6 = v34;
    ++*(_DWORD *)(v4 - 16);
    if (*(void *)v6 == -1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  return v6 + 16;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>,llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,anonymous namespace'::OperationParser::BlockDefinition>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    unsigned int v15 = 0;
    uint64_t result = 0;
    goto LABEL_80;
  }
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a3, *(void *)(a3 + 8));
  unsigned int v9 = a2 - 1;
  int v10 = *(void **)a3;
  size_t v11 = *(void *)(a3 + 8);
  if (!v11)
  {
    if (v10 == (void *)-2)
    {
      unint64_t v12 = 0;
      int v20 = 1;
      uint64_t v21 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v21);
      int v22 = (const void *)*v15;
      if (*v15 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v22 != (const void *)-2 && v15[1])
      {
LABEL_21:
        while (v22 != (const void *)-1)
        {
          if (v12) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v22 == (const void *)-2;
          }
          if (v23) {
            unint64_t v12 = v15;
          }
          int v24 = v20 + v21;
          ++v20;
          uint64_t v21 = v24 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v21);
          int v22 = (const void *)*v15;
          if (*v15 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      if (v10 != (void *)-1)
      {
        unint64_t v12 = 0;
        int v40 = 1;
        uint64_t v41 = HashValue & v9;
        unsigned int v15 = (void *)(a1 + 32 * v41);
        uint64_t v42 = *v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_74;
        }
        while (v42 != -1)
        {
          if (v12) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -2;
          }
          if (v45) {
            unint64_t v12 = v15;
          }
          int v46 = v40 + v41;
          ++v40;
          uint64_t v41 = v46 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v41);
          uint64_t v42 = *v15;
          if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_74:
            if (!v15[1]) {
              goto LABEL_79;
            }
          }
        }
        goto LABEL_76;
      }
      unint64_t v12 = 0;
      int v32 = 1;
      uint64_t v33 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v33);
      uint64_t v34 = *v15;
      if (*v15 == -2) {
        goto LABEL_46;
      }
LABEL_44:
      if (v34 != -1 && v15[1])
      {
LABEL_46:
        while (v34 != -1)
        {
          if (v12) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v34 == -2;
          }
          if (v35) {
            unint64_t v12 = v15;
          }
          int v36 = v32 + v33;
          ++v32;
          uint64_t v33 = v36 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v33);
          uint64_t v34 = *v15;
          if (*v15 != -2) {
            goto LABEL_44;
          }
        }
        goto LABEL_76;
      }
    }
    goto LABEL_79;
  }
  if (v10 != (void *)-2)
  {
    if (v10 != (void *)-1)
    {
      __s1 = v10;
      unint64_t v12 = 0;
      int v37 = 1;
      uint64_t v38 = HashValue & v9;
      unsigned int v15 = (void *)(a1 + 32 * v38);
      uint64_t v39 = (const void *)*v15;
      if (*v15 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_64;
      }
      while (v39 != (const void *)-1)
      {
        if (v12) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v39 == (const void *)-2;
        }
        if (v43) {
          unint64_t v12 = v15;
        }
        int v44 = v37 + v38;
        ++v37;
        uint64_t v38 = v44 & v9;
        unsigned int v15 = (void *)(a1 + 32 * v38);
        uint64_t v39 = (const void *)*v15;
        if (*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_64:
          if (v11 == v15[1] && !memcmp(__s1, v39, v11)) {
            goto LABEL_79;
          }
        }
      }
      goto LABEL_76;
    }
    unint64_t v12 = 0;
    int v25 = 1;
    uint64_t v26 = HashValue & v9;
    unsigned int v15 = (void *)(a1 + 32 * v26);
    uint64_t v27 = (const void *)*v15;
    if (*v15 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v27 != (const void *)-1)
    {
      if (v11 != v15[1] || (int v28 = v25, v29 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v27, v11), v25 = v28, v29))
      {
LABEL_34:
        while (v27 != (const void *)-1)
        {
          if (v12) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == (const void *)-2;
          }
          if (v30) {
            unint64_t v12 = v15;
          }
          int v31 = v25 + v26;
          ++v25;
          uint64_t v26 = v31 & v9;
          unsigned int v15 = (void *)(a1 + 32 * v26);
          uint64_t v27 = (const void *)*v15;
          if (*v15 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_76;
      }
    }
LABEL_79:
    uint64_t result = 1;
    goto LABEL_80;
  }
  unint64_t v12 = 0;
  int v13 = 1;
  uint64_t v14 = HashValue & v9;
  unsigned int v15 = (void *)(a1 + 32 * v14);
  int v16 = (const void *)*v15;
  if (*v15 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v16 == (const void *)-2 || v11 == v15[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v16, v11)) {
    goto LABEL_79;
  }
LABEL_8:
  while (v16 != (const void *)-1)
  {
    if (v12) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v16 == (const void *)-2;
    }
    if (v17) {
      unint64_t v12 = v15;
    }
    int v18 = v13 + v14;
    ++v13;
    uint64_t v14 = v18 & v9;
    unsigned int v15 = (void *)(a1 + 32 * v14);
    int v16 = (const void *)*v15;
    if (*v15 != -1) {
      goto LABEL_5;
    }
  }
LABEL_76:
  uint64_t result = 0;
  if (v12) {
    unsigned int v15 = v12;
  }
LABEL_80:
  *a4 = v15;
  return result;
}

void *llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      BOOL v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if ((*(void *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          BOOL v23 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v26 = *v23;
          if (v24 != *v23)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              BOOL v23 = (void *)(*(void *)a1 + 16 * (v30 & v16));
              uint64_t v26 = *v23;
              if (v24 == *v23) {
                goto LABEL_23;
              }
            }
            if (v27) {
              BOOL v23 = v27;
            }
          }
LABEL_23:
          void *v23 = v24;
          v23[1] = *((void *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        BOOL v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    int v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      void *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      int v22 = &result[2 * v18];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>(uint64_t a1, void *a2)
{
  unint64_t v28 = 0;
  uint64_t v4 = (char *)(a1 + 16);
  unint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v28);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = 8 * v6;
  *(void *)&v5[8 * v6] = *a2;
  unsigned int v8 = *(char **)a1;
  unsigned int v9 = *(char **)a1;
  if (!v6) {
    goto LABEL_19;
  }
  unint64_t v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v10 < 0xB)
  {
    uint64_t v11 = v5;
LABEL_12:
    int v20 = &v8[v7];
    do
    {
      uint64_t v21 = *(void *)v9;
      *(void *)unsigned int v9 = 0;
      v9 += 8;
      *(void *)uint64_t v11 = v21;
      v11 += 8;
    }
    while (v9 != v20);
    goto LABEL_14;
  }
  BOOL v12 = v8 >= &v5[v7] || v5 >= &v8[v7];
  uint64_t v11 = v5;
  if (!v12) {
    goto LABEL_12;
  }
  unint64_t v13 = v10 + 1;
  uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v11 = &v5[v14];
  unsigned int v9 = &v8[v14];
  int v15 = (long long *)(v8 + 16);
  int v16 = v5 + 16;
  uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v18 = *(v15 - 1);
    long long v19 = *v15;
    *(v15 - 1) = 0uLL;
    long long *v15 = 0uLL;
    *(v16 - 1) = v18;
    _OWORD *v16 = v19;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v22 = *(void *)a1 - 8;
  do
  {
    BOOL v23 = *(mlir::Region **)(v22 + v7);
    *(void *)(v22 + v7) = 0;
    if (v23)
    {
      mlir::Region::~Region(v23);
      operator delete(v24);
    }
    v7 -= 8;
  }
  while (v7);
  unsigned int v9 = *(char **)a1;
LABEL_19:
  int v25 = v28;
  if (v9 != v4) {
    free(v9);
  }
  *(void *)a1 = v5;
  unsigned int v26 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 12) = v25;
  return (uint64_t)&v5[8 * v26 - 8];
}

uint64_t anonymous namespace'::OperationParser::parseBlock(_anonymous_namespace_::OperationParser *this, mlir::Block **a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)this + 1);
  if (*a2 && *(_DWORD *)(v5 + 56) != 7)
  {
    *((void *)this + 50) = v4;
    *((void *)this + 51) = v4 + 2;
    while (1)
    {
      int v28 = *(_DWORD *)(*((void *)this + 1) + 56);
      if (v28 == 7 || v28 == 27) {
        break;
      }
        return 0;
    }
    return 1;
  }
  uint64_t Loc = (char *)mlir::Token::getLoc((mlir::Token *)(v5 + 56));
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = *(const void ***)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  __int16 v55 = "expected block name";
  LOWORD(v58) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 7, (uint64_t)&v55)) {
    return 0;
  }
  uint64_t v11 = BlockInfoByName;
  BlockInfoByName[1] = Loc;
  uint64_t v12 = *BlockInfoByName;
  if (!*BlockInfoByName)
  {
    int v20 = *a2;
    if (*a2)
    {
      uint64_t v21 = 0;
      *uint64_t BlockInfoByName = v20;
      uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 128);
      if (!v22) {
        goto LABEL_9;
      }
    }
    else
    {
      int v20 = operator new(0x48uLL);
      _OWORD *v20 = 0u;
      v20[1] = 0u;
      *((void *)v20 + 4) = v20 + 2;
      *((void *)v20 + 5) = v20 + 2;
      *((void *)v20 + 7) = 0;
      *((void *)v20 + 8) = 0;
      *((void *)v20 + 6) = 0;
      uint64_t v21 = (mlir::Block *)v20;
      void *v11 = v20;
      uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 128);
      if (!v22)
      {
LABEL_9:
        *a2 = (mlir::Block *)v20;
        if (*(_DWORD *)(*((void *)this + 1) + 56) != 21 {
          || (BOOL v50 = (const void **)v20,
        }
              BOOL v54 = ((*((void *)v20 + 7) - *((void *)v20 + 6)) & 0x7FFFFFFF8) != 0,
              LODWORD(v48[0]) = 0,
              __int16 v55 = (const char *)this,
              v56[0] = &v54,
              v56[1] = v48,
              uint64_t v57 = &v50,
        {
          __int16 v55 = "expected ':' after block name";
          LOWORD(v58) = 259;
          if (mlir::detail::Parser::parseToken((uint64_t)this, 15, (uint64_t)&v55))
          {
            BOOL v23 = (char *)*a2 + 32;
            *((void *)this + 50) = *a2;
            *((void *)this + 51) = v23;
            do
            {
              int v24 = *(_DWORD *)(*((void *)this + 1) + 56);
              if (v24 == 7 || v24 == 27) {
                return 1;
              }
            }
          }
        }
        if (v21)
        {
          mlir::Block::dropAllDefinedValueUses(v21);
          mlir::Block::~Block(v21);
          operator delete(v26);
          return 0;
        }
        return 0;
      }
    }
LABEL_8:
    mlir::AsmParserState::addDefinition(v22, (uint64_t)v20, Loc);
    int v20 = (_OWORD *)*v11;
    goto LABEL_9;
  }
  uint64_t v13 = *((void *)this + 34) + 24 * *((unsigned int *)this + 70);
  int v14 = *(_DWORD *)(v13 - 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 - 24);
    unsigned int v16 = v14 - 1;
    LODWORD(v17) = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    long long v18 = (uint64_t *)(v15 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18 == v12)
    {
LABEL_7:
      uint64_t *v18 = -8192;
      *(int32x2_t *)(v13 - 16) = vadd_s32(*(int32x2_t *)(v13 - 16), (int32x2_t)0x1FFFFFFFFLL);
      int v20 = (_OWORD *)*BlockInfoByName;
      uint64_t v21 = (mlir::Block *)*BlockInfoByName;
      uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 128);
      if (!v22) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v31 = 1;
    while (v19 != -4096)
    {
      int v32 = v17 + v31++;
      uint64_t v17 = v32 & v16;
      uint64_t v19 = *(void *)(v15 + 16 * v17);
      if (v19 == v12)
      {
        long long v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_7;
      }
    }
  }
  v48[0] = "redefinition of block '";
  __int16 v49 = 259;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*((void *)this + 1) + 8, Loc);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v48, (uint64_t)&v55);
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(&v55);
  }
  if (v55)
  {
    __int16 v53 = 261;
    BOOL v50 = v8;
    unsigned int v51 = (const char *)v9;
    mlir::Diagnostic::operator<<((uint64_t)v56, &v50);
    if (v55)
    {
      LODWORD(v50) = 3;
      unsigned int v51 = "'";
      uint64_t v52 = 1;
      uint64_t v34 = &v50;
      BOOL v35 = (char *)v57;
      if (v58 >= v59)
      {
        unint64_t v46 = v58 + 1;
        if (v57 <= &v50 && (char *)v57 + 24 * v58 > (char *)&v50)
        {
          int64_t v47 = (char *)&v50 - (unsigned char *)v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v46, 24);
          BOOL v35 = (char *)v57;
          uint64_t v34 = (const void ***)((char *)v57 + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v46, 24);
          uint64_t v34 = &v50;
          BOOL v35 = (char *)v57;
        }
      }
      int v36 = &v35[24 * v58];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = v34[2];
      *(_OWORD *)int v36 = v37;
      ++v58;
    }
  }
  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
  if (v55) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
  }
  if (v65)
  {
    uint64_t v38 = (void **)__p;
    if (__p)
    {
      uint64_t v39 = v64;
      int v40 = __p;
      if (v64 != __p)
      {
        do
          uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        int v40 = __p;
      }
      char v64 = v38;
      operator delete(v40);
    }
    uint64_t v41 = v61;
    if (v61)
    {
      uint64_t v42 = v62;
      BOOL v43 = v61;
      if (v62 != v61)
      {
        do
        {
          BOOL v45 = (void *)*--v42;
          int v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        BOOL v43 = v61;
      }
      uint64_t v62 = v41;
      operator delete(v43);
    }
    if (v57 != v60) {
      free(v57);
    }
  }
  return v27;
}

void anonymous namespace'::OperationParser::popSSANameScope(_anonymous_namespace_::OperationParser *this)
{
  uint64_t v1 = *((void *)this + 34) + 24 * *((unsigned int *)this + 70);
  *(void *)(v1 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(void *)(v1 - 16) = 0;
  *(_DWORD *)(v1 - 8) = 0;
  LODWORD(v1) = *((_DWORD *)this + 70) - 1;
  *((_DWORD *)this + 70) = v1;
  uint64_t v2 = *((void *)this + 34) + 24 * v1;
  llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
}

uint64_t sub_180356BA4()
{
  return v0;
}

uint64_t llvm::StringMap<llvm::SmallVector<anonymous namespace'::OperationParser::ValueDefinition,1u>,llvm::MallocAllocator>::operator[](uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  unsigned int v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = v6;
  uint64_t v9 = *(void *)(*(void *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
  uint64_t v12 = (const unsigned __int8 **)buffer;
  uint64_t v13 = (char *)(buffer + 5);
  if (a3) {
    memcpy(buffer + 5, a2, (size_t)a3);
  }
  a3[(void)v13] = 0;
  void *v12 = a3;
  v12[1] = (const unsigned __int8 *)(v12 + 3);
  void v12[2] = (const unsigned __int8 *)0x100000000;
  *(void *)(v7 + 8 * v8) = v12;
  ++*(_DWORD *)(a1 + 12);
  int v14 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  uint64_t v9 = *v14;
  if (*v14) {
    BOOL v15 = v9 == -8;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    do
    {
      uint64_t v16 = v14[1];
      ++v14;
      uint64_t v9 = v16;
      if (v16) {
        BOOL v17 = v9 == -8;
      }
      else {
        BOOL v17 = 1;
      }
    }
    while (v17);
  }
  return v9 + 8;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0>(uint64_t a1)
{
  uint64_t v1 = *(mlir::detail::Parser **)a1;
  long long v3 = *(_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = v1;
  long long v8 = 0uLL;
  *(void *)&long long v9 = 0;
    return 0;
  *(void *)&v6[0] = "expected ':' and type for SSA operand";
  __int16 v7 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v1, 15, (uint64_t)v6)) {
    return 0;
  }
  uint64_t result = mlir::detail::Parser::parseType(v1);
  if (result)
  {
    v6[0] = v8;
    v6[1] = v9;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(mlir::OpAsmParser::UnresolvedOperand,mlir::Type)>::callback_fn<anonymous namespace'::OperationParser::parseOptionalBlockArgList(mlir::Block *)::$_0::operator() const(void)::{lambda(mlir::OpAsmParser::UnresolvedOperand,mlir::Type)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(char **)a2;
  long long v29 = *(_OWORD *)(a2 + 8);
  unsigned int v30 = *(void **)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (!**(unsigned char **)a1)
  {
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v6 + 8) + 8, v5);
    uint64_t v10 = (uint64_t)mlir::Block::addArgument(**(void ***)(a1 + 16), a3, EncodedSourceLocation);
    goto LABEL_19;
  }
  __int16 v7 = *(_DWORD **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(**(void **)(a1 + 16) + 48);
  if (v8 < ((unint64_t)(*(void *)(**(void **)(a1 + 16) + 56) - v9) >> 3))
  {
    *__int16 v7 = v8 + 1;
    uint64_t v10 = *(void *)(v9 + 8 * v8);
    if ((*(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8) != a3)
    {
      v31[0] = "argument and block argument type mismatch";
      __int16 v32 = 259;
      mlir::detail::Parser::emitError(v6, (uint64_t)v31, &v33);
      uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
      if (v33) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      }
      if (v41)
      {
        uint64_t v12 = (void **)__p;
        if (__p)
        {
          uint64_t v13 = v40;
          int v14 = __p;
          if (v40 != __p)
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            int v14 = __p;
          }
          int v40 = v12;
          operator delete(v14);
        }
        BOOL v15 = v37;
        if (!v37) {
          goto LABEL_40;
        }
        uint64_t v16 = v38;
        BOOL v17 = v37;
        if (v38 == v37)
        {
LABEL_39:
          uint64_t v38 = v15;
          operator delete(v17);
LABEL_40:
          if (v35 != &v36) {
            free(v35);
          }
          return v11;
        }
        do
        {
          uint64_t v19 = (void *)*--v16;
          long long v18 = v19;
          void *v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
LABEL_38:
        BOOL v17 = v37;
        goto LABEL_39;
      }
      return v11;
    }
LABEL_19:
      return 0;
    uint64_t v21 = *(void *)(*(void *)(v6 + 8) + 128);
    if (v21) {
      mlir::AsmParserState::addDefinition(v21, v10, v5);
    }
    uint64_t v33 = v5;
    long long v34 = v29;
    BOOL v35 = v30;
  }
  v31[0] = "too many arguments specified in argument list";
  __int16 v32 = 259;
  mlir::detail::Parser::emitError(v6, (uint64_t)v31, &v33);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v41)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      BOOL v23 = v40;
      int v24 = __p;
      if (v40 != __p)
      {
        do
          BOOL v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        int v24 = __p;
      }
      int v40 = v22;
      operator delete(v24);
    }
    BOOL v15 = v37;
    if (!v37) {
      goto LABEL_40;
    }
    int v25 = v38;
    BOOL v17 = v37;
    if (v38 == v37) {
      goto LABEL_39;
    }
    do
    {
      uint64_t v27 = (void *)*--v25;
      unsigned int v26 = v27;
      void *v25 = 0;
      if (v27) {
        operator delete[](v26);
      }
    }
    while (v25 != v15);
    goto LABEL_38;
  }
  return v11;
}

uint64_t llvm::array_pod_sort_comparator<std::pair<char const*,mlir::Block *>>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 < *a1) {
    return 1;
  }
  unint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  return v4 < v3;
}

uint64_t mlir::Diagnostic::append<char const(&)[43],mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  int v21 = 3;
  uint64_t v22 = __s;
  size_t v23 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  int v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      int v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      int v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      int v14 = &v21;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[5],mlir::Type>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  __int16 v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v10 + 1;
    BOOL v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      long long v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      __int16 v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      unint64_t v9 = *(void *)(a1 + 16);
      __int16 v7 = v17;
    }
  }
  unint64_t v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v7;
  *(void *)(v11 + 16) = *((void *)v7 + 2);
  *(_OWORD *)unint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[5],mlir::Type>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v25 = 3;
  unsigned int v26 = __s;
  size_t v27 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      size_t v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = &v25;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = *a3;
  uint64_t v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v14 + 1;
    BOOL v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      int v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = &v25;
    }
  }
  uint64_t v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v13;
  *(void *)(v16 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(a1, v7);
    unint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unint64_t v15 = &result[2 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    uint64_t v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      unint64_t v18 = (unint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v18, &v25);
          unint64_t v19 = v25;
          unint64_t *v25 = *v18;
          v19[1] = v18[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    BOOL v22 = result + 2;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      void *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      int v24 = &result[2 * v20];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseOperandList(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AsmParser::Delimiter,BOOL,int)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v14, 0, sizeof(v14));
    unint64_t v9 = v4 + 1;
    BOOL v10 = *(void *)v3 + 32 * v4 > (unint64_t)v14;
    if (*(void *)v3 <= (unint64_t)v14 && v10)
    {
      uint64_t v13 = (char *)v14 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      uint64_t v11 = *(void *)v3;
      uint64_t v12 = &v13[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v9, 32);
      uint64_t v11 = *(void *)v3;
      uint64_t v12 = (char *)v14;
    }
    unint64_t v5 = (_OWORD *)(v11 + 32 * *(unsigned int *)(v3 + 8));
    long long v6 = *(_OWORD *)v12;
    v5[1] = *((_OWORD *)v12 + 1);
  }
  else
  {
    unint64_t v5 = (_OWORD *)(*(void *)v3 + 32 * v4);
    long long v6 = 0uLL;
    v5[1] = 0u;
  }
  _OWORD *v5 = v6;
  unsigned int v7 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 672))(v2, *(void *)v3 + 32 * v7 - 32, *(unsigned __int8 *)a1[2]);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseAffineMapOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::Attribute &,llvm::StringRef,mlir::NamedAttrList &,mlir::AsmParser::Delimiter)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 672))(v4, v16, 1)) {
    return 0;
  }
  if (a2) {
    uint64_t v5 = a1[1];
  }
  else {
    uint64_t v5 = a1[2];
  }
  unsigned int v8 = (_DWORD *)(v5 + 8);
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  unint64_t v9 = *(void *)v5;
  BOOL v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v13 = v7 + 1;
    BOOL v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      unint64_t v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = &v15[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = (char *)v16;
    }
  }
  uint64_t v11 = (_OWORD *)(v9 + 32 * *v8);
  long long v12 = *((_OWORD *)v10 + 1);
  _OWORD *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(BOOL)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseAffineExprOfSSAIds(llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::AffineExpr &)::{lambda(BOOL)#1}>(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  memset(v16, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 672))(v4, v16, 1)) {
    return 0;
  }
  if (a2) {
    uint64_t v5 = a1[1];
  }
  else {
    uint64_t v5 = a1[2];
  }
  unsigned int v8 = (_DWORD *)(v5 + 8);
  uint64_t v7 = *(unsigned int *)(v5 + 8);
  unint64_t v9 = *(void *)v5;
  BOOL v10 = (char *)v16;
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v13 = v7 + 1;
    BOOL v14 = v9 + 32 * v7 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v14)
    {
      unint64_t v15 = (char *)v16 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = &v15[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v13, 32);
      unint64_t v9 = *(void *)v5;
      BOOL v10 = (char *)v16;
    }
  }
  uint64_t v11 = (_OWORD *)(v9 + 32 * *v8);
  long long v12 = *((_OWORD *)v10 + 1);
  _OWORD *v11 = *(_OWORD *)v10;
  v11[1] = v12;
  ++*v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseArgumentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,mlir::AsmParser::Delimiter,BOOL,BOOL)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    memset(v17, 0, sizeof(v17));
    unint64_t v8 = v4 + 1;
    BOOL v9 = *(void *)v3 + (v4 << 6) > (unint64_t)v17;
    if (*(void *)v3 <= (unint64_t)v17 && v9)
    {
      uint64_t v16 = (char *)v17 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      uint64_t v10 = *(void *)v3;
      uint64_t v11 = &v16[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v8, 64);
      uint64_t v10 = *(void *)v3;
      uint64_t v11 = (char *)v17;
    }
    long long v12 = (_OWORD *)(v10 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    long long v15 = *((_OWORD *)v11 + 3);
    void v12[2] = *((_OWORD *)v11 + 2);
    void v12[3] = v15;
    _OWORD *v12 = v13;
    v12[1] = v14;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(*(void *)v3 + (v4 << 6));
    v5[2] = 0u;
    void v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
  }
  unsigned int v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  return (*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v2 + 720))(v2, *(void *)v3 + ((unint64_t)v6 << 6) - 64, *(unsigned __int8 *)a1[2], *(unsigned __int8 *)a1[3]);
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::CustomOpAsmParser::parseOptionalAssignmentList(llvm::SmallVectorImpl<mlir::OpAsmParser::Argument> &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    unint64_t v13 = v4 + 1;
    BOOL v14 = *(void *)v3 + (v4 << 6) > (unint64_t)&v27;
    if (*(void *)v3 <= (unint64_t)&v27 && v14)
    {
      int v25 = (char *)&v27 - *(void *)v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      uint64_t v15 = *(void *)v3;
      uint64_t v16 = &v25[*(void *)v3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v13, 64);
      uint64_t v15 = *(void *)v3;
      uint64_t v16 = (char *)&v27;
    }
    uint64_t v17 = (_OWORD *)(v15 + ((unint64_t)*(unsigned int *)(v3 + 8) << 6));
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    long long v20 = *((_OWORD *)v16 + 3);
    v17[2] = *((_OWORD *)v16 + 2);
    v17[3] = v20;
    *uint64_t v17 = v18;
    v17[1] = v19;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(*(void *)v3 + (v4 << 6));
    v5[2] = 0u;
    void v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
  }
  unsigned int v6 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v6;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t, void, void))(*(void *)v2 + 720))(v2, *(void *)v3 + ((unint64_t)v6 << 6) - 64, 0, 0)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)v2 + 136))(v2))
  {
    return 0;
  }
  uint64_t v7 = a1[2];
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    long long v27 = 0u;
    long long v28 = 0u;
    unint64_t v21 = v8 + 1;
    BOOL v22 = *(void *)v7 + 32 * v8 > (unint64_t)&v27;
    if (*(void *)v7 <= (unint64_t)&v27 && v22)
    {
      unsigned int v26 = (char *)&v27 - *(void *)v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      uint64_t v23 = *(void *)v7;
      int v24 = &v26[*(void *)v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v21, 32);
      uint64_t v23 = *(void *)v7;
      int v24 = (char *)&v27;
    }
    BOOL v9 = (_OWORD *)(v23 + 32 * *(unsigned int *)(v7 + 8));
    long long v10 = *(_OWORD *)v24;
    v9[1] = *((_OWORD *)v24 + 1);
  }
  else
  {
    BOOL v9 = (_OWORD *)(*(void *)v7 + 32 * v8);
    long long v10 = 0uLL;
    v9[1] = 0u;
  }
  _OWORD *v9 = v10;
  unsigned int v11 = *(_DWORD *)(v7 + 8) + 1;
  *(_DWORD *)(v7 + 8) = v11;
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 672))(v2, *(void *)v7 + 32 * v11 - 32, 1) != 0;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseCustomOperation(llvm::ArrayRef<std::tuple<llvm::StringRef,unsigned int,llvm::SMLoc>>)::$_2>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a1;
  uint64_t v42 = "invalid properties ";
  __int16 v43 = 259;
  mlir::emitError(v4, (uint64_t)&v42, (uint64_t)&v48);
  if (v48)
  {
    uint64_t v5 = &v44;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, *a1[1]);
    unsigned int v6 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
      {
        int64_t v39 = (char *)&v44 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        unsigned int v6 = (char *)v51;
        uint64_t v5 = (const void ***)((char *)v51 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v5 = &v44;
        unsigned int v6 = (char *)v51;
      }
    }
    uint64_t v7 = &v6[24 * v52];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v52;
    if (v48)
    {
      LODWORD(v44) = 3;
      BOOL v45 = " for op ";
      uint64_t v46 = 8;
      long long v10 = &v44;
      unsigned int v11 = (char *)v51;
      if (v9 >= v53)
      {
        unint64_t v36 = v9 + 1;
        BOOL v37 = (char *)v51 + 24 * v9 > (char *)&v44;
        if (v51 <= &v44 && v37)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          unsigned int v11 = (char *)v51;
          long long v10 = (const void ***)((char *)v51 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v10 = &v44;
          unsigned int v11 = (char *)v51;
        }
      }
      long long v12 = &v11[24 * v52];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = v10[2];
      *(_OWORD *)long long v12 = v13;
      ++v52;
    }
  }
  int v44 = *(const void ***)(*(void *)(*a1[2] + 48) + 8);
  uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
  uint64_t v16 = v48;
  if (v48)
  {
    __int16 v47 = 261;
    int v44 = AttrData;
    BOOL v45 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
    uint64_t v16 = v48;
    if (v48)
    {
      LODWORD(v44) = 3;
      BOOL v45 = ": ";
      uint64_t v46 = 2;
      uint64_t v17 = &v44;
      long long v18 = (char *)v51;
      if (v52 >= v53)
      {
        unint64_t v38 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 24 * v52 > (char *)&v44)
        {
          int64_t v41 = (char *)&v44 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          long long v18 = (char *)v51;
          uint64_t v17 = (const void ***)((char *)v51 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v17 = &v44;
          long long v18 = (char *)v51;
        }
      }
      long long v19 = &v18[24 * v52];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)long long v19 = v20;
      ++v52;
      uint64_t v16 = v48;
    }
  }
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v59)
  {
    *(void *)(a2 + 8) = v49;
    unint64_t v21 = v52;
    *(_DWORD *)(a2 + 16) = v50;
    BOOL v22 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v21 || &v48 == (uint64_t *)a2)
    {
      int v25 = 1;
      goto LABEL_23;
    }
    uint64_t v23 = v54;
    if (v51 != v54)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v51;
      unsigned int v24 = v53;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = v24;
      unsigned int v51 = v54;
      unsigned int v53 = 0;
      int v25 = 1;
LABEL_22:
      unsigned int v52 = 0;
LABEL_23:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v55;
      *(void *)(a2 + 152) = v56;
      v55[0] = 0;
      v55[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v58;
      uint64_t v56 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v58 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v25)
      {
        if (v51 != v54) {
          free(v51);
        }
        unsigned __int8 v59 = 0;
      }
      goto LABEL_27;
    }
    if (v21 < 5)
    {
      unint64_t v26 = v21;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v21, 24);
      unint64_t v26 = v52;
      if (!v52)
      {
LABEL_21:
        *(_DWORD *)(a2 + 32) = v21;
        int v25 = v59;
        goto LABEL_22;
      }
      uint64_t v23 = v51;
      BOOL v22 = *(void **)(a2 + 24);
    }
    memcpy(v22, v23, 24 * v26);
    goto LABEL_21;
  }
LABEL_27:
  mlir::InFlightDiagnostic::abandon(&v48);
  if (v48) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  }
  if (v59)
  {
    long long v27 = (void **)__p[0];
    if (__p[0])
    {
      long long v28 = (void **)__p[1];
      long long v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          long long v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        long long v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    long long v30 = v55[0];
    if (v55[0])
    {
      int v31 = v55[1];
      __int16 v32 = v55[0];
      if (v55[1] != v55[0])
      {
        do
        {
          long long v34 = (void *)*--v31;
          uint64_t v33 = v34;
          *int v31 = 0;
          if (v34) {
            operator delete[](v33);
          }
        }
        while (v31 != v30);
        __int16 v32 = v55[0];
      }
      v55[1] = v30;
      operator delete(v32);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseGenericOperation(void)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  mlir::emitError(**(void **)a1, (uint64_t)&v37);
  uint64_t v4 = v37;
  if (v37)
  {
    LODWORD(v33) = 3;
    long long v34 = "'";
    uint64_t v35 = 1;
    uint64_t v5 = &v33;
    unsigned int v6 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unsigned int v6 = (char *)v40;
        uint64_t v5 = (const void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = &v33;
        unsigned int v6 = (char *)v40;
      }
    }
    uint64_t v7 = &v6[24 * v41];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)uint64_t v7 = v8;
    ++v41;
    uint64_t v4 = v37;
    if (v37)
    {
      uint64_t v9 = *(const void ***)(a1 + 8);
      __int16 v36 = 260;
      uint64_t v33 = v9;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      uint64_t v4 = v37;
      if (v37)
      {
        LODWORD(v33) = 3;
        long long v34 = "' op ";
        uint64_t v35 = 5;
        long long v10 = &v33;
        unsigned int v11 = (char *)v40;
        if (v41 >= v42)
        {
          unint64_t v30 = v41 + 1;
          if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
          {
            int64_t v32 = (char *)&v33 - (unsigned char *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            unsigned int v11 = (char *)v40;
            long long v10 = (const void ***)((char *)v40 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
            long long v10 = &v33;
            unsigned int v11 = (char *)v40;
          }
        }
        long long v12 = &v11[24 * v41];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)long long v12 = v13;
        ++v41;
        uint64_t v4 = v37;
      }
    }
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v14 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v15 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v14 || &v37 == (uint64_t *)a2)
    {
      int v18 = 1;
      goto LABEL_20;
    }
    uint64_t v16 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v40;
      unsigned int v17 = v42;
      *(_DWORD *)(a2 + 32) = v14;
      *(_DWORD *)(a2 + 36) = v17;
      int64_t v40 = v43;
      unsigned int v42 = 0;
      int v18 = 1;
LABEL_19:
      unsigned int v41 = 0;
LABEL_20:
      uint64_t v20 = v47;
      *(void *)(a2 + 152) = v45;
      *(_OWORD *)(a2 + 136) = v44;
      long long v44 = 0uLL;
      *(_OWORD *)(a2 + 160) = __p;
      *(void *)(a2 + 176) = v20;
      uint64_t v45 = 0;
      long long __p = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v18)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_24;
    }
    if (v14 < 5)
    {
      unint64_t v19 = v14;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v14, 24);
      unint64_t v19 = v41;
      if (!v41)
      {
LABEL_18:
        *(_DWORD *)(a2 + 32) = v14;
        int v18 = v48;
        goto LABEL_19;
      }
      uint64_t v16 = v40;
      uint64_t v15 = *(void **)(a2 + 24);
    }
    memcpy(v15, v16, 24 * v19);
    goto LABEL_18;
  }
LABEL_24:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    unint64_t v21 = (void **)__p;
    if ((void)__p)
    {
      BOOL v22 = (void **)*((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          BOOL v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    unsigned int v24 = (void *)v44;
    if ((void)v44)
    {
      int v25 = (void *)*((void *)&v44 + 1);
      unint64_t v26 = (void *)v44;
      if (*((void *)&v44 + 1) != (void)v44)
      {
        do
        {
          long long v28 = (void *)*--v25;
          long long v27 = v28;
          void *v25 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v25 != v24);
        unint64_t v26 = (void *)v44;
      }
      *((void *)&v44 + 1) = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<anonymous namespace'::OperationParser::parseGenericOperation(void)::$_1>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **(void **)a1;
  unsigned int v41 = "invalid properties ";
  __int16 v42 = 259;
  mlir::emitError(v4, (uint64_t)&v41, (uint64_t)&v47);
  uint64_t v5 = v47;
  if (v47)
  {
    unsigned int v6 = &v43;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v43, **(void **)(a1 + 8));
    uint64_t v7 = (char *)v50;
    if (v51 >= v52)
    {
      unint64_t v34 = v51 + 1;
      if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
      {
        int64_t v38 = (char *)&v43 - (unsigned char *)v50;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        uint64_t v7 = (char *)v50;
        unsigned int v6 = (const void ***)((char *)v50 + v38);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v34, 24);
        unsigned int v6 = &v43;
        uint64_t v7 = (char *)v50;
      }
    }
    long long v8 = &v7[24 * v51];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)long long v8 = v9;
    uint64_t v10 = ++v51;
    uint64_t v5 = v47;
    if (v47)
    {
      LODWORD(v43) = 3;
      long long v44 = " for op ";
      uint64_t v45 = 8;
      unsigned int v11 = &v43;
      long long v12 = (char *)v50;
      if (v10 >= v52)
      {
        unint64_t v35 = v10 + 1;
        BOOL v36 = (char *)v50 + 24 * v10 > (char *)&v43;
        if (v50 <= &v43 && v36)
        {
          int64_t v39 = (char *)&v43 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          long long v12 = (char *)v50;
          unsigned int v11 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v35, 24);
          unsigned int v11 = &v43;
          long long v12 = (char *)v50;
        }
      }
      long long v13 = &v12[24 * v51];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v51;
      uint64_t v5 = v47;
      if (v47)
      {
        uint64_t v15 = *(const void ***)(a1 + 16);
        __int16 v46 = 260;
        __int16 v43 = v15;
        mlir::Diagnostic::operator<<((uint64_t)&v48, &v43);
        uint64_t v5 = v47;
        if (v47)
        {
          LODWORD(v43) = 3;
          long long v44 = ": ";
          uint64_t v45 = 2;
          uint64_t v16 = &v43;
          unsigned int v17 = (char *)v50;
          if (v51 >= v52)
          {
            unint64_t v37 = v51 + 1;
            if (v50 <= &v43 && (char *)v50 + 24 * v51 > (char *)&v43)
            {
              int64_t v40 = (char *)&v43 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              unsigned int v17 = (char *)v50;
              uint64_t v16 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
              uint64_t v16 = &v43;
              unsigned int v17 = (char *)v50;
            }
          }
          int v18 = &v17[24 * v51];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)int v18 = v19;
          ++v51;
          uint64_t v5 = v47;
        }
      }
    }
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v58)
  {
    *(void *)(a2 + 8) = v48;
    unint64_t v20 = v51;
    *(_DWORD *)(a2 + 16) = v49;
    unint64_t v21 = (void *)(a2 + 40);
    *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v20 || &v47 == (uint64_t *)a2)
    {
      int v24 = 1;
      goto LABEL_22;
    }
    BOOL v22 = v53;
    if (v50 != v53)
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v50;
      unsigned int v23 = v52;
      *(_DWORD *)(a2 + 32) = v20;
      *(_DWORD *)(a2 + 36) = v23;
      int v50 = v53;
      unsigned int v52 = 0;
      int v24 = 1;
LABEL_21:
      unsigned int v51 = 0;
LABEL_22:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v54;
      *(void *)(a2 + 152) = v55;
      v54[0] = 0;
      v54[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v57;
      uint64_t v55 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v57 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v24)
      {
        if (v50 != v53) {
          free(v50);
        }
        unsigned __int8 v58 = 0;
      }
      goto LABEL_26;
    }
    if (v20 < 5)
    {
      unint64_t v25 = v20;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v20, 24);
      unint64_t v25 = v51;
      if (!v51)
      {
LABEL_20:
        *(_DWORD *)(a2 + 32) = v20;
        int v24 = v58;
        goto LABEL_21;
      }
      BOOL v22 = v50;
      unint64_t v21 = *(void **)(a2 + 24);
    }
    memcpy(v21, v22, 24 * v25);
    goto LABEL_20;
  }
LABEL_26:
  mlir::InFlightDiagnostic::abandon(&v47);
  if (v47) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  }
  if (v58)
  {
    unint64_t v26 = (void **)__p[0];
    if (__p[0])
    {
      long long v27 = (void **)__p[1];
      long long v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          long long v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        long long v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    unint64_t v29 = v54[0];
    if (v54[0])
    {
      unint64_t v30 = v54[1];
      int64_t v31 = v54[0];
      if (v54[1] != v54[0])
      {
        do
        {
          uint64_t v33 = (void *)*--v30;
          int64_t v32 = v33;
          *unint64_t v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        int64_t v31 = v54[0];
      }
      v54[1] = v29;
      operator delete(v31);
    }
    if (v50 != v53) {
      free(v50);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::SMLoc>,true>::growAndEmplaceBack<unsigned int &,llvm::SMLoc&>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v6);
  *uint64_t v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>(uint64_t a1, char *__s, uint64_t a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  unint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  long long v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      int v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      long long v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, const char *a3)
{
  __int16 v20 = 261;
  uint64_t v5 = *(const char **)(a2 + 8);
  BOOL v17 = *(const void ***)a2;
  int v18 = v5;
  mlir::Diagnostic::operator<<(a1, &v17);
  size_t v6 = strlen(a3);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v17) = 3;
  int v18 = a3;
  size_t v19 = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v10 = &v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v8 + 24 * v9 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      unint64_t v16 = (char *)&v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      unint64_t v10 = (const void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      unint64_t v10 = &v17;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[26],llvm::StringRef &,char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, uint64_t a3, char *a4, unsigned int *a5, char *a6, uint64_t *a7)
{
  size_t v14 = strlen(__s);
  uint64_t v15 = a1 + 16;
  unint64_t v16 = *(void *)(a1 + 16);
  LODWORD(v26) = 3;
  long long v27 = __s;
  size_t v28 = v14;
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  int v18 = &v26;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v23 = v17 + 1;
    BOOL v24 = v16 + 24 * v17 > (unint64_t)&v26;
    if (v16 <= (unint64_t)&v26 && v24)
    {
      unint64_t v25 = (char *)&v26 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      int v18 = (const void ***)&v25[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v23, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      int v18 = &v26;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  __int16 v29 = 261;
  size_t v21 = *(char **)(a3 + 8);
  unint64_t v26 = *(const void ***)a3;
  long long v27 = v21;
  mlir::Diagnostic::operator<<(a1, &v26);
  return mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[2],unsigned int &,char const(&)[12],mlir::Type>(uint64_t a1, char *__s, unsigned int *a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  int64_t v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      size_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  int v18 = (char *)*a3;
  int v30 = 5;
  int64_t v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  long long v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      __int16 v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      long long v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      long long v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[5],mlir::Type>(a1, a4, a5);
}

uint64_t *llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    size_t v10 = buffer + 1;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 9), (std::align_val_t)8uLL);
    size_t v10 = buffer + 1;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  *uint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t llvm::array_pod_sort_comparator<char const*>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<anonymous namespace'::OperationParser::finalize(void)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id) {
    uint64_t v6 = 0;
  }
  uint64_t v121 = v6;
  if (!v6 || *(void *)v4[1] != mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121)) {
    goto LABEL_57;
  }
  uint64_t v7 = *(void *)(v5 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
  uint64_t v8 = *(const char **)v7;
  uint64_t v9 = v4[2];
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v9, *(int8x16_t **)(v7 + 8), *(const unsigned __int8 **)(v7 + 16));
  if (Key == -1
    || Key == (unint64_t)*(unsigned int *)(v9 + 8)
    || (uint64_t v11 = *(void *)(*(void *)v9 + 8 * Key), (v12 = *(void *)(v11 + 8)) == 0))
  {
    __int16 v120 = 257;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v5 + 8) + 8, v8);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(v125);
    }
    if (v125[0])
    {
      int v122 = 3;
      v123 = "operation location alias was never defined";
      uint64_t v124 = 42;
      BOOL v14 = &v122;
      uint64_t v15 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v108 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          int64_t v113 = (char *)&v122 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          uint64_t v15 = (char *)v126;
          BOOL v14 = (int *)((char *)v126 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v108, 24);
          BOOL v14 = &v122;
          uint64_t v15 = (char *)v126;
        }
      }
      unsigned int v16 = &v15[24 * v127];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)unsigned int v16 = v17;
      ++v127;
    }
    char v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    }
    if (v134)
    {
      unint64_t v19 = (void **)__p;
      if (__p)
      {
        long long v20 = v133;
        uint64_t v21 = __p;
        if (v133 != __p)
        {
          do
            long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        v133 = v19;
        operator delete(v21);
      }
      long long v22 = v130;
      if (!v130) {
        goto LABEL_54;
      }
      unint64_t v23 = v131;
      unint64_t v24 = v130;
      if (v131 == v130) {
        goto LABEL_53;
      }
      do
      {
        unint64_t v26 = (void *)*--v23;
        BOOL v25 = v26;
        void *v23 = 0;
        if (v26) {
          operator delete[](v25);
        }
      }
      while (v23 != v22);
      goto LABEL_52;
    }
  }
  else
  {
    if (mlir::LocationAttr::classof(*(void *)(v11 + 8)))
    {
      *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
      goto LABEL_57;
    }
    __int16 v120 = 257;
    uint64_t v27 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v5 + 8) + 8, v8);
    mlir::emitError(v27, (uint64_t)v119, (uint64_t)v125);
    if (*(_DWORD *)(*(void *)(v5 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(v125);
    }
    if (v125[0])
    {
      int v122 = 3;
      v123 = "expected location, but found '";
      uint64_t v124 = 30;
      size_t v28 = &v122;
      __int16 v29 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v109 = v127 + 1;
        if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
        {
          int64_t v114 = (char *)&v122 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          __int16 v29 = (char *)v126;
          size_t v28 = (int *)((char *)v126 + v114);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v109, 24);
          size_t v28 = &v122;
          __int16 v29 = (char *)v126;
        }
      }
      int v30 = &v29[24 * v127];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)int v30 = v31;
      ++v127;
      if (v125[0])
      {
        size_t v32 = &v122;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v12);
        uint64_t v33 = (char *)v126;
        if (v127 >= v128)
        {
          unint64_t v110 = v127 + 1;
          if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
          {
            int64_t v115 = (char *)&v122 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            uint64_t v33 = (char *)v126;
            size_t v32 = (int *)((char *)v126 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v110, 24);
            size_t v32 = &v122;
            uint64_t v33 = (char *)v126;
          }
        }
        unint64_t v34 = &v33[24 * v127];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = *((void *)v32 + 2);
        *(_OWORD *)unint64_t v34 = v35;
        uint64_t v36 = ++v127;
        if (v125[0])
        {
          int v122 = 3;
          v123 = "'";
          uint64_t v124 = 1;
          unint64_t v37 = &v122;
          int64_t v38 = (char *)v126;
          if (v36 >= v128)
          {
            unint64_t v111 = v36 + 1;
            BOOL v112 = (char *)v126 + 24 * v36 > (char *)&v122;
            if (v126 <= &v122 && v112)
            {
              int64_t v116 = (char *)&v122 - (unsigned char *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              int64_t v38 = (char *)v126;
              unint64_t v37 = (int *)((char *)v126 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v111, 24);
              unint64_t v37 = &v122;
              int64_t v38 = (char *)v126;
            }
          }
          int64_t v39 = &v38[24 * v127];
          long long v40 = *(_OWORD *)v37;
          *((void *)v39 + 2) = *((void *)v37 + 2);
          *(_OWORD *)int64_t v39 = v40;
          ++v127;
        }
      }
    }
    char v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
    if (v125[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
    }
    if (v134)
    {
      unsigned int v41 = (void **)__p;
      if (__p)
      {
        __int16 v42 = v133;
        __int16 v43 = __p;
        if (v133 != __p)
        {
          do
            __int16 v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          __int16 v43 = __p;
        }
        v133 = v41;
        operator delete(v43);
      }
      long long v22 = v130;
      if (!v130) {
        goto LABEL_54;
      }
      long long v44 = v131;
      unint64_t v24 = v130;
      if (v131 == v130)
      {
LABEL_53:
        uint64_t v131 = v22;
        operator delete(v24);
LABEL_54:
        if (v126 != v129) {
          free(v126);
        }
        goto LABEL_56;
      }
      do
      {
        __int16 v46 = (void *)*--v44;
        uint64_t v45 = v46;
        *long long v44 = 0;
        if (v46) {
          operator delete[](v45);
        }
      }
      while (v44 != v22);
LABEL_52:
      unint64_t v24 = v130;
      goto LABEL_53;
    }
  }
LABEL_56:
  if (!v18) {
    return 0;
  }
LABEL_57:
  unint64_t v47 = *(unsigned int *)(a2 + 44);
  unsigned int v48 = v47 & 0x7FFFFF;
  if ((v47 & 0x7FFFFF) != 0)
  {
    unint64_t v49 = ((a2 + 16 * ((v47 >> 23) & 1) + ((v47 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    unint64_t v117 = v49 + 24 * v48;
    while (1)
    {
      uint64_t v50 = *(void *)(v49 + 8);
      if (v50 != v49) {
        break;
      }
LABEL_142:
      v49 += 24;
      if (v49 == v117) {
        return 1;
      }
    }
    unint64_t v118 = v49;
    while (1)
    {
      uint64_t v51 = v50 - 8;
      if (!v50) {
        uint64_t v51 = 0;
      }
      unsigned int v52 = *(uint64_t **)(v51 + 48);
      unsigned int v53 = *(uint64_t **)(v51 + 56);
      if (v53 != v52) {
        break;
      }
LABEL_61:
      uint64_t v50 = *(void *)(v50 + 8);
      unint64_t v49 = v118;
      if (v50 == v118) {
        goto LABEL_142;
      }
    }
    while (1)
    {
      uint64_t v54 = *v52;
      uint64_t v55 = *a1;
      uint64_t v56 = **a1;
      uint64_t v57 = *(void *)(*v52 + 32);
      if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id) {
        uint64_t v57 = 0;
      }
      uint64_t v121 = v57;
      if (v57 && *(void *)v55[1] == mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v121))
      {
        uint64_t v58 = *(void *)(v56 + 360) + 24 * mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v121);
        uint64_t v59 = *(const char **)v58;
        uint64_t v60 = v55[2];
        int v61 = llvm::StringMapImpl::FindKey((uint64_t *)v60, *(int8x16_t **)(v58 + 8), *(const unsigned __int8 **)(v58 + 16));
        if (v61 == -1
          || v61 == (unint64_t)*(unsigned int *)(v60 + 8)
          || (uint64_t v62 = *(void *)(*(void *)v60 + 8 * v61), (v63 = *(void *)(v62 + 8)) == 0))
        {
          __int16 v120 = 257;
          uint64_t v64 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v56 + 8) + 8, v59);
          mlir::emitError(v64, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(void *)(v56 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(v125);
          }
          if (v125[0])
          {
            int v122 = 3;
            v123 = "operation location alias was never defined";
            uint64_t v124 = 42;
            char v65 = (char *)v126;
            if (v127 >= v128)
            {
              unint64_t v98 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                int64_t v103 = (char *)&v122 - (unsigned char *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                char v65 = (char *)v126;
                uint64_t v66 = (int *)((char *)v126 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
                uint64_t v66 = &v122;
                char v65 = (char *)v126;
              }
            }
            else
            {
              uint64_t v66 = &v122;
            }
            long long v67 = &v65[24 * v127];
            long long v68 = *(_OWORD *)v66;
            *((void *)v67 + 2) = *((void *)v66 + 2);
            *(_OWORD *)long long v67 = v68;
            ++v127;
          }
          char v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          }
          if (v134)
          {
            long long v70 = (void **)__p;
            if (__p)
            {
              uint64_t v71 = v133;
              char v72 = __p;
              if (v133 != __p)
              {
                do
                  uint64_t v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                char v72 = __p;
              }
              v133 = v70;
              operator delete(v72);
            }
            uint64_t v73 = v130;
            if (v130)
            {
              char v74 = v131;
              uint64_t v75 = v130;
              if (v131 == v130) {
                goto LABEL_123;
              }
              do
              {
                long long v77 = (void *)*--v74;
                int v76 = v77;
                void *v74 = 0;
                if (v77) {
                  operator delete[](v76);
                }
              }
              while (v74 != v73);
LABEL_122:
              uint64_t v75 = v130;
              goto LABEL_123;
            }
LABEL_124:
            if (v126 != v129) {
              free(v126);
            }
          }
LABEL_66:
          if (!v69) {
            return 0;
          }
          goto LABEL_67;
        }
        if (!mlir::LocationAttr::classof(*(void *)(v62 + 8)))
        {
          __int16 v120 = 257;
          uint64_t v78 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v56 + 8) + 8, v59);
          mlir::emitError(v78, (uint64_t)v119, (uint64_t)v125);
          if (*(_DWORD *)(*(void *)(v56 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(v125);
          }
          if (v125[0])
          {
            int v122 = 3;
            v123 = "expected location, but found '";
            uint64_t v124 = 30;
            char v79 = (char *)v126;
            if (v127 >= v128)
            {
              unint64_t v99 = v127 + 1;
              if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
              {
                int64_t v104 = (char *)&v122 - (unsigned char *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                char v79 = (char *)v126;
                unint64_t v80 = (int *)((char *)v126 + v104);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v99, 24);
                unint64_t v80 = &v122;
                char v79 = (char *)v126;
              }
            }
            else
            {
              unint64_t v80 = &v122;
            }
            unint64_t v81 = &v79[24 * v127];
            long long v82 = *(_OWORD *)v80;
            *((void *)v81 + 2) = *((void *)v80 + 2);
            *(_OWORD *)unint64_t v81 = v82;
            ++v127;
            if (v125[0])
            {
              uint64_t v83 = &v122;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v122, v63);
              int64_t v84 = (char *)v126;
              if (v127 >= v128)
              {
                unint64_t v100 = v127 + 1;
                if (v126 <= &v122 && (char *)v126 + 24 * v127 > (char *)&v122)
                {
                  int64_t v105 = (char *)&v122 - (unsigned char *)v126;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  int64_t v84 = (char *)v126;
                  uint64_t v83 = (int *)((char *)v126 + v105);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                  uint64_t v83 = &v122;
                  int64_t v84 = (char *)v126;
                }
              }
              int64_t v85 = &v84[24 * v127];
              long long v86 = *(_OWORD *)v83;
              *((void *)v85 + 2) = *((void *)v83 + 2);
              *(_OWORD *)int64_t v85 = v86;
              uint64_t v87 = ++v127;
              if (v125[0])
              {
                int v122 = 3;
                v123 = "'";
                uint64_t v124 = 1;
                int v88 = (char *)v126;
                if (v87 >= v128)
                {
                  unint64_t v101 = v87 + 1;
                  BOOL v102 = (char *)v126 + 24 * v87 > (char *)&v122;
                  if (v126 <= &v122 && v102)
                  {
                    int64_t v106 = (char *)&v122 - (unsigned char *)v126;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    int v88 = (char *)v126;
                    uint64_t v89 = (int *)((char *)v126 + v106);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v101, 24);
                    uint64_t v89 = &v122;
                    int v88 = (char *)v126;
                  }
                }
                else
                {
                  uint64_t v89 = &v122;
                }
                uint64_t v90 = &v88[24 * v127];
                long long v91 = *(_OWORD *)v89;
                *((void *)v90 + 2) = *((void *)v89 + 2);
                *(_OWORD *)uint64_t v90 = v91;
                ++v127;
              }
            }
          }
          char v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v125);
          if (v125[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v125);
          }
          if (v134)
          {
            long long v92 = (void **)__p;
            if (__p)
            {
              uint64_t v93 = v133;
              uint64_t v94 = __p;
              if (v133 != __p)
              {
                do
                  uint64_t v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
                while (v93 != v92);
                uint64_t v94 = __p;
              }
              v133 = v92;
              operator delete(v94);
            }
            uint64_t v73 = v130;
            if (v130)
            {
              __int16 v95 = v131;
              uint64_t v75 = v130;
              if (v131 != v130)
              {
                do
                {
                  __int16 v97 = (void *)*--v95;
                  uint64_t v96 = v97;
                  *__int16 v95 = 0;
                  if (v97) {
                    operator delete[](v96);
                  }
                }
                while (v95 != v73);
                goto LABEL_122;
              }
LABEL_123:
              uint64_t v131 = v73;
              operator delete(v75);
            }
            goto LABEL_124;
          }
          goto LABEL_66;
        }
        *(void *)(v54 + 32) = v63;
      }
LABEL_67:
      if (++v52 == v53) {
        goto LABEL_61;
      }
    }
  }
  return 1;
}

uint64_t *llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    size_t v10 = buffer + 2;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    size_t v10 = buffer + 2;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  buffer[1] = 0;
  *uint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 2;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v18 = v9[1];
        ++v9;
        uint64_t v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 2;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  uint64_t v13 = *a4;
  void *buffer = a3;
  buffer[1] = v13;
  uint64_t *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v14 = *v9 == -8;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    do
    {
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v15 = v16;
      if (v16) {
        BOOL v17 = v15 == -8;
      }
      else {
        BOOL v17 = 1;
      }
    }
    while (v17);
  }
  return v9;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseFileMetadataDictionary(void)::$_0>(uint64_t *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*(void *)(*a1 + 8) + 56));
  uint64_t v3 = *(void **)(v1 + 8);
  int v4 = *((_DWORD *)v3 + 14);
  if (v4 == 3 || v4 == 12)
  {
LABEL_6:
    uint64_t v6 = v3[8];
    uint64_t v7 = v3[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 1), (uint64_t)&v36);
    uint64_t v8 = *(void *)(v1 + 8);
    *(_OWORD *)(v8 + 56) = v36;
    *(void *)(v8 + 72) = v37;
    *(void *)&long long v36 = "expected ':'";
    __int16 v39 = 259;
    if (mlir::detail::Parser::parseToken(v1, 15, (uint64_t)&v36))
    {
      if (v7 == 18)
      {
        if (*(void *)v6 != 0x6C616E7265747865
          || *(void *)(v6 + 8) != 0x6372756F7365725FLL
          || *(_WORD *)(v6 + 16) != 29541)
        {
LABEL_27:
          __int16 v33 = 1283;
          v32[0] = "unknown key '";
          uint64_t v32[2] = v6;
          v32[3] = v7;
          v34[0] = v32;
          v34[2] = "' in file metadata dictionary";
          __int16 v35 = 770;
          uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v1 + 8) + 8, Loc);
          mlir::emitError(EncodedSourceLocation, (uint64_t)v34, (uint64_t)&v36);
          if (*(_DWORD *)(*(void *)(v1 + 8) + 56) == 1) {
            mlir::InFlightDiagnostic::abandon(&v36);
          }
          uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
          if ((void)v36) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
          }
          if (v45)
          {
            BOOL v17 = (void **)__p;
            if (__p)
            {
              uint64_t v18 = v44;
              unint64_t v19 = __p;
              if (v44 != __p)
              {
                do
                  uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
                while (v18 != v17);
                unint64_t v19 = __p;
              }
              long long v44 = v17;
              operator delete(v19);
            }
            long long v20 = v41;
            if (!v41) {
              goto LABEL_59;
            }
            uint64_t v21 = v42;
            long long v22 = v41;
            if (v42 == v41)
            {
LABEL_58:
              __int16 v42 = v20;
              operator delete(v22);
LABEL_59:
              if (v38 != &v40) {
                free(v38);
              }
              return v16;
            }
            do
            {
              unint64_t v24 = (void *)*--v21;
              unint64_t v23 = v24;
              *uint64_t v21 = 0;
              if (v24) {
                operator delete[](v23);
              }
            }
            while (v21 != v20);
LABEL_57:
            long long v22 = v41;
            goto LABEL_58;
          }
          return v16;
        }
        v32[0] = v1;
      }
      else
      {
        if (v7 != 17) {
          goto LABEL_27;
        }
        BOOL v9 = *(void *)v6 == 0x5F7463656C616964 && *(void *)(v6 + 8) == 0x656372756F736572;
        if (!v9 || *(unsigned char *)(v6 + 16) != 115) {
          goto LABEL_27;
        }
        v32[0] = v1;
      }
      v34[0] = v11;
      v34[1] = v32;
      *(void *)&long long v36 = "expected '{'";
      __int16 v39 = 259;
      if (mlir::detail::Parser::parseToken(v1, 20, (uint64_t)&v36))
      {
        *(void *)&long long v36 = v1;
        *((void *)&v36 + 1) = v34;
      }
    }
    return 0;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v3 + 7)))
  {
    uint64_t v3 = *(void **)(v1 + 8);
    goto LABEL_6;
  }
  v34[0] = "expected identifier key in file metadata dictionary";
  __int16 v35 = 259;
  mlir::detail::Parser::emitError(v1, (uint64_t)v34, &v36);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if ((void)v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  if (v45)
  {
    BOOL v25 = (void **)__p;
    if (__p)
    {
      unint64_t v26 = v44;
      uint64_t v27 = __p;
      if (v44 != __p)
      {
        do
          unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        uint64_t v27 = __p;
      }
      long long v44 = v25;
      operator delete(v27);
    }
    long long v20 = v41;
    if (!v41) {
      goto LABEL_59;
    }
    size_t v28 = v42;
    long long v22 = v41;
    if (v42 == v41) {
      goto LABEL_58;
    }
    do
    {
      int v30 = (void *)*--v28;
      __int16 v29 = v30;
      *size_t v28 = 0;
      if (v30) {
        operator delete[](v29);
      }
    }
    while (v28 != v20);
    goto LABEL_57;
  }
  return v16;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseResourceFileMetadata(llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>)::$_0>(uint64_t *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(*a1 + 8) + 56));
  int v4 = *(void **)(v2 + 8);
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12)
  {
LABEL_6:
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v23);
    uint64_t v9 = *(void *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v23;
    *(void *)(v9 + 72) = v24;
    *(void *)&long long v23 = "expected ':'";
    __int16 v26 = 259;
    if (mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v23)
      && (v21[0] = "expected '{'", __int16 v22 = 259, mlir::detail::Parser::parseToken(v2, 20, (uint64_t)v21)))
    {
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))a1[1])(*(void *)(a1[1] + 8), v7, v8, Loc);
    }
    else
    {
      return 0;
    }
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    int v4 = *(void **)(v2 + 8);
    goto LABEL_6;
  }
  v21[0] = "expected identifier key for 'resource' entry";
  __int16 v22 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)v21, &v23);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v23);
  if ((void)v23) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  }
  if (v32)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      BOOL v14 = v31;
      uint64_t v15 = __p;
      if (v31 != __p)
      {
        do
          BOOL v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      long long v31 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v28;
    if (v28)
    {
      BOOL v17 = v29;
      uint64_t v18 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v20 = (void *)*--v17;
          unint64_t v19 = v20;
          *BOOL v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v28;
      }
      __int16 v29 = v16;
      operator delete(v18);
    }
    if (v25 != &v27) {
      free(v25);
    }
  }
  return v10;
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0>(uint64_t *a1, void *a2, size_t a3, const char *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  Dialect = mlir::MLIRContext::getOrLoadDialect(***(void ***)(*a1 + 8), a2, a3);
  if (Dialect)
  {
    uint64_t v9 = (uint64_t)Dialect;
    if (mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)Dialect))
    {
      uint64_t v41 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v9);
      if (v41)
      {
        uint64_t v48 = v7;
        unint64_t v49 = &v41;
      }
    }
    else
    {
      uint64_t v41 = 0;
    }
    __int16 v43 = 257;
    mlir::detail::Parser::emitError(v7, (uint64_t)v42, &v48);
    if (v48)
    {
      LODWORD(v44) = 3;
      char v45 = "unexpected 'resource' section for dialect '";
      uint64_t v46 = 43;
      long long v20 = &v44;
      uint64_t v21 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v37 = v51 + 1;
        if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
        {
          int64_t v39 = (char *)&v44 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          uint64_t v21 = (char *)v50;
          long long v20 = (const void ***)((char *)v50 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
          long long v20 = &v44;
          uint64_t v21 = (char *)v50;
        }
      }
      __int16 v22 = &v21[24 * v51];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)__int16 v22 = v23;
      ++v51;
      if (v48)
      {
        uint64_t v24 = *(const void ***)(v9 + 8);
        BOOL v25 = *(const char **)(v9 + 16);
        __int16 v47 = 261;
        long long v44 = v24;
        char v45 = v25;
        mlir::Diagnostic::operator<<((uint64_t)&v49, &v44);
        if (v48)
        {
          LODWORD(v44) = 3;
          char v45 = "'";
          uint64_t v46 = 1;
          __int16 v26 = &v44;
          uint64_t v27 = (char *)v50;
          if (v51 >= v52)
          {
            unint64_t v38 = v51 + 1;
            if (v50 <= &v44 && (char *)v50 + 24 * v51 > (char *)&v44)
            {
              int64_t v40 = (char *)&v44 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              uint64_t v27 = (char *)v50;
              __int16 v26 = (const void ***)((char *)v50 + v40);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v38, 24);
              __int16 v26 = &v44;
              uint64_t v27 = (char *)v50;
            }
          }
          size_t v28 = &v27[24 * v51];
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = v26[2];
          *(_OWORD *)size_t v28 = v29;
          ++v51;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    }
    if (v58)
    {
      int v30 = (void **)__p;
      if (__p)
      {
        long long v31 = v57;
        char v32 = __p;
        if (v57 != __p)
        {
          do
            long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          char v32 = __p;
        }
        uint64_t v57 = v30;
        operator delete(v32);
      }
      uint64_t v15 = v54;
      if (!v54) {
        goto LABEL_44;
      }
      uint64_t v33 = v55;
      BOOL v17 = v54;
      if (v55 == v54)
      {
LABEL_43:
        uint64_t v55 = v15;
        operator delete(v17);
LABEL_44:
        if (v50 != v53) {
          free(v50);
        }
        return v10;
      }
      do
      {
        __int16 v35 = (void *)*--v33;
        unint64_t v34 = v35;
        *uint64_t v33 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v33 != v15);
LABEL_42:
      BOOL v17 = v54;
      goto LABEL_43;
    }
  }
  else
  {
    __int16 v43 = 1283;
    v42[0] = "dialect '";
    v42[2] = a2;
    v42[3] = a3;
    long long v44 = (const void **)v42;
    uint64_t v46 = (uint64_t)"' is unknown";
    __int16 v47 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v7 + 8) + 8, a4);
    mlir::emitError(EncodedSourceLocation, (uint64_t)&v44, (uint64_t)&v48);
    if (*(_DWORD *)(*(void *)(v7 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v48);
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
    if (v48) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
    }
    if (v58)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v57;
        BOOL v14 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          BOOL v14 = __p;
        }
        uint64_t v57 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v54;
      if (!v54) {
        goto LABEL_44;
      }
      uint64_t v16 = v55;
      BOOL v17 = v54;
      if (v55 == v54) {
        goto LABEL_43;
      }
      do
      {
        unint64_t v19 = (void *)*--v16;
        uint64_t v18 = v19;
        void *v16 = 0;
        if (v19) {
          operator delete[](v18);
        }
      }
      while (v16 != v15);
      goto LABEL_42;
    }
  }
  return v10;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseDialectResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(const mlir::OpAsmDialectInterface ***a1)
{
  uint64_t v2 = *a1;
  uint64_t Loc = mlir::Token::getLoc((const mlir::OpAsmDialectInterface *)((char *)(*a1)[1] + 56));
  long long v16 = 0uLL;
  mlir::detail::Parser::parseResourceHandle((mlir::detail::Parser *)v2, *a1[1], (llvm::StringRef *)&v16, (uint64_t)&v13);
  if (!v15) {
    return 0;
  }
  *(void *)uint64_t v8 = "expected ':'";
  LOWORD(v10) = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)v2, 15, (uint64_t)v8)) {
    return 0;
  }
  int v4 = v2[1];
  long long v13 = *(_OWORD *)((char *)v4 + 56);
  uint64_t v14 = *((void *)v4 + 9);
  mlir::Lexer::lexToken((const mlir::OpAsmDialectInterface *)((char *)v4 + 8), (uint64_t)v8);
  int v5 = v2[1];
  *(_OWORD *)((char *)v5 + 56) = *(_OWORD *)v8;
  *((void *)v5 + 9) = *(void *)&v8[16];
  *(void *)uint64_t v8 = &unk_1EC99A030;
  *(_OWORD *)&v8[8] = v16;
  uint64_t v9 = Loc;
  long long v10 = v13;
  uint64_t v11 = v14;
  uint64_t v12 = v2;
  uint64_t v6 = (*(uint64_t (**)(void, unsigned char *))(*(void *)*a1[1] + 48))(*a1[1], v8);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v8);
  return v6;
}

void anonymous namespace'::ParsedResourceEntry::~ParsedResourceEntry(_anonymous_namespace_::ParsedResourceEntry *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

{
  void *v1;
  uint64_t vars8;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t anonymous namespace'::ParsedResourceEntry::getKey(_anonymous_namespace_::ParsedResourceEntry *this)
{
  return *((void *)this + 1);
}

{
  return *((void *)this + 1);
}

void anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  int v4 = (const char *)*((void *)this + 3);
  __int16 v7 = 257;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v3 + 8) + 8, v4);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v6, (uint64_t)a2);
  if (*(_DWORD *)(*(void *)(v3 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(a2);
  }
}

uint64_t anonymous namespace'::ParsedResourceEntry::getKind(_anonymous_namespace_::ParsedResourceEntry *this)
{
  int v2 = *((_DWORD *)this + 8);
  uint64_t result = 1;
  if (v2 != 54 && v2 != 74)
  {
    if (*((void *)this + 6) >= 3uLL)
    {
      int v4 = (unsigned __int16 *)*((void *)this + 5);
      unsigned int v5 = bswap32(*v4) >> 16;
      if (v5 == 8752)
      {
        int v6 = *((unsigned __int8 *)v4 + 2) - 120;
      }
      else if (v5 >> 4 < 0x223)
      {
        int v6 = -1;
      }
      else
      {
        int v6 = 1;
      }
      return 2 * (v6 != 0);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

{
  return *((unsigned int *)this + 6);
}

uint64_t anonymous namespace'::ParsedResourceEntry::parseAsBool(_anonymous_namespace_::ParsedResourceEntry *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 8);
  int v2 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  int v3 = v4;
  if (v4 == 54)
  {
    int v5 = 0;
    goto LABEL_5;
  }
  if (v3 == 74)
  {
    int v5 = 1;
LABEL_5:
    int v6 = 1;
    return v5 | (v6 << 8);
  }
  uint64_t v8 = *((void *)this + 7);
  uint64_t Loc = (const char *)mlir::Token::getLoc(v2);
  __int16 v22 = 1283;
  uint64_t v10 = *((void *)this + 1);
  uint64_t v11 = *((void *)this + 2);
  v21[0] = "expected 'true' or 'false' value for key '";
  v21[2] = v10;
  v21[3] = v11;
  v23[0] = v21;
  v23[2] = "'";
  __int16 v24 = 770;
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v8 + 8) + 8, Loc);
  mlir::emitError(EncodedSourceLocation, (uint64_t)v23, (uint64_t)v25);
  if (*(_DWORD *)(*(void *)(v8 + 8) + 56) == 1) {
    mlir::InFlightDiagnostic::abandon(v25);
  }
  if (v25[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
  }
  if (v32)
  {
    long long v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v31;
      char v15 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        char v15 = __p;
      }
      long long v31 = v13;
      operator delete(v15);
    }
    long long v16 = v28;
    if (v28)
    {
      BOOL v17 = v29;
      uint64_t v18 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v20 = (void *)*--v17;
          unint64_t v19 = v20;
          *BOOL v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v28;
      }
      long long v29 = v16;
      operator delete(v18);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  int v5 = 0;
  int v6 = 0;
  return v5 | (v6 << 8);
}

{
  char v2;
  int v3;
  unsigned __int8 v4;
  const void ***v5;
  char *v6;
  char *v7;
  long long v8;
  char *v9;
  const char *v10;
  const void ***v11;
  char *v12;
  char *v13;
  long long v14;
  void **v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  const void **v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned char v37[96];
  void *v38;
  void *v39;
  void *__p;
  void **v41;
  char v42;
  uint64_t v43;

  __int16 v43 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 6) == 1)
  {
    LOBYTE(v32) = 0;
    int v3 = v2 != 0;
    int v4 = v32;
    if (!v2) {
      int v4 = 0;
    }
  }
  else
  {
    mlir::emitError(*(void *)(*((void *)this + 4) + 24), (uint64_t)&v32);
    if (v32)
    {
      LODWORD(v28) = 3;
      long long v29 = "expected a BOOL resource entry, but found a ";
      int v30 = 44;
      int v5 = &v28;
      int v6 = (char *)v34;
      if (v35 >= v36)
      {
        __int16 v24 = v35 + 1;
        if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
        {
          __int16 v26 = (char *)&v28 - (unsigned char *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v6 = (char *)v34;
          int v5 = (const void ***)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v5 = &v28;
          int v6 = (char *)v34;
        }
      }
      __int16 v7 = &v6[24 * v35];
      uint64_t v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = v5[2];
      *(_OWORD *)__int16 v7 = v8;
      ++v35;
    }
    uint64_t v9 = mlir::toString(*((_DWORD *)this + 6));
    if (v32)
    {
      long long v31 = 261;
      size_t v28 = (const void **)v9;
      long long v29 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v33, &v28);
      if (v32)
      {
        LODWORD(v28) = 3;
        long long v29 = " entry instead";
        int v30 = 14;
        uint64_t v11 = &v28;
        uint64_t v12 = (char *)v34;
        if (v35 >= v36)
        {
          BOOL v25 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            uint64_t v27 = (char *)&v28 - (unsigned char *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            uint64_t v12 = (char *)v34;
            uint64_t v11 = (const void ***)((char *)v34 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v25, 24);
            uint64_t v11 = &v28;
            uint64_t v12 = (char *)v34;
          }
        }
        long long v13 = &v12[24 * v35];
        uint64_t v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v35;
        if (v32) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
        }
      }
    }
    if (v42)
    {
      char v15 = (void **)__p;
      if (__p)
      {
        long long v16 = v41;
        BOOL v17 = __p;
        if (v41 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          BOOL v17 = __p;
        }
        uint64_t v41 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v38;
      if (v38)
      {
        unint64_t v19 = v39;
        long long v20 = v38;
        if (v39 != v38)
        {
          do
          {
            __int16 v22 = (void *)*--v19;
            uint64_t v21 = v22;
            void *v19 = 0;
            if (v22) {
              operator delete[](v21);
            }
          }
          while (v19 != v18);
          long long v20 = v38;
        }
        int64_t v39 = v18;
        operator delete(v20);
      }
      if (v34 != v37) {
        free(v34);
      }
    }
    int v4 = 0;
    int v3 = 0;
  }
  return v4 | (v3 << 8);
}

void anonymous namespace'::ParsedResourceEntry::parseAsString(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)this + 8);
  int v4 = (_anonymous_namespace_::ParsedResourceEntry *)((char *)this + 32);
  if (v5 == 11)
  {
    mlir::Token::getStringValue(v4, &v23);
    *a2 = v23;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    uint64_t v6 = *((void *)this + 7);
    uint64_t Loc = (const char *)mlir::Token::getLoc(v4);
    __int16 v20 = 1283;
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    v19[0] = "expected string value for key '";
    void v19[2] = v8;
    v19[3] = v9;
    v21[0] = v19;
    v21[2] = "'";
    __int16 v22 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v6 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v21, (uint64_t)&v23);
    if (*(_DWORD *)(*(void *)(v6 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(&v23);
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v23.__r_.__value_.__r.__words[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
    }
    if (v30)
    {
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v29;
        long long v13 = __p;
        if (v29 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          long long v13 = __p;
        }
        long long v29 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v26;
      if (v26)
      {
        char v15 = v27;
        long long v16 = v26;
        if (v27 != v26)
        {
          do
          {
            uint64_t v18 = (void *)*--v15;
            BOOL v17 = v18;
            void *v15 = 0;
            if (v18) {
              operator delete[](v17);
            }
          }
          while (v15 != v14);
          long long v16 = v26;
        }
        uint64_t v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25) {
        free(v24);
      }
    }
  }
}

void anonymous namespace'::ParsedResourceEntry::parseAsBlob(mlir::Token *this@<X0>, void (*a2)(void **__return_ptr, uint64_t, size_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (mlir::Token *)((char *)this + 32);
  if (*((_DWORD *)this + 8) != 11)
  {
    v61.__r_.__value_.__s.__data_[0] = 0;
    char v62 = 0;
LABEL_8:
    uint64_t v10 = *((void *)this + 7);
    uint64_t Loc = (const char *)mlir::Token::getLoc(v6);
    __int16 v57 = 1283;
    uint64_t v12 = (const char *)*((void *)this + 1);
    uint64_t v13 = *((void *)this + 2);
    v54[0] = "expected hex string blob for key '";
    uint64_t v55 = v12;
    uint64_t v56 = v13;
    v58[0] = v54;
    uint64_t v59 = "'";
    __int16 v60 = 770;
    uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(*(void *)(v10 + 8) + 8, Loc);
    mlir::emitError(EncodedSourceLocation, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(void *)(v10 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(__dst);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    if (__dst[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v72)
    {
      char v15 = (void **)__p;
      if (__p)
      {
        long long v16 = v71;
        BOOL v17 = __p;
        if (v71 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          BOOL v17 = __p;
        }
        uint64_t v71 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v68;
      if (!v68) {
        goto LABEL_61;
      }
      unint64_t v19 = v69;
      __int16 v20 = v68;
      if (v69 == v68) {
        goto LABEL_60;
      }
      do
      {
        __int16 v22 = (void *)*--v19;
        uint64_t v21 = v22;
        void *v19 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v19 != v18);
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  mlir::Token::getHexStringValue((mlir::Token *)((char *)this + 32), &v61);
  if (!v62) {
    goto LABEL_8;
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v61.__r_.__value_.__l.__size_ >= 4)
    {
      int8x8_t data_low = (int8x8_t)*(unsigned int *)v61.__r_.__value_.__l.__data_;
      if (!data_low.i32[0]) {
        goto LABEL_67;
      }
LABEL_42:
      uint8x8_t v34 = (uint8x8_t)vcnt_s8(data_low);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] < 2u) {
        goto LABEL_67;
      }
      uint64_t v35 = *((void *)this + 7);
      long long v36 = (const char *)mlir::Token::getLoc(v6);
      __int16 v53 = 1283;
      uint64_t v37 = *((void *)this + 1);
      uint64_t v38 = *((void *)this + 2);
      v52[0] = "expected hex string blob for key '";
      void v52[2] = v37;
      v52[3] = v38;
      v54[0] = v52;
      uint64_t v55 = "' to encode alignment in first 4 bytes, but got non-power-of-2 value: ";
      __int16 v57 = 770;
      v58[0] = v54;
      uint64_t v59 = (const char *)data_low;
      __int16 v60 = 2306;
      uint64_t v39 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v35 + 8) + 8, v36);
      mlir::emitError(v39, (uint64_t)v58, (uint64_t)__dst);
      if (*(_DWORD *)(*(void *)(v35 + 8) + 56) == 1) {
        mlir::InFlightDiagnostic::abandon(__dst);
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
      if (__dst[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      }
      if (v72)
      {
        int64_t v40 = (void **)__p;
        if (__p)
        {
          uint64_t v41 = v71;
          __int16 v42 = __p;
          if (v71 != __p)
          {
            do
              uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            __int16 v42 = __p;
          }
          uint64_t v71 = v40;
          operator delete(v42);
        }
        uint64_t v18 = v68;
        if (!v68) {
          goto LABEL_61;
        }
        __int16 v43 = v69;
        __int16 v20 = v68;
        if (v69 == v68)
        {
LABEL_60:
          char v69 = v18;
          operator delete(v20);
LABEL_61:
          if ((void *)v65 != v66) {
            free((void *)v65);
          }
          goto LABEL_63;
        }
        do
        {
          char v45 = (void *)*--v43;
          long long v44 = v45;
          *__int16 v43 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v43 != v18);
LABEL_59:
        __int16 v20 = v68;
        goto LABEL_60;
      }
      goto LABEL_63;
    }
LABEL_25:
    uint64_t v23 = *((void *)this + 7);
    __int16 v24 = (const char *)mlir::Token::getLoc(v6);
    __int16 v57 = 1283;
    uint64_t v25 = (const char *)*((void *)this + 1);
    uint64_t v26 = *((void *)this + 2);
    v54[0] = "expected hex string blob for key '";
    uint64_t v55 = v25;
    uint64_t v56 = v26;
    v58[0] = v54;
    uint64_t v59 = "' to encode alignment in first 4 bytes";
    __int16 v60 = 770;
    uint64_t v27 = mlir::Lexer::getEncodedSourceLocation(*(void *)(v23 + 8) + 8, v24);
    mlir::emitError(v27, (uint64_t)v58, (uint64_t)__dst);
    if (*(_DWORD *)(*(void *)(v23 + 8) + 56) == 1) {
      mlir::InFlightDiagnostic::abandon(__dst);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    if (__dst[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v72)
    {
      size_t v28 = (void **)__p;
      if (__p)
      {
        long long v29 = v71;
        char v30 = __p;
        if (v71 != __p)
        {
          do
            long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          char v30 = __p;
        }
        uint64_t v71 = v28;
        operator delete(v30);
      }
      uint64_t v18 = v68;
      if (!v68) {
        goto LABEL_61;
      }
      uint64_t v31 = v69;
      __int16 v20 = v68;
      if (v69 == v68) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v33 = (void *)*--v31;
        char v32 = v33;
        *uint64_t v31 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v31 != v18);
      goto LABEL_59;
    }
LABEL_63:
    if (!v62) {
      return;
    }
    goto LABEL_64;
  }
  if (HIBYTE(v61.__r_.__value_.__r.__words[2]) <= 3u) {
    goto LABEL_25;
  }
  int8x8_t data_low = (int8x8_t)LODWORD(v61.__r_.__value_.__l.__data_);
  if (LODWORD(v61.__r_.__value_.__l.__data_)) {
    goto LABEL_42;
  }
LABEL_67:
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  size_t v47 = size - 4;
  if (size <= 4)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 48) = 0;
    *(unsigned char *)(a4 + 56) = 0;
    *(unsigned char *)(a4 + 64) = 1;
    if (!v62) {
      return;
    }
    goto LABEL_64;
  }
  uint64_t v48 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v48 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  unint64_t v49 = (char *)v48->__r_.__value_.__r.__words + 4;
  a2(__dst, a3, v47, *(void *)&data_low);
  memcpy(__dst[0], v49, v47);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  unint64_t v50 = v66[1];
  *(void *)(a4 + 16) = v64;
  *(void *)(a4 + 48) = v50;
  if (v50 >= 8)
  {
    unsigned int v51 = (_OWORD *)(a4 + 24);
    if ((v50 & 2) != 0 && (v50 & 4) != 0)
    {
      (*(void (**)(_OWORD *, long long *))((v50 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, &v65);
    }
    else
    {
      *unsigned int v51 = v65;
      *(void *)(a4 + 40) = v66[0];
    }
  }
  *(unsigned char *)(a4 + 56) = v67;
  *(unsigned char *)(a4 + 64) = 1;
  if (v62)
  {
LABEL_64:
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(llvm::StringRef,llvm::SMLoc)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0>(uint64_t a1, const void *a2, size_t a3, const char *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  __int16 v7 = *(void **)a1;
  uint64_t v8 = **(void **)(*(void *)a1 + 8);
  uint64_t v37 = a2;
  v38[0] = a3;
  uint64_t v33 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v8 + 16), (uint64_t)&v37, &v33)|| v33 == (const void **)(*(void *)(v8 + 16) + 24 * *(unsigned int *)(v8 + 32)))
  {
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9)
    {
      ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v9, v37, v38[0]);
      goto LABEL_31;
    }
    ParserFor = 0;
  }
  else
  {
    ParserFor = v33[2];
    if (ParserFor) {
      goto LABEL_31;
    }
  }
  uint64_t EncodedSourceLocation = mlir::Lexer::getEncodedSourceLocation(v7[1] + 8, a4);
  mlir::emitWarning(EncodedSourceLocation, (uint64_t)&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint8x8_t v34 = "ignoring unknown external resources for '";
    uint64_t v35 = 41;
    uint64_t v11 = &v33;
    uint64_t v12 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v30 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        uint64_t v12 = (char *)v39;
        uint64_t v11 = (const void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        uint64_t v11 = &v33;
        uint64_t v12 = (char *)v39;
      }
    }
    uint64_t v13 = &v12[24 * v40];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v40;
    if (v37)
    {
      __int16 v36 = 261;
      uint64_t v33 = (const void **)a2;
      uint8x8_t v34 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v38, &v33);
      if (v37)
      {
        LODWORD(v33) = 3;
        uint8x8_t v34 = "'";
        uint64_t v35 = 1;
        char v15 = &v33;
        long long v16 = (char *)v39;
        if (v40 >= v41)
        {
          unint64_t v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            int64_t v31 = (char *)&v33 - (unsigned char *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            long long v16 = (char *)v39;
            char v15 = (const void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            char v15 = &v33;
            long long v16 = (char *)v39;
          }
        }
        BOOL v17 = &v16[24 * v40];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)BOOL v17 = v18;
        ++v40;
        if (v37) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
        }
      }
    }
  }
  if (v47)
  {
    unint64_t v19 = (void **)__p;
    if (__p)
    {
      __int16 v20 = v46;
      uint64_t v21 = __p;
      if (v46 != __p)
      {
        do
          __int16 v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v46 = v19;
      operator delete(v21);
    }
    __int16 v22 = v43;
    if (v43)
    {
      uint64_t v23 = v44;
      __int16 v24 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        __int16 v24 = v43;
      }
      long long v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
LABEL_31:
  uint64_t v37 = v7;
  v38[0] = (size_t)&ParserFor;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    long long v14 = 0;
    uint64_t result = 0;
    goto LABEL_70;
  }
  uint64_t v6 = *a1;
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  unsigned int v8 = v4 - 1;
  uint64_t v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      uint64_t v11 = 0;
      int v19 = 1;
      int v20 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v21 = (const void *)*v14;
      if (*v14 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == (const void *)-2;
          }
          if (v22) {
            uint64_t v11 = v14;
          }
          int v23 = v19 + v20;
          ++v19;
          int v20 = v23 & v8;
          long long v14 = (void *)(v6 + 24 * (v23 & v8));
          uint64_t v21 = (const void *)*v14;
          if (*v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v11 = 0;
      int v31 = 1;
      int v32 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v33 = *v14;
      if (*v14 == -2) {
        goto LABEL_47;
      }
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v33 == -2;
            }
            if (v34) {
              uint64_t v11 = v14;
            }
            int v35 = v31 + v32;
            ++v31;
            int v32 = v35 & v8;
            long long v14 = (void *)(v6 + 24 * (v35 & v8));
            uint64_t v33 = *v14;
            if (*v14 != -2) {
              goto LABEL_43;
            }
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      uint64_t v11 = 0;
      int v36 = 1;
      int v37 = HashValue & v8;
      long long v14 = (void *)(v6 + 24 * (HashValue & v8));
      uint64_t v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_63;
      }
      while (v38 != (const void *)-1)
      {
        if (v11) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38 == (const void *)-2;
        }
        if (v39) {
          uint64_t v11 = v14;
        }
        int v40 = v36 + v37;
        ++v36;
        int v37 = v40 & v8;
        long long v14 = (void *)(v6 + 24 * (v40 & v8));
        uint64_t v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10)) {
            goto LABEL_69;
          }
        }
      }
      goto LABEL_66;
    }
    uint64_t v11 = 0;
    int v24 = 1;
    int v25 = HashValue & v8;
    long long v14 = (void *)(v6 + 24 * (HashValue & v8));
    uint64_t v26 = (const void *)*v14;
    if (*v14 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (v27 = v24, int v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (const void *)-2;
          }
          if (v29) {
            uint64_t v11 = v14;
          }
          int v30 = v24 + v25;
          ++v24;
          int v25 = v30 & v8;
          long long v14 = (void *)(v6 + 24 * (v30 & v8));
          uint64_t v26 = (const void *)*v14;
          if (*v14 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    uint64_t result = 1;
    goto LABEL_70;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  long long v14 = (void *)(v6 + 24 * (HashValue & v8));
  char v15 = (const void *)*v14;
  if (*v14 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10)) {
    goto LABEL_69;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      uint64_t v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    long long v14 = (void *)(v6 + 24 * (v17 & v8));
    char v15 = (const void *)*v14;
    if (*v14 != -1) {
      goto LABEL_5;
    }
  }
LABEL_66:
  uint64_t result = 0;
  if (v11) {
    long long v14 = v11;
  }
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<anonymous namespace'::TopLevelOperationParser::parseExternalResourceFileMetadata(void)::$_0::operator() const(llvm::StringRef,llvm::SMLoc)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t Loc = (void *)mlir::Token::getLoc((mlir::Token *)(*(void *)(*a1 + 8) + 56));
  int v4 = *(void **)(v2 + 8);
  int v5 = *((_DWORD *)v4 + 14);
  if (v5 == 3 || v5 == 12) {
    goto LABEL_6;
  }
  if (mlir::Token::isKeyword((mlir::Token *)(v4 + 7)))
  {
    int v4 = *(void **)(v2 + 8);
LABEL_6:
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 1), (uint64_t)&v27);
    uint64_t v9 = *(void *)(v2 + 8);
    *(_OWORD *)(v9 + 56) = v27;
    *(void *)(v9 + 72) = v28;
    *(void *)&long long v27 = "expected ':'";
    LOWORD(v30) = 259;
    if (!mlir::detail::Parser::parseToken(v2, 15, (uint64_t)&v27)) {
      return 0;
    }
    uint64_t v10 = *(void *)(v2 + 8);
    long long v24 = *(_OWORD *)(v10 + 56);
    uint64_t v25 = *(void *)(v10 + 72);
    mlir::Lexer::lexToken((mlir::Lexer *)(v10 + 8), (uint64_t)&v27);
    uint64_t v11 = *(void *)(v2 + 8);
    *(_OWORD *)(v11 + 56) = v27;
    *(void *)(v11 + 72) = v28;
    uint64_t v12 = *(void *)a1[1];
    if (!v12) {
      return 1;
    }
    uint64_t v31 = v25;
    uint64_t v32 = v2;
    long long v30 = v24;
    *(void *)&long long v27 = &unk_1EC99A030;
    *((void *)&v27 + 1) = v7;
    uint64_t v28 = v8;
    BOOL v29 = Loc;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v12 + 16))(v12, &v27);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v27);
    return v13;
  }
  *(void *)&long long v24 = "expected identifier key for 'external_resources' entry";
  __int16 v26 = 259;
  mlir::detail::Parser::emitError(v2, (uint64_t)&v24, &v27);
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if ((void)v27) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  }
  if (v37)
  {
    char v15 = (void **)__p;
    if (__p)
    {
      BOOL v16 = v36;
      int v17 = __p;
      if (v36 != __p)
      {
        do
          BOOL v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        int v17 = __p;
      }
      int v36 = v15;
      operator delete(v17);
    }
    long long v18 = v33;
    if (v33)
    {
      int v19 = v34;
      int v20 = v33;
      if (v34 != v33)
      {
        do
        {
          BOOL v22 = (void *)*--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        int v20 = v33;
      }
      BOOL v34 = v18;
      operator delete(v20);
    }
    if (v29 != (char *)&v30 + 8) {
      free(v29);
    }
  }
  return v13;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>,mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::InsertIntoBucket<mlir::OpAsmDialectInterface const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 32 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      int v16 = v11 + v14++;
      uint64_t v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 32 * v11);
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0x3800000000;
  return a2;
}

void *llvm::DenseMap<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>,llvm::DenseMapInfo<mlir::OpAsmDialectInterface const*,void>,llvm::detail::DenseMapPair<mlir::OpAsmDialectInterface const*,llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        void *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        BOOL v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          uint64_t v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v22 = *(void *)a1 + 32 * v25;
          uint64_t v26 = *(void *)v22;
          if (v23 != *(void *)v22)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v22;
              }
              int v30 = v25 + v28++;
              uint64_t v25 = v30 & v24;
              uint64_t v22 = *(void *)a1 + 32 * v25;
              uint64_t v26 = *(void *)v22;
              if (v23 == *(void *)v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          *(void *)uint64_t v22 = v23;
          *(void *)(v22 + 8) = *((void *)v16 + 1);
          *(_OWORD *)(v22 + 16) = *((_OWORD *)v16 + 1);
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = 0;
          *((_DWORD *)v16 + 6) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        int v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    int v19 = result + 4;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      void *v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[4 * v17];
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<std::pair<std::string,mlir::AsmDialectResourceHandle>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  int v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    int v10 = buffer + 56;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
    int v10 = buffer + 56;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  *(void *)buffer = a3;
  *(_OWORD *)(buffer + 40) = 0u;
  *(_OWORD *)(buffer + 8) = 0u;
  *(_OWORD *)(buffer + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
  *((void *)buffer + 5) = &mlir::detail::TypeIDResolver<void,void>::id;
  *int v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  int v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

uint64_t mlir::Token::getLoc(mlir::Token *this)
{
  return *((void *)this + 1);
}

uint64_t mlir::Token::getEndLoc(mlir::Token *this)
{
  return *((void *)this + 1) + *((void *)this + 2);
}

uint64_t mlir::Token::getLocRange(mlir::Token *this)
{
  return *((void *)this + 1);
}

unint64_t mlir::Token::getUnsignedIntegerValue(mlir::Token *this)
{
  unint64_t v1 = *((void *)this + 2);
  if (v1 <= 1)
  {
    int v4 = (unsigned __int8 *)*((void *)this + 1);
    unint64_t v6 = 0;
    if (llvm::getAsUnsignedInteger(v4, v1, 0xAu, &v6)) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = (unsigned __int8 *)*((void *)this + 1);
    if (v2[1] == 120) {
      unsigned int v3 = 0;
    }
    else {
      unsigned int v3 = 10;
    }
    unint64_t v6 = 0;
    if (llvm::getAsUnsignedInteger(v2, v1, v3, &v6)) {
      return 0;
    }
  }
  if (!HIDWORD(v6)) {
    return v6 | 0x100000000;
  }
  return 0;
}

unint64_t mlir::Token::getUInt64IntegerValue(unsigned __int8 *a1, unint64_t a2)
{
  unsigned int v2 = 10;
  if (a2 >= 2)
  {
    if (a1[1] == 120) {
      unsigned int v2 = 0;
    }
    else {
      unsigned int v2 = 10;
    }
  }
  unint64_t v4 = 0;
  if (llvm::getAsUnsignedInteger(a1, a2, v2, &v4)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t mlir::Token::getFloatingPointValue(mlir::Token *this)
{
  double v2 = 0.0;
  if (llvm::StringRef::getAsDouble((mlir::Token *)((char *)this + 8), &v2, 1)) {
    return 0;
  }
  else {
    return *(void *)&v2;
  }
}

unint64_t mlir::Token::getIntTypeBitwidth(mlir::Token *this)
{
  unint64_t v1 = (unsigned char *)*((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = 1;
  if (*v1 != 105) {
    unint64_t v3 = 2;
  }
  if (v2 < v3) {
    unint64_t v3 = *((void *)this + 2);
  }
  unint64_t v5 = 0;
  if ((llvm::getAsUnsignedInteger(&v1[v3], v2 - v3, 0xAu, &v5) & 1) != 0 || HIDWORD(v5)) {
    return 0;
  }
  else {
    return v5 | 0x100000000;
  }
}

uint64_t mlir::Token::getIntTypeSignedness(mlir::Token *this)
{
  int v1 = **((unsigned __int8 **)this + 1);
  if (v1 == 105) {
    return 0;
  }
  if (v1 == 115) {
    return 257;
  }
  return 256;
}

void mlir::Token::getStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    uint64_t v4 = *((void *)this + 1) + 1;
  }
  else {
    uint64_t v4 = *((void *)this + 1);
  }
  std::string::size_type v5 = v3 - (v3 != 0);
  if (*(_DWORD *)this != 2)
  {
    if (v5 >= v5 - 1) {
      --v5;
    }
    if (*(_DWORD *)this == 4)
    {
      if (v5) {
        ++v4;
      }
      v5 -= v5 != 0;
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, v5);
  if (v5)
  {
    unsigned int v6 = 0;
    do
    {
      int v8 = *(unsigned __int8 *)(v4 + v6);
      if (v8 == 92)
      {
        unsigned int v7 = v6 + 2;
        int v9 = *(char *)(v4 + v6 + 1);
        if (v9 <= 109)
        {
          LOBYTE(v8) = *(unsigned char *)(v4 + v6 + 1);
          if (v9 == 34 || v9 == 92) {
            goto LABEL_14;
          }
LABEL_23:
          uint64_t v10 = *(unsigned __int8 *)(v4 + v7);
          unsigned int v7 = v6 + 3;
          LOWORD(v8) = llvm::hexDigitValue(char)::LUT[v10] | (16
                                                            * llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v4 + v6 + 1)]);
          goto LABEL_14;
        }
        if (v9 == 116)
        {
          LOBYTE(v8) = 9;
          goto LABEL_14;
        }
        if (v9 != 110) {
          goto LABEL_23;
        }
        LOBYTE(v8) = 10;
      }
      else
      {
        unsigned int v7 = v6 + 1;
      }
LABEL_14:
      std::string::push_back(a2, v8);
      unsigned int v6 = v7;
    }
    while (v7 != v5);
  }
}

void mlir::Token::getHexStringValue(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  BOOL v5 = v3 != 0;
  unint64_t v6 = v3 - v5;
  if (v6 >= v6 - 1) {
    --v6;
  }
  memset(&v16, 0, sizeof(v16));
  if (v6 < 2 || *(_WORD *)(v4 + v5) != 30768 || (unint64_t v7 = v6 - 2, ((v6 - 2) & 1) != 0))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else if (v6 < 3 {
         || ((std::string::resize(&v16, (v6 - 1) >> 1, 0),
  }
              (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
           ? (int v8 = &v16)
           : (int v8 = (std::string *)v16.__r_.__value_.__r.__words[0]),
             v7 < 2))
  {
LABEL_18:
    *a2 = v16;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    uint64_t v9 = -(uint64_t)(v7 >> 1);
    uint64_t v10 = (unsigned __int8 *)(v5 + 2 + v4 + 1);
    while (1)
    {
      int v11 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v10 - 1)];
      int v12 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v10];
      if (v11 == 0xFFFF || v12 == 0xFFFF) {
        break;
      }
      v10 += 2;
      v8->__r_.__value_.__s.__data_[0] = v12 | (16 * v11);
      int v8 = (std::string *)((char *)v8 + 1);
      if (__CFADD__(v9++, 1)) {
        goto LABEL_18;
      }
    }
    int v15 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    if (v15 < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void mlir::Token::getSymbolReference(mlir::Token *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = v3 != 0;
  if (v3) {
    BOOL v5 = (unsigned char *)(*((void *)this + 1) + 1);
  }
  else {
    BOOL v5 = (unsigned char *)*((void *)this + 1);
  }
  if (*v5 == 34)
  {
    mlir::Token::getStringValue(this, a2);
  }
  else
  {
    size_t v6 = v3 - v4;
    if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v6 >= 0x17)
    {
      uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v7 = v6 | 7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = (std::string *)operator new(v7 + 1);
      a2->__r_.__value_.__l.__size_ = v6;
      a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      a2 = v9;
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = v6;
      if (v3 == v4)
      {
        a2->__r_.__value_.__s.__data_[v6] = 0;
        return;
      }
    }
    memmove(a2, v5, v6);
    a2->__r_.__value_.__s.__data_[v6] = 0;
  }
}

unint64_t mlir::Token::getHashIdentifierNumber(mlir::Token *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    unint64_t v2 = (unsigned __int8 *)(*((void *)this + 1) + 1);
  }
  else {
    unint64_t v2 = (unsigned __int8 *)*((void *)this + 1);
  }
  unint64_t v4 = 0;
  if ((llvm::getAsUnsignedInteger(v2, v1 - (v1 != 0), 0xAu, &v4) & 1) != 0 || HIDWORD(v4)) {
    return 0;
  }
  else {
    return v4 | 0x100000000;
  }
}

char *mlir::Token::getTokenSpelling(int a1)
{
  return (&off_1E4FBF618)[a1 - 13];
}

BOOL mlir::Token::isKeyword(mlir::Token *this)
{
  return (*(_DWORD *)this - 34) < 0x2D;
}

BOOL mlir::Token::isCodeCompletionFor(uint64_t a1, int a2)
{
  if (*(_DWORD *)a1 == 2
    && *(void *)(a1 + 16)
    && (char v2 = a2 - 5, (a2 - 5) <= 6)
    && ((0x4Fu >> v2) & 1) != 0)
  {
    return **(unsigned char **)(a1 + 8) == ((0x222222215E2523uLL >> (8 * v2)) & 0x7F);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::detail::Parser::parseOptionalType(mlir::detail::Parser *this, mlir::Type *a2)
{
  int v2 = 0;
  BOOL v4 = 0;
  switch(*(_DWORD *)(*((void *)this + 1) + 56))
  {
    case 8:
    case 0xC:
    case 0x26:
    case 0x28:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x3A:
    case 0x3D:
    case 0x40:
    case 0x47:
    case 0x48:
    case 0x4B:
    case 0x4E:
      uint64_t v5 = mlir::detail::Parser::parseNonFunctionType(this);
      goto LABEL_3;
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x49:
    case 0x4A:
    case 0x4C:
    case 0x4D:
      goto LABEL_4;
    case 0x15:
      uint64_t v5 = mlir::detail::Parser::parseFunctionType(this);
LABEL_3:
      *(void *)a2 = v5;
      BOOL v4 = v5 != 0;
      int v2 = 1;
LABEL_4:
      uint64_t result = v4 | (v2 << 8);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseType(mlir::detail::Parser *this)
{
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21) {
    return mlir::detail::Parser::parseFunctionType(this);
  }
  else {
    return mlir::detail::Parser::parseNonFunctionType(this);
  }
}

uint64_t mlir::detail::Parser::parseFunctionType(mlir::detail::Parser *this)
{
  _OWORD v17[4] = *MEMORY[0x1E4F143B8];
  int v15 = v17;
  uint64_t v16 = 0x400000000;
  int v12 = v14;
  uint64_t v13 = 0x400000000;
  if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v15)
    || (uint64_t v8 = "expected '->' in function type",
        __int16 v9 = 259,
        !mlir::detail::Parser::parseToken((uint64_t)this, 13, (uint64_t)&v8)))
  {
LABEL_12:
    uint64_t FunctionType = 0;
    uint64_t v5 = v12;
    if (v12 == v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    if (!mlir::detail::Parser::parseTypeListParens((uint64_t)this, (uint64_t)&v12)) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v2 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v2) {
      goto LABEL_12;
    }
    unsigned int v3 = v13;
    if (v13 >= HIDWORD(v13))
    {
      uint64_t v7 = v2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
      uint64_t v2 = v7;
      unsigned int v3 = v13;
    }
    *((void *)v12 + v3) = v2;
    LODWORD(v13) = v13 + 1;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v15, v16);
  mlir::ValueRange::ValueRange(v10, (uint64_t)v12, v13);
  uint64_t FunctionType = mlir::Builder::getFunctionType((mlir::MLIRContext **)this, v11[0], v11[1], v10[0], v10[1]);
  uint64_t v5 = v12;
  if (v12 != v14) {
LABEL_13:
  }
    free(v5);
LABEL_14:
  if (v15 != v17) {
    free(v15);
  }
  return FunctionType;
}

uint64_t mlir::detail::Parser::parseNonFunctionType(mlir::detail::Parser *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  unsigned int v3 = (mlir::Token *)(v2 + 56);
  switch(*(_DWORD *)(v2 + 56))
  {
    case 2:
      if (mlir::Token::isCodeCompletionFor((uint64_t)v3, 8)) {
        goto LABEL_3;
      }
      uint64_t result = mlir::detail::Parser::codeCompleteType(this);
      break;
    case 8:
LABEL_3:
      uint64_t result = mlir::detail::Parser::parseExtendedType(this);
      break;
    case 0xC:
      unint64_t IntTypeBitwidth = mlir::Token::getIntTypeBitwidth(v3);
      if ((IntTypeBitwidth & 0xFF00000000) == 0)
      {
        *(void *)&long long v51 = "invalid integer width";
        __int16 v53 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v51, &v54);
        if (v54) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
        goto LABEL_69;
      }
      unsigned int v14 = IntTypeBitwidth;
      if (BYTE3(IntTypeBitwidth))
      {
        uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
        unint64_t v49 = "integer bitwidth is limited to ";
        __int16 v50 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v49, &v51);
        uint64_t v16 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&v51, mlir::IntegerType::kMaxWidth);
        mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v16, " bits");
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v51);
        goto LABEL_69;
      }
      __int16 IntTypeSignedness = mlir::Token::getIntTypeSignedness((mlir::Token *)(*((void *)this + 1) + 56));
      if ((_BYTE)IntTypeSignedness) {
        int v46 = 1;
      }
      else {
        int v46 = 2;
      }
      if ((IntTypeSignedness & 0xFF00) != 0) {
        unsigned int v47 = v46;
      }
      else {
        unsigned int v47 = 0;
      }
      mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v51);
      uint64_t v48 = *((void *)this + 1);
      *(_OWORD *)(v48 + 56) = v51;
      *(void *)(v48 + 72) = v52;
      uint64_t result = mlir::IntegerType::get(***((void ***)this + 1), v14, v47);
      break;
    case 0x26:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v17 = *((void *)this + 1);
      *(_OWORD *)(v17 + 56) = v51;
      *(void *)(v17 + 72) = v52;
      uint64_t result = mlir::Builder::getBF16Type((mlir::BFloat16Type **)this, v18);
      break;
    case 0x28:
      uint64_t result = mlir::detail::Parser::parseComplexType(this);
      break;
    case 0x2C:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v19 = *((void *)this + 1);
      *(_OWORD *)(v19 + 56) = v51;
      *(void *)(v19 + 72) = v52;
      uint64_t result = mlir::Builder::getF16Type((mlir::Float16Type **)this, v20);
      break;
    case 0x2D:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v21 = *((void *)this + 1);
      *(_OWORD *)(v21 + 56) = v51;
      *(void *)(v21 + 72) = v52;
      uint64_t result = mlir::Builder::getF32Type((mlir::Float32Type **)this, v22);
      break;
    case 0x2E:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v23 = *((void *)this + 1);
      *(_OWORD *)(v23 + 56) = v51;
      *(void *)(v23 + 72) = v52;
      uint64_t result = mlir::Builder::getF64Type((mlir::Float64Type **)this, v24);
      break;
    case 0x2F:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v25 = *((void *)this + 1);
      *(_OWORD *)(v25 + 56) = v51;
      *(void *)(v25 + 72) = v52;
      uint64_t result = mlir::Builder::getF80Type((mlir::Float80Type **)this, v26);
      break;
    case 0x30:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v27 = *((void *)this + 1);
      *(_OWORD *)(v27 + 56) = v51;
      *(void *)(v27 + 72) = v52;
      uint64_t result = mlir::Builder::getFloat8E5M2Type((mlir::Float8E5M2Type **)this, v28);
      break;
    case 0x31:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v29 = *((void *)this + 1);
      *(_OWORD *)(v29 + 56) = v51;
      *(void *)(v29 + 72) = v52;
      uint64_t result = mlir::Builder::getFloat8E4M3FNType((mlir::Float8E4M3FNType **)this, v30);
      break;
    case 0x32:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v31 = *((void *)this + 1);
      *(_OWORD *)(v31 + 56) = v51;
      *(void *)(v31 + 72) = v52;
      uint64_t result = mlir::Builder::getFloat8E5M2FNUZType((mlir::Float8E5M2FNUZType **)this, v32);
      break;
    case 0x33:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v33 = *((void *)this + 1);
      *(_OWORD *)(v33 + 56) = v51;
      *(void *)(v33 + 72) = v52;
      uint64_t result = mlir::Builder::getFloat8E4M3FNUZType((mlir::Float8E4M3FNUZType **)this, v34);
      break;
    case 0x34:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v35 = *((void *)this + 1);
      *(_OWORD *)(v35 + 56) = v51;
      *(void *)(v35 + 72) = v52;
      uint64_t result = mlir::Builder::getFloat8E4M3B11FNUZType((mlir::Float8E4M3B11FNUZType **)this, v36);
      break;
    case 0x35:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v37 = *((void *)this + 1);
      *(_OWORD *)(v37 + 56) = v51;
      *(void *)(v37 + 72) = v52;
      uint64_t result = mlir::Builder::getF128Type((mlir::Float128Type **)this, v38);
      break;
    case 0x3A:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v39 = *((void *)this + 1);
      *(_OWORD *)(v39 + 56) = v51;
      *(void *)(v39 + 72) = v52;
      uint64_t result = mlir::Builder::getIndexType((mlir::IndexType **)this, v40);
      break;
    case 0x3D:
      uint64_t result = mlir::detail::Parser::parseMemRefType(this);
      break;
    case 0x40:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v41 = *((void *)this + 1);
      *(_OWORD *)(v41 + 56) = v51;
      *(void *)(v41 + 72) = v52;
      uint64_t result = mlir::Builder::getNoneType((mlir::NoneType **)this, v42);
      break;
    case 0x47:
      uint64_t result = mlir::detail::Parser::parseTensorType(this);
      break;
    case 0x48:
      mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v51);
      uint64_t v43 = *((void *)this + 1);
      *(_OWORD *)(v43 + 56) = v51;
      *(void *)(v43 + 72) = v52;
      uint64_t result = mlir::Builder::getTF32Type((mlir::FloatTF32Type **)this, v44);
      break;
    case 0x4B:
      uint64_t result = mlir::detail::Parser::parseTupleType(this);
      break;
    case 0x4E:
      uint64_t result = mlir::detail::Parser::parseVectorType(this);
      break;
    default:
      *(void *)&long long v51 = "expected non-function type";
      __int16 v53 = 259;
      mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v51, v56);
      if (v56[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v56);
      }
      if (v63)
      {
        uint64_t v5 = v61;
        if (v61)
        {
          size_t v6 = v62;
          uint64_t v7 = v61;
          if (v62 != v61)
          {
            do
              size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
            while (v6 != v5);
            uint64_t v7 = v61;
          }
          char v62 = v5;
          operator delete(v7);
        }
        uint64_t v8 = v59;
        if (v59)
        {
          __int16 v9 = v60;
          uint64_t v10 = v59;
          if (v60 != v59)
          {
            do
            {
              int v12 = (void *)*--v9;
              int v11 = v12;
              void *v9 = 0;
              if (v12) {
                operator delete[](v11);
              }
            }
            while (v9 != v8);
            uint64_t v10 = v59;
          }
          __int16 v60 = v8;
          operator delete(v10);
        }
        if (v57 != &v58) {
          free(v57);
        }
      }
LABEL_69:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t mlir::detail::Parser::parseFunctionResultTypes(mlir::detail::Parser *a1, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)a1 + 1) + 56) == 21)
  {
    return mlir::detail::Parser::parseTypeListParens((uint64_t)a1, a2);
  }
  else
  {
    uint64_t result = mlir::detail::Parser::parseNonFunctionType(a1);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v5 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(a2 + 8);
      }
      *(void *)(*(void *)a2 + 8 * v5) = v4;
      ++*(_DWORD *)(a2 + 8);
      return 1;
    }
  }
  return result;
}

BOOL mlir::detail::Parser::parseTypeListParens(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v7 = "expected '('";
  __int16 v9 = 259;
  if (!mlir::detail::Parser::parseToken(a1, 21, (uint64_t)&v7)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 56) == 28)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v7);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_OWORD *)(v5 + 56) = v7;
    *(void *)(v5 + 72) = v8;
    return 1;
  }
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  if (!mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v7, 0, 0))return 0; {
  *(void *)&long long v7 = "expected ')'";
  }
  __int16 v9 = 259;
  return mlir::detail::Parser::parseToken(a1, 28, (uint64_t)&v7) != 0;
}

uint64_t mlir::detail::Parser::parseTypeListNoParens(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return mlir::detail::Parser::parseCommaSeparatedList(a1, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v3, 0, 0);
}

uint64_t mlir::detail::Parser::parseComplexType(mlir::detail::Parser *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v27);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v27;
  *(void *)(v2 + 72) = v28;
  *(void *)&long long v27 = "expected '<' in complex type";
  __int16 v29 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v27)) {
    return 0;
  }
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v4 = mlir::detail::Parser::parseFunctionType(this);
    if (!v4) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v4) {
      return 0;
    }
  }
  *(void *)&long long v27 = "expected '>' in complex type";
  __int16 v29 = 259;
  if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v27))
  {
    uint64_t v5 = *(void **)(*(void *)v4 + 136);
    if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return mlir::ComplexType::get(v4);
    }
    *(void *)&long long v27 = "invalid element type for complex";
    __int16 v29 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v27, v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        uint64_t v20 = v36;
        uint64_t v21 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        int v36 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v33;
      if (v33)
      {
        uint64_t v23 = v34;
        int v24 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v26 = (void *)*--v23;
            uint64_t v25 = v26;
            void *v23 = 0;
            if (v26) {
              operator delete[](v25);
            }
          }
          while (v23 != v22);
          int v24 = v33;
        }
        BOOL v34 = v22;
        operator delete(v24);
      }
      if (v31 != &v32) {
        free(v31);
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::Parser::parseMemRefType(mlir::detail::Parser *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v43);
  uint64_t v3 = *((void *)this + 1);
  *(_OWORD *)(v3 + 56) = v43;
  *(void *)(v3 + 72) = v44[0];
  *(void *)&long long v43 = "expected '<' in memref type";
  __int16 v45 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v43)) {
    return 0;
  }
  *(void *)&long long v43 = v44;
  *((void *)&v43 + 1) = 0x400000000;
  uint64_t v4 = *((void *)this + 1);
  if (*(_DWORD *)(v4 + 56) == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)&v30);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = v30;
    *(void *)(v5 + 72) = v31;
    char v33 = 1;
    if (!mlir::detail::Parser::parseXInDimensionList(this)) {
      goto LABEL_55;
    }
    uint64_t v6 = *((void *)this + 1);
  }
  else
  {
    char v33 = 0;
    LOBYTE(v26[0]) = 1;
    *(void *)&long long v30 = this;
    *((void *)&v30 + 1) = v26;
    uint64_t v31 = &v43;
    while (1)
    {
      uint64_t v6 = *((void *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A) {
        break;
      }
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v30)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_55;
      }
    }
  }
  long long v7 = (const char *)mlir::Token::getLoc((mlir::Token *)(v6 + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v8 = mlir::detail::Parser::parseFunctionType(this);
    if (!v8) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v8 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v8) {
      goto LABEL_55;
    }
  }
  *(void *)&long long v30 = v8;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v30)
    || ((uint64_t v10 = *(void **)(*(void *)v30 + 136), v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (BOOL v11 = 1),
        !v11 ? (BOOL v12 = v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v12 = 1),
        !v12 ? (BOOL v13 = v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (BOOL v13 = 1),
        v13 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(void *)v30 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v26[0] = this;
    v26[1] = &v28;
    v26[2] = &v27;
    void v26[3] = &v33;
    uint64_t v27 = 0;
    uint64_t v14 = *((void *)this + 1);
    if (*(_DWORD *)(v14 + 56) == 19)
    {
      mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
      uint64_t v15 = *((void *)this + 1);
      *(_OWORD *)(v15 + 56) = v30;
      *(void *)(v15 + 72) = v31;
    }
    else
    {
      *(void *)&long long v30 = "expected ',' or '>' in memref type";
      __int16 v32 = 259;
      if (!mlir::detail::Parser::parseToken((uint64_t)this, 16, (uint64_t)&v30)
        || !mlir::detail::Parser::parseCommaSeparatedListUntil((uint64_t)this, 19, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>, (uint64_t)v26, 0))
      {
        goto LABEL_55;
      }
    }
    if (v33)
    {
      uint64_t v34 = Loc;
      *(void *)&long long v30 = this;
      *((void *)&v30 + 1) = &v34;
      uint64_t Checked = mlir::UnrankedMemRefType::getChecked((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v8, v27);
      uint64_t v16 = (void *)v43;
      if ((void *)v43 == v44) {
        return Checked;
      }
    }
    else
    {
      uint64_t v34 = Loc;
      *(void *)&long long v30 = this;
      *((void *)&v30 + 1) = &v34;
      uint64_t Checked = mlir::MemRefType::getChecked((void (*)(void *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>, (uint64_t)&v30, v43, (mlir::AffineMap *)DWORD2(v43), v8, v28, v29, v27);
      uint64_t v16 = (void *)v43;
      if ((void *)v43 == v44) {
        return Checked;
      }
    }
    goto LABEL_56;
  }
  *(void *)&long long v30 = "invalid memref element type";
  __int16 v32 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v7, (uint64_t)&v30, v35);
  if (v35[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  }
  if (v42)
  {
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v41;
      uint64_t v19 = __p;
      if (v41 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      uint64_t v41 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v38;
    if (v38)
    {
      uint64_t v21 = v39;
      uint64_t v22 = v38;
      if (v39 != v38)
      {
        do
        {
          int v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *uint64_t v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v38;
      }
      uint64_t v39 = v20;
      operator delete(v22);
    }
    if (v36 != &v37) {
      free(v36);
    }
  }
LABEL_55:
  uint64_t Checked = 0;
  uint64_t v16 = (void *)v43;
  if ((void *)v43 != v44) {
LABEL_56:
  }
    free(v16);
  return Checked;
}

uint64_t mlir::detail::Parser::parseXInDimensionList(mlir::detail::Parser *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  if (*(_DWORD *)(v2 + 56) == 3 && (uint64_t v3 = *(unsigned char **)(v2 + 64), *v3 == 120))
  {
    if (*(void *)(v2 + 72) != 1) {
      *(void *)(v2 + 40) = v3 + 1;
    }
    mlir::Lexer::lexToken((mlir::Lexer *)(v2 + 8), (uint64_t)&v17);
    uint64_t v4 = *((void *)this + 1);
    *(_OWORD *)(v4 + 56) = v17;
    *(void *)(v4 + 72) = v18;
    return 1;
  }
  else
  {
    uint64_t v15 = "expected 'x' in dimension list";
    __int16 v16 = 259;
    mlir::detail::Parser::emitWrongTokenError((uint64_t)this, (uint64_t)&v15, &v17);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
    if ((void)v17) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
    }
    if (v25)
    {
      uint64_t v6 = (void **)__p;
      if (__p)
      {
        long long v7 = v24;
        uint64_t v8 = __p;
        if (v24 != __p)
        {
          do
            long long v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        int v24 = v6;
        operator delete(v8);
      }
      __int16 v9 = v21;
      if (v21)
      {
        uint64_t v10 = v22;
        BOOL v11 = v21;
        if (v22 != v21)
        {
          do
          {
            BOOL v13 = (void *)*--v10;
            BOOL v12 = v13;
            void *v10 = 0;
            if (v13) {
              operator delete[](v12);
            }
          }
          while (v10 != v9);
          BOOL v11 = v21;
        }
        uint64_t v22 = v9;
        operator delete(v11);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v5;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(mlir::detail::Parser *a1, uint64_t a2, char a3, int a4)
{
  char v8 = a3;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = a2;
  if (a4)
  {
    while ((*(_DWORD *)(*((void *)a1 + 1) + 56) | 0x10) == 0x1A)
    {
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)
        || !mlir::detail::Parser::parseXInDimensionList(a1))
      {
        return 0;
      }
    }
    return 1;
  }
  if ((*(_DWORD *)(*((void *)a1 + 1) + 56) | 0x10) != 0x1A) {
    return 1;
  }
  do
  {
    if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)v7)) {
      break;
    }
    uint64_t v5 = *((void *)a1 + 1);
    if (*(_DWORD *)(v5 + 56) != 3 || **(unsigned char **)(v5 + 64) != 120) {
      return 1;
    }
  }
  while (mlir::detail::Parser::parseXInDimensionList(a1));
  return 0;
}

uint64_t mlir::detail::Parser::parseTensorType(mlir::detail::Parser *this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v40);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v40;
  *(void *)(v2 + 72) = v41[0];
  *(void *)&long long v40 = "expected '<' in tensor type";
  __int16 v42 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v40)) {
    return 0;
  }
  *(void *)&long long v40 = v41;
  *((void *)&v40 + 1) = 0x400000000;
  uint64_t v3 = *((void *)this + 1);
  int v4 = *(_DWORD *)(v3 + 56);
  if (v4 == 30)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)&v26);
    uint64_t v5 = *((void *)this + 1);
    *(_OWORD *)(v5 + 56) = v26;
    *(void *)(v5 + 72) = v27;
    if (!mlir::detail::Parser::parseXInDimensionList(this)) {
      goto LABEL_51;
    }
    uint64_t v6 = *((void *)this + 1);
  }
  else
  {
    LOBYTE(v30) = 1;
    *(void *)&long long v26 = this;
    *((void *)&v26 + 1) = &v30;
    uint64_t v27 = &v40;
    while (1)
    {
      uint64_t v6 = *((void *)this + 1);
      if ((*(_DWORD *)(v6 + 56) | 0x10) != 0x1A) {
        break;
      }
      if (!mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()((uint64_t)&v26)
        || !mlir::detail::Parser::parseXInDimensionList(this))
      {
        goto LABEL_51;
      }
    }
  }
  uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(v6 + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    char v8 = (uint64_t *)mlir::detail::Parser::parseFunctionType(this);
    long long v30 = 0;
    uint64_t v9 = *((void *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16) {
      goto LABEL_16;
    }
  }
  else
  {
    char v8 = (uint64_t *)mlir::detail::Parser::parseNonFunctionType(this);
    long long v30 = 0;
    uint64_t v9 = *((void *)this + 1);
    if (*(_DWORD *)(v9 + 56) != 16) {
      goto LABEL_16;
    }
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v9 + 8), (uint64_t)&v26);
  uint64_t v11 = *((void *)this + 1);
  *(_OWORD *)(v11 + 56) = v26;
  *(void *)(v11 + 72) = v27;
  unsigned __int16 v12 = mlir::detail::Parser::parseOptionalAttribute(this, (uint64_t *)&v30, 0);
  if (v12 < 0x100u
    || (_BYTE)v12
    && ((uint64_t v14 = v30) == 0
      ? (void *)(uint64_t v15 = 0)
      : (uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v30 + 8)) == 0
      ? (uint64_t v14 = 0)
      : (void *)(uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(*v14 + 8)),
        (*(void *)&long long v26 = v14, *((void *)&v26 + 1) = v15, !v14)
     || (uint64_t v29 = this,
         mlir::VerifiableTensorEncoding::verifyEncoding((uint64_t)&v26, v40, DWORD2(v40), (uint64_t)v8, (uint64_t)llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>, (uint64_t)&v29))))
  {
LABEL_16:
    if (v8)
    {
      *(void *)&long long v26 = "expected '>' in tensor type";
      __int16 v28 = 259;
      if (mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)&v26))
      {
        if (mlir::TensorType::isValidElementType(v8))
        {
          if (v4 == 30)
          {
            if (v30)
            {
              *(void *)&long long v26 = "cannot apply encoding to unranked tensor";
              __int16 v28 = 259;
              mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v26, v31);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
              uint64_t v10 = 0;
              BOOL v13 = (void *)v40;
              if ((void *)v40 == v41) {
                return v10;
              }
              goto LABEL_52;
            }
            uint64_t v24 = mlir::UnrankedTensorType::get((uint64_t)v8);
          }
          else
          {
            uint64_t v24 = mlir::RankedTensorType::get(v40, DWORD2(v40), (uint64_t)v8, (uint64_t)v30);
          }
          uint64_t v10 = v24;
          BOOL v13 = (void *)v40;
          if ((void *)v40 == v41) {
            return v10;
          }
LABEL_52:
          free(v13);
          return v10;
        }
        *(void *)&long long v26 = "invalid tensor element type";
        __int16 v28 = 259;
        mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)&v26, v32);
        if (v32[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
        }
        if (v39)
        {
          __int16 v16 = (void **)__p;
          if (__p)
          {
            long long v17 = v38;
            uint64_t v18 = __p;
            if (v38 != __p)
            {
              do
                long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
              while (v17 != v16);
              uint64_t v18 = __p;
            }
            uint64_t v38 = v16;
            operator delete(v18);
          }
          uint64_t v19 = v35;
          if (v35)
          {
            uint64_t v20 = v36;
            uint64_t v21 = v35;
            if (v36 != v35)
            {
              do
              {
                uint64_t v23 = (void *)*--v20;
                uint64_t v22 = v23;
                void *v20 = 0;
                if (v23) {
                  operator delete[](v22);
                }
              }
              while (v20 != v19);
              uint64_t v21 = v35;
            }
            int v36 = v19;
            operator delete(v21);
          }
          if (v33 != &v34)
          {
            free(v33);
            uint64_t v10 = 0;
            BOOL v13 = (void *)v40;
            if ((void *)v40 == v41) {
              return v10;
            }
            goto LABEL_52;
          }
        }
      }
    }
  }
LABEL_51:
  uint64_t v10 = 0;
  BOOL v13 = (void *)v40;
  if ((void *)v40 != v41) {
    goto LABEL_52;
  }
  return v10;
}

uint64_t mlir::detail::Parser::parseTupleType(mlir::detail::Parser *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)v13);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)v13;
  *(void *)(v2 + 72) = v14[0];
  v13[0] = "expected '<' in tuple type";
  __int16 v15 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)v13)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (*(_DWORD *)(v3 + 56) != 19)
  {
    v13[0] = v14;
    v13[1] = (void *)0x400000000;
    v10[0] = this;
    v10[1] = v13;
    if (mlir::detail::Parser::parseCommaSeparatedList((uint64_t)this, 0, (unsigned __int8 (*)(uint64_t))llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v10, 0, 0)&& (v10[0] = "expected '>' in tuple type", __int16 v11 = 259, mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v10)))
    {
      long long v7 = (mlir::MLIRContext *)***((void ***)this + 1);
      mlir::ValueRange::ValueRange(v12, (uint64_t)v13[0], LODWORD(v13[1]));
      uint64_t v6 = mlir::TupleType::get(v7, v12[0], v12[1]);
      char v8 = v13[0];
      if (v13[0] == v14) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
      char v8 = v13[0];
      if (v13[0] == v14) {
        return v6;
      }
    }
    free(v8);
    return v6;
  }
  mlir::Lexer::lexToken((mlir::Lexer *)(v3 + 8), (uint64_t)v13);
  uint64_t v4 = *((void *)this + 1);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v13;
  *(void *)(v4 + 72) = v14[0];
  return mlir::TupleType::get(***((mlir::TupleType ****)this + 1), v5);
}

uint64_t mlir::detail::Parser::parseVectorType(mlir::detail::Parser *this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  mlir::Lexer::lexToken((mlir::Lexer *)(*((void *)this + 1) + 8), (uint64_t)&v47);
  uint64_t v2 = *((void *)this + 1);
  *(_OWORD *)(v2 + 56) = v47;
  *(void *)(v2 + 72) = v48[0];
  *(void *)&long long v47 = "expected '<' in vector type";
  __int16 v49 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 23, (uint64_t)&v47)) {
    return 0;
  }
  *(void *)&long long v47 = v48;
  *((void *)&v47 + 1) = 0x400000000;
  uint64_t v35 = &v37;
  long long v36 = xmmword_1810FF9E0;
  if (!mlir::detail::Parser::parseVectorDimensionList(this, (uint64_t)&v47, &v35))
  {
LABEL_74:
    uint64_t v7 = 0;
    uint64_t v22 = v35;
    if (v35 == &v37) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (DWORD2(v47))
  {
    uint64_t v3 = (uint64_t *)v47;
    uint64_t v4 = 8 * DWORD2(v47);
    while (*v3 > 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4) {
        goto LABEL_7;
      }
    }
    uint64_t Loc = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
    v33[0] = "vector types must have positive constant sizes";
    __int16 v34 = 259;
    mlir::detail::Parser::emitError((uint64_t)this, Loc, (uint64_t)v33, v39);
    if (v39[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v39);
    }
    if (v46)
    {
      uint64_t v24 = (void **)__p;
      if (__p)
      {
        char v25 = v45;
        long long v26 = __p;
        if (v45 != __p)
        {
          do
            char v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          long long v26 = __p;
        }
        __int16 v45 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v42;
      if (v42)
      {
        __int16 v28 = v43;
        uint64_t v29 = v42;
        if (v43 != v42)
        {
          do
          {
            uint64_t v31 = (void *)*--v28;
            long long v30 = v31;
            *__int16 v28 = 0;
            if (v31) {
              operator delete[](v30);
            }
          }
          while (v28 != v27);
          uint64_t v29 = v42;
        }
        uint64_t v43 = v27;
        operator delete(v29);
      }
      if (v40 != &v41) {
        free(v40);
      }
    }
    goto LABEL_74;
  }
LABEL_7:
  uint64_t v5 = (const char *)mlir::Token::getLoc((mlir::Token *)(*((void *)this + 1) + 56));
  if (*(_DWORD *)(*((void *)this + 1) + 56) == 21)
  {
    uint64_t v6 = mlir::detail::Parser::parseFunctionType(this);
    if (!v6) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v6 = mlir::detail::Parser::parseNonFunctionType(this);
    if (!v6) {
      goto LABEL_74;
    }
  }
  v33[0] = "expected '>' in vector type";
  __int16 v34 = 259;
  if (!mlir::detail::Parser::parseToken((uint64_t)this, 19, (uint64_t)v33)) {
    goto LABEL_74;
  }
  char v8 = *(void **)(*(void *)v6 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v7 = mlir::VectorType::get(v47, DWORD2(v47), v6, v35, v36);
    uint64_t v22 = v35;
    if (v35 == &v37) {
      goto LABEL_76;
    }
LABEL_75:
    free(v22);
    goto LABEL_76;
  }
  v33[0] = "vector elements must be int/index/float type";
  __int16 v34 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, v5, (uint64_t)v33, v38);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v38);
  uint64_t v7 = 0;
  uint64_t v22 = v35;
  if (v35 != &v37) {
    goto LABEL_75;
  }
LABEL_76:
  if ((void *)v47 != v48) {
    free((void *)v47);
  }
  return v7;
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned int const&>(uint64_t a1, unsigned int *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 5;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        BOOL v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::detail::Parser::parseVectorDimensionList(mlir::detail::Parser *a1, uint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)(a2 + 16);
  uint64_t v7 = a3 + 3;
  while (1)
  {
    uint64_t v8 = *((void *)a1 + 1);
    int v9 = *(_DWORD *)(v8 + 56);
    if (v9 == 22)
    {
      uint64_t v29 = 0;
      mlir::Lexer::lexToken((mlir::Lexer *)(v8 + 8), (uint64_t)&v30);
      uint64_t v11 = *((void *)a1 + 1);
      *(_OWORD *)(v11 + 56) = v30;
      *(void *)(v11 + 72) = v31;
      int v10 = 1;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29)) {
        return 0;
      }
    }
    else
    {
      if (v9 != 10) {
        return 1;
      }
      int v10 = 0;
      uint64_t v29 = 0;
      if (!mlir::detail::Parser::parseIntegerInDimensionList(a1, (unint64_t *)&v29)) {
        return 0;
      }
    }
    uint64_t v12 = v29;
    unint64_t v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12)) {
      break;
    }
    *(void *)(*(void *)a2 + 8 * v13) = v29;
    ++*(_DWORD *)(a2 + 8);
    if (v10) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v16 = a3[1];
    if ((unint64_t)(v16 + 1) > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, v7, v16 + 1, 1);
      uint64_t v16 = a3[1];
    }
    *(unsigned char *)(*a3 + v16) = v10;
    ++a3[1];
    if (!mlir::detail::Parser::parseXInDimensionList(a1)) {
      return 0;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v13 + 1, 8);
  *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v12;
  if (!v10) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v14 = *((void *)a1 + 1);
  if (*(_DWORD *)(v14 + 56) == 29)
  {
    mlir::Lexer::lexToken((mlir::Lexer *)(v14 + 8), (uint64_t)&v30);
    uint64_t v15 = *((void *)a1 + 1);
    *(_OWORD *)(v15 + 56) = v30;
    *(void *)(v15 + 72) = v31;
    goto LABEL_11;
  }
  uint64_t v27 = "missing ']' closing scalable dimension";
  __int16 v28 = 259;
  mlir::detail::Parser::emitWrongTokenError((uint64_t)a1, (uint64_t)&v27, &v30);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if ((void)v30) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  }
  if (v38)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v37;
      uint64_t v20 = __p;
      if (v37 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v37 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v34;
    if (v34)
    {
      uint64_t v22 = v35;
      uint64_t v23 = v34;
      if (v35 != v34)
      {
        do
        {
          char v25 = (void *)*--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v34;
      }
      uint64_t v35 = v21;
      operator delete(v23);
    }
    if (v32 != &v33) {
      free(v32);
    }
  }
  return v17;
}

uint64_t mlir::detail::Parser::parseIntegerInDimensionList(mlir::detail::Parser *this, unint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)*((void *)this + 1);
  uint64_t v5 = (unsigned __int8 *)v4[8];
  unint64_t v6 = v4[9];
  if (v6 >= 2)
  {
    uint64_t v7 = v5 + 1;
    if (v5[1] == 120)
    {
      *a2 = 0;
      uint64_t v8 = (mlir::Lexer *)(v4 + 1);
      v4[5] = v7;
LABEL_7:
      mlir::Lexer::lexToken(v8, (uint64_t)&v24);
      uint64_t v11 = *((void *)this + 1);
      *(_OWORD *)(v11 + 56) = v24;
      *(void *)(v11 + 72) = v25;
      return 1;
    }
  }
  UInt64Integeruint64_t Value = mlir::Token::getUInt64IntegerValue(v5, v6);
  if (v10 && (UInt64IntegerValue & 0x8000000000000000) == 0)
  {
    *a2 = UInt64IntegerValue;
    uint64_t v8 = (mlir::Lexer *)(*((void *)this + 1) + 8);
    goto LABEL_7;
  }
  uint64_t v22 = "invalid dimension";
  __int16 v23 = 259;
  mlir::detail::Parser::emitError((uint64_t)this, (uint64_t)&v22, &v24);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if ((void)v24) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  }
  if (v32)
  {
    uint64_t v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v31;
      uint64_t v16 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v31 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v28;
    if (v28)
    {
      uint64_t v18 = v29;
      uint64_t v19 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v21 = (void *)*--v18;
          uint64_t v20 = v21;
          void *v18 = 0;
          if (v21) {
            operator delete[](v20);
          }
        }
        while (v18 != v17);
        uint64_t v19 = v28;
      }
      uint64_t v29 = v17;
      operator delete(v19);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  return v12;
}

uint64_t mlir::detail::Parser::parseDimensionListRanked(llvm::SmallVectorImpl<long long> &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(mlir::detail::Parser **)a1;
  uint64_t Loc = mlir::Token::getLoc((mlir::Token *)(*(void *)(*(void *)a1 + 8) + 56));
  uint64_t v4 = *((void *)v2 + 1);
  if (*(_DWORD *)(v4 + 56) != 26)
  {
    v23[0] = 0;
    if (!mlir::detail::Parser::parseIntegerInDimensionList(v2, (unint64_t *)v23)) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(unsigned int *)(v7 + 8);
    if (v10 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v7 + 8);
    }
    *(void *)(*(void *)v7 + 8 * v10) = v9;
    goto LABEL_10;
  }
  uint64_t v5 = (const char *)Loc;
  mlir::Lexer::lexToken((mlir::Lexer *)(v4 + 8), (uint64_t)v23);
  uint64_t v6 = *((void *)v2 + 1);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)v23;
  *(void *)(v6 + 72) = v24;
  if (**(unsigned char **)(a1 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 16), (void *)(v7 + 16), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(v7 + 8);
    }
    *(void *)(*(void *)v7 + 8 * v8) = 0x8000000000000000;
LABEL_10:
    ++*(_DWORD *)(v7 + 8);
    return 1;
  }
  uint64_t v21 = "expected static shape";
  __int16 v22 = 259;
  mlir::detail::Parser::emitError((uint64_t)v2, v5, (uint64_t)&v21, v23);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v31)
  {
    uint64_t v12 = (void **)__p;
    if (__p)
    {
      unint64_t v13 = v30;
      uint64_t v14 = __p;
      if (v30 != __p)
      {
        do
          unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      long long v30 = v12;
      operator delete(v14);
    }
    uint64_t v15 = v27;
    if (v27)
    {
      uint64_t v16 = v28;
      uint64_t v17 = v27;
      if (v28 != v27)
      {
        do
        {
          uint64_t v19 = (void *)*--v16;
          uint64_t v18 = v19;
          void *v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v27;
      }
      __int16 v28 = v15;
      operator delete(v17);
    }
    if (v25 != &v26) {
      free(v25);
    }
  }
  return v11;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v20 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefElementTypeInterface]";
      unint64_t v22 = 82;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefElementTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[416];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      unint64_t v22 = 81;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3960);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::VerifiableTensorEncoding>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v20 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::VerifiableTensorEncoding]";
      unint64_t v22 = 80;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::VerifiableTensorEncoding,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[418];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseTypeListNoParens(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t a1)
{
  unint64_t v2 = *(mlir::detail::Parser **)a1;
  if (*(_DWORD *)(*((void *)v2 + 1) + 56) == 21) {
    uint64_t v3 = mlir::detail::Parser::parseFunctionType(v2);
  }
  else {
    uint64_t v3 = mlir::detail::Parser::parseNonFunctionType(v2);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(void *)(*(void *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return v4 != 0;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::Parser::parseMemRefType(void)::$_0>(uint64_t *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)mlir::detail::Parser::parseAttribute(*a1, 0);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v3 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v4 + 8);
    uint64_t v6 = (void *)a1[1];
    void *v6 = v4;
    v6[1] = v5;
    if (*(unsigned char *)a1[3])
    {
      v30[0] = "cannot have affine map for unranked memref type";
      __int16 v31 = 259;
      mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      }
      if (v39)
      {
        uint64_t v8 = (void **)__p;
        if (__p)
        {
          unint64_t v9 = v38;
          uint64_t v10 = __p;
          if (v38 != __p)
          {
            do
              unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
            while (v9 != v8);
            uint64_t v10 = __p;
          }
          char v38 = v8;
          operator delete(v10);
        }
        int v11 = v35;
        if (!v35) {
          goto LABEL_51;
        }
        int v12 = v36;
        unint64_t v13 = v35;
        if (v36 == v35)
        {
LABEL_50:
          long long v36 = v11;
          operator delete(v13);
LABEL_51:
          if (v33 != &v34) {
            free(v33);
          }
          return v7;
        }
        do
        {
          uint64_t v15 = (void *)*--v12;
          unint64_t v14 = v15;
          void *v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
LABEL_49:
        unint64_t v13 = v35;
        goto LABEL_50;
      }
    }
    else
    {
      if (!*(void *)a1[2]) {
        return 1;
      }
      v30[0] = "expected memory space to be last in memref type";
      __int16 v31 = 259;
      mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
      if (v32[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
      }
      if (v39)
      {
        __int16 v23 = (void **)__p;
        if (__p)
        {
          uint64_t v24 = v38;
          uint64_t v25 = __p;
          if (v38 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            uint64_t v25 = __p;
          }
          char v38 = v23;
          operator delete(v25);
        }
        int v11 = v35;
        if (!v35) {
          goto LABEL_51;
        }
        uint64_t v26 = v36;
        unint64_t v13 = v35;
        if (v36 == v35) {
          goto LABEL_50;
        }
        do
        {
          __int16 v28 = (void *)*--v26;
          uint64_t v27 = v28;
          void *v26 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v26 != v11);
        goto LABEL_49;
      }
    }
  }
  else
  {
    unint64_t v16 = (void *)a1[2];
    if (!*v16)
    {
      void *v16 = v4;
      return 1;
    }
    v30[0] = "multiple memory spaces specified in memref type";
    __int16 v31 = 259;
    mlir::detail::Parser::emitError(v2, (uint64_t)v30, v32);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    }
    if (v39)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        unint64_t v18 = v38;
        uint64_t v19 = __p;
        if (v38 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        char v38 = v17;
        operator delete(v19);
      }
      int v11 = v35;
      if (!v35) {
        goto LABEL_51;
      }
      uint64_t v20 = v36;
      unint64_t v13 = v35;
      if (v36 == v35) {
        goto LABEL_50;
      }
      do
      {
        unint64_t v22 = (void *)*--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v20 != v11);
      goto LABEL_49;
    }
  }
  return v7;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::UnrankedMemRefType mlir::detail::Parser::getChecked<mlir::UnrankedMemRefType,mlir::Type &,mlir::Attribute &>(llvm::SMLoc,mlir::Type &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::MemRefType mlir::detail::Parser::getChecked<mlir::MemRefType,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::SMLoc,llvm::SmallVector<long long,4u> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(void)#1}>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = **(const char ***)(a1 + 8);
  __int16 v5 = 257;
  mlir::detail::Parser::emitError(v2, v3, (uint64_t)v4, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::detail::Parser::parseTensorType(void)::$_0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::detail::Parser::emitError(v2, (uint64_t)v3, a2);
}

uint64_t mlir::BytecodeReader::Impl::read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[147];
  unint64_t v7 = a1[148];
  uint64_t v8 = a1[1];
  uint64_t v179 = v6;
  unint64_t v180 = v7;
  uint64_t v181 = v6;
  uint64_t v182 = v8;
  a1[9] = a3;
  a1[10] = a4;
  uint64_t v209 = 4;
  if (v7 > 3)
  {
    uint64_t v181 = v6 + 4;
    goto LABEL_58;
  }
  *(void *)&long long v184 = v7;
  mlir::emitError(v8, (uint64_t)&v187);
  unint64_t v9 = (char *)v187;
  if ((void)v187)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v187 + 8, "attempting to skip ", (char **)&v209, " bytes when only ", (char **)&v184, " remain");
    unint64_t v9 = (char *)v187;
  }
  v220 = v9;
  LOBYTE(v221) = 0;
  unsigned __int8 v230 = 0;
  if (v205)
  {
    v221 = (const char *)*((void *)&v187 + 1);
    int v10 = v190;
    int v222 = v188;
    int v11 = v225;
    long long __dst = v225;
    uint64_t v224 = 0x400000000;
    if (!v190)
    {
      int v13 = 1;
      goto LABEL_17;
    }
    int v12 = __src;
    if (__src != &v191)
    {
      long long __dst = __src;
      uint64_t v224 = v190;
      __src = &v191;
      HIDWORD(v190) = 0;
      int v13 = 1;
LABEL_16:
      LODWORD(v190) = 0;
LABEL_17:
      long long v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      long long v228 = *(_OWORD *)__p;
      uint64_t v227 = v202[2];
      uint64_t v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v204 = 0;
      unsigned __int8 v230 = 1;
      if (v13)
      {
        if (__src != &v191) {
          free(__src);
        }
        unsigned __int8 v205 = 0;
      }
      goto LABEL_21;
    }
    if (v190 < 5)
    {
      uint64_t v14 = v190;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v190, 24);
      uint64_t v14 = v190;
      if (!v190)
      {
LABEL_15:
        LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
        int v13 = v205;
        goto LABEL_16;
      }
      int v12 = __src;
      int v11 = __dst;
    }
    memcpy(v11, v12, 24 * v14);
    goto LABEL_15;
  }
LABEL_21:
  mlir::InFlightDiagnostic::abandon(&v187);
  if ((void)v187) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
  }
  if (v205)
  {
    uint64_t v15 = (void **)__p[0];
    if (__p[0])
    {
      unint64_t v16 = (void **)__p[1];
      uint64_t v17 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p[0];
      }
      __p[1] = v15;
      operator delete(v17);
    }
    unint64_t v18 = v202[0];
    if (v202[0])
    {
      uint64_t v19 = v202[1];
      uint64_t v20 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          unint64_t v22 = (void *)*--v19;
          uint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        uint64_t v20 = v202[0];
      }
      v202[1] = v18;
      operator delete(v20);
    }
    if (__src != &v191) {
      free(__src);
    }
  }
  char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    uint64_t v24 = (void **)v228;
    if ((void)v228)
    {
      uint64_t v25 = (void **)*((void *)&v228 + 1);
      uint64_t v26 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = (void *)v228;
      }
      *((void *)&v228 + 1) = v24;
      operator delete(v26);
    }
    uint64_t v27 = (void *)v226;
    if ((void)v226)
    {
      __int16 v28 = (void *)*((void *)&v226 + 1);
      uint64_t v29 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          __int16 v31 = (void *)*--v28;
          long long v30 = v31;
          *__int16 v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = (void *)v226;
      }
      *((void *)&v226 + 1) = v27;
      operator delete(v29);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  if (!v23) {
    goto LABEL_152;
  }
LABEL_58:
  uint64_t v32 = (int *)(a1 + 31);
  {
LABEL_152:
    uint64_t v69 = 0;
    goto LABEL_384;
  }
  uint64_t v209 = 6;
  if (*(void *)v32 < 7uLL)
  {
    if (*(void *)v32 <= 1uLL) {
      *((unsigned char *)a1 + 16) = 0;
    }
    goto LABEL_117;
  }
  mlir::emitError(v182, (uint64_t)&v187);
  uint64_t v33 = (char *)v187;
  if ((void)v187)
  {
    mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>((uint64_t)&v187 + 8, "bytecode version ", (char **)a1 + 31, " is newer than the current version ", (char **)&v209);
    uint64_t v33 = (char *)v187;
  }
  v220 = v33;
  LOBYTE(v221) = 0;
  unsigned __int8 v230 = 0;
  if (v205)
  {
    v221 = (const char *)*((void *)&v187 + 1);
    int v34 = v190;
    int v222 = v188;
    uint64_t v35 = v225;
    long long __dst = v225;
    uint64_t v224 = 0x400000000;
    if (!v190)
    {
      int v37 = 1;
      goto LABEL_76;
    }
    long long v36 = __src;
    if (__src != &v191)
    {
      long long __dst = __src;
      uint64_t v224 = v190;
      __src = &v191;
      HIDWORD(v190) = 0;
      int v37 = 1;
LABEL_75:
      LODWORD(v190) = 0;
LABEL_76:
      long long v226 = *(_OWORD *)v202;
      memset(v202, 0, sizeof(v202));
      long long v228 = *(_OWORD *)__p;
      uint64_t v227 = v202[2];
      uint64_t v229 = v204;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v204 = 0;
      unsigned __int8 v230 = 1;
      if (v37)
      {
        if (__src != &v191) {
          free(__src);
        }
        unsigned __int8 v205 = 0;
      }
      goto LABEL_80;
    }
    if (v190 < 5)
    {
      uint64_t v38 = v190;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v190, 24);
      uint64_t v38 = v190;
      if (!v190)
      {
LABEL_74:
        LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v34;
        int v37 = v205;
        goto LABEL_75;
      }
      long long v36 = __src;
      uint64_t v35 = __dst;
    }
    memcpy(v35, v36, 24 * v38);
    goto LABEL_74;
  }
LABEL_80:
  mlir::InFlightDiagnostic::abandon(&v187);
  if ((void)v187) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
  }
  if (v205)
  {
    char v39 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v40 = (void **)__p[1];
      uint64_t v41 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        uint64_t v41 = __p[0];
      }
      __p[1] = v39;
      operator delete(v41);
    }
    __int16 v42 = v202[0];
    if (v202[0])
    {
      uint64_t v43 = v202[1];
      long long v44 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          char v46 = (void *)*--v43;
          __int16 v45 = v46;
          *uint64_t v43 = 0;
          if (v46) {
            operator delete[](v45);
          }
        }
        while (v43 != v42);
        long long v44 = v202[0];
      }
      v202[1] = v42;
      operator delete(v44);
    }
    if (__src != &v191) {
      free(__src);
    }
  }
  char v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    uint64_t v48 = (void **)v228;
    if ((void)v228)
    {
      __int16 v49 = (void **)*((void *)&v228 + 1);
      uint64_t v50 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          __int16 v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        uint64_t v50 = (void *)v228;
      }
      *((void *)&v228 + 1) = v48;
      operator delete(v50);
    }
    long long v51 = (void *)v226;
    if ((void)v226)
    {
      uint64_t v52 = (void *)*((void *)&v226 + 1);
      __int16 v53 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          uint64_t v55 = (void *)*--v52;
          uint64_t v54 = v55;
          *uint64_t v52 = 0;
          if (v55) {
            operator delete[](v54);
          }
        }
        while (v52 != v51);
        __int16 v53 = (void *)v226;
      }
      *((void *)&v226 + 1) = v51;
      operator delete(v53);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  if (!v47) {
    goto LABEL_152;
  }
LABEL_117:
  long long v178 = *(mlir::MLIRContext **)*a1;
  DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(v178);
  *(void *)&long long v187 = a1;
  __src = (char *)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1,void>::Callbacks
        + 2;
  v177 = (mlir::MLIRContext *)mlir::DiagnosticEngine::registerHandler(DiagEngine, &v187);
  char v57 = (char)__src;
  if ((unint64_t)__src >= 8)
  {
    if ((__src & 4) != 0)
    {
      if ((__src & 2) != 0) {
        uint64_t v58 = &v187;
      }
      else {
        uint64_t v58 = (long long *)v187;
      }
      (*(void (**)(long long *))(((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) + 16))(v58);
    }
    if ((v57 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v187, *((void **)&v187 + 1));
    }
  }
  LOBYTE(v187) = 0;
  LOBYTE(v188) = 0;
  LOBYTE(__src) = 0;
  char v191 = 0;
  LOBYTE(v192) = 0;
  char v194 = 0;
  LOBYTE(v195) = 0;
  char v197 = 0;
  LOBYTE(v198) = 0;
  char v200 = 0;
  LOBYTE(v201) = 0;
  LOBYTE(v202[0]) = 0;
  LOBYTE(v202[1]) = 0;
  LOBYTE(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  unsigned __int8 v205 = 0;
  LOBYTE(v206) = 0;
  unsigned __int8 v208 = 0;
  if (v181 != v179 + v180)
  {
    while (1)
    {
      LOBYTE(v183) = 0;
      v176[0] = 0;
      v176[1] = 0;
      uint64_t v59 = (char *)&v187 + 24 * v183;
      if (v59[16]) {
        break;
      }
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v176;
      v59[16] = 1;
      if (v181 == v179 + v180)
      {
        if (!(_BYTE)v188) {
          goto LABEL_153;
        }
        if (!v191)
        {
          unsigned int v70 = 1;
          goto LABEL_154;
        }
        if (!v194)
        {
          unsigned int v70 = 2;
          goto LABEL_154;
        }
        if (!v197)
        {
          unsigned int v70 = 3;
          goto LABEL_154;
        }
        if (!v200)
        {
          unsigned int v70 = 4;
          goto LABEL_154;
        }
        int v60 = v208;
        if (!v208 && *v32 > 4)
        {
          unsigned int v70 = 8;
          goto LABEL_154;
        }
        uint64_t v61 = a1[1];
        long long v62 = v187;
        long long v184 = v187;
        uint64_t v185 = v187;
        uint64_t v186 = v61;
        v176[0] = 0;
        int v170 = v60;
        unint64_t v63 = v176[0];
        unint64_t v64 = *((unsigned int *)a1 + 136);
        if (v176[0] != v64)
        {
          if (v176[0] >= v64)
          {
            if (v176[0] > *((unsigned int *)a1 + 137))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 67), a1 + 69, v176[0], 16);
              unint64_t v64 = *((unsigned int *)a1 + 136);
            }
            if (v63 != v64) {
              bzero((void *)(a1[67] + 16 * v64), 16 * (v63 - v64));
            }
          }
          LODWORD(v64) = v63;
          *((_DWORD *)a1 + 136) = v63;
          unint64_t v63 = v63;
        }
        uint64_t v171 = *((void *)&v62 + 1);
        if (v64)
        {
          uint64_t v65 = 16 * v63;
          unint64_t v66 = *((void *)&v62 + 1);
          while (1)
          {
            unint64_t v183 = 0;
            BOOL v67 = v66 >= v183;
            v66 -= v183;
            if (!v67) {
              break;
            }
            unint64_t v68 = v183 - 1;
            *(void *)(*((void *)&v62 + 1) + v65 - 16) = v62 + v66;
            *(void *)(*((void *)&v62 + 1) + v65 - 8) = v68;
            v65 -= 16;
            if (!v65) {
              goto LABEL_265;
            }
          }
          mlir::emitError(v186, (uint64_t)&v220);
          v123 = v220;
          if (v220)
          {
            LODWORD(v209) = 3;
            v210 = "string size exceeds the available data size";
            uint64_t v211 = 43;
            uint64_t v124 = &v209;
            v125 = (char *)__dst;
            if (v224 >= HIDWORD(v224))
            {
              unint64_t v167 = v224 + 1;
              if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
              {
                int64_t v169 = (char *)&v209 - (unsigned char *)__dst;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                v125 = (char *)__dst;
                uint64_t v124 = (uint64_t *)((char *)__dst + v169);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v167, 24);
                uint64_t v124 = &v209;
                v125 = (char *)__dst;
              }
            }
            char v126 = &v125[24 * v224];
            long long v127 = *(_OWORD *)v124;
            *((void *)v126 + 2) = v124[2];
            *(_OWORD *)char v126 = v127;
            LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v224 + 1;
            v123 = v220;
          }
          uint64_t v209 = (uint64_t)v123;
          LOBYTE(v210) = 0;
          char v219 = 0;
          if (v230)
          {
            v210 = v221;
            int v128 = v224;
            LODWORD(v211) = v222;
            v129 = v214;
            long long v212 = v214;
            uint64_t v213 = 0x400000000;
            if (v224)
            {
              __int16 v130 = v225;
              if (__dst != v225)
              {
                long long v212 = __dst;
                uint64_t v213 = v224;
                long long __dst = v225;
                HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
                int v131 = 1;
                goto LABEL_333;
              }
              if (v224 < 5)
              {
                uint64_t v133 = v224;
LABEL_331:
                memcpy(v129, v130, 24 * v133);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
                uint64_t v133 = v224;
                if (v224)
                {
                  __int16 v130 = __dst;
                  v129 = v212;
                  goto LABEL_331;
                }
              }
              LODWORD(v213) = v128;
              int v131 = v230;
LABEL_333:
              LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
            }
            else
            {
              int v131 = 1;
            }
            long long v215 = v226;
            long long v226 = 0uLL;
            long long v217 = v228;
            v216 = v227;
            uint64_t v218 = v229;
            uint64_t v227 = 0;
            long long v228 = 0uLL;
            uint64_t v229 = 0;
            char v219 = 1;
            if (v131)
            {
              if (__dst != v225) {
                free(__dst);
              }
              unsigned __int8 v230 = 0;
            }
          }
          mlir::InFlightDiagnostic::abandon(&v220);
          if (v220) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
          }
          if (v230)
          {
            unint64_t v151 = (void **)v228;
            if ((void)v228)
            {
              uint64_t v152 = (void **)*((void *)&v228 + 1);
              uint64_t v153 = (void *)v228;
              if (*((void *)&v228 + 1) != (void)v228)
              {
                do
                  uint64_t v152 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v152 - 1);
                while (v152 != v151);
                uint64_t v153 = (void *)v228;
              }
              *((void *)&v228 + 1) = v151;
              operator delete(v153);
            }
            long long v154 = (void *)v226;
            if ((void)v226)
            {
              v155 = (void *)*((void *)&v226 + 1);
              v156 = (void *)v226;
              if (*((void *)&v226 + 1) != (void)v226)
              {
                do
                {
                  v158 = (void *)*--v155;
                  v157 = v158;
                  void *v155 = 0;
                  if (v158) {
                    operator delete[](v157);
                  }
                }
                while (v155 != v154);
                v156 = (void *)v226;
              }
              *((void *)&v226 + 1) = v154;
              operator delete(v156);
            }
            if (__dst != v225) {
              free(__dst);
            }
          }
          char v142 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
          if (v209) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
          }
          if (!v219) {
            goto LABEL_374;
          }
          v159 = (void **)v217;
          if ((void)v217)
          {
            v160 = (void **)*((void *)&v217 + 1);
            v161 = (void *)v217;
            if (*((void *)&v217 + 1) != (void)v217)
            {
              do
                v160 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v160 - 1);
              while (v160 != v159);
              v161 = (void *)v217;
            }
            *((void *)&v217 + 1) = v159;
            operator delete(v161);
          }
          std::string::size_type v146 = (void *)v215;
          if (!(void)v215) {
            goto LABEL_372;
          }
          v162 = (void *)*((void *)&v215 + 1);
          uint64_t v148 = (void *)v215;
          if (*((void *)&v215 + 1) == (void)v215) {
            goto LABEL_371;
          }
          do
          {
            uint64_t v164 = (void *)*--v162;
            v163 = v164;
            void *v162 = 0;
            if (v164) {
              operator delete[](v163);
            }
          }
          while (v162 != v146);
          goto LABEL_370;
        }
        unint64_t v66 = *((void *)&v62 + 1);
LABEL_265:
        if (v171 - ((void)v184 + *((void *)&v184 + 1)) + v185 == v66)
        {
          int v113 = v170;
LABEL_376:
          if (!v113
          {
            if (mlir::BytecodeReader::Impl::parseDialectSection((unint64_t)a1, (uint64_t)__src, v190))
            {
              long long v174 = v201;
              uint64_t v175 = v202[0];
              long long v172 = *(_OWORD *)&v202[1];
              v173 = __p[0];
              if (mlir::BytecodeReader::Impl::parseResourceSection(a1, (uint64_t)&v179, &v174, &v172))
              {
                {
                  uint64_t v69 = mlir::BytecodeReader::Impl::parseIRSection((uint64_t)a1, v198, v199, a2);
                  goto LABEL_383;
                }
              }
            }
          }
          goto LABEL_382;
        }
        mlir::emitError(v186, (uint64_t)&v220);
        int64_t v114 = v220;
        if (v220)
        {
          LODWORD(v209) = 3;
          v210 = "unexpected trailing data between the offsets for strings and their data";
          uint64_t v211 = 71;
          int64_t v115 = &v209;
          int64_t v116 = (char *)__dst;
          if (v224 >= HIDWORD(v224))
          {
            unint64_t v166 = v224 + 1;
            if (__dst <= &v209 && (char *)__dst + 24 * v224 > (char *)&v209)
            {
              int64_t v168 = (char *)&v209 - (unsigned char *)__dst;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v166, 24);
              int64_t v116 = (char *)__dst;
              int64_t v115 = (uint64_t *)((char *)__dst + v168);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v225, v166, 24);
              int64_t v115 = &v209;
              int64_t v116 = (char *)__dst;
            }
          }
          unint64_t v117 = &v116[24 * v224];
          long long v118 = *(_OWORD *)v115;
          *((void *)v117 + 2) = v115[2];
          *(_OWORD *)unint64_t v117 = v118;
          LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v224 + 1;
          int64_t v114 = v220;
        }
        uint64_t v209 = (uint64_t)v114;
        LOBYTE(v210) = 0;
        char v219 = 0;
        if (v230)
        {
          v210 = v221;
          int v119 = v224;
          LODWORD(v211) = v222;
          __int16 v120 = v214;
          long long v212 = v214;
          uint64_t v213 = 0x400000000;
          if (v224)
          {
            uint64_t v121 = v225;
            if (__dst != v225)
            {
              long long v212 = __dst;
              uint64_t v213 = v224;
              long long __dst = v225;
              HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
              int v122 = 1;
              goto LABEL_293;
            }
            if (v224 < 5)
            {
              uint64_t v132 = v224;
LABEL_291:
              memcpy(v120, v121, 24 * v132);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
              uint64_t v132 = v224;
              if (v224)
              {
                uint64_t v121 = __dst;
                __int16 v120 = v212;
                goto LABEL_291;
              }
            }
            LODWORD(v213) = v119;
            int v122 = v230;
LABEL_293:
            LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
          }
          else
          {
            int v122 = 1;
          }
          long long v215 = v226;
          long long v226 = 0uLL;
          long long v217 = v228;
          v216 = v227;
          uint64_t v218 = v229;
          uint64_t v227 = 0;
          long long v228 = 0uLL;
          uint64_t v229 = 0;
          char v219 = 1;
          if (v122)
          {
            if (__dst != v225) {
              free(__dst);
            }
            unsigned __int8 v230 = 0;
          }
        }
        mlir::InFlightDiagnostic::abandon(&v220);
        if (v220) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
        }
        if (v230)
        {
          char v134 = (void **)v228;
          if ((void)v228)
          {
            uint64_t v135 = (void **)*((void *)&v228 + 1);
            uint64_t v136 = (void *)v228;
            if (*((void *)&v228 + 1) != (void)v228)
            {
              do
                uint64_t v135 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v135 - 1);
              while (v135 != v134);
              uint64_t v136 = (void *)v228;
            }
            *((void *)&v228 + 1) = v134;
            operator delete(v136);
          }
          unint64_t v137 = (void *)v226;
          if ((void)v226)
          {
            uint64_t v138 = (void *)*((void *)&v226 + 1);
            uint64_t v139 = (void *)v226;
            if (*((void *)&v226 + 1) != (void)v226)
            {
              do
              {
                uint64_t v141 = (void *)*--v138;
                uint64_t v140 = v141;
                *uint64_t v138 = 0;
                if (v141) {
                  operator delete[](v140);
                }
              }
              while (v138 != v137);
              uint64_t v139 = (void *)v226;
            }
            *((void *)&v226 + 1) = v137;
            operator delete(v139);
          }
          if (__dst != v225) {
            free(__dst);
          }
        }
        char v142 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
        if (v209) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
        }
        if (v219)
        {
          v143 = (void **)v217;
          if ((void)v217)
          {
            v144 = (void **)*((void *)&v217 + 1);
            v145 = (void *)v217;
            if (*((void *)&v217 + 1) != (void)v217)
            {
              do
                v144 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v144 - 1);
              while (v144 != v143);
              v145 = (void *)v217;
            }
            *((void *)&v217 + 1) = v143;
            operator delete(v145);
          }
          std::string::size_type v146 = (void *)v215;
          if ((void)v215)
          {
            v147 = (void *)*((void *)&v215 + 1);
            uint64_t v148 = (void *)v215;
            if (*((void *)&v215 + 1) != (void)v215)
            {
              do
              {
                uint64_t v150 = (void *)*--v147;
                std::string::size_type v149 = v150;
                void *v147 = 0;
                if (v150) {
                  operator delete[](v149);
                }
              }
              while (v147 != v146);
LABEL_370:
              uint64_t v148 = (void *)v215;
            }
LABEL_371:
            *((void *)&v215 + 1) = v146;
            operator delete(v148);
          }
LABEL_372:
          if (v212 != v214) {
            free(v212);
          }
        }
LABEL_374:
        if (v142)
        {
          int v113 = v208;
          goto LABEL_376;
        }
LABEL_382:
        uint64_t v69 = 0;
        goto LABEL_383;
      }
    }
    toString((uint64_t)&v184, v183);
    mlir::emitError(v182, (uint64_t)&v220);
    int v76 = v220;
    if (v220)
    {
      mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "duplicate top-level section: ", (const void **)&v184);
      int v76 = v220;
    }
    uint64_t v209 = (uint64_t)v76;
    LOBYTE(v210) = 0;
    char v219 = 0;
    if (!v230)
    {
LABEL_225:
      mlir::InFlightDiagnostic::abandon(&v220);
      if (v220) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
      }
      if (v230)
      {
        unint64_t v99 = (void **)v228;
        if ((void)v228)
        {
          unint64_t v100 = (void **)*((void *)&v228 + 1);
          unint64_t v101 = (void *)v228;
          if (*((void *)&v228 + 1) != (void)v228)
          {
            do
              unint64_t v100 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v100 - 1);
            while (v100 != v99);
            unint64_t v101 = (void *)v228;
          }
          *((void *)&v228 + 1) = v99;
          operator delete(v101);
        }
        BOOL v102 = (void *)v226;
        if ((void)v226)
        {
          int64_t v103 = (void *)*((void *)&v226 + 1);
          int64_t v104 = (void *)v226;
          if (*((void *)&v226 + 1) != (void)v226)
          {
            do
            {
              int64_t v106 = (void *)*--v103;
              int64_t v105 = v106;
              void *v103 = 0;
              if (v106) {
                operator delete[](v105);
              }
            }
            while (v103 != v102);
            int64_t v104 = (void *)v226;
          }
          *((void *)&v226 + 1) = v102;
          operator delete(v104);
        }
        if (__dst != v225) {
          free(__dst);
        }
      }
      uint64_t v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
      if (v209) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
      }
      if (v219)
      {
        int64_t v107 = (void **)v217;
        if ((void)v217)
        {
          unint64_t v108 = (void **)*((void *)&v217 + 1);
          unint64_t v109 = (void *)v217;
          if (*((void *)&v217 + 1) != (void)v217)
          {
            do
              unint64_t v108 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v108 - 1);
            while (v108 != v107);
            unint64_t v109 = (void *)v217;
          }
          *((void *)&v217 + 1) = v107;
          operator delete(v109);
        }
        uint64_t v93 = (void *)v215;
        if (!(void)v215) {
          goto LABEL_259;
        }
        unint64_t v110 = (void *)*((void *)&v215 + 1);
        __int16 v95 = (void *)v215;
        if (*((void *)&v215 + 1) == (void)v215) {
          goto LABEL_258;
        }
        do
        {
          BOOL v112 = (void *)*--v110;
          unint64_t v111 = v112;
          *unint64_t v110 = 0;
          if (v112) {
            operator delete[](v111);
          }
        }
        while (v110 != v93);
        goto LABEL_257;
      }
      goto LABEL_261;
    }
    v210 = v221;
    int v77 = v224;
    LODWORD(v211) = v222;
    uint64_t v78 = v214;
    long long v212 = v214;
    uint64_t v213 = 0x400000000;
    if (!v224)
    {
      int v80 = 1;
      goto LABEL_221;
    }
    char v79 = __dst;
    if (__dst != v225)
    {
      long long v212 = __dst;
      uint64_t v213 = v224;
      long long __dst = v225;
      HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      int v80 = 1;
LABEL_220:
      LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_221:
      long long v215 = v226;
      long long v226 = 0uLL;
      long long v217 = v228;
      v216 = v227;
      uint64_t v218 = v229;
      uint64_t v227 = 0;
      long long v228 = 0uLL;
      uint64_t v229 = 0;
      char v219 = 1;
      if (v80)
      {
        if (__dst != v225) {
          free(__dst);
        }
        unsigned __int8 v230 = 0;
      }
      goto LABEL_225;
    }
    if (v224 < 5)
    {
      uint64_t v98 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      uint64_t v98 = v224;
      if (!v224)
      {
LABEL_219:
        LODWORD(v213) = v77;
        int v80 = v230;
        goto LABEL_220;
      }
      char v79 = __dst;
      uint64_t v78 = v212;
    }
    memcpy(v78, v79, 24 * v98);
    goto LABEL_219;
  }
LABEL_153:
  unsigned int v70 = 0;
LABEL_154:
  toString((uint64_t)&v184, v70);
  mlir::emitError(v182, (uint64_t)&v220);
  uint64_t v71 = v220;
  if (v220)
  {
    mlir::Diagnostic::append<char const(&)[30],std::string>((uint64_t)&v221, "missing data for top-level section: ", (const void **)&v184);
    uint64_t v71 = v220;
  }
  uint64_t v209 = (uint64_t)v71;
  LOBYTE(v210) = 0;
  char v219 = 0;
  if (v230)
  {
    v210 = v221;
    int v72 = v224;
    LODWORD(v211) = v222;
    uint64_t v73 = v214;
    long long v212 = v214;
    uint64_t v213 = 0x400000000;
    if (!v224)
    {
      int v75 = 1;
      goto LABEL_176;
    }
    char v74 = __dst;
    if (__dst != v225)
    {
      long long v212 = __dst;
      uint64_t v213 = v224;
      long long __dst = v225;
      HIDWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      int v75 = 1;
LABEL_175:
      LODWORD(v2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_176:
      long long v215 = v226;
      long long v226 = 0uLL;
      long long v217 = v228;
      v216 = v227;
      uint64_t v218 = v229;
      uint64_t v227 = 0;
      long long v228 = 0uLL;
      uint64_t v229 = 0;
      char v219 = 1;
      if (v75)
      {
        if (__dst != v225) {
          free(__dst);
        }
        unsigned __int8 v230 = 0;
      }
      goto LABEL_180;
    }
    if (v224 < 5)
    {
      uint64_t v81 = v224;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, v214, v224, 24);
      uint64_t v81 = v224;
      if (!v224)
      {
LABEL_174:
        LODWORD(v213) = v72;
        int v75 = v230;
        goto LABEL_175;
      }
      char v74 = __dst;
      uint64_t v73 = v212;
    }
    memcpy(v73, v74, 24 * v81);
    goto LABEL_174;
  }
LABEL_180:
  mlir::InFlightDiagnostic::abandon(&v220);
  if (v220) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v220);
  }
  if (v230)
  {
    long long v82 = (void **)v228;
    if ((void)v228)
    {
      uint64_t v83 = (void **)*((void *)&v228 + 1);
      int64_t v84 = (void *)v228;
      if (*((void *)&v228 + 1) != (void)v228)
      {
        do
          uint64_t v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        int64_t v84 = (void *)v228;
      }
      *((void *)&v228 + 1) = v82;
      operator delete(v84);
    }
    int64_t v85 = (void *)v226;
    if ((void)v226)
    {
      long long v86 = (void *)*((void *)&v226 + 1);
      uint64_t v87 = (void *)v226;
      if (*((void *)&v226 + 1) != (void)v226)
      {
        do
        {
          uint64_t v89 = (void *)*--v86;
          int v88 = v89;
          *long long v86 = 0;
          if (v89) {
            operator delete[](v88);
          }
        }
        while (v86 != v85);
        uint64_t v87 = (void *)v226;
      }
      *((void *)&v226 + 1) = v85;
      operator delete(v87);
    }
    if (__dst != v225) {
      free(__dst);
    }
  }
  uint64_t v69 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v209);
  if (v209) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v209);
  }
  if (v219)
  {
    uint64_t v90 = (void **)v217;
    if ((void)v217)
    {
      long long v91 = (void **)*((void *)&v217 + 1);
      long long v92 = (void *)v217;
      if (*((void *)&v217 + 1) != (void)v217)
      {
        do
          long long v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
        while (v91 != v90);
        long long v92 = (void *)v217;
      }
      *((void *)&v217 + 1) = v90;
      operator delete(v92);
    }
    uint64_t v93 = (void *)v215;
    if (!(void)v215) {
      goto LABEL_259;
    }
    uint64_t v94 = (void *)*((void *)&v215 + 1);
    __int16 v95 = (void *)v215;
    if (*((void *)&v215 + 1) == (void)v215)
    {
LABEL_258:
      *((void *)&v215 + 1) = v93;
      operator delete(v95);
LABEL_259:
      if (v212 != v214) {
        free(v212);
      }
      goto LABEL_261;
    }
    do
    {
      __int16 v97 = (void *)*--v94;
      uint64_t v96 = v97;
      void *v94 = 0;
      if (v97) {
        operator delete[](v96);
      }
    }
    while (v94 != v93);
LABEL_257:
    __int16 v95 = (void *)v215;
    goto LABEL_258;
  }
LABEL_261:
  if (SHIBYTE(v185) < 0) {
    operator delete((void *)v184);
  }
LABEL_383:
  mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(&v177);
LABEL_384:
  a1[9] = 0;
  return v69;
}

uint64_t anonymous namespace'::EncodingReader::parseNullTerminatedString(_anonymous_namespace_::EncodingReader *this, llvm::StringRef *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  __int16 v4 = (void *)*((void *)this + 2);
  __int16 v5 = memchr(v4, 0, *(void *)this + *((void *)this + 1) - (void)v4);
  if (v5)
  {
    *(void *)a2 = v4;
    *((void *)a2 + 1) = v5 - (unsigned char *)v4;
    *((void *)this + 2) = v5 + 1;
    return 1;
  }
  mlir::emitError(*((void *)this + 3), (uint64_t)v47);
  uint64_t v8 = v47[0];
  if (v47[0])
  {
    LODWORD(v36) = 3;
    int v37 = "malformed null-terminated string, no null character found";
    uint64_t v38 = 57;
    unint64_t v9 = (char *)&v36;
    int v10 = (char *)v49;
    if (v50 >= HIDWORD(v50))
    {
      unint64_t v34 = v50 + 1;
      if (v49 <= &v36 && (char *)v49 + 24 * v50 > (char *)&v36)
      {
        int64_t v35 = (char *)&v36 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        int v10 = (char *)v49;
        unint64_t v9 = (char *)v49 + v35;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v34, 24);
        unint64_t v9 = (char *)&v36;
        int v10 = (char *)v49;
      }
    }
    int v11 = &v10[24 * v50];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)int v11 = v12;
    LODWORD(v50) = v50 + 1;
    uint64_t v8 = v47[0];
  }
  uint64_t v36 = v8;
  LOBYTE(v37) = 0;
  char v46 = 0;
  if (v56)
  {
    int v37 = (const char *)v47[1];
    int v13 = v50;
    LODWORD(v38) = v48;
    uint64_t v14 = v41;
    long long __dst = v41;
    uint64_t v40 = 0x400000000;
    if (!v50)
    {
      int v16 = 1;
      goto LABEL_19;
    }
    uint64_t v15 = v51;
    if (v49 != v51)
    {
      long long __dst = v49;
      uint64_t v40 = v50;
      __int16 v49 = v51;
      HIDWORD(v50) = 0;
      int v16 = 1;
LABEL_18:
      LODWORD(v50) = 0;
LABEL_19:
      *(_OWORD *)__int16 v42 = v52;
      uint64_t v43 = v53;
      long long v52 = 0uLL;
      *(_OWORD *)long long v44 = __p;
      uint64_t v45 = v55;
      uint64_t v53 = 0;
      long long __p = 0uLL;
      uint64_t v55 = 0;
      char v46 = 1;
      if (v16)
      {
        if (v49 != v51) {
          free(v49);
        }
        unsigned __int8 v56 = 0;
      }
      goto LABEL_23;
    }
    if (v50 < 5)
    {
      uint64_t v17 = v50;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v41, v50, 24);
      uint64_t v17 = v50;
      if (!v50)
      {
LABEL_17:
        LODWORD(v40) = v13;
        int v16 = v56;
        goto LABEL_18;
      }
      uint64_t v15 = v49;
      uint64_t v14 = __dst;
    }
    memcpy(v14, v15, 24 * v17);
    goto LABEL_17;
  }
LABEL_23:
  mlir::InFlightDiagnostic::abandon(v47);
  if (v47[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  }
  if (v56)
  {
    unint64_t v18 = (void **)__p;
    if ((void)__p)
    {
      uint64_t v19 = (void **)*((void *)&__p + 1);
      uint64_t v20 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = (void *)__p;
      }
      *((void *)&__p + 1) = v18;
      operator delete(v20);
    }
    uint64_t v21 = (void *)v52;
    if ((void)v52)
    {
      unint64_t v22 = (void *)*((void *)&v52 + 1);
      char v23 = (void *)v52;
      if (*((void *)&v52 + 1) != (void)v52)
      {
        do
        {
          uint64_t v25 = (void *)*--v22;
          uint64_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        char v23 = (void *)v52;
      }
      *((void *)&v52 + 1) = v21;
      operator delete(v23);
    }
    if (v49 != v51) {
      free(v49);
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v36);
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  if (v46)
  {
    uint64_t v26 = (void **)v44[0];
    if (v44[0])
    {
      uint64_t v27 = (void **)v44[1];
      __int16 v28 = v44[0];
      if (v44[1] != v44[0])
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        __int16 v28 = v44[0];
      }
      v44[1] = v26;
      operator delete(v28);
    }
    uint64_t v29 = v42[0];
    if (v42[0])
    {
      long long v30 = v42[1];
      __int16 v31 = v42[0];
      if (v42[1] != v42[0])
      {
        do
        {
          uint64_t v33 = (void *)*--v30;
          uint64_t v32 = v33;
          *long long v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        __int16 v31 = v42[0];
      }
      v42[1] = v29;
      operator delete(v31);
    }
    if (__dst != v41) {
      free(__dst);
    }
  }
  return v6;
}

uint64_t anonymous namespace'::EncodingReader::parseSection(_anonymous_namespace_::EncodingReader *a1, unsigned char *a2, void *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  char v36 = 0;
    return 0;
  unint64_t v35 = 0;
    return 0;
  char v6 = v36;
  unsigned int v7 = v36 & 0x7F;
  *a2 = v36 & 0x7F;
  if (v7 >= 9)
  {
    unsigned int v34 = v7;
    mlir::emitError(*((void *)a1 + 3), (uint64_t)v48);
    uint64_t v8 = *(void *)v48;
    if (*(void *)v48)
    {
      mlir::Diagnostic::append<char const(&)[21],unsigned int>((uint64_t)&v49, "invalid section ID: ", &v34);
      uint64_t v8 = *(void *)v48;
    }
    uint64_t v37 = v8;
    LOBYTE(v38) = 0;
    char v47 = 0;
    if (!v58) {
      goto LABEL_30;
    }
    uint64_t v38 = v49;
    int v9 = v52;
    int v39 = v50;
    int v10 = v42;
    long long __dst = v42;
    uint64_t v41 = 0x400000000;
    if (!v52)
    {
      int v12 = 1;
      goto LABEL_26;
    }
    int v11 = v51;
    if (v51 != v53)
    {
      long long __dst = v51;
      uint64_t v41 = v52;
      long long v51 = v53;
      HIDWORD(v52) = 0;
      int v12 = 1;
LABEL_25:
      LODWORD(v52) = 0;
LABEL_26:
      long long v43 = v54;
      uint64_t v44 = v55;
      long long v54 = 0uLL;
      long long v45 = v56;
      uint64_t v46 = v57;
      uint64_t v55 = 0;
      long long v56 = 0uLL;
      uint64_t v57 = 0;
      char v47 = 1;
      if (v12)
      {
        if (v51 != v53) {
          free(v51);
        }
        unsigned __int8 v58 = 0;
      }
LABEL_30:
      mlir::InFlightDiagnostic::abandon(v48);
      if (*(void *)v48) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
      }
      if (v58)
      {
        unint64_t v18 = (void **)v56;
        if ((void)v56)
        {
          uint64_t v19 = (void **)*((void *)&v56 + 1);
          uint64_t v20 = (void *)v56;
          if (*((void *)&v56 + 1) != (void)v56)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = (void *)v56;
          }
          *((void *)&v56 + 1) = v18;
          operator delete(v20);
        }
        uint64_t v21 = (void *)v54;
        if ((void)v54)
        {
          unint64_t v22 = (void *)*((void *)&v54 + 1);
          char v23 = (void *)v54;
          if (*((void *)&v54 + 1) != (void)v54)
          {
            do
            {
              uint64_t v25 = (void *)*--v22;
              uint64_t v24 = v25;
              void *v22 = 0;
              if (v25) {
                operator delete[](v24);
              }
            }
            while (v22 != v21);
            char v23 = (void *)v54;
          }
          *((void *)&v54 + 1) = v21;
          operator delete(v23);
        }
        if (v51 != v53) {
          free(v51);
        }
      }
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
      if (v37) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
      }
      if (v47)
      {
        uint64_t v26 = (void **)v45;
        if ((void)v45)
        {
          uint64_t v27 = (void **)*((void *)&v45 + 1);
          __int16 v28 = (void *)v45;
          if (*((void *)&v45 + 1) != (void)v45)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            __int16 v28 = (void *)v45;
          }
          *((void *)&v45 + 1) = v26;
          operator delete(v28);
        }
        uint64_t v29 = (void *)v43;
        if ((void)v43)
        {
          long long v30 = (void *)*((void *)&v43 + 1);
          __int16 v31 = (void *)v43;
          if (*((void *)&v43 + 1) != (void)v43)
          {
            do
            {
              uint64_t v33 = (void *)*--v30;
              uint64_t v32 = v33;
              *long long v30 = 0;
              if (v33) {
                operator delete[](v32);
              }
            }
            while (v30 != v29);
            __int16 v31 = (void *)v43;
          }
          *((void *)&v43 + 1) = v29;
          operator delete(v31);
        }
        if (__dst != v42) {
          free(__dst);
        }
      }
      return v16;
    }
    if (v52 < 5)
    {
      uint64_t v17 = v52;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v42, v52, 24);
      uint64_t v17 = v52;
      if (!v52)
      {
LABEL_24:
        LODWORD(v41) = v9;
        int v12 = v58;
        goto LABEL_25;
      }
      int v11 = v51;
      int v10 = __dst;
    }
    memcpy(v10, v11, 24 * v17);
    goto LABEL_24;
  }
  if (v6 < 0)
  {
    *(void *)int v48 = 0;
    {
      return 0;
    }
  }
  int v13 = (char *)v35;
}

void toString(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      *(unsigned char *)(a1 + 23) = 10;
      strcpy((char *)a1, "String (0)");
      break;
    case 1u:
      *(unsigned char *)(a1 + 23) = 11;
      strcpy((char *)a1, "Dialect (1)");
      break;
    case 2u:
      *(unsigned char *)(a1 + 23) = 12;
      strcpy((char *)a1, "AttrType (2)");
      break;
    case 3u:
      *(unsigned char *)(a1 + 23) = 18;
      strcpy((char *)a1, "AttrTypeOffset (3)");
      break;
    case 4u:
      *(unsigned char *)(a1 + 23) = 6;
      strcpy((char *)a1, "IR (4)");
      break;
    case 5u:
      *(unsigned char *)(a1 + 23) = 12;
      strcpy((char *)a1, "Resource (5)");
      break;
    case 6u:
      *(unsigned char *)(a1 + 23) = 18;
      strcpy((char *)a1, "ResourceOffset (6)");
      break;
    case 7u:
      *(unsigned char *)(a1 + 23) = 19;
      strcpy((char *)a1, "DialectVersions (7)");
      break;
    case 8u:
      *(unsigned char *)(a1 + 23) = 14;
      strcpy((char *)a1, "Properties (8)");
      break;
    default:
      v2[0] = "Unknown (";
      v2[2] = a2;
      __int16 v3 = 2307;
      v4[0] = v2;
      v4[2] = ")";
      __int16 v5 = 770;
      llvm::Twine::str((llvm::Twine *)v4, (std::string *)a1);
      break;
  }
}

uint64_t anonymous namespace'::PropertiesSectionReader::initialize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 1;
  }
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  unint64_t v34 = 0;
  {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  uint64_t v33 = a2;
  unint64_t v8 = v34;
  if (v34 > *((unsigned int *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v34, 8);
    goto LABEL_7;
  }
  if (v34)
  {
    while (1)
    {
LABEL_7:
      uint64_t v9 = a1[1];
      uint64_t v10 = v30;
      uint64_t v11 = v31;
      uint64_t v12 = v32;
      unint64_t v13 = *((unsigned int *)a1 + 6);
      if (v13 >= *((unsigned int *)a1 + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v13 + 1, 8);
        unint64_t v13 = *((unsigned int *)a1 + 6);
      }
      *(void *)(a1[2] + 8 * v13) = v9 - (v10 + v11) + v12;
      ++*((_DWORD *)a1 + 6);
      v39[0] = 0;
      {
        return 0;
      }
      if (!--v8)
      {
        if (v32 == v30 + v31) {
          return 1;
        }
        goto LABEL_15;
      }
    }
  }
  if (v6 == v6 + v7) {
    return 1;
  }
LABEL_15:
  mlir::emitError(v33, (uint64_t)v40);
  if (v40[0])
  {
    LODWORD(v39[0]) = 3;
    v39[1] = (unint64_t)"Broken properties section: didn't exhaust the offsets table";
    v39[2] = 59;
    int8x8_t v15 = v39;
    uint64_t v16 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v28 = v42 + 1;
      if (v41 <= v39 && (char *)v41 + 24 * v42 > (char *)v39)
      {
        int64_t v29 = (char *)v39 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        uint64_t v16 = (char *)v41;
        int8x8_t v15 = (unint64_t *)((char *)v41 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        int8x8_t v15 = v39;
        uint64_t v16 = (char *)v41;
      }
    }
    uint64_t v17 = &v16[24 * v42];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    ++v42;
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v48;
      uint64_t v21 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      int v48 = v19;
      operator delete(v21);
    }
    unint64_t v22 = v45;
    if (v45)
    {
      char v23 = v46;
      uint64_t v24 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v45;
      }
      uint64_t v46 = v22;
      operator delete(v24);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v14;
}

uint64_t mlir::BytecodeReader::Impl::parseDialectSection(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v76 = a2;
  uint64_t v77 = v4;
  unint64_t v73 = 0;
  __int16 v5 = (char **)(a1 + 272);
  unint64_t v6 = v73;
  unint64_t v7 = *(unsigned int *)(a1 + 280);
  if (v73 != v7)
  {
    if (v73 < v7)
    {
      uint64_t v8 = 8 * v7;
      unint64_t v9 = 8 * v73 - v8;
      uint64_t v10 = &(*v5)[v8 - 8];
      do
      {
        uint64_t v11 = *(void **)v10;
        *(void *)uint64_t v10 = 0;
        if (v11)
        {
          uint64_t v12 = v11[7];
          v11[7] = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          operator delete(v11);
        }
        v10 -= 8;
        v9 += 8;
      }
      while (v9);
      goto LABEL_34;
    }
    if (v73 <= *(unsigned int *)(a1 + 284))
    {
      unint64_t v13 = *v5;
      unint64_t v20 = v73 - v7;
      if (v73 == v7) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    v71[0] = 0;
    unint64_t v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 272, (void *)(a1 + 288), v73, 8, v71);
    uint64_t v14 = *(char **)(a1 + 272);
    uint64_t v15 = *(unsigned int *)(a1 + 280);
    if (!v15)
    {
LABEL_30:
      int v33 = v71[0];
      if (v14 != (char *)(a1 + 288)) {
        free(v14);
      }
      *(void *)(a1 + 272) = v13;
      *(_DWORD *)(a1 + 284) = v33;
      unint64_t v7 = *(unsigned int *)(a1 + 280);
      unint64_t v20 = v6 - v7;
      if (v6 == v7) {
        goto LABEL_34;
      }
LABEL_33:
      bzero(&v13[8 * v7], 8 * v20);
LABEL_34:
      *(_DWORD *)(a1 + 280) = v6;
      goto LABEL_35;
    }
    unint64_t v16 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v17 = 8 * v15;
    if (v16 >= 0xB)
    {
      if (v14 >= &v13[v17] || (v18 = v13, uint64_t v19 = *(char **)(a1 + 272), v13 >= &v14[v17]))
      {
        unint64_t v21 = v16 + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        long long v18 = &v13[v22];
        uint64_t v19 = &v14[v22];
        char v23 = (long long *)(v14 + 16);
        uint64_t v24 = v13 + 16;
        uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *(v23 - 1);
          long long v27 = *v23;
          *(v23 - 1) = 0uLL;
          long long *v23 = 0uLL;
          *(v24 - 1) = v26;
          _OWORD *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          uint64_t v30 = (uint64_t)(*v5 - 8);
          do
          {
            uint64_t v31 = *(void **)(v30 + v17);
            *(void *)(v30 + v17) = 0;
            if (v31)
            {
              uint64_t v32 = v31[7];
              v31[7] = 0;
              if (v32) {
                (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
              }
              operator delete(v31);
            }
            v17 -= 8;
          }
          while (v17);
          uint64_t v14 = *v5;
          goto LABEL_30;
        }
      }
    }
    else
    {
      long long v18 = v13;
      uint64_t v19 = *(char **)(a1 + 272);
    }
    unint64_t v28 = &v14[8 * v15];
    do
    {
      uint64_t v29 = *(void *)v19;
      *(void *)uint64_t v19 = 0;
      v19 += 8;
      *(void *)long long v18 = v29;
      v18 += 8;
    }
    while (v19 != v28);
    goto LABEL_23;
  }
LABEL_35:
  if (v6)
  {
    uint64_t v34 = 0;
    unint64_t v68 = v6;
    uint64_t v69 = (uint64_t *)(a1 + 336);
    while (1)
    {
      uint64_t v35 = operator new(0x40uLL);
      *uint64_t v35 = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      void v35[3] = 0u;
      uint64_t v36 = *(void **)&(*v5)[8 * v34];
      *(void *)&(*v5)[8 * v34] = v35;
      if (v36)
      {
        uint64_t v37 = v36[7];
        v36[7] = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
        operator delete(v36);
      }
      if (*(void *)(a1 + 248)) {
        break;
      }
      uint64_t v46 = *(void *)&(*v5)[8 * v34];
      v71[0] = 0;
      {
        return 0;
      }
LABEL_38:
      if (++v34 == v6) {
        goto LABEL_68;
      }
    }
    v70[0] = 0;
    char v38 = v70[0];
    v70[0] >>= 1;
    if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v77, *(void *)(a1 + 536), *(_DWORD *)(a1 + 544), (char *)v70[0], (_OWORD *)(*(void *)(*(void *)(a1 + 272) + 8 * v34) + 24), (uint64_t)"string", 6))return 0; {
    if (v38)
    }
    {
      LOBYTE(v79) = 0;
      if (v79 != 7)
      {
        uint64_t v59 = *(void *)(a1 + 8);
        v71[0] = (unint64_t)"expected dialect version section";
        __int16 v72 = 259;
        mlir::emitError(v59, (uint64_t)v71, (uint64_t)v80);
        if (v80[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v80);
        }
        if (v87)
        {
          int v60 = (void **)__p;
          if (__p)
          {
            uint64_t v61 = v86;
            long long v62 = __p;
            if (v86 != __p)
            {
              do
                uint64_t v61 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v61 - 1);
              while (v61 != v60);
              long long v62 = __p;
            }
            long long v86 = v60;
            operator delete(v62);
          }
          unint64_t v63 = v83;
          if (v83)
          {
            unint64_t v64 = v84;
            uint64_t v65 = v83;
            if (v84 != v83)
            {
              do
              {
                BOOL v67 = (void *)*--v64;
                unint64_t v66 = v67;
                void *v64 = 0;
                if (v67) {
                  operator delete[](v66);
                }
              }
              while (v64 != v63);
              uint64_t v65 = v83;
            }
            int64_t v84 = v63;
            operator delete(v65);
          }
          if (v81 != &v82) {
            free(v81);
          }
        }
        return 0;
      }
    }
    uint64_t v39 = *(void *)&(*v5)[8 * v34];
    uint64_t v41 = *(int8x16_t **)(v39 + 24);
    uint64_t v40 = *(const unsigned __int8 **)(v39 + 32);
    unsigned int v42 = llvm::StringMapImpl::LookupBucketFor(v69, v41, v40);
    uint64_t v43 = *v69;
    uint64_t v44 = v42;
    uint64_t v45 = *(void *)(*v69 + 8 * v42);
    if (v45 == -8)
    {
      --*(_DWORD *)(a1 + 352);
    }
    else if (v45)
    {
LABEL_37:
      *(void *)(v45 + 8) = v39;
      goto LABEL_38;
    }
    char v47 = v5;
    buffer = llvm::allocate_buffer((size_t)(v40 + 17), (std::align_val_t)8uLL);
    char v49 = (const unsigned __int8 **)buffer;
    uint64_t v50 = (char *)(buffer + 2);
    if (v40) {
      memcpy(buffer + 2, v41, (size_t)v40);
    }
    v40[(void)v50] = 0;
    void *v49 = v40;
    v49[1] = 0;
    *(void *)(v43 + 8 * v44) = v49;
    ++*(_DWORD *)(a1 + 348);
    long long v51 = (uint64_t *)(*(void *)(a1 + 336)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v69, v44));
    __int16 v5 = v47;
    unint64_t v6 = v68;
    uint64_t v45 = *v51;
    if (*v51) {
      BOOL v52 = v45 == -8;
    }
    else {
      BOOL v52 = 1;
    }
    if (v52)
    {
      do
      {
        uint64_t v53 = v51[1];
        ++v51;
        uint64_t v45 = v53;
        if (v53) {
          BOOL v54 = v45 == -8;
        }
        else {
          BOOL v54 = 1;
        }
      }
      while (v54);
    }
    goto LABEL_37;
  }
LABEL_68:
  v70[0] = a1;
  v70[1] = (unint64_t)&v74;
  if (*(void *)(a1 + 248) >= 4uLL)
  {
    v71[0] = 0;
    if (v71[0] > *(unsigned int *)(a1 + 372)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, (void *)(a1 + 376), v71[0], 48);
    }
  }
  if (v76 == v74 + v75) {
    return 1;
  }
  while (1)
  {
    unint64_t v55 = *(unsigned int *)(a1 + 280);
    v71[0] = *(void *)(a1 + 272);
    v71[1] = v55;
    char v79 = 0;
    unint64_t v78 = 0;
    unint64_t v56 = v78;
    if (v78)
    {
      uint64_t v57 = v79;
      {
        if (!--v56) {
          goto LABEL_74;
        }
      }
      return 0;
    }
LABEL_74:
    if (v76 == v74 + v75) {
      return 1;
    }
  }
}

uint64_t mlir::BytecodeReader::Impl::parseResourceSection(uint64_t *a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a3 + 16) != 0) == (*((unsigned char *)a4 + 16) != 0))
  {
    if (*((unsigned char *)a3 + 16))
    {
      v142[0] = &unk_1EC997A88;
      v142[1] = a1 + 11;
      uint64_t v15 = a1 + 53;
      v142[2] = a1 + 67;
      v142[3] = a1 + 53;
      v142[4] = a1 + 42;
      v142[5] = a2;
      v142[6] = a1 + 31;
      uint64_t v17 = *a1;
      uint64_t v16 = a1[1];
      uint64_t v18 = a1[34];
      uint64_t v141 = a1[151];
      v155[1] = *((unsigned int *)a1 + 70);
      uint64_t v156 = v16;
      uint64_t v154 = v16;
      v155[0] = v18;
      long long v152 = *a3;
      uint64_t v153 = v152;
      long long v149 = *a4;
      uint64_t v150 = v149;
      uint64_t v151 = v16;
      unint64_t v148 = 0;
      if (v148)
      {
        unint64_t v19 = 0;
        unint64_t v20 = (uint64_t *)(v17 + 16);
        uint64_t v140 = a1 + 61;
        do
        {
          long long v166 = 0uLL;
          *(void *)&long long v171 = 0;
          {
            return 0;
          }
          long long v21 = v166;
          long long v171 = v166;
          *(void *)&long long v157 = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v20, (uint64_t)&v171, &v157)|| (void)v157 == *(void *)(v17 + 16) + 24 * *(unsigned int *)(v17 + 32))
          {
            uint64_t v24 = *(void *)(v17 + 40);
            if (v24)
            {
              ParserFor = mlir::FallbackAsmResourceMap::getParserFor(v24, (const void *)v171, *((size_t *)&v171 + 1));
              int v23 = 0;
              goto LABEL_55;
            }
          }
          else
          {
            ParserFor = *(void **)(v157 + 16);
            if (ParserFor)
            {
              int v23 = 0;
              goto LABEL_55;
            }
          }
          mlir::emitWarning(v156, (uint64_t)&v171);
          if ((void)v171)
          {
            LODWORD(v157) = 3;
            *((void *)&v157 + 1) = "ignoring unknown external resources for '";
            uint64_t v158 = 41;
            uint64_t v25 = (char *)v172;
            if (v173 >= v174)
            {
              unint64_t v61 = v173 + 1;
              if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
              {
                int64_t v63 = (char *)&v157 - (unsigned char *)v172;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v61, 24);
                uint64_t v25 = (char *)v172;
                long long v26 = (char *)v172 + v63;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v61, 24);
                long long v26 = (char *)&v157;
                uint64_t v25 = (char *)v172;
              }
            }
            else
            {
              long long v26 = (char *)&v157;
            }
            long long v27 = &v25[24 * v173];
            long long v28 = *(_OWORD *)v26;
            *((void *)v27 + 2) = *((void *)v26 + 2);
            *(_OWORD *)long long v27 = v28;
            ++v173;
            if ((void)v171)
            {
              LOWORD(v160) = 261;
              long long v157 = v21;
              mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (const void ***)&v157);
              if ((void)v171)
              {
                LODWORD(v157) = 3;
                *((void *)&v157 + 1) = "'";
                uint64_t v158 = 1;
                uint64_t v29 = (char *)v172;
                if (v173 >= v174)
                {
                  unint64_t v62 = v173 + 1;
                  if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                  {
                    int64_t v64 = (char *)&v157 - (unsigned char *)v172;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v62, 24);
                    uint64_t v29 = (char *)v172;
                    uint64_t v30 = (char *)v172 + v64;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v62, 24);
                    uint64_t v30 = (char *)&v157;
                    uint64_t v29 = (char *)v172;
                  }
                }
                else
                {
                  uint64_t v30 = (char *)&v157;
                }
                uint64_t v31 = &v29[24 * v173];
                long long v32 = *(_OWORD *)v30;
                *((void *)v31 + 2) = *((void *)v30 + 2);
                *(_OWORD *)uint64_t v31 = v32;
                ++v173;
                if ((void)v171) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                }
              }
            }
          }
          if (v180)
          {
            int v33 = (void **)__p;
            if (__p)
            {
              uint64_t v34 = v179;
              uint64_t v35 = __p;
              if (v179 != __p)
              {
                do
                  uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
                while (v34 != v33);
                uint64_t v35 = __p;
              }
              uint64_t v179 = v33;
              operator delete(v35);
            }
            uint64_t v36 = v176;
            if (v176)
            {
              uint64_t v37 = v177;
              char v38 = v176;
              if (v177 != v176)
              {
                do
                {
                  uint64_t v40 = (void *)*--v37;
                  uint64_t v39 = v40;
                  *uint64_t v37 = 0;
                  if (v40) {
                    operator delete[](v39);
                  }
                }
                while (v37 != v36);
                char v38 = v176;
              }
              v177 = v36;
              operator delete(v38);
            }
            if (v172 != v175) {
              free(v172);
            }
          }
          ParserFor = 0;
          int v23 = 1;
LABEL_55:
          uint64_t v41 = v156;
          unint64_t v170 = 0;
          unsigned int v42 = v20;
          uint64_t v43 = v15;
          unint64_t v44 = v170;
          if (v170)
          {
            do
            {
              long long v143 = 0uLL;
              LODWORD(v147) = 0;
              unint64_t v167 = 0;
              long long v169 = 0uLL;
              *(void *)&long long v171 = 0;
              {
                return 0;
              }
              if (!v23)
              {
                long long v163 = v169;
                uint64_t v164 = v169;
                uint64_t v165 = v41;
                int Key = llvm::StringMapImpl::FindKey(v140, (int8x16_t *)v143, *((const unsigned __int8 **)&v143 + 1));
                if (Key == -1 || Key == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  uint64_t v46 = 0;
                  char v47 = "";
                }
                else
                {
                  uint64_t v48 = *(void *)(*v140 + 8 * Key);
                  uint64_t v50 = *(const char **)(v48 + 8);
                  uint64_t v49 = v48 + 8;
                  char v47 = v50;
                  int v51 = *(char *)(v49 + 23);
                  if (v51 >= 0) {
                    char v47 = (const char *)v49;
                  }
                  uint64_t v46 = *(void *)(v49 + 8);
                  if (v51 >= 0) {
                    uint64_t v46 = v51;
                  }
                }
                *(void *)&long long v143 = v47;
                *((void *)&v143 + 1) = v46;
                *(void *)&long long v157 = &unk_1EC99A080;
                *((void *)&v157 + 1) = v47;
                uint64_t v158 = v46;
                int v159 = (int)v147;
                v160 = &v163;
                v161 = a1 + 67;
                uint64_t v162 = v141;
                if (!(*(unsigned __int8 (**)(void *, long long *))(*ParserFor + 16))(ParserFor, &v157))
                {
LABEL_173:
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
                  return 0;
                }
                if (v164 != (void)v163 + *((void *)&v163 + 1))
                {
                  char v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
                  if ((void)v171) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                  }
                  uint64_t v15 = v43;
                  if (v180)
                  {
                    uint64_t v53 = (void **)__p;
                    unint64_t v20 = v42;
                    if (__p)
                    {
                      BOOL v54 = v179;
                      unint64_t v55 = __p;
                      if (v179 != __p)
                      {
                        do
                          BOOL v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                        while (v54 != v53);
                        unint64_t v55 = __p;
                      }
                      uint64_t v179 = v53;
                      operator delete(v55);
                    }
                    unint64_t v56 = v176;
                    if (v176)
                    {
                      uint64_t v57 = v177;
                      unsigned __int8 v58 = v176;
                      if (v177 != v176)
                      {
                        do
                        {
                          int v60 = (void *)*--v57;
                          uint64_t v59 = v60;
                          void *v57 = 0;
                          if (v60) {
                            operator delete[](v59);
                          }
                        }
                        while (v57 != v56);
                        unsigned __int8 v58 = v176;
                      }
                      v177 = v56;
                      operator delete(v58);
                    }
                    if (v172 != v175) {
                      free(v172);
                    }
                    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
                  }
                  else
                  {
                    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
                    unint64_t v20 = v42;
                  }
                  if (v52) {
                    goto LABEL_58;
                  }
                  return 0;
                }
                mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
              }
            }
            while (--v44);
          }
          uint64_t v15 = v43;
          unint64_t v20 = v42;
LABEL_58:
          ++v19;
        }
        while (v19 < v148);
      }
      uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v156);
      if (v150 != (void)v149 + *((void *)&v149 + 1))
      {
        unint64_t v73 = (mlir::MLIRContext *)Context;
        uint64_t v74 = v175;
        while (1)
        {
          v147 = 0;
          {
            return 0;
          }
          uint64_t v75 = *(void *)*v147;
          if (!v75)
          {
            mlir::emitError(v154, (uint64_t)&v171);
            if ((void)v171)
            {
              LODWORD(v157) = 3;
              *((void *)&v157 + 1) = "dialect '";
              uint64_t v158 = 9;
              __int16 v97 = (char *)&v157;
              uint64_t v98 = (char *)v172;
              if (v173 >= v174)
              {
                unint64_t v133 = v173 + 1;
                if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                {
                  int64_t v137 = (char *)&v157 - (unsigned char *)v172;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v133, 24);
                  uint64_t v98 = (char *)v172;
                  __int16 v97 = (char *)v172 + v137;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v133, 24);
                  __int16 v97 = (char *)&v157;
                  uint64_t v98 = (char *)v172;
                }
              }
              unint64_t v99 = &v98[24 * v173];
              long long v100 = *(_OWORD *)v97;
              *((void *)v99 + 2) = *((void *)v97 + 2);
              *(_OWORD *)unint64_t v99 = v100;
              ++v173;
              if ((void)v171)
              {
                uint64_t v101 = *v147;
                LOWORD(v160) = 261;
                uint64_t v103 = *(void *)(v101 + 24);
                uint64_t v102 = *(void *)(v101 + 32);
                *(void *)&long long v157 = v103;
                *((void *)&v157 + 1) = v102;
                mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (const void ***)&v157);
                if ((void)v171)
                {
                  LODWORD(v157) = 3;
                  *((void *)&v157 + 1) = "' is unknown";
                  uint64_t v158 = 12;
                  int64_t v104 = (char *)&v157;
                  int64_t v105 = (char *)v172;
                  if (v173 >= v174)
                  {
                    unint64_t v135 = v173 + 1;
                    if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                    {
                      int64_t v139 = (char *)&v157 - (unsigned char *)v172;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v135, 24);
                      int64_t v105 = (char *)v172;
                      int64_t v104 = (char *)v172 + v139;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v135, 24);
                      int64_t v104 = (char *)&v157;
                      int64_t v105 = (char *)v172;
                    }
                  }
                  int64_t v106 = &v105[24 * v173];
                  long long v107 = *(_OWORD *)v104;
                  *((void *)v106 + 2) = *((void *)v104 + 2);
                  *(_OWORD *)int64_t v106 = v107;
                  ++v173;
                }
              }
            }
            uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
            if ((void)v171) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
            }
            if (!v180) {
              return v6;
            }
            unint64_t v108 = (void **)__p;
            if (__p)
            {
              unint64_t v109 = v179;
              unint64_t v110 = __p;
              if (v179 != __p)
              {
                do
                  unint64_t v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
                while (v109 != v108);
                unint64_t v110 = __p;
              }
              uint64_t v179 = v108;
              operator delete(v110);
            }
            uint64_t v10 = v176;
            if (!v176) {
              goto LABEL_218;
            }
            unint64_t v111 = v177;
            uint64_t v12 = v176;
            if (v177 == v176) {
              goto LABEL_217;
            }
            do
            {
              int v113 = (void *)*--v111;
              BOOL v112 = v113;
              void *v111 = 0;
              if (v113) {
                operator delete[](v112);
              }
            }
            while (v111 != v10);
            goto LABEL_216;
          }
          uint64_t v146 = 0;
          if (!mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v75))
          {
            uint64_t v146 = 0;
LABEL_196:
            mlir::emitError(v154, (uint64_t)&v171);
            if ((void)v171)
            {
              LODWORD(v157) = 3;
              *((void *)&v157 + 1) = "unexpected resources for dialect '";
              uint64_t v158 = 34;
              int64_t v114 = (char *)&v157;
              int64_t v115 = (char *)v172;
              if (v173 >= v174)
              {
                unint64_t v132 = v173 + 1;
                if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                {
                  int64_t v136 = (char *)&v157 - (unsigned char *)v172;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v132, 24);
                  int64_t v115 = (char *)v172;
                  int64_t v114 = (char *)v172 + v136;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v132, 24);
                  int64_t v114 = (char *)&v157;
                  int64_t v115 = (char *)v172;
                }
              }
              int64_t v116 = &v115[24 * v173];
              long long v117 = *(_OWORD *)v114;
              *((void *)v116 + 2) = *((void *)v114 + 2);
              *(_OWORD *)int64_t v116 = v117;
              ++v173;
              if ((void)v171)
              {
                uint64_t v118 = *v147;
                LOWORD(v160) = 261;
                uint64_t v120 = *(void *)(v118 + 24);
                uint64_t v119 = *(void *)(v118 + 32);
                *(void *)&long long v157 = v120;
                *((void *)&v157 + 1) = v119;
                mlir::Diagnostic::operator<<((uint64_t)&v171 + 8, (const void ***)&v157);
                if ((void)v171)
                {
                  LODWORD(v157) = 3;
                  *((void *)&v157 + 1) = "'";
                  uint64_t v158 = 1;
                  uint64_t v121 = (char *)&v157;
                  int v122 = (char *)v172;
                  if (v173 >= v174)
                  {
                    unint64_t v134 = v173 + 1;
                    if (v172 <= &v157 && (char *)v172 + 24 * v173 > (char *)&v157)
                    {
                      int64_t v138 = (char *)&v157 - (unsigned char *)v172;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v134, 24);
                      int v122 = (char *)v172;
                      uint64_t v121 = (char *)v172 + v138;
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v175, v134, 24);
                      uint64_t v121 = (char *)&v157;
                      int v122 = (char *)v172;
                    }
                  }
                  v123 = &v122[24 * v173];
                  long long v124 = *(_OWORD *)v121;
                  *((void *)v123 + 2) = *((void *)v121 + 2);
                  *(_OWORD *)v123 = v124;
                  ++v173;
                }
              }
            }
            uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
            if ((void)v171) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
            }
            if (!v180) {
              return v6;
            }
            v125 = (void **)__p;
            if (__p)
            {
              char v126 = v179;
              long long v127 = __p;
              if (v179 != __p)
              {
                do
                  char v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
                while (v126 != v125);
                long long v127 = __p;
              }
              uint64_t v179 = v125;
              operator delete(v127);
            }
            uint64_t v10 = v176;
            if (!v176) {
              goto LABEL_218;
            }
            int v128 = v177;
            uint64_t v12 = v176;
            if (v177 == v176) {
              goto LABEL_217;
            }
            do
            {
              __int16 v130 = (void *)*--v128;
              v129 = v130;
              *int v128 = 0;
              if (v130) {
                operator delete[](v129);
              }
            }
            while (v128 != v10);
            goto LABEL_216;
          }
          uint64_t v76 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(v75);
          uint64_t v146 = v76;
          if (!v76) {
            goto LABEL_196;
          }
          uint64_t v77 = v76;
          *(void *)&long long v143 = &v146;
          *((void *)&v143 + 1) = &v152;
          v144 = &v147;
          v145 = v15;
          uint64_t v78 = v156;
          unint64_t v170 = 0;
          unint64_t v79 = v170;
          if (v170)
          {
            do
            {
              long long v169 = 0uLL;
              int v168 = 0;
              unint64_t v167 = 0;
              long long v166 = 0uLL;
              *(void *)&long long v171 = 0;
                                       (int8x16_t *)v169,
                                       *((const unsigned __int8 **)&v169 + 1)))
              {
                return 0;
              }
              if (*((void *)&v166 + 1))
              {
                long long v163 = v166;
                uint64_t v164 = v166;
                uint64_t v165 = v78;
                int v80 = llvm::StringMapImpl::FindKey(a1 + 61, (int8x16_t *)v169, *((const unsigned __int8 **)&v169 + 1));
                if (v80 == -1 || v80 == (unint64_t)*((unsigned int *)a1 + 124))
                {
                  uint64_t v81 = 0;
                  uint64_t v82 = "";
                }
                else
                {
                  uint64_t v83 = *(void *)(a1[61] + 8 * v80);
                  int64_t v85 = *(const char **)(v83 + 8);
                  uint64_t v84 = v83 + 8;
                  uint64_t v82 = v85;
                  int v86 = *(char *)(v84 + 23);
                  if (v86 >= 0) {
                    uint64_t v82 = (const char *)v84;
                  }
                  uint64_t v81 = *(void *)(v84 + 8);
                  if (v86 >= 0) {
                    uint64_t v81 = v86;
                  }
                }
                *(void *)&long long v169 = v82;
                *((void *)&v169 + 1) = v81;
                *(void *)&long long v157 = &unk_1EC99A080;
                *((void *)&v157 + 1) = v82;
                uint64_t v158 = v81;
                int v159 = v168;
                v160 = &v163;
                v161 = a1 + 67;
                uint64_t v162 = v141;
                if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)v77 + 48))(v77, &v157)) {
                  goto LABEL_173;
                }
                if (v164 != (void)v163 + *((void *)&v163 + 1))
                {
                  char v87 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
                  if ((void)v171) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
                  }
                  if (v180)
                  {
                    uint64_t v88 = v74;
                    uint64_t v89 = (void **)__p;
                    if (__p)
                    {
                      uint64_t v90 = v179;
                      long long v91 = __p;
                      if (v179 != __p)
                      {
                        do
                          uint64_t v90 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v90 - 1);
                        while (v90 != v89);
                        long long v91 = __p;
                      }
                      uint64_t v179 = v89;
                      operator delete(v91);
                    }
                    long long v92 = v176;
                    if (v176)
                    {
                      uint64_t v93 = v177;
                      uint64_t v94 = v176;
                      if (v177 != v176)
                      {
                        do
                        {
                          uint64_t v96 = (void *)*--v93;
                          __int16 v95 = v96;
                          *uint64_t v93 = 0;
                          if (v96) {
                            operator delete[](v95);
                          }
                        }
                        while (v93 != v92);
                        uint64_t v94 = v176;
                      }
                      v177 = v92;
                      operator delete(v94);
                    }
                    uint64_t v74 = v88;
                    if (v172 != v88) {
                      free(v172);
                    }
                  }
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
                  if (v87) {
                    break;
                  }
                  return 0;
                }
                mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v157);
              }
            }
            while (--v79);
          }
          uint64_t v6 = 1;
          if (v150 == (void)v149 + *((void *)&v149 + 1)) {
            return v6;
          }
        }
      }
    }
    return 1;
  }
  if (*((unsigned char *)a4 + 16))
  {
    uint64_t v5 = a1[1];
    *(void *)&long long v157 = "unexpected resource offset section when resource section is not present";
    LOWORD(v160) = 259;
    mlir::emitError(v5, (uint64_t)&v157, (uint64_t)&v171);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
    if ((void)v171) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
    }
    if (v180)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        uint64_t v8 = v179;
        unint64_t v9 = __p;
        if (v179 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        uint64_t v179 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v176;
      if (!v176) {
        goto LABEL_218;
      }
      uint64_t v11 = v177;
      uint64_t v12 = v176;
      if (v177 == v176)
      {
LABEL_217:
        v177 = v10;
        operator delete(v12);
LABEL_218:
        if (v172 != v175) {
          free(v172);
        }
        return v6;
      }
      do
      {
        uint64_t v14 = (void *)*--v11;
        unint64_t v13 = v14;
        void *v11 = 0;
        if (v14) {
          operator delete[](v13);
        }
      }
      while (v11 != v10);
LABEL_216:
      uint64_t v12 = v176;
      goto LABEL_217;
    }
  }
  else
  {
    uint64_t v65 = a1[1];
    *(void *)&long long v157 = "expected resource offset section when resource section is present";
    LOWORD(v160) = 259;
    mlir::emitError(v65, (uint64_t)&v157, (uint64_t)&v171);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v171);
    if ((void)v171) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v171);
    }
    if (v180)
    {
      unint64_t v66 = (void **)__p;
      if (__p)
      {
        BOOL v67 = v179;
        unint64_t v68 = __p;
        if (v179 != __p)
        {
          do
            BOOL v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
          while (v67 != v66);
          unint64_t v68 = __p;
        }
        uint64_t v179 = v66;
        operator delete(v68);
      }
      uint64_t v10 = v176;
      if (!v176) {
        goto LABEL_218;
      }
      uint64_t v69 = v177;
      uint64_t v12 = v176;
      if (v177 == v176) {
        goto LABEL_217;
      }
      do
      {
        uint64_t v71 = (void *)*--v69;
        unsigned int v70 = v71;
        *uint64_t v69 = 0;
        if (v71) {
          operator delete[](v70);
        }
      }
      while (v69 != v10);
      goto LABEL_216;
    }
  }
  return v6;
}

uint64_t anonymous namespace'::AttrTypeReader::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  v39[0] = a4;
  v39[1] = a5;
  uint64_t v10 = *(void *)(a1 + 136);
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  uint64_t v38 = v10;
  unint64_t v34 = 0;
  unint64_t v33 = 0;
  unint64_t v11 = v34;
  unint64_t v12 = *(unsigned int *)(a1 + 32);
  if (v34 != v12)
  {
    if (v34 >= v12)
    {
      if (v34 > *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v34, 40);
        unint64_t v12 = *(unsigned int *)(a1 + 32);
      }
      if (v11 != v12) {
        bzero((void *)(*(void *)(a1 + 24) + 40 * v12), 40 * ((40 * (v11 - v12) - 40) / 0x28) + 40);
      }
    }
    *(_DWORD *)(a1 + 32) = v11;
    LODWORD(v12) = v11;
  }
  unint64_t v13 = (void *)(a1 + 80);
  unint64_t v14 = v33;
  unint64_t v15 = *(unsigned int *)(a1 + 88);
  if (v33 != v15)
  {
    if (v33 >= v15)
    {
      if (v33 > *(unsigned int *)(a1 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 80, (void *)(a1 + 96), v33, 40);
        unint64_t v15 = *(unsigned int *)(a1 + 88);
      }
      if (v14 != v15) {
        bzero((void *)(*v13 + 40 * v15), 40 * ((40 * (v14 - v15) - 40) / 0x28) + 40);
      }
    }
    *(_DWORD *)(a1 + 88) = v14;
    LODWORD(v12) = *(_DWORD *)(a1 + 32);
    LODWORD(v15) = v14;
  }
  uint64_t v32 = 0;
  uint64_t v40 = 0;
  uint64_t v45 = (void *)(a1 + 24);
  uint64_t v46 = &v40;
  char v47 = &v35;
  uint64_t v48 = &v32;
  uint64_t v49 = v39;
  if (v12)
  {
    uint64_t v16 = v12;
    while (1)
    {
      uint64_t v43 = a2;
      uint64_t v44 = a3;
      unsigned int v42 = 0;
      unint64_t v41 = 0;
      unint64_t v17 = v41;
      if (v41)
      {
        uint64_t v18 = v42;
        while (_ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_((uint64_t)&v45, *v18))
        {
          if (!--v17) {
            goto LABEL_19;
          }
        }
        return 0;
      }
LABEL_19:
      if (v40 == v16)
      {
        LODWORD(v15) = *(_DWORD *)(a1 + 88);
        unint64_t v13 = (void *)(a1 + 80);
        break;
      }
    }
  }
  uint64_t v40 = 0;
  uint64_t v45 = v13;
  uint64_t v46 = &v40;
  char v47 = &v35;
  uint64_t v48 = &v32;
  uint64_t v49 = v39;
  if (v15)
  {
    uint64_t v19 = v15;
    do
    {
      uint64_t v43 = a2;
      uint64_t v44 = a3;
      unsigned int v42 = 0;
      unint64_t v41 = 0;
      unint64_t v20 = v41;
      if (v41)
      {
        long long v21 = v42;
        while (_ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_((uint64_t)&v45, *v21))
        {
          if (!--v20) {
            goto LABEL_30;
          }
        }
        return 0;
      }
LABEL_30:
      ;
    }
    while (v40 != v19);
  }
  if (v37 == v35 + v36) {
    return 1;
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v54;
      long long v26 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        long long v26 = __p;
      }
      BOOL v54 = v24;
      operator delete(v26);
    }
    long long v27 = v51;
    if (v51)
    {
      long long v28 = v52;
      uint64_t v29 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *long long v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v51;
      }
      char v52 = v27;
      operator delete(v29);
    }
    if (v48 != &v50) {
      free(v48);
    }
  }
  return v22;
}

uint64_t mlir::BytecodeReader::Impl::parseIRSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  v84[0] = a2;
  v84[1] = a3;
  v84[2] = a2;
  uint64_t v85 = v6;
  LOBYTE(v79) = 0;
  char v80 = 0;
  unint64_t v7 = (unsigned int *)mlir::ModuleOp::create(v6, &v79);
  uint64_t v8 = (char *)operator new(0x80uLL);
  unint64_t v9 = v8;
  uint64_t v10 = v8 + 128;
  unint64_t v11 = v7[11];
  unsigned int v12 = v11 & 0x7FFFFF;
  if ((v11 & 0x7FFFFF) != 0)
  {
    unint64_t v13 = (((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v7[10];
  }
  else
  {
    unint64_t v13 = 0;
    unsigned int v12 = 0;
  }
  *(void *)uint64_t v8 = v13;
  *((void *)v8 + 1) = v13 + 24 * v12;
  *((void *)v8 + 2) = v84;
  *((void *)v8 + 3) = 0;
  *((_DWORD *)v8 + 8) = 0;
  unint64_t v14 = v8 + 56;
  *((void *)v8 + 5) = v8 + 56;
  uint64_t v15 = (uint64_t)(v8 + 40);
  *((void *)v9 + 6) = 0x600000000;
  *((void *)v9 + 13) = 0;
  *((void *)v9 + 14) = 0;
  v9[120] = 1;
  uint64_t v82 = v10;
  uint64_t v83 = v10;
  uint64_t v81 = v9;
  uint64_t v16 = *(void *)((((unint64_t)&v7[4 * ((v11 >> 23) & 1) + 17]
                    + ((v11 >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v7[10]
                  + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *((unsigned int *)v9 + 12);
  if (v18 >= *((_DWORD *)v9 + 13))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v14, v18 + 1, 8);
    LODWORD(v18) = *((_DWORD *)v9 + 12);
  }
  *(void *)(*((void *)v9 + 5) + 8 * v18) = v17;
  ++*((_DWORD *)v9 + 12);
  *(v82 - 3) = *(void *)(*(v82 - 16) + 8);
  if (mlir::BytecodeReader::Impl::parseBlockHeader(a1, (_anonymous_namespace_::EncodingReader *)v84, (uint64_t)(v82 - 16)))
  {
    unint64_t v19 = *(void *)(a1 + 688);
    if (v19 >= *(void *)(a1 + 696))
    {
      unint64_t v20 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>((void **)(a1 + 680));
    }
    else
    {
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(void *)(v19 + 48) = 0;
      *(_OWORD *)unint64_t v19 = 0u;
      *(void *)(v19 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v19 + 40;
      *(_DWORD *)(v19 + 36) = 4;
      unint64_t v20 = (char *)(v19 + 56);
    }
    *(void *)(a1 + 688) = v20;
    uint64_t v22 = v82;
    uint64_t v23 = (*((void *)v20 - 6) - *((void *)v20 - 7)) >> 3;
    uint64_t v24 = *((unsigned int *)v20 - 6);
    if (v24 >= *((_DWORD *)v20 - 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 - 32), v20 - 16, v24 + 1, 4);
      LODWORD(v(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *((_DWORD *)v20 - 6);
    }
    *(_DWORD *)(*((void *)v20 - 4) + 4 * v(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v23;
    ++*((_DWORD *)v20 - 6);
    uint64_t v25 = *((void *)v20 - 7);
    unint64_t v26 = (*((void *)v20 - 6) - v25) >> 3;
    unint64_t v27 = *((unsigned int *)v22 - 24);
    if (v26 >= v26 + v27)
    {
      if (v26 > v26 + v27) {
        *((void *)v20 - 6) = v25 + 8 * (v26 + v27);
      }
    }
    else
    {
      std::vector<mlir::Value>::__append((void **)v20 - 7, v27);
    }
    while (v81 != v82)
    {
      if (!mlir::BytecodeReader::Impl::parseRegions((unsigned int *)a1, &v81, (uint64_t)(v82 - 16))) {
        goto LABEL_22;
      }
    }
    if (*(void *)(a1 + 760) != a1 + 760)
    {
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v97);
      if (v97) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      }
      if (!v107) {
        goto LABEL_112;
      }
      long long v28 = (void **)__p;
      if ((void)__p)
      {
        uint64_t v29 = (void **)*((void *)&__p + 1);
        uint64_t v30 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = (void *)__p;
        }
        *((void *)&__p + 1) = v28;
        operator delete(v30);
      }
      uint64_t v31 = (void *)v103;
      if ((void)v103)
      {
        uint64_t v32 = (void *)*((void *)&v103 + 1);
        unint64_t v33 = (void *)v103;
        if (*((void *)&v103 + 1) != (void)v103)
        {
          do
          {
            uint64_t v35 = (void *)*--v32;
            unint64_t v34 = v35;
            *uint64_t v32 = 0;
            if (v35) {
              operator delete[](v34);
            }
          }
          while (v32 != v31);
          unint64_t v33 = (void *)v103;
        }
        *((void *)&v103 + 1) = v31;
        operator delete(v33);
      }
      uint64_t v53 = v100;
      if (v100 == v102) {
        goto LABEL_112;
      }
      goto LABEL_111;
    }
    LODWORD(v86) = 0;
    uint64_t v97 = a1;
    uint64_t v98 = (const char *)&v86;
    mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>, (uint64_t)&v97, 0);
    uint64_t v97 = a1;
    int v36 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>, (uint64_t)&v97, 1);
    uint64_t v97 = a1;
    int v37 = mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v7, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>, (uint64_t)&v97, 1);
    if (v36 && v37)
    {
      uint64_t v38 = *(unsigned int *)(a1 + 280);
      if (!v38)
      {
LABEL_54:
        if (*(unsigned char *)(*(void *)a1 + 8)) {
          mlir::verify((mlir *)v7, (mlir::Operation *)1);
        }
        uint64_t v51 = *(void *)((((unint64_t)&v7[4 * (((unint64_t)v7[11] >> 23) & 1) + 17]
                          + (((unint64_t)v7[11] >> 21) & 0x7F8)
                          + 3) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v7[10]
                        + 8);
        if (v51) {
          uint64_t v52 = v51 - 8;
        }
        else {
          uint64_t v52 = 0;
        }
        llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(a4 + 32, (uint64_t *)(a4 + 32), v52 + 32, *(uint64_t **)(v52 + 40), (uint64_t *)(v52 + 32));
        uint64_t v21 = 1;
        goto LABEL_113;
      }
      uint64_t v39 = *(void *)(a1 + 272);
      uint64_t v40 = 8 * v38;
      while (1)
      {
        if (*(void *)(*(void *)v39 + 56))
        {
          uint64_t v41 = *(void *)(*(void *)v39 + 16);
          if (v41)
          {
            if (!(*(unsigned __int8 (**)(uint64_t, unsigned int *))(*(void *)v41 + 64))(v41, v7)) {
              break;
            }
          }
        }
        v39 += 8;
        v40 -= 8;
        if (!v40) {
          goto LABEL_54;
        }
      }
LABEL_22:
      uint64_t v21 = 0;
      goto LABEL_112;
    }
    mlir::emitError(v85, (uint64_t)&v97);
    uint64_t v42 = v97;
    if (v97)
    {
      LODWORD(v86) = 3;
      char v87 = "parsed use-list orders were invalid and could not be applied";
      uint64_t v88 = 60;
      uint64_t v43 = (char *)&v86;
      uint64_t v44 = (char *)v100;
      if (v101 >= HIDWORD(v101))
      {
        unint64_t v77 = v101 + 1;
        if (v100 <= &v86 && (char *)v100 + 24 * v101 > (char *)&v86)
        {
          int64_t v78 = (char *)&v86 - (unsigned char *)v100;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          uint64_t v44 = (char *)v100;
          uint64_t v43 = (char *)v100 + v78;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v77, 24);
          uint64_t v43 = (char *)&v86;
          uint64_t v44 = (char *)v100;
        }
      }
      uint64_t v45 = &v44[24 * v101];
      long long v46 = *(_OWORD *)v43;
      *((void *)v45 + 2) = *((void *)v43 + 2);
      *(_OWORD *)uint64_t v45 = v46;
      LODWORD(v101) = v101 + 1;
      uint64_t v42 = v97;
    }
    uint64_t v86 = v42;
    LOBYTE(v87) = 0;
    char v96 = 0;
    if (!v107)
    {
LABEL_76:
      mlir::InFlightDiagnostic::abandon(&v97);
      if (v97) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v97);
      }
      if (v107)
      {
        char v55 = (void **)__p;
        if ((void)__p)
        {
          uint64_t v56 = (void **)*((void *)&__p + 1);
          uint64_t v57 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            uint64_t v57 = (void *)__p;
          }
          *((void *)&__p + 1) = v55;
          operator delete(v57);
        }
        unsigned __int8 v58 = (void *)v103;
        if ((void)v103)
        {
          uint64_t v59 = (void *)*((void *)&v103 + 1);
          int v60 = (void *)v103;
          if (*((void *)&v103 + 1) != (void)v103)
          {
            do
            {
              unint64_t v62 = (void *)*--v59;
              unint64_t v61 = v62;
              *uint64_t v59 = 0;
              if (v62) {
                operator delete[](v61);
              }
            }
            while (v59 != v58);
            int v60 = (void *)v103;
          }
          *((void *)&v103 + 1) = v58;
          operator delete(v60);
        }
        if (v100 != v102) {
          free(v100);
        }
      }
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
      if (v86) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
      }
      if (!v96) {
        goto LABEL_112;
      }
      int64_t v63 = (void **)v94[0];
      if (v94[0])
      {
        int64_t v64 = (void **)v94[1];
        uint64_t v65 = v94[0];
        if (v94[1] != v94[0])
        {
          do
            int64_t v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          uint64_t v65 = v94[0];
        }
        v94[1] = v63;
        operator delete(v65);
      }
      unint64_t v66 = v92[0];
      if (v92[0])
      {
        BOOL v67 = v92[1];
        unint64_t v68 = v92[0];
        if (v92[1] != v92[0])
        {
          do
          {
            unsigned int v70 = (void *)*--v67;
            uint64_t v69 = v70;
            *BOOL v67 = 0;
            if (v70) {
              operator delete[](v69);
            }
          }
          while (v67 != v66);
          unint64_t v68 = v92[0];
        }
        v92[1] = v66;
        operator delete(v68);
      }
      uint64_t v53 = __dst;
      if (__dst == v91)
      {
LABEL_112:
        if (!v7) {
          goto LABEL_114;
        }
        goto LABEL_113;
      }
LABEL_111:
      free(v53);
      goto LABEL_112;
    }
    char v87 = v98;
    int v47 = v101;
    LODWORD(v88) = v99;
    uint64_t v48 = v91;
    long long __dst = v91;
    uint64_t v90 = 0x400000000;
    if (!v101)
    {
      int v50 = 1;
      goto LABEL_72;
    }
    uint64_t v49 = v102;
    if (v100 != v102)
    {
      long long __dst = v100;
      uint64_t v90 = v101;
      long long v100 = v102;
      HIDWORD(v101) = 0;
      int v50 = 1;
LABEL_71:
      LODWORD(v101) = 0;
LABEL_72:
      *(_OWORD *)long long v92 = v103;
      uint64_t v93 = v104;
      long long v103 = 0uLL;
      *(_OWORD *)uint64_t v94 = __p;
      uint64_t v95 = v106;
      uint64_t v104 = 0;
      long long __p = 0uLL;
      uint64_t v106 = 0;
      char v96 = 1;
      if (v50)
      {
        if (v100 != v102) {
          free(v100);
        }
        unsigned __int8 v107 = 0;
      }
      goto LABEL_76;
    }
    if (v101 < 5)
    {
      uint64_t v54 = v101;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v91, v101, 24);
      uint64_t v54 = v101;
      if (!v101)
      {
LABEL_70:
        LODWORD(v90) = v47;
        int v50 = v107;
        goto LABEL_71;
      }
      uint64_t v49 = v100;
      uint64_t v48 = __dst;
    }
    memcpy(v48, v49, 24 * v54);
    goto LABEL_70;
  }
  uint64_t v21 = 0;
LABEL_113:
  mlir::Operation::erase((mlir::Operation *)v7);
LABEL_114:
  uint64_t v71 = v81;
  if (v81)
  {
    __int16 v72 = v82;
    unint64_t v73 = v81;
    if (v82 != v81)
    {
      do
      {
        uint64_t v74 = (void *)*(v72 - 11);
        if (v72 - 9 != v74) {
          free(v74);
        }
        uint64_t v75 = (void *)*(v72 - 13);
        *(v72 - 13) = 0;
        if (v75) {
          operator delete(v75);
        }
        v72 -= 16;
      }
      while (v72 != v71);
      unint64_t v73 = v81;
    }
    uint64_t v82 = v71;
    operator delete(v73);
  }
  return v21;
}

uint64_t anonymous namespace'::EncodingReader::parseVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 2);
  if (v4 == (unsigned __int8 *)(*(void *)this + *((void *)this + 1)))
  {
    char v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (*(void *)__dst) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v24)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v23;
        unint64_t v11 = __p;
        if (v23 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        uint64_t v23 = v9;
        operator delete(v11);
      }
      unsigned int v12 = v20;
      if (v20)
      {
        unint64_t v13 = v21;
        unint64_t v14 = v20;
        if (v21 != v20)
        {
          do
          {
            uint64_t v16 = (void *)*--v13;
            uint64_t v15 = v16;
            void *v13 = 0;
            if (v16) {
              operator delete[](v15);
            }
          }
          while (v13 != v12);
          unint64_t v14 = v20;
        }
        uint64_t v21 = v12;
        operator delete(v14);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
    if (!v8) {
      return 0;
    }
    unint64_t v5 = *a2;
    if (*a2) {
      goto LABEL_3;
    }
LABEL_26:
    if (v5)
    {
      unint64_t v6 = *(void *)__dst;
      goto LABEL_4;
    }
    return 0;
  }
  *((void *)this + 2) = v4 + 1;
  unint64_t v5 = *v4;
  *a2 = v5;
  if ((v5 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  unint64_t v6 = v5 >> 1;
LABEL_4:
  *a2 = v6;
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::sortUseListOrder(uint64_t a1, void *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  int64_t v105 = a2;
  __int16 v3 = (void *)*a2;
  if (!*a2 || !*v3) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 528);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 512);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v9 = *(void **)(v6 + 48 * v8);
    if (v9 == a2)
    {
      BOOL v10 = 1;
    }
    else
    {
      int v100 = 1;
      do
      {
        BOOL v10 = v9 != (void *)-4096;
        if (v9 == (void *)-4096) {
          break;
        }
        unsigned int v101 = v8 + v100++;
        unsigned int v8 = v101 & v7;
        unint64_t v9 = *(void **)(v6 + 48 * v8);
        BOOL v10 = 1;
      }
      while (v9 != a2);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 704);
  uint64_t v13 = *(unsigned int *)(a1 + 720);
  if (!v13)
  {
LABEL_14:
    uint64_t v16 = (uint64_t *)(v12 + 16 * v13);
    goto LABEL_15;
  }
  uint64_t v14 = v3[2];
  LODWORD(v15) = ((v14 >> 4) ^ (v14 >> 9)) & (v13 - 1);
  uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 != v14)
  {
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v15 + v18++;
      uint64_t v15 = v19 & (v13 - 1);
      uint64_t v17 = *(void *)(v12 + 16 * v15);
      if (v17 == v14)
      {
        uint64_t v16 = (uint64_t *)(v12 + 16 * v15);
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v20 = *((unsigned int *)v16 + 2);
  unint64_t v21 = mlir::OpOperand::getOperandNumber((unint64_t)v3) | (unint64_t)(v20 << 32);
  uint64_t v121 = (char *)&v123;
  int v123 = 0;
  unint64_t v124 = v21;
  uint64_t v122 = 0x300000001;
  uint64_t v22 = *(void **)*a2;
  if (!v22)
  {
    if (!v10) {
      goto LABEL_93;
    }
LABEL_38:
    uint64_t v48 = *(void *)(a1 + 512);
    unsigned int v49 = *(_DWORD *)(a1 + 528);
    if (v49)
    {
      unsigned int v50 = ((v105 >> 4) ^ (v105 >> 9)) & (v49 - 1);
      uint64_t v51 = v48 + 48 * v50;
      uint64_t v52 = *(void **)v51;
      if (*(void **)v51 == v105) {
        goto LABEL_45;
      }
      int v53 = 1;
      while (v52 != (void *)-4096)
      {
        unsigned int v54 = v50 + v53++;
        unsigned int v50 = v54 & (v49 - 1);
        uint64_t v51 = v48 + 48 * v50;
        uint64_t v52 = *(void **)v51;
        if (*(void **)v51 == v105) {
          goto LABEL_45;
        }
      }
    }
    uint64_t v51 = v48 + 48 * v49;
LABEL_45:
    long long __dst = v113;
    uint64_t v112 = 0x400000000;
    unint64_t v55 = *(unsigned int *)(v51 + 16);
    if (&__dst == (void **)(v51 + 8) || v55 == 0)
    {
      LODWORD(v55) = 0;
      char v114 = *(unsigned char *)(v51 + 40);
      uint64_t v108 = v110;
      unint64_t v109 = 0x400000000;
      uint64_t v57 = (void *)*v105;
      if (!*v105) {
        goto LABEL_64;
      }
      goto LABEL_51;
    }
    int64_t v64 = v113;
    unsigned int v65 = *(_DWORD *)(v51 + 16);
    if (v55 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v113, *(unsigned int *)(v51 + 16), 4);
      unsigned int v65 = *(_DWORD *)(v51 + 16);
      if (!v65) {
        goto LABEL_62;
      }
      int64_t v64 = __dst;
    }
    memcpy(v64, *(const void **)(v51 + 8), 4 * v65);
LABEL_62:
    LODWORD(v112) = v55;
    char v114 = *(unsigned char *)(v51 + 40);
    uint64_t v108 = v110;
    unint64_t v109 = 0x400000000;
    if (__dst == v113)
    {
      unsigned int v89 = v55;
      if (v55 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v55, 4), (unsigned int v89 = v112) != 0))
      {
        memcpy(v108, __dst, 4 * v89);
      }
      LODWORD(v109) = v55;
      LODWORD(v112) = 0;
      uint64_t v57 = (void *)*v105;
      if (!*v105)
      {
LABEL_64:
        unint64_t v58 = 0;
        if (!v114) {
          goto LABEL_65;
        }
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v108 = __dst;
      unint64_t v109 = __PAIR64__(HIDWORD(v112), v55);
      long long __dst = v113;
      uint64_t v112 = 0;
      uint64_t v57 = (void *)*v105;
      if (!*v105) {
        goto LABEL_64;
      }
    }
LABEL_51:
    unint64_t v58 = 0;
    do
    {
      ++v58;
      uint64_t v57 = (void *)*v57;
    }
    while (v57);
    if (!v114)
    {
LABEL_65:
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      unsigned int v104 = 0;
      if (v55)
      {
LABEL_66:
        uint64_t v66 = 0;
        BOOL v67 = (char *)v108;
        unint64_t v68 = (char *)v108 + 4 * v55;
        while (1)
        {
          if (v104)
          {
            unsigned int v69 = *(_DWORD *)v67;
            unsigned int v70 = (37 * *(_DWORD *)v67) & (v104 - 1);
            int v71 = *((_DWORD *)v102 + v70);
            if (*(_DWORD *)v67 == v71)
            {
              if (v70 != v104) {
                goto LABEL_115;
              }
              goto LABEL_68;
            }
            int v72 = 1;
            do
            {
              if (v71 == -1) {
                goto LABEL_67;
              }
              unsigned int v73 = v70 + v72++;
              unsigned int v70 = v73 & (v104 - 1);
              int v71 = *((_DWORD *)v102 + v70);
            }
            while (v69 != v71);
            if (v70 != v104) {
              goto LABEL_115;
            }
          }
LABEL_67:
          unsigned int v69 = *(_DWORD *)v67;
LABEL_68:
          v66 += v69;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)&v102, v67, (uint64_t)&v115);
          v67 += 4;
          if (v67 == v68)
          {
            if (v58 == v109) {
              goto LABEL_111;
            }
            goto LABEL_115;
          }
        }
      }
LABEL_110:
      uint64_t v66 = 0;
      if (!v58)
      {
LABEL_111:
        if (v66 == ((v58 - 1) * v58) >> 1)
        {
          int64_t v115 = v121;
          uint64_t v116 = (uint64_t)&v108;
          v117[0] = 1;
          uint64_t v118 = &v121[16 * v122];
          uint64_t v119 = &v108;
          char v120 = 1;
          llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(v106, (unsigned int **)&v115);
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)v106);
          if (v106[0] != &v107) {
            free(v106[0]);
          }
          mlir::Value::shuffleUseList(&v105, (unsigned int *)v108, v109);
        }
      }
LABEL_115:
      llvm::deallocate_buffer(v102, (void *)(4 * v104));
    }
LABEL_54:
    if (v55)
    {
      uint64_t v11 = 0;
      if (v108 != v110) {
        free(v108);
      }
      if (__dst != v113) {
        free(__dst);
      }
      goto LABEL_120;
    }
    llvm::SmallVector<unsigned int,4u>::SmallVector(&v115, v58);
    uint64_t v59 = v115;
    uint64_t v60 = v116;
    if (v116)
    {
      unint64_t v61 = (v116 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v61 < 7)
      {
        LODWORD(v62) = 0;
        int64_t v63 = v115;
LABEL_102:
        char v96 = &v59[v60];
        do
        {
          *v63++ = v62;
          LODWORD(v62) = v62 + 1;
        }
        while (v63 != v96);
        goto LABEL_104;
      }
      unint64_t v90 = v61 + 1;
      uint64_t v62 = (v61 + 1) & 0x7FFFFFFFFFFFFFF8;
      int64_t v63 = (char *)v115 + 4 * v62;
      int32x4_t v91 = (int32x4_t)xmmword_1810FFF10;
      long long v92 = (int32x4_t *)((char *)v115 + 16);
      v93.i64[0] = 0x400000004;
      v93.i64[1] = 0x400000004;
      v94.i64[0] = 0x800000008;
      v94.i64[1] = 0x800000008;
      uint64_t v95 = v62;
      do
      {
        v92[-1] = v91;
        *long long v92 = vaddq_s32(v91, v93);
        int32x4_t v91 = vaddq_s32(v91, v94);
        v92 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v90 != v62) {
        goto LABEL_102;
      }
    }
LABEL_104:
    if (v109)
    {
      unint64_t v97 = 0;
      uint64_t v98 = v108;
      do
      {
        v59[v98[v97]] = v98[v97 + 1];
        v97 += 2;
      }
      while (v97 < v109);
    }
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v108, (uint64_t)&v115);
    if (v115 != v117) {
      free(v115);
    }
    LODWORD(v55) = v109;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    unsigned int v104 = 0;
    if (v109) {
      goto LABEL_66;
    }
    goto LABEL_110;
  }
  int v23 = 1;
  uint64_t v24 = 1;
  do
  {
    uint64_t v25 = *(void *)(a1 + 704);
    uint64_t v26 = *(unsigned int *)(a1 + 720);
    if (v26)
    {
      uint64_t v27 = v22[2];
      LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == v27) {
        goto LABEL_24;
      }
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v26 - 1);
        uint64_t v30 = *(void *)(v25 + 16 * v28);
        if (v30 == v27)
        {
          uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
          goto LABEL_24;
        }
      }
    }
    uint64_t v29 = (uint64_t *)(v25 + 16 * v26);
LABEL_24:
    uint64_t v33 = *((unsigned int *)v29 + 2);
    unint64_t v34 = mlir::OpOperand::getOperandNumber((unint64_t)v22) | (unint64_t)(v33 << 32);
    BOOL v35 = v21 > v34;
    uint64_t v36 = v122;
    if (v122 >= (unint64_t)HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, &v123, v122 + 1, 16);
      uint64_t v36 = v122;
    }
    v23 &= v35;
    int v37 = &v121[16 * v36];
    *(void *)int v37 = v24;
    *((void *)v37 + 1) = v34;
    unint64_t v38 = (v122 + 1);
    LODWORD(v122) = v122 + 1;
    ++v24;
    uint64_t v22 = (void *)*v22;
    unint64_t v21 = v34;
  }
  while (v22);
  if (((v10 | v23 ^ 1) & 1) == 0) {
    goto LABEL_93;
  }
  if ((v23 & 1) == 0)
  {
    unint64_t v39 = 126 - 2 * __clz(v38);
    if (v38) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>((int *)v121, (int *)&v121[16 * v38], v40, 1);
  }
  if (v10) {
    goto LABEL_38;
  }
  uint64_t v41 = (unsigned int *)v121;
  uint64_t v42 = v122;
  int64_t v115 = v117;
  uint64_t v116 = 0xC00000000;
  if (v122 >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v122, 4);
    uint64_t v43 = v116;
    uint64_t v44 = (unsigned int *)v115;
    uint64_t v45 = (char *)v115 + 4 * v116;
    unint64_t v46 = (v42 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 < 0x18) {
      goto LABEL_36;
    }
LABEL_83:
    if (v45 >= (char *)&v41[4 * v46 + 2] || (int v47 = v41, v41 >= &v44[v43 + 1 + v46]))
    {
      unint64_t v74 = v46 + 1;
      uint64_t v75 = (v46 + 1) & 7;
      if (!v75) {
        uint64_t v75 = 8;
      }
      unint64_t v76 = v74 - v75;
      v45 += 4 * v76;
      int v47 = &v41[4 * v76];
      unint64_t v77 = (const double *)(v41 + 16);
      int64_t v78 = (int32x4_t *)&v44[v43 + 4];
      do
      {
        long long v79 = v77 - 8;
        unsigned long long v80 = (unsigned __int128)vld2q_f64(v79);
        uint64_t v81 = v77 - 4;
        unsigned long long v82 = (unsigned __int128)vld2q_f64(v81);
        uint64_t v83 = v77 + 16;
        unsigned long long v85 = (unsigned __int128)vld2q_f64(v77);
        uint64_t v84 = v77 + 4;
        unsigned long long v86 = (unsigned __int128)vld2q_f64(v84);
        v78[-1] = vuzp1q_s32((int32x4_t)v80, (int32x4_t)v82);
        int32x4_t *v78 = vuzp1q_s32((int32x4_t)v85, (int32x4_t)v86);
        v78 += 2;
        unint64_t v77 = v83;
        v76 -= 8;
      }
      while (v76);
    }
    goto LABEL_89;
  }
  if (v122)
  {
    uint64_t v43 = 0;
    uint64_t v44 = (unsigned int *)v117;
    uint64_t v45 = v117;
    unint64_t v46 = (v122 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v46 >= 0x18) {
      goto LABEL_83;
    }
LABEL_36:
    int v47 = v41;
    do
    {
LABEL_89:
      uint64_t v87 = *(void *)v47;
      v47 += 4;
      *(_DWORD *)uint64_t v45 = v87;
      v45 += 4;
    }
    while (v47 != &v41[4 * v42]);
    int v88 = v116;
  }
  else
  {
    int v88 = 0;
    uint64_t v44 = (unsigned int *)v117;
  }
  LODWORD(v116) = v88 + v42;
  mlir::Value::shuffleUseList(&v105, v44, (v88 + v42));
  if (v115 != v117) {
    free(v115);
  }
LABEL_93:
  uint64_t v11 = 1;
LABEL_120:
  if (v121 != (char *)&v123) {
    free(v121);
  }
  return v11;
}

void *llvm::SmallVector<unsigned int,4u>::SmallVector(void *a1, unint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  if (a2)
  {
    if (a2 < 5)
    {
      uint64_t v4 = 0;
      unint64_t v5 = a2;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, a2, 4);
      uint64_t v4 = *((unsigned int *)a1 + 2);
      unint64_t v5 = a2 - v4;
      if (a2 == v4) {
        goto LABEL_7;
      }
    }
    bzero((void *)(*a1 + 4 * v4), 4 * v5);
LABEL_7:
    *((_DWORD *)a1 + 2) = a2;
  }
  return a1;
}

void *llvm::SmallVector<unsigned int,4u>::SmallVector<llvm::mapped_iterator<std::pair<unsigned int,unsigned long long> *,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_1,unsigned int>>(void *a1, unsigned int **a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  __int16 v3 = *a2;
  uint64_t v4 = (uint64_t *)a2[1];
  unint64_t v5 = a2[3];
  uint64_t v6 = (char *)v5 - (char *)*a2;
  if ((unint64_t)v6 < 0x41)
  {
    unsigned int v7 = 0;
    if (v3 == v5) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 4, 4);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (v3 == v5) {
      goto LABEL_8;
    }
  }
  unsigned int v8 = (_DWORD *)(*a1 + 4 * v7);
  uint64_t v9 = *v4;
  do
  {
    unsigned int v10 = *v3;
    v3 += 4;
    *v8++ = *(_DWORD *)(v9 + 4 * v10);
  }
  while (v3 != v5);
  unsigned int v7 = *((_DWORD *)a1 + 2);
LABEL_8:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 4);
  return a1;
}

uint64_t mlir::BytecodeReader::Impl::parseBlockHeader(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(a3 + 112);
    return 0;
  uint64_t v7 = *v6;
  uint64_t *v6 = (unint64_t)*v6 >> 1;
  if ((v7 & 1) == 0) {
    return 1;
  }
  uint64_t v9 = *(void *)(a3 + 104);
  unsigned int v10 = v9 ? (void *)(v9 - 8) : 0;
  unint64_t v28 = 0;
    return 0;
  BOOL v35 = (llvm *)&v37;
  uint64_t v36 = 0x600000000;
  int v32 = v34;
  uint64_t v33 = 0x600000000;
  unint64_t v12 = v28;
  if (v28 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v28, 8);
    if (v12 > HIDWORD(v33)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v12, 8);
    }
  }
  uint64_t v13 = mlir::UnknownLoc::get(**(mlir::UnknownLoc ***)a1, v11);
  if (!v12)
  {
LABEL_27:
    mlir::ValueRange::ValueRange(v31, (uint64_t)v35, v36);
    mlir::Block::addArguments(v10, v31[0], v31[1], (uint64_t)v32, v33);
    mlir::ValueRange::ValueRange(v30, v10[6], (uint64_t)(v10[7] - v10[6]) >> 3);
    char v22 = mlir::BytecodeReader::Impl::defineValues((void *)a1, *((void *)this + 3), v30[0], v30[1]);
    int v23 = v32;
    if (v32 == v34) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v14 = v13;
  while (1)
  {
    uint64_t v27 = v14;
    if (*(void *)(a1 + 248) < 4uLL) {
      break;
    }
    unint64_t v29 = 0;
      goto LABEL_34;
    char v15 = v29;
    if (!v16) {
      goto LABEL_34;
    }
    uint64_t v17 = v16;
    if (v15) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v19 = v36;
    if (v36 >= (unint64_t)HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, &v37, v36 + 1, 8);
      uint64_t v19 = v36;
    }
    *((void *)v35 + v19) = v17;
    LODWORD(v36) = v36 + 1;
    uint64_t v20 = v27;
    uint64_t v21 = v33;
    if (v33 >= (unint64_t)HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
      uint64_t v21 = v33;
    }
    *((void *)v32 + v21) = v20;
    LODWORD(v33) = v33 + 1;
    if (!--v12) {
      goto LABEL_27;
    }
  }
  unint64_t v29 = 0;
  {
    if (v18)
    {
      uint64_t v17 = v18;
LABEL_21:
      if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(a1, this, &v27)) {
        goto LABEL_34;
      }
      goto LABEL_22;
    }
  }
LABEL_34:
  char v22 = 0;
  int v23 = v32;
  if (v32 != v34) {
LABEL_28:
  }
    free(v23);
LABEL_29:
  if (v35 != (llvm *)&v37) {
    free(v35);
  }
  if (!v22) {
    return 0;
  }
  if (*(void *)(a1 + 248) < 3uLL) {
    return 1;
  }
  LOBYTE(v31[0]) = 0;
    return 0;
  if (LOBYTE(v31[0]))
  {
    uint64_t v24 = *(void *)(a3 + 104);
    if (v24) {
      uint64_t v25 = v24 - 8;
    }
    else {
      uint64_t v25 = 0;
    }
    mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)&v35, this, ((*(void *)(v25 + 56) - *(void *)(v25 + 48)) >> 3));
  }
  return 1;
}

uint64_t mlir::BytecodeReader::Impl::parseRegions(unsigned int *a1, void **a2, uint64_t a3)
{
  uint64_t v405 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
LABEL_444:
    if (*(unsigned char *)(a3 + 120))
    {
      unint64_t v256 = (void *)*((void *)a1 + 86);
      unint64_t v257 = (void **)(v256 - 7);
      BOOL v258 = (void *)*(v256 - 4);
      if (v258 != v256 - 2) {
        free(v258);
      }
      unint64_t v259 = *v257;
      if (*v257)
      {
        *(v256 - 6) = v259;
        operator delete(v259);
      }
      *((void *)a1 + 86) = v257;
    }
    unint64_t v260 = a2[1];
    unint64_t v261 = (char *)*(v260 - 11);
    if (v261 != (char *)(v260 - 9)) {
      free(v261);
    }
    unint64_t v262 = (void *)*(v260 - 13);
    *(v260 - 13) = 0;
    if (v262) {
      operator delete(v262);
    }
    a2[1] = v260 - 16;
    return 1;
  }
  unint64_t v336 = v372;
  uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)(a1 + 22);
  uint64_t v341 = (void **)(a1 + 106);
  std::string::size_type v342 = (std::string::size_type)(a1 + 134);
  uint64_t v346 = (std::string::size_type *)(a1 + 62);
  long long v345 = &v395;
  p_dst = &__dst;
  __src = &v393[16];
  v340 = (void **)(a1 + 84);
  uint64_t v333 = &v379;
  uint64_t v320 = &v394;
  unsigned int v329 = &v373;
  v328 = &v376;
  v325 = &v368;
  uint64_t v324 = &v370;
  long long v323 = &v386;
  uint64_t v330 = &v390;
  v331 = &v393[8];
  v337 = &v397;
  std::string::size_type v338 = (void **)(a1 + 128);
  v334 = v399;
  long long v321 = (void **)(a1 + 6);
  unsigned int v322 = &v389;
  __int16 v319 = (void **)(a1 + 12);
  char v327 = (void **)(a1 + 170);
  std::string::size_type v347 = (std::string::size_type)(a1 + 22);
  while (!*(void *)(a3 + 104))
  {
    if (!mlir::BytecodeReader::Impl::parseRegion((uint64_t)a1, a3)) {
      return 0;
    }
    uint64_t v8 = *(void *)a3;
    if (**(void **)a3 != *(void *)a3) {
      break;
    }
LABEL_443:
    uint64_t v255 = v8 + 24;
    *(void *)a3 = v255;
    if (v255 == *(void *)(a3 + 8)) {
      goto LABEL_444;
    }
  }
  v332 = a2;
  uint64_t v9 = *(_anonymous_namespace_::EncodingReader **)(a3 + 16);
  while (1)
  {
    uint64_t v10 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = v10 - 1;
    uint64_t v11 = v3;
    if (v10) {
      break;
    }
LABEL_435:
    uint64_t v8 = *(void *)(*(void *)(a3 + 104) + 8);
    *(void *)(a3 + 104) = v8;
    if (v8 == *(void *)a3)
    {
      *(void *)(a3 + 104) = 0;
      unint64_t v250 = (void **)*((void *)a1 + 86);
      uint64_t v251 = (uint64_t)*(v250 - 7);
      unint64_t v252 = ((uint64_t)*(v250 - 6) - v251) >> 3;
      uint64_t v253 = *(unsigned int *)(a3 + 32);
      unint64_t v254 = v252 - v253;
      if (v252 >= v253)
      {
        a2 = v332;
        if (v252 > v254) {
          *(v250 - 6) = (void *)(v251 + 8 * v254);
        }
      }
      else
      {
        std::vector<mlir::Value>::__append(v250 - 7, -v253);
        uint64_t v8 = *(void *)a3;
        a2 = v332;
      }
      --*((_DWORD *)v250 - 6);
      uint64_t v3 = v11;
      goto LABEL_443;
    }
    uint64_t v3 = v11;
    uint64_t v11 = 0;
    if (!mlir::BytecodeReader::Impl::parseBlockHeader((uint64_t)a1, v9, a3)) {
      return v11;
    }
  }
  while (1)
  {
    v348.__r_.__value_.__r.__words[0] = 0;
      return 0;
    uint64_t v12 = *((void *)v9 + 3);
    uint64_t v13 = (void *)*((void *)a1 + 45);
    std::string::size_type v14 = a1[92];
    *(void *)v393 = "operation name";
    *(void *)&v393[8] = 14;
    v355 = (mlir::Region *)v348.__r_.__value_.__r.__words[0];
    if (v348.__r_.__value_.__r.__words[0] >= v14)
    {
      char v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v366);
      if (v366) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v366);
      }
      if (v384)
      {
        uint64_t v18 = (void **)__p;
        if (__p)
        {
          uint64_t v19 = v383;
          uint64_t v20 = __p;
          if (v383 != __p)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p;
          }
          v383 = v18;
          operator delete(v20);
        }
        uint64_t v21 = v380;
        if (v380)
        {
          char v22 = v381;
          int v23 = v380;
          if (v381 != v380)
          {
            do
            {
              uint64_t v25 = (void *)*--v22;
              uint64_t v24 = v25;
              void *v22 = 0;
              if (v25) {
                operator delete[](v24);
              }
            }
            while (v22 != v21);
            int v23 = v380;
          }
          v381 = v21;
          operator delete(v23);
        }
        if (v369 != v336) {
          free(v369);
        }
      }
      if (!v17) {
        return 0;
      }
      char v15 = 0;
      unsigned int v16 = MEMORY[0x28];
      if (MEMORY[8]) {
        goto LABEL_48;
      }
    }
    else
    {
      char v15 = &v13[6 * v348.__r_.__value_.__r.__words[0]];
      unsigned int v16 = *((unsigned __int16 *)v15 + 20);
      if (*((unsigned char *)v15 + 8)) {
        goto LABEL_48;
      }
    }
    *(void *)v393 = &unk_1EC997A88;
    *(void *)&v393[8] = v7;
    *(void *)&v393[16] = v342;
    *(void *)&long long v394 = v341;
    *((void *)&v394 + 1) = v340;
    v395 = v9;
    uint64_t v396 = (uint64_t)v346;
      return 0;
    uint64_t v26 = (void *)v15[4];
    if (v26)
    {
      uint64_t v27 = v15[2];
      WORD4(v357) = 773;
      unint64_t v29 = *(mlir::Region **)(v27 + 24);
      uint64_t v28 = *(void *)(v27 + 32);
      v355 = v29;
      *(void *)&long long v356 = v28;
      *((void *)&v356 + 1) = ".";
      uint64_t v30 = v15[3];
      v366 = &v355;
      uint64_t v368 = v30;
      v369 = v26;
      LOWORD(v370) = 1282;
      llvm::Twine::str((llvm::Twine *)&v366, &v348);
      uint64_t v31 = **(void **)a1;
      if (*((unsigned char *)v15 + 8)) {
        *((unsigned char *)v15 + 8) = 0;
      }
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v32 = &v348;
      }
      else {
        int v32 = (std::string *)v348.__r_.__value_.__r.__words[0];
      }
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v348.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v348.__r_.__value_.__l.__size_;
      }
      mlir::OperationName::OperationName(v15, v32, size, v31);
      *((unsigned char *)v15 + 8) = 1;
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v348.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      unint64_t v34 = (void *)v15[2];
      if (*v34)
      {
        mlir::emitError(*((void *)a1 + 1), (uint64_t)&v366);
        if (v366)
        {
          LODWORD(v355) = 3;
          *(void *)&long long v356 = "has an empty opname for dialect '";
          *((void *)&v356 + 1) = 33;
          uint64_t v291 = &v355;
          v292 = (char *)v369;
          if (v370 >= v371)
          {
            unint64_t v313 = v370 + 1;
            if (v369 <= &v355 && (char *)v369 + 24 * v370 > (char *)&v355)
            {
              int64_t v317 = (char *)&v355 - (unsigned char *)v369;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v369, v372, v313, 24);
              v292 = (char *)v369;
              uint64_t v291 = (mlir::Region **)((char *)v369 + v317);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v369, v372, v313, 24);
              uint64_t v291 = &v355;
              v292 = (char *)v369;
            }
          }
          v293 = &v292[24 * v370];
          long long v294 = *(_OWORD *)v291;
          *((void *)v293 + 2) = v291[2];
          *(_OWORD *)v293 = v294;
          ++v370;
          if (v366)
          {
            uint64_t v295 = v15[2];
            WORD4(v357) = 261;
            v297 = *(mlir::Region **)(v295 + 24);
            uint64_t v296 = *(void *)(v295 + 32);
            v355 = v297;
            *(void *)&long long v356 = v296;
            mlir::Diagnostic::operator<<((uint64_t)&v367, (const void ***)&v355);
            if (v366)
            {
              LODWORD(v355) = 3;
              *(void *)&long long v356 = "'\n";
              *((void *)&v356 + 1) = 2;
              uint64_t v298 = &v355;
              v299 = (char *)v369;
              if (v370 >= v371)
              {
                unint64_t v314 = v370 + 1;
                if (v369 <= &v355 && (char *)v369 + 24 * v370 > (char *)&v355)
                {
                  int64_t v318 = (char *)&v355 - (unsigned char *)v369;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v369, v372, v314, 24);
                  v299 = (char *)v369;
                  uint64_t v298 = (mlir::Region **)((char *)v369 + v318);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v369, v372, v314, 24);
                  uint64_t v298 = &v355;
                  v299 = (char *)v369;
                }
              }
              v300 = &v299[24 * v370];
              long long v301 = *(_OWORD *)v298;
              *((void *)v300 + 2) = v298[2];
              *(_OWORD *)v300 = v301;
              ++v370;
              if (v366) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v366);
              }
            }
          }
        }
        if (v384)
        {
          v302 = (void **)__p;
          if (__p)
          {
            std::string::size_type v303 = v383;
            char v304 = __p;
            if (v383 != __p)
            {
              do
                std::string::size_type v303 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v303 - 1);
              while (v303 != v302);
              char v304 = __p;
            }
            v383 = v302;
            operator delete(v304);
          }
          v305 = v380;
          if (v380)
          {
            v306 = v381;
            long long v307 = v380;
            if (v381 != v380)
            {
              do
              {
                __int16 v309 = (void *)*--v306;
                BOOL v308 = v309;
                void *v306 = 0;
                if (v309) {
                  operator delete[](v308);
                }
              }
              while (v306 != v305);
              long long v307 = v380;
            }
            v381 = v305;
            operator delete(v307);
          }
          if (v369 != v372) {
            free(v369);
          }
        }
        return 0;
      }
      uint64_t v35 = **(void **)a1;
      if (*((unsigned char *)v15 + 8)) {
        *((unsigned char *)v15 + 8) = 0;
      }
      mlir::OperationName::OperationName(v15, v34[3], v34[4], v35);
      *((unsigned char *)v15 + 8) = 1;
    }
LABEL_48:
    uint64_t v36 = *v15;
    int v37 = (char *)*((void *)v9 + 2);
    uint64_t v38 = (char *)(*(void *)v9 + *((void *)v9 + 1));
    unsigned int v344 = v11;
    if (v37 == v38)
    {
      char v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v366);
      if (v366) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v366);
      }
      if (v384)
      {
        uint64_t v41 = (void **)__p;
        if (__p)
        {
          uint64_t v42 = v383;
          uint64_t v43 = __p;
          if (v383 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            uint64_t v43 = __p;
          }
          v383 = v41;
          operator delete(v43);
        }
        uint64_t v44 = v380;
        if (v380)
        {
          uint64_t v45 = v381;
          unint64_t v46 = v380;
          if (v381 != v380)
          {
            do
            {
              uint64_t v48 = (void *)*--v45;
              int v47 = v48;
              void *v45 = 0;
              if (v48) {
                operator delete[](v47);
              }
            }
            while (v45 != v44);
            unint64_t v46 = v380;
          }
          v381 = v44;
          operator delete(v46);
          uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
        }
        if (v369 != v336) {
          free(v369);
        }
      }
      if (!v40) {
        return 0;
      }
      char v39 = 0;
    }
    else
    {
      *((void *)v9 + 2) = v37 + 1;
      char v39 = *v37;
    }
    uint64_t v352 = 0;
    if (!mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>((uint64_t)a1, v9, &v352)) {
      return 0;
    }
    mlir::OperationState::OperationState(&v366, v352, v36);
    if ((v39 & 1) == 0) {
      goto LABEL_110;
    }
    *(void *)v393 = 0;
      goto LABEL_474;
    v348.__r_.__value_.__r.__words[0] = v50;
    if (!v50) {
      goto LABEL_474;
    }
    uint64_t v51 = *(void **)(*(void *)v50 + 136);
    if (v51 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = 0;
    }
    if (v51 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    {
      uint64_t v52 = v50;
    }
    else
    {
      v355 = (mlir::Region *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DictionaryAttr]";
      *(void *)&long long v356 = 70;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v355, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v356 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v356;
      }
      unint64_t v55 = (char *)v355 + v54;
      unint64_t v56 = v356 - v54;
      uint64_t v57 = 18;
      if (v56 < 0x12) {
        uint64_t v57 = v56;
      }
      unint64_t v58 = (mlir::Region *)&v55[v57];
      unint64_t v59 = v56 - v57;
      if (v59 >= v59 - 1) {
        --v59;
      }
      v355 = v58;
      *(void *)&long long v356 = v59;
      char v60 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
      if (*(void *)v393) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
      }
      if (v404)
      {
        unint64_t v61 = (void **)v402;
        if (v402)
        {
          uint64_t v62 = v403;
          int64_t v63 = v402;
          if (v403 != v402)
          {
            do
              uint64_t v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
            while (v62 != v61);
            int64_t v63 = v402;
          }
          v403 = v61;
          operator delete(v63);
        }
        int64_t v64 = v400;
        if (v400)
        {
          unsigned int v65 = v401;
          uint64_t v66 = v400;
          if (v401 != v400)
          {
            do
            {
              unint64_t v68 = (void *)*--v65;
              BOOL v67 = v68;
              void *v65 = 0;
              if (v68) {
                operator delete[](v67);
              }
            }
            while (v65 != v64);
            uint64_t v66 = v400;
          }
          v401 = v64;
          operator delete(v66);
        }
        if ((void **)v394 != v345) {
          free((void *)v394);
        }
      }
      if (!v60) {
        goto LABEL_474;
      }
    }
    mlir::NamedAttrList::NamedAttrList(v393, v52);
    unsigned int v69 = *(void **)v393;
    unsigned int v49 = (const mlir::OperationState *)__src;
    if (*(void **)v393 != __src)
    {
      if (__dst != v333)
      {
        free(__dst);
        unsigned int v49 = (const mlir::OperationState *)__src;
        unsigned int v69 = *(void **)v393;
      }
      long long __dst = v69;
      uint64_t v378 = *(void *)&v393[8];
      *(void *)v393 = v49;
      *(void *)&v393[8] = 0;
      uint64_t v385 = v398;
      goto LABEL_110;
    }
    int v85 = *(_DWORD *)&v393[8];
    uint64_t v86 = v378;
    if (v378 < *(_DWORD *)&v393[8])
    {
      if (HIDWORD(v378) >= *(_DWORD *)&v393[8])
      {
        if (v378)
        {
          memmove(__dst, __src, 16 * v378);
          goto LABEL_161;
        }
      }
      else
      {
        LODWORD(v378) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_dst, v333, *(unsigned int *)&v393[8], 16);
      }
      uint64_t v86 = 0;
LABEL_161:
      if (v86 != *(unsigned int *)&v393[8]) {
        memcpy((char *)__dst + 16 * v86, (const void *)(*(void *)v393 + 16 * v86), 16 * *(unsigned int *)&v393[8] - 16 * v86);
      }
      LODWORD(v378) = v85;
      unsigned int v49 = (const mlir::OperationState *)__src;
      *(_DWORD *)&v393[8] = 0;
      uint64_t v95 = *(void **)v393;
      uint64_t v385 = v398;
      if (*(void **)v393 != __src) {
        goto LABEL_109;
      }
      goto LABEL_110;
    }
    if (*(_DWORD *)&v393[8])
    {
      memmove(__dst, __src, 16 * *(unsigned int *)&v393[8]);
      unsigned int v49 = (const mlir::OperationState *)__src;
    }
    LODWORD(v378) = v85;
    *(_DWORD *)&v393[8] = 0;
    uint64_t v95 = *(void **)v393;
    uint64_t v385 = v398;
    if (*(const mlir::OperationState **)v393 != v49) {
LABEL_109:
    }
      free(v95);
LABEL_110:
    if ((v39 & 0x40) != 0)
    {
      if (v16 <= 0xFF)
      {
        uint64_t v272 = *((void *)a1 + 1);
        WORD4(v357) = 259;
        mlir::emitError(v272, (uint64_t)&v355, (uint64_t)v393);
        if (*(void *)v393)
        {
          std::string::size_type v273 = *v346;
          LODWORD(v348.__r_.__value_.__l.__data_) = 5;
          v348.__r_.__value_.__l.__size_ = v273;
          int64_t v274 = &v348;
          uint64_t v275 = v394;
          if (DWORD2(v394) >= HIDWORD(v394))
          {
            unint64_t v310 = DWORD2(v394) + 1;
            if ((unint64_t)v394 <= (unint64_t)&v348
              && (unint64_t)v394 + 24 * DWORD2(v394) > (unint64_t)&v348)
            {
              v315 = (char *)&v348 - v394;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v310, 24);
              uint64_t v275 = v394;
              int64_t v274 = (std::string *)&v315[v394];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v310, 24);
              int64_t v274 = &v348;
              uint64_t v275 = v394;
            }
          }
          uint64_t v276 = v275 + 24 * DWORD2(v394);
          long long v277 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
          *(void *)(v276 + 16) = *((void *)&v274->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v276 = v277;
          uint64_t v278 = ++DWORD2(v394);
          if (*(void *)v393)
          {
            LODWORD(v348.__r_.__value_.__l.__data_) = 3;
            v348.__r_.__value_.__l.__size_ = (std::string::size_type)" with properties.";
            v348.__r_.__value_.__r.__words[2] = 17;
            int64_t v279 = &v348;
            uint64_t v280 = v394;
            if (v278 >= HIDWORD(v394))
            {
              unint64_t v311 = v278 + 1;
              BOOL v312 = (unint64_t)v394 + 24 * v278 > (unint64_t)&v348;
              if ((unint64_t)v394 <= (unint64_t)&v348 && v312)
              {
                uint64_t v316 = (char *)&v348 - v394;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v311, 24);
                uint64_t v280 = v394;
                int64_t v279 = (std::string *)&v316[v394];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v320, v345, v311, 24);
                int64_t v279 = &v348;
                uint64_t v280 = v394;
              }
            }
            uint64_t v281 = v280 + 24 * DWORD2(v394);
            long long v282 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
            *(void *)(v281 + 16) = *((void *)&v279->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v281 = v282;
            ++DWORD2(v394);
            if (*(void *)v393) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
            }
          }
        }
        if (v404)
        {
          int64_t v283 = (void **)v402;
          if (v402)
          {
            unint64_t v284 = v403;
            unint64_t v285 = v402;
            if (v403 != v402)
            {
              do
                unint64_t v284 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v284 - 1);
              while (v284 != v283);
              unint64_t v285 = v402;
            }
            v403 = v283;
            operator delete(v285);
          }
          unint64_t v286 = v400;
          if (v400)
          {
            uint64_t v287 = v401;
            long long v288 = v400;
            if (v401 != v400)
            {
              do
              {
                long long v290 = (void *)*--v287;
                int v289 = v290;
                *uint64_t v287 = 0;
                if (v290) {
                  operator delete[](v289);
                }
              }
              while (v287 != v286);
              long long v288 = v400;
            }
            v401 = v286;
            operator delete(v288);
          }
          if ((void **)v394 != v345) {
            free((void *)v394);
          }
        }
        goto LABEL_474;
      }
      v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EC997A88;
      v348.__r_.__value_.__l.__size_ = v347;
      v348.__r_.__value_.__r.__words[2] = v342;
      *(void *)&long long v349 = v341;
      *((void *)&v349 + 1) = v340;
      v350 = v9;
      v351 = v346;
      unsigned int v70 = (void *)*((void *)a1 + 1);
      unint64_t v361 = 0;
        goto LABEL_474;
      if (v361 >= a1[156])
      {
        unint64_t v362 = (unint64_t)"Properties idx out-of-bound for ";
        __int16 v364 = 259;
        (*(void (**)(unsigned char *__return_ptr, std::string *, unint64_t *))(v348.__r_.__value_.__r.__words[0]
                                                                                       + 16))(v393, &v348, &v362);
        v355 = *(mlir::Region **)(v36 + 8);
        uint64_t AttrData = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
        if (*(void *)v393)
        {
          WORD4(v357) = 261;
          v355 = AttrData;
          *(void *)&long long v356 = v76;
          mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)&v355);
        }
        char v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
        if (*(void *)v393) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
        }
        if (v404)
        {
          unint64_t v77 = (void **)v402;
          if (v402)
          {
            int64_t v78 = v403;
            long long v79 = v402;
            if (v403 != v402)
            {
              do
                int64_t v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
              while (v78 != v77);
              long long v79 = v402;
            }
            v403 = v77;
            operator delete(v79);
          }
          unsigned long long v80 = v400;
          if (!v400) {
            goto LABEL_184;
          }
          uint64_t v81 = v401;
          unsigned long long v82 = v400;
          if (v401 == v400) {
            goto LABEL_183;
          }
          do
          {
            uint64_t v84 = (void *)*--v81;
            uint64_t v83 = v84;
            void *v81 = 0;
            if (v84) {
              operator delete[](v83);
            }
          }
          while (v81 != v80);
          goto LABEL_182;
        }
      }
      else
      {
        unint64_t v71 = *((void *)a1 + 76);
        if (v361 >= v71)
        {
          unint64_t v362 = (unint64_t)"Properties offset out-of-bound for ";
          __int16 v364 = 259;
          (*(void (**)(unsigned char *__return_ptr, std::string *, unint64_t *))(v348.__r_.__value_.__r.__words[0]
                                                                                         + 16))(v393, &v348, &v362);
          v355 = *(mlir::Region **)(v36 + 8);
          uint64_t v87 = (mlir::Region *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v355);
          if (*(void *)v393)
          {
            WORD4(v357) = 261;
            v355 = v87;
            *(void *)&long long v356 = v88;
            mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)&v355);
          }
          char v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
          if (*(void *)v393) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
          }
          if (v404)
          {
            unsigned int v89 = (void **)v402;
            if (v402)
            {
              unint64_t v90 = v403;
              int32x4_t v91 = v402;
              if (v403 != v402)
              {
                do
                  unint64_t v90 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v90 - 1);
                while (v90 != v89);
                int32x4_t v91 = v402;
              }
              v403 = v89;
              operator delete(v91);
            }
            unsigned long long v80 = v400;
            if (!v400) {
              goto LABEL_184;
            }
            long long v92 = v401;
            unsigned long long v82 = v400;
            if (v401 == v400) {
              goto LABEL_183;
            }
            do
            {
              int32x4_t v94 = (void *)*--v92;
              int32x4_t v93 = v94;
              *long long v92 = 0;
              if (v94) {
                operator delete[](v93);
              }
            }
            while (v92 != v80);
            goto LABEL_182;
          }
        }
        else
        {
          uint64_t v72 = *(void *)(*((void *)a1 + 77) + 8 * v361);
          v355 = (mlir::Region *)(*((void *)a1 + 75) + v72);
          *(void *)&long long v356 = v71 - v72;
          *((void *)&v356 + 1) = v355;
          *(void *)&long long v357 = v70;
          *(_OWORD *)&v393[8] = *(_OWORD *)&v348.__r_.__value_.__r.__words[1];
          long long v394 = v349;
          *(void *)v393 = &unk_1EC997A88;
          v395 = &v355;
          uint64_t v396 = (uint64_t)v351;
          v353[0] = 0;
          unint64_t v362 = 0;
          uint64_t v363 = 0;
          {
            goto LABEL_474;
          }
          v360[0] = v362;
          v360[1] = v363;
          v360[2] = v362;
          v360[3] = v70;
          v355 = (mlir::Region *)&unk_1EC997A88;
          long long v356 = *(_OWORD *)&v348.__r_.__value_.__r.__words[1];
          long long v357 = v349;
          v358 = (_anonymous_namespace_::EncodingReader *)v360;
          v359 = v351;
          unsigned int v73 = (uint64_t (**)(mlir::Region **, mlir::Region ***))mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v36 + 32);
          if (v73)
          {
            char v74 = (*v73)(&v355, &v366);
            goto LABEL_186;
          }
          if (*(_UNKNOWN **)(v36 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            long long v212 = (_anonymous_namespace_::AttrTypeReader *)v356;
            *(void *)v393 = 0;
            {
              char v74 = v392 != 0;
            }
            else
            {
              char v74 = 0;
            }
            goto LABEL_186;
          }
          v353[0] = (unint64_t)"has properties but missing BytecodeOpInterface for ";
          __int16 v354 = 259;
          unint64_t v362 = *(void *)(v36 + 8);
          unint64_t v96 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v362);
          if (*(void *)v393)
          {
            __int16 v364 = 261;
            unint64_t v362 = v96;
            uint64_t v363 = v97;
            mlir::Diagnostic::operator<<((uint64_t)v331, (const void ***)&v362);
          }
          char v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
          if (*(void *)v393) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
          }
          if (v404)
          {
            uint64_t v98 = (void **)v402;
            if (v402)
            {
              int v99 = v403;
              int v100 = v402;
              if (v403 != v402)
              {
                do
                  int v99 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v99 - 1);
                while (v99 != v98);
                int v100 = v402;
              }
              v403 = v98;
              operator delete(v100);
            }
            unsigned long long v80 = v400;
            if (!v400) {
              goto LABEL_184;
            }
            unsigned int v101 = v401;
            unsigned long long v82 = v400;
            if (v401 == v400)
            {
LABEL_183:
              v401 = v80;
              operator delete(v82);
LABEL_184:
              if ((void **)v394 != v345) {
                free((void *)v394);
              }
              goto LABEL_186;
            }
            do
            {
              uint64_t v103 = (void *)*--v101;
              uint64_t v102 = v103;
              void *v101 = 0;
              if (v103) {
                operator delete[](v102);
              }
            }
            while (v101 != v80);
LABEL_182:
            unsigned long long v82 = v400;
            goto LABEL_183;
          }
        }
      }
LABEL_186:
      if (!v74) {
        goto LABEL_474;
      }
    }
    unsigned int v104 = (_anonymous_namespace_::AttrTypeReader *)v347;
    if ((v39 & 2) != 0)
    {
      v355 = 0;
        goto LABEL_474;
      int64_t v105 = v355;
      unint64_t v106 = v374;
      if (v355 != (mlir::Region *)v374)
      {
        if ((unint64_t)v355 >= v374)
        {
          if ((unint64_t)v355 > v375)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v329, v328, (unint64_t)v355, 8);
            unint64_t v106 = v374;
          }
          if (v105 != (mlir::Region *)v106) {
            bzero((void *)(v373 + 8 * v106), 8 * ((void)v105 - v106));
          }
        }
        unsigned int v374 = v105;
      }
      if ((int)v105 >= 1) {
        break;
      }
    }
LABEL_201:
    if ((v39 & 4) != 0)
    {
      v353[0] = 0;
        goto LABEL_474;
      unint64_t v110 = v353[0];
      uint64_t v111 = v369;
      if (v353[0] != v369)
      {
        if (v353[0] >= v369)
        {
          if (v353[0] > HIDWORD(v369))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v325, v324, v353[0], 8);
            uint64_t v111 = v369;
          }
          if (v110 != v111) {
            bzero((void *)(v368 + 8 * v111), 8 * (v110 - v111));
          }
        }
        LODWORD(v369) = v110;
      }
      if ((int)v110 >= 1)
      {
        uint64_t v112 = 0;
        while (1)
        {
          int v113 = (void *)*((void *)a1 + 86);
          unint64_t v362 = 0;
            break;
          unint64_t v114 = v362;
          unsigned int v49 = (const mlir::OperationState *)*((void *)v9 + 3);
          uint64_t v116 = *(v113 - 7);
          uint64_t v115 = *(v113 - 6);
          v355 = (mlir::Region *)"value";
          *(void *)&long long v356 = 5;
          v348.__r_.__value_.__r.__words[0] = v362;
          if (v362 >= (v115 - v116) >> 3)
          {
            mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
            if (*(void *)v393) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
            }
            if (v404)
            {
              BOOL v263 = (void **)v402;
              if (v402)
              {
                unint64_t v264 = v403;
                unint64_t v265 = v402;
                if (v403 != v402)
                {
                  do
                    unint64_t v264 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v264 - 1);
                  while (v264 != v263);
                  unint64_t v265 = v402;
                }
                v403 = v263;
                operator delete(v265);
              }
              unint64_t v266 = v400;
              if (v400)
              {
                unint64_t v267 = v401;
                int64_t v268 = v400;
                if (v401 != v400)
                {
                  do
                  {
                    std::string::size_type v270 = (void *)*--v267;
                    v269 = v270;
                    *unint64_t v267 = 0;
                    if (v270) {
                      operator delete[](v269);
                    }
                  }
                  while (v267 != v266);
                  int64_t v268 = v400;
                }
                v401 = v266;
                operator delete(v268);
              }
              if ((void **)v394 != v345) {
                free((void *)v394);
              }
            }
            break;
          }
          uint64_t v117 = *(void *)(v116 + 8 * v362);
          if (v117)
          {
            *(void *)(v368 + 8 * v112) = v117;
          }
          else
          {
            uint64_t ForwardRef = mlir::BytecodeReader::Impl::createForwardRef((mlir::BytecodeReader::Impl *)a1, v49);
            *(void *)(v116 + 8 * v114) = ForwardRef;
            *(void *)(v368 + 8 * v112) = ForwardRef;
            if (!ForwardRef) {
              goto LABEL_474;
            }
          }
          if (v110 == ++v112) {
            goto LABEL_219;
          }
        }
        *(void *)(v368 + 8 * v112) = 0;
        goto LABEL_474;
      }
    }
LABEL_219:
    if ((v39 & 8) != 0)
    {
      v353[0] = 0;
        goto LABEL_474;
      unint64_t v119 = v353[0];
      uint64_t v120 = v387;
      if (v353[0] != v387)
      {
        if (v353[0] >= v387)
        {
          if (v353[0] > v388)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v323, v322, v353[0], 8);
            uint64_t v120 = v387;
          }
          if (v119 != v120) {
            bzero((void *)(v386 + 8 * v120), 8 * (v119 - v120));
          }
        }
        unsigned int v387 = v119;
      }
      if ((int)v119 >= 1)
      {
        uint64_t v121 = 0;
        uint64_t v122 = v119;
        do
        {
          uint64_t v123 = v386;
          unint64_t v362 = 0;
            goto LABEL_474;
          unsigned int v49 = (const mlir::OperationState *)*((void *)v9 + 3);
          uint64_t v124 = *(void *)(a3 + 40);
          unint64_t v125 = *(unsigned int *)(a3 + 48);
          v355 = (mlir::Region *)"successor";
          *(void *)&long long v356 = 9;
          v348.__r_.__value_.__r.__words[0] = v362;
          if (v362 < v125)
          {
            *(void *)(v123 + 8 * v121) = *(void *)(v124 + 8 * v362);
          }
          else
          {
            char v126 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v393);
            if (*(void *)v393) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v393);
            }
            if (v404)
            {
              long long v127 = (void **)v402;
              if (v402)
              {
                int v128 = v403;
                v129 = v402;
                if (v403 != v402)
                {
                  do
                    int v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
                  while (v128 != v127);
                  v129 = v402;
                }
                v403 = v127;
                operator delete(v129);
              }
              __int16 v130 = v400;
              if (v400)
              {
                int v131 = v401;
                unint64_t v132 = v400;
                if (v401 != v400)
                {
                  do
                  {
                    unint64_t v134 = (void *)*--v131;
                    unint64_t v133 = v134;
                    *int v131 = 0;
                    if (v134) {
                      operator delete[](v133);
                    }
                  }
                  while (v131 != v130);
                  unint64_t v132 = v400;
                }
                v401 = v130;
                operator delete(v132);
              }
              if ((void **)v394 != v345) {
                free((void *)v394);
              }
            }
            if (!v126) {
              goto LABEL_474;
            }
          }
        }
        while (++v121 != v122);
      }
    }
    BOOL v135 = (v39 & 0x20) != 0 && *v346 >= 3;
    int v136 = !v135;
    if (v135) {
      mlir::BytecodeReader::Impl::parseUseListOrderForRange((mlir::BytecodeReader::Impl *)v393, v9, v374);
    }
    long long v343 = (llvm *)((unint64_t)v343 & 0xFFFFFFFFFFFFFF00);
    if ((v39 & 0x10) != 0)
    {
      *(void *)v393 = 0;
      {
        if (v136)
        {
LABEL_324:
          mlir::OperationState::~OperationState((mlir::OperationState *)&v366);
          return 0;
        }
LABEL_314:
        uint64_t v181 = v343;
        unsigned int v182 = v335;
        if (!v335)
        {
LABEL_322:
          uint64_t v187 = 0;
          goto LABEL_323;
        }
LABEL_315:
        uint64_t v183 = v182;
        uint64_t v184 = 48 * v182;
        uint64_t v185 = (char *)v181 + 24;
        do
        {
          if (*((_DWORD *)v185 - 6) <= 0xFFFFFFFD)
          {
            uint64_t v186 = (char *)*((void *)v185 - 2);
            if (v185 != v186) {
              free(v186);
            }
          }
          v185 += 48;
          v184 -= 48;
        }
        while (v184);
        uint64_t v187 = 48 * v183;
        uint64_t v181 = v343;
LABEL_323:
        llvm::deallocate_buffer(v181, (void *)v187);
      }
      char v139 = v393[0];
      uint64_t v140 = *(void *)v393 >> 1;
      uint64_t v141 = (uint64_t)v330;
      llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)v330, *(void *)v393 >> 1);
      int64_t v138 = v337;
      if ((int)v140 >= 1)
      {
        do
        {
          unint64_t v148 = (mlir::Region *)operator new(0x18uLL);
          *(void *)unint64_t v148 = v148;
          *((void *)v148 + 1) = v148;
          *((void *)v148 + 2) = 0;
          v355 = v148;
          Address = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(v141, (unint64_t)&v355, 1);
          uint64_t v150 = v390;
          uint64_t v151 = v391;
          uint64_t v152 = *(void *)Address;
          *(void *)Address = 0;
          *(void *)(v150 + 8 * v151) = v152;
          unsigned int v391 = v151 + 1;
          uint64_t v153 = v355;
          v355 = 0;
          if (v153)
          {
            mlir::Region::~Region(v153);
            operator delete(v154);
          }
          LODWORD(v140) = v140 - 1;
        }
        while (v140);
      }
      int v137 = v139 & 1;
    }
    else
    {
      int v137 = 0;
      int64_t v138 = v337;
    }
    char v142 = (unsigned int *)mlir::Operation::create((mlir::Operation *)&v366, v49);
    uint64_t v143 = *(void *)(a3 + 104);
    if (v143) {
      uint64_t v144 = v143 - 8;
    }
    else {
      uint64_t v144 = 0;
    }
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v144 + 32, (uint64_t)v142);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v142);
    uint64_t v145 = *(void *)(v144 + 32);
    void *v146 = v145;
    v146[1] = v144 + 32;
    *(void *)(v145 + 8) = v146;
    *(void *)(v144 + 32) = v146;
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v142);
    unint64_t v147 = v142[9];
    if (v147)
    {
      mlir::ValueRange::ValueRange(v365, (uint64_t)(v142 - 4), v147);
      if (!mlir::BytecodeReader::Impl::defineValues(a1, *((void *)v9 + 3), v365[0], v365[1]))
      {
        if (v136) {
          goto LABEL_324;
        }
        goto LABEL_314;
      }
    }
    if (!v136)
    {
      unint64_t v155 = v142[9];
      if (v155)
      {
        uint64_t v156 = 0;
        unsigned int v157 = v335;
        unsigned int v158 = v335 - 1;
        int v159 = v343;
        while (1)
        {
          if (v157)
          {
            unsigned int v165 = (37 * v156) & v158;
            long long v166 = (int *)((char *)v159 + 48 * v165);
            int v167 = *v166;
            if (*v166 != v156)
            {
              int v171 = 1;
              int v172 = *v166;
              unsigned int v173 = (37 * v156) & v158;
              while (v172 != -1)
              {
                unsigned int v174 = v173 + v171++;
                unsigned int v173 = v174 & v158;
                int v172 = *((_DWORD *)v159 + 12 * v173);
                if (v172 == v156) {
                  goto LABEL_283;
                }
              }
              goto LABEL_280;
            }
LABEL_283:
            uint64_t v168 = (uint64_t)&v142[-6 * (v156 - 5) - 24];
            if (v156 <= 5) {
              uint64_t v168 = (uint64_t)&v142[4 * ~v156];
            }
            *(void *)v393 = v168;
            if (v167 != v156)
            {
              int v175 = 1;
              while (v167 != -1)
              {
                unsigned int v176 = v165 + v175++;
                unsigned int v165 = v176 & v158;
                long long v166 = (int *)((char *)v159 + 48 * (v176 & v158));
                int v167 = *v166;
                if (*v166 == v156) {
                  goto LABEL_286;
                }
              }
              long long v166 = (int *)((char *)v343 + 48 * v335);
            }
LABEL_286:
            unsigned int v169 = a1[132];
            if (!v169)
            {
              unint64_t v170 = 0;
LABEL_288:
              llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>((uint64_t)v338, v170, (uint64_t *)v393, (uint64_t)(v166 + 2));
              unint64_t v155 = v142[9];
              int v159 = v343;
              unsigned int v157 = v335;
              goto LABEL_280;
            }
            v160 = (void *)*((void *)a1 + 64);
            unsigned int v161 = v169 - 1;
            unsigned int v162 = v161 & ((v168 >> 4) ^ (v168 >> 9));
            long long v163 = (char *)&v160[6 * v162];
            uint64_t v164 = *(void *)v163;
            if (v168 != *(void *)v163)
            {
              v177 = 0;
              int v178 = 1;
              while (v164 != -4096)
              {
                if (v177) {
                  BOOL v179 = 0;
                }
                else {
                  BOOL v179 = v164 == -8192;
                }
                int v159 = v343;
                if (v179) {
                  v177 = v163;
                }
                unsigned int v180 = v162 + v178++;
                unsigned int v162 = v180 & v161;
                long long v163 = (char *)&v160[6 * v162];
                uint64_t v164 = *(void *)v163;
                if (v168 == *(void *)v163) {
                  goto LABEL_280;
                }
              }
              if (v177) {
                unint64_t v170 = v177;
              }
              else {
                unint64_t v170 = v163;
              }
              goto LABEL_288;
            }
          }
LABEL_280:
          if (++v156 >= v155) {
            goto LABEL_314;
          }
        }
      }
      uint64_t v181 = v343;
      unsigned int v182 = v335;
      if (!v335) {
        goto LABEL_322;
      }
      goto LABEL_315;
    }
    mlir::OperationState::~OperationState((mlir::OperationState *)&v366);
    unint64_t v188 = v142[11];
    if ((v188 & 0x7FFFFF) == 0)
    {
      uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
      uint64_t v11 = v344;
      goto LABEL_412;
    }
    *(void *)v393 = (((unint64_t)&v142[4 * ((v188 >> 23) & 1) + 17] + ((v188 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * v142[10];
    *(void *)&v393[8] = *(void *)v393 + 24 * (v188 & 0x7FFFFF);
    *(void *)&v393[16] = v9;
    *(void *)&long long v394 = 0;
    DWORD2(v394) = 0;
    v395 = v138;
    uint64_t v396 = 0x600000000;
    uint64_t v189 = v334;
    *(void *)v334 = 0;
    *((void *)v189 + 1) = 0;
    v399[16] = v137;
    if (!v137 || *v346 < 2) {
      goto LABEL_335;
    }
    LOBYTE(v362) = 0;
    *(_OWORD *)&v348.__r_.__value_.__l.__data_ = 0uLL;
    {
      unsigned int v344 = 0;
      int v202 = 1;
      goto LABEL_406;
    }
    if (v362 == 4)
    {
      long long v190 = *(_OWORD *)&v348.__r_.__value_.__l.__data_;
      char v191 = (void *)*((void *)a1 + 1);
      uint64_t v192 = operator new(0x20uLL);
      *(_OWORD *)uint64_t v192 = v190;
      v192[2] = v190;
      v192[3] = v191;
      uint64_t v193 = (void *)v394;
      *(void *)&long long v394 = v192;
      if (v193)
      {
        operator delete(v193);
        uint64_t v192 = (void *)v394;
      }
      *(void *)&v393[16] = v192;
      if (*((unsigned char *)a1 + 16))
      {
        char v194 = (void *)*((void *)a1 + 9);
        if (!v194) {
          goto LABEL_372;
        }
        if ((((uint64_t (*)(void, unsigned int *))v194)(*((void *)a1 + 10), v142) & 1) == 0)
        {
          uint64_t v192 = (void *)v394;
LABEL_372:
          long long v215 = (char *)operator new(0x98uLL);
          v216 = v215;
          *(void *)long long v215 = 0;
          *((void *)v215 + 1) = 0;
          *((void *)v215 + 2) = v142;
          *(_OWORD *)(v215 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(_OWORD *)v393;
          *(void *)&long long v394 = 0;
          *((void *)v215 + 5) = *(void *)&v393[16];
          *((void *)v215 + 6) = v192;
          unint64_t v217 = v396;
          *((_DWORD *)v215 + 14) = DWORD2(v394);
          uint64_t v218 = v215 + 80;
          *((void *)v215 + 8) = v215 + 80;
          char v219 = (void **)(v215 + 64);
          *((void *)v215 + 9) = 0x600000000;
          if (v217)
          {
            if (v395 != v138)
            {
              *((void *)v215 + 8) = v395;
              int v220 = HIDWORD(v396);
              *((_DWORD *)v215 + 18) = v217;
              *((_DWORD *)v215 + 19) = v220;
              v395 = v138;
              HIDWORD(v396) = 0;
              goto LABEL_388;
            }
            if (v217 < 7)
            {
              uint64_t v223 = v138;
              unint64_t v222 = v217;
LABEL_386:
              memcpy(v218, v223, 8 * v222);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v215 + 64), v218, v217, 8);
              unint64_t v222 = v396;
              if (v396)
              {
                uint64_t v223 = v395;
                uint64_t v218 = *v219;
                goto LABEL_386;
              }
            }
            *((_DWORD *)v216 + 18) = v217;
LABEL_388:
            LODWORD(v396) = 0;
          }
          uint64_t v224 = v334;
          *((_OWORD *)v216 + 8) = *(_OWORD *)v334;
          v216[144] = v224[16];
          uint64_t v225 = (void *)*((void *)a1 + 3);
          long long v226 = v321;
          *(void *)v216 = v225;
          *((void *)v216 + 1) = v226;
          v225[1] = v216;
          *((void *)a1 + 3) = v216;
          ++*((void *)a1 + 5);
          unsigned int v227 = a1[16];
          if (v227)
          {
            long long v228 = (void *)*((void *)a1 + 6);
            unsigned int v229 = (v227 - 1) & ((v142 >> 4) ^ (v142 >> 9));
            unsigned __int8 v230 = (unsigned int **)&v228[2 * v229];
            uint64_t v231 = *v230;
            if (v142 == *v230) {
              goto LABEL_405;
            }
            char v232 = 0;
            int v233 = 1;
            while (v231 != (unsigned int *)-4096)
            {
              if (v232) {
                BOOL v234 = 0;
              }
              else {
                BOOL v234 = v231 == (unsigned int *)-8192;
              }
              if (v234) {
                char v232 = v230;
              }
              unsigned int v235 = v229 + v233++;
              unsigned int v229 = v235 & (v227 - 1);
              unsigned __int8 v230 = (unsigned int **)&v228[2 * v229];
              uint64_t v231 = *v230;
              int v202 = 7;
              if (v142 == *v230)
              {
                uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
                int64_t v138 = v337;
                goto LABEL_407;
              }
            }
            if (v232) {
              uint64_t v239 = v232;
            }
            else {
              uint64_t v239 = v230;
            }
            int64_t v138 = v337;
            unsigned int v240 = a1[14];
            if (4 * v240 + 4 >= 3 * v227) {
              goto LABEL_418;
            }
            if (v227 + ~v240 - a1[15] > v227 >> 3)
            {
              v236 = *v239;
              ++a1[14];
              if (v236 != (unsigned int *)-4096) {
                goto LABEL_403;
              }
LABEL_404:
              llvm::APFloatBase *v239 = v142;
              v239[1] = (unsigned int *)v216;
LABEL_405:
              int v202 = 7;
LABEL_406:
              uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
              goto LABEL_407;
            }
          }
          else
          {
LABEL_418:
            v227 *= 2;
          }
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v319, v227);
          uint64_t v241 = (void *)*((void *)a1 + 6);
          int v242 = a1[16] - 1;
          unsigned int v243 = v242 & ((v142 >> 4) ^ (v142 >> 9));
          uint64_t v239 = (unsigned int **)&v241[2 * v243];
          uint64_t v244 = *v239;
          if (v142 == *v239)
          {
LABEL_420:
            int64_t v138 = v337;
            ++a1[14];
            if (v142 == (unsigned int *)-4096) {
              goto LABEL_404;
            }
          }
          else
          {
            uint64_t v245 = 0;
            int v246 = 1;
            while (v244 != (unsigned int *)-4096)
            {
              if (v245) {
                BOOL v247 = 0;
              }
              else {
                BOOL v247 = v244 == (unsigned int *)-8192;
              }
              if (v247) {
                uint64_t v245 = v239;
              }
              unsigned int v248 = v243 + v246++;
              unsigned int v243 = v248 & v242;
              uint64_t v239 = (unsigned int **)&v241[2 * (v248 & v242)];
              uint64_t v244 = *v239;
              if (v142 == *v239) {
                goto LABEL_420;
              }
            }
            if (v245) {
              uint64_t v239 = v245;
            }
            int64_t v138 = v337;
            BOOL v249 = *v239;
            ++a1[14];
            if (v249 == (unsigned int *)-4096) {
              goto LABEL_404;
            }
          }
LABEL_403:
          --a1[15];
          goto LABEL_404;
        }
      }
LABEL_335:
      uint64_t v195 = (char *)v332[1];
      if (v195 >= v332[2])
      {
        v332[1] = std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>(v332, (uint64_t)v393);
        if (!v137) {
          goto LABEL_380;
        }
      }
      else
      {
        long long v196 = *(_OWORD *)v393;
        *((void *)v195 + 2) = *(void *)&v393[16];
        *(_OWORD *)uint64_t v195 = v196;
        uint64_t v197 = v394;
        *(void *)&long long v394 = 0;
        *((void *)v195 + 3) = v197;
        *((_DWORD *)v195 + 8) = DWORD2(v394);
        uint64_t v198 = v195 + 56;
        *((void *)v195 + 5) = v195 + 56;
        *((void *)v195 + 6) = 0x600000000;
        if (v195 != v393)
        {
          int v199 = v396;
          if (v396)
          {
            if (v395 != v138)
            {
              *((void *)v195 + 5) = v395;
              *((_DWORD *)v195 + 12) = v199;
              *((_DWORD *)v195 + 13) = HIDWORD(v396);
              v395 = v138;
              HIDWORD(v396) = 0;
              goto LABEL_378;
            }
            if (v396 < 7)
            {
              v214 = v138;
              uint64_t v213 = v396;
LABEL_376:
              memcpy(v198, v214, 8 * v213);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v195 + 40), v195 + 56, v396, 8);
              uint64_t v213 = v396;
              if (v396)
              {
                v214 = v395;
                uint64_t v198 = (void *)*((void *)v195 + 5);
                goto LABEL_376;
              }
            }
            *((_DWORD *)v195 + 12) = v199;
LABEL_378:
            LODWORD(v396) = 0;
          }
        }
        long long v221 = *(_OWORD *)v334;
        v195[120] = v334[16];
        *(_OWORD *)(v195 + 104) = v221;
        v332[1] = v195 + 128;
        if (!v137)
        {
LABEL_380:
          int v202 = 1;
          unsigned int v344 = 1;
          goto LABEL_406;
        }
      }
      char v200 = (void *)*((void *)a1 + 86);
      if ((unint64_t)v200 >= *((void *)a1 + 87))
      {
        long long v201 = std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(v327);
      }
      else
      {
        *((_OWORD *)v200 + 1) = 0u;
        *((_OWORD *)v200 + 2) = 0u;
        v200[6] = 0;
        *(_OWORD *)char v200 = 0u;
        v200[3] = v200 + 5;
        long long v201 = (char *)(v200 + 7);
        *((_DWORD *)v200 + 9) = 4;
      }
      uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
      *((void *)a1 + 86) = v201;
      int v202 = 1;
      unsigned int v344 = 1;
      goto LABEL_407;
    }
    uint64_t v203 = *((void *)a1 + 1);
    v355 = (mlir::Region *)"expected IR section for region";
    WORD4(v357) = 259;
    mlir::emitError(v203, (uint64_t)&v355, (uint64_t)&v366);
    unsigned int v344 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v366);
    if (v366) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v366);
    }
    uint64_t v7 = (_anonymous_namespace_::AttrTypeReader *)v347;
    if (v384)
    {
      uint64_t v204 = (void **)__p;
      if (__p)
      {
        unsigned __int8 v205 = v383;
        uint64_t v206 = __p;
        if (v383 != __p)
        {
          do
            unsigned __int8 v205 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v205 - 1);
          while (v205 != v204);
          uint64_t v206 = __p;
        }
        v383 = v204;
        operator delete(v206);
      }
      uint64_t v207 = v380;
      if (v380)
      {
        unsigned __int8 v208 = v381;
        uint64_t v209 = v380;
        if (v381 != v380)
        {
          do
          {
            uint64_t v211 = (void *)*--v208;
            v210 = v211;
            void *v208 = 0;
            if (v211) {
              operator delete[](v210);
            }
          }
          while (v208 != v207);
          uint64_t v209 = v380;
        }
        v381 = v207;
        operator delete(v209);
      }
      if (v369 != v336) {
        free(v369);
      }
    }
    int v202 = 1;
LABEL_407:
    if (v395 != v138) {
      free(v395);
    }
    uint64_t v237 = (void *)v394;
    *(void *)&long long v394 = 0;
    uint64_t v11 = v344;
    if (v237) {
      operator delete(v237);
    }
    if (v202 != 7) {
      return v11;
    }
LABEL_412:
    uint64_t v238 = *(void *)(a3 + 112);
    *(void *)(a3 + 112) = v238 - 1;
    if (!v238) {
      goto LABEL_435;
    }
  }
  uint64_t v107 = 0;
  while (1)
  {
    uint64_t v108 = v373;
    *(void *)v393 = 0;
      break;
    *(void *)(v108 + 8 * v107) = v109;
    if (!v109) {
      break;
    }
    if (v105 == ++v107) {
      goto LABEL_201;
    }
  }
LABEL_474:
  mlir::OperationState::~OperationState((mlir::OperationState *)&v366);
  return 0;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[54]>(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)v36);
  uint64_t v5 = v36[0];
  if (v36[0])
  {
    int v33 = 3;
    unint64_t v34 = a3;
    size_t v35 = strlen(a3);
    uint64_t v6 = &v33;
    uint64_t v7 = (char *)__src;
    if (v39 >= v40)
    {
      unint64_t v31 = v39 + 1;
      if (__src <= &v33 && (char *)__src + 24 * v39 > (char *)&v33)
      {
        int64_t v32 = (char *)&v33 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        uint64_t v7 = (char *)__src;
        uint64_t v6 = (int *)((char *)__src + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v41, v31, 24);
        uint64_t v6 = &v33;
        uint64_t v7 = (char *)__src;
      }
    }
    uint64_t v8 = &v7[24 * v39];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v39;
    uint64_t v5 = v36[0];
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v46)
  {
    *(void *)(a1 + 8) = v36[1];
    unint64_t v10 = v39;
    *(_DWORD *)(a1 + 16) = v37;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v10 || v36 == (void *)a1)
    {
      int v12 = 1;
      goto LABEL_17;
    }
    if (__src != v41)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      unsigned int v11 = v40;
      *(_DWORD *)(a1 + 32) = v10;
      *(_DWORD *)(a1 + 36) = v11;
      __src = v41;
      unsigned int v40 = 0;
      int v12 = 1;
LABEL_16:
      unsigned int v39 = 0;
LABEL_17:
      uint64_t v14 = v45;
      *(void *)(a1 + 152) = v43;
      *(_OWORD *)(a1 + 136) = v42;
      long long v42 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(void *)(a1 + 176) = v14;
      uint64_t v43 = 0;
      long long __p = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v12)
      {
        char v15 = (void **)__p;
        if ((void)__p)
        {
          unsigned int v16 = (void **)*((void *)&__p + 1);
          char v17 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              unsigned int v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            char v17 = (void *)__p;
          }
          *((void *)&__p + 1) = v15;
          operator delete(v17);
        }
        uint64_t v18 = (void *)v42;
        if ((void)v42)
        {
          uint64_t v19 = (void *)*((void *)&v42 + 1);
          uint64_t v20 = (void *)v42;
          if (*((void *)&v42 + 1) != (void)v42)
          {
            do
            {
              char v22 = (void *)*--v19;
              uint64_t v21 = v22;
              void *v19 = 0;
              if (v22) {
                operator delete[](v21);
              }
            }
            while (v19 != v18);
            uint64_t v20 = (void *)v42;
          }
          *((void *)&v42 + 1) = v18;
          operator delete(v20);
        }
        if (__src != v41) {
          free(__src);
        }
        unsigned __int8 v46 = 0;
      }
      goto LABEL_34;
    }
    if (v10 < 5)
    {
      unint64_t v13 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v10, 24);
      unint64_t v13 = v39;
      if (!v39) {
        goto LABEL_15;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v13);
LABEL_15:
    *(_DWORD *)(a1 + 32) = v10;
    int v12 = v46;
    goto LABEL_16;
  }
LABEL_34:
  mlir::InFlightDiagnostic::abandon(v36);
  if (v36[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
  }
  if (v46)
  {
    int v23 = (void **)__p;
    if ((void)__p)
    {
      uint64_t v24 = (void **)*((void *)&__p + 1);
      uint64_t v25 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = (void *)__p;
      }
      *((void *)&__p + 1) = v23;
      operator delete(v25);
    }
    uint64_t v26 = (void *)v42;
    if ((void)v42)
    {
      uint64_t v27 = (void *)*((void *)&v42 + 1);
      uint64_t v28 = (void *)v42;
      if (*((void *)&v42 + 1) != (void)v42)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          unint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        uint64_t v28 = (void *)v42;
      }
      *((void *)&v42 + 1) = v26;
      operator delete(v28);
    }
    if (__src != v41) {
      free(__src);
    }
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<mlir::Operation>,llvm::ilist_traits<mlir::Operation>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (a4 != a5 && a2 != a5)
  {
    uint64_t result = llvm::ilist_traits<mlir::Operation>::transferNodesFromList(result, a3, (uint64_t)a4, (uint64_t)a5);
    uint64_t v8 = *a5;
    uint64_t v9 = *a4;
    *(void *)(v9 + 8) = a5;
    *a5 = v9;
    uint64_t v10 = *a2;
    *(void *)(v8 + 8) = a2;
    *a4 = v10;
    *(void *)(v10 + 8) = a4;
    *a2 = v8;
  }
  return result;
}

uint64_t mlir::BytecodeReader::Impl::parseRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_anonymous_namespace_::EncodingReader **)(a2 + 16);
  unint64_t v20 = 0;
    return 0;
  unint64_t v5 = v20;
  if (!v20) {
    return 1;
  }
  unint64_t v19 = 0;
    return 0;
  *(_DWORD *)(a2 + 32) = v19;
  *(_DWORD *)(a2 + 48) = 0;
  if (v5 > *(unsigned int *)(a2 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v5, 8);
  }
  do
  {
    uint64_t v6 = operator new(0x48uLL);
    _OWORD *v6 = 0u;
    v6[1] = 0u;
    *((void *)v6 + 4) = v6 + 2;
    *((void *)v6 + 5) = v6 + 2;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 6) = 0;
    unint64_t v7 = *(unsigned int *)(a2 + 48);
    if (v7 >= *(unsigned int *)(a2 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, (void *)(a2 + 56), v7 + 1, 8);
      unint64_t v7 = *(unsigned int *)(a2 + 48);
    }
    *(void *)(*(void *)(a2 + 40) + 8 * v7) = v6;
    unsigned int v8 = *(_DWORD *)(a2 + 48) + 1;
    *(_DWORD *)(a2 + 48) = v8;
    uint64_t v9 = *(uint64_t **)a2;
    uint64_t v10 = *(void *)(*(void *)(a2 + 40) + 8 * v8 - 8);
    llvm::ilist_traits<mlir::Block>::addNodeToList(*(void *)a2, v10);
    uint64_t v11 = *v9;
    *(void *)(v10 + 8) = *v9;
    *(void *)(v10 + 16) = v9;
    v10 += 8;
    *(void *)(v11 + 8) = v10;
    uint64_t *v9 = v10;
    --v5;
  }
  while (v5);
  uint64_t v13 = *(void *)(a1 + 688);
  uint64_t v14 = (*(void *)(v13 - 48) - *(void *)(v13 - 56)) >> 3;
  uint64_t v15 = *(unsigned int *)(v13 - 24);
  if (v15 >= *(_DWORD *)(v13 - 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13 - 32, (void *)(v13 - 16), v15 + 1, 4);
    LODWORD(v15) = *(_DWORD *)(v13 - 24);
  }
  *(_DWORD *)(*(void *)(v13 - 32) + 4 * v15) = v14;
  ++*(_DWORD *)(v13 - 24);
  uint64_t v16 = *(void *)(v13 - 56);
  unint64_t v17 = (*(void *)(v13 - 48) - v16) >> 3;
  unint64_t v18 = *(unsigned int *)(a2 + 32);
  if (v17 >= v17 + v18)
  {
    if (v17 > v17 + v18) {
      *(void *)(v13 - 48) = v16 + 8 * (v17 + v18);
    }
  }
  else
  {
    std::vector<mlir::Value>::__append((void **)(v13 - 56), v18);
  }
  *(void *)(a2 + 104) = *(void *)(*(void *)a2 + 8);
  return mlir::BytecodeReader::Impl::parseBlockHeader(a1, v4, a2);
}

uint64_t mlir::BytecodeReader::Impl::createForwardRef(mlir::BytecodeReader::Impl *this, const mlir::OperationState *a2)
{
  uint64_t v3 = (mlir::BytecodeReader::Impl *)((char *)this + 832);
  uint64_t v4 = (mlir::GenericProgramPoint *)*((void *)this + 104);
  unint64_t v5 = (mlir::GenericProgramPoint **)((char *)this + 760);
  if (v4 == v3)
  {
    unint64_t v7 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::BytecodeReader::Impl *)((char *)this + 872), a2);
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)this + 760, (uint64_t)v7);
    mlir::GenericProgramPoint::~GenericProgramPoint(v7);
    uint64_t v8 = *((void *)this + 95);
    void *v9 = v8;
    v9[1] = v5;
    *(void *)(v8 + 8) = v9;
    *((void *)this + 95) = v9;
    mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    mlir::Operation::moveBefore(v6, (mlir::BytecodeReader::Impl *)((char *)this + 728), (uint64_t *)this + 95);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*v5);
  return v10 - 16;
}

BOOL mlir::isBytecode(uint64_t a1)
{
  return *(void *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349;
}

uint64_t mlir::readBytecodeFile(_OWORD *a1, uint64_t a2, mlir::StringAttr **a3)
{
  long long v3 = a1[1];
  v9[0] = *a1;
  v9[1] = v3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = readBytecodeFileImpl((uint64_t)v9, a2, a3, (uint64_t)&v7);
  uint64_t v5 = result;
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v5;
    }
  }
  return result;
}

uint64_t readBytecodeFileImpl(uint64_t a1, uint64_t a2, mlir::StringAttr **a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (mlir::MLIRContext *)mlir::FileLineColLoc::get(*a3, *(const char **)(a1 + 16), *(void *)(a1 + 24), 0, 0);
  if (*(void *)(a1 + 8) >= 4uLL && **(_DWORD **)a1 == 1391414349)
  {
    long long v19 = *(_OWORD *)(a1 + 16);
    v21[0] = *(_OWORD *)a1;
    v21[1] = v19;
    mlir::BytecodeReader::Impl::Impl((uint64_t)v24, v8, a3, 0, v21, a4);
    mlir::BytecodeReader::Impl::read((uint64_t *)v24, a2, 0, v20);
    mlir::BytecodeReader::Impl::~Impl(v24);
  }
  char v22 = "input buffer is not an MLIR bytecode file";
  __int16 v23 = 259;
  mlir::emitError((uint64_t)v8, (uint64_t)&v22, (uint64_t)v24);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v31)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v30;
      int v12 = __p;
      if (v30 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        int v12 = __p;
      }
      uint64_t v30 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v27;
    if (v27)
    {
      uint64_t v14 = v28;
      uint64_t v15 = v27;
      if (v28 != v27)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v27;
      }
      uint64_t v28 = v13;
      operator delete(v15);
    }
    if (v25 != &v26) {
      free(v25);
    }
  }
  return v9;
}

uint64_t mlir::readBytecodeFile(const llvm::MemoryBuffer ****a1, uint64_t a2, mlir::StringAttr **a3)
{
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v7, ***a1);
  return readBytecodeFileImpl((uint64_t)v7, a2, a3, (uint64_t)a1);
}

uint64_t mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6)
{
  size_t v12 = strlen(__s);
  unint64_t v13 = *(void *)(a1 + 16);
  int v32 = 3;
  int v33 = __s;
  size_t v34 = v12;
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  uint64_t v15 = &v32;
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v26 = v14 + 1;
    BOOL v27 = v13 + 24 * v14 > (unint64_t)&v32;
    if (v13 <= (unint64_t)&v32 && v27)
    {
      uint64_t v30 = (char *)&v32 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      uint64_t v15 = (int *)&v30[v13];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      uint64_t v15 = &v32;
    }
  }
  uint64_t v16 = v13 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  unsigned int v18 = *(_DWORD *)(a1 + 28);
  uint64_t v19 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v19;
  uint64_t v20 = *a3;
  int v32 = 5;
  int v33 = v20;
  unint64_t v21 = *(void *)(a1 + 16);
  char v22 = &v32;
  if (v19 >= v18)
  {
    unint64_t v28 = v19 + 1;
    BOOL v29 = v21 + 24 * v19 > (unint64_t)&v32;
    if (v21 <= (unint64_t)&v32 && v29)
    {
      char v31 = (char *)&v32 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      char v22 = (int *)&v31[v21];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      char v22 = &v32;
    }
  }
  uint64_t v23 = v21 + 24 * *(unsigned int *)(a1 + 24);
  long long v24 = *(_OWORD *)v22;
  *(void *)(v23 + 16) = *((void *)v22 + 2);
  *(_OWORD *)uint64_t v23 = v24;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(a1, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, char *__s, char **a3, char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  size_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      unsigned int v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<unsigned long,char const(&)[8]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<unsigned long,char const(&)[8]>(uint64_t a1, char **a2, char *__s)
{
  uint64_t v6 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *a2;
  int v24 = 5;
  uint64_t v25 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v24;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v5 + 24 * v8 > (unint64_t)&v24;
    if (v5 <= (unint64_t)&v24 && v20)
    {
      char v22 = (char *)&v24 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v22[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = &v24;
    }
  }
  uint64_t v10 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  uint64_t v12 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
  size_t v13 = strlen(__s);
  int v24 = 3;
  uint64_t v25 = __s;
  size_t v26 = v13;
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = &v24;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v12 + 1;
    if (v14 <= (unint64_t)&v24 && v14 + 24 * v12 > (unint64_t)&v24)
    {
      uint64_t v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = (int *)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = &v24;
    }
  }
  uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<unsigned char>(void *a1, unsigned char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      unint64_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v16;
      if (v16)
      {
        uint64_t v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = (void *)*--v9;
            long long v11 = v12;
            void *v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        long long v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

uint64_t anonymous namespace'::EncodingReader::alignTo(_anonymous_namespace_::EncodingReader *this, __int32 a2, int8x8_t a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  a3.i32[0] = a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] == 1)
  {
    uint64_t v5 = (a2 - 1);
    do
    {
      if ((v5 & *((void *)this + 2)) == 0) {
        return 1;
      }
      unsigned __int8 v74 = 0;
        return 0;
      unint64_t v6 = v74;
    }
    while (v74 == 203);
    if (v74)
    {
      uint64_t v7 = 16;
      do
      {
        *((unsigned char *)&v86 + v7--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 & 0xF];
        BOOL v8 = v6 > 0xF;
        v6 >>= 4;
      }
      while (v8);
      uint64_t v9 = v7 + 1;
      std::string::size_type v10 = 16 - v7;
      if ((unint64_t)(16 - v7) >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
    }
    else
    {
      LOBYTE(v88) = 48;
      uint64_t v9 = 16;
      std::string::size_type v10 = 1;
    }
    if (v10 > 0x16)
    {
      uint64_t v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v23 = v10 | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v9 == 17)
      {
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[0] = 0;
        uint64_t v25 = std::string::insert(&__dst, 0, "expected alignment byte (0xCB), but got: '0x");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        BOOL v27 = std::string::append(&v71, "'");
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v72 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        std::string::size_type v73 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        mlir::emitError(*((void *)this + 3), (uint64_t)&v86);
        BOOL v29 = v86;
        if (v86)
        {
          LOWORD(v79) = 260;
          uint64_t v75 = v72;
          mlir::Diagnostic::operator<<((uint64_t)&v87, (const void ***)&v75);
          BOOL v29 = v86;
        }
        uint64_t v75 = (void **)v29;
        LOBYTE(v76) = 0;
        char v85 = 0;
        if (!v96)
        {
LABEL_94:
          mlir::InFlightDiagnostic::abandon(&v86);
          if (v86) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
          }
          if (v96)
          {
            uint64_t v51 = (void **)__p;
            if ((void)__p)
            {
              uint64_t v52 = (void **)*((void *)&__p + 1);
              unint64_t v53 = (void *)__p;
              if (*((void *)&__p + 1) != (void)__p)
              {
                do
                  uint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                while (v52 != v51);
                unint64_t v53 = (void *)__p;
              }
              *((void *)&__p + 1) = v51;
              operator delete(v53);
            }
            unint64_t v54 = (void *)v92;
            if ((void)v92)
            {
              unint64_t v55 = (void *)*((void *)&v92 + 1);
              unint64_t v56 = (void *)v92;
              if (*((void *)&v92 + 1) != (void)v92)
              {
                do
                {
                  unint64_t v58 = (void *)*--v55;
                  uint64_t v57 = v58;
                  *unint64_t v55 = 0;
                  if (v58) {
                    operator delete[](v57);
                  }
                }
                while (v55 != v54);
                unint64_t v56 = (void *)v92;
              }
              *((void *)&v92 + 1) = v54;
              operator delete(v56);
            }
            if (__src != v91) {
              free(__src);
            }
          }
          uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
          if (v75) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
          }
          if (v85)
          {
            unint64_t v59 = (void **)v83;
            if ((void)v83)
            {
              char v60 = (void **)*((void *)&v83 + 1);
              unint64_t v61 = (void *)v83;
              if (*((void *)&v83 + 1) != (void)v83)
              {
                do
                  char v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                unint64_t v61 = (void *)v83;
              }
              *((void *)&v83 + 1) = v59;
              operator delete(v61);
            }
            uint64_t v62 = (void *)v81;
            if ((void)v81)
            {
              int64_t v63 = (void *)*((void *)&v81 + 1);
              int64_t v64 = (void *)v81;
              if (*((void *)&v81 + 1) != (void)v81)
              {
                do
                {
                  uint64_t v66 = (void *)*--v63;
                  unsigned int v65 = v66;
                  void *v63 = 0;
                  if (v66) {
                    operator delete[](v65);
                  }
                }
                while (v63 != v62);
                int64_t v64 = (void *)v81;
              }
              *((void *)&v81 + 1) = v62;
              operator delete(v64);
            }
            if (v78 != v80) {
              free(v78);
            }
          }
          if (SHIBYTE(v73) < 0)
          {
            operator delete(v72[0]);
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_132:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return v21;
              }
LABEL_136:
              operator delete(__dst.__r_.__value_.__l.__data_);
              return v21;
            }
          }
          else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_132;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return v21;
          }
          goto LABEL_136;
        }
        uint64_t v76 = v87;
        int v30 = v90;
        LODWORD(v77) = v88;
        char v31 = v80;
        int64_t v78 = v80;
        uint64_t v79 = 0x400000000;
        if (!v90)
        {
          int v33 = 1;
          goto LABEL_90;
        }
        int v32 = __src;
        if (__src != v91)
        {
          int64_t v78 = __src;
          uint64_t v79 = v90;
          __src = v91;
          HIDWORD(v90) = 0;
          int v33 = 1;
LABEL_89:
          LODWORD(v90) = 0;
LABEL_90:
          long long v81 = v92;
          uint64_t v82 = v93;
          long long v92 = 0uLL;
          long long v83 = __p;
          uint64_t v84 = v95;
          uint64_t v93 = 0;
          long long __p = 0uLL;
          uint64_t v95 = 0;
          char v85 = 1;
          if (v33)
          {
            if (__src != v91) {
              free(__src);
            }
            unsigned __int8 v96 = 0;
          }
          goto LABEL_94;
        }
        if (v90 < 5)
        {
          uint64_t v50 = v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
          uint64_t v50 = v90;
          if (!v90)
          {
LABEL_88:
            LODWORD(v79) = v30;
            int v33 = v96;
            goto LABEL_89;
          }
          int v32 = __src;
          char v31 = v78;
        }
        memcpy(v31, v32, 24 * v50);
        goto LABEL_88;
      }
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (v9 == 17) {
        goto LABEL_30;
      }
    }
    memcpy(p_dst, (char *)&v86 + v9, v10);
    p_dst = (std::string *)((char *)p_dst + v10);
    goto LABEL_30;
  }
  mlir::emitError(*((void *)this + 3), (uint64_t)&v86);
  uint64_t v12 = v86;
  if (v86)
  {
    LODWORD(v75) = 3;
    uint64_t v76 = "expected alignment to be a power-of-two";
    uint64_t v77 = 39;
    size_t v13 = &v75;
    unint64_t v14 = (char *)__src;
    if (v90 >= HIDWORD(v90))
    {
      unint64_t v68 = v90 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v90 > (char *)&v75)
      {
        int64_t v69 = (char *)&v75 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        unint64_t v14 = (char *)__src;
        size_t v13 = (void ***)((char *)__src + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v91, v68, 24);
        size_t v13 = &v75;
        unint64_t v14 = (char *)__src;
      }
    }
    uint64_t v15 = &v14[24 * v90];
    long long v16 = *(_OWORD *)v13;
    *((void *)v15 + 2) = v13[2];
    *(_OWORD *)uint64_t v15 = v16;
    LODWORD(v90) = v90 + 1;
    uint64_t v12 = v86;
  }
  uint64_t v75 = (void **)v12;
  LOBYTE(v76) = 0;
  char v85 = 0;
  if (v96)
  {
    uint64_t v76 = v87;
    int v17 = v90;
    LODWORD(v77) = v88;
    unsigned int v18 = v80;
    int64_t v78 = v80;
    uint64_t v79 = 0x400000000;
    if (!v90)
    {
      int v20 = 1;
      goto LABEL_42;
    }
    unint64_t v19 = v91;
    if (__src != v91)
    {
      int64_t v78 = __src;
      uint64_t v79 = v90;
      __src = v91;
      HIDWORD(v90) = 0;
      int v20 = 1;
LABEL_41:
      LODWORD(v90) = 0;
LABEL_42:
      long long v81 = v92;
      uint64_t v82 = v93;
      long long v92 = 0uLL;
      long long v83 = __p;
      uint64_t v84 = v95;
      uint64_t v93 = 0;
      long long __p = 0uLL;
      uint64_t v95 = 0;
      char v85 = 1;
      if (v20)
      {
        if (__src != v91) {
          free(__src);
        }
        unsigned __int8 v96 = 0;
      }
      goto LABEL_46;
    }
    if (v90 < 5)
    {
      uint64_t v22 = v90;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v90, 24);
      uint64_t v22 = v90;
      if (!v90)
      {
LABEL_40:
        LODWORD(v79) = v17;
        int v20 = v96;
        goto LABEL_41;
      }
      unint64_t v19 = __src;
      unsigned int v18 = v78;
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_40;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v86);
  if (v86) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
  }
  if (v96)
  {
    size_t v34 = (void **)__p;
    if ((void)__p)
    {
      size_t v35 = (void **)*((void *)&__p + 1);
      uint64_t v36 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          size_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = (void *)__p;
      }
      *((void *)&__p + 1) = v34;
      operator delete(v36);
    }
    int v37 = (void *)v92;
    if ((void)v92)
    {
      uint64_t v38 = (void *)*((void *)&v92 + 1);
      unsigned int v39 = (void *)v92;
      if (*((void *)&v92 + 1) != (void)v92)
      {
        do
        {
          uint64_t v41 = (void *)*--v38;
          unsigned int v40 = v41;
          *uint64_t v38 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v38 != v37);
        unsigned int v39 = (void *)v92;
      }
      *((void *)&v92 + 1) = v37;
      operator delete(v39);
    }
    if (__src != v91) {
      free(__src);
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
  if (v75) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  }
  if (v85)
  {
    long long v42 = (void **)v83;
    if ((void)v83)
    {
      uint64_t v43 = (void **)*((void *)&v83 + 1);
      uint64_t v44 = (void *)v83;
      if (*((void *)&v83 + 1) != (void)v83)
      {
        do
          uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = (void *)v83;
      }
      *((void *)&v83 + 1) = v42;
      operator delete(v44);
    }
    uint64_t v45 = (void *)v81;
    if ((void)v81)
    {
      unsigned __int8 v46 = (void *)*((void *)&v81 + 1);
      uint64_t v47 = (void *)v81;
      if (*((void *)&v81 + 1) != (void)v81)
      {
        do
        {
          unsigned int v49 = (void *)*--v46;
          uint64_t v48 = v49;
          void *v46 = 0;
          if (v49) {
            operator delete[](v48);
          }
        }
        while (v46 != v45);
        uint64_t v47 = (void *)v81;
      }
      *((void *)&v81 + 1) = v45;
      operator delete(v47);
    }
    if (v78 != v80) {
      free(v78);
    }
  }
  return v21;
}

uint64_t anonymous namespace'::EncodingReader::parseBytes(void *a1, char *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t v3 = a1[2];
  if (*a1 + a1[1] - v3 >= (unint64_t)a2)
  {
    *a3 = v3;
    a3[1] = a2;
    a1[2] += a2;
    return 1;
  }
  else
  {
    unint64_t v14 = (char *)(*a1 + a1[1] - v3);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        unint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            unint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        std::string::size_type v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = (void *)*--v9;
            long long v11 = v12;
            void *v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          std::string::size_type v10 = v19;
        }
        int v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

uint64_t mlir::Diagnostic::append<char const(&)[21],unsigned int>(uint64_t a1, char *__s, unsigned int *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v26 = 3;
  BOOL v27 = __s;
  size_t v28 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v8 + 1;
    BOOL v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      uint64_t v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v26;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  uint64_t v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
  unint64_t v14 = (char *)*a3;
  int v26 = 5;
  BOOL v27 = v14;
  unint64_t v15 = *(void *)(a1 + 16);
  long long v16 = &v26;
  if (v13 >= v12)
  {
    unint64_t v22 = v13 + 1;
    BOOL v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      uint64_t v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      long long v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      long long v16 = &v26;
    }
  }
  uint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[21],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>(uint64_t a1, uint64_t a2, char **a3, char **a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v29, "attempting to parse ", a3, " bytes when only ", a4, " remain");
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unsigned int v12 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v13 = (void **)__p[1];
          unint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            unint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        unint64_t v15 = v35[0];
        if (v35[0])
        {
          long long v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              unint64_t v19 = (void *)*--v16;
              long long v18 = v19;
              void *v16 = 0;
              if (v19) {
                operator delete[](v18);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    unint64_t v20 = (void **)__p[0];
    if (__p[0])
    {
      BOOL v21 = (void **)__p[1];
      unint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          BOOL v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        unint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    BOOL v23 = v35[0];
    if (v35[0])
    {
      uint64_t v24 = v35[1];
      uint64_t v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          BOOL v27 = (void *)*--v24;
          int v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir13LogicalResultEPN12_GLOBAL__N_115BytecodeDialectEEE11callback_fnIZZNS3_14AttrTypeReader10initializeENS_15MutableArrayRefINSt3__110unique_ptrIS4_NSB_14default_deleteIS4_EEEEEENS_8ArrayRefIhEESI_ENK3__0clIRNS_11SmallVectorINS9_5EntryINS1_9AttributeEEELj1EEEEEDaOT_EUlS5_E_EES2_lS5_(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = (*v5)++;
  uint64_t v7 = *v4;
  unint64_t v24 = 0;
  unint64_t v8 = v24;
  *(unsigned char *)(v7 + 40 * v6 + 16) = v24 & 1;
  unint64_t v9 = v8 >> 1;
  unint64_t v24 = v9;
  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = **(void **)(a1 + 24);
  if (v11 + v9 <= v10[1])
  {
    uint64_t v21 = *v10 + v11;
    unint64_t v22 = (void *)(v7 + 40 * v6);
    v22[3] = v21;
    v22[4] = v9;
    v22[1] = a2;
    **(void **)(a1 + 24) += v9;
    return 1;
  }
  else
  {
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        unint64_t v14 = v31;
        unint64_t v15 = __p;
        if (v31 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          unint64_t v15 = __p;
        }
        char v31 = v13;
        operator delete(v15);
      }
      long long v16 = v28;
      if (v28)
      {
        uint64_t v17 = v29;
        long long v18 = v28;
        if (v29 != v28)
        {
          do
          {
            unint64_t v20 = (void *)*--v17;
            unint64_t v19 = v20;
            *uint64_t v17 = 0;
            if (v20) {
              operator delete[](v19);
            }
          }
          while (v17 != v16);
          long long v18 = v28;
        }
        uint64_t v29 = v16;
        operator delete(v18);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v12;
}

uint64_t mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  char v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      uint64_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  long long v18 = *a3;
  int v30 = 5;
  char v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      uint64_t v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(uint64_t a1, char *__s, char **a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v26 = 3;
  BOOL v27 = __s;
  size_t v28 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v8 + 1;
    BOOL v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      unint64_t v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      unint64_t v9 = &v26;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  uint64_t v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
  uint64_t v14 = *a3;
  int v26 = 5;
  BOOL v27 = v14;
  unint64_t v15 = *(void *)(a1 + 16);
  unsigned int v16 = &v26;
  if (v13 >= v12)
  {
    unint64_t v22 = v13 + 1;
    BOOL v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      BOOL v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = &v26;
    }
  }
  uint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t anonymous namespace'::EncodingReader::parseBytes(_anonymous_namespace_::EncodingReader *this, size_t __n, unsigned __int8 *__dst)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (char *)__n;
  uint64_t v5 = (const void *)*((void *)this + 2);
  if (*(void *)this + *((void *)this + 1) - (void)v5 >= __n)
  {
    memcpy(__dst, v5, __n);
    *((void *)this + 2) += __n;
    return 1;
  }
  else
  {
    unsigned int v16 = (char *)(*(void *)this + *((void *)this + 1) - (void)v5);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        uint64_t v8 = v24;
        unint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        unint64_t v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        long long v11 = v22;
        unsigned int v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = (void *)*--v11;
            uint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          unsigned int v12 = v21;
        }
        unint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t anonymous namespace'::EncodingReader::parseMultiByteVarInt(_anonymous_namespace_::EncodingReader *this, unint64_t *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  size_t v3 = __clz(__rbit32(*a2));
  v5[0] = *a2;
    return 0;
  *a2 = v5[0] >> (v3 + 1);
  return 1;
}

uint64_t resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v18[0] = a6;
  v18[1] = a7;
  uint64_t v17 = a4;
  if (a3 <= (unint64_t)a4)
  {
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
    if (v19[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
    }
    if (v26)
    {
      uint64_t v8 = (void **)__p;
      if (__p)
      {
        unint64_t v9 = v25;
        uint64_t v10 = __p;
        if (v25 != __p)
        {
          do
            unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          uint64_t v10 = __p;
        }
        char v25 = v8;
        operator delete(v10);
      }
      long long v11 = v22;
      if (v22)
      {
        unsigned int v12 = v23;
        uint64_t v13 = v22;
        if (v23 != v22)
        {
          do
          {
            unint64_t v15 = (void *)*--v12;
            uint64_t v14 = v15;
            void *v12 = 0;
            if (v15) {
              operator delete[](v14);
            }
          }
          while (v12 != v11);
          uint64_t v13 = v22;
        }
        BOOL v23 = v11;
        operator delete(v13);
      }
      if (v20 != &v21) {
        free(v20);
      }
    }
  }
  else
  {
    *a5 = *(_OWORD *)(a2 + 16 * (void)a4);
    return 1;
  }
  return v7;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>((uint64_t)&v29, "invalid ", a3, " index: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unsigned int v12 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v13 = (void **)__p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        unint64_t v15 = v35[0];
        if (v35[0])
        {
          unsigned int v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              unint64_t v19 = (void *)*--v16;
              long long v18 = v19;
              void *v16 = 0;
              if (v19) {
                operator delete[](v18);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v21 = (void **)__p[1];
      unint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        unint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    BOOL v23 = v35[0];
    if (v35[0])
    {
      unint64_t v24 = v35[1];
      char v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = (void *)*--v24;
          char v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        char v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[9],llvm::StringRef &,char const(&)[9],unsigned long long &>(uint64_t a1, char *__s, uint64_t a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  BOOL v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  unint64_t v22 = *(const void ***)a3;
  BOOL v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

uint64_t parseEntry<llvm::MutableArrayRef<std::unique_ptr<anonymous namespace'::BytecodeDialect>>,std::unique_ptr<anonymous namespace'::BytecodeDialect>*>(_anonymous_namespace_::EncodingReader *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v23 = 0;
    return 0;
  uint64_t v10 = *((void *)a1 + 3);
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  v25[0] = a4;
  v25[1] = a5;
  size_t v24 = (char *)v23;
  if (v12 <= v23)
  {
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v32;
        long long v16 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          long long v16 = __p;
        }
        unsigned int v32 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v29;
      if (v29)
      {
        long long v18 = v30;
        unint64_t v19 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            BOOL v20 = v21;
            void *v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          unint64_t v19 = v29;
        }
        int v30 = v17;
        operator delete(v19);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
  else
  {
    *a3 = v11 + 8 * v23;
    return 1;
  }
  return v13;
}

void anonymous namespace'::DialectReader::emitError(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  mlir::emitError(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)&v20);
  uint64_t v5 = v20;
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v21, a2);
    uint64_t v5 = v20;
  }
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  if (v31)
  {
    *(void *)(a3 + 8) = v21;
    unint64_t v6 = v24;
    *(_DWORD *)(a3 + 16) = v22;
    uint64_t v7 = (void *)(a3 + 40);
    *(void *)(a3 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a3 + 40;
    *(void *)(a3 + 32) = 0x400000000;
    if (!v6 || &v20 == (uint64_t *)a3)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    unint64_t v8 = __src;
    if (__src != v26)
    {
      *(void *)(a3 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v25;
      *(_DWORD *)(a3 + 32) = v6;
      *(_DWORD *)(a3 + 36) = v9;
      __src = v26;
      int v25 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v24 = 0;
LABEL_16:
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v27;
      *(void *)(a3 + 152) = v28;
      v27[0] = 0;
      v27[1] = 0;
      *(_OWORD *)(a3 + 160) = *(_OWORD *)__p;
      *(void *)(a3 + 176) = v30;
      uint64_t v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v30 = 0;
      *(unsigned char *)(a3 + 184) = 1;
      if (v10)
      {
        if (__src != v26) {
          free(__src);
        }
        unsigned __int8 v31 = 0;
      }
      goto LABEL_20;
    }
    if (v6 < 5)
    {
      unint64_t v11 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v6, 24);
      unint64_t v11 = v24;
      if (!v24)
      {
LABEL_14:
        *(_DWORD *)(a3 + 32) = v6;
        int v10 = v31;
        goto LABEL_15;
      }
      unint64_t v8 = __src;
      uint64_t v7 = *(void **)(a3 + 24);
    }
    memcpy(v7, v8, 24 * v11);
    goto LABEL_14;
  }
LABEL_20:
  mlir::InFlightDiagnostic::abandon(&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v31)
  {
    unint64_t v12 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v13 = (void **)__p[1];
      uint64_t v14 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p[0];
      }
      __p[1] = v12;
      operator delete(v14);
    }
    uint64_t v15 = v27[0];
    if (v27[0])
    {
      long long v16 = v27[1];
      uint64_t v17 = v27[0];
      if (v27[1] != v27[0])
      {
        do
        {
          unint64_t v19 = (void *)*--v16;
          long long v18 = v19;
          void *v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v27[0];
      }
      v27[1] = v15;
      operator delete(v17);
    }
    if (__src != v26) {
      free(__src);
    }
  }
}

uint64_t anonymous namespace'::DialectReader::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1) {
    uint64_t v6 = *(unsigned int *)(v4 + 8);
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)v4 + 8 * v6;
  if (v7 == **(void **)(a1 + 32) + 8 * *(unsigned int *)(*(void *)(a1 + 32) + 8)) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)v7 + 8);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 24);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
    return 0;
  else {
    return *(void *)(*(void *)(*(void *)v7 + 8) + 56);
  }
}

uint64_t anonymous namespace'::DialectReader::getContext(_anonymous_namespace_::DialectReader *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 5) + 24);
  return mlir::Attribute::getContext((mlir::Attribute *)&v2);
}

uint64_t anonymous namespace'::DialectReader::getBytecodeVersion(_anonymous_namespace_::DialectReader *this)
{
  return **((void **)this + 6);
}

BOOL anonymous namespace'::DialectReader::readAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  *(void *)a2 = v5;
  return v5 != 0;
}

BOOL anonymous namespace'::DialectReader::readOptionalAttribute(_anonymous_namespace_::DialectReader *this, mlir::Attribute *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  if ((v7 & 1) == 0) {
    return 1;
  }
  *(void *)a2 = v6;
  return v6 != 0;
}

BOOL anonymous namespace'::DialectReader::readType(_anonymous_namespace_::DialectReader *this, mlir::Type *a2)
{
  size_t v3 = (_anonymous_namespace_::AttrTypeReader *)*((void *)this + 1);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v7 = 0;
    return 0;
  *(void *)a2 = v5;
  return v5 != 0;
}

uint64_t anonymous namespace'::DialectReader::readVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
}

uint64_t anonymous namespace'::DialectReader::readSignedVarInt(_anonymous_namespace_::EncodingReader **this, unint64_t *a2)
{
  unint64_t v4 = 0;
    return 0;
  *a2 = -(uint64_t)(v4 & 1) ^ (v4 >> 1);
  return 1;
}

void anonymous namespace'::DialectReader::readAPIntWithKnownWidth(_anonymous_namespace_::DialectReader *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  if (a2 <= 8)
  {
    LOBYTE(v18) = 0;
    {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2) {
        LOBYTE(v6) = 0;
      }
      unint64_t v7 = v6 & v18;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (a2 <= 0x40)
  {
    long long v18 = 0;
    {
      unint64_t v7 = (-(uint64_t)(v18 & 1) ^ ((unint64_t)v18 >> 1)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
LABEL_9:
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v7;
      *(unsigned char *)(a3 + 16) = 1;
      return;
    }
    goto LABEL_15;
  }
  unint64_t v17 = 0;
  {
LABEL_15:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return;
  }
  unint64_t v8 = v17;
  long long v18 = v20;
  uint64_t v19 = 0x400000000;
  if (v17)
  {
    if (v17 < 5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v17, 8);
      uint64_t v9 = v19;
      unint64_t v10 = v8 - v19;
      if (v8 == v19) {
        goto LABEL_19;
      }
    }
    bzero((char *)v18 + 8 * v9, 8 * v10);
LABEL_19:
    uint64_t v12 = 0;
    LODWORD(v19) = v8;
    while (1)
    {
      uint64_t v13 = (uint64_t *)((char *)v18 + v12);
      uint64_t *v13 = -(*v13 & 1) ^ ((unint64_t)*v13 >> 1);
      v12 += 8;
      if (!--v8)
      {
        unsigned int v11 = v19;
        goto LABEL_23;
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    uint64_t v14 = v18;
    if (v18 == v20) {
      return;
    }
LABEL_24:
    free(v14);
    return;
  }
  unsigned int v11 = 0;
LABEL_23:
  llvm::APInt::APInt((uint64_t)&v15, a2, v18, v11);
  *(_DWORD *)(a3 + 8) = v16;
  *(void *)a3 = v15;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v14 = v18;
  if (v18 != v20) {
    goto LABEL_24;
  }
}

void anonymous namespace'::DialectReader::readAPFloatWithKnownSemantics(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  void v13[3] = *MEMORY[0x1E4F143B8];
  uint64_t SizeInBits = llvm::APFloatBase::getSizeInBits((uint64_t)a2);
  unint64_t v7 = (llvm::APFloatBase *)(*(void *(**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(&__p, a1, SizeInBits);
  if (!v12)
  {
    *a3 = 0;
    a3[32] = 0;
    return;
  }
  unint64_t v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == a2)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, (uint64_t)a2, (uint64_t)&__p);
    uint64_t v9 = a3 + 8;
    if (v8 != (void *)v13[0])
    {
LABEL_4:
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v13);
      a3[32] = 1;
      if (v8 != (void *)v13[0]) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v13, a2, (const llvm::APInt **)&__p);
    uint64_t v9 = a3 + 8;
    if (v8 != (void *)v13[0]) {
      goto LABEL_4;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v13);
  a3[32] = 1;
  if (v8 != (void *)v13[0])
  {
LABEL_5:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
    if (!v12) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  if (!v12) {
    return;
  }
LABEL_11:
  if (v11 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

uint64_t anonymous namespace'::DialectReader::readString(_anonymous_namespace_::DialectReader *this, llvm::StringRef *a2)
{
  uint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v10 = 0;
    return 0;
  uint64_t v5 = (char *)v10;
  uint64_t v6 = *((void *)v4 + 3);
  uint64_t v7 = *(void *)v3;
  unsigned int v8 = *(_DWORD *)(v3 + 8);

  return resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v6, v7, v8, v5, a2, (uint64_t)"string", 6);
}

uint64_t anonymous namespace'::DialectReader::readBlob(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v6 = 0;
  {
    return 0;
  }
  uint64_t v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  return 1;
}

uint64_t anonymous namespace'::DialectReader::readBool(_anonymous_namespace_::DialectReader *this, BOOL *a2)
{
}

void anonymous namespace'::DialectReader::readResourceHandle(_anonymous_namespace_::DialectReader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  uint64_t v4 = (_anonymous_namespace_::EncodingReader *)*((void *)this + 5);
  unint64_t v21 = 0;
    goto LABEL_25;
  uint64_t v5 = *((void *)v4 + 3);
  uint64_t v6 = *v3;
  unint64_t v7 = *((unsigned int *)v3 + 2);
  v23[0] = "resource handle";
  v23[1] = 15;
  int v22 = (char *)v21;
  if (v21 >= v7)
  {
    char v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      char v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v30;
        uint64_t v14 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v30 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v27;
      if (v27)
      {
        int v16 = v28;
        unint64_t v17 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            long long v18 = v19;
            void *v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          unint64_t v17 = v27;
        }
        uint64_t v28 = v15;
        operator delete(v17);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
    if (v11)
    {
      uint64_t v9 = 0;
      *(void *)&long long v10 = &mlir::detail::TypeIDResolver<void,void>::id;
      goto LABEL_24;
    }
LABEL_25:
    char v20 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_26;
  }
  unint64_t v8 = (uint64_t *)(v6 + 24 * v21);
  uint64_t v9 = *v8;
  long long v10 = *(_OWORD *)(v8 + 1);
LABEL_24:
  *(void *)a2 = v9;
  *(_OWORD *)(a2 + 8) = v10;
  char v20 = 1;
LABEL_26:
  *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v20;
}

BOOL anonymous namespace'::BytecodeDialect::load(uint64_t a1, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  Dialect = mlir::MLIRContext::getOrLoadDialect((uint64_t)a3, *(void **)(a1 + 24), *(void *)(a1 + 32));
  if (Dialect)
  {
    uint64_t v9 = (uint64_t)Dialect;
    *(void *)a1 = Dialect;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)Dialect);
    if (v10) {
      uint64_t v10 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(v9);
    }
    *(void *)(a1 + 16) = v10;
    char v11 = *(const char **)(a1 + 48);
    if (!v11) {
      return 1;
    }
    goto LABEL_11;
  }
  if (mlir::MLIRContext::allowsUnregisteredDialects(a3))
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    char v11 = *(const char **)(a1 + 48);
    if (!v11) {
      return 1;
    }
LABEL_11:
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v14 = *(void *)(*(void *)(a2 + 40) + 24);
      unsigned int v49 = *(const void ***)(a1 + 40);
      uint64_t v50 = v11;
      uint64_t v51 = (uint64_t)v49;
      uint64_t v52 = v14;
      unint64_t v54 = &unk_1EC997A88;
      long long v15 = *(_OWORD *)(a2 + 24);
      long long v55 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)unint64_t v56 = v15;
      v57[0] = &v49;
      v57[1] = v13;
      (*(void (**)(void *__return_ptr))(*(void *)v12 + 56))(v47);
      uint64_t v16 = v47[0];
      v47[0] = 0;
      uint64_t v17 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        uint64_t v18 = v47[0];
        v47[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        uint64_t v16 = *(void *)(a1 + 56);
      }
      return v16 != 0;
    }
    v47[0] = "dialect '";
    __int16 v48 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, void *))(*(void *)a2 + 16))(&v54, a2, v47);
    if (v54)
    {
      __int16 v53 = 261;
      uint64_t v19 = *(const char **)(a1 + 32);
      unsigned int v49 = *(const void ***)(a1 + 24);
      uint64_t v50 = v19;
      mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
      if (v54)
      {
        LODWORD(v49) = 3;
        uint64_t v50 = "' does not implement the bytecode interface, but found a version entry";
        uint64_t v51 = 70;
        char v20 = &v49;
        unint64_t v21 = (char *)v56[0];
        if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
        {
          unint64_t v43 = LODWORD(v56[1]) + 1;
          if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
          {
            int64_t v45 = (char *)&v49 - (char *)v56[0];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            unint64_t v21 = (char *)v56[0];
            char v20 = (const void ***)((char *)v56[0] + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v43, 24);
            char v20 = &v49;
            unint64_t v21 = (char *)v56[0];
          }
        }
        int v22 = &v21[24 * LODWORD(v56[1])];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)int v22 = v23;
        ++LODWORD(v56[1]);
      }
    }
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    }
    if (v62)
    {
      unsigned int v24 = (void **)__p;
      if (__p)
      {
        int v25 = v61;
        uint64_t v26 = __p;
        if (v61 != __p)
        {
          do
            int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          uint64_t v26 = __p;
        }
        unint64_t v61 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v58;
      if (!v58) {
        goto LABEL_56;
      }
      uint64_t v28 = v59;
      uint64_t v29 = v58;
      if (v59 == v58)
      {
LABEL_55:
        unint64_t v59 = v27;
        operator delete(v29);
LABEL_56:
        if (v56[0] != v57) {
          free(v56[0]);
        }
        return v3;
      }
      do
      {
        char v31 = (void *)*--v28;
        uint64_t v30 = v31;
        *uint64_t v28 = 0;
        if (v31) {
          operator delete[](v30);
        }
      }
      while (v28 != v27);
LABEL_54:
      uint64_t v29 = v58;
      goto LABEL_55;
    }
    return v3;
  }
  v47[0] = "dialect '";
  __int16 v48 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, void *))(*(void *)a2 + 16))(&v54, a2, v47);
  if (v54)
  {
    __int16 v53 = 261;
    uint64_t v32 = *(const char **)(a1 + 32);
    unsigned int v49 = *(const void ***)(a1 + 24);
    uint64_t v50 = v32;
    mlir::Diagnostic::operator<<((uint64_t)&v55, &v49);
    if (v54)
    {
      LODWORD(v49) = 3;
      uint64_t v50 = "' is unknown. If this is intended, please call allowUnregisteredDialects() on the MLIRContext, or use -allow"
            "-unregistered-dialect with the MLIR tool used.";
      uint64_t v51 = 154;
      char v33 = &v49;
      uint64_t v34 = (char *)v56[0];
      if (LODWORD(v56[1]) >= HIDWORD(v56[1]))
      {
        unint64_t v44 = LODWORD(v56[1]) + 1;
        if (v56[0] <= &v49 && (char *)v56[0] + 24 * LODWORD(v56[1]) > (char *)&v49)
        {
          int64_t v46 = (char *)&v49 - (char *)v56[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          uint64_t v34 = (char *)v56[0];
          char v33 = (const void ***)((char *)v56[0] + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v57, v44, 24);
          char v33 = &v49;
          uint64_t v34 = (char *)v56[0];
        }
      }
      size_t v35 = &v34[24 * LODWORD(v56[1])];
      long long v36 = *(_OWORD *)v33;
      *((void *)v35 + 2) = v33[2];
      *(_OWORD *)size_t v35 = v36;
      ++LODWORD(v56[1]);
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  }
  if (v62)
  {
    int v37 = (void **)__p;
    if (__p)
    {
      uint64_t v38 = v61;
      unsigned __int8 v39 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      unint64_t v61 = v37;
      operator delete(v39);
    }
    uint64_t v27 = v58;
    if (!v58) {
      goto LABEL_56;
    }
    uint64_t v40 = v59;
    uint64_t v29 = v58;
    if (v59 == v58) {
      goto LABEL_55;
    }
    do
    {
      long long v42 = (void *)*--v40;
      uint64_t v41 = v42;
      *uint64_t v40 = 0;
      if (v42) {
        operator delete[](v41);
      }
    }
    while (v40 != v27);
    goto LABEL_54;
  }
  return v3;
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeDialectInterface]";
      unint64_t v22 = 80;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      long long v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 2768);
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

uint64_t anonymous namespace'::AttrTypeReader::resolveAttribute(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)this + 8) <= a2)
  {
    mlir::emitError(*((void *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      uint64_t v76 = (uint64_t)"invalid ";
      *(void *)&long long v77 = 8;
      unsigned int v24 = &v75;
      int v25 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          int64_t v64 = (char *)&v75 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          int v25 = (char *)v84;
          unsigned int v24 = (const void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          unsigned int v24 = &v75;
          int v25 = (char *)v84;
        }
      }
      uint64_t v26 = &v25[24 * v85];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        uint64_t v75 = (const void **)"Attribute";
        uint64_t v76 = 9;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          uint64_t v76 = (uint64_t)" index: ";
          *(void *)&long long v77 = 8;
          uint64_t v28 = &v75;
          uint64_t v29 = (char *)v84;
          if (v85 >= v86)
          {
            unint64_t v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              int64_t v65 = (char *)&v75 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v29 = (char *)v84;
              uint64_t v28 = (const void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v28 = &v75;
              uint64_t v29 = (char *)v84;
            }
          }
          uint64_t v30 = &v29[24 * v85];
          long long v31 = *(_OWORD *)v28;
          *((void *)v30 + 2) = v28[2];
          *(_OWORD *)uint64_t v30 = v31;
          uint64_t v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            uint64_t v76 = a2;
            char v33 = &v75;
            uint64_t v34 = (char *)v84;
            if (v32 >= v86)
            {
              unint64_t v62 = v32 + 1;
              BOOL v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                int64_t v66 = (char *)&v75 - (unsigned char *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                uint64_t v34 = (char *)v84;
                char v33 = (const void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                char v33 = &v75;
                uint64_t v34 = (char *)v84;
              }
            }
            size_t v35 = &v34[24 * v85];
            long long v36 = *(_OWORD *)v33;
            *((void *)v35 + 2) = v33[2];
            *(_OWORD *)size_t v35 = v36;
            ++v85;
            if (v82) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
            }
          }
        }
      }
    }
    if (!v92) {
      return 0;
    }
    int v37 = (void **)__p;
    if (__p)
    {
      uint64_t v38 = v91;
      unsigned __int8 v39 = __p;
      if (v91 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      int32x4_t v91 = v37;
      operator delete(v39);
    }
    uint64_t v40 = v88;
    if (!v88) {
      goto LABEL_71;
    }
    uint64_t v41 = v89;
    long long v42 = v88;
    if (v89 == v88) {
      goto LABEL_70;
    }
    do
    {
      unint64_t v44 = (void *)*--v41;
      unint64_t v43 = v44;
      *uint64_t v41 = 0;
      if (v44) {
        operator delete[](v43);
      }
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v4 + 40 * a2;
  uint64_t result = *(void *)v5;
  if (*(void *)v5) {
    return result;
  }
  uint64_t v7 = v4 + 40 * a2;
  long long v9 = *(_OWORD *)(v7 + 24);
  int v8 = (_OWORD *)(v7 + 24);
  uint64_t v10 = *((void *)this + 17);
  long long v72 = v9;
  uint64_t v73 = v9;
  uint64_t v74 = v10;
  if (!*((unsigned char *)v8 - 8))
  {
    uint64_t v75 = (const void **)"Attribute";
    uint64_t v76 = 9;
    BOOL v67 = 0;
    unint64_t v68 = 0;
    {
      unint64_t v81 = 0;
      uint64_t Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseAttribute(v67, v68, Context, 0, &v81, 1);
    }
    return 0;
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = *((void *)this + 18);
  uint64_t v75 = (const void **)&unk_1EC997A88;
  uint64_t v76 = (uint64_t)this;
  long long v77 = *(_OWORD *)this;
  uint64_t v78 = v11;
  uint64_t v79 = &v72;
  uint64_t v80 = v12;
  uint64_t v13 = v4 + 40 * a2;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v14 = v13 + 8;
  unint64_t v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    uint64_t v17 = *((void *)this + 19);
    uint64_t v18 = *(unsigned int *)(v17 + 56);
    if (v18)
    {
      uint64_t v19 = *(void **)(v17 + 48);
      uint64_t v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(void, const void ***, void, void, uint64_t))(*(void *)*v19 + 16))(*v19, &v75, *(void *)(*(void *)v14 + 24), *(void *)(*(void *)v14 + 32), v5))
      {
        if (*(void *)v5) {
          goto LABEL_54;
        }
        long long v72 = *v8;
        uint64_t v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v21 = *(void *)(*(void *)v14 + 16);
    if (v21)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, const void ***))(*(void *)v21 + 16))(v21, &v75);
      *(void *)uint64_t v5 = v22;
      char v23 = v22 != 0;
    }
    else
    {
      char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v92)
      {
        int64_t v46 = (void **)__p;
        if (__p)
        {
          uint64_t v47 = v91;
          __int16 v48 = __p;
          if (v91 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            __int16 v48 = __p;
          }
          int32x4_t v91 = v46;
          operator delete(v48);
        }
        unsigned int v49 = v88;
        if (v88)
        {
          uint64_t v50 = v89;
          uint64_t v51 = v88;
          if (v89 != v88)
          {
            do
            {
              __int16 v53 = (void *)*--v50;
              uint64_t v52 = v53;
              void *v50 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v50 != v49);
            uint64_t v51 = v88;
          }
          unsigned int v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87) {
          free(v84);
        }
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (void)v72 + *((void *)&v72 + 1)) {
        return *(void *)v5;
      }
      __int16 v71 = 1283;
      BOOL v67 = "unexpected trailing bytes after ";
      int64_t v69 = "Attribute";
      uint64_t v70 = 9;
      uint64_t v75 = (const void **)&v67;
      *(void *)&long long v77 = " entry";
      LOWORD(v78) = 770;
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (!v92) {
        return 0;
      }
      unint64_t v54 = (void **)__p;
      if (__p)
      {
        long long v55 = v91;
        unint64_t v56 = __p;
        if (v91 != __p)
        {
          do
            long long v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          unint64_t v56 = __p;
        }
        int32x4_t v91 = v54;
        operator delete(v56);
      }
      uint64_t v40 = v88;
      if (!v88) {
        goto LABEL_71;
      }
      uint64_t v57 = v89;
      long long v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        unsigned int v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87) {
          free(v84);
        }
        return 0;
      }
      do
      {
        unint64_t v59 = (void *)*--v57;
        unint64_t v58 = v59;
        void *v57 = 0;
        if (v59) {
          operator delete[](v58);
        }
      }
      while (v57 != v40);
LABEL_69:
      long long v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

void anonymous namespace'::EncodingReader::emitError<llvm::Twine>(uint64_t a1, uint64_t a2, const void ***a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v27, a3);
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v11 = (void **)__p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = (void *)*--v14;
              unint64_t v16 = v17;
              void *v14 = 0;
              if (v17) {
                operator delete[](v16);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v19 = (void **)__p[1];
      uint64_t v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          int v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[10],llvm::StringRef &,char const(&)[44]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "dialect '", a3, "' does not implement the bytecode interface");
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v11 = (void **)__p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = (void *)*--v14;
              unint64_t v16 = v17;
              void *v14 = 0;
              if (v17) {
                operator delete[](v16);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v19 = (void **)__p[1];
      uint64_t v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          int v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>((uint64_t)&v29, "trailing characters found after ", a3, " assembly format: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        uint64_t v12 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v13 = (void **)__p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        uint64_t v15 = v35[0];
        if (v35[0])
        {
          unint64_t v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = (void *)*--v16;
              uint64_t v18 = v19;
              void *v16 = 0;
              if (v19) {
                operator delete[](v18);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v21 = (void **)__p[1];
      uint64_t v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    char v23 = v35[0];
    if (v35[0])
    {
      unsigned int v24 = v35[1];
      int v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = (void *)*--v24;
          uint64_t v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        int v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[33],llvm::StringRef &,char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  char v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  uint64_t v22 = *(const void ***)a3;
  char v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[19],llvm::StringRef>(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v18) = 3;
  unint64_t v19 = __s;
  size_t v20 = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  size_t v10 = &v18;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v15 = v9 + 1;
    BOOL v16 = v8 + 24 * v9 > (unint64_t)&v18;
    if (v8 <= (unint64_t)&v18 && v16)
    {
      uint64_t v17 = (char *)&v18 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      size_t v10 = (const void ***)&v17[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v15, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      size_t v10 = &v18;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  __int16 v21 = 261;
  uint64_t v13 = *(char **)(a3 + 8);
  uint64_t v18 = *(const void ***)a3;
  unint64_t v19 = v13;
  mlir::Diagnostic::operator<<(a1, &v18);
  return a1;
}

uint64_t anonymous namespace'::AttrTypeReader::resolveType(_anonymous_namespace_::AttrTypeReader *this, unint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)this + 22) <= a2)
  {
    mlir::emitError(*((void *)this + 17), (uint64_t)&v82);
    if (v82)
    {
      LODWORD(v75) = 3;
      uint64_t v76 = (uint64_t)"invalid ";
      *(void *)&long long v77 = 8;
      size_t v24 = &v75;
      __int16 v25 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v60 = v85 + 1;
        if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
        {
          int64_t v64 = (char *)&v75 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          __int16 v25 = (char *)v84;
          size_t v24 = (const void ***)((char *)v84 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
          size_t v24 = &v75;
          __int16 v25 = (char *)v84;
        }
      }
      uint64_t v26 = &v25[24 * v85];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      ++v85;
      if (v82)
      {
        LOWORD(v78) = 261;
        uint64_t v75 = (const void **)"Type";
        uint64_t v76 = 4;
        mlir::Diagnostic::operator<<((uint64_t)&v83, &v75);
        if (v82)
        {
          LODWORD(v75) = 3;
          uint64_t v76 = (uint64_t)" index: ";
          *(void *)&long long v77 = 8;
          uint64_t v28 = &v75;
          uint64_t v29 = (char *)v84;
          if (v85 >= v86)
          {
            unint64_t v61 = v85 + 1;
            if (v84 <= &v75 && (char *)v84 + 24 * v85 > (char *)&v75)
            {
              int64_t v65 = (char *)&v75 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v29 = (char *)v84;
              uint64_t v28 = (const void ***)((char *)v84 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
              uint64_t v28 = &v75;
              uint64_t v29 = (char *)v84;
            }
          }
          int v30 = &v29[24 * v85];
          long long v31 = *(_OWORD *)v28;
          *((void *)v30 + 2) = v28[2];
          *(_OWORD *)int v30 = v31;
          uint64_t v32 = ++v85;
          if (v82)
          {
            LODWORD(v75) = 5;
            uint64_t v76 = a2;
            int v33 = &v75;
            uint64_t v34 = (char *)v84;
            if (v32 >= v86)
            {
              unint64_t v62 = v32 + 1;
              BOOL v63 = (char *)v84 + 24 * v32 > (char *)&v75;
              if (v84 <= &v75 && v63)
              {
                int64_t v66 = (char *)&v75 - (unsigned char *)v84;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                uint64_t v34 = (char *)v84;
                int v33 = (const void ***)((char *)v84 + v66);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
                int v33 = &v75;
                uint64_t v34 = (char *)v84;
              }
            }
            size_t v35 = &v34[24 * v85];
            long long v36 = *(_OWORD *)v33;
            *((void *)v35 + 2) = v33[2];
            *(_OWORD *)size_t v35 = v36;
            ++v85;
            if (v82) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
            }
          }
        }
      }
    }
    if (!v92) {
      return 0;
    }
    unsigned __int8 v37 = (void **)__p;
    if (__p)
    {
      uint64_t v38 = v91;
      unsigned __int8 v39 = __p;
      if (v91 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        unsigned __int8 v39 = __p;
      }
      int32x4_t v91 = v37;
      operator delete(v39);
    }
    uint64_t v40 = v88;
    if (!v88) {
      goto LABEL_71;
    }
    uint64_t v41 = v89;
    long long v42 = v88;
    if (v89 == v88) {
      goto LABEL_70;
    }
    do
    {
      unint64_t v44 = (void *)*--v41;
      unint64_t v43 = v44;
      *uint64_t v41 = 0;
      if (v44) {
        operator delete[](v43);
      }
    }
    while (v41 != v40);
    goto LABEL_69;
  }
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = v4 + 40 * a2;
  uint64_t result = *(void *)v5;
  if (*(void *)v5) {
    return result;
  }
  uint64_t v7 = v4 + 40 * a2;
  long long v9 = *(_OWORD *)(v7 + 24);
  unint64_t v8 = (_OWORD *)(v7 + 24);
  uint64_t v10 = *((void *)this + 17);
  long long v72 = v9;
  uint64_t v73 = v9;
  uint64_t v74 = v10;
  if (!*((unsigned char *)v8 - 8))
  {
    uint64_t v75 = (const void **)"Type";
    uint64_t v76 = 4;
    BOOL v67 = 0;
    unint64_t v68 = 0;
    {
      unint64_t v81 = 0;
      uint64_t Context = (uint64_t **)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
      mlir::parseType(v67, v68, Context, &v81, 1);
    }
    return 0;
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = *((void *)this + 18);
  uint64_t v75 = (const void **)&unk_1EC997A88;
  uint64_t v76 = (uint64_t)this;
  long long v77 = *(_OWORD *)this;
  uint64_t v78 = v11;
  uint64_t v79 = &v72;
  uint64_t v80 = v12;
  uint64_t v13 = v4 + 40 * a2;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v14 = v13 + 8;
  BOOL v16 = (mlir::MLIRContext *)mlir::Attribute::getContext((_anonymous_namespace_::AttrTypeReader *)((char *)this + 136));
  {
    uint64_t v17 = *((void *)this + 19);
    uint64_t v18 = *(unsigned int *)(v17 + 120);
    if (v18)
    {
      unint64_t v19 = *(void **)(v17 + 112);
      uint64_t v20 = 8 * v18;
      while ((*(unsigned __int8 (**)(void, const void ***, void, void, uint64_t))(*(void *)*v19 + 16))(*v19, &v75, *(void *)(*(void *)v14 + 24), *(void *)(*(void *)v14 + 32), v5))
      {
        if (*(void *)v5) {
          goto LABEL_54;
        }
        long long v72 = *v8;
        uint64_t v73 = v72;
        ++v19;
        v20 -= 8;
        if (!v20) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v21 = *(void *)(*(void *)v14 + 16);
    if (v21)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, const void ***))(*(void *)v21 + 24))(v21, &v75);
      *(void *)uint64_t v5 = v22;
      char v23 = v22 != 0;
    }
    else
    {
      char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v92)
      {
        int64_t v46 = (void **)__p;
        if (__p)
        {
          uint64_t v47 = v91;
          __int16 v48 = __p;
          if (v91 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            __int16 v48 = __p;
          }
          int32x4_t v91 = v46;
          operator delete(v48);
        }
        unsigned int v49 = v88;
        if (v88)
        {
          uint64_t v50 = v89;
          uint64_t v51 = v88;
          if (v89 != v88)
          {
            do
            {
              __int16 v53 = (void *)*--v50;
              uint64_t v52 = v53;
              void *v50 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v50 != v49);
            uint64_t v51 = v88;
          }
          unsigned int v89 = v49;
          operator delete(v51);
        }
        if (v84 != v87) {
          free(v84);
        }
      }
    }
    if (v23)
    {
LABEL_54:
      if (v73 == (void)v72 + *((void *)&v72 + 1)) {
        return *(void *)v5;
      }
      __int16 v71 = 1283;
      BOOL v67 = "unexpected trailing bytes after ";
      int64_t v69 = "Type";
      uint64_t v70 = 4;
      uint64_t v75 = (const void **)&v67;
      *(void *)&long long v77 = " entry";
      LOWORD(v78) = 770;
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (!v92) {
        return 0;
      }
      unint64_t v54 = (void **)__p;
      if (__p)
      {
        long long v55 = v91;
        unint64_t v56 = __p;
        if (v91 != __p)
        {
          do
            long long v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          unint64_t v56 = __p;
        }
        int32x4_t v91 = v54;
        operator delete(v56);
      }
      uint64_t v40 = v88;
      if (!v88) {
        goto LABEL_71;
      }
      uint64_t v57 = v89;
      long long v42 = v88;
      if (v89 == v88)
      {
LABEL_70:
        unsigned int v89 = v40;
        operator delete(v42);
LABEL_71:
        if (v84 != v87) {
          free(v84);
        }
        return 0;
      }
      do
      {
        unint64_t v59 = (void *)*--v57;
        unint64_t v58 = v59;
        void *v57 = 0;
        if (v59) {
          operator delete[](v58);
        }
      }
      while (v57 != v40);
LABEL_69:
      long long v42 = v88;
      goto LABEL_70;
    }
  }
  return 0;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<BOOL>(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        size_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v16;
      if (v16)
      {
        long long v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = (void *)*--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        uint64_t v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2 != 0;
    return 1;
  }
  return v3;
}

uint64_t anonymous namespace'::EncodingReader::parseByte<mlir::AsmResourceEntryKind>(void *a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int8 *)a1[2];
  if (v2 == (unsigned __int8 *)(*a1 + a1[1]))
  {
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
    if (v13[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
    }
    if (v20)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        size_t v6 = v19;
        uint64_t v7 = __p;
        if (v19 != __p)
        {
          do
            size_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v19 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v16;
      if (v16)
      {
        long long v9 = v17;
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            uint64_t v12 = (void *)*--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          uint64_t v10 = v16;
        }
        uint64_t v17 = v8;
        operator delete(v10);
      }
      if (v14 != &v15) {
        free(v14);
      }
    }
  }
  else
  {
    a1[2] = v2 + 1;
    *a2 = *v2;
    return 1;
  }
  return v3;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[46],llvm::StringRef &,char const(&)[2]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v26);
  uint64_t v5 = v26;
  if (v26)
  {
    mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v27, "unexpected trailing bytes in resource entry '", a3, "'");
    uint64_t v5 = v26;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v37)
  {
    *(void *)(a1 + 8) = v27;
    unint64_t v6 = v30;
    *(_DWORD *)(a1 + 16) = v28;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v6 || &v26 == (uint64_t *)a1)
    {
      int v8 = 1;
      goto LABEL_16;
    }
    if (__src != v32)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v7 = v31;
      *(_DWORD *)(a1 + 32) = v6;
      *(_DWORD *)(a1 + 36) = v7;
      __src = v32;
      int v31 = 0;
      int v8 = 1;
LABEL_15:
      unsigned int v30 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v33;
      *(void *)(a1 + 152) = v34;
      v33[0] = 0;
      v33[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v36;
      uint64_t v34 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v8)
      {
        uint64_t v10 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v11 = (void **)__p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
        uint64_t v13 = v33[0];
        if (v33[0])
        {
          uint64_t v14 = v33[1];
          uint64_t v15 = v33[0];
          if (v33[1] != v33[0])
          {
            do
            {
              uint64_t v17 = (void *)*--v14;
              BOOL v16 = v17;
              void *v14 = 0;
              if (v17) {
                operator delete[](v16);
              }
            }
            while (v14 != v13);
            uint64_t v15 = v33[0];
          }
          v33[1] = v13;
          operator delete(v15);
        }
        if (__src != v32) {
          free(__src);
        }
        unsigned __int8 v37 = 0;
      }
      goto LABEL_33;
    }
    if (v6 < 5)
    {
      unint64_t v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v6, 24);
      unint64_t v9 = v30;
      if (!v30) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v9);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v6;
    int v8 = v37;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v37)
  {
    uint64_t v18 = (void **)__p[0];
    if (__p[0])
    {
      unint64_t v19 = (void **)__p[1];
      char v20 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        char v20 = __p[0];
      }
      __p[1] = v18;
      operator delete(v20);
    }
    uint64_t v21 = v33[0];
    if (v33[0])
    {
      uint64_t v22 = v33[1];
      char v23 = v33[0];
      if (v33[1] != v33[0])
      {
        do
        {
          __int16 v25 = (void *)*--v22;
          size_t v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        char v23 = v33[0];
      }
      v33[1] = v21;
      operator delete(v23);
    }
    if (__src != v32) {
      free(__src);
    }
  }
}

void anonymous namespace'::ParsedResourceEntry::emitError(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
}

double anonymous namespace'::ParsedResourceEntry::parseAsString@<D0>(_anonymous_namespace_::ParsedResourceEntry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 6) == 2)
  {
    long long __src = 0uLL;
    uint64_t v4 = (uint64_t *)*((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
    *(void *)&long long __dst = 0;
    {
      int v7 = (const void *)__src;
      if (!(void)__src)
      {
        long long __dst = 0uLL;
        unint64_t v39 = 0;
LABEL_41:
        *(void *)&long long v6 = __dst;
        *(_OWORD *)a2 = __dst;
        *(void *)(a2 + 16) = v39;
        *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
        return *(double *)&v6;
      }
      size_t v8 = *((void *)&__src + 1);
      if (*((void *)&__src + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
        abort();
      }
      if (*((void *)&__src + 1) >= 0x17uLL)
      {
        uint64_t v28 = (*((void *)&__src + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*((void *)&__src + 1) | 7) != 0x17) {
          uint64_t v28 = *((void *)&__src + 1) | 7;
        }
        uint64_t v29 = v28 + 1;
        p_dst = (long long *)operator new(v28 + 1);
        *((void *)&__dst + 1) = v8;
        unint64_t v39 = v29 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v39) = BYTE8(__src);
        p_dst = &__dst;
        if (!*((void *)&__src + 1)) {
          goto LABEL_40;
        }
      }
      memmove(p_dst, v7, v8);
LABEL_40:
      *((unsigned char *)p_dst + v8) = 0;
      goto LABEL_41;
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  }
  else
  {
    mlir::emitError(*(void *)(*((void *)this + 4) + 24), (uint64_t)&__dst);
    if ((void)__dst)
    {
      LODWORD(__src) = 3;
      *((void *)&__src + 1) = "expected a string resource entry, but found a ";
      uint64_t v36 = 46;
      p_src = &__src;
      uint64_t v11 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          int64_t v32 = (char *)&__src - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = (char *)v40;
          p_src = (long long *)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          p_src = &__src;
          uint64_t v11 = (char *)v40;
        }
      }
      uint64_t v12 = &v11[24 * v41];
      long long v13 = *p_src;
      *((void *)v12 + 2) = *((void *)p_src + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v41;
    }
    uint64_t v14 = mlir::toString(*((_DWORD *)this + 6));
    if ((void)__dst
      && (__int16 v37 = 261,
          *(void *)&long long __src = v14,
          *((void *)&__src + 1) = v15,
          mlir::Diagnostic::operator<<((uint64_t)&__dst + 8, (const void ***)&__src),
          (void)__dst))
    {
      LODWORD(__src) = 3;
      *((void *)&__src + 1) = " entry instead";
      uint64_t v36 = 14;
      BOOL v16 = &__src;
      uint64_t v17 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v31 = v41 + 1;
        if (v40 <= &__src && (char *)v40 + 24 * v41 > (char *)&__src)
        {
          int64_t v33 = (char *)&__src - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          uint64_t v17 = (char *)v40;
          BOOL v16 = (long long *)((char *)v40 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v31, 24);
          BOOL v16 = &__src;
          uint64_t v17 = (char *)v40;
        }
      }
      uint64_t v18 = &v17[24 * v41];
      long long v6 = *v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v6;
      ++v41;
      uint64_t v19 = __dst;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      if (v19) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__dst);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
    }
    if (v48)
    {
      char v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v47;
        uint64_t v22 = __p;
        if (v47 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        uint64_t v47 = v20;
        operator delete(v22);
      }
      char v23 = v44;
      if (v44)
      {
        size_t v24 = v45;
        __int16 v25 = v44;
        if (v45 != v44)
        {
          do
          {
            uint64_t v27 = (void *)*--v24;
            uint64_t v26 = v27;
            void *v24 = 0;
            if (v27) {
              operator delete[](v26);
            }
          }
          while (v24 != v23);
          __int16 v25 = v44;
        }
        int64_t v45 = v23;
        operator delete(v25);
      }
      if (v40 != v43) {
        free(v40);
      }
    }
  }
  return *(double *)&v6;
}

void anonymous namespace'::ParsedResourceEntry::parseAsBlob(uint64_t a1@<X0>, void (*a2)(void **__return_ptr, uint64_t, void *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 24))
  {
    mlir::emitError(*(void *)(*(void *)(a1 + 32) + 24), (uint64_t)__dst);
    if (__dst[0])
    {
      v63.n128_u32[0] = 3;
      v63.n128_u64[1] = (unint64_t)"expected a blob resource entry, but found a ";
      uint64_t v64 = 44;
      long long v6 = &v63;
      unint64_t v7 = v54.n128_u64[0];
      if (v54.n128_u32[2] >= v54.n128_u32[3])
      {
        unint64_t v43 = v54.n128_u32[2] + 1;
        if (v54.n128_u64[0] <= (unint64_t)&v63
          && v54.n128_u64[0] + 24 * (unint64_t)v54.n128_u32[2] > (unint64_t)&v63)
        {
          int64_t v45 = (char *)&v63 - v54.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v43, 24);
          unint64_t v7 = v54.n128_u64[0];
          long long v6 = (__n128 *)&v45[v54.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v43, 24);
          long long v6 = &v63;
          unint64_t v7 = v54.n128_u64[0];
        }
      }
      unint64_t v8 = v7 + 24 * v54.n128_u32[2];
      __n128 v9 = *v6;
      *(void *)(v8 + 16) = v6[1].n128_u64[0];
      *(__n128 *)unint64_t v8 = v9;
      ++v54.n128_u32[2];
    }
    uint64_t v10 = mlir::toString(*(_DWORD *)(a1 + 24));
    if (__dst[0]
      && (__int16 v66 = 261,
          v63.n128_u64[0] = (unint64_t)v10,
          v63.n128_u64[1] = v11,
          mlir::Diagnostic::operator<<((uint64_t)&__dst[1], (const void ***)&v63),
          __dst[0]))
    {
      v63.n128_u32[0] = 3;
      v63.n128_u64[1] = (unint64_t)" entry instead";
      uint64_t v64 = 14;
      uint64_t v12 = &v63;
      unint64_t v13 = v54.n128_u64[0];
      if (v54.n128_u32[2] >= v54.n128_u32[3])
      {
        unint64_t v44 = v54.n128_u32[2] + 1;
        if (v54.n128_u64[0] <= (unint64_t)&v63
          && v54.n128_u64[0] + 24 * (unint64_t)v54.n128_u32[2] > (unint64_t)&v63)
        {
          int64_t v46 = (char *)&v63 - v54.n128_u64[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v44, 24);
          unint64_t v13 = v54.n128_u64[0];
          uint64_t v12 = (__n128 *)&v46[v54.n128_u64[0]];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, &v55, v44, 24);
          uint64_t v12 = &v63;
          unint64_t v13 = v54.n128_u64[0];
        }
      }
      unint64_t v14 = v13 + 24 * v54.n128_u32[2];
      __n128 v15 = *v12;
      *(void *)(v14 + 16) = v12[1].n128_u64[0];
      *(__n128 *)unint64_t v14 = v15;
      ++v54.n128_u32[2];
      BOOL v16 = __dst[0];
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
      if (v16) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
      }
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 64) = 0;
    }
    if (v62)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v61;
        uint64_t v19 = __p;
        if (v61 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        unint64_t v61 = v17;
        operator delete(v19);
      }
      char v20 = v58;
      if (v58)
      {
        uint64_t v21 = v59;
        uint64_t v22 = v58;
        if (v59 != v58)
        {
          do
          {
            size_t v24 = (void *)*--v21;
            char v23 = v24;
            *uint64_t v21 = 0;
            if (v24) {
              operator delete[](v23);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v58;
        }
        unint64_t v59 = v20;
        operator delete(v22);
      }
      if ((uint64_t *)v54.n128_u64[0] != &v55) {
        free((void *)v54.n128_u64[0]);
      }
    }
    return;
  }
  long long __src = 0;
  uint64_t v49 = 0;
  *(void *)uint64_t v47 = 0;
  uint64_t v27 = *(_anonymous_namespace_::EncodingReader **)(a1 + 32);
    || (__dst[0] = 0,
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 64) = 0;
    return;
  }
  unint64_t v30 = *(unint64_t **)(a1 + 48);
  unint64_t v31 = *v30;
  if (*v30)
  {
    int64_t v33 = __src;
    int64_t v32 = v49;
    unint64_t v34 = v30[1];
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    v50.n128_u64[0] = v31;
    v50.n128_u64[1] = v34;
        + 6;
        + 6;
        + 6;
       + 6 <= 7)
    {
      __dst[0] = v33;
      __dst[1] = v32;
      uint64_t v53 = v29;
          + 6;
    }
    else
    {
                                                 + 8))(&v63, &v50);
      unint64_t v35 = v65;
      unint64_t v51 = 0;
      __dst[0] = v33;
      __dst[1] = v32;
      uint64_t v53 = v29;
      unint64_t v56 = (char *)v65;
      if (v65 <= 7)
      {
        char v39 = 0;
        char v57 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(void *)(a4 + 16) = v53;
        *(void *)(a4 + 48) = v35;
        goto LABEL_54;
      }
      if ((~(_BYTE)v65 & 6) != 0)
      {
        __n128 v54 = v63;
        uint64_t v55 = v64;
        char v57 = 0;
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(void *)(a4 + 16) = v53;
        *(void *)(a4 + 48) = v35;
LABEL_49:
        uint64_t v40 = (__n128 *)(a4 + 24);
        if ((v35 & 2) != 0 && (v35 & 4) != 0)
        {
          (*(void (**)(__n128 *, __n128 *))((v35 & 0xFFFFFFFFFFFFFFF8) + 8))(v40, &v54);
          char v39 = v57;
        }
        else
        {
          char v39 = 0;
          *uint64_t v40 = v54;
          *(void *)(a4 + 40) = v55;
        }
        unint64_t v56 = 0;
LABEL_54:
        *(unsigned char *)(a4 + 56) = v39;
        *(unsigned char *)(a4 + 64) = 1;
        char v41 = v51;
        if (v51 >= 8)
        {
          if ((v51 & 4) != 0)
          {
            if ((v51 & 2) != 0) {
              unsigned int v42 = &v50;
            }
            else {
              unsigned int v42 = (__n128 *)v50.n128_u64[0];
            }
            (*(void (**)(__n128 *))((v51 & 0xFFFFFFFFFFFFFFF8) + 16))(v42);
          }
          if ((v41 & 2) == 0) {
            llvm::deallocate_buffer((llvm *)v50.n128_u64[0], (void *)v50.n128_u64[1]);
          }
        }
        return;
      }
      (*(void (**)(__n128 *, __n128 *))((v65 & 0xFFFFFFFFFFFFFFF8) + 8))(&v54, &v63);
      unint64_t v35 = (unint64_t)v56;
    }
    char v39 = 0;
    char v57 = 0;
    *(_OWORD *)a4 = *(_OWORD *)__dst;
    *(void *)(a4 + 16) = v53;
    *(void *)(a4 + 48) = v35;
    if (v35 < 8) {
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  size_t v36 = (size_t)v49;
  a2(__dst, a3, v49, v29);
  memcpy(__dst[0], __src, v36);
  *(_OWORD *)a4 = *(_OWORD *)__dst;
  unint64_t v37 = (unint64_t)v56;
  *(void *)(a4 + 16) = v53;
  *(void *)(a4 + 48) = v37;
  if (v37 >= 8)
  {
    uint64_t v38 = (__n128 *)(a4 + 24);
    if ((v37 & 2) != 0 && (v37 & 4) != 0)
    {
      (*(void (**)(__n128 *, __n128 *))((v37 & 0xFFFFFFFFFFFFFFF8) + 8))(v38, &v54);
    }
    else
    {
      *uint64_t v38 = v54;
      *(void *)(a4 + 40) = v55;
    }
  }
  *(unsigned char *)(a4 + 56) = v57;
  *(unsigned char *)(a4 + 64) = 1;
}

__n128 llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::MoveImpl<anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::DestroyImpl<anonymous namespace'::ParsedResourceEntry::parseAsBlob(llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>)::{lambda(void *,unsigned long,unsigned long)#1}>(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>::callback_fn<anonymous namespace'::ResourceSectionReader::initialize(mlir::Location,mlir::ParserConfig const&,llvm::MutableArrayRef<std::unique_ptr<anonymous namespace'::BytecodeDialect>>,anonymous namespace'::StringSectionReader &,llvm::ArrayRef<unsigned char>,llvm::ArrayRef<unsigned char>,anonymous namespace'::DialectReader &,std::shared_ptr<llvm::SourceMgr> const&)::$_1>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  (*(void (**)(void *__return_ptr))(***(void ***)a1 + 32))(v49);
  if (v50)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)a1 + 40))(&v55);
    unint64_t v7 = llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>(v6 + 64, a2, a3);
    uint64_t v8 = *v7 + 8;
    if (*(char *)(*v7 + 31) < 0) {
      operator delete(*(void **)v8);
    }
    long long v9 = v55;
    *(void *)(v8 + 16) = v56;
    *(_OWORD *)uint64_t v8 = v9;
    uint64_t v10 = *(unsigned int *)(v6 + 8);
    unint64_t v11 = *(void *)v6;
    uint64_t v12 = (char *)v49;
    if (v10 >= *(_DWORD *)(v6 + 12))
    {
      unint64_t v40 = v10 + 1;
      BOOL v41 = v11 + 24 * v10 > (unint64_t)v49;
      if (v11 <= (unint64_t)v49 && v41)
      {
        int64_t v45 = (char *)v49 - v11;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v40, 24);
        unint64_t v11 = *(void *)v6;
        uint64_t v12 = &v45[*(void *)v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v40, 24);
        unint64_t v11 = *(void *)v6;
        uint64_t v12 = (char *)v49;
      }
    }
    uint64_t v13 = v11 + 24 * *(unsigned int *)(v6 + 8);
    long long v14 = *(_OWORD *)v12;
    *(void *)(v13 + 16) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    ++*(_DWORD *)(v6 + 8);
    return 1;
  }
  else
  {
    mlir::emitError(*(void *)(*(void *)(a1 + 8) + 24), (uint64_t)&v55);
    if ((void)v55)
    {
      LODWORD(v51) = 3;
      uint64_t v52 = "unknown 'resource' key '";
      uint64_t v53 = 24;
      uint64_t v17 = &v51;
      uint64_t v18 = (char *)v57;
      if (v58 >= v59)
      {
        unint64_t v42 = v58 + 1;
        if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
          uint64_t v18 = (char *)v57;
          uint64_t v17 = (const void ***)((char *)v57 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
          uint64_t v17 = &v51;
          uint64_t v18 = (char *)v57;
        }
      }
      uint64_t v19 = &v18[24 * v58];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      ++v58;
      if ((void)v55)
      {
        __int16 v54 = 261;
        unint64_t v51 = (const void **)a2;
        uint64_t v52 = (const char *)a3;
        mlir::Diagnostic::operator<<((uint64_t)&v55 + 8, &v51);
        if ((void)v55)
        {
          LODWORD(v51) = 3;
          uint64_t v52 = "' for dialect '";
          uint64_t v53 = 15;
          uint64_t v21 = &v51;
          uint64_t v22 = (char *)v57;
          if (v58 >= v59)
          {
            unint64_t v43 = v58 + 1;
            if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
            {
              int64_t v47 = (char *)&v51 - (unsigned char *)v57;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v43, 24);
              uint64_t v22 = (char *)v57;
              uint64_t v21 = (const void ***)((char *)v57 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v43, 24);
              uint64_t v21 = &v51;
              uint64_t v22 = (char *)v57;
            }
          }
          char v23 = &v22[24 * v58];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)char v23 = v24;
          ++v58;
          if ((void)v55)
          {
            uint64_t v25 = ***(void ***)(a1 + 16);
            __int16 v54 = 261;
            uint64_t v27 = *(const void ***)(v25 + 24);
            uint64_t v26 = *(const char **)(v25 + 32);
            unint64_t v51 = v27;
            uint64_t v52 = v26;
            mlir::Diagnostic::operator<<((uint64_t)&v55 + 8, &v51);
            if ((void)v55)
            {
              LODWORD(v51) = 3;
              uint64_t v52 = "'";
              uint64_t v53 = 1;
              int8x8_t v28 = &v51;
              uint64_t v29 = (char *)v57;
              if (v58 >= v59)
              {
                unint64_t v44 = v58 + 1;
                if (v57 <= &v51 && (char *)v57 + 24 * v58 > (char *)&v51)
                {
                  int64_t v48 = (char *)&v51 - (unsigned char *)v57;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  uint64_t v29 = (char *)v57;
                  int8x8_t v28 = (const void ***)((char *)v57 + v48);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  int8x8_t v28 = &v51;
                  uint64_t v29 = (char *)v57;
                }
              }
              unint64_t v30 = &v29[24 * v58];
              long long v31 = *(_OWORD *)v28;
              *((void *)v30 + 2) = v28[2];
              *(_OWORD *)unint64_t v30 = v31;
              ++v58;
            }
          }
        }
      }
    }
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
    if ((void)v55) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
    }
    if (v65)
    {
      int64_t v32 = (void **)__p;
      if (__p)
      {
        int64_t v33 = v64;
        unint64_t v34 = __p;
        if (v64 != __p)
        {
          do
            int64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          unint64_t v34 = __p;
        }
        uint64_t v64 = v32;
        operator delete(v34);
      }
      unint64_t v35 = v61;
      if (v61)
      {
        size_t v36 = v62;
        unint64_t v37 = v61;
        if (v62 != v61)
        {
          do
          {
            char v39 = (void *)*--v36;
            uint64_t v38 = v39;
            *size_t v36 = 0;
            if (v39) {
              operator delete[](v38);
            }
          }
          while (v36 != v35);
          unint64_t v37 = v61;
        }
        char v62 = v35;
        operator delete(v37);
      }
      if (v57 != v60) {
        free(v57);
      }
    }
  }
  return v15;
}

uint64_t *llvm::StringMap<std::string,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  unint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 33), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  void *buffer = a3;
  buffer[1] = 0;
  buffer[2] = 0;
  buffer[3] = 0;
  *unint64_t v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  unint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

void std::vector<mlir::Value>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    BOOL v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t mlir::BytecodeReader::Impl::parseAttribute<mlir::LocationAttr>(uint64_t a1, _anonymous_namespace_::EncodingReader *this, uint64_t *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v28 = 0;
    return 0;
  uint64_t v27 = v6;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  if (mlir::LocationAttr::classof(v6)) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  if (v8) {
    return 1;
  }
  unint64_t v28 = (unint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::LocationAttr]";
  unint64_t v29 = 68;
  unint64_t v11 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
  if (v29 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v29;
  }
  unint64_t v13 = v28 + v12;
  unint64_t v14 = v29 - v12;
  if (v29 - v12 >= 0x12) {
    uint64_t v15 = 18;
  }
  else {
    uint64_t v15 = v29 - v12;
  }
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 - v15;
  if (v17 >= v17 - 1) {
    --v17;
  }
  v26[0] = v16;
  v26[1] = v17;
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v36)
  {
    unint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v35;
      uint64_t v20 = __p;
      if (v35 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v35 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v32;
    if (v32)
    {
      uint64_t v22 = v33;
      uint64_t v23 = v32;
      if (v33 != v32)
      {
        do
        {
          uint64_t v25 = (void *)*--v22;
          long long v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v32;
      }
      int64_t v33 = v21;
      operator delete(v23);
    }
    if (v30 != &v31) {
      free(v30);
    }
  }
  return v9;
}

void mlir::BytecodeReader::Impl::parseUseListOrderForRange(mlir::BytecodeReader::Impl *this, _anonymous_namespace_::EncodingReader *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  v46[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unsigned int v40 = 0;
  unint64_t v5 = 1;
  unint64_t v37 = 1;
  if (a3 < 2) {
    goto LABEL_4;
  }
  {
    unint64_t v5 = v37;
    if (v37)
    {
LABEL_4:
      uint64_t v6 = 0;
      while (1)
      {
        unint64_t v36 = 0;
          goto LABEL_54;
        unint64_t v35 = 0;
          goto LABEL_54;
        unint64_t v7 = v35;
        unint64_t v8 = v35 >> 1;
        v35 >>= 1;
        long long __src = v46;
        uint64_t v45 = 0x400000000;
        if (v7 <= 1)
        {
          int v34 = v36;
          long long __dst = v43;
          unint64_t v42 = 0x400000000;
          goto LABEL_20;
        }
        unint64_t v9 = v5;
        unint64_t v10 = v3;
        uint64_t v11 = v8 <= 1 ? 1 : v8;
        long long __dst = 0;
          break;
        BOOL v26 = 1;
LABEL_44:
        *(unsigned char *)this = 0;
        *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
        unint64_t v3 = v10;
        unint64_t v5 = v9;
        uint64_t v25 = __src;
        if (__src == v46) {
          goto LABEL_37;
        }
LABEL_36:
        free(v25);
LABEL_37:
        if (v26) {
          goto LABEL_55;
        }
        if (++v6 == v5) {
          goto LABEL_62;
        }
      }
      unint64_t v12 = 0;
      uint64_t v13 = v11 - 1;
      while (1)
      {
        int v14 = (int)__dst;
        uint64_t v15 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v46, v45 + 1, 4);
          uint64_t v15 = v45;
        }
        *((_DWORD *)__src + v15) = v14;
        unint64_t v16 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
        if (v13 == v12) {
          break;
        }
        long long __dst = 0;
        ++v12;
        {
          BOOL v26 = v12 < v8;
          goto LABEL_44;
        }
      }
      int v34 = v36;
      long long __dst = v43;
      unint64_t v42 = 0x400000000;
      unint64_t v3 = v10;
      unint64_t v5 = v9;
      if (v16)
      {
        if (__src == v46)
        {
          unsigned int v27 = v16;
          if (v16 < 5
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v43, v16, 4), (unsigned int v27 = v45) != 0))
          {
            memcpy(__dst, __src, 4 * v27);
          }
          LODWORD(v42) = v16;
        }
        else
        {
          long long __dst = __src;
          unint64_t v42 = __PAIR64__(HIDWORD(v45), v16);
          long long __src = v46;
          HIDWORD(v45) = 0;
        }
        LODWORD(v45) = 0;
      }
LABEL_20:
      v43[16] = v7 & 1;
      if (v40)
      {
        unsigned int v17 = (37 * v34) & (v40 - 1);
        unint64_t v18 = (char *)v38 + 48 * v17;
        int v19 = *(_DWORD *)v18;
        if (v34 == *(_DWORD *)v18) {
          goto LABEL_33;
        }
        uint64_t v20 = 0;
        int v21 = 1;
        while (v19 != -1)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            uint64_t v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & (v40 - 1);
          unint64_t v18 = (char *)v38 + 48 * v17;
          int v19 = *(_DWORD *)v18;
          if (v34 == *(_DWORD *)v18) {
            goto LABEL_33;
          }
        }
        if (v20) {
          long long v24 = v20;
        }
        else {
          long long v24 = v18;
        }
      }
      else
      {
        long long v24 = 0;
      }
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>((uint64_t)&v38, v24, &v34, (uint64_t)&__dst);
LABEL_33:
      if (__dst != v43) {
        free(__dst);
      }
      BOOL v26 = 0;
      uint64_t v25 = __src;
      if (__src == v46) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_62:
    *(void *)this = v38;
    *((void *)this + 1) = v39;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *((_DWORD *)this + 4) = v40;
    unsigned int v40 = 0;
    *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
    unint64_t v28 = v38;
  }
  else
  {
LABEL_54:
    *(unsigned char *)this = 0;
    *((unsigned char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
LABEL_55:
    unint64_t v28 = v38;
    if (v40)
    {
      uint64_t v29 = 48 * v40;
      unint64_t v30 = (char *)v38 + 24;
      do
      {
        if (*((_DWORD *)v30 - 6) <= 0xFFFFFFFD)
        {
          uint64_t v31 = (char *)*((void *)v30 - 2);
          if (v30 != v31) {
            free(v31);
          }
        }
        v30 += 48;
        v29 -= 48;
      }
      while (v29);
      unint64_t v28 = v38;
      uint64_t v32 = 48 * v40;
LABEL_64:
      llvm::deallocate_buffer(v28, (void *)v32);
    }
  }
  uint64_t v32 = 0;
  goto LABEL_64;
}

void llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 12) >= a2) {
    return;
  }
  unint64_t v25 = 0;
  unint64_t v3 = (char *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v25);
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v8 = 8 * v6;
    if (v7 >= 0xB)
    {
      BOOL v11 = v5 >= &v4[v8] || v4 >= &v5[v8];
      unint64_t v9 = v4;
      unint64_t v10 = *(char **)a1;
      if (v11)
      {
        unint64_t v12 = v7 + 1;
        uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v9 = &v4[v13];
        unint64_t v10 = &v5[v13];
        int v14 = (long long *)(v5 + 16);
        uint64_t v15 = v4 + 16;
        uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v17 = *(v14 - 1);
          long long v18 = *v14;
          *(v14 - 1) = 0uLL;
          long long *v14 = 0uLL;
          *(v15 - 1) = v17;
          _OWORD *v15 = v18;
          v14 += 2;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_15:
          uint64_t v21 = *(void *)a1 - 8;
          do
          {
            BOOL v22 = *(mlir::Region **)(v21 + v8);
            *(void *)(v21 + v8) = 0;
            if (v22)
            {
              mlir::Region::~Region(v22);
              operator delete(v23);
            }
            v8 -= 8;
          }
          while (v8);
          unint64_t v5 = *(char **)a1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      unint64_t v9 = v4;
      unint64_t v10 = *(char **)a1;
    }
    int v19 = &v5[8 * v6];
    do
    {
      uint64_t v20 = *(void *)v10;
      *(void *)unint64_t v10 = 0;
      v10 += 8;
      *(void *)unint64_t v9 = v20;
      v9 += 8;
    }
    while (v10 != v19);
    goto LABEL_15;
  }
LABEL_20:
  int v24 = v25;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v24;
}

uint64_t mlir::BytecodeReader::Impl::defineValues(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  v60[0] = a3;
  v60[1] = a4;
  uint64_t v4 = a1[86];
  uint64_t v5 = *(void *)(v4 - 32) + 4 * *(unsigned int *)(v4 - 24);
  int v7 = *(_DWORD *)(v5 - 4);
  uint64_t v6 = (unsigned int *)(v5 - 4);
  unsigned int v48 = v7 + a4;
  unint64_t v8 = (uint64_t)(*(void *)(v4 - 48) - *(void *)(v4 - 56)) >> 3;
  if (v8 < (v7 + a4))
  {
    int64_t v47 = (char *)(v8 - 1);
    mlir::emitError(a2, (uint64_t)&v61);
    unint64_t v9 = v61;
    if (v61)
    {
      mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>((uint64_t)&v62, "value index range was outside of the expected range for the parent region, got [", v6, ", ", &v48, "), but the maximum index was ", &v47);
      unint64_t v9 = v61;
    }
    uint64_t v49 = v9;
    LOBYTE(v50) = 0;
    char v59 = 0;
    if (!v71) {
      goto LABEL_34;
    }
    uint64_t v50 = v62;
    int v10 = v65;
    int v51 = v63;
    BOOL v11 = v54;
    long long __dst = v54;
    uint64_t v53 = 0x400000000;
    if (!v65)
    {
      int v13 = 1;
      goto LABEL_30;
    }
    unint64_t v12 = __src;
    if (__src != v66)
    {
      long long __dst = __src;
      uint64_t v53 = v65;
      long long __src = v66;
      HIDWORD(v65) = 0;
      int v13 = 1;
LABEL_29:
      LODWORD(v65) = 0;
LABEL_30:
      *(_OWORD *)long long v55 = v67;
      uint64_t v56 = v68;
      long long v67 = 0uLL;
      *(_OWORD *)char v57 = __p;
      uint64_t v58 = v70;
      uint64_t v68 = 0;
      long long __p = 0uLL;
      uint64_t v70 = 0;
      char v59 = 1;
      if (v13)
      {
        if (__src != v66) {
          free(__src);
        }
        unsigned __int8 v71 = 0;
      }
LABEL_34:
      mlir::InFlightDiagnostic::abandon(&v61);
      if (v61) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v61);
      }
      if (v71)
      {
        unint64_t v30 = (void **)__p;
        if ((void)__p)
        {
          uint64_t v31 = (void **)*((void *)&__p + 1);
          uint64_t v32 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            uint64_t v32 = (void *)__p;
          }
          *((void *)&__p + 1) = v30;
          operator delete(v32);
        }
        int64_t v33 = (void *)v67;
        if ((void)v67)
        {
          int v34 = (void *)*((void *)&v67 + 1);
          unint64_t v35 = (void *)v67;
          if (*((void *)&v67 + 1) != (void)v67)
          {
            do
            {
              unint64_t v37 = (void *)*--v34;
              unint64_t v36 = v37;
              *int v34 = 0;
              if (v37) {
                operator delete[](v36);
              }
            }
            while (v34 != v33);
            unint64_t v35 = (void *)v67;
          }
          *((void *)&v67 + 1) = v33;
          operator delete(v35);
        }
        if (__src != v66) {
          free(__src);
        }
      }
      uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v49);
      if (v49) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v49);
      }
      if (v59)
      {
        uint64_t v38 = (void **)v57[0];
        if (v57[0])
        {
          uint64_t v39 = (void **)v57[1];
          unsigned int v40 = v57[0];
          if (v57[1] != v57[0])
          {
            do
              uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            unsigned int v40 = v57[0];
          }
          v57[1] = v38;
          operator delete(v40);
        }
        BOOL v41 = v55[0];
        if (v55[0])
        {
          unint64_t v42 = v55[1];
          unint64_t v43 = v55[0];
          if (v55[1] != v55[0])
          {
            do
            {
              uint64_t v45 = (void *)*--v42;
              unint64_t v44 = v45;
              *unint64_t v42 = 0;
              if (v45) {
                operator delete[](v44);
              }
            }
            while (v42 != v41);
            unint64_t v43 = v55[0];
          }
          v55[1] = v41;
          operator delete(v43);
        }
        if (__dst != v54) {
          free(__dst);
        }
      }
      return v28;
    }
    if (v65 < 5)
    {
      uint64_t v29 = v65;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v54, v65, 24);
      uint64_t v29 = v65;
      if (!v65)
      {
LABEL_28:
        LODWORD(v53) = v10;
        int v13 = v71;
        goto LABEL_29;
      }
      unint64_t v12 = __src;
      BOOL v11 = __dst;
    }
    memcpy(v11, v12, 24 * v29);
    goto LABEL_28;
  }
  if (a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (mlir::Block *)(a1 + 100);
    uint64_t v16 = a1 + 104;
    uint64_t v17 = a4;
    do
    {
      uint64_t v19 = mlir::ValueRange::dereference_iterator(v60, v14);
      uint64_t v18 = *v6;
      uint64_t v20 = *(void *)(v4 - 56);
      uint64_t v21 = *(void ***)(v20 + 8 * v18);
      *(void *)(v20 + 8 * v18) = v19;
      unint64_t v61 = v21;
      if (v21)
      {
        BOOL v22 = (uint64_t *)v19;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v61);
        int v24 = v61;
        while (1)
        {
          unint64_t v25 = *v24;
          if (!*v24) {
            break;
          }
          BOOL v26 = (uint64_t *)v25[1];
          if (v26)
          {
            uint64_t *v26 = *v25;
            if (*v25) {
              *(void *)(*v25 + 8) = v25[1];
            }
          }
          void v25[3] = (uint64_t)v22;
          v25[1] = (uint64_t)v22;
          uint64_t v27 = *v22;
          uint64_t *v25 = *v22;
          if (v27) {
            *(void *)(v27 + 8) = v25;
          }
          uint64_t *v22 = (uint64_t)v25;
        }
        mlir::Operation::moveBefore(DefiningOp, v15, v16);
        LODWORD(v18) = *v6;
      }
      ++v14;
      unsigned int *v6 = v18 + 1;
    }
    while (v14 != v17);
  }
  return 1;
}

void anonymous namespace'::EncodingReader::emitError<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  mlir::emitError(a2, (uint64_t)&v28);
  uint64_t v7 = v28;
  if (v28)
  {
    mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>((uint64_t)&v29, "expected attribute of type: ", a3, ", but got: ", a4);
    uint64_t v7 = v28;
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v39)
  {
    *(void *)(a1 + 8) = v29;
    unint64_t v8 = v32;
    *(_DWORD *)(a1 + 16) = v30;
    *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v8 || &v28 == (uint64_t *)a1)
    {
      int v10 = 1;
      goto LABEL_16;
    }
    if (__src != v34)
    {
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = __src;
      int v9 = v33;
      *(_DWORD *)(a1 + 32) = v8;
      *(_DWORD *)(a1 + 36) = v9;
      long long __src = v34;
      int v33 = 0;
      int v10 = 1;
LABEL_15:
      unsigned int v32 = 0;
LABEL_16:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)v35;
      *(void *)(a1 + 152) = v36;
      v35[0] = 0;
      v35[1] = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)__p;
      *(void *)(a1 + 176) = v38;
      uint64_t v36 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v38 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v10)
      {
        unint64_t v12 = (void **)__p[0];
        if (__p[0])
        {
          int v13 = (void **)__p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              int v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
        uint64_t v15 = v35[0];
        if (v35[0])
        {
          uint64_t v16 = v35[1];
          uint64_t v17 = v35[0];
          if (v35[1] != v35[0])
          {
            do
            {
              uint64_t v19 = (void *)*--v16;
              uint64_t v18 = v19;
              void *v16 = 0;
              if (v19) {
                operator delete[](v18);
              }
            }
            while (v16 != v15);
            uint64_t v17 = v35[0];
          }
          v35[1] = v15;
          operator delete(v17);
        }
        if (__src != v34) {
          free(__src);
        }
        unsigned __int8 v39 = 0;
      }
      goto LABEL_33;
    }
    if (v8 < 5)
    {
      unint64_t v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8, 24);
      unint64_t v11 = v32;
      if (!v32) {
        goto LABEL_14;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v11);
LABEL_14:
    *(_DWORD *)(a1 + 32) = v8;
    int v10 = v39;
    goto LABEL_15;
  }
LABEL_33:
  mlir::InFlightDiagnostic::abandon(&v28);
  if (v28) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  }
  if (v39)
  {
    uint64_t v20 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v21 = (void **)__p[1];
      BOOL v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        BOOL v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    unsigned int v23 = v35[0];
    if (v35[0])
    {
      int v24 = v35[1];
      unint64_t v25 = v35[0];
      if (v35[1] != v35[0])
      {
        do
        {
          uint64_t v27 = (void *)*--v24;
          BOOL v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        unint64_t v25 = v35[0];
      }
      v35[1] = v23;
      operator delete(v25);
    }
    if (__src != v34) {
      free(__src);
    }
  }
}

uint64_t mlir::Diagnostic::append<char const(&)[29],llvm::StringRef,char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  LODWORD(v22) = 3;
  unsigned int v23 = __s;
  size_t v24 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  uint64_t v14 = &v22;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v13 + 1;
    BOOL v20 = v12 + 24 * v13 > (unint64_t)&v22;
    if (v12 <= (unint64_t)&v22 && v20)
    {
      uint64_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = (const void ***)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = &v22;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = v14[2];
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  __int16 v25 = 261;
  uint64_t v17 = *(char **)(a3 + 8);
  BOOL v22 = *(const void ***)a3;
  unsigned int v23 = v17;
  mlir::Diagnostic::operator<<(a1, &v22);
  return mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[12],mlir::Attribute &>(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v25 = 3;
  BOOL v26 = __s;
  size_t v27 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  int v9 = &v25;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v7 + 24 * v8 > (unint64_t)&v25;
    if (v7 <= (unint64_t)&v25 && v20)
    {
      unsigned int v23 = (char *)&v25 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      int v9 = (int *)&v23[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      int v9 = &v25;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = *a3;
  uint64_t v13 = &v25;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v25, v12);
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v14 + 1;
    BOOL v22 = v15 + 24 * v14 > (unint64_t)&v25;
    if (v15 <= (unint64_t)&v25 && v22)
    {
      size_t v24 = (char *)&v25 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v24[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = &v25;
    }
  }
  uint64_t v16 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v13;
  *(void *)(v16 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v22 = 75;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      unint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2752);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v11 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3) {
      goto LABEL_3;
    }
    int v11 = *(_DWORD *)(a1 + 16);
  }
  int v12 = *(int **)a1;
  unint64_t v13 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  unint64_t v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
  int v15 = ((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8);
  if ((v15 + 1) > 0x40) {
    unsigned int v16 = v15 + 1;
  }
  else {
    unsigned int v16 = 64;
  }
  *(_DWORD *)(a1 + 16) = v16;
  buffer = llvm::allocate_buffer(48 * v16, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v12)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v12, &v12[12 * v8]);
    llvm::deallocate_buffer((llvm *)v12, (void *)(48 * v8));
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    unint64_t v19 = 48 * v18 - 48;
    uint64_t v20 = buffer;
    if (v19 < 0x30) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0x30 + 1;
    uint64_t v20 = &buffer[12 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v22 = v21 & 0xFFFFFFFFFFFFFFELL;
    unsigned int v23 = buffer;
    do
    {
      _DWORD *v23 = -1;
      v23[12] = -1;
      v23 += 24;
      v22 -= 2;
    }
    while (v22);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        _DWORD *v20 = -1;
        v20 += 12;
      }
      while (v20 != &buffer[12 * v18]);
    }
    unsigned int v24 = v18 - 1;
    unsigned int v25 = (37 * *a3) & v24;
    a2 = (char *)&buffer[12 * v25];
    int v26 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      size_t v27 = 0;
      int v28 = 1;
      while (v26 != -1)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v26 == -2;
        }
        if (v29) {
          size_t v27 = a2;
        }
        unsigned int v30 = v25 + v28++;
        unsigned int v25 = v30 & v24;
        a2 = (char *)&buffer[12 * v25];
        int v26 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2) {
          goto LABEL_3;
        }
      }
      if (v27) {
        a2 = v27;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)a2 = *a3;
  *((void *)a2 + 1) = a2 + 24;
  *((void *)a2 + 2) = 0x400000000;
  if (*(_DWORD *)(a4 + 8)) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 8), a4);
  }
  a2[40] = *(unsigned char *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>,unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)a1;
    unint64_t v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      unint64_t v9 = *(_DWORD **)a1;
LABEL_7:
      unint64_t v13 = &v7[12 * v6];
      do
      {
        _DWORD *v9 = -1;
        v9 += 12;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x30 + 1;
    unint64_t v9 = &v7[12 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    int v12 = *(_DWORD **)a1;
    do
    {
      _DWORD *v12 = -1;
      v12[12] = -1;
      v12 += 24;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      int v14 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          int v16 = v15 - 1;
          unsigned int v17 = v16 & (37 * v14);
          uint64_t v18 = *(void *)a1 + 48 * v17;
          int v19 = *(_DWORD *)v18;
          if (v14 != *(_DWORD *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *(void *)a1 + 48 * v17;
              int v19 = *(_DWORD *)v18;
              if (v14 == *(_DWORD *)v18) {
                goto LABEL_25;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
LABEL_25:
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v18 + 24;
        *(void *)(v18 + 16) = 0x400000000;
        if (v4[4]) {
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 2));
        }
        *(unsigned char *)(v18 + 40) = *((unsigned char *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        unsigned int v24 = (int *)*((void *)v4 + 1);
        if (v24 != v4 + 6) {
          free(v24);
        }
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12)) {
    return (char *)v3;
  }
  unint64_t v8 = *(void *)a1 + 8 * v4;
  if (*(void *)a1 > a2 || v8 <= a2)
  {
    unint64_t v54 = 0;
    unint64_t v10 = (char *)(a1 + 16);
    uint64_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
    int v12 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (!v13)
    {
LABEL_22:
      int v30 = v54;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v30;
      return (char *)v3;
    }
    unint64_t v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (v16 = v11, unsigned int v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        unint64_t v18 = v14 + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        int v16 = &v11[v19];
        unsigned int v17 = &v12[v19];
        uint64_t v20 = (long long *)(v12 + 16);
        int v21 = v11 + 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(v20 - 1);
          long long v24 = *v20;
          *(v20 - 1) = 0uLL;
          long long *v20 = 0uLL;
          *(v21 - 1) = v23;
          *int v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          uint64_t v27 = *(void *)a1 - 8;
          do
          {
            int v28 = *(mlir::Region **)(v27 + v15);
            *(void *)(v27 + v15) = 0;
            if (v28)
            {
              mlir::Region::~Region(v28);
              operator delete(v29);
            }
            v15 -= 8;
          }
          while (v15);
          int v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v16 = v11;
      unsigned int v17 = *(char **)a1;
    }
    unsigned int v25 = &v12[8 * v13];
    do
    {
      uint64_t v26 = *(void *)v17;
      *(void *)unsigned int v17 = 0;
      v17 += 8;
      *(void *)int v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  uint64_t v31 = a2 - *(void *)a1;
  unint64_t v54 = 0;
  unsigned int v32 = (char *)(a1 + 16);
  int v33 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
  int v34 = *(char **)a1;
  uint64_t v35 = *(unsigned int *)(a1 + 8);
  if (v35)
  {
    unint64_t v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v37 = 8 * v35;
    if (v36 >= 0xB)
    {
      if (v34 >= &v33[v37] || (uint64_t v38 = v33, v39 = *(char **)a1, v33 >= &v34[v37]))
      {
        unint64_t v40 = v36 + 1;
        uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v38 = &v33[v41];
        unsigned __int8 v39 = &v34[v41];
        unint64_t v42 = (long long *)(v34 + 16);
        unint64_t v43 = v33 + 16;
        uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v45 = *(v42 - 1);
          long long v46 = *v42;
          *(v42 - 1) = 0uLL;
          *unint64_t v42 = 0uLL;
          *(v43 - 1) = v45;
          *unint64_t v43 = v46;
          v42 += 2;
          v43 += 2;
          v44 -= 4;
        }
        while (v44);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          uint64_t v49 = *(void *)a1 - 8;
          do
          {
            uint64_t v50 = *(mlir::Region **)(v49 + v37);
            *(void *)(v49 + v37) = 0;
            if (v50)
            {
              mlir::Region::~Region(v50);
              operator delete(v51);
            }
            v37 -= 8;
          }
          while (v37);
          int v34 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      uint64_t v38 = v33;
      unsigned __int8 v39 = *(char **)a1;
    }
    int64_t v47 = &v34[8 * v35];
    do
    {
      uint64_t v48 = *(void *)v39;
      *(void *)unsigned __int8 v39 = 0;
      v39 += 8;
      *(void *)uint64_t v38 = v48;
      v38 += 8;
    }
    while (v39 != v47);
    goto LABEL_35;
  }
LABEL_40:
  uint64_t v52 = v31 >> 3;
  int v53 = v54;
  if (v34 != v32) {
    free(v34);
  }
  *(void *)a1 = v33;
  *(_DWORD *)(a1 + 12) = v53;
  return &v33[8 * v52];
}

uint64_t mlir::Diagnostic::append<char const(&)[81],unsigned int &,char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, unsigned int *a5, char *a6, char **a7)
{
  size_t v14 = strlen(__s);
  unint64_t v15 = *(void *)(a1 + 16);
  int v34 = 3;
  uint64_t v35 = __s;
  size_t v36 = v14;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  unsigned int v17 = &v34;
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v28 = v16 + 1;
    BOOL v29 = v15 + 24 * v16 > (unint64_t)&v34;
    if (v15 <= (unint64_t)&v34 && v29)
    {
      unsigned int v32 = (char *)&v34 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v17 = (int *)&v32[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v17 = &v34;
    }
  }
  uint64_t v18 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v19 = *(_OWORD *)v17;
  *(void *)(v18 + 16) = *((void *)v17 + 2);
  *(_OWORD *)uint64_t v18 = v19;
  unsigned int v20 = *(_DWORD *)(a1 + 28);
  uint64_t v21 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v21;
  uint64_t v22 = (char *)*a3;
  int v34 = 5;
  uint64_t v35 = v22;
  unint64_t v23 = *(void *)(a1 + 16);
  long long v24 = &v34;
  if (v21 >= v20)
  {
    unint64_t v30 = v21 + 1;
    BOOL v31 = v23 + 24 * v21 > (unint64_t)&v34;
    if (v23 <= (unint64_t)&v34 && v31)
    {
      int v33 = (char *)&v34 - v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      long long v24 = (int *)&v33[v23];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      long long v24 = &v34;
    }
  }
  uint64_t v25 = v23 + 24 * *(unsigned int *)(a1 + 24);
  long long v26 = *(_OWORD *)v24;
  *(void *)(v25 + 16) = *((void *)v24 + 2);
  *(_OWORD *)uint64_t v25 = v26;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],unsigned int &,char const(&)[30],unsigned long>(uint64_t a1, char *__s, unsigned int *a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  BOOL v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      unint64_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
  uint64_t v18 = (char *)*a3;
  int v30 = 5;
  BOOL v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  unsigned int v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      BOOL v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unsigned int v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unsigned int v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a4, a5);
}

char *llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::InsertIntoBucket<void *,mlir::BytecodeReader::Impl::UseListOrderStorage const&>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v16 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      uint64_t v10 = *(void *)a2;
      goto LABEL_4;
    }
    int v16 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v17 = *(uint64_t **)a1;
  unint64_t v18 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
  unint64_t v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
  int v20 = ((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8);
  if ((v20 + 1) > 0x40) {
    unsigned int v21 = v20 + 1;
  }
  else {
    unsigned int v21 = 64;
  }
  *(_DWORD *)(a1 + 16) = v21;
  buffer = llvm::allocate_buffer(48 * v21, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v17)
  {
    uint64_t v23 = 6 * v8;
    llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(a1, v17, &v17[v23]);
    llvm::deallocate_buffer((llvm *)v17, (void *)(v23 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  unint64_t v25 = 48 * v24 - 48;
  unint64_t v26 = buffer;
  if (v25 < 0x30) {
    goto LABEL_44;
  }
  unint64_t v27 = v25 / 0x30 + 1;
  unint64_t v26 = &buffer[6 * (v27 & 0xFFFFFFFFFFFFFFELL)];
  uint64_t v28 = v27 & 0xFFFFFFFFFFFFFFELL;
  BOOL v29 = buffer;
  do
  {
    *BOOL v29 = -4096;
    v29[6] = -4096;
    v29 += 12;
    v28 -= 2;
  }
  while (v28);
  if (v27 != (v27 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_44:
    do
    {
      void *v26 = -4096;
      v26 += 6;
    }
    while (v26 != &buffer[6 * v24]);
  }
  uint64_t v10 = *a3;
  int v30 = v24 - 1;
  unsigned int v31 = ((*a3 >> 4) ^ (*a3 >> 9)) & v30;
  a2 = (char *)&buffer[6 * v31];
  uint64_t v32 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    int v33 = 0;
    int v34 = 1;
    while (v32 != -4096)
    {
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v32 == -8192;
      }
      if (v35) {
        int v33 = a2;
      }
      unsigned int v36 = v31 + v34++;
      unsigned int v31 = v36 & v30;
      a2 = (char *)&buffer[6 * v31];
      uint64_t v32 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v33) {
      a2 = v33;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  unint64_t v11 = a2 + 24;
  *((void *)a2 + 1) = a2 + 24;
  *((void *)a2 + 2) = 0x400000000;
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  if (a2 + 8 != (char *)a4 && v12 != 0)
  {
    if (v12 < 5)
    {
      unsigned int v14 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 8), a2 + 24, *(unsigned int *)(a4 + 8), 4);
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      if (!v14)
      {
LABEL_15:
        *((_DWORD *)a2 + 4) = v12;
        goto LABEL_16;
      }
      unint64_t v11 = (void *)*((void *)a2 + 1);
    }
    memcpy(v11, *(const void **)a4, 4 * v14);
    goto LABEL_15;
  }
LABEL_16:
  a2[40] = *(unsigned char *)(a4 + 32);
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>,void *,mlir::BytecodeReader::Impl::UseListOrderStorage,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::BytecodeReader::Impl::UseListOrderStorage>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    unint64_t v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      unint64_t v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = &v7[6 * v6];
      do
      {
        void *v9 = -4096;
        v9 += 6;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x30 + 1;
    unint64_t v9 = &v7[6 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unsigned int v12 = *(void **)a1;
    do
    {
      void *v12 = -4096;
      v12[6] = -4096;
      v12 += 12;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          int v16 = v15 - 1;
          unsigned int v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v18 = *(void *)a1 + 48 * v17;
          uint64_t v19 = *(void *)v18;
          if (v14 != *(void *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -4096)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -8192;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *(void *)a1 + 48 * v17;
              uint64_t v19 = *(void *)v18;
              if (v14 == *(void *)v18) {
                goto LABEL_25;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
LABEL_25:
        *(void *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v18 + 24;
        *(void *)(v18 + 16) = 0x400000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<unsigned int>::operator=(v18 + 8, (uint64_t)(v4 + 1));
        }
        *(unsigned char *)(v18 + 40) = *((unsigned char *)v4 + 40);
        ++*(_DWORD *)(a1 + 8);
        uint64_t v24 = (uint64_t *)v4[1];
        if (v24 != v4 + 3) {
          free(v24);
        }
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::BytecodeReader::Impl::Impl(uint64_t a1, mlir::MLIRContext *a2, mlir::UnknownLoc **a3, char a4, _OWORD *a5, uint64_t a6)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a4;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 24;
  *(void *)(a1 + 32) = a1 + 24;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 88) = a1 + 536;
  *(void *)(a1 + 96) = a1 + 424;
  *(void *)(a1 + 104) = a1 + 336;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x100000000;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x100000000;
  *(void *)(a1 + 2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a2;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = a3;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x600000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0x1000000000;
  *(void *)(a1 + 360) = a1 + 376;
  *(void *)(a1 + 368) = 0x100000000;
  *(void *)(a1 + 4(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = a1 + 440;
  *(void *)(a1 + 432) = 0x200000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 504) = 0x2000000000;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = a1 + 552;
  *(void *)(a1 + 544) = 0x300000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 616) = a1 + 632;
  *(void *)(a1 + 6(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0x600000000;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 708) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 760) = a1 + 760;
  *(void *)(a1 + 768) = a1 + 760;
  *(void *)(a1 + 8(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 832) = a1 + 832;
  *(void *)(a1 + 840) = a1 + 832;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  unint64_t v10 = (void *)(a1 + 872);
  uint64_t v11 = mlir::UnknownLoc::get(*a3, a2);
  mlir::ValueRange::ValueRange(v18, 0, 0);
  uint64_t v15 = mlir::NoneType::get(*a3, v12);
  mlir::ValueRange::ValueRange(v17, (uint64_t)&v15, 1uLL);
  mlir::BlockRange::BlockRange(v16, 0, 0);
  mlir::OperationState::OperationState(v10, v11, (uint64_t)"builtin.unrealized_conversion_cast", 34, v18[0], v18[1], v17[0], v17[1], 0, 0, v16[0], v16[1], 0, 0);
  long long v13 = a5[1];
  *(_OWORD *)(a1 + 1176) = *a5;
  *(_OWORD *)(a1 + 1192) = v13;
  *(void *)(a1 + 1208) = a6;
  return a1;
}

void mlir::BytecodeReader::Impl::~Impl(llvm **this)
{
}

char *std::vector<mlir::BytecodeReader::Impl::ValueScope>::__emplace_back_slow_path<>(void **a1)
{
  unint64_t v2 = (char *)*a1;
  unint64_t v1 = (char *)a1[1];
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((v1 - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v2) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v2) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - v2) >> 3)) >= 0x249249249249249) {
    unint64_t v4 = 0x492492492492492;
  }
  if (v4 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v6 = 56 * v4;
  int v7 = (char *)operator new(56 * v4);
  unint64_t v8 = &v7[56 * v3];
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  unint64_t v9 = &v7[v6];
  *(_OWORD *)unint64_t v8 = 0u;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 3) = v8 + 40;
  *((_DWORD *)v8 + 9) = 4;
  unint64_t v10 = v8 + 56;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = &v8[v11];
      long long v13 = &v1[v11];
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v1[v11 - 56];
      *((void *)v12 - 5) = *(void *)&v1[v11 - 40];
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v12 - 4) = &v8[v11 - 16];
      *(void *)&v8[v11 - 24] = 0x400000000;
      if (*(_DWORD *)&v1[v11 - 24]) {
        llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v8[v11 - 32], (uint64_t)(v13 - 32));
      }
      v11 -= 56;
    }
    while (&v1[v11] != v2);
    unint64_t v1 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = &v8[v11];
    a1[1] = v10;
    a1[2] = v9;
    if (v14 != v1)
    {
      uint64_t v15 = v14 - 16;
      do
      {
        unsigned int v17 = (char *)*((void *)v15 - 2);
        if (v15 != v17) {
          free(v17);
        }
        uint64_t v18 = (void *)*((void *)v15 - 5);
        if (v18)
        {
          *((void *)v15 - 4) = v18;
          operator delete(v18);
        }
        int v16 = v15 - 40;
        v15 -= 56;
      }
      while (v16 != v1);
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v8 + 56;
}

char *std::vector<mlir::BytecodeReader::Impl::RegionReadState>::__push_back_slow_path<mlir::BytecodeReader::Impl::RegionReadState>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 7;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57) {
    abort();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 6 > v3) {
    unint64_t v3 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 57) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v9 = &v8[128 * v2];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a2 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *((void *)v9 + 2) = v10;
  *((void *)v9 + 3) = v11;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
  *((void *)v9 + 5) = v9 + 56;
  *((void *)v9 + 6) = 0x600000000;
  if (*(_DWORD *)(a2 + 48)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v9 + 40), a2 + 40);
  }
  unsigned int v12 = &v8[128 * v7];
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 104);
  v9[120] = *(unsigned char *)(a2 + 120);
  long long v13 = v9 + 128;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v9[v16];
      uint64_t v19 = &v14[v16];
      long long v20 = *(_OWORD *)&v14[v16 - 128];
      *((void *)v18 - 14) = *(void *)&v14[v16 - 112];
      *((_OWORD *)v18 - 8) = v20;
      uint64_t v21 = *(void *)&v14[v16 - 104];
      *(void *)&v14[v16 - 104] = 0;
      *(void *)&v9[v16 - 88] = &v9[v16 - 72];
      uint64_t v22 = (uint64_t)&v9[v16 - 88];
      *(void *)(v22 - 16) = v21;
      *(_DWORD *)(v22 - 8) = *(_DWORD *)&v14[v16 - 96];
      *(void *)(v22 + 8) = 0x600000000;
      if (*(_DWORD *)&v14[v16 - 80]) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 - 88));
      }
      long long v17 = *(_OWORD *)(v19 - 24);
      *(v18 - 8) = *(v19 - 8);
      *(_OWORD *)(v18 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v17;
      v16 -= 128;
    }
    while (&v14[v16] != v15);
    uint64_t v14 = (char *)*a1;
    unsigned int v23 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v23 != v14)
    {
      uint64_t v24 = (char *)*((void *)v23 - 11);
      if (v23 - 72 != v24) {
        free(v24);
      }
      unint64_t v25 = (void *)*((void *)v23 - 13);
      *((void *)v23 - 13) = 0;
      if (v25) {
        operator delete(v25);
      }
      v23 -= 128;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v9 + 128;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    unint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 4 * v8);
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 4 * v9);
        uint64_t v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *unint64_t v7 = 0;
          return a1;
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = *v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      if (!*v7) {
        goto LABEL_15;
      }
    }
    memcpy((void *)(*(void *)a1 + 4 * v9), (const void *)(*(void *)a2 + 4 * v9), *(void *)a2 + 4 * v10 - (*(void *)a2 + 4 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<mlir::BytecodeReader::Impl::read(mlir::Block *,llvm::function_ref<BOOL ()(mlir::Operation *)>)::$_1>(void *a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = mlir::Diagnostic::attachNote(a2, 0, 0);
  uint64_t v4 = v3;
  uint64_t v6 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  LODWORD(v35) = 3;
  unsigned int v36 = "in bytecode version ";
  uint64_t v37 = 20;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  unint64_t v8 = &v35;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v26 = v7 + 1;
    BOOL v27 = v5 + 24 * v7 > (unint64_t)&v35;
    if (v5 <= (unint64_t)&v35 && v27)
    {
      uint64_t v32 = (char *)&v35 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 16, (void *)(v3 + 32), v26, 24);
      unint64_t v5 = *(void *)(v4 + 16);
      unint64_t v8 = (const void ***)&v32[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 16, (void *)(v3 + 32), v26, 24);
      unint64_t v5 = *(void *)(v4 + 16);
      unint64_t v8 = &v35;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v4 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = v8[2];
  *(_OWORD *)uint64_t v9 = v10;
  unsigned int v11 = *(_DWORD *)(v4 + 28);
  uint64_t v12 = (*(_DWORD *)(v4 + 24) + 1);
  *(_DWORD *)(v4 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
  long long v13 = (const char *)v2[31];
  LODWORD(v35) = 5;
  unsigned int v36 = v13;
  unint64_t v14 = *(void *)(v4 + 16);
  uint64_t v15 = &v35;
  if (v12 >= v11)
  {
    unint64_t v28 = v12 + 1;
    BOOL v29 = v14 + 24 * v12 > (unint64_t)&v35;
    if (v14 <= (unint64_t)&v35 && v29)
    {
      int v33 = (char *)&v35 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v28, 24);
      unint64_t v14 = *(void *)(v4 + 16);
      uint64_t v15 = (const void ***)&v33[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v28, 24);
      unint64_t v14 = *(void *)(v4 + 16);
      uint64_t v15 = &v35;
    }
  }
  uint64_t v16 = v14 + 24 * *(unsigned int *)(v4 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = v15[2];
  *(_OWORD *)uint64_t v16 = v17;
  unsigned int v18 = *(_DWORD *)(v4 + 28);
  uint64_t v19 = (*(_DWORD *)(v4 + 24) + 1);
  *(_DWORD *)(v4 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v19;
  LODWORD(v35) = 3;
  unsigned int v36 = " produced by: ";
  uint64_t v37 = 14;
  unint64_t v20 = *(void *)(v4 + 16);
  uint64_t v21 = &v35;
  if (v19 >= v18)
  {
    unint64_t v30 = v19 + 1;
    BOOL v31 = v20 + 24 * v19 > (unint64_t)&v35;
    if (v20 <= (unint64_t)&v35 && v31)
    {
      int v34 = (char *)&v35 - v20;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v30, 24);
      unint64_t v20 = *(void *)(v4 + 16);
      uint64_t v21 = (const void ***)&v34[v20];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v4 + 32), v30, 24);
      unint64_t v20 = *(void *)(v4 + 16);
      uint64_t v21 = &v35;
    }
  }
  uint64_t v22 = v20 + 24 * *(unsigned int *)(v4 + 24);
  long long v23 = *(_OWORD *)v21;
  *(void *)(v22 + 16) = v21[2];
  *(_OWORD *)uint64_t v22 = v23;
  ++*(_DWORD *)(v4 + 24);
  __int16 v38 = 261;
  uint64_t v24 = (const char *)v2[33];
  BOOL v35 = (const void **)v2[32];
  unsigned int v36 = v24;
  mlir::Diagnostic::operator<<(v4, &v35);
  return 0;
}

uint64_t mlir::Diagnostic::append<char const(&)[30],std::string>(uint64_t a1, char *__s, const void **a3)
{
  uint64_t v6 = (const void **)strlen(__s);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  LODWORD(v17[0]) = 3;
  v17[1] = (const void **)__s;
  unint64_t v17[2] = v6;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  long long v10 = v17;
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v8 + 24 * v9 > (unint64_t)v17;
    if (v8 <= (unint64_t)v17 && v15)
    {
      uint64_t v16 = (char *)v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      long long v10 = (const void ***)&v16[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v14, 24);
      unint64_t v8 = *(void *)(a1 + 16);
      long long v10 = v17;
    }
  }
  uint64_t v11 = v8 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v10[2];
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  __int16 v18 = 260;
  v17[0] = a3;
  mlir::Diagnostic::operator<<(a1, v17);
  return a1;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(anonymous namespace'::BytecodeDialect *)>::callback_fn<mlir::BytecodeReader::Impl::parseDialectSection(llvm::ArrayRef<unsigned char>)::$_0>(void *a1, uint64_t a2)
{
  long long v24 = 0uLL;
  uint64_t v4 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  if (*(void *)(*a1 + 248) <= 4uLL)
  {
    unint64_t v25 = 0;
    {
      char v5 = resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v3[3], *(void *)(v4 + 536), *(_DWORD *)(v4 + 544), (char *)v25, &v24, (uint64_t)"string", 6);
      __int16 v6 = 0;
      __int16 v7 = 0;
      uint64_t result = 0;
      if (!v5) {
        return result;
      }
      goto LABEL_8;
    }
    return 0;
  }
  unint64_t v25 = 0;
  char v9 = v25;
  if (!resolveEntry<llvm::SmallVector<llvm::StringRef,3u>,llvm::StringRef>(v3[3], *(void *)(v4 + 536), *(_DWORD *)(v4 + 544), (char *)(v25 >> 1), &v24, (uint64_t)"string", 6))return 0; {
  __int16 v6 = v9 & 1;
  }
  __int16 v7 = 1;
LABEL_8:
  long long v10 = v24;
  __int16 v11 = v6 | (v7 << 8);
  uint64_t v12 = *(unsigned int *)(v4 + 368);
  if (v12 >= *(_DWORD *)(v4 + 372))
  {
    uint64_t v14 = v4 + 360;
    LOBYTE(v25) = 0;
    char v26 = 0;
    uint64_t v27 = a2;
    long long v28 = v24;
    __int16 v29 = v11;
    unint64_t v15 = v12 + 1;
    unint64_t v16 = *(void *)(v4 + 360);
    BOOL v17 = v16 + 48 * v12 > (unint64_t)&v25;
    if (v16 <= (unint64_t)&v25 && v17)
    {
      long long v23 = (char *)&v25 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v4 + 376), v15, 48);
      uint64_t v18 = *(void *)(v4 + 360);
      uint64_t v19 = (unint64_t *)&v23[v18];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v4 + 376), v15, 48);
      uint64_t v18 = *(void *)(v4 + 360);
      uint64_t v19 = &v25;
    }
    unint64_t v20 = (_OWORD *)(v18 + 48 * *(unsigned int *)(v4 + 368));
    long long v21 = *(_OWORD *)v19;
    long long v22 = *((_OWORD *)v19 + 2);
    v20[1] = *((_OWORD *)v19 + 1);
    v20[2] = v22;
    _OWORD *v20 = v21;
  }
  else
  {
    uint64_t v13 = *(void *)(v4 + 360) + 48 * v12;
    *(unsigned char *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = a2;
    *(_OWORD *)(v13 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
    *(_WORD *)(v13 + 40) = v11;
  }
  ++*(_DWORD *)(v4 + 368);
  return 1;
}

int *std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v90 = *((void *)a2 - 1);
                unint64_t v91 = *(void *)(v10 + 8);
                if (v90 > v91)
                {
                  int v92 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(a2 - 4);
                  *(a2 - 4) = v92;
                  *(void *)(v10 + 8) = v90;
                  *((void *)a2 - 1) = v91;
                }
                return result;
              case 3:
                unint64_t v93 = *(void *)(v10 + 24);
                unint64_t v94 = *(void *)(v10 + 8);
                unint64_t v95 = *((void *)a2 - 1);
                if (v93 <= v94)
                {
                  if (v95 > v93)
                  {
                    int v144 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v144;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v95;
                    *((void *)a2 - 1) = v93;
                    unint64_t v145 = *(void *)(v10 + 24);
                    unint64_t v146 = *(void *)(v10 + 8);
                    if (v145 > v146)
                    {
                      int v147 = *(_DWORD *)v10;
                      *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v147;
                      *(void *)(v10 + 8) = v145;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v146;
                    }
                  }
                }
                else
                {
                  int v96 = *(_DWORD *)v10;
                  if (v95 <= v93)
                  {
                    *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = v96;
                    *(void *)(v10 + 8) = v93;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v94;
                    unint64_t v155 = *((void *)a2 - 1);
                    if (v155 <= v94) {
                      return result;
                    }
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v155;
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v10 = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + 8) = v95;
                  }
                  *((void *)a2 - 1) = v94;
                }
                break;
              case 4:
                return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), a2 - 4);
              case 5:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), (int *)(v10 + 48));
                unint64_t v97 = *((void *)a2 - 1);
                unint64_t v98 = *(void *)(v10 + 56);
                if (v97 > v98)
                {
                  int v99 = *(_DWORD *)(v10 + 48);
                  *(_DWORD *)(v10 + 48) = *(a2 - 4);
                  *(a2 - 4) = v99;
                  *(void *)(v10 + 56) = v97;
                  *((void *)a2 - 1) = v98;
                  unint64_t v100 = *(void *)(v10 + 56);
                  unint64_t v101 = *(void *)(v10 + 40);
                  if (v100 > v101)
                  {
                    int v102 = *(_DWORD *)(v10 + 32);
                    int v103 = *(_DWORD *)(v10 + 48);
                    *(_DWORD *)(v10 + 32) = v103;
                    *(_DWORD *)(v10 + 48) = v102;
                    *(void *)(v10 + 40) = v100;
                    *(void *)(v10 + 56) = v101;
                    unint64_t v104 = *(void *)(v10 + 24);
                    if (v100 > v104)
                    {
                      int v105 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v103;
                      *(_DWORD *)(v10 + 32) = v105;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v100;
                      *(void *)(v10 + 40) = v104;
                      unint64_t v106 = *(void *)(v10 + 8);
                      if (v100 > v106)
                      {
                        int v107 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v103;
                        *(_DWORD *)(v10 + 16) = v107;
                        *(void *)(v10 + 8) = v100;
                        *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v106;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v108 = (int *)(v10 + 16);
            BOOL v110 = (int *)v10 == a2 || v108 == a2;
            if (a4)
            {
              if (!v110)
              {
                uint64_t v111 = 0;
                uint64_t v112 = (int *)v10;
                do
                {
                  unint64_t v114 = *((void *)v112 + 3);
                  unint64_t v115 = *((void *)v112 + 1);
                  uint64_t v112 = v108;
                  if (v114 > v115)
                  {
                    int v116 = *v108;
                    uint64_t v117 = v111;
                    do
                    {
                      uint64_t v118 = v10 + v117;
                      *(_DWORD *)(v118 + 16) = *(_DWORD *)(v10 + v117);
                      *(void *)(v118 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(void *)(v10 + v117 + 8);
                      if (!v117)
                      {
                        uint64_t v113 = v10;
                        goto LABEL_124;
                      }
                      v117 -= 16;
                    }
                    while (v114 > *(void *)(v118 - 8));
                    uint64_t v113 = v10 + v117 + 16;
LABEL_124:
                    *(_DWORD *)uint64_t v113 = v116;
                    *(void *)(v113 + 8) = v114;
                  }
                  uint64_t v108 = v112 + 4;
                  v111 += 16;
                }
                while (v112 + 4 != a2);
              }
            }
            else if (!v110)
            {
              unint64_t v148 = (unint64_t *)(v10 + 24);
              do
              {
                unint64_t v149 = *(void *)(v9 + 24);
                unint64_t v150 = *(void *)(v9 + 8);
                unint64_t v9 = (unint64_t)v108;
                if (v149 > v150)
                {
                  uint64_t v151 = *(void *)v108;
                  uint64_t v152 = v148;
                  do
                  {
                    uint64_t v153 = v152;
                    *((_DWORD *)v152 - 2) = *((_DWORD *)v152 - 6);
                    unint64_t v154 = *(v152 - 2);
                    v152 -= 2;
                    *uint64_t v153 = v154;
                  }
                  while (v149 > *(v153 - 4));
                  *((_DWORD *)v152 - 2) = v151;
                  *uint64_t v152 = v149;
                }
                uint64_t v108 = (int *)(v9 + 16);
                v148 += 2;
              }
              while ((int *)(v9 + 16) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((int *)v10 != a2)
            {
              int64_t v119 = (unint64_t)(v12 - 2) >> 1;
              int64_t v120 = v119;
              do
              {
                if (v119 >= v120)
                {
                  uint64_t v122 = (2 * v120) | 1;
                  unint64_t v123 = v10 + 16 * v122;
                  if (2 * v120 + 2 < v12)
                  {
                    BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                    v123 += 16 * v121;
                    if (v121) {
                      uint64_t v122 = 2 * v120 + 2;
                    }
                  }
                  unint64_t v124 = v10 + 16 * v120;
                  unint64_t v125 = *(void *)(v124 + 8);
                  if (*(void *)(v123 + 8) <= v125)
                  {
                    int v126 = *(_DWORD *)v124;
                    do
                    {
                      unint64_t v127 = v124;
                      unint64_t v124 = v123;
                      *(_DWORD *)unint64_t v127 = *(_DWORD *)v123;
                      *(void *)(v127 + 8) = *(void *)(v123 + 8);
                      if (v119 < v122) {
                        break;
                      }
                      uint64_t v128 = (2 * v122) | 1;
                      unint64_t v123 = v10 + 16 * v128;
                      uint64_t v129 = 2 * v122 + 2;
                      if (v129 < v12)
                      {
                        BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                        v123 += 16 * v121;
                        if (v121) {
                          uint64_t v128 = v129;
                        }
                      }
                      uint64_t result = *(int **)(v123 + 8);
                      uint64_t v122 = v128;
                    }
                    while ((unint64_t)result <= v125);
                    *(_DWORD *)unint64_t v124 = v126;
                    *(void *)(v124 + 8) = v125;
                  }
                }
                BOOL v121 = v120-- <= 0;
              }
              while (!v121);
              uint64_t v130 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v131 = 0;
                int v132 = *(_DWORD *)v10;
                uint64_t v133 = *(void *)(v10 + 8);
                unint64_t v134 = v10;
                do
                {
                  uint64_t v135 = v134 + 16 * v131 + 16;
                  uint64_t v136 = (2 * v131) | 1;
                  uint64_t v137 = 2 * v131 + 2;
                  if (v137 < v130)
                  {
                    BOOL v121 = *(void *)(v135 + 8) > *(void *)(v135 + 24);
                    v135 += 16 * v121;
                    if (v121) {
                      uint64_t v136 = v137;
                    }
                  }
                  *(_DWORD *)unint64_t v134 = *(_DWORD *)v135;
                  *(void *)(v134 + 8) = *(void *)(v135 + 8);
                  unint64_t v134 = v135;
                  uint64_t v131 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                if ((int *)v135 == a2 - 4)
                {
                  *(_DWORD *)uint64_t v135 = v132;
                  *(void *)(v135 + 8) = v133;
                }
                else
                {
                  *(_DWORD *)uint64_t v135 = *(a2 - 4);
                  *(void *)(v135 + 8) = *((void *)a2 - 1);
                  *(a2 - 4) = v132;
                  *((void *)a2 - 1) = v133;
                  uint64_t v138 = v135 - v10 + 16;
                  if (v138 >= 17)
                  {
                    unint64_t v139 = (((unint64_t)v138 >> 4) - 2) >> 1;
                    uint64_t v140 = v10 + 16 * v139;
                    unint64_t v141 = *(void *)(v135 + 8);
                    if (*(void *)(v140 + 8) > v141)
                    {
                      int v142 = *(_DWORD *)v135;
                      do
                      {
                        uint64_t v143 = v135;
                        uint64_t v135 = v140;
                        *(_DWORD *)uint64_t v143 = *(_DWORD *)v140;
                        *(void *)(v143 + 8) = *(void *)(v140 + 8);
                        if (!v139) {
                          break;
                        }
                        unint64_t v139 = (v139 - 1) >> 1;
                        uint64_t v140 = v10 + 16 * v139;
                      }
                      while (*(void *)(v140 + 8) > v141);
                      *(_DWORD *)uint64_t v135 = v142;
                      *(void *)(v135 + 8) = v141;
                    }
                  }
                }
                a2 -= 4;
                BOOL v121 = v130-- <= 2;
              }
              while (!v121);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          unint64_t v15 = *((void *)a2 - 1);
          if ((unint64_t)v11 < 0x801) {
            break;
          }
          unint64_t v16 = *(void *)(v14 + 8);
          unint64_t v17 = *(void *)(v10 + 8);
          if (v16 <= v17)
          {
            if (v15 > v16)
            {
              int v22 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v22;
              *(void *)(v14 + 8) = v15;
              *((void *)a2 - 1) = v16;
              unint64_t v23 = *(void *)(v14 + 8);
              unint64_t v24 = *(void *)(v10 + 8);
              if (v23 > v24)
              {
                int v25 = *(_DWORD *)v10;
                *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
                *(_DWORD *)unint64_t v14 = v25;
                *(void *)(v10 + 8) = v23;
                *(void *)(v14 + 8) = v24;
              }
            }
          }
          else
          {
            int v18 = *(_DWORD *)v10;
            if (v15 <= v16)
            {
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v18;
              *(void *)(v10 + 8) = v16;
              *(void *)(v14 + 8) = v17;
              unint64_t v31 = *((void *)a2 - 1);
              if (v31 <= v17) {
                goto LABEL_24;
              }
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v14 + 8) = v31;
            }
            else
            {
              *(_DWORD *)unint64_t v10 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v10 + 8) = v15;
            }
            *((void *)a2 - 1) = v17;
          }
LABEL_24:
          unint64_t v32 = v10 + 16 * v13;
          unint64_t v33 = v32 - 16;
          unint64_t v34 = *(void *)(v32 - 8);
          unint64_t v35 = *(void *)(v10 + 24);
          unint64_t v36 = *((void *)a2 - 3);
          if (v34 <= v35)
          {
            if (v36 > v34)
            {
              int v38 = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v38;
              *(void *)(v33 + 8) = v36;
              *((void *)a2 - 3) = v34;
              unint64_t v39 = *(void *)(v33 + 8);
              unint64_t v40 = *(void *)(v10 + 24);
              if (v39 > v40)
              {
                int v41 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v41;
                *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v39;
                *(void *)(v33 + 8) = v40;
              }
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 16);
            if (v36 <= v34)
            {
              *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v34;
              *(void *)(v33 + 8) = v35;
              unint64_t v44 = *((void *)a2 - 3);
              if (v44 <= v35) {
                goto LABEL_38;
              }
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v33 + 8) = v44;
            }
            else
            {
              *(_DWORD *)(v10 + 16) = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v36;
            }
            *((void *)a2 - 3) = v35;
          }
LABEL_38:
          unint64_t v45 = v10 + 16 * v13;
          unint64_t v46 = v45 + 16;
          unint64_t v47 = *(void *)(v45 + 24);
          unint64_t v48 = *(void *)(v10 + 40);
          unint64_t v49 = *((void *)a2 - 5);
          if (v47 <= v48)
          {
            if (v49 > v47)
            {
              int v51 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v51;
              *(void *)(v46 + 8) = v49;
              *((void *)a2 - 5) = v47;
              unint64_t v52 = *(void *)(v46 + 8);
              unint64_t v53 = *(void *)(v10 + 40);
              if (v52 > v53)
              {
                int v54 = *(_DWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v54;
                *(void *)(v10 + 40) = v52;
                *(void *)(v46 + 8) = v53;
              }
            }
          }
          else
          {
            int v50 = *(_DWORD *)(v10 + 32);
            if (v49 <= v47)
            {
              *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v50;
              *(void *)(v10 + 40) = v47;
              *(void *)(v46 + 8) = v48;
              unint64_t v55 = *((void *)a2 - 5);
              if (v55 <= v48) {
                goto LABEL_47;
              }
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v46 + 8) = v55;
            }
            else
            {
              *(_DWORD *)(v10 + 32) = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v10 + 40) = v49;
            }
            *((void *)a2 - 5) = v48;
          }
LABEL_47:
          unint64_t v56 = *(void *)(v14 + 8);
          unint64_t v57 = *(void *)(v33 + 8);
          unint64_t v58 = *(void *)(v46 + 8);
          if (v56 <= v57)
          {
            int v59 = *(_DWORD *)v14;
            if (v58 > v56)
            {
              int v60 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v14 + 8) = v58;
              *(void *)(v46 + 8) = v56;
              if (v58 <= v57)
              {
                unint64_t v57 = v58;
                int v59 = v60;
              }
              else
              {
                int v59 = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v60;
                *(_DWORD *)unint64_t v14 = v59;
                *(void *)(v33 + 8) = v58;
                *(void *)(v14 + 8) = v57;
              }
            }
            else
            {
              unint64_t v57 = *(void *)(v14 + 8);
            }
          }
          else
          {
            int v59 = *(_DWORD *)v33;
            if (v58 <= v56)
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v59;
              *(void *)(v33 + 8) = v56;
              *(void *)(v14 + 8) = v57;
              if (v58 > v57)
              {
                int v61 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v59;
                *(void *)(v14 + 8) = v58;
                *(void *)(v46 + 8) = v57;
                unint64_t v57 = v58;
                int v59 = v61;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v33 + 8) = v58;
              *(void *)(v46 + 8) = v57;
              int v59 = *(_DWORD *)v14;
              unint64_t v57 = v56;
            }
          }
          int v62 = *(_DWORD *)v10;
          *(_DWORD *)unint64_t v10 = v59;
          *(_DWORD *)unint64_t v14 = v62;
          unint64_t v63 = v10 + 16 * v13;
          uint64_t v64 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = v57;
          *(void *)(v63 + 8) = v64;
          --a3;
          uint64_t v30 = *(void *)v10;
          if (a4) {
            goto LABEL_34;
          }
LABEL_58:
          unint64_t v43 = *(void *)(v10 + 8);
          if (*(void *)(v10 - 8) > v43) {
            goto LABEL_59;
          }
          if (v43 > *((void *)a2 - 1))
          {
            unint64_t v79 = v10;
            do
            {
              unint64_t v10 = v79 + 16;
              unint64_t v80 = *(void *)(v79 + 24);
              v79 += 16;
            }
            while (v43 <= v80);
          }
          else
          {
            unint64_t v81 = v10 + 16;
            do
            {
              unint64_t v10 = v81;
              if (v81 >= (unint64_t)a2) {
                break;
              }
              unint64_t v82 = *(void *)(v81 + 8);
              v81 += 16;
            }
            while (v43 <= v82);
          }
          uint64_t v83 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v84 = a2;
            do
            {
              uint64_t v83 = v84 - 4;
              unint64_t v85 = *((void *)v84 - 1);
              v84 -= 4;
            }
            while (v43 > v85);
          }
          while (v10 < (unint64_t)v83)
          {
            int v86 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *v83;
            int *v83 = v86;
            uint64_t v87 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *((void *)v83 + 1);
            *((void *)v83 + 1) = v87;
            do
            {
              unint64_t v88 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v43 <= v88);
            do
            {
              unint64_t v89 = *((void *)v83 - 1);
              v83 -= 4;
            }
            while (v43 > v89);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v30;
          *(void *)(v10 - 8) = v43;
        }
        unint64_t v19 = *(void *)(v10 + 8);
        unint64_t v20 = *(void *)(v14 + 8);
        if (v19 > v20)
        {
          int v21 = *(_DWORD *)v14;
          if (v15 <= v19)
          {
            *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = v21;
            *(void *)(v14 + 8) = v19;
            *(void *)(v10 + 8) = v20;
            unint64_t v42 = *((void *)a2 - 1);
            if (v42 <= v20) {
              goto LABEL_33;
            }
            *(_DWORD *)unint64_t v10 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v10 + 8) = v42;
          }
          else
          {
            *(_DWORD *)unint64_t v14 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v14 + 8) = v15;
          }
          *((void *)a2 - 1) = v20;
LABEL_33:
          --a3;
          uint64_t v30 = *(void *)v10;
          if ((a4 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_34;
        }
        if (v15 <= v19) {
          goto LABEL_33;
        }
        int v26 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = *(a2 - 4);
        *(a2 - 4) = v26;
        *(void *)(v10 + 8) = v15;
        *((void *)a2 - 1) = v19;
        unint64_t v27 = *(void *)(v10 + 8);
        unint64_t v28 = *(void *)(v14 + 8);
        if (v27 <= v28) {
          goto LABEL_33;
        }
        int v29 = *(_DWORD *)v14;
        *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = v29;
        *(void *)(v14 + 8) = v27;
        *(void *)(v10 + 8) = v28;
        --a3;
        uint64_t v30 = *(void *)v10;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_34:
        unint64_t v43 = *(void *)(v10 + 8);
LABEL_59:
        uint64_t v65 = 0;
        do
        {
          unint64_t v66 = *(void *)(v10 + v65 + 24);
          v65 += 16;
        }
        while (v66 > v43);
        unint64_t v67 = v10 + v65;
        uint64_t v68 = a2;
        if (v65 == 16)
        {
          unsigned __int8 v71 = a2;
          while (v67 < (unint64_t)v71)
          {
            int64_t v69 = v71 - 4;
            unint64_t v72 = *((void *)v71 - 1);
            v71 -= 4;
            if (v72 > v43) {
              goto LABEL_67;
            }
          }
          int64_t v69 = v71;
          unint64_t v10 = v67;
        }
        else
        {
          do
          {
            int64_t v69 = v68 - 4;
            unint64_t v70 = *((void *)v68 - 1);
            v68 -= 4;
          }
          while (v70 <= v43);
LABEL_67:
          unint64_t v10 = v67;
          if (v67 < (unint64_t)v69)
          {
            unint64_t v73 = (unint64_t)v69;
            do
            {
              int v74 = *(_DWORD *)v10;
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v73;
              *(_DWORD *)unint64_t v73 = v74;
              uint64_t v75 = *(void *)(v10 + 8);
              *(void *)(v10 + 8) = *(void *)(v73 + 8);
              *(void *)(v73 + 8) = v75;
              do
              {
                unint64_t v76 = *(void *)(v10 + 24);
                v10 += 16;
              }
              while (v76 > v43);
              do
              {
                unint64_t v77 = *(void *)(v73 - 8);
                v73 -= 16;
              }
              while (v77 <= v43);
            }
            while (v10 < v73);
          }
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v30;
        *(void *)(v10 - 8) = v43;
        if (v67 >= (unint64_t)v69) {
          break;
        }
LABEL_78:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v78 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v9, (int *)(v10 - 16));
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v78) {
        goto LABEL_78;
      }
    }
    a2 = (int *)(v10 - 16);
    if (!v78) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(uint64_t a1, int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 1);
      unint64_t v7 = *(void *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        *(void *)(a1 + 8) = v6;
        *((void *)a2 - 1) = v7;
      }
      return result;
    case 3:
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *((void *)a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(a2 - 4);
          *(a2 - 4) = v30;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v11;
          *((void *)a2 - 1) = v9;
          unint64_t v31 = *(void *)(a1 + 24);
          unint64_t v32 = *(void *)(a1 + 8);
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v33;
            *(void *)(a1 + 8) = v31;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v12;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
          unint64_t v37 = *((void *)a2 - 1);
          if (v37 > v10)
          {
            *(_DWORD *)(a1 + 16) = *(a2 - 4);
            *(a2 - 4) = v12;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v37;
            *((void *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *(a2 - 4);
          *(a2 - 4) = v12;
          *(void *)(a1 + 8) = v11;
          *((void *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (int *)(a1 + 48));
      unint64_t v19 = *((void *)a2 - 1);
      unint64_t v20 = *(void *)(a1 + 56);
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = *(a2 - 4);
      *(a2 - 4) = v21;
      *(void *)(a1 + 56) = v19;
      *((void *)a2 - 1) = v20;
      unint64_t v22 = *(void *)(a1 + 56);
      unint64_t v23 = *(void *)(a1 + 40);
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *(_DWORD *)(a1 + 32);
      int v25 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 48) = v24;
      *(void *)(a1 + 40) = v22;
      *(void *)(a1 + 56) = v23;
      unint64_t v26 = *(void *)(a1 + 24);
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = v27;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v22;
      *(void *)(a1 + 40) = v26;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v22 <= v28) {
        return 1;
      }
      int v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 16) = v29;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v28;
      return 1;
    default:
      unint64_t v13 = *(void *)(a1 + 8);
      unint64_t v14 = (unint64_t *)(a1 + 24);
      unint64_t v15 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 40);
      if (v15 > v13)
      {
        int v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v17;
          *(void *)(a1 + 8) = v15;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 8);
        }
        unint64_t v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *(_DWORD *)(a1 + 16);
        int v35 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v34;
        *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v16;
        *(void *)(a1 + 40) = v15;
        if (v16 > v13)
        {
          int v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *(_DWORD *)(a1 + 16) = v36;
          int v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          unint64_t *v18 = v16;
          unint64_t *v14 = v13;
        }
      }
LABEL_30:
      int v38 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      int v41 = (int *)(a1 + 32);
      while (1)
      {
        unint64_t v42 = *((void *)v38 + 1);
        if (v42 > *((void *)v41 + 1)) {
          break;
        }
LABEL_39:
        int v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *v38;
      uint64_t v44 = v39;
      do
      {
        uint64_t v45 = a1 + v44;
        *(_DWORD *)(v45 + 48) = *(_DWORD *)(a1 + v44 + 32);
        *(void *)(v45 + 56) = *(void *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          *(void *)(a1 + 8) = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *(void *)(v45 + 24));
      uint64_t v46 = a1 + v44;
      *(_DWORD *)(v46 + 48) = v43;
      *(void *)(v46 + 56) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 4 == a2;
  }
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>(int *result, int *a2, int *a3, int *a4)
{
  unint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = *((void *)result + 1);
  unint64_t v6 = *((void *)a3 + 1);
  if (v4 > v5)
  {
    int v7 = *result;
    if (v6 <= v4)
    {
      void *result = *a2;
      *a2 = v7;
      *((void *)result + 1) = v4;
      *((void *)a2 + 1) = v5;
      unint64_t v4 = *((void *)a3 + 1);
      if (v4 <= v5) {
        goto LABEL_11;
      }
      *a2 = *a3;
      *a3 = v7;
      *((void *)a2 + 1) = v4;
    }
    else
    {
      void *result = *a3;
      *a3 = v7;
      *((void *)result + 1) = v6;
    }
    *((void *)a3 + 1) = v5;
    unint64_t v4 = v5;
LABEL_11:
    unint64_t v12 = *((void *)a4 + 1);
    if (v12 <= v4) {
      return result;
    }
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    unint64_t v4 = *((void *)a3 + 1);
    unint64_t v12 = *((void *)a4 + 1);
    if (v12 <= v6) {
      return result;
    }
    goto LABEL_14;
  }
  int v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  *((void *)a2 + 1) = v6;
  *((void *)a3 + 1) = v4;
  unint64_t v9 = *((void *)a2 + 1);
  unint64_t v10 = *((void *)result + 1);
  if (v9 <= v10) {
    goto LABEL_11;
  }
  int v11 = *result;
  void *result = *a2;
  *a2 = v11;
  *((void *)result + 1) = v9;
  *((void *)a2 + 1) = v10;
  unint64_t v4 = *((void *)a3 + 1);
  unint64_t v12 = *((void *)a4 + 1);
  if (v12 <= v4) {
    return result;
  }
LABEL_14:
  int v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  *((void *)a3 + 1) = v12;
  *((void *)a4 + 1) = v4;
  unint64_t v14 = *((void *)a3 + 1);
  unint64_t v15 = *((void *)a2 + 1);
  if (v14 > v15)
  {
    int v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    *((void *)a2 + 1) = v14;
    *((void *)a3 + 1) = v15;
    unint64_t v17 = *((void *)a2 + 1);
    unint64_t v18 = *((void *)result + 1);
    if (v17 > v18)
    {
      int v19 = *result;
      void *result = *a2;
      *a2 = v19;
      *((void *)result + 1) = v17;
      *((void *)a2 + 1) = v18;
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(char *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  uint64_t v6 = *(void *)result;
  unsigned int v7 = *((_DWORD *)result + 4);
  if (!v7) {
    goto LABEL_22;
  }
  unsigned int v8 = v7 - 1;
  unsigned int v9 = (37 * *a2) & (v7 - 1);
  unint64_t v10 = (_DWORD *)(v6 + 4 * v9);
  int v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    char v12 = 0;
    goto LABEL_9;
  }
  int v13 = 0;
  int v14 = 1;
  while (v11 != -1)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v11 == -2;
    }
    if (v15) {
      int v13 = v10;
    }
    unsigned int v16 = v9 + v14++;
    unsigned int v9 = v16 & v8;
    unint64_t v10 = (_DWORD *)(v6 + 4 * (v16 & v8));
    int v11 = *v10;
    if (*a2 == *v10) {
      goto LABEL_3;
    }
  }
  if (v13) {
    unint64_t v10 = v13;
  }
  int v17 = *((_DWORD *)result + 2);
  if (4 * v17 + 4 >= 3 * v7)
  {
LABEL_22:
    v7 *= 2;
LABEL_23:
    BOOL result = llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)result, v7);
    uint64_t v6 = *(void *)v4;
    int v18 = *((_DWORD *)v4 + 4);
    if (v18)
    {
      int v19 = v18 - 1;
      unsigned int v20 = (37 * *a2) & (v18 - 1);
      unint64_t v10 = (_DWORD *)(v6 + 4 * v20);
      int v21 = *v10;
      if (*a2 != *v10)
      {
        unint64_t v22 = 0;
        int v23 = 1;
        while (v21 != -1)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -2;
          }
          if (v24) {
            unint64_t v22 = v10;
          }
          unsigned int v25 = v20 + v23++;
          unsigned int v20 = v25 & v19;
          unint64_t v10 = (_DWORD *)(v6 + 4 * (v25 & v19));
          int v21 = *v10;
          if (*a2 == *v10) {
            goto LABEL_6;
          }
        }
        if (v22) {
          unint64_t v10 = v22;
        }
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_6;
  }
  if (v7 + ~v17 - *((_DWORD *)result + 3) <= v7 >> 3) {
    goto LABEL_23;
  }
LABEL_6:
  ++*((_DWORD *)v4 + 2);
  if (*v10 != -1) {
    --*((_DWORD *)v4 + 3);
  }
  _DWORD *v10 = *a2;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  char v12 = 1;
LABEL_9:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v6 + 4 * v7;
  *(unsigned char *)(a3 + 16) = v12;
  return result;
}

char *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = (char *)llvm::allocate_buffer(4 * v8, (std::align_val_t)4uLL);
  unint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11) {
      memset(result, 255, 4 * v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v4;
      do
      {
        int v16 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          int v17 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v18 = v17 & (37 * v16);
          BOOL v15 = &v10[4 * v18];
          int v19 = *(_DWORD *)v15;
          if (v16 != *(_DWORD *)v15)
          {
            unsigned int v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                unsigned int v20 = v15;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v17;
              BOOL v15 = &v10[4 * (v23 & v17)];
              int v19 = *(_DWORD *)v15;
              if (v16 == *(_DWORD *)v15) {
                goto LABEL_16;
              }
            }
            if (v20) {
              BOOL v15 = v20;
            }
          }
LABEL_16:
          *(_DWORD *)BOOL v15 = v16;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        int v13 = (llvm *)((char *)v13 + 4);
      }
      while (v13 != (llvm *)((char *)v4 + 4 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(4 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    return (char *)memset(result, 255, 4 * v14);
  }
  return result;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_0>(uint64_t *result, uint64_t a2)
{
  uint64_t v4 = *result;
  uint64_t v3 = (_DWORD *)result[1];
  int v5 = (*v3)++;
  unsigned int v6 = *(_DWORD *)(v4 + 720);
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v4 + 704);
  unsigned int v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v9 = (void *)(v7 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v12 = 0;
    int v13 = 1;
    while (v10 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v10 == -8192;
      }
      if (v14) {
        int v12 = v9;
      }
      unsigned int v15 = v8 + v13++;
      unsigned int v8 = v15 & (v6 - 1);
      unsigned int v9 = (void *)(v7 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        return result;
      }
    }
    if (v12) {
      int v16 = v12;
    }
    else {
      int v16 = v9;
    }
    int v17 = *(_DWORD *)(v4 + 712);
    if (4 * v17 + 4 < 3 * v6)
    {
      if (v6 + ~v17 - *(_DWORD *)(v4 + 716) > v6 >> 3) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
LABEL_22:
    v6 *= 2;
LABEL_23:
    BOOL result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v4 + 704, v6);
    uint64_t v18 = *(void *)(v4 + 704);
    int v19 = *(_DWORD *)(v4 + 720) - 1;
    unsigned int v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    int v16 = (void *)(v18 + 16 * v20);
    uint64_t v21 = *v16;
    if (*v16 == a2)
    {
LABEL_24:
      ++*(_DWORD *)(v4 + 712);
      if (a2 == -4096) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    BOOL v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        BOOL v22 = v16;
      }
      unsigned int v25 = v20 + v23++;
      unsigned int v20 = v25 & v19;
      int v16 = (void *)(v18 + 16 * (v25 & v19));
      uint64_t v21 = *v16;
      if (*v16 == a2) {
        goto LABEL_24;
      }
    }
    if (v22) {
      int v16 = v22;
    }
LABEL_6:
    uint64_t v11 = *v16;
    ++*(_DWORD *)(v4 + 712);
    if (v11 == -4096)
    {
LABEL_8:
      void *v16 = a2;
      *((_DWORD *)v16 + 2) = v5;
      return result;
    }
LABEL_7:
    --*(_DWORD *)(v4 + 716);
    goto LABEL_8;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Block *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56) - (void)v2;
  if (!v3) {
    return 1;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = 8 * (v3 >> 3);
  while (mlir::BytecodeReader::Impl::sortUseListOrder(v4, *v2))
  {
    ++v2;
    v5 -= 8;
    if (!v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::BytecodeReader::Impl::processUseLists(mlir::Operation *)::$_2>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  while (1)
  {
    NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v4);
    if (!mlir::BytecodeReader::Impl::sortUseListOrder(v5, NextResultAtOffset)) {
      break;
    }
    if (v2 == ++v4) {
      return 1;
    }
  }
  return 0;
}

void *mlir::BytecodeWriterConfig::BytecodeWriterConfig(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (char *)operator new(0xF8uLL);
  *(void *)unsigned int v6 = 6;
  v6[8] = 0;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0x1000000000;
  *((void *)v6 + 5) = a2;
  *((void *)v6 + 6) = a3;
  *((void *)v6 + 7) = v6 + 72;
  *((void *)v6 + 8) = 0x600000000;
  *((void *)v6 + 15) = v6 + 136;
  *((void *)v6 + 16) = 0x600000000;
  *((void *)v6 + 23) = v6 + 200;
  *((void *)v6 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0x600000000;
  *a1 = v6;
  return a1;
}

void mlir::BytecodeWriterConfig::~BytecodeWriterConfig(mlir::BytecodeWriterConfig::Impl **this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    mlir::BytecodeWriterConfig::Impl::~Impl(v2);
    operator delete(v3);
  }
}

uint64_t mlir::BytecodeWriterConfig::getAttributeWriterCallbacks(mlir::BytecodeWriterConfig *this)
{
  return *(void *)(*(void *)this + 56);
}

uint64_t mlir::BytecodeWriterConfig::getTypeWriterCallbacks(mlir::BytecodeWriterConfig *this)
{
  return *(void *)(*(void *)this + 120);
}

uint64_t mlir::BytecodeWriterConfig::setElideResourceDataFlag(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 8) = a2;
  return this;
}

void **mlir::BytecodeWriterConfig::setDesiredBytecodeVersion(void **this, uint64_t a2)
{
  **this = a2;
  return this;
}

uint64_t mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(mlir::BytecodeWriterConfig *this)
{
  return **(void **)this;
}

uint64_t mlir::BytecodeWriterConfig::getDialectVersionMap(mlir::BytecodeWriterConfig *this)
{
  return *(void *)this + 16;
}

void mlir::writeBytecodeToFile(mlir *this, mlir::Operation *a2, llvm::raw_ostream *a3, const mlir::BytecodeWriterConfig *a4)
{
  uint64_t v529 = *MEMORY[0x1E4F143B8];
  v485 = 0;
  uint64_t v486 = 0;
  unsigned int v487 = 0;
  v488 = v490;
  unint64_t v489 = 0;
  uint64_t v7 = mlir::bytecode::detail::IRNumberingState::IRNumberingState((mlir::bytecode::detail::IRNumberingState *)v490, this, a3);
  uint64_t v499 = *(void *)a3;
  v500 = 0;
  uint64_t v502 = 0;
  v501 = 0;
  v503 = &v505;
  long long v504 = xmmword_1810FE310;
  uint64_t v507 = 0;
  v506 = 0;
  unsigned int v508 = 0;
  v455 = (mlir::bytecode::detail::IRNumberingState *)v7;
  uint64_t v509 = v7;
  v510 = &v485;
  uint64_t v511 = v499;
  *(_OWORD *)v463 = 0u;
  long long v464 = 0u;
  *(_OWORD *)v461 = 0u;
  long long v462 = 0u;
  *(_OWORD *)v460 = 0u;
  int v465 = 1;
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)v460, 0, "ML\xEF\x52duplicate top-level section: ", "\x00duplicate top-level section: ", 4);
  if (*(void *)v499 >= 7uLL)
  {
    LOWORD(v479) = 257;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v477, (uint64_t)__dst);
    if (__dst[0])
    {
      LODWORD(v520) = 3;
      unint64_t v521 = (unint64_t)"unsupported version requested ";
      uint64_t v522 = 30;
      unsigned int v8 = &v520;
      unsigned int v9 = (char *)v513[1];
      if (LODWORD(v513[2]) >= HIDWORD(v513[2]))
      {
        unint64_t v431 = LODWORD(v513[2]) + 1;
        if (v513[1] <= &v520 && (char *)v513[1] + 24 * LODWORD(v513[2]) > (char *)&v520)
        {
          int64_t v442 = (char *)&v520 - (char *)v513[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v431, 24);
          unsigned int v9 = (char *)v513[1];
          unsigned int v8 = (uint64_t **)((char *)v513[1] + v442);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v431, 24);
          unsigned int v8 = &v520;
          unsigned int v9 = (char *)v513[1];
        }
      }
      uint64_t v10 = &v9[24 * LODWORD(v513[2])];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = v8[2];
      *(_OWORD *)uint64_t v10 = v11;
      uint64_t v12 = ++LODWORD(v513[2]);
      if (__dst[0])
      {
        unint64_t v13 = *(void *)v499;
        LODWORD(v520) = 2;
        unint64_t v521 = v13;
        BOOL v14 = &v520;
        unsigned int v15 = (char *)v513[1];
        if (v12 >= HIDWORD(v513[2]))
        {
          unint64_t v432 = v12 + 1;
          BOOL v433 = (char *)v513[1] + 24 * v12 > (char *)&v520;
          if (v513[1] <= &v520 && v433)
          {
            int64_t v443 = (char *)&v520 - (char *)v513[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v432, 24);
            unsigned int v15 = (char *)v513[1];
            BOOL v14 = (uint64_t **)((char *)v513[1] + v443);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v432, 24);
            BOOL v14 = &v520;
            unsigned int v15 = (char *)v513[1];
          }
        }
        int v16 = &v15[24 * LODWORD(v513[2])];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)int v16 = v17;
        uint64_t v18 = ++LODWORD(v513[2]);
        if (__dst[0])
        {
          LODWORD(v520) = 3;
          unint64_t v521 = (unint64_t)", must be in range [";
          uint64_t v522 = 20;
          int v19 = &v520;
          unsigned int v20 = (char *)v513[1];
          if (v18 >= HIDWORD(v513[2]))
          {
            unint64_t v434 = v18 + 1;
            BOOL v435 = (char *)v513[1] + 24 * v18 > (char *)&v520;
            if (v513[1] <= &v520 && v435)
            {
              int64_t v444 = (char *)&v520 - (char *)v513[1];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v434, 24);
              unsigned int v20 = (char *)v513[1];
              int v19 = (uint64_t **)((char *)v513[1] + v444);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v434, 24);
              int v19 = &v520;
              unsigned int v20 = (char *)v513[1];
            }
          }
          uint64_t v21 = &v20[24 * LODWORD(v513[2])];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = v19[2];
          *(_OWORD *)uint64_t v21 = v22;
          uint64_t v23 = ++LODWORD(v513[2]);
          if (__dst[0])
          {
            LODWORD(v520) = 2;
            unint64_t v521 = 0;
            BOOL v24 = &v520;
            unsigned int v25 = (char *)v513[1];
            if (v23 >= HIDWORD(v513[2]))
            {
              unint64_t v436 = v23 + 1;
              BOOL v437 = (char *)v513[1] + 24 * v23 > (char *)&v520;
              if (v513[1] <= &v520 && v437)
              {
                int64_t v445 = (char *)&v520 - (char *)v513[1];
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v436, 24);
                unsigned int v25 = (char *)v513[1];
                BOOL v24 = (uint64_t **)((char *)v513[1] + v445);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v436, 24);
                BOOL v24 = &v520;
                unsigned int v25 = (char *)v513[1];
              }
            }
            unint64_t v26 = &v25[24 * LODWORD(v513[2])];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = v24[2];
            *(_OWORD *)unint64_t v26 = v27;
            uint64_t v28 = ++LODWORD(v513[2]);
            if (__dst[0])
            {
              LODWORD(v520) = 3;
              unint64_t v521 = (unint64_t)", ";
              uint64_t v522 = 2;
              int v29 = &v520;
              int v30 = (char *)v513[1];
              if (v28 >= HIDWORD(v513[2]))
              {
                unint64_t v438 = v28 + 1;
                BOOL v439 = (char *)v513[1] + 24 * v28 > (char *)&v520;
                if (v513[1] <= &v520 && v439)
                {
                  int64_t v446 = (char *)&v520 - (char *)v513[1];
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v438, 24);
                  int v30 = (char *)v513[1];
                  int v29 = (uint64_t **)((char *)v513[1] + v446);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v438, 24);
                  int v29 = &v520;
                  int v30 = (char *)v513[1];
                }
              }
              unint64_t v31 = &v30[24 * LODWORD(v513[2])];
              long long v32 = *(_OWORD *)v29;
              *((void *)v31 + 2) = v29[2];
              *(_OWORD *)unint64_t v31 = v32;
              uint64_t v33 = ++LODWORD(v513[2]);
              if (__dst[0])
              {
                LODWORD(v520) = 2;
                unint64_t v521 = 6;
                int v34 = &v520;
                int v35 = (char *)v513[1];
                if (v33 >= HIDWORD(v513[2]))
                {
                  unint64_t v440 = v33 + 1;
                  BOOL v441 = (char *)v513[1] + 24 * v33 > (char *)&v520;
                  if (v513[1] <= &v520 && v441)
                  {
                    int64_t v447 = (char *)&v520 - (char *)v513[1];
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v440, 24);
                    int v35 = (char *)v513[1];
                    int v34 = (uint64_t **)((char *)v513[1] + v447);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v513[1], &v513[3], v440, 24);
                    int v34 = &v520;
                    int v35 = (char *)v513[1];
                  }
                }
                int v36 = &v35[24 * LODWORD(v513[2])];
                long long v37 = *(_OWORD *)v34;
                *((void *)v36 + 2) = v34[2];
                *(_OWORD *)int v36 = v37;
                ++LODWORD(v513[2]);
                if (__dst[0]) {
                  mlir::Diagnostic::operator<<((uint64_t)&__dst[1], 93);
                }
              }
            }
          }
        }
      }
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
    if (__dst[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
    }
    if (v519)
    {
      int v38 = (void **)__p;
      if (__p)
      {
        uint64_t v39 = v518;
        int v40 = __p;
        if (v518 != __p)
        {
          do
            uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          int v40 = __p;
        }
        v518 = v38;
        operator delete(v40);
      }
      int v41 = v515;
      if (!v515) {
        goto LABEL_589;
      }
      unint64_t v42 = v516;
      int v43 = v515;
      if (v516 == v515)
      {
LABEL_588:
        v516 = v41;
        operator delete(v43);
LABEL_589:
        if (v513[1] != &v513[3]) {
          free(v513[1]);
        }
        goto LABEL_591;
      }
      do
      {
        uint64_t v45 = (void *)*--v42;
        uint64_t v44 = v45;
        *unint64_t v42 = 0;
        if (v45) {
          operator delete[](v44);
        }
      }
      while (v42 != v41);
LABEL_587:
      int v43 = v515;
      goto LABEL_588;
    }
    goto LABEL_591;
  }
  v449 = (uint64_t *)this;
  v448 = a2;
  memset(v513, 0, sizeof(v513));
  *(_OWORD *)long long __dst = 0u;
  int v514 = 1;
  uint64_t v46 = v491;
  unsigned int v47 = v492;
  if (v47)
  {
    uint64_t v48 = v46 + 24 * v47;
    do
    {
      uint64_t v49 = *(void *)(v46 + 16);
      int v50 = *(void **)v49;
      uint64_t v51 = *(void *)(v49 + 8);
      Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)v49, v51);
      v477[0] = v50;
      v477[1] = (void *)__PAIR64__(HashValue, v51);
      v478[0] = (void *)v489;
      unint64_t v53 = *(void *)(llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>((uint64_t)&v485, (long long *)v477, (uint64_t *)v478)+ 16);
      if (*(uint64_t *)v499 <= 0)
      {
      }
      else
      {
        *(_OWORD *)v480 = 0u;
        long long v481 = 0u;
        *(_OWORD *)v478 = 0u;
        long long v479 = 0u;
        *(_OWORD *)v477 = 0u;
        int v482 = 1;
        int v54 = *(char **)(v49 + 24);
        if (v54)
        {
          unint64_t v55 = *(void *)v499;
          v520 = (uint64_t *)&unk_1EC997B20;
          unint64_t v521 = v55;
          uint64_t v522 = (uint64_t)v477;
          v523 = v455;
          v524 = &v485;
          uint64_t v525 = v499 + 16;
          (*(void (**)(void, uint64_t **))(**(void **)(v49 + 24) + 48))(*(void *)(v49 + 24), &v520);
          uint64_t v56 = *((void *)&v481 + 1);
          unint64_t v57 = (char *)v477[0];
          int v54 = (char *)v477[1];
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v56 = 0;
        }
        unint64_t v58 = &v54[v56];
        if (v58 != v57) {
        int v59 = (char *)v480[0];
        }
        if (v480[0])
        {
          int v60 = v480[1];
          int v61 = v480[0];
          if (v480[1] != v480[0])
          {
            int v62 = (char *)v480[1];
            do
            {
              uint64_t v64 = (void *)*((void *)v62 - 3);
              v62 -= 24;
              unint64_t v63 = v64;
              if (v64)
              {
                *(v60 - 2) = v63;
                operator delete(v63);
              }
              int v60 = v62;
            }
            while (v62 != v59);
            int v61 = v480[0];
          }
          v480[1] = v59;
          operator delete(v61);
        }
        if (v478[1])
        {
          *(void **)&long long v479 = v478[1];
          operator delete(v478[1]);
        }
        if (v477[0])
        {
          v477[1] = v477[0];
          operator delete(v477[0]);
        }
      }
      v46 += 24;
    }
    while (v46 != v48);
  }
  if (*(uint64_t *)v499 > 3) {
  uint64_t v65 = v495;
  }
  unint64_t v66 = v496;
  if (v495 != v496)
  {
    v450 = v496;
    while (1)
    {
      unint64_t v67 = v65;
      uint64_t v68 = v65 + 1;
      uint64_t v69 = **v65;
      uint64_t v65 = v66;
      if (v68 != v66)
      {
        uint64_t v65 = v68;
        do
        {
          if (**v65 != v69) {
            goto LABEL_62;
          }
          ++v65;
        }
        while (v65 != v66);
        uint64_t v65 = v66;
      }
LABEL_62:
      if (v65 != v67) {
        break;
      }
LABEL_56:
      unint64_t v66 = v450;
      if (v65 == v450) {
        goto LABEL_149;
      }
    }
    v456 = v65;
    while (2)
    {
      unint64_t v70 = *v67;
      v477[0] = *(void **)((*v67)[1] + 8);
      v477[0] = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v477);
      v477[1] = v71;
      LOBYTE(v520) = 46;
      uint64_t v72 = llvm::StringRef::find((uint64_t *)v477, (char *)&v520, 1uLL, 0);
      if (v72 == -1)
      {
        int v74 = 0;
        uint64_t v75 = 0;
      }
      else
      {
        if (v477[1] >= (void *)(v72 + 1)) {
          unint64_t v73 = (void *)(v72 + 1);
        }
        else {
          unint64_t v73 = v477[1];
        }
        int v74 = (char *)v477[0] + (unint64_t)v73;
        uint64_t v75 = (char *)((char *)v477[1] - (char *)v73);
      }
      unsigned int v76 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v74, (uint64_t)v75);
      unsigned int v77 = v76;
      v477[0] = v74;
      v477[1] = (void *)__PAIR64__(v76, v75);
      LODWORD(v478[0]) = 0;
      unint64_t v78 = v489;
      unsigned int v79 = v487;
      if (!v487)
      {
LABEL_140:
        int v120 = 2 * v79;
        goto LABEL_146;
      }
      v457 = v70;
      unint64_t v80 = 0;
      unint64_t v81 = v485;
      uint64_t v82 = v487 - 1;
      int v83 = 1;
      unsigned int v84 = v76 & v82;
      unint64_t v85 = (char *)v485 + 24 * (v76 & v82);
      int v86 = *((_DWORD *)v85 + 3);
      if (v76 != v86) {
        goto LABEL_83;
      }
LABEL_74:
      uint64_t v87 = *(const void **)v85;
      if (*(void *)v85 == -2)
      {
        if (v74 != (void *)-2) {
          goto LABEL_83;
        }
LABEL_93:
        uint64_t v65 = v456;
        unint64_t v70 = v457;
        unint64_t v95 = *((void *)v488 + 3 * *((unsigned int *)v85 + 4) + 2);
        if (*(uint64_t *)v499 < 5) {
          goto LABEL_95;
        }
LABEL_94:
        unint64_t v95 = (*(void *)(v70[1] + 16) != (void)&mlir::detail::TypeIDResolver<void,void>::id) | (2 * v95);
        goto LABEL_95;
      }
      if (v87 == (const void *)-1)
      {
        if (v74 != (void *)-1) {
          goto LABEL_83;
        }
        goto LABEL_93;
      }
      if (*((_DWORD *)v85 + 2) == v75)
      {
        if (!v75) {
          goto LABEL_93;
        }
        v452 = v67;
        unint64_t v453 = v78;
        unsigned int v454 = v77;
        uint64_t v88 = v82;
        int v89 = v83;
        unsigned int v451 = v84;
        int v90 = memcmp(v74, v87, v75);
        unsigned int v84 = v451;
        int v83 = v89;
        uint64_t v82 = v88;
        unint64_t v67 = v452;
        unint64_t v78 = v453;
        unsigned int v77 = v454;
        if (!v90) {
          goto LABEL_93;
        }
      }
LABEL_83:
      while (v86)
      {
        unsigned int v91 = v84;
        uint64_t v92 = v82;
        if (v86 != 1) {
          goto LABEL_88;
        }
        BOOL v93 = *(void *)v85 == -2;
LABEL_89:
        if (v93 && v80 == 0) {
          unint64_t v80 = (uint64_t *)v85;
        }
        unsigned int v94 = v91 + v83++;
        uint64_t v82 = v92;
        unsigned int v84 = v94 & v92;
        unint64_t v85 = (char *)v81 + 24 * v84;
        int v86 = *((_DWORD *)v85 + 3);
        if (v77 == v86) {
          goto LABEL_74;
        }
      }
      if (*(void *)v85 == -1)
      {
        if (v80) {
          int64_t v119 = v80;
        }
        else {
          int64_t v119 = (uint64_t *)v85;
        }
        uint64_t v65 = v456;
        unint64_t v70 = v457;
        if (4 * (int)v486 + 4 >= 3 * v79) {
          goto LABEL_140;
        }
        if (v79 + ~v486 - HIDWORD(v486) > v79 >> 3)
        {
          LODWORD(v486) = v486 + 1;
          if (!*((_DWORD *)v119 + 3)) {
            goto LABEL_101;
          }
LABEL_102:
          --HIDWORD(v486);
          goto LABEL_103;
        }
        int v120 = v79;
LABEL_146:
        unint64_t v127 = v78;
        llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow((uint64_t)&v485, v120);
        v520 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)&v485, (uint64_t)v477, (uint64_t *)&v520);
        unint64_t v78 = v127;
        int64_t v119 = v520;
        LODWORD(v486) = v486 + 1;
        if (*((_DWORD *)v520 + 3)) {
          goto LABEL_102;
        }
LABEL_101:
        if (*v119 != -1) {
          goto LABEL_102;
        }
LABEL_103:
        *(_OWORD *)int64_t v119 = *(_OWORD *)v477;
        *((_DWORD *)v119 + 4) = v478[0];
        uint64_t v98 = v489;
        *((_DWORD *)v119 + 4) = v489;
        if (v98 >= HIDWORD(v489))
        {
          v477[0] = v74;
          v477[1] = (void *)__PAIR64__(v77, v75);
          v478[0] = (void *)v78;
          unint64_t v121 = v98 + 1;
          BOOL v122 = (char *)v488 + 24 * v98 > (char *)v477;
          if (v488 <= v477 && v122)
          {
            int64_t v128 = (char *)v477 - (unsigned char *)v488;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v488, v455, v121, 24);
            unint64_t v124 = (char *)v488;
            unint64_t v123 = (void **)((char *)v488 + v128);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v488, v455, v121, 24);
            unint64_t v123 = v477;
            unint64_t v124 = (char *)v488;
          }
          unint64_t v125 = &v124[24 * v489];
          long long v126 = *(_OWORD *)v123;
          *((void *)v125 + 2) = v123[2];
          *(_OWORD *)unint64_t v125 = v126;
        }
        else
        {
          int v99 = (char *)v488 + 24 * v98;
          *(void *)int v99 = v74;
          *((_DWORD *)v99 + 2) = v75;
          *((_DWORD *)v99 + 3) = v77;
          *((void *)v99 + 2) = v78;
        }
        LODWORD(v489) = v489 + 1;
        unint64_t v95 = *((void *)v488 + 3 * v489 - 1);
        if (*(uint64_t *)v499 >= 5) {
          goto LABEL_94;
        }
LABEL_95:
        if (v95 > 0x7F)
        {
          goto LABEL_65;
        }
        char v96 = (2 * v95) | 1;
        unint64_t v97 = (char *)__dst[1];
        if (__dst[1] < v513[0])
        {
          *(unsigned char *)__dst[1] = v96;
          __dst[1] = v97 + 1;
          goto LABEL_65;
        }
        unint64_t v100 = (char *)__dst[0];
        unint64_t v101 = (char *)__dst[1] - (char *)__dst[0];
        int64_t v102 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v102 < 0) {
LABEL_614:
        }
          abort();
        unint64_t v103 = (char *)v513[0] - (char *)__dst[0];
        if (2 * ((char *)v513[0] - (char *)__dst[0]) > (unint64_t)v102) {
          int64_t v102 = 2 * v103;
        }
        if (v103 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v104 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v104 = v102;
        }
        if (v104)
        {
          int v105 = (char *)operator new(v104);
          unint64_t v106 = &v105[v101];
          v105[v101] = v96;
          int v107 = &v105[v101 + 1];
          if (v97 == v100) {
            goto LABEL_133;
          }
LABEL_117:
          if (v101 >= 8 && (unint64_t)(v100 - v105) >= 0x20)
          {
            if (v101 >= 0x20)
            {
              unint64_t v108 = v101 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v109 = &v105[v101 - 16];
              BOOL v110 = v97 - 16;
              unint64_t v111 = v101 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v112 = *(_OWORD *)v110;
                *((_OWORD *)v109 - 1) = *((_OWORD *)v110 - 1);
                *(_OWORD *)uint64_t v109 = v112;
                v109 -= 32;
                v110 -= 32;
                v111 -= 32;
              }
              while (v111);
              if (v101 == v108) {
                goto LABEL_132;
              }
              if ((v101 & 0x18) != 0) {
                goto LABEL_125;
              }
              v106 -= v108;
              v97 -= v108;
            }
            else
            {
              unint64_t v108 = 0;
LABEL_125:
              v106 -= v101 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v113 = &v105[&v97[-v108] - v100 - 8];
              unint64_t v114 = &v97[-v108 - 8];
              unint64_t v115 = v108 - (v101 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v116 = *(void *)v114;
                v114 -= 8;
                *(void *)uint64_t v113 = v116;
                v113 -= 8;
                v115 += 8;
              }
              while (v115);
              v97 -= v101 & 0xFFFFFFFFFFFFFFF8;
              if (v101 == (v101 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_132:
                unint64_t v97 = (char *)__dst[0];
                unint64_t v106 = v105;
                goto LABEL_133;
              }
            }
          }
          uint64_t v117 = v106 - 1;
          do
          {
            char v118 = *--v97;
            *v117-- = v118;
          }
          while (v97 != v100);
          goto LABEL_132;
        }
        int v105 = 0;
        unint64_t v106 = (char *)((char *)__dst[1] - (char *)__dst[0]);
        *(unsigned char *)unint64_t v101 = v96;
        int v107 = (char *)(v101 + 1);
        if (v97 != v100) {
          goto LABEL_117;
        }
LABEL_133:
        __dst[0] = v106;
        __dst[1] = v107;
        v513[0] = &v105[v104];
        if (v97) {
          operator delete(v97);
        }
        __dst[1] = v107;
LABEL_65:
        if (++v67 == v65) {
          goto LABEL_56;
        }
        continue;
      }
      break;
    }
    unsigned int v91 = v84;
    uint64_t v92 = v82;
LABEL_88:
    BOOL v93 = 0;
    goto LABEL_89;
  }
LABEL_149:
  uint64_t v129 = (char *)v513[4];
  if (v513[4])
  {
    uint64_t v130 = v513[5];
    uint64_t v131 = v513[4];
    if (v513[5] != v513[4])
    {
      int v132 = (char *)v513[5];
      do
      {
        unint64_t v134 = (void *)*((void *)v132 - 3);
        v132 -= 24;
        uint64_t v133 = v134;
        if (v134)
        {
          *(v130 - 2) = v133;
          operator delete(v133);
        }
        uint64_t v130 = v132;
      }
      while (v132 != v129);
      uint64_t v131 = v513[4];
    }
    v513[5] = v129;
    operator delete(v131);
  }
  if (v513[1])
  {
    v513[2] = v513[1];
    operator delete(v513[1]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  memset(v513, 0, sizeof(v513));
  *(_OWORD *)long long __dst = 0u;
  int v514 = 1;
  *(_OWORD *)v480 = 0u;
  long long v481 = 0u;
  *(_OWORD *)v478 = 0u;
  long long v479 = 0u;
  *(_OWORD *)v477 = 0u;
  int v482 = 1;
  uint64_t v135 = v493;
  if (v493 != v494)
  {
    int64_t v136 = 0;
    uint64_t v137 = v494;
    v458 = v494;
    while (1)
    {
      uint64_t v138 = v135;
      unint64_t v139 = v135 + 1;
      uint64_t v140 = *(void *)(*v135 + 16);
      uint64_t v135 = v137;
      if (v139 != v137)
      {
        uint64_t v135 = v139;
        do
        {
          if (*(void *)(*v135 + 16) != v140) {
            goto LABEL_169;
          }
          ++v135;
        }
        while (v135 != v137);
        uint64_t v135 = v137;
      }
LABEL_169:
      if (v135 != v138) {
        break;
      }
      int64_t v141 = v136;
LABEL_163:
      int64_t v136 = v141;
      uint64_t v137 = v458;
      if (v135 == v458) {
        goto LABEL_304;
      }
    }
    while (1)
    {
      int v142 = (void *)*v138;
      uint64_t v143 = (uint64_t *)(*(void *)*v138 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v144 = *v143;
      {
        v520 = (uint64_t *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
        unint64_t v521 = 98;
        unint64_t v219 = llvm::StringRef::find((uint64_t *)&v520, "DesiredTypeName = ", 0x12uLL, 0);
        if (v521 >= v219) {
          unint64_t v220 = v219;
        }
        else {
          unint64_t v220 = v521;
        }
        long long v221 = (char *)v520 + v220;
        unint64_t v222 = v521 - v220;
        uint64_t v223 = 18;
        if (v222 < 0x12) {
          uint64_t v223 = v222;
        }
        unint64_t v224 = v222 - v223;
        if (v224 >= v224 - 1) {
          uint64_t v225 = v224 - 1;
        }
        else {
          uint64_t v225 = v224;
        }
        mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v221[v223], v225);
      }
      unint64_t v145 = (void *)(v144 + 72);
      uint64_t v146 = *(void *)(v144 + 96);
      if ((v146 & 2) == 0) {
        unint64_t v145 = (void *)*v145;
      }
      if ((*(uint64_t (**)(void *, uint64_t))(v146 & 0xFFFFFFFFFFFFFFF8))(v145, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))goto LABEL_181; {
      uint64_t v147 = *v143;
      }
      {
        v520 = (uint64_t *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
        unint64_t v521 = 98;
        unint64_t v226 = llvm::StringRef::find((uint64_t *)&v520, "DesiredTypeName = ", 0x12uLL, 0);
        if (v521 >= v226) {
          unint64_t v227 = v226;
        }
        else {
          unint64_t v227 = v521;
        }
        long long v228 = (char *)v520 + v227;
        unint64_t v229 = v521 - v227;
        uint64_t v230 = 18;
        if (v229 < 0x12) {
          uint64_t v230 = v229;
        }
        unint64_t v231 = v229 - v230;
        if (v231 >= v231 - 1) {
          uint64_t v232 = v231 - 1;
        }
        else {
          uint64_t v232 = v231;
        }
        mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v228[v230], v232);
      }
      unint64_t v148 = (void *)(v147 + 72);
      uint64_t v149 = *(void *)(v147 + 96);
      if ((v149 & 2) == 0) {
        unint64_t v148 = (void *)*v148;
      }
      if ((*(unsigned int (**)(void *, uint64_t))(v149 & 0xFFFFFFFFFFFFFFF8))(v148, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))
      {
LABEL_181:
        LODWORD(v521) = 0;
        LOBYTE(v525) = 0;
        uint64_t v526 = 0;
        int v527 = 1;
        v523 = 0;
        v524 = 0;
        uint64_t v522 = 0;
        v520 = (uint64_t *)&unk_1EC998B58;
        v528 = __dst;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v520, 0, 0, 0);
        v466 = v143;
        mlir::Attribute::print((mlir::Attribute *)&v466, (llvm::raw_ostream *)&v520, 0);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v520);
        unint64_t v150 = (char *)__dst[1];
        if (__dst[1] < v513[0])
        {
          *(unsigned char *)__dst[1] = 0;
          uint64_t v151 = v150 + 1;
LABEL_234:
          uint64_t v165 = 0;
          __dst[1] = v151;
          goto LABEL_251;
        }
        uint64_t v152 = (char *)__dst[0];
        unint64_t v153 = (char *)__dst[1] - (char *)__dst[0];
        int64_t v154 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v154 < 0) {
          goto LABEL_614;
        }
        unint64_t v155 = (char *)v513[0] - (char *)__dst[0];
        if (2 * ((char *)v513[0] - (char *)__dst[0]) > (unint64_t)v154) {
          int64_t v154 = 2 * v155;
        }
        if (v155 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v156 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v156 = v154;
        }
        if (v156)
        {
          unsigned int v157 = (char *)operator new(v156);
          unsigned int v158 = &v157[v153];
          v157[v153] = 0;
          uint64_t v151 = &v157[v153 + 1];
          if (v150 == v152)
          {
LABEL_232:
            __dst[0] = v158;
            __dst[1] = v151;
            v513[0] = &v157[v156];
            if (v150) {
              operator delete(v150);
            }
            goto LABEL_234;
          }
        }
        else
        {
          unsigned int v157 = 0;
          unsigned int v158 = (char *)((char *)__dst[1] - (char *)__dst[0]);
          *(unsigned char *)unint64_t v153 = 0;
          uint64_t v151 = (char *)(v153 + 1);
          if (v150 == v152) {
            goto LABEL_232;
          }
        }
        if (v153 >= 8 && (unint64_t)(v152 - v157) >= 0x20)
        {
          if (v153 >= 0x20)
          {
            unint64_t v166 = v153 & 0xFFFFFFFFFFFFFFE0;
            unsigned int v176 = &v157[v153 - 16];
            v177 = v150 - 16;
            unint64_t v178 = v153 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v179 = *(_OWORD *)v177;
              *((_OWORD *)v176 - 1) = *((_OWORD *)v177 - 1);
              *(_OWORD *)unsigned int v176 = v179;
              v176 -= 32;
              v177 -= 32;
              v178 -= 32;
            }
            while (v178);
            if (v153 == v166) {
              goto LABEL_231;
            }
            if ((v153 & 0x18) != 0) {
              goto LABEL_219;
            }
            v158 -= v166;
            v150 -= v166;
          }
          else
          {
            unint64_t v166 = 0;
LABEL_219:
            v158 -= v153 & 0xFFFFFFFFFFFFFFF8;
            unsigned int v180 = &v157[&v150[-v166] - v152 - 8];
            uint64_t v181 = &v150[-v166 - 8];
            unint64_t v182 = v166 - (v153 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v183 = *(void *)v181;
              v181 -= 8;
              *(void *)unsigned int v180 = v183;
              v180 -= 8;
              v182 += 8;
            }
            while (v182);
            v150 -= v153 & 0xFFFFFFFFFFFFFFF8;
            if (v153 == (v153 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_231:
              unint64_t v150 = (char *)__dst[0];
              unsigned int v158 = v157;
              goto LABEL_232;
            }
          }
        }
        uint64_t v185 = v158 - 1;
        do
        {
          char v186 = *--v150;
          *v185-- = v186;
        }
        while (v150 != v152);
        goto LABEL_231;
      }
      unint64_t v159 = *(void *)v499;
      v466 = (uint64_t *)&unk_1EC997B20;
      v467 = (void **)v159;
      v468 = __dst;
      v469 = v455;
      v470 = &v485;
      uint64_t v471 = v499 + 16;
      uint64_t v160 = *(unsigned int *)(v499 + 64);
      if (v160)
      {
        unsigned int v161 = *(uint64_t **)(v499 + 56);
        uint64_t v162 = 8 * v160;
        while (1)
        {
          uint64_t v163 = *v161;
          LOBYTE(v520) = 0;
          LOBYTE(v522) = 0;
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t **, uint64_t **))(*(void *)v163 + 16))(v163, v143, &v520, &v466))
          {
            break;
          }
          ++v161;
          v162 -= 8;
          if (!v162) {
            goto LABEL_196;
          }
        }
      }
      else
      {
LABEL_196:
        uint64_t v164 = *(void *)(v142[2] + 24);
        if (!v164
          || !(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v164 + 32))(v164, v143, &v466))
        {
          LODWORD(v521) = 0;
          LOBYTE(v525) = 0;
          uint64_t v526 = 0;
          int v527 = 1;
          v523 = 0;
          v524 = 0;
          uint64_t v522 = 0;
          v520 = (uint64_t *)&unk_1EC998B58;
          v528 = __dst;
          llvm::raw_ostream::SetBufferAndMode((uint64_t)&v520, 0, 0, 0);
          *(void *)&long long v483 = v143;
          mlir::Attribute::print((mlir::Attribute *)&v483, (llvm::raw_ostream *)&v520, 0);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v520);
          int v167 = (char *)__dst[1];
          if (__dst[1] < v513[0])
          {
            *(unsigned char *)__dst[1] = 0;
            uint64_t v168 = v167 + 1;
LABEL_249:
            uint64_t v165 = 0;
            __dst[1] = v168;
            goto LABEL_250;
          }
          unsigned int v169 = (char *)__dst[0];
          unint64_t v170 = (char *)__dst[1] - (char *)__dst[0];
          int64_t v171 = (char *)__dst[1] - (char *)__dst[0] + 1;
          if (v171 < 0) {
            goto LABEL_614;
          }
          unint64_t v172 = (char *)v513[0] - (char *)__dst[0];
          if (2 * ((char *)v513[0] - (char *)__dst[0]) > (unint64_t)v171) {
            int64_t v171 = 2 * v172;
          }
          if (v172 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v173 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v173 = v171;
          }
          if (v173)
          {
            unsigned int v174 = (char *)operator new(v173);
            int v175 = &v174[v170];
            v174[v170] = 0;
            uint64_t v168 = &v174[v170 + 1];
            if (v167 == v169)
            {
LABEL_247:
              __dst[0] = v175;
              __dst[1] = v168;
              v513[0] = &v174[v173];
              if (v167) {
                operator delete(v167);
              }
              goto LABEL_249;
            }
          }
          else
          {
            unsigned int v174 = 0;
            int v175 = (char *)((char *)__dst[1] - (char *)__dst[0]);
            *(unsigned char *)unint64_t v170 = 0;
            uint64_t v168 = (char *)(v170 + 1);
            if (v167 == v169) {
              goto LABEL_247;
            }
          }
          if (v170 >= 8 && (unint64_t)(v169 - v174) >= 0x20)
          {
            if (v170 >= 0x20)
            {
              unint64_t v184 = v170 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v187 = &v174[v170 - 16];
              unint64_t v188 = v167 - 16;
              unint64_t v189 = v170 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v190 = *(_OWORD *)v188;
                *((_OWORD *)v187 - 1) = *((_OWORD *)v188 - 1);
                *(_OWORD *)uint64_t v187 = v190;
                v187 -= 32;
                v188 -= 32;
                v189 -= 32;
              }
              while (v189);
              if (v170 == v184) {
                goto LABEL_246;
              }
              if ((v170 & 0x18) != 0) {
                goto LABEL_239;
              }
              v175 -= v184;
              v167 -= v184;
            }
            else
            {
              unint64_t v184 = 0;
LABEL_239:
              v175 -= v170 & 0xFFFFFFFFFFFFFFF8;
              char v191 = &v174[&v167[-v184] - v169 - 8];
              uint64_t v192 = &v167[-v184 - 8];
              unint64_t v193 = v184 - (v170 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v194 = *(void *)v192;
                v192 -= 8;
                *(void *)char v191 = v194;
                v191 -= 8;
                v193 += 8;
              }
              while (v193);
              v167 -= v170 & 0xFFFFFFFFFFFFFFF8;
              if (v170 == (v170 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_246:
                int v167 = (char *)__dst[0];
                int v175 = v174;
                goto LABEL_247;
              }
            }
          }
          uint64_t v195 = v175 - 1;
          do
          {
            char v196 = *--v167;
            *v195-- = v196;
          }
          while (v167 != v169);
          goto LABEL_246;
        }
      }
      uint64_t v165 = 1;
LABEL_250:
      uint64_t v151 = (char *)__dst[1];
LABEL_251:
      int64_t v141 = (char *)v513[7] + (unint64_t)v151 - (char *)__dst[0];
      unint64_t v197 = v165 | (2 * (v141 - v136));
      if (v197 > 0x7F)
      {
      }
      else
      {
        char v198 = (2 * v197) | 1;
        int v199 = (char *)v477[1];
        if (v477[1] >= v478[0])
        {
          char v200 = (char *)v477[0];
          unint64_t v201 = (char *)v477[1] - (char *)v477[0];
          int64_t v202 = (char *)v477[1] - (char *)v477[0] + 1;
          if (v202 < 0) {
            goto LABEL_614;
          }
          unint64_t v203 = (char *)v478[0] - (char *)v477[0];
          if (2 * ((char *)v478[0] - (char *)v477[0]) > (unint64_t)v202) {
            int64_t v202 = 2 * v203;
          }
          if (v203 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v204 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v204 = v202;
          }
          if (v204)
          {
            unsigned __int8 v205 = operator new(v204);
            uint64_t v206 = &v205[v201];
            v205[v201] = v198;
            uint64_t v207 = &v205[v201 + 1];
            if (v199 != v200)
            {
LABEL_262:
              if (v201 >= 8 && (unint64_t)(v200 - v205) >= 0x20)
              {
                if (v201 >= 0x20)
                {
                  unint64_t v208 = v201 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v209 = &v205[v201 - 16];
                  v210 = v199 - 16;
                  unint64_t v211 = v201 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v212 = *(_OWORD *)v210;
                    *(v209 - 1) = *((_OWORD *)v210 - 1);
                    _OWORD *v209 = v212;
                    v209 -= 2;
                    v210 -= 32;
                    v211 -= 32;
                  }
                  while (v211);
                  if (v201 == v208) {
                    goto LABEL_280;
                  }
                  if ((v201 & 0x18) != 0) {
                    goto LABEL_273;
                  }
                  v206 -= v208;
                  v199 -= v208;
                }
                else
                {
                  unint64_t v208 = 0;
LABEL_273:
                  v206 -= v201 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v213 = &v205[&v199[-v208] - v200 - 8];
                  v214 = &v199[-v208 - 8];
                  unint64_t v215 = v208 - (v201 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v216 = *(void *)v214;
                    v214 -= 8;
                    *v213-- = v216;
                    v215 += 8;
                  }
                  while (v215);
                  v199 -= v201 & 0xFFFFFFFFFFFFFFF8;
                  if (v201 == (v201 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_280:
                    int v199 = (char *)v477[0];
                    v477[0] = v205;
                    v477[1] = v207;
                    v478[0] = &v205[v204];
                    if (v199) {
LABEL_281:
                    }
                      operator delete(v199);
LABEL_282:
                    v477[1] = v207;
                    goto LABEL_172;
                  }
                }
              }
              unint64_t v217 = v206 - 1;
              do
              {
                char v218 = *--v199;
                *v217-- = v218;
              }
              while (v199 != v200);
              goto LABEL_280;
            }
          }
          else
          {
            unsigned __int8 v205 = 0;
            uint64_t v206 = (char *)((char *)v477[1] - (char *)v477[0]);
            *(unsigned char *)unint64_t v201 = v198;
            uint64_t v207 = (char *)(v201 + 1);
            if (v199 != v200) {
              goto LABEL_262;
            }
          }
          v477[0] = v206;
          v477[1] = v207;
          v478[0] = &v205[v204];
          if (v199) {
            goto LABEL_281;
          }
          goto LABEL_282;
        }
        *(unsigned char *)v477[1] = v198;
        v477[1] = v199 + 1;
      }
LABEL_172:
      ++v138;
      int64_t v136 = v141;
      if (v138 == v135) {
        goto LABEL_163;
      }
    }
  }
  int64_t v141 = 0;
LABEL_304:
  int v233 = v497;
  BOOL v234 = v498;
  if (v497 == v498)
  {
LABEL_446:
    uint64_t v330 = (char *)v480[0];
    if (v480[0])
    {
      v331 = v480[1];
      v332 = v480[0];
      if (v480[1] != v480[0])
      {
        uint64_t v333 = (char *)v480[1];
        do
        {
          unsigned int v335 = (void *)*((void *)v333 - 3);
          v333 -= 24;
          v334 = v335;
          if (v335)
          {
            *(v331 - 2) = v334;
            operator delete(v334);
          }
          v331 = v333;
        }
        while (v333 != v330);
        v332 = v480[0];
      }
      v480[1] = v330;
      operator delete(v332);
    }
    if (v478[1])
    {
      *(void **)&long long v479 = v478[1];
      operator delete(v478[1]);
    }
    if (v477[0])
    {
      v477[1] = v477[0];
      operator delete(v477[0]);
    }
    unint64_t v336 = (char *)v513[4];
    if (v513[4])
    {
      v337 = v513[5];
      std::string::size_type v338 = v513[4];
      if (v513[5] != v513[4])
      {
        uint64_t v339 = (char *)v513[5];
        do
        {
          uint64_t v341 = (void *)*((void *)v339 - 3);
          v339 -= 24;
          v340 = v341;
          if (v341)
          {
            *(v337 - 2) = v340;
            operator delete(v340);
          }
          v337 = v339;
        }
        while (v339 != v336);
        std::string::size_type v338 = v513[4];
      }
      v513[5] = v336;
      operator delete(v338);
    }
    if (v513[1])
    {
      v513[2] = v513[1];
      operator delete(v513[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    memset(&v513[1], 0, 56);
    int v514 = 1;
    std::string::size_type v342 = operator new(1uLL);
    __dst[0] = v342;
    *std::string::size_type v342 = 5;
    v513[0] = v342 + 1;
    __dst[1] = v342 + 1;
    if (v343) {
    unsigned int v344 = (char *)v513[4];
    }
    if (v513[4])
    {
      long long v345 = v513[5];
      uint64_t v346 = v513[4];
      if (v513[5] != v513[4])
      {
        std::string::size_type v347 = (char *)v513[5];
        do
        {
          long long v349 = (void *)*((void *)v347 - 3);
          v347 -= 24;
          std::string v348 = v349;
          if (v349)
          {
            *(v345 - 2) = v348;
            operator delete(v348);
          }
          long long v345 = v347;
        }
        while (v347 != v344);
        uint64_t v346 = v513[4];
      }
      v513[5] = v344;
      operator delete(v346);
    }
    if (v513[1])
    {
      v513[2] = v513[1];
      operator delete(v513[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (!v343)
    {
      uint64_t v390 = (char *)v463[0];
      if (!v463[0]) {
        goto LABEL_599;
      }
      goto LABEL_592;
    }
    memset(v513, 0, sizeof(v513));
    *(_OWORD *)long long __dst = 0u;
    int v514 = 1;
    *(_OWORD *)v480 = 0u;
    long long v481 = 0u;
    *(_OWORD *)v478 = 0u;
    long long v479 = 0u;
    *(_OWORD *)v477 = 0u;
    int v482 = 1;
    v520 = &v522;
    unint64_t v521 = 0x100000000;
    v473 = __dst;
    v474 = &v520;
    v475 = &v476;
    uint64_t v476 = 0;
    v472[0] = v477;
    v472[1] = &v520;
    v472[2] = &v485;
    char v350 = *(unsigned char *)(v499 + 8);
    v466 = (uint64_t *)&unk_1EC997EF8;
    v467 = __dst;
    v468 = &v485;
    v470 = (llvm **)&v473;
    LOBYTE(v471) = v350;
    uint64_t v351 = *(unsigned int *)(v499 + 192);
    if (v351)
    {
      uint64_t v352 = *(uint64_t **)(v499 + 184);
      uint64_t v353 = 8 * v351;
      do
      {
        LODWORD(v521) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)*v352 + 16))(*v352, v449, &v466);
        uint64_t v354 = *v352++;
        v355 = (void *)(v354 + 8);
        long long v356 = *(void **)(v354 + 8);
        int v357 = *(char *)(v354 + 31);
        if (v357 >= 0) {
          v358 = v355;
        }
        else {
          v358 = v356;
        }
        uint64_t v359 = v355[1];
        if (v357 >= 0) {
          uint64_t v360 = v357;
        }
        else {
          uint64_t v360 = v359;
        }
        unsigned int v361 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v358, v360);
        *(void *)&long long v483 = v358;
        *((void *)&v483 + 1) = __PAIR64__(v361, v360);
        v484[0] = v489;
        uint64_t v362 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>((uint64_t)&v485, &v483, v484);
        v353 -= 8;
      }
      while (v353);
    }
    if (v492)
    {
      uint64_t v363 = v491;
      uint64_t v364 = v491 + 24 * v492;
      do
      {
        uint64_t v365 = *(void *)(v363 + 16);
        uint64_t v366 = *(void *)(v365 + 32);
        if (v366)
        {
          LODWORD(v521) = 0;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t **))(*(void *)v366 + 56))(v366, v449, v365 + 40, &v466);
          uint64_t v367 = *(unsigned int *)(v365 + 112);
          if (v367)
          {
            uint64_t v368 = 24 * v367;
            v369 = (uint64_t *)(*(void *)(v365 + 104) + 8);
            do
            {
              if (*(unsigned char *)(v369[1] + 28))
              {
                uint64_t v372 = *v369;
                uint64_t v373 = (uint64_t)v474;
                int64_t v374 = (char *)v473[1] + (void)v473[9] - (char *)*v473;
                uint64_t v375 = v374 - *v475;
                uint64_t v376 = *((unsigned int *)v474 + 2);
                if (v376 < *((_DWORD *)v474 + 3))
                {
                  uint64_t v370 = (uint64_t)&(*v474)[4 * v376];
                  *(void *)uint64_t v370 = *(v369 - 1);
                  *(void *)(v370 + 8) = v372;
                  *(_DWORD *)(v370 + 16) = 0;
                  *(void *)(v370 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v375;
                  int v371 = v376 + 1;
                }
                else
                {
                  *(void *)&long long v483 = *(v369 - 1);
                  *((void *)&v483 + 1) = v372;
                  LODWORD(v484[0]) = 0;
                  v484[1] = v375;
                  unint64_t v377 = v376 + 1;
                  BOOL v378 = &(*v474)[4 * v376] > (uint64_t *)&v483;
                  if (*v474 <= (uint64_t *)&v483 && v378)
                  {
                    v383 = (char *)((char *)&v483 - (char *)*v474);
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v474, v474 + 2, v377, 32);
                    uint64_t v379 = *(void *)v373;
                    v380 = (long long *)&v383[*(void *)v373];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v474, v474 + 2, v377, 32);
                    uint64_t v379 = *(void *)v373;
                    v380 = &v483;
                  }
                  v381 = (long long *)(v379 + 32 * *(unsigned int *)(v373 + 8));
                  long long v382 = v380[1];
                  long long *v381 = *v380;
                  v381[1] = v382;
                  int v371 = *(_DWORD *)(v373 + 8) + 1;
                }
                *(_DWORD *)(v373 + 8) = v371;
                int64_t *v475 = v374;
              }
              v369 += 3;
              v368 -= 24;
            }
            while (v368);
          }
          if (v521) {
        }
          }
        v363 += 24;
      }
      while (v363 != v364);
    }
    if ((char *)v477[1] + *((void *)&v481 + 1) != v477[0])
    {
    }
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v466);
    if (v520 != &v522) {
      free(v520);
    }
    char v384 = (char *)v480[0];
    if (v480[0])
    {
      uint64_t v385 = v480[1];
      uint64_t v386 = v480[0];
      if (v480[1] != v480[0])
      {
        unsigned int v387 = (char *)v480[1];
        do
        {
          uint64_t v389 = (void *)*((void *)v387 - 3);
          v387 -= 24;
          unsigned int v388 = v389;
          if (v389)
          {
            *(v385 - 2) = v388;
            operator delete(v388);
          }
          uint64_t v385 = v387;
        }
        while (v387 != v384);
        uint64_t v386 = v480[0];
      }
      v480[1] = v384;
      operator delete(v386);
    }
    if (v478[1])
    {
      *(void **)&long long v479 = v478[1];
      operator delete(v478[1]);
    }
    if (v477[0])
    {
      v477[1] = v477[0];
      operator delete(v477[0]);
    }
    unsigned int v391 = (char *)v513[4];
    if (v513[4])
    {
      uint64_t v392 = v513[5];
      v393 = v513[4];
      if (v513[5] != v513[4])
      {
        long long v394 = (char *)v513[5];
        do
        {
          uint64_t v396 = (void *)*((void *)v394 - 3);
          v394 -= 24;
          v395 = v396;
          if (v396)
          {
            *(v392 - 2) = v395;
            operator delete(v395);
          }
          uint64_t v392 = v394;
        }
        while (v394 != v391);
        v393 = v513[4];
      }
      v513[5] = v391;
      operator delete(v393);
    }
    if (v513[1])
    {
      v513[2] = v513[1];
      operator delete(v513[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    memset(v513, 0, sizeof(v513));
    *(_OWORD *)long long __dst = 0u;
    int v514 = 1;
    if (v489)
    {
      uint64_t v397 = (char *)v488 - 16;
      uint64_t v398 = 24 * v489;
      do
      {
        v398 -= 24;
      }
      while (v398);
      if (v489)
      {
        v399 = (char **)v488;
        v400 = (char **)((char *)v488 + 24 * v489);
        do
        {
          v399 += 3;
        }
        while (v399 != v400);
      }
    }
    v401 = (char *)v513[4];
    if (v513[4])
    {
      v402 = v513[5];
      v403 = v513[4];
      if (v513[5] != v513[4])
      {
        char v404 = (char *)v513[5];
        do
        {
          v406 = (void *)*((void *)v404 - 3);
          v404 -= 24;
          uint64_t v405 = v406;
          if (v406)
          {
            *(v402 - 2) = v405;
            operator delete(v405);
          }
          v402 = v404;
        }
        while (v404 != v401);
        v403 = v513[4];
      }
      v513[5] = v401;
      operator delete(v403);
    }
    if (v513[1])
    {
      v513[2] = v513[1];
      operator delete(v513[1]);
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (*(uint64_t *)v499 < 5)
    {
      if (v500 != v501)
      {
        v477[0] = "unexpected properties emitted incompatible with bytecode <5";
        LOWORD(v479) = 259;
        mlir::Operation::emitError(v449, (uint64_t)v477, (uint64_t)__dst);
        mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__dst);
        if (__dst[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
        }
        if (v519)
        {
          v410 = (void **)__p;
          if (__p)
          {
            v411 = v518;
            v412 = __p;
            if (v518 != __p)
            {
              do
                v411 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v411 - 1);
              while (v411 != v410);
              v412 = __p;
            }
            v518 = v410;
            operator delete(v412);
          }
          int v41 = v515;
          if (!v515) {
            goto LABEL_589;
          }
          v413 = v516;
          int v43 = v515;
          if (v516 == v515) {
            goto LABEL_588;
          }
          do
          {
            v415 = (void *)*--v413;
            v414 = v415;
            void *v413 = 0;
            if (v415) {
              operator delete[](v414);
            }
          }
          while (v413 != v41);
          goto LABEL_587;
        }
LABEL_591:
        uint64_t v390 = (char *)v463[0];
        if (!v463[0]) {
          goto LABEL_599;
        }
        goto LABEL_592;
      }
    }
    else
    {
      memset(v513, 0, sizeof(v513));
      *(_OWORD *)long long __dst = 0u;
      int v514 = 1;
      v407 = (char *)v500;
      v408 = v501;
      while (v407 != v408)
      {
        v409 = (char *)*((void *)v407 + 1);
        if (*(char **)v407 != v409) {
          std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)__dst, (char *)__dst[1], *(char **)v407, v409, (int64_t)&v409[-*(void *)v407]);
        }
        v407 += 24;
      }
      v416 = (char *)v513[4];
      if (v513[4])
      {
        v417 = v513[5];
        v418 = v513[4];
        if (v513[5] != v513[4])
        {
          v419 = (char *)v513[5];
          do
          {
            v421 = (void *)*((void *)v419 - 3);
            v419 -= 24;
            v420 = v421;
            if (v421)
            {
              *(v417 - 2) = v420;
              operator delete(v420);
            }
            v417 = v419;
          }
          while (v419 != v416);
          v418 = v513[4];
        }
        v513[5] = v416;
        operator delete(v418);
      }
      if (v513[1])
      {
        v513[2] = v513[1];
        operator delete(v513[1]);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
    }
    v427 = (char *)v461[1];
    v428 = (char *)v462;
    while (v427 != v428)
    {
      v429 = *(const char **)v427;
      size_t v430 = *((void *)v427 + 1);
      v427 += 16;
      llvm::raw_ostream::write(v448, v429, v430);
    }
    llvm::raw_ostream::write(v448, (const char *)v460[0], (char *)v460[1] - (char *)v460[0]);
    uint64_t v390 = (char *)v463[0];
    if (!v463[0])
    {
LABEL_599:
      if (v461[1])
      {
        *(void **)&long long v462 = v461[1];
        operator delete(v461[1]);
      }
      if (v460[0])
      {
        v460[1] = v460[0];
        operator delete(v460[0]);
      }
      llvm::deallocate_buffer(v506, (void *)(24 * v508));
    }
LABEL_592:
    v422 = v463[1];
    v423 = v390;
    if (v463[1] != v390)
    {
      v424 = (char *)v463[1];
      do
      {
        v426 = (void *)*((void *)v424 - 3);
        v424 -= 24;
        v425 = v426;
        if (v426)
        {
          *(v422 - 2) = v425;
          operator delete(v425);
        }
        v422 = v424;
      }
      while (v424 != v390);
      v423 = (char *)v463[0];
    }
    v463[1] = v390;
    operator delete(v423);
    goto LABEL_599;
  }
  v459 = v498;
  while (1)
  {
    unsigned int v235 = v233;
    v236 = v233 + 1;
    uint64_t v237 = *(void *)(*v233 + 16);
    int v233 = v234;
    if (v236 != v234)
    {
      int v233 = v236;
      do
      {
        if (*(void *)(*v233 + 16) != v237) {
          goto LABEL_312;
        }
        ++v233;
      }
      while (v233 != v234);
      int v233 = v234;
    }
LABEL_312:
    if (v233 != v235) {
      break;
    }
    int64_t v238 = v141;
LABEL_306:
    int64_t v141 = v238;
    BOOL v234 = v459;
    if (v233 == v459) {
      goto LABEL_446;
    }
  }
  while (1)
  {
    uint64_t v239 = (void *)*v235;
    unsigned int v240 = (uint64_t *)(*(void *)*v235 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v241 = *v240;
    {
      v520 = (uint64_t *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v521 = 98;
      unint64_t v316 = llvm::StringRef::find((uint64_t *)&v520, "DesiredTypeName = ", 0x12uLL, 0);
      if (v521 >= v316) {
        unint64_t v317 = v316;
      }
      else {
        unint64_t v317 = v521;
      }
      int64_t v318 = (char *)v520 + v317;
      unint64_t v319 = v521 - v317;
      uint64_t v320 = 18;
      if (v319 < 0x12) {
        uint64_t v320 = v319;
      }
      unint64_t v321 = v319 - v320;
      if (v321 >= v321 - 1) {
        uint64_t v322 = v321 - 1;
      }
      else {
        uint64_t v322 = v321;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v318[v320], v322);
    }
    int v242 = (void *)(v241 + 72);
    uint64_t v243 = *(void *)(v241 + 96);
    if ((v243 & 2) == 0) {
      int v242 = (void *)*v242;
    }
    if ((*(uint64_t (**)(void *, uint64_t))(v243 & 0xFFFFFFFFFFFFFFF8))(v242, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))goto LABEL_324; {
    uint64_t v244 = *v240;
    }
    {
      v520 = (uint64_t *)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v521 = 98;
      unint64_t v323 = llvm::StringRef::find((uint64_t *)&v520, "DesiredTypeName = ", 0x12uLL, 0);
      if (v521 >= v323) {
        unint64_t v324 = v323;
      }
      else {
        unint64_t v324 = v521;
      }
      v325 = (char *)v520 + v324;
      unint64_t v326 = v521 - v324;
      uint64_t v327 = 18;
      if (v326 < 0x12) {
        uint64_t v327 = v326;
      }
      unint64_t v328 = v326 - v327;
      if (v328 >= v328 - 1) {
        uint64_t v329 = v328 - 1;
      }
      else {
        uint64_t v329 = v328;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v325[v327], v329);
    }
    uint64_t v245 = (void *)(v244 + 72);
    uint64_t v246 = *(void *)(v244 + 96);
    if ((v246 & 2) == 0) {
      uint64_t v245 = (void *)*v245;
    }
    if ((*(unsigned int (**)(void *, uint64_t))(v246 & 0xFFFFFFFFFFFFFFF8))(v245, mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id))
    {
LABEL_324:
      LODWORD(v521) = 0;
      LOBYTE(v525) = 0;
      uint64_t v526 = 0;
      int v527 = 1;
      v523 = 0;
      v524 = 0;
      uint64_t v522 = 0;
      v520 = (uint64_t *)&unk_1EC998B58;
      v528 = __dst;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v520, 0, 0, 0);
      v466 = v240;
      mlir::Type::print((llvm::raw_ostream *)&v466, (llvm::raw_ostream *)&v520);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v520);
      BOOL v247 = (char *)__dst[1];
      if (__dst[1] < v513[0])
      {
        *(unsigned char *)__dst[1] = 0;
        unsigned int v248 = v247 + 1;
LABEL_377:
        uint64_t v262 = 0;
        __dst[1] = v248;
        goto LABEL_394;
      }
      BOOL v249 = (char *)__dst[0];
      unint64_t v250 = (char *)__dst[1] - (char *)__dst[0];
      int64_t v251 = (char *)__dst[1] - (char *)__dst[0] + 1;
      if (v251 < 0) {
        goto LABEL_614;
      }
      unint64_t v252 = (char *)v513[0] - (char *)__dst[0];
      if (2 * ((char *)v513[0] - (char *)__dst[0]) > (unint64_t)v251) {
        int64_t v251 = 2 * v252;
      }
      if (v252 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v253 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v253 = v251;
      }
      if (v253)
      {
        unint64_t v254 = (char *)operator new(v253);
        uint64_t v255 = &v254[v250];
        v254[v250] = 0;
        unsigned int v248 = &v254[v250 + 1];
        if (v247 == v249)
        {
LABEL_375:
          __dst[0] = v255;
          __dst[1] = v248;
          v513[0] = &v254[v253];
          if (v247) {
            operator delete(v247);
          }
          goto LABEL_377;
        }
      }
      else
      {
        unint64_t v254 = 0;
        uint64_t v255 = (char *)((char *)__dst[1] - (char *)__dst[0]);
        *(unsigned char *)unint64_t v250 = 0;
        unsigned int v248 = (char *)(v250 + 1);
        if (v247 == v249) {
          goto LABEL_375;
        }
      }
      if (v250 >= 8 && (unint64_t)(v249 - v254) >= 0x20)
      {
        if (v250 >= 0x20)
        {
          unint64_t v263 = v250 & 0xFFFFFFFFFFFFFFE0;
          std::string::size_type v273 = &v254[v250 - 16];
          int64_t v274 = v247 - 16;
          unint64_t v275 = v250 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v276 = *(_OWORD *)v274;
            *((_OWORD *)v273 - 1) = *((_OWORD *)v274 - 1);
            *(_OWORD *)std::string::size_type v273 = v276;
            v273 -= 32;
            v274 -= 32;
            v275 -= 32;
          }
          while (v275);
          if (v250 == v263) {
            goto LABEL_374;
          }
          if ((v250 & 0x18) != 0) {
            goto LABEL_362;
          }
          v255 -= v263;
          v247 -= v263;
        }
        else
        {
          unint64_t v263 = 0;
LABEL_362:
          v255 -= v250 & 0xFFFFFFFFFFFFFFF8;
          long long v277 = &v254[&v247[-v263] - v249 - 8];
          uint64_t v278 = &v247[-v263 - 8];
          unint64_t v279 = v263 - (v250 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v280 = *(void *)v278;
            v278 -= 8;
            *(void *)long long v277 = v280;
            v277 -= 8;
            v279 += 8;
          }
          while (v279);
          v247 -= v250 & 0xFFFFFFFFFFFFFFF8;
          if (v250 == (v250 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_374:
            BOOL v247 = (char *)__dst[0];
            uint64_t v255 = v254;
            goto LABEL_375;
          }
        }
      }
      long long v282 = v255 - 1;
      do
      {
        char v283 = *--v247;
        *v282-- = v283;
      }
      while (v247 != v249);
      goto LABEL_374;
    }
    unint64_t v256 = *(void *)v499;
    v466 = (uint64_t *)&unk_1EC997B20;
    v467 = (void **)v256;
    v468 = __dst;
    v469 = v455;
    v470 = &v485;
    uint64_t v471 = v499 + 16;
    uint64_t v257 = *(unsigned int *)(v499 + 128);
    if (v257)
    {
      BOOL v258 = *(uint64_t **)(v499 + 120);
      uint64_t v259 = 8 * v257;
      while (1)
      {
        uint64_t v260 = *v258;
        LOBYTE(v520) = 0;
        LOBYTE(v522) = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t **, uint64_t **))(*(void *)v260 + 16))(v260, v240, &v520, &v466))
        {
          break;
        }
        ++v258;
        v259 -= 8;
        if (!v259) {
          goto LABEL_339;
        }
      }
    }
    else
    {
LABEL_339:
      uint64_t v261 = *(void *)(v239[2] + 24);
      if (!v261
        || !(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v261 + 40))(v261, v240, &v466))
      {
        LODWORD(v521) = 0;
        LOBYTE(v525) = 0;
        uint64_t v526 = 0;
        int v527 = 1;
        v523 = 0;
        v524 = 0;
        uint64_t v522 = 0;
        v520 = (uint64_t *)&unk_1EC998B58;
        v528 = __dst;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v520, 0, 0, 0);
        *(void *)&long long v483 = v240;
        mlir::Type::print((llvm::raw_ostream *)&v483, (llvm::raw_ostream *)&v520);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v520);
        unint64_t v264 = (char *)__dst[1];
        if (__dst[1] < v513[0])
        {
          *(unsigned char *)__dst[1] = 0;
          unint64_t v265 = v264 + 1;
LABEL_392:
          uint64_t v262 = 0;
          __dst[1] = v265;
          goto LABEL_393;
        }
        unint64_t v266 = (char *)__dst[0];
        unint64_t v267 = (char *)__dst[1] - (char *)__dst[0];
        int64_t v268 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v268 < 0) {
          goto LABEL_614;
        }
        unint64_t v269 = (char *)v513[0] - (char *)__dst[0];
        if (2 * ((char *)v513[0] - (char *)__dst[0]) > (unint64_t)v268) {
          int64_t v268 = 2 * v269;
        }
        if (v269 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v270 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v270 = v268;
        }
        if (v270)
        {
          int64_t v271 = (char *)operator new(v270);
          uint64_t v272 = &v271[v267];
          v271[v267] = 0;
          unint64_t v265 = &v271[v267 + 1];
          if (v264 == v266)
          {
LABEL_390:
            __dst[0] = v272;
            __dst[1] = v265;
            v513[0] = &v271[v270];
            if (v264) {
              operator delete(v264);
            }
            goto LABEL_392;
          }
        }
        else
        {
          int64_t v271 = 0;
          uint64_t v272 = (char *)((char *)__dst[1] - (char *)__dst[0]);
          *(unsigned char *)unint64_t v267 = 0;
          unint64_t v265 = (char *)(v267 + 1);
          if (v264 == v266) {
            goto LABEL_390;
          }
        }
        if (v267 >= 8 && (unint64_t)(v266 - v271) >= 0x20)
        {
          if (v267 >= 0x20)
          {
            unint64_t v281 = v267 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v284 = &v271[v267 - 16];
            unint64_t v285 = v264 - 16;
            unint64_t v286 = v267 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v287 = *(_OWORD *)v285;
              *((_OWORD *)v284 - 1) = *((_OWORD *)v285 - 1);
              *(_OWORD *)unint64_t v284 = v287;
              v284 -= 32;
              v285 -= 32;
              v286 -= 32;
            }
            while (v286);
            if (v267 == v281) {
              goto LABEL_389;
            }
            if ((v267 & 0x18) != 0) {
              goto LABEL_382;
            }
            v272 -= v281;
            v264 -= v281;
          }
          else
          {
            unint64_t v281 = 0;
LABEL_382:
            v272 -= v267 & 0xFFFFFFFFFFFFFFF8;
            long long v288 = &v271[&v264[-v281] - v266 - 8];
            int v289 = &v264[-v281 - 8];
            unint64_t v290 = v281 - (v267 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v291 = *(void *)v289;
              v289 -= 8;
              *(void *)long long v288 = v291;
              v288 -= 8;
              v290 += 8;
            }
            while (v290);
            v264 -= v267 & 0xFFFFFFFFFFFFFFF8;
            if (v267 == (v267 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_389:
              unint64_t v264 = (char *)__dst[0];
              uint64_t v272 = v271;
              goto LABEL_390;
            }
          }
        }
        v292 = v272 - 1;
        do
        {
          char v293 = *--v264;
          *v292-- = v293;
        }
        while (v264 != v266);
        goto LABEL_389;
      }
    }
    uint64_t v262 = 1;
LABEL_393:
    unsigned int v248 = (char *)__dst[1];
LABEL_394:
    int64_t v238 = (char *)v513[7] + (unint64_t)v248 - (char *)__dst[0];
    unint64_t v294 = v262 | (2 * (v238 - v141));
    if (v294 > 0x7F)
    {
    }
    else
    {
      char v295 = (2 * v294) | 1;
      uint64_t v296 = (char *)v477[1];
      if (v477[1] >= v478[0])
      {
        v297 = (char *)v477[0];
        unint64_t v298 = (char *)v477[1] - (char *)v477[0];
        int64_t v299 = (char *)v477[1] - (char *)v477[0] + 1;
        if (v299 < 0) {
          goto LABEL_614;
        }
        unint64_t v300 = (char *)v478[0] - (char *)v477[0];
        if (2 * ((char *)v478[0] - (char *)v477[0]) > (unint64_t)v299) {
          int64_t v299 = 2 * v300;
        }
        if (v300 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v301 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v301 = v299;
        }
        if (v301)
        {
          v302 = operator new(v301);
          std::string::size_type v303 = &v302[v298];
          v302[v298] = v295;
          char v304 = &v302[v298 + 1];
          if (v296 != v297)
          {
LABEL_405:
            if (v298 >= 8 && (unint64_t)(v297 - v302) >= 0x20)
            {
              if (v298 >= 0x20)
              {
                unint64_t v305 = v298 & 0xFFFFFFFFFFFFFFE0;
                v306 = &v302[v298 - 16];
                long long v307 = v296 - 16;
                unint64_t v308 = v298 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v309 = *(_OWORD *)v307;
                  *(v306 - 1) = *((_OWORD *)v307 - 1);
                  _OWORD *v306 = v309;
                  v306 -= 2;
                  v307 -= 32;
                  v308 -= 32;
                }
                while (v308);
                if (v298 == v305) {
                  goto LABEL_423;
                }
                if ((v298 & 0x18) != 0) {
                  goto LABEL_416;
                }
                v303 -= v305;
                v296 -= v305;
              }
              else
              {
                unint64_t v305 = 0;
LABEL_416:
                v303 -= v298 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v310 = &v302[&v296[-v305] - v297 - 8];
                unint64_t v311 = &v296[-v305 - 8];
                unint64_t v312 = v305 - (v298 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v313 = *(void *)v311;
                  v311 -= 8;
                  *v310-- = v313;
                  v312 += 8;
                }
                while (v312);
                v296 -= v298 & 0xFFFFFFFFFFFFFFF8;
                if (v298 == (v298 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_423:
                  uint64_t v296 = (char *)v477[0];
                  v477[0] = v302;
                  v477[1] = v304;
                  v478[0] = &v302[v301];
                  if (v296) {
LABEL_424:
                  }
                    operator delete(v296);
LABEL_425:
                  v477[1] = v304;
                  goto LABEL_315;
                }
              }
            }
            unint64_t v314 = v303 - 1;
            do
            {
              char v315 = *--v296;
              *v314-- = v315;
            }
            while (v296 != v297);
            goto LABEL_423;
          }
        }
        else
        {
          v302 = 0;
          std::string::size_type v303 = (char *)((char *)v477[1] - (char *)v477[0]);
          *(unsigned char *)unint64_t v298 = v295;
          char v304 = (char *)(v298 + 1);
          if (v296 != v297) {
            goto LABEL_405;
          }
        }
        v477[0] = v303;
        v477[1] = v304;
        v478[0] = &v302[v301];
        if (v296) {
          goto LABEL_424;
        }
        goto LABEL_425;
      }
      *(unsigned char *)v477[1] = v295;
      v477[1] = v296 + 1;
    }
LABEL_315:
    ++v235;
    int64_t v141 = v238;
    if (v235 == v233) {
      goto LABEL_306;
    }
  }
}

void anonymous namespace'::EncodingEmitter::emitVarInt(_anonymous_namespace_::EncodingEmitter *this, unint64_t a2)
{
  if (a2 <= 0x7F)
  {
    char v3 = (2 * a2) | 1;
    uint64_t v5 = (unsigned char *)*((void *)this + 1);
    unint64_t v4 = *((void *)this + 2);
    if ((unint64_t)v5 < v4)
    {
      unsigned char *v5 = v3;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_4:
      *((void *)this + 1) = v6;
      return;
    }
    uint64_t v7 = *(unsigned char **)this;
    unint64_t v8 = (unint64_t)&v5[-*(void *)this];
    unint64_t v9 = v8 + 1;
    if ((uint64_t)(v8 + 1) < 0) {
      abort();
    }
    unint64_t v10 = v4 - (void)v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = operator new(v11);
      unint64_t v13 = &v12[v8];
      BOOL v14 = &v12[v11];
      v12[v8] = v3;
      uint64_t v6 = (uint64_t)&v12[v8 + 1];
      if (v5 != v7)
      {
LABEL_16:
        if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
          goto LABEL_32;
        }
        if (v8 >= 0x20)
        {
          unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFE0;
          int v16 = (long long *)(v5 - 16);
          long long v17 = &v12[v5 - 16 - v7];
          unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v19 = *v16;
            *(v17 - 1) = *(v16 - 1);
            *long long v17 = v19;
            v17 -= 2;
            v16 -= 2;
            v18 -= 32;
          }
          while (v18);
          if (v8 == v15)
          {
LABEL_34:
            uint64_t v5 = *(unsigned char **)this;
            *(void *)this = v12;
            *((void *)this + 1) = v6;
            *((void *)this + 2) = v14;
            if (!v5) {
              goto LABEL_4;
            }
            goto LABEL_35;
          }
          if ((v8 & 0x18) == 0)
          {
            v13 -= v15;
            v5 -= v15;
            goto LABEL_32;
          }
        }
        else
        {
          unint64_t v15 = 0;
        }
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v20 = &v5[-v15 - 8];
        uint64_t v21 = &v12[v20 - v7];
        unint64_t v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v23 = *(void *)v20;
          v20 -= 8;
          *v21-- = v23;
          v22 += 8;
        }
        while (v22);
        v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_34;
        }
LABEL_32:
        BOOL v24 = v13 - 1;
        do
        {
          char v25 = *--v5;
          *v24-- = v25;
        }
        while (v5 != v7);
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*(void *)this];
      BOOL v14 = 0;
      *(unsigned char *)unint64_t v8 = v3;
      uint64_t v6 = v8 + 1;
      if (v5 != v7) {
        goto LABEL_16;
      }
    }
    *(void *)this = v13;
    *((void *)this + 1) = v6;
    *((void *)this + 2) = v14;
    if (!v5) {
      goto LABEL_4;
    }
LABEL_35:
    operator delete(v5);
    *((void *)this + 1) = v6;
    return;
  }
}

void anonymous namespace'::EncodingEmitter::emitNulTerminatedString(uint64_t a1, char *a2, int64_t a3)
{
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), a2, &a2[a3], a3);
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    char *v5 = 0;
    uint64_t v7 = (uint64_t)(v5 + 1);
LABEL_3:
    *(void *)(a1 + 8) = v7;
    return;
  }
  unint64_t v8 = *(char **)a1;
  unint64_t v9 = (unint64_t)&v5[-*(void *)a1];
  unint64_t v10 = v9 + 1;
  if ((uint64_t)(v9 + 1) < 0) {
    abort();
  }
  unint64_t v11 = v4 - (void)v8;
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v13 = 0;
    BOOL v14 = &v5[-*(void *)a1];
    unint64_t v15 = 0;
    *(unsigned char *)unint64_t v9 = 0;
    uint64_t v7 = v9 + 1;
    if (v5 != v8) {
      goto LABEL_12;
    }
LABEL_17:
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (!v5) {
      goto LABEL_3;
    }
    goto LABEL_31;
  }
  unint64_t v13 = operator new(v12);
  BOOL v14 = &v13[v9];
  unint64_t v15 = &v13[v12];
  v13[v9] = 0;
  uint64_t v7 = (uint64_t)&v13[v9 + 1];
  if (v5 == v8) {
    goto LABEL_17;
  }
LABEL_12:
  if (v9 < 8 || (unint64_t)(v8 - v13) < 0x20) {
    goto LABEL_28;
  }
  if (v9 < 0x20)
  {
    unint64_t v16 = 0;
    goto LABEL_23;
  }
  unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFE0;
  long long v17 = (long long *)(v5 - 16);
  unint64_t v18 = &v13[v5 - 16 - v8];
  unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v20 = *v17;
    *(v18 - 1) = *(v17 - 1);
    _OWORD *v18 = v20;
    v18 -= 2;
    v17 -= 2;
    v19 -= 32;
  }
  while (v19);
  if (v9 != v16)
  {
    if ((v9 & 0x18) == 0)
    {
      v14 -= v16;
      uint64_t v6 = &v5[-v16];
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
    v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = &v5[-v16 - 8];
    unint64_t v22 = &v13[v21 - v8];
    unint64_t v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v24 = *(void *)v21;
      v21 -= 8;
      *v22-- = v24;
      v23 += 8;
    }
    while (v23);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
LABEL_28:
    char v25 = v14 - 1;
    do
    {
      char v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != v8);
  }
LABEL_30:
  uint64_t v6 = *(char **)a1;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v15;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_31:
  operator delete(v6);
  *(void *)(a1 + 8) = v7;
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    unint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    unint64_t v13 = __dst - v11;
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v25 = v15 + v13;
    size_t v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    size_t v27 = v26;
    size_t v28 = v25;
    if (v11 != v5)
    {
      int v29 = v5;
      size_t v28 = v25;
      if (v13 < 0x20) {
        goto LABEL_47;
      }
      int v29 = v5;
      size_t v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20) {
        goto LABEL_47;
      }
      int v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      size_t v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      int v30 = v5 - 16;
      unint64_t v31 = (char *)(v27 + v5 - 16 - v11);
      unint64_t v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)unint64_t v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          char v34 = *--v29;
          *(unsigned char *)--size_t v28 = v34;
        }
        while (v29 != v11);
      }
      unint64_t v10 = *(char **)(a1 + 8);
    }
    int v35 = (char *)(v25 + a5);
    size_t v36 = v27 + v16;
    if (v10 != v5) {
      memmove(v35, v5, v10 - v5);
    }
    long long v37 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v35[v10 - v5];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return (char *)v25;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    unint64_t v18 = &__src[a5];
    long long v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[a5];
    unint64_t v22 = &v10[-a5];
    unint64_t v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_39;
    }
    goto LABEL_18;
  }
  unint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  long long v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    uint64_t v21 = &v5[a5];
    unint64_t v22 = &v20[-a5];
    unint64_t v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      unint64_t v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        int v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v39 = v20 + 16;
        int v40 = (long long *)(v22 + 16);
        unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        unint64_t v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      unint64_t v23 = v20;
    }
    do
    {
      char v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, v5, v20 - v21);
    }
    if (v18 != __src) {
      memmove(v5, __src, v18 - __src);
    }
  }
  return v5;
}

char *anonymous namespace'::EncodingEmitter::emitMultiByteVarInt(char **this, unint64_t a2)
{
  char v3 = (_anonymous_namespace_::EncodingEmitter *)this;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!(a2 >> 14))
  {
    int64_t v28 = 2;
LABEL_47:
    uint64_t v30 = ((2 * a2) | 1) << (v28 - 1);
    size_t v27 = this[1];
    size_t v26 = (char *)&v30 + v28;
    return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, v27, (char *)&v30, v26, v28);
  }
  if (a2 < 0x200000)
  {
    int64_t v28 = 3;
    goto LABEL_47;
  }
  if (!(a2 >> 28))
  {
    int64_t v28 = 4;
    goto LABEL_47;
  }
  if (!(a2 >> 35))
  {
    int64_t v28 = 5;
    goto LABEL_47;
  }
  if (!(a2 >> 42))
  {
    int64_t v28 = 6;
    goto LABEL_47;
  }
  if (!(a2 >> 49))
  {
    int64_t v28 = 7;
    goto LABEL_47;
  }
  if (!HIBYTE(a2))
  {
    int64_t v28 = 8;
    goto LABEL_47;
  }
  uint64_t v5 = this[1];
  unint64_t v4 = (unint64_t)this[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *this;
    unint64_t v8 = v5 - *this;
    unint64_t v9 = v8 + 1;
    if ((uint64_t)(v8 + 1) < 0) {
      abort();
    }
    unint64_t v10 = v4 - (void)v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = operator new(v11);
      unint64_t v13 = &v12[v8];
      unint64_t v14 = &v12[v11];
      v12[v8] = 0;
      uint64_t v6 = (uint64_t)&v12[v8 + 1];
      if (v5 != v7)
      {
LABEL_18:
        if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
          goto LABEL_34;
        }
        if (v8 >= 0x20)
        {
          unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFE0;
          size_t v16 = v5 - 16;
          uint64_t v17 = &v12[v5 - 16 - v7];
          unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v19 = *(_OWORD *)v16;
            *(v17 - 1) = *((_OWORD *)v16 - 1);
            *uint64_t v17 = v19;
            v17 -= 2;
            v16 -= 32;
            v18 -= 32;
          }
          while (v18);
          if (v8 == v15)
          {
LABEL_36:
            uint64_t v5 = *(char **)v3;
            *(void *)char v3 = v12;
            *((void *)v3 + 1) = v6;
            *((void *)v3 + 2) = v14;
            if (!v5) {
              goto LABEL_38;
            }
LABEL_37:
            operator delete(v5);
            goto LABEL_38;
          }
          if ((v8 & 0x18) == 0)
          {
            v13 -= v15;
            v5 -= v15;
            goto LABEL_34;
          }
        }
        else
        {
          unint64_t v15 = 0;
        }
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        long long v20 = &v5[-v15 - 8];
        uint64_t v21 = &v12[v20 - v7];
        unint64_t v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v23 = *(void *)v20;
          v20 -= 8;
          *v21-- = v23;
          v22 += 8;
        }
        while (v22);
        v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_36;
        }
LABEL_34:
        unint64_t v24 = v13 - 1;
        do
        {
          char v25 = *--v5;
          *v24-- = v25;
        }
        while (v5 != v7);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*(void *)v3];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v8 = 0;
      uint64_t v6 = v8 + 1;
      if (v5 != v7) {
        goto LABEL_18;
      }
    }
    *(void *)char v3 = v13;
    *((void *)v3 + 1) = v6;
    *((void *)v3 + 2) = v14;
    if (!v5) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  char *v5 = 0;
  uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_38:
  *((void *)v3 + 1) = v6;
  uint64_t v30 = a2;
  size_t v26 = (char *)&v31;
  this = (char **)v3;
  size_t v27 = (char *)v6;
  int64_t v28 = 8;
  return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, v27, (char *)&v30, v26, v28);
}

void anonymous namespace'::EncodingEmitter::emitSection(_anonymous_namespace_::EncodingEmitter *this, char a2, uint64_t a3)
{
  uint64_t v6 = *(char **)this;
  uint64_t v7 = (char *)*((void *)this + 1);
  unint64_t v8 = v7;
  unint64_t v9 = (unint64_t)&v7[-*(void *)this];
  unint64_t v10 = *((void *)this + 2);
  if ((unint64_t)v7 < v10)
  {
    *uint64_t v7 = a2;
    uint64_t v11 = (uint64_t)(v7 + 1);
    goto LABEL_31;
  }
  unint64_t v12 = v9 + 1;
  if ((uint64_t)(v9 + 1) < 0) {
    abort();
  }
  unint64_t v13 = v10 - (void)v6;
  if (2 * v13 > v12) {
    unint64_t v12 = 2 * v13;
  }
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v14 = v12;
  }
  if (v14)
  {
    unint64_t v15 = operator new(v14);
    size_t v16 = &v15[v9];
    uint64_t v17 = &v15[v14];
    v15[v9] = a2;
    uint64_t v11 = (uint64_t)&v15[v9 + 1];
    if (v7 != v6)
    {
LABEL_11:
      if (v9 < 8 || (unint64_t)(v6 - v15) < 0x20) {
        goto LABEL_27;
      }
      if (v9 >= 0x20)
      {
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        long long v19 = (long long *)(v7 - 16);
        long long v20 = &v15[v7 - 16 - v6];
        unint64_t v21 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          _OWORD *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v9 == v18)
        {
LABEL_29:
          unint64_t v8 = *(char **)this;
          *(void *)this = v15;
          *((void *)this + 1) = v11;
          *((void *)this + 2) = v17;
          if (!v8) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        if ((v9 & 0x18) == 0)
        {
          v16 -= v18;
          unint64_t v8 = &v7[-v18];
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
      unint64_t v8 = &v7[-(v9 & 0xFFFFFFFFFFFFFFF8)];
      v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v23 = &v7[-v18 - 8];
      unint64_t v24 = &v15[v23 - v6];
      unint64_t v25 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v26 = *(void *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_29;
      }
LABEL_27:
      size_t v27 = v16 - 1;
      do
      {
        char v28 = *--v8;
        *v27-- = v28;
      }
      while (v8 != v6);
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v15 = 0;
    size_t v16 = (char *)v9;
    uint64_t v17 = 0;
    *(unsigned char *)unint64_t v9 = a2;
    uint64_t v11 = v9 + 1;
    if (v7 != v6) {
      goto LABEL_11;
    }
  }
  *(void *)this = v16;
  *((void *)this + 1) = v11;
  *((void *)this + 2) = v17;
  if (v7) {
LABEL_30:
  }
    operator delete(v8);
LABEL_31:
  *((void *)this + 1) = v11;
  unsigned int v29 = *(_DWORD *)(a3 + 80);
  uint64_t v30 = *(char **)this;
  uint64_t v31 = (char *)*((void *)this + 1);
  if (v29 < 2) {
    goto LABEL_34;
  }
  if (((*((_DWORD *)this + 18) + v31 - v30) & (*(_DWORD *)(a3 + 80) - 1)) != 0)
  {
    *(unsigned char *)(*(void *)this + v9) |= 0x80u;
    uint64_t v30 = *(char **)this;
    uint64_t v31 = (char *)*((void *)this + 1);
LABEL_34:
    if (v30 == v31) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  unsigned int v41 = *((_DWORD *)this + 20);
  if (v41 <= v29) {
    unsigned int v41 = *(_DWORD *)(a3 + 80);
  }
  *((_DWORD *)this + 20) = v41;
  if (v30 != v31)
  {
LABEL_35:
    unint64_t v32 = (void *)*((void *)this + 7);
    if ((unint64_t)v32 >= *((void *)this + 8))
    {
      long long v33 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, (uint64_t)this);
    }
    else
    {
      *unint64_t v32 = 0;
      v32[1] = 0;
      uint64_t v32[2] = 0;
      *(_OWORD *)unint64_t v32 = *(_OWORD *)this;
      uint64_t v32[2] = *((void *)this + 2);
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      long long v33 = (char *)(v32 + 3);
    }
    *((void *)this + 7) = v33;
  }
LABEL_39:
  uint64_t v34 = *(void *)(a3 + 48);
  uint64_t v35 = *(void *)(a3 + 56);
  if (v34 != v35)
  {
    size_t v36 = (char *)*((void *)this + 7);
    do
    {
      while ((unint64_t)v36 >= *((void *)this + 8))
      {
        size_t v36 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, v34);
        *((void *)this + 7) = v36;
        v34 += 24;
        if (v34 == v35) {
          goto LABEL_44;
        }
      }
      *(void *)size_t v36 = 0;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = 0;
      *(_OWORD *)size_t v36 = *(_OWORD *)v34;
      *((void *)v36 + 2) = *(void *)(v34 + 16);
      *(void *)uint64_t v34 = 0;
      *(void *)(v34 + 8) = 0;
      *(void *)(v34 + 16) = 0;
      v36 += 24;
      *((void *)this + 7) = v36;
      v34 += 24;
    }
    while (v34 != v35);
  }
LABEL_44:
  std::vector<llvm::ArrayRef<unsigned char>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<llvm::ArrayRef<unsigned char>*>,std::__wrap_iter<llvm::ArrayRef<unsigned char>*>>((uint64_t)this + 24, *((void *)this + 4), *(char **)(a3 + 24), *(char **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
  *((void *)this + 9) += *(void *)(a3 + 72);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    long long v37 = (void *)*((void *)this + 7);
    if ((unint64_t)v37 >= *((void *)this + 8))
    {
      int v38 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)this + 6, a3);
    }
    else
    {
      *long long v37 = 0;
      v37[1] = 0;
      void v37[2] = 0;
      *(_OWORD *)long long v37 = *(_OWORD *)a3;
      void v37[2] = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      int v38 = (char *)(v37 + 3);
    }
    *((void *)this + 7) = v38;
    uint64_t v39 = *((void *)v38 - 3);
    uint64_t v40 = *((void *)v38 - 2) - v39;
  }
}

uint64_t llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v20 = *a2;
  LODWORD(v21) = 0;
  uint64_t v19 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, (uint64_t)&v20, &v19))return *(void *)(a1 + 24) + 24 * *(unsigned int *)(v19 + 16); {
  uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::InsertIntoBucketImpl<llvm::CachedHashStringRef>(a1, (uint64_t)&v20, (uint64_t)&v20, v19);
  }
  *(_OWORD *)uint64_t v7 = v20;
  *(_DWORD *)(v7 + 16) = v21;
  unint64_t v8 = (void *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(v7 + 16) = v9;
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    long long v20 = *a2;
    uint64_t v21 = *a3;
    unint64_t v12 = v9 + 1;
    BOOL v13 = *v8 + 24 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v8 <= (unint64_t)&v20 && v13)
    {
      unint64_t v18 = (char *)&v20 - *v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      uint64_t v14 = *(void *)(a1 + 24);
      unint64_t v15 = &v18[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      uint64_t v14 = *(void *)(a1 + 24);
      unint64_t v15 = (char *)&v20;
    }
    uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 32);
    long long v17 = *(_OWORD *)v15;
    *(void *)(v16 + 16) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v16 = v17;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24) + 24 * v9;
    *(_OWORD *)uint64_t v10 = *a2;
    *(void *)(v10 + 16) = *a3;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  return *v8 + 24 * v11 - 24;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    long long v17 = xmmword_1810FFF90;
    long long v18 = xmmword_1810FFA60;
    int v8 = v4 - 1;
    int v9 = 1;
    unsigned int v10 = *(_DWORD *)(a2 + 12) & (v4 - 1);
    uint64_t v11 = v7 + 24 * v10;
    if (*(_DWORD *)(a2 + 12) != *(_DWORD *)(v11 + 12)) {
      goto LABEL_12;
    }
LABEL_3:
    unint64_t v12 = *(const void **)a2;
    BOOL v13 = *(const void **)v11;
    if (*(void *)v11 == -2)
    {
      if (v12 != (const void *)-2) {
        goto LABEL_12;
      }
    }
    else if (v13 == (const void *)-1)
    {
      if (v12 != (const void *)-1) {
        goto LABEL_12;
      }
    }
    else
    {
      size_t v14 = *(unsigned int *)(a2 + 8);
      if (v14 != *(_DWORD *)(v11 + 8) || v14 && memcmp(v12, v13, v14))
      {
LABEL_12:
        while (!llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(v11, (uint64_t)&v18))
        {
          if ((llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(v11, (uint64_t)&v17) & (v6 == 0)) != 0) {
            uint64_t v6 = v11;
          }
          unsigned int v15 = v10 + v9++;
          unsigned int v10 = v15 & v8;
          uint64_t v11 = v7 + 24 * (v15 & v8);
          if (*(_DWORD *)(a2 + 12) == *(_DWORD *)(v11 + 12)) {
            goto LABEL_3;
          }
        }
        uint64_t result = 0;
        if (v6) {
          uint64_t v11 = v6;
        }
        goto LABEL_18;
      }
    }
    uint64_t result = 1;
LABEL_18:
    *a3 = v11;
    return result;
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

uint64_t llvm::DenseMapInfo<llvm::CachedHashStringRef,void>::isEqual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  int v4 = *(const void **)a1;
  uint64_t v5 = *(const void **)a2;
  if (v5 == (const void *)-2) {
    return v4 == (const void *)-2;
  }
  if (v5 == (const void *)-1) {
    return v4 == (const void *)-1;
  }
  size_t v7 = *(unsigned int *)(a1 + 8);
  if (v7 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if (v7) {
    return memcmp(v4, v5, v7) == 0;
  }
  return 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::InsertIntoBucketImpl<llvm::CachedHashStringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_8:
    llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a4 + 12)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 12))
  {
LABEL_5:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
LABEL_4:
  if (*(void *)a4 != -1) {
    goto LABEL_5;
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      unint64_t v11 = 24 * v10 - 24;
      if (v11 >= 0x18)
      {
        unint64_t v16 = v11 / 0x18 + 1;
        unint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
        uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
        long long v18 = result;
        do
        {
          _OWORD *v18 = xmmword_1810FFA60;
          *(_OWORD *)((char *)v18 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
          v18 += 3;
          v17 -= 2;
        }
        while (v17);
        if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v12 = result;
      }
      uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
      do
      {
        _OWORD *v12 = xmmword_1810FFA60;
        unint64_t v12 = (_OWORD *)((char *)v12 + 24);
      }
      while (v12 != v19);
    }
LABEL_16:
    if (!v3) {
LABEL_25:
    }
      llvm::deallocate_buffer(v4, (void *)(24 * v3));
    uint64_t v20 = 24 * v3;
    uint64_t v21 = (uint64_t)v4;
    while (1)
    {
      int v23 = *(_DWORD *)(v21 + 12);
      if (v23 != 1) {
        break;
      }
      if (*(void *)v21 != -2) {
        goto LABEL_19;
      }
LABEL_20:
      v21 += 24;
      v20 -= 24;
      if (!v20) {
        goto LABEL_25;
      }
    }
    if (!v23 && *(void *)v21 == -1) {
      goto LABEL_20;
    }
LABEL_19:
    char v28 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>::LookupBucketFor<llvm::CachedHashStringRef>((uint64_t *)a1, v21, (uint64_t *)&v28);
    long long v22 = v28;
    *char v28 = *(_OWORD *)v21;
    *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_20;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      unsigned int v15 = result;
LABEL_29:
      size_t v27 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        _OWORD *v15 = xmmword_1810FFA60;
        unsigned int v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v27);
      return result;
    }
    unint64_t v24 = v14 / 0x18 + 1;
    unsigned int v15 = (_OWORD *)((char *)result + 24 * (v24 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v26 = result;
    do
    {
      _OWORD *v26 = xmmword_1810FFA60;
      *(_OWORD *)((char *)v26 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
      v26 += 3;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_29;
    }
  }
  return result;
}

void anonymous namespace'::DialectWriter::writeAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 16);
  unint64_t Number = mlir::bytecode::detail::IRNumberingState::getNumber(*(void *)(a1 + 24), a2);
}

void anonymous namespace'::DialectWriter::writeOptionalAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 16);
  if (!a2)
  {
    unint64_t v5 = (unsigned char *)*((void *)v2 + 1);
    unint64_t v4 = *((void *)v2 + 2);
    if ((unint64_t)v5 < v4)
    {
      unsigned char *v5 = 1;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_7:
      *((void *)v2 + 1) = v6;
      return;
    }
    int v7 = *(unsigned char **)v2;
    unint64_t v8 = (unint64_t)&v5[-*(void *)v2];
    unint64_t v9 = v8 + 1;
    if ((uint64_t)(v8 + 1) < 0) {
      abort();
    }
    unint64_t v10 = v4 - (void)v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = 1;
    uint64_t v6 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
    {
      *(void *)uint64_t v2 = v13;
      *((void *)v2 + 1) = v6;
      *((void *)v2 + 2) = v14;
      if (!v5) {
        goto LABEL_7;
      }
      goto LABEL_36;
    }
    if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
      goto LABEL_33;
    }
    if (v8 >= 0x20)
    {
      unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v16 = (long long *)(v5 - 16);
      uint64_t v17 = &v12[v5 - 16 - v7];
      unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v19 = *v16;
        *(v17 - 1) = *(v16 - 1);
        *uint64_t v17 = v19;
        v17 -= 2;
        v16 -= 2;
        v18 -= 32;
      }
      while (v18);
      if (v8 == v15)
      {
LABEL_35:
        unint64_t v5 = *(unsigned char **)v2;
        *(void *)uint64_t v2 = v12;
        *((void *)v2 + 1) = v6;
        *((void *)v2 + 2) = v14;
        if (!v5) {
          goto LABEL_7;
        }
LABEL_36:
        operator delete(v5);
        *((void *)v2 + 1) = v6;
        return;
      }
      if ((v8 & 0x18) == 0)
      {
        v13 -= v15;
        v5 -= v15;
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = &v5[-v15 - 8];
    uint64_t v21 = &v12[v20 - v7];
    unint64_t v22 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v23 = *(void *)v20;
      v20 -= 8;
      *v21-- = v23;
      v22 += 8;
    }
    while (v22);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_35;
    }
LABEL_33:
    unint64_t v24 = v13 - 1;
    do
    {
      char v25 = *--v5;
      *v24-- = v25;
    }
    while (v5 != v7);
    goto LABEL_35;
  }
  unint64_t v3 = (2 * mlir::bytecode::detail::IRNumberingState::getNumber(*(void *)(a1 + 24), a2)) | 1;
}

void anonymous namespace'::DialectWriter::writeType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 16);
  unint64_t Number = mlir::bytecode::detail::IRNumberingState::getNumber(*(void *)(a1 + 24), a2);
}

void anonymous namespace'::DialectWriter::writeResourceHandle(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v3 + 232);
  uint64_t v5 = v3 + 232;
  uint64_t v6 = v7;
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8)
  {
    unsigned int v9 = v8 - 1;
    uint64_t v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
    size_t v11 = (void *)(v6 + 32 * v10);
    uint64_t v12 = *v11;
    if (*a2 == *v11) {
      goto LABEL_14;
    }
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = v11;
      }
      int v16 = v10 + v14++;
      uint64_t v10 = v16 & v9;
      size_t v11 = (void *)(v6 + 32 * v10);
      uint64_t v12 = *v11;
      if (*a2 == *v11) {
        goto LABEL_14;
      }
    }
    if (v13) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v11;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  size_t v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>,mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&>(v5, v17, a2);
LABEL_14:
  unint64_t v18 = *(unsigned int *)(v11[3] + 24);
}

void anonymous namespace'::DialectWriter::writeVarInt(_anonymous_namespace_::EncodingEmitter **this, unint64_t a2)
{
}

void anonymous namespace'::DialectWriter::writeSignedVarInt(_anonymous_namespace_::EncodingEmitter **this, uint64_t a2)
{
}

void anonymous namespace'::DialectWriter::writeAPIntWithKnownWidth(_anonymous_namespace_::DialectWriter *this, const llvm::APInt *a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = *((_DWORD *)a2 + 2);
  if (v4 <= 8)
  {
    uint64_t v5 = (void *)*((void *)this + 2);
    char v6 = *(unsigned char *)a2;
    int v8 = (unsigned char *)v5[1];
    unint64_t v7 = v5[2];
    if ((unint64_t)v8 < v7)
    {
      unsigned char *v8 = v6;
      v5[1] = v8 + 1;
      return;
    }
    size_t v11 = (unsigned char *)*v5;
    unint64_t v12 = (unint64_t)&v8[-*v5];
    unint64_t v13 = v12 + 1;
    if ((uint64_t)(v12 + 1) < 0) {
      abort();
    }
    unint64_t v14 = v7 - (void)v11;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15)
    {
      int v16 = operator new(v15);
      uint64_t v17 = &v16[v12];
      unint64_t v18 = &v16[v15];
      v16[v12] = v6;
      uint64_t v19 = (uint64_t)&v16[v12 + 1];
      if (v8 != v11)
      {
LABEL_16:
        if (v12 < 8 || (unint64_t)(v11 - v16) < 0x20) {
          goto LABEL_39;
        }
        if (v12 >= 0x20)
        {
          unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v24 = (long long *)(v8 - 16);
          char v25 = &v16[v8 - 16 - v11];
          unint64_t v26 = v12 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v27 = *v24;
            *(v25 - 1) = *(v24 - 1);
            _OWORD *v25 = v27;
            v25 -= 2;
            v24 -= 2;
            v26 -= 32;
          }
          while (v26);
          if (v12 == v20)
          {
LABEL_41:
            int v8 = (unsigned char *)*v5;
            void *v5 = v16;
            v5[1] = v19;
            void v5[2] = v18;
            if (!v8)
            {
LABEL_43:
              v5[1] = v19;
              return;
            }
LABEL_42:
            operator delete(v8);
            goto LABEL_43;
          }
          if ((v12 & 0x18) == 0)
          {
            v17 -= v20;
            v8 -= v20;
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v20 = 0;
        }
        v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
        char v28 = &v8[-v20 - 8];
        unsigned int v29 = &v16[v28 - v11];
        unint64_t v30 = v20 - (v12 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v31 = *(void *)v28;
          v28 -= 8;
          *v29-- = v31;
          v30 += 8;
        }
        while (v30);
        v8 -= v12 & 0xFFFFFFFFFFFFFFF8;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_41;
        }
LABEL_39:
        unint64_t v32 = v17 - 1;
        do
        {
          char v33 = *--v8;
          *v32-- = v33;
        }
        while (v8 != v11);
        goto LABEL_41;
      }
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = &v8[-*v5];
      unint64_t v18 = 0;
      *(unsigned char *)unint64_t v12 = v6;
      uint64_t v19 = v12 + 1;
      if (v8 != v11) {
        goto LABEL_16;
      }
    }
    void *v5 = v17;
    v5[1] = v19;
    void v5[2] = v18;
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v4 > 0x40)
  {
    int v21 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (v4 == v21) {
      unint64_t v22 = 1;
    }
    else {
      unint64_t v22 = ((v4 + ~v21) >> 6) + 1;
    }
    if (*((_DWORD *)v2 + 2) >= 0x41u) {
      uint64_t v2 = *(const llvm::APInt **)v2;
    }
    do
    {
      uint64_t v23 = *(void *)v2;
      uint64_t v2 = (const llvm::APInt *)((char *)v2 + 8);
      --v22;
    }
    while (v22);
  }
  else
  {
    unsigned int v9 = (_anonymous_namespace_::EncodingEmitter *)*((void *)this + 2);
    unint64_t v10 = (2 * *(void *)a2) ^ (*(uint64_t *)a2 >> 63);
  }
}

void anonymous namespace'::DialectWriter::writeAPFloatWithKnownSemantics(_anonymous_namespace_::DialectWriter *this, const llvm::APFloat *a2)
{
  uint64_t v3 = (const llvm::APFloat *)((char *)a2 + 8);
  unsigned int v4 = (void *)*((void *)a2 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3, (llvm::APInt *)&__p);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt(v3, (uint64_t)&__p);
  }
  (*(void (**)(_anonymous_namespace_::DialectWriter *, void **))(*(void *)this + 64))(this, &__p);
  if (v6 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

void anonymous namespace'::DialectWriter::writeOwnedString(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(a2, a3);
  uint64_t v8 = *(unsigned int *)(v6 + 32);
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = __PAIR64__(HashValue, v3);
  uint64_t v11 = v8;
  uint64_t v9 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v6, &v10, &v11);
}

void anonymous namespace'::DialectWriter::writeOwnedBlob(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)v6 != *(void *)(v6 + 8))
  {
    unint64_t v7 = *(void **)(v6 + 56);
    if ((unint64_t)v7 >= *(void *)(v6 + 64))
    {
      uint64_t v8 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)(v6 + 48), v6);
    }
    else
    {
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v6;
      v7[2] = *(void *)(v6 + 16);
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      uint64_t v8 = (char *)(v7 + 3);
    }
    *(void *)(v6 + 56) = v8;
  }
}

void anonymous namespace'::DialectWriter::writeOwnedBool(_anonymous_namespace_::DialectWriter *this, char a2)
{
  unsigned int v3 = (void *)*((void *)this + 2);
  uint64_t v5 = (char *)v3[1];
  unint64_t v4 = v3[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*v3;
    unint64_t v9 = (unint64_t)&v5[-*v3];
    unint64_t v10 = v9 + 1;
    if ((uint64_t)(v9 + 1) < 0) {
      abort();
    }
    unint64_t v11 = v4 - (void)v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = operator new(v12);
      unint64_t v14 = &v13[v9];
      size_t v15 = &v13[v12];
      v13[v9] = a2;
      uint64_t v7 = (uint64_t)&v13[v9 + 1];
      if (v5 != v8)
      {
LABEL_11:
        if (v9 < 8 || (unint64_t)(v8 - v13) < 0x20) {
          goto LABEL_27;
        }
        if (v9 >= 0x20)
        {
          unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v17 = (long long *)(v5 - 16);
          unint64_t v18 = &v13[v5 - 16 - v8];
          unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v20 = *v17;
            *(v18 - 1) = *(v17 - 1);
            _OWORD *v18 = v20;
            v18 -= 2;
            v17 -= 2;
            v19 -= 32;
          }
          while (v19);
          if (v9 == v16)
          {
LABEL_29:
            uint64_t v6 = (char *)*v3;
            *unsigned int v3 = v13;
            v3[1] = v7;
            void v3[2] = v15;
            if (!v6) {
              goto LABEL_31;
            }
LABEL_30:
            operator delete(v6);
            goto LABEL_31;
          }
          if ((v9 & 0x18) == 0)
          {
            v14 -= v16;
            uint64_t v6 = &v5[-v16];
            goto LABEL_27;
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
        v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
        int v21 = &v5[-v16 - 8];
        unint64_t v22 = &v13[v21 - v8];
        unint64_t v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *v22-- = v24;
          v23 += 8;
        }
        while (v23);
        if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
LABEL_27:
        char v25 = v14 - 1;
        do
        {
          char v26 = *--v6;
          *v25-- = v26;
        }
        while (v6 != v8);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v14 = &v5[-*v3];
      size_t v15 = 0;
      *(unsigned char *)unint64_t v9 = a2;
      uint64_t v7 = v9 + 1;
      if (v5 != v8) {
        goto LABEL_11;
      }
    }
    *unsigned int v3 = v14;
    v3[1] = v7;
    void v3[2] = v15;
    if (!v5) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  char *v5 = a2;
  uint64_t v7 = (uint64_t)(v5 + 1);
LABEL_31:
  v3[1] = v7;
}

uint64_t anonymous namespace'::DialectWriter::getBytecodeVersion(_anonymous_namespace_::DialectWriter *this)
{
  return *((void *)this + 1);
}

uint64_t anonymous namespace'::DialectWriter::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1) {
    uint64_t v6 = *(unsigned int *)(v4 + 8);
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)v4 + 8 * v6;
  if (v7 == **(void **)(a1 + 40) + 8 * *(unsigned int *)(*(void *)(a1 + 40) + 8)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)v7 + 8);
  }
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!v4) {
    goto LABEL_22;
  }
  unsigned int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2) {
    return *(unsigned int *)(v7[1] + 8);
  }
  unint64_t v11 = 0;
  int v12 = 1;
  while (v8 != -4096)
  {
    if (v11) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v8 == -8192;
    }
    if (v13) {
      unint64_t v11 = v7;
    }
    unsigned int v14 = v6 + v12++;
    unsigned int v6 = v14 & v5;
    uint64_t v7 = (void *)(*(void *)a1 + 16 * (v14 & v5));
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      return *(unsigned int *)(v7[1] + 8);
    }
  }
  if (v11) {
    uint64_t v7 = v11;
  }
  int v15 = *(_DWORD *)(a1 + 8);
  if (4 * v15 + 4 < 3 * v4)
  {
    if (v4 + ~v15 - *(_DWORD *)(a1 + 12) > v4 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_22:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v4);
  int v16 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v17 = v16 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v17);
  uint64_t v18 = *v7;
  if (*v7 == a2)
  {
    uint64_t v10 = a2;
    goto LABEL_7;
  }
  unint64_t v19 = 0;
  int v20 = 1;
  while (v18 != -4096)
  {
    if (v19) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v18 == -8192;
    }
    if (v21) {
      unint64_t v19 = v7;
    }
    unsigned int v22 = v17 + v20++;
    unsigned int v17 = v22 & v16;
    uint64_t v7 = (void *)(*(void *)a1 + 16 * (v22 & v16));
    uint64_t v18 = *v7;
    uint64_t v10 = a2;
    if (*v7 == a2) {
      goto LABEL_7;
    }
  }
  if (v19) {
    uint64_t v7 = v19;
  }
LABEL_6:
  uint64_t v10 = *v7;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t v7 = a2;
  v7[1] = 0;
  return *(unsigned int *)(v7[1] + 8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  unsigned int v6 = *(void *)(a1 + 72);
  unsigned int v4 = a1 + 72;
  unsigned int v5 = v6;
  uint64_t v7 = *(_DWORD *)(v4 + 16);
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v8 = v7 - 1;
  unint64_t v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v5 + 16 * v9);
  unint64_t v11 = *v10;
  if (*v10 == a2) {
    return *(unsigned int *)(v10[1] + 8);
  }
  unsigned int v14 = 0;
  int v15 = 1;
  while (v11 != -4096)
  {
    if (v14) {
      int v16 = 0;
    }
    else {
      int v16 = v11 == -8192;
    }
    if (v16) {
      unsigned int v14 = v10;
    }
    unsigned int v17 = v9 + v15++;
    unint64_t v9 = v17 & v8;
    uint64_t v10 = (void *)(v5 + 16 * (v17 & v8));
    unint64_t v11 = *v10;
    if (*v10 == a2) {
      return *(unsigned int *)(v10[1] + 8);
    }
  }
  if (v14) {
    uint64_t v10 = v14;
  }
  uint64_t v18 = *(_DWORD *)(a1 + 80);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 84) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  unint64_t v19 = *(void *)(a1 + 72);
  int v20 = *(_DWORD *)(a1 + 88) - 1;
  BOOL v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v19 + 16 * v21);
  unsigned int v22 = *v10;
  if (*v10 == a2)
  {
    BOOL v13 = a2;
    goto LABEL_7;
  }
  unint64_t v23 = 0;
  uint64_t v24 = 1;
  while (v22 != -4096)
  {
    if (v23) {
      char v25 = 0;
    }
    else {
      char v25 = v22 == -8192;
    }
    if (v25) {
      unint64_t v23 = v10;
    }
    char v26 = v21 + v24++;
    BOOL v21 = v26 & v20;
    uint64_t v10 = (void *)(v19 + 16 * (v26 & v20));
    unsigned int v22 = *v10;
    BOOL v13 = a2;
    if (*v10 == a2) {
      goto LABEL_7;
    }
  }
  if (v23) {
    uint64_t v10 = v23;
  }
LABEL_6:
  BOOL v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 80);
  if (v13 != -4096) {
    --*(_DWORD *)(a1 + 84);
  }
  char *v10 = a2;
  v10[1] = 0;
  return *(unsigned int *)(v10[1] + 8);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  unsigned int v6 = *(void *)(a1 + 48);
  unsigned int v4 = a1 + 48;
  unsigned int v5 = v6;
  uint64_t v7 = *(_DWORD *)(v4 + 16);
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v8 = v7 - 1;
  unint64_t v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v5 + 16 * v9);
  unint64_t v11 = *v10;
  if (*v10 == a2) {
    return *(unsigned int *)(v10[1] + 16);
  }
  unsigned int v14 = 0;
  int v15 = 1;
  while (v11 != -4096)
  {
    if (v14) {
      int v16 = 0;
    }
    else {
      int v16 = v11 == -8192;
    }
    if (v16) {
      unsigned int v14 = v10;
    }
    unsigned int v17 = v9 + v15++;
    unint64_t v9 = v17 & v8;
    uint64_t v10 = (void *)(v5 + 16 * (v17 & v8));
    unint64_t v11 = *v10;
    if (*v10 == a2) {
      return *(unsigned int *)(v10[1] + 16);
    }
  }
  if (v14) {
    uint64_t v10 = v14;
  }
  uint64_t v18 = *(_DWORD *)(a1 + 56);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 60) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  unint64_t v19 = *(void *)(a1 + 48);
  int v20 = *(_DWORD *)(a1 + 64) - 1;
  BOOL v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v19 + 16 * v21);
  unsigned int v22 = *v10;
  if (*v10 == a2)
  {
    BOOL v13 = a2;
    goto LABEL_7;
  }
  unint64_t v23 = 0;
  uint64_t v24 = 1;
  while (v22 != -4096)
  {
    if (v23) {
      char v25 = 0;
    }
    else {
      char v25 = v22 == -8192;
    }
    if (v25) {
      unint64_t v23 = v10;
    }
    char v26 = v21 + v24++;
    BOOL v21 = v26 & v20;
    uint64_t v10 = (void *)(v19 + 16 * (v26 & v20));
    unsigned int v22 = *v10;
    BOOL v13 = a2;
    if (*v10 == a2) {
      goto LABEL_7;
    }
  }
  if (v23) {
    uint64_t v10 = v23;
  }
LABEL_6:
  BOOL v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 56);
  if (v13 != -4096) {
    --*(_DWORD *)(a1 + 60);
  }
  char *v10 = a2;
  v10[1] = 0;
  return *(unsigned int *)(v10[1] + 16);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>,mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v11 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (void *)(*(void *)a1 + 32 * v12);
  uint64_t v13 = *a2;
  if (*a3 != *a2)
  {
    unsigned int v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        unsigned int v14 = a2;
      }
      int v17 = v12 + v15++;
      uint64_t v12 = v17 & v11;
      a2 = (void *)(*(void *)a1 + 32 * v12);
      uint64_t v13 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v14) {
      a2 = v14;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v9 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v9;
  a2[3] = 0;
  return a2;
}

void *llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *(v13 - 3) = -4096;
        void *v13 = -4096;
        v13[1] = -4096;
        *(v13 - 2) = 0;
        v13[2] = 0;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10[1] = -4096;
          unint64_t v10[2] = 0;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      BOOL v16 = v4;
      do
      {
        uint64_t v24 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = *(_DWORD *)(a1 + 16) - 1;
          uint64_t v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          unsigned int v22 = (void *)(*(void *)a1 + 32 * v26);
          uint64_t v27 = *v22;
          if (v24 != *v22)
          {
            char v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                char v28 = v22;
              }
              int v31 = v26 + v29++;
              uint64_t v26 = v31 & v25;
              unsigned int v22 = (void *)(*(void *)a1 + 32 * v26);
              uint64_t v27 = *v22;
              if (v24 == *v22) {
                goto LABEL_24;
              }
            }
            if (v28) {
              unsigned int v22 = v28;
            }
          }
LABEL_24:
          long long v23 = *(_OWORD *)v16;
          v22[2] = *((void *)v16 + 2);
          *(_OWORD *)unsigned int v22 = v23;
          v22[3] = *((void *)v16 + 3);
          ++*(_DWORD *)(a1 + 8);
        }
        BOOL v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    unint64_t v19 = result + 4;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *(v19 - 3) = -4096;
      void *v19 = -4096;
      v19[1] = -4096;
      *(v19 - 2) = 0;
      void v19[2] = 0;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      BOOL v21 = &result[4 * v17];
      do
      {
        void *v10 = -4096;
        v10[1] = -4096;
        unint64_t v10[2] = 0;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void anonymous namespace'::EncodingEmitter::appendOwnedResult(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    a1[9] += a3;
    int v7 = (char *)a1[4];
    unint64_t v6 = a1[5];
    if ((unint64_t)v7 < v6)
    {
      *(void *)int v7 = a2;
      *((void *)v7 + 1) = a3;
      uint64_t v8 = (uint64_t)(v7 + 16);
LABEL_19:
      a1[4] = v8;
      return;
    }
    uint64_t v9 = (char *)a1[3];
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = (char *)operator new(16 * v13);
      int v15 = &v14[16 * v10];
      BOOL v16 = &v14[16 * v13];
      *(void *)int v15 = a2;
      *((void *)v15 + 1) = a3;
      uint64_t v8 = (uint64_t)(v15 + 16);
      if (v7 == v9) {
        goto LABEL_17;
      }
    }
    else
    {
      int v15 = (char *)(16 * v10);
      BOOL v16 = 0;
      *(void *)int v15 = a2;
      *((void *)v15 + 1) = a3;
      uint64_t v8 = 16 * v10 + 16;
      if (v7 == v9)
      {
LABEL_17:
        a1[3] = v15;
        a1[4] = v8;
        a1[5] = v16;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    int v7 = (char *)a1[3];
    goto LABEL_17;
  }
}

char *std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>(char **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v2];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v11 = v9 + 24;
  uint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = *((void *)v13 + 2);
      *(void *)unint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    unint64_t v13 = *a1;
    int v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      BOOL v16 = v15;
      do
      {
        uint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *((void *)v15 - 2) = v17;
          operator delete(v17);
        }
        int v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void anonymous namespace'::EncodingEmitter::alignTo(_anonymous_namespace_::EncodingEmitter *this, unsigned int a2)
{
  if (a2 >= 2)
  {
    unsigned int v4 = (unsigned char *)*((void *)this + 1);
    unint64_t v5 = (unint64_t)&v4[*((void *)this + 9) - *(void *)this - 1 + a2] % a2;
    uint64_t v6 = a2 - 1;
    unint64_t v7 = v6 - v5;
    if (v6 != v5)
    {
      while (1)
      {
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v4 >= v9) {
          break;
        }
        *unsigned int v4 = -53;
        uint64_t v8 = (uint64_t)(v4 + 1);
LABEL_5:
        *((void *)this + 1) = v8;
        unsigned int v4 = (unsigned char *)v8;
        if (!--v7) {
          goto LABEL_38;
        }
      }
      unint64_t v10 = *(void *)this;
      unint64_t v11 = (unint64_t)&v4[-*(void *)this];
      unint64_t v12 = v11 + 1;
      if ((uint64_t)(v11 + 1) < 0) {
        abort();
      }
      unint64_t v13 = v9 - v10;
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14)
      {
        int v15 = operator new(v14);
        BOOL v16 = (char *)v15 + v11;
        *((unsigned char *)v15 + v11) = -53;
        uint64_t v8 = (uint64_t)v15 + v11 + 1;
        if (v4 == (unsigned char *)v10)
        {
LABEL_25:
          *(void *)this = v16;
          *((void *)this + 1) = v8;
          *((void *)this + 2) = (char *)v15 + v14;
          if (v4) {
            operator delete(v4);
          }
          goto LABEL_5;
        }
      }
      else
      {
        int v15 = 0;
        BOOL v16 = &v4[-*(void *)this];
        *(unsigned char *)unint64_t v11 = -53;
        uint64_t v8 = v11 + 1;
        if (v4 == (unsigned char *)v10) {
          goto LABEL_25;
        }
      }
      if (v11 < 8
        || (char *)v15 + v11 + v10 - (void)v4 > (char *)v15 + v11 - 1
        || v10 > (unint64_t)(v4 - 1)
        || v10 - (unint64_t)v15 < 0x20)
      {
        uint64_t v17 = v4;
        goto LABEL_22;
      }
      if (v11 >= 0x20)
      {
        unint64_t v20 = v11 & 0xFFFFFFFFFFFFFFE0;
        BOOL v21 = (char *)v15 + v11 - 16;
        unsigned int v22 = (long long *)(v4 - 16);
        unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *BOOL v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 32;
        }
        while (v23);
        if (v11 == v20) {
          goto LABEL_24;
        }
        if ((v11 & 0x18) == 0)
        {
          v16 -= v20;
          uint64_t v17 = &v4[-v20];
LABEL_22:
          uint64_t v18 = v16 - 1;
          do
          {
            char v19 = *--v17;
            *v18-- = v19;
          }
          while (v17 != (unsigned char *)v10);
LABEL_24:
          unsigned int v4 = *(unsigned char **)this;
          BOOL v16 = (char *)v15;
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v17 = &v4[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v16 -= v11 & 0xFFFFFFFFFFFFFFF8;
      int v25 = &v4[-v20 - v10 - 8 + (void)v15];
      uint64_t v26 = (uint64_t *)&v4[-v20 - 8];
      unint64_t v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v28 = *v26--;
        *v25-- = v28;
        v27 += 8;
      }
      while (v27);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
LABEL_38:
    unsigned int v29 = *((_DWORD *)this + 20);
    if (v29 <= a2) {
      unsigned int v29 = a2;
    }
    *((_DWORD *)this + 20) = v29;
  }
}

char *std::vector<llvm::ArrayRef<unsigned char>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<llvm::ArrayRef<unsigned char>*>,std::__wrap_iter<llvm::ArrayRef<unsigned char>*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = a2 - *(void *)a1;
  unint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = __src;
  unint64_t v12 = *(long long **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    unint64_t v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60) {
      abort();
    }
    uint64_t v14 = v11 - (void)v5;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= v13) {
      uint64_t v15 = v13;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v26 = &v17[16 * (v6 >> 4)];
    uint64_t v27 = 16 * a5;
    uint64_t v28 = &v26[16 * a5];
    unsigned int v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)unsigned int v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    int v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      char v33 = v26;
      uint64_t v35 = &v17[16 * v16];
      size_t v36 = (char *)v12 - v7;
      if (v12 == (long long *)v7) {
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v32 = v7;
      char v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      uint64_t v34 = *(unsigned char **)(a1 + 8);
      uint64_t v35 = &v17[16 * v16];
      size_t v36 = v34 - v7;
      if (v34 == v7) {
        goto LABEL_33;
      }
    }
    memmove(v28, v7, v36);
LABEL_33:
    long long v37 = *(char **)a1;
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = &v28[v36];
    *(void *)(a1 + 16) = v35;
    if (v37) {
      operator delete(v37);
    }
    return v26;
  }
  uint64_t v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    char v19 = &__src[16 * a5];
    BOOL v21 = *(char **)(a1 + 8);
    unsigned int v22 = &v7[16 * a5];
    unint64_t v23 = &v12[-a5];
    long long v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      }
      if (v19 != v9) {
        memmove(v7, v9, v19 - v9);
      }
      return v7;
    }
LABEL_19:
    long long v24 = v21;
    do
    {
      long long v25 = *v23++;
      *(_OWORD *)long long v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  char v19 = &__src[16 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  }
  BOOL v21 = (char *)v12 + v20;
  *(void *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    unsigned int v22 = &v7[16 * a5];
    unint64_t v23 = (long long *)&v21[-16 * a5];
    long long v24 = (char *)v12 + v20;
    if (v23 >= v12) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  return v7;
}

void anonymous namespace'::RawEmitterOstream::~RawEmitterOstream(_anonymous_namespace_::RawEmitterOstream *this)
{
  llvm::raw_ostream::~raw_ostream(this);

  operator delete(v1);
}

uint64_t llvm::raw_ostream::is_displayed(llvm::raw_ostream *this)
{
  return 0;
}

uint64_t llvm::raw_ostream::has_colors(llvm::raw_ostream *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t llvm::raw_ostream::enable_colors(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return this;
}

char *anonymous namespace'::RawEmitterOstream::write_impl(_anonymous_namespace_::RawEmitterOstream *this, char *__src, int64_t a3)
{
  return std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(*((void *)this + 8), *(char **)(*((void *)this + 8) + 8), __src, &__src[a3], a3);
}

uint64_t anonymous namespace'::RawEmitterOstream::current_pos(_anonymous_namespace_::RawEmitterOstream *this)
{
  return *(void *)(*((void *)this + 8) + 72) + *(void *)(*((void *)this + 8) + 8) - **((void **)this + 8);
}

BOOL anonymous namespace'::BytecodeWriter::writeOp(uint64_t a1, _anonymous_namespace_::EncodingEmitter *a2, uint64_t a3)
{
  v160[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (mlir::bytecode::detail::IRNumberingState *)(a1 + 40);
  unsigned int Number = mlir::bytecode::detail::IRNumberingState::getNumber(a1 + 40, *(void *)(a3 + 48));
  uint64_t v8 = *((void *)a2 + 9);
  unint64_t v9 = *(char **)a2;
  unint64_t v10 = (char *)*((void *)a2 + 1);
  uint64_t v11 = v10;
  char v140 = 0;
  unint64_t v12 = *((void *)a2 + 2);
  if ((unint64_t)v10 < v12)
  {
    char *v10 = 0;
    uint64_t v13 = (uint64_t)(v10 + 1);
    goto LABEL_31;
  }
  unint64_t v14 = v10 - v9;
  uint64_t v15 = v10 - v9 + 1;
  if (v15 < 0) {
LABEL_186:
  }
    abort();
  unint64_t v16 = v12 - (void)v9;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17)
  {
    uint64_t v18 = operator new(v17);
    char v19 = &v18[v14];
    int64_t v20 = &v18[v17];
    v18[v14] = 0;
    uint64_t v13 = (uint64_t)&v18[v14 + 1];
    if (v10 != v9)
    {
LABEL_11:
      if (v14 < 8 || (unint64_t)(v9 - v18) < 0x20) {
        goto LABEL_27;
      }
      if (v14 >= 0x20)
      {
        unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v22 = (long long *)(v10 - 16);
        unint64_t v23 = &v18[v10 - 16 - v9];
        unint64_t v24 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          _OWORD *v23 = v25;
          v23 -= 2;
          v22 -= 2;
          v24 -= 32;
        }
        while (v24);
        if (v14 == v21)
        {
LABEL_29:
          uint64_t v11 = *(char **)a2;
          *(void *)a2 = v18;
          *((void *)a2 + 1) = v13;
          *((void *)a2 + 2) = v20;
          if (!v11) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        if ((v14 & 0x18) == 0)
        {
          v19 -= v21;
          uint64_t v11 = &v10[-v21];
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v11 = &v10[-(v14 & 0xFFFFFFFFFFFFFFF8)];
      v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = &v10[-v21 - 8];
      uint64_t v27 = &v18[v26 - v9];
      unint64_t v28 = v21 - (v14 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v29 = *(void *)v26;
        v26 -= 8;
        *v27-- = v29;
        v28 += 8;
      }
      while (v28);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_29;
      }
LABEL_27:
      long long v30 = v19 - 1;
      do
      {
        char v31 = *--v11;
        *v30-- = v31;
      }
      while (v11 != v9);
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v18 = 0;
    char v19 = (char *)(v10 - v9);
    int64_t v20 = 0;
    *(unsigned char *)unint64_t v14 = 0;
    uint64_t v13 = v14 + 1;
    if (v10 != v9) {
      goto LABEL_11;
    }
  }
  *(void *)a2 = v19;
  *((void *)a2 + 1) = v13;
  *((void *)a2 + 2) = v20;
  if (v10) {
LABEL_30:
  }
    operator delete(v11);
LABEL_31:
  *((void *)a2 + 1) = v13;
  unsigned int v32 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, *(void *)(a3 + 24));
  unint64_t AttrDictionary = *(void *)(a3 + 56);
  if (**(uint64_t **)(a1 + 984) <= 4) {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
  }
  if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary))
  {
    v140 |= 1u;
    unsigned int v33 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, AttrDictionary);
  }
  if (**(uint64_t **)(a1 + 984) >= 5 && HIBYTE(*(_DWORD *)(a3 + 44)))
  {
    uint64_t v34 = *(void *)(a3 + 48);
    if (*(_UNKNOWN **)(v34 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      uint64_t v49 = *(void *)(a3 + 16 * (((unint64_t)*(unsigned int *)(a3 + 44) >> 23) & 1) + 64);
      if (!v49) {
        goto LABEL_64;
      }
      long long __p = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v154 = 0u;
      int v159 = 1;
      unsigned int v50 = mlir::bytecode::detail::IRNumberingState::getNumber(*(void *)(a1 + 1104), v49);
      *(void *)(a1 + 10(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      LODWORD(v146) = 0;
      char v150 = 0;
      uint64_t v151 = 0;
      int v152 = 1;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v147 = 0;
      unint64_t v145 = &unk_1EC9A3930;
      uint64_t v153 = a1 + 1016;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v145, 0, 0, 0);
      uint64_t v51 = *((void *)&v155 + 1);
      uint64_t v52 = v156;
      while (v51 != v52)
      {
        unint64_t v53 = *(const char **)v51;
        size_t v54 = *(void *)(v51 + 8);
        v51 += 16;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v145, v53, v54);
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v145, (const char *)v154, *((void *)&v154 + 1) - v154);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v145);
      uint64_t v43 = __p;
      if (!(void)__p) {
        goto LABEL_59;
      }
      uint64_t v55 = *((void *)&__p + 1);
      uint64_t v45 = (void *)__p;
      if (*((void *)&__p + 1) == (void)__p) {
        goto LABEL_58;
      }
      uint64_t v56 = *((void *)&__p + 1);
      do
      {
        unint64_t v58 = *(void **)(v56 - 24);
        v56 -= 24;
        unint64_t v57 = v58;
        if (v58)
        {
          *(void *)(v55 - 16) = v57;
          operator delete(v57);
        }
        uint64_t v55 = v56;
      }
      while (v56 != v43);
    }
    else
    {
      long long __p = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v154 = 0u;
      int v159 = 1;
      uint64_t v35 = *(uint64_t **)(a1 + 1120);
      uint64_t v36 = *v35;
      v142[0] = &unk_1EC997B20;
      v142[1] = v36;
      v142[2] = &v154;
      long long v143 = *(_OWORD *)(a1 + 1104);
      uint64_t v144 = v35 + 2;
      uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v34 + 32);
      if (!v37) {
        uint64_t v37 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::BytecodeOpInterface>(*(void *)(v34 + 24), *(void *)(a3 + 48));
      }
      v141[0] = a3;
      v141[1] = v37;
      mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v141, (uint64_t)v142);
      *(void *)(a1 + 10(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      LODWORD(v146) = 0;
      char v150 = 0;
      uint64_t v151 = 0;
      int v152 = 1;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v147 = 0;
      unint64_t v145 = &unk_1EC9A3930;
      uint64_t v153 = a1 + 1016;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v145, 0, 0, 0);
      uint64_t v38 = *((void *)&v155 + 1);
      uint64_t v39 = v156;
      while (v38 != v39)
      {
        uint64_t v40 = *(const char **)v38;
        size_t v41 = *(void *)(v38 + 8);
        v38 += 16;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v145, v40, v41);
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v145, (const char *)v154, *((void *)&v154 + 1) - v154);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v145);
      uint64_t v43 = __p;
      if (!(void)__p) {
        goto LABEL_59;
      }
      uint64_t v44 = *((void *)&__p + 1);
      uint64_t v45 = (void *)__p;
      if (*((void *)&__p + 1) == (void)__p)
      {
LABEL_58:
        *((void *)&__p + 1) = v43;
        operator delete(v45);
LABEL_59:
        if (*((void *)&v155 + 1))
        {
          *(void *)&long long v156 = *((void *)&v155 + 1);
          operator delete(*((void **)&v155 + 1));
        }
        if ((void)v154)
        {
          *((void *)&v154 + 1) = v154;
          operator delete((void *)v154);
        }
        v140 |= 0x40u;
        goto LABEL_64;
      }
      uint64_t v46 = *((void *)&__p + 1);
      do
      {
        uint64_t v48 = *(void **)(v46 - 24);
        v46 -= 24;
        unsigned int v47 = v48;
        if (v48)
        {
          *(void *)(v44 - 16) = v47;
          operator delete(v47);
        }
        uint64_t v44 = v46;
      }
      while (v46 != v43);
    }
    uint64_t v45 = (void *)__p;
    goto LABEL_58;
  }
LABEL_64:
  unint64_t v59 = *(unsigned int *)(a3 + 36);
  if (v59)
  {
    v140 |= 2u;
    int v60 = (long long *)*(unsigned int *)(a3 + 36);
    int v61 = (void *)(a3 - 16);
    if (!v60) {
      int v61 = 0;
    }
    unint64_t v145 = v61;
    uint64_t v146 = v60;
    mlir::OperandRange::getTypes((uint64_t *)&v145, (uint64_t *)&v154);
    uint64_t v63 = *((void *)&v154 + 1);
    uint64_t v62 = v154;
    uint64_t v64 = *((void *)&v155 + 1);
    if (v154 != v155)
    {
      if ((void)v154 == (void)v155)
      {
        do
        {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v62, v63);
          unsigned int v66 = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v6, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
          ++v63;
        }
        while (v64 != v63);
        goto LABEL_70;
      }
      while (1)
      {
        unint64_t v95 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v62, v63) + 8) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v96 = *(_DWORD *)(a1 + 128);
        if (!v96) {
          goto LABEL_171;
        }
        uint64_t v97 = *(void *)(a1 + 112);
        unsigned int v98 = v96 - 1;
        unsigned int v99 = ((v95 >> 4) ^ (v95 >> 9)) & (v96 - 1);
        unint64_t v100 = (unint64_t *)(v97 + 16 * v99);
        unint64_t v101 = *v100;
        if (*v100 != v95) {
          break;
        }
LABEL_136:
        unint64_t v107 = *(unsigned int *)(v100[1] + 8);
        if (v107 > 0x7F)
        {
          ++v63;
        }
        else
        {
          char v108 = (2 * v107) | 1;
          BOOL v110 = (char *)*((void *)a2 + 1);
          unint64_t v109 = *((void *)a2 + 2);
          if ((unint64_t)v110 < v109)
          {
            *BOOL v110 = v108;
            *((void *)a2 + 1) = v110 + 1;
            ++v63;
          }
          else
          {
            unint64_t v111 = *(char **)a2;
            unint64_t v112 = (unint64_t)&v110[-*(void *)a2];
            unint64_t v113 = v112 + 1;
            if ((uint64_t)(v112 + 1) < 0) {
              goto LABEL_186;
            }
            unint64_t v114 = v109 - (void)v111;
            if (2 * v114 > v113) {
              unint64_t v113 = 2 * v114;
            }
            if (v114 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v115 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v115 = v113;
            }
            if (!v115)
            {
              uint64_t v116 = 0;
              uint64_t v117 = &v110[-*(void *)a2];
              *(unsigned char *)unint64_t v112 = v108;
              uint64_t v118 = v112 + 1;
              if (v110 == v111) {
                goto LABEL_165;
              }
LABEL_149:
              if (v112 >= 8 && (unint64_t)(v111 - v116) >= 0x20)
              {
                if (v112 >= 0x20)
                {
                  unint64_t v119 = v112 & 0xFFFFFFFFFFFFFFE0;
                  int v120 = &v116[v112 - 16];
                  unint64_t v121 = (long long *)(v110 - 16);
                  unint64_t v122 = v112 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v123 = *v121;
                    *((_OWORD *)v120 - 1) = *(v121 - 1);
                    *(_OWORD *)int v120 = v123;
                    v120 -= 32;
                    v121 -= 2;
                    v122 -= 32;
                  }
                  while (v122);
                  if (v112 == v119) {
                    goto LABEL_164;
                  }
                  if ((v112 & 0x18) != 0) {
                    goto LABEL_157;
                  }
                  v117 -= v119;
                  v110 -= v119;
                }
                else
                {
                  unint64_t v119 = 0;
LABEL_157:
                  v117 -= v112 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v124 = &v116[&v110[-v119] - v111 - 8];
                  unint64_t v125 = (uint64_t *)&v110[-v119 - 8];
                  unint64_t v126 = v119 - (v112 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v127 = *v125--;
                    *(void *)unint64_t v124 = v127;
                    v124 -= 8;
                    v126 += 8;
                  }
                  while (v126);
                  v110 -= v112 & 0xFFFFFFFFFFFFFFF8;
                  if (v112 == (v112 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_164:
                    BOOL v110 = *(char **)a2;
                    uint64_t v117 = v116;
                    goto LABEL_165;
                  }
                }
              }
              int64_t v128 = v117 - 1;
              do
              {
                char v129 = *--v110;
                *v128-- = v129;
              }
              while (v110 != v111);
              goto LABEL_164;
            }
            uint64_t v116 = (char *)operator new(v115);
            uint64_t v117 = &v116[v112];
            v116[v112] = v108;
            uint64_t v118 = (uint64_t)&v116[v112 + 1];
            if (v110 != v111) {
              goto LABEL_149;
            }
LABEL_165:
            *(void *)a2 = v117;
            *((void *)a2 + 1) = v118;
            *((void *)a2 + 2) = &v116[v115];
            if (v110) {
              operator delete(v110);
            }
            *((void *)a2 + 1) = v118;
            ++v63;
          }
        }
      }
      int64_t v102 = 0;
      int v103 = 1;
      while (v101 != -4096)
      {
        if (v102) {
          BOOL v104 = 0;
        }
        else {
          BOOL v104 = v101 == -8192;
        }
        if (v104) {
          int64_t v102 = v100;
        }
        unsigned int v105 = v99 + v103++;
        unsigned int v99 = v105 & v98;
        unint64_t v100 = (unint64_t *)(v97 + 16 * (v105 & v98));
        unint64_t v101 = *v100;
        if (*v100 == v95) {
          goto LABEL_136;
        }
      }
      if (v102) {
        unint64_t v100 = v102;
      }
      int v130 = *(_DWORD *)(a1 + 120);
      if (4 * v130 + 4 < 3 * v96)
      {
        if (v96 + ~v130 - *(_DWORD *)(a1 + 124) > v96 >> 3) {
          goto LABEL_132;
        }
      }
      else
      {
LABEL_171:
        v96 *= 2;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 112, v96);
      uint64_t v131 = *(void *)(a1 + 112);
      int v132 = *(_DWORD *)(a1 + 128) - 1;
      unsigned int v133 = v132 & ((v95 >> 4) ^ (v95 >> 9));
      unint64_t v100 = (unint64_t *)(v131 + 16 * v133);
      unint64_t v134 = *v100;
      if (*v100 == v95)
      {
        unint64_t v106 = v95;
        goto LABEL_133;
      }
      uint64_t v135 = 0;
      int v136 = 1;
      while (v134 != -4096)
      {
        if (v135) {
          BOOL v137 = 0;
        }
        else {
          BOOL v137 = v134 == -8192;
        }
        if (v137) {
          uint64_t v135 = v100;
        }
        unsigned int v138 = v133 + v136++;
        unsigned int v133 = v138 & v132;
        unint64_t v100 = (unint64_t *)(v131 + 16 * (v138 & v132));
        unint64_t v134 = *v100;
        unint64_t v106 = v95;
        if (*v100 == v95) {
          goto LABEL_133;
        }
      }
      if (v135) {
        unint64_t v100 = v135;
      }
LABEL_132:
      unint64_t v106 = *v100;
LABEL_133:
      ++*(_DWORD *)(a1 + 120);
      if (v106 != -4096) {
        --*(_DWORD *)(a1 + 124);
      }
      *unint64_t v100 = v95;
      v100[1] = 0;
      goto LABEL_136;
    }
  }
LABEL_70:
  if ((*(unsigned char *)(a3 + 46) & 0x80) != 0)
  {
    unint64_t v67 = *(unsigned int *)(a3 + 68);
    if (v67)
    {
      v140 |= 4u;
      if ((*(unsigned char *)(a3 + 46) & 0x80) != 0)
      {
        uint64_t v68 = *(unsigned int *)(a3 + 68);
        if (v68)
        {
          uint64_t v69 = (void **)(*(void *)(a3 + 72) + 24);
          do
          {
            while (1)
            {
              unint64_t v145 = *v69;
              *(void *)&long long v154 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 896), (unint64_t *)&v145, &v154))break; {
              unint64_t v70 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1 + 896, (uint64_t)&v145, (unint64_t *)&v145, (void *)v154);
              }
              *unint64_t v70 = v145;
              *((_DWORD *)v70 + 2) = 0;
              v69 += 4;
              if (!--v68) {
                goto LABEL_78;
              }
            }
            v69 += 4;
            --v68;
          }
          while (v68);
        }
      }
    }
  }
LABEL_78:
  unint64_t v71 = *(unsigned int *)(a3 + 40);
  if (v71)
  {
    v140 |= 8u;
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v154, (Operation *)a3);
    uint64_t v72 = *((void *)&v154 + 1);
    if (*((void *)&v154 + 1))
    {
      unint64_t v73 = (mlir::Block **)(v154 + 24);
      do
      {
        int v74 = *v73;
        v73 += 4;
        unsigned int v75 = mlir::bytecode::detail::IRNumberingState::getNumber(v6, v74);
        --v72;
      }
      while (v72);
    }
  }
  if (**(uint64_t **)(a1 + 984) >= 3)
  {
    unint64_t v76 = *(unsigned int *)(a3 + 36);
    if (v76) {
      uint64_t v77 = a3 - 16;
    }
    else {
      uint64_t v77 = 0;
    }
    mlir::ValueRange::ValueRange(v160, v77, v76);
  }
  unint64_t v78 = (unsigned char *)(&v10[v8] - v9);
  int v79 = *(_DWORD *)(a3 + 44) & 0x7FFFFF;
  if (!v79)
  {
    v78[*(void *)a2 - *((void *)a2 + 9)] = v140;
    return 1;
  }
  v78[*(void *)a2 - *((void *)a2 + 9)] = v140 | 0x10;
  BOOL isIsolatedFromAbove = mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(v6, (mlir::Operation *)a3);
  if (!isIsolatedFromAbove || **(uint64_t **)(a1 + 984) < 2)
  {
    unint64_t v86 = *(unsigned int *)(a3 + 44);
    if ((v86 & 0x7FFFFF) != 0)
    {
      uint64_t v87 = (void *)(((a3 + 16 * ((v86 >> 23) & 1) + ((v86 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a3 + 40));
      *(void *)&long long v154 = a1;
      *((void *)&v154 + 1) = a2;
      uint64_t v88 = 24 * (v86 & 0x7FFFFF);
      {
        v87 += 3;
        v88 -= 24;
        if (!v88) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  long long __p = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v154 = 0u;
  int v159 = 1;
  unint64_t v81 = *(unsigned int *)(a3 + 44);
  if ((v81 & 0x7FFFFF) == 0)
  {
LABEL_94:
    char v84 = 1;
    unint64_t v85 = (char *)__p;
    if (!(void)__p) {
      goto LABEL_111;
    }
    goto LABEL_104;
  }
  uint64_t v82 = (void *)(((a3 + 16 * ((v81 >> 23) & 1) + ((v81 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a3 + 40));
  unint64_t v145 = (void *)a1;
  uint64_t v146 = &v154;
  uint64_t v83 = 24 * (v81 & 0x7FFFFF);
  {
    v82 += 3;
    v83 -= 24;
    if (!v83) {
      goto LABEL_94;
    }
  }
  char v84 = 0;
  unint64_t v85 = (char *)__p;
  if ((void)__p)
  {
LABEL_104:
    int v90 = (char *)*((void *)&__p + 1);
    unsigned int v91 = v85;
    if (*((char **)&__p + 1) != v85)
    {
      uint64_t v92 = (char *)*((void *)&__p + 1);
      do
      {
        unsigned int v94 = (void *)*((void *)v92 - 3);
        v92 -= 24;
        BOOL v93 = v94;
        if (v94)
        {
          *((void *)v90 - 2) = v93;
          operator delete(v93);
        }
        int v90 = v92;
      }
      while (v92 != v85);
      unsigned int v91 = (char *)__p;
    }
    *((void *)&__p + 1) = v85;
    operator delete(v91);
  }
LABEL_111:
  if (*((void *)&v155 + 1))
  {
    *(void *)&long long v156 = *((void *)&v155 + 1);
    operator delete(*((void **)&v155 + 1));
  }
  if ((void)v154)
  {
    *((void *)&v154 + 1) = v154;
    operator delete((void *)v154);
  }
  return (v84 & 1) != 0;
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unsigned int v4 = *((_DWORD *)this + 212);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = *((void *)this + 104);
  unsigned int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v5 + 16 * v7;
  unint64_t v9 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2) {
    return *(unsigned int *)(v8 + 8);
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v9 != (mlir::Block *)-4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v9 == (mlir::Block *)-8192;
    }
    if (v14) {
      uint64_t v12 = v8;
    }
    unsigned int v15 = v7 + v13++;
    unsigned int v7 = v15 & v6;
    uint64_t v8 = v5 + 16 * (v15 & v6);
    unint64_t v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2) {
      return *(unsigned int *)(v8 + 8);
    }
  }
  if (v12) {
    uint64_t v8 = v12;
  }
  int v16 = *((_DWORD *)this + 210);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *((_DWORD *)this + 211) > v4 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 832, v4);
  uint64_t v17 = *((void *)this + 104);
  int v18 = *((_DWORD *)this + 212) - 1;
  unsigned int v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v17 + 16 * v19;
  int64_t v20 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 210);
    if (a2 == (mlir::Block *)-4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v20 != (mlir::Block *)-4096)
  {
    if (v21) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v20 == (mlir::Block *)-8192;
    }
    if (v23) {
      uint64_t v21 = v8;
    }
    unsigned int v24 = v19 + v22++;
    unsigned int v19 = v24 & v18;
    uint64_t v8 = v17 + 16 * (v24 & v18);
    int64_t v20 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2) {
      goto LABEL_23;
    }
  }
  if (v21) {
    uint64_t v8 = v21;
  }
LABEL_6:
  uint64_t v11 = *(mlir::Block **)v8;
  ++*((_DWORD *)this + 210);
  if (v11 != (mlir::Block *)-4096) {
LABEL_7:
  }
    --*((_DWORD *)this + 211);
LABEL_8:
  *(void *)uint64_t v8 = a2;
  *(_DWORD *)(v8 + 8) = 0;
  return 0;
}

void anonymous namespace'::BytecodeWriter::writeUseListOrders(uint64_t a1, _anonymous_namespace_::EncodingEmitter *a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v223 = *MEMORY[0x1E4F143B8];
  uint64_t v213 = 0;
  unint64_t v214 = 0;
  unsigned int v215 = 0;
  uint64_t v220 = 0;
  uint64_t v221 = a4;
  uint64_t v222 = 0;
  if (!a5) {
    goto LABEL_268;
  }
  uint64_t v5 = a5;
  uint64_t v8 = 0;
  int v9 = 0;
  long long v212 = (mlir::bytecode::detail::IRNumberingState *)(a1 + 40);
  uint64_t v207 = a1 + 64;
  while (1)
  {
    BOOL v14 = (unint64_t *)mlir::ValueRange::dereference_iterator(&v221, v8);
    unint64_t v15 = *v14;
    if (!*v14) {
      goto LABEL_6;
    }
    if (!*(void *)v15) {
      goto LABEL_6;
    }
    int v16 = v14;
    uint64_t Number = mlir::bytecode::detail::IRNumberingState::getNumber(v212, *(mlir::Operation **)(v15 + 16));
    unint64_t v18 = mlir::OpOperand::getOperandNumber(v15) | (unint64_t)(Number << 32);
    long long __dst = &v218;
    int v218 = 0;
    unint64_t v219 = v18;
    uint64_t v217 = 0x300000001;
    unsigned int v19 = *(void **)*v16;
    if (!v19) {
      goto LABEL_6;
    }
    char v20 = 1;
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = v19[2];
      unsigned int v23 = *(_DWORD *)(a1 + 80);
      if (!v23) {
        goto LABEL_37;
      }
      uint64_t v24 = *(void *)(a1 + 64);
      unsigned int v25 = v23 - 1;
      unsigned int v26 = ((v22 >> 4) ^ (v22 >> 9)) & (v23 - 1);
      uint64_t v27 = (void *)(v24 + 16 * v26);
      uint64_t v28 = *v27;
      if (*v27 == v22) {
        goto LABEL_30;
      }
      uint64_t v29 = 0;
      int v30 = 1;
      while (v28 != -4096)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -8192;
        }
        if (v31) {
          uint64_t v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        uint64_t v27 = (void *)(v24 + 16 * (v32 & v25));
        uint64_t v28 = *v27;
        if (*v27 == v22) {
          goto LABEL_30;
        }
      }
      if (v29) {
        uint64_t v27 = v29;
      }
      int v40 = *(_DWORD *)(a1 + 72);
      if (4 * v40 + 4 >= 3 * v23)
      {
LABEL_37:
        v23 *= 2;
LABEL_38:
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v207, v23);
        uint64_t v41 = *(void *)(a1 + 64);
        int v42 = *(_DWORD *)(a1 + 80) - 1;
        unsigned int v43 = v42 & ((v22 >> 4) ^ (v22 >> 9));
        uint64_t v27 = (void *)(v41 + 16 * v43);
        uint64_t v44 = *v27;
        if (*v27 == v22)
        {
LABEL_39:
          ++*(_DWORD *)(a1 + 72);
          if (v22 == -4096) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v45 = 0;
          int v46 = 1;
          while (v44 != -4096)
          {
            if (v45) {
              BOOL v47 = 0;
            }
            else {
              BOOL v47 = v44 == -8192;
            }
            if (v47) {
              uint64_t v45 = v27;
            }
            unsigned int v48 = v43 + v46++;
            unsigned int v43 = v48 & v42;
            uint64_t v27 = (void *)(v41 + 16 * (v48 & v42));
            uint64_t v44 = *v27;
            if (*v27 == v22) {
              goto LABEL_39;
            }
          }
          if (v45) {
            uint64_t v27 = v45;
          }
          uint64_t v49 = *v27;
          ++*(_DWORD *)(a1 + 72);
          if (v49 == -4096) {
            goto LABEL_29;
          }
        }
LABEL_28:
        --*(_DWORD *)(a1 + 76);
        goto LABEL_29;
      }
      if (v23 + ~v40 - *(_DWORD *)(a1 + 76) <= v23 >> 3) {
        goto LABEL_38;
      }
      uint64_t v33 = *v27;
      ++*(_DWORD *)(a1 + 72);
      if (v33 != -4096) {
        goto LABEL_28;
      }
LABEL_29:
      void *v27 = v22;
      v27[1] = 0;
LABEL_30:
      uint64_t v34 = *(unsigned int *)v27[1];
      unint64_t v35 = mlir::OpOperand::getOperandNumber((unint64_t)v19) | (unint64_t)(v34 << 32);
      BOOL v36 = v18 > v35;
      uint64_t v37 = v217;
      if (v217 >= (unint64_t)HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, &v218, v217 + 1, 16);
        uint64_t v37 = v217;
      }
      v20 &= v36;
      uint64_t v38 = (char *)__dst + 16 * v37;
      *uint64_t v38 = v21;
      v38[1] = v35;
      unint64_t v39 = (v217 + 1);
      LODWORD(v217) = v217 + 1;
      ++v21;
      unsigned int v19 = (void *)*v19;
      unint64_t v18 = v35;
    }
    while (v19);
    unsigned int v50 = (char *)__dst;
    if ((v20 & 1) == 0)
    {
      unint64_t v51 = 126 - 2 * __clz(v39);
      if (v39) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 0;
      }
      unsigned int v50 = (char *)__dst;
      unint64_t v53 = v217;
      size_t v54 = (int *)v213;
      uint64_t v55 = v215;
      if (!v215)
      {
        uint64_t v56 = 0;
        int v57 = v214;
        if (4 * (int)v214 + 4 < 3 * v215) {
          goto LABEL_60;
        }
LABEL_95:
        int v83 = 2 * v215;
LABEL_97:
        unint64_t v84 = (v83 - 1) | ((unint64_t)(v83 - 1) >> 1);
        unint64_t v85 = v84 | (v84 >> 2) | ((v84 | (v84 >> 2)) >> 4);
        int v86 = ((v85 | (v85 >> 8)) >> 16) | v85 | (v85 >> 8);
        if ((v86 + 1) > 0x40) {
          unsigned int v87 = v86 + 1;
        }
        else {
          unsigned int v87 = 64;
        }
        unsigned int v215 = v87;
        buffer = (llvm *)llvm::allocate_buffer(72 * v87, (std::align_val_t)8uLL);
        uint64_t v213 = buffer;
        if (v54)
        {
          uint64_t v89 = 18 * v55;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>,unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>::moveFromOldBuckets((uint64_t)&v213, v54, &v54[v89]);
          llvm::deallocate_buffer((llvm *)v54, (void *)(v89 * 4));
        }
        unint64_t v214 = 0;
        unsigned int v90 = v215;
        if (!v215) {
          goto LABEL_119;
        }
        unint64_t v91 = 72 * v215 - 72;
        uint64_t v92 = buffer;
        if (v91 < 0x48) {
          goto LABEL_280;
        }
        unint64_t v93 = v91 / 0x48 + 1;
        uint64_t v92 = (llvm *)((char *)buffer + 72 * (v93 & 0x7FFFFFFFFFFFFFELL));
        uint64_t v94 = v93 & 0x7FFFFFFFFFFFFFELL;
        unint64_t v95 = buffer;
        do
        {
          *(_DWORD *)unint64_t v95 = -1;
          *((_DWORD *)v95 + 18) = -1;
          unint64_t v95 = (llvm *)((char *)v95 + 144);
          v94 -= 2;
        }
        while (v94);
        if (v93 != (v93 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_280:
          do
          {
            *(_DWORD *)uint64_t v92 = -1;
            uint64_t v92 = (llvm *)((char *)v92 + 72);
          }
          while (v92 != (llvm *)((char *)buffer + 72 * v90));
        }
        if (v90)
        {
          unsigned int v96 = v90 - 1;
          unsigned int v97 = v96 & (37 * v9);
          uint64_t v56 = (char *)buffer + 72 * v97;
          int v98 = *(_DWORD *)v56;
          if (*(_DWORD *)v56 != v9)
          {
            unsigned int v99 = 0;
            int v100 = 1;
            while (v98 != -1)
            {
              if (v99) {
                BOOL v101 = 0;
              }
              else {
                BOOL v101 = v98 == -2;
              }
              if (v101) {
                unsigned int v99 = v56;
              }
              unsigned int v102 = v97 + v100++;
              unsigned int v97 = v102 & v96;
              uint64_t v56 = (char *)buffer + 72 * v97;
              int v98 = *(_DWORD *)v56;
              if (*(_DWORD *)v56 == v9) {
                goto LABEL_61;
              }
            }
            if (v99) {
              uint64_t v56 = v99;
            }
          }
        }
        else
        {
LABEL_119:
          uint64_t v56 = 0;
        }
        goto LABEL_61;
      }
      unsigned int v10 = (v215 - 1) & (37 * v9);
      uint64_t v11 = (char *)v213 + 72 * v10;
      int v12 = *(_DWORD *)v11;
      if (*(_DWORD *)v11 != v9)
      {
        int v79 = 0;
        int v80 = 1;
        while (v12 != -1)
        {
          if (v79) {
            BOOL v81 = 0;
          }
          else {
            BOOL v81 = v12 == -2;
          }
          if (v81) {
            int v79 = v11;
          }
          unsigned int v82 = v10 + v80++;
          unsigned int v10 = v82 & (v215 - 1);
          uint64_t v11 = (char *)v213 + 72 * v10;
          int v12 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 == v9) {
            goto LABEL_4;
          }
        }
        if (v79) {
          uint64_t v56 = v79;
        }
        else {
          uint64_t v56 = v11;
        }
        int v57 = v214;
        if (4 * (int)v214 + 4 >= 3 * v215) {
          goto LABEL_95;
        }
LABEL_60:
        if (v215 + ~v57 - HIDWORD(v214) <= v215 >> 3)
        {
          int v83 = v215;
          goto LABEL_97;
        }
LABEL_61:
        LODWORD(v214) = v214 + 1;
        if (*(_DWORD *)v56 != -1) {
          --HIDWORD(v214);
        }
        *(_DWORD *)uint64_t v56 = v9;
        *((void *)v56 + 1) = v56 + 24;
        unint64_t v58 = (char **)(v56 + 8);
        *((void *)v56 + 2) = 0xC00000000;
        uint64_t v5 = a5;
        if (v53 >= 0xD)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v56 + 8), v56 + 24, v53, 4);
          uint64_t v59 = *((unsigned int *)v56 + 4);
          int v60 = *v58;
          int v61 = &(*v58)[4 * v59];
          unint64_t v62 = (v53 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v62 < 0x14) {
            goto LABEL_65;
          }
LABEL_68:
          BOOL v64 = v61 >= &v50[16 * v62 + 8] || v50 >= &v60[4 * v59 + 4 + 4 * v62];
          uint64_t v63 = v50;
          if (v64)
          {
            unint64_t v65 = v62 + 1;
            uint64_t v66 = (v62 + 1) & 7;
            if (!v66) {
              uint64_t v66 = 8;
            }
            unint64_t v67 = v65 - v66;
            v61 += 4 * v67;
            uint64_t v63 = &v50[16 * v67];
            uint64_t v68 = (const double *)(v50 + 64);
            uint64_t v69 = (int32x4_t *)&v60[4 * v59 + 16];
            do
            {
              unint64_t v70 = v68 - 8;
              unsigned long long v71 = (unsigned __int128)vld2q_f64(v70);
              uint64_t v72 = v68 - 4;
              unsigned long long v73 = (unsigned __int128)vld2q_f64(v72);
              int v74 = v68 + 16;
              unsigned long long v76 = (unsigned __int128)vld2q_f64(v68);
              unsigned int v75 = v68 + 4;
              unsigned long long v77 = (unsigned __int128)vld2q_f64(v75);
              v69[-1] = vuzp1q_s32((int32x4_t)v71, (int32x4_t)v73);
              *uint64_t v69 = vuzp1q_s32((int32x4_t)v76, (int32x4_t)v77);
              v69 += 2;
              uint64_t v68 = v74;
              v67 -= 8;
            }
            while (v67);
          }
          goto LABEL_77;
        }
        if (v53)
        {
          uint64_t v59 = 0;
          int v60 = *v58;
          int v61 = *v58;
          unint64_t v62 = (v53 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v62 >= 0x14) {
            goto LABEL_68;
          }
LABEL_65:
          uint64_t v63 = v50;
          do
          {
LABEL_77:
            uint64_t v78 = *(void *)v63;
            v63 += 16;
            *(_DWORD *)int v61 = v78;
            v61 += 4;
          }
          while (v63 != &v50[16 * v53]);
          *((_DWORD *)v56 + 4) += v53;
          unsigned int v50 = (char *)__dst;
          if (__dst == &v218) {
            goto LABEL_6;
          }
        }
        else
        {
          *((_DWORD *)v56 + 4) = 0;
          unsigned int v50 = (char *)__dst;
          if (__dst == &v218) {
            goto LABEL_6;
          }
        }
LABEL_5:
        free(v50);
        goto LABEL_6;
      }
    }
LABEL_4:
    uint64_t v5 = a5;
    if (v50 != (char *)&v218) {
      goto LABEL_5;
    }
LABEL_6:
    int v9 = v220 + 1;
    uint64_t v8 = v222 + 1;
    ++v220;
    ++v222;
    if (v221 == a4 && v8 == v5)
    {
      unint64_t v103 = v214;
      if (v214)
      {
        *a3 |= 0x20u;
        if (v5 != 1) {
        if (v214)
        }
        {
          if (v215)
          {
            uint64_t v104 = 72 * v215;
            unsigned int v105 = v213;
            while (*(_DWORD *)v105 >= 0xFFFFFFFE)
            {
              unsigned int v105 = (llvm *)((char *)v105 + 72);
              v104 -= 72;
              if (!v104) {
                goto LABEL_268;
              }
            }
          }
          else
          {
            unsigned int v105 = v213;
          }
          if (v105 != (llvm *)((char *)v213 + 72 * v215))
          {
            int64x2_t v206 = vdupq_n_s64(2uLL);
            uint64_t v209 = (llvm *)((char *)v213 + 72 * v215);
            while (1)
            {
              unint64_t v106 = 0;
              unint64_t v107 = *(unsigned int *)v105;
              long long __dst = &v218;
              uint64_t v217 = 0xC00000000;
              if (&__dst == (void **)((char *)v105 + 8))
              {
                unint64_t v109 = 0;
                goto LABEL_151;
              }
              unint64_t v108 = *((unsigned int *)v105 + 4);
              unint64_t v109 = 0;
              if (!*((_DWORD *)v105 + 4)) {
                goto LABEL_151;
              }
              BOOL v110 = &v218;
              uint64_t v111 = *((unsigned int *)v105 + 4);
              if (v108 >= 0xD)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, &v218, *((unsigned int *)v105 + 4), 4);
                uint64_t v111 = *((unsigned int *)v105 + 4);
                if (!v111) {
                  goto LABEL_141;
                }
                BOOL v110 = (int *)__dst;
              }
              memcpy(v110, *((const void **)v105 + 1), 4 * v111);
LABEL_141:
              LODWORD(v217) = v108;
              unint64_t v112 = (v108 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v112 < 3)
              {
                unint64_t v109 = 0;
                uint64_t v113 = 0;
                unint64_t v114 = (int *)__dst;
                do
                {
LABEL_147:
                  int v124 = *v114++;
                  if (v113 != v124) {
                    ++v109;
                  }
                  ++v113;
                }
                while (v114 != (int *)((char *)__dst + 4 * v108));
                goto LABEL_150;
              }
              unint64_t v115 = v112 + 1;
              uint64_t v113 = (v112 + 1) & 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v114 = (int *)((char *)__dst + 4 * v113);
              uint64_t v116 = (char *)__dst + 8;
              int64x2_t v117 = 0uLL;
              uint64_t v118 = v113;
              int64x2_t v119 = 0uLL;
              int64x2_t v120 = (int64x2_t)xmmword_1810FE2E0;
              do
              {
                uint64_t v121 = *(v116 - 1);
                v122.i64[0] = v121;
                v122.i64[1] = HIDWORD(v121);
                int64x2_t v123 = v122;
                v122.i64[0] = *v116;
                v122.i64[1] = HIDWORD(*v116);
                int64x2_t v117 = vsubq_s64(v117, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(v120, v123)));
                int64x2_t v119 = vsubq_s64(v119, (int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(vaddq_s64(v120, v206), v122)));
                int64x2_t v120 = vaddq_s64(v120, vdupq_n_s64(4uLL));
                v116 += 2;
                v118 -= 4;
              }
              while (v118);
              unint64_t v109 = vaddvq_s64(vaddq_s64(v119, v117));
              if (v115 != v113) {
                goto LABEL_147;
              }
LABEL_150:
              unint64_t v106 = v108;
LABEL_151:
              if (a5 != 1) {
              if (v109 >= v106 >> 1)
              }
              {
                int v175 = (char **)a2;
                if (!v217) {
                  goto LABEL_261;
                }
                unsigned int v176 = (unsigned int *)__dst;
                v177 = (unsigned int *)((char *)__dst + 4 * v217);
                while (2)
                {
                  unint64_t v178 = *v176;
                  if (v178 > 0x7F)
                  {
                    goto LABEL_228;
                  }
                  char v179 = (2 * v178) | 1;
                  uint64_t v181 = v175[1];
                  unint64_t v180 = (unint64_t)v175[2];
                  if ((unint64_t)v181 < v180)
                  {
                    char *v181 = v179;
                    v175[1] = v181 + 1;
                    goto LABEL_228;
                  }
                  unint64_t v182 = *v175;
                  unint64_t v183 = v181 - v182;
                  uint64_t v184 = v181 - v182 + 1;
                  if (v184 < 0) {
LABEL_277:
                  }
                    abort();
                  unint64_t v185 = v180 - (void)v182;
                  if (2 * v185 > v184) {
                    uint64_t v184 = 2 * v185;
                  }
                  if (v185 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v186 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v186 = v184;
                  }
                  if (v186)
                  {
                    uint64_t v187 = operator new(v186);
                    unint64_t v188 = &v187[v183];
                    v187[v183] = v179;
                    uint64_t v189 = (uint64_t)&v187[v183 + 1];
                    if (v181 != v182)
                    {
LABEL_240:
                      if (v183 >= 8 && (unint64_t)(v182 - v187) >= 0x20)
                      {
                        if (v183 >= 0x20)
                        {
                          unint64_t v190 = v183 & 0xFFFFFFFFFFFFFFE0;
                          char v191 = &v187[v183 - 16];
                          uint64_t v192 = (long long *)(v181 - 16);
                          unint64_t v193 = v183 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            long long v194 = *v192;
                            *(v191 - 1) = *(v192 - 1);
                            *char v191 = v194;
                            v191 -= 2;
                            v192 -= 2;
                            v193 -= 32;
                          }
                          while (v193);
                          if (v183 == v190) {
                            goto LABEL_258;
                          }
                          if ((v183 & 0x18) != 0) {
                            goto LABEL_251;
                          }
                          v188 -= v190;
                          v181 -= v190;
                        }
                        else
                        {
                          unint64_t v190 = 0;
LABEL_251:
                          v188 -= v183 & 0xFFFFFFFFFFFFFFF8;
                          uint64_t v195 = &v187[&v181[-v190] - v182 - 8];
                          char v196 = (uint64_t *)&v181[-v190 - 8];
                          unint64_t v197 = v190 - (v183 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            uint64_t v198 = *v196--;
                            *v195-- = v198;
                            v197 += 8;
                          }
                          while (v197);
                          v181 -= v183 & 0xFFFFFFFFFFFFFFF8;
                          if (v183 == (v183 & 0xFFFFFFFFFFFFFFF8))
                          {
LABEL_258:
                            int v175 = (char **)a2;
                            uint64_t v181 = *(char **)a2;
                            *(void *)a2 = v187;
                            *((void *)a2 + 1) = v189;
                            *((void *)a2 + 2) = &v187[v186];
                            if (v181) {
LABEL_259:
                            }
                              operator delete(v181);
LABEL_260:
                            v175[1] = (char *)v189;
LABEL_228:
                            if (++v176 == v177) {
                              goto LABEL_261;
                            }
                            continue;
                          }
                        }
                      }
                      int v199 = v188 - 1;
                      do
                      {
                        char v200 = *--v181;
                        *v199-- = v200;
                      }
                      while (v181 != v182);
                      goto LABEL_258;
                    }
                  }
                  else
                  {
                    uint64_t v187 = 0;
                    unint64_t v188 = (char *)(v181 - v182);
                    *(unsigned char *)unint64_t v183 = v179;
                    uint64_t v189 = v183 + 1;
                    if (v181 != v182) {
                      goto LABEL_240;
                    }
                  }
                  break;
                }
                int v175 = (char **)a2;
                *(void *)a2 = v188;
                *((void *)a2 + 1) = v189;
                *((void *)a2 + 2) = &v187[v186];
                if (v181) {
                  goto LABEL_259;
                }
                goto LABEL_260;
              }
              unint64_t v125 = (4 * v109) | 1;
              unint64_t v126 = (char **)a2;
              if (v217)
              {
                unint64_t v127 = 0;
                int64_t v128 = (char *)__dst;
                char v129 = (char *)__dst + 4 * v217;
                do
                {
                  unint64_t v130 = *(unsigned int *)v128;
                  if (v127 == v130) {
                    goto LABEL_157;
                  }
                  if (v130 > 0x7F)
                  {
                    if (v127 > 0x7F) {
                      goto LABEL_156;
                    }
                    goto LABEL_194;
                  }
                  char v131 = (2 * v130) | 1;
                  unsigned int v133 = v126[1];
                  unint64_t v132 = (unint64_t)v126[2];
                  if ((unint64_t)v133 < v132)
                  {
                    char *v133 = v131;
                    v126[1] = v133 + 1;
                    if (v127 > 0x7F) {
                      goto LABEL_156;
                    }
                    goto LABEL_194;
                  }
                  unint64_t v134 = *v126;
                  unint64_t v135 = v133 - v134;
                  uint64_t v136 = v133 - v134 + 1;
                  if (v136 < 0) {
                    goto LABEL_277;
                  }
                  unint64_t v137 = v132 - (void)v134;
                  if (2 * v137 > v136) {
                    uint64_t v136 = 2 * v137;
                  }
                  if (v137 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v138 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v138 = v136;
                  }
                  if (v138)
                  {
                    unint64_t v139 = operator new(v138);
                    char v140 = &v139[v135];
                    v139[v135] = v131;
                    uint64_t v141 = (uint64_t)&v139[v135 + 1];
                    if (v133 != v134) {
                      goto LABEL_173;
                    }
                  }
                  else
                  {
                    unint64_t v139 = 0;
                    char v140 = (char *)(v133 - v134);
                    *(unsigned char *)unint64_t v135 = v131;
                    uint64_t v141 = v135 + 1;
                    if (v133 != v134)
                    {
LABEL_173:
                      if (v135 >= 8 && (unint64_t)(v134 - v139) >= 0x20)
                      {
                        if (v135 >= 0x20)
                        {
                          unint64_t v142 = v135 & 0xFFFFFFFFFFFFFFE0;
                          long long v143 = &v139[v135 - 16];
                          uint64_t v144 = (long long *)(v133 - 16);
                          unint64_t v145 = v135 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            long long v146 = *v144;
                            *(v143 - 1) = *(v144 - 1);
                            _OWORD *v143 = v146;
                            v143 -= 2;
                            v144 -= 2;
                            v145 -= 32;
                          }
                          while (v145);
                          if (v135 == v142) {
                            goto LABEL_191;
                          }
                          if ((v135 & 0x18) != 0) {
                            goto LABEL_184;
                          }
                          v140 -= v142;
                          v133 -= v142;
                        }
                        else
                        {
                          unint64_t v142 = 0;
LABEL_184:
                          v140 -= v135 & 0xFFFFFFFFFFFFFFF8;
                          uint64_t v147 = &v139[&v133[-v142] - v134 - 8];
                          uint64_t v148 = (uint64_t *)&v133[-v142 - 8];
                          unint64_t v149 = v142 - (v135 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            uint64_t v150 = *v148--;
                            *v147-- = v150;
                            v149 += 8;
                          }
                          while (v149);
                          v133 -= v135 & 0xFFFFFFFFFFFFFFF8;
                          if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8))
                          {
LABEL_191:
                            unint64_t v126 = (char **)a2;
                            unsigned int v133 = *(char **)a2;
                            *(void *)a2 = v139;
                            *((void *)a2 + 1) = v141;
                            *((void *)a2 + 2) = &v139[v138];
                            if (!v133) {
                              goto LABEL_193;
                            }
LABEL_192:
                            operator delete(v133);
                            goto LABEL_193;
                          }
                        }
                      }
                      uint64_t v151 = v140 - 1;
                      do
                      {
                        char v152 = *--v133;
                        *v151-- = v152;
                      }
                      while (v133 != v134);
                      goto LABEL_191;
                    }
                  }
                  unint64_t v126 = (char **)a2;
                  *(void *)a2 = v140;
                  *((void *)a2 + 1) = v141;
                  *((void *)a2 + 2) = &v139[v138];
                  if (v133) {
                    goto LABEL_192;
                  }
LABEL_193:
                  v126[1] = (char *)v141;
                  if (v127 > 0x7F)
                  {
LABEL_156:
                    goto LABEL_157;
                  }
LABEL_194:
                  char v153 = (2 * v127) | 1;
                  long long v155 = v126[1];
                  unint64_t v154 = (unint64_t)v126[2];
                  if ((unint64_t)v155 >= v154)
                  {
                    long long v156 = *v126;
                    unint64_t v157 = v155 - v156;
                    uint64_t v158 = v155 - v156 + 1;
                    if (v158 < 0) {
                      goto LABEL_277;
                    }
                    unint64_t v159 = v154 - (void)v156;
                    if (2 * v159 > v158) {
                      uint64_t v158 = 2 * v159;
                    }
                    if (v159 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v160 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v160 = v158;
                    }
                    if (v160)
                    {
                      unsigned int v161 = operator new(v160);
                      uint64_t v162 = &v161[v157];
                      v161[v157] = v153;
                      uint64_t v163 = (uint64_t)&v161[v157 + 1];
                      if (v155 != v156)
                      {
LABEL_204:
                        if (v157 >= 8 && (unint64_t)(v156 - v161) >= 0x20)
                        {
                          if (v157 >= 0x20)
                          {
                            unint64_t v164 = v157 & 0xFFFFFFFFFFFFFFE0;
                            uint64_t v165 = &v161[v157 - 16];
                            unint64_t v166 = (long long *)(v155 - 16);
                            unint64_t v167 = v157 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              long long v168 = *v166;
                              *(v165 - 1) = *(v166 - 1);
                              *uint64_t v165 = v168;
                              v165 -= 2;
                              v166 -= 2;
                              v167 -= 32;
                            }
                            while (v167);
                            if (v157 == v164) {
                              goto LABEL_222;
                            }
                            if ((v157 & 0x18) != 0) {
                              goto LABEL_215;
                            }
                            v162 -= v164;
                            v155 -= v164;
                          }
                          else
                          {
                            unint64_t v164 = 0;
LABEL_215:
                            v162 -= v157 & 0xFFFFFFFFFFFFFFF8;
                            unsigned int v169 = &v161[&v155[-v164] - v156 - 8];
                            unint64_t v170 = (uint64_t *)&v155[-v164 - 8];
                            unint64_t v171 = v164 - (v157 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              uint64_t v172 = *v170--;
                              *v169-- = v172;
                              v171 += 8;
                            }
                            while (v171);
                            v155 -= v157 & 0xFFFFFFFFFFFFFFF8;
                            if (v157 == (v157 & 0xFFFFFFFFFFFFFFF8))
                            {
LABEL_222:
                              unint64_t v126 = (char **)a2;
                              long long v155 = *(char **)a2;
                              *(void *)a2 = v161;
                              *((void *)a2 + 1) = v163;
                              *((void *)a2 + 2) = &v161[v160];
                              if (v155) {
LABEL_223:
                              }
                                operator delete(v155);
LABEL_224:
                              v126[1] = (char *)v163;
                              goto LABEL_157;
                            }
                          }
                        }
                        size_t v173 = v162 - 1;
                        do
                        {
                          char v174 = *--v155;
                          *v173-- = v174;
                        }
                        while (v155 != v156);
                        goto LABEL_222;
                      }
                    }
                    else
                    {
                      unsigned int v161 = 0;
                      uint64_t v162 = (char *)(v155 - v156);
                      *(unsigned char *)unint64_t v157 = v153;
                      uint64_t v163 = v157 + 1;
                      if (v155 != v156) {
                        goto LABEL_204;
                      }
                    }
                    unint64_t v126 = (char **)a2;
                    *(void *)a2 = v162;
                    *((void *)a2 + 1) = v163;
                    *((void *)a2 + 2) = &v161[v160];
                    if (v155) {
                      goto LABEL_223;
                    }
                    goto LABEL_224;
                  }
                  char *v155 = v153;
                  v126[1] = v155 + 1;
LABEL_157:
                  ++v127;
                  v128 += 4;
                }
                while (v128 != v129);
              }
LABEL_261:
              if (__dst != &v218) {
                free(__dst);
              }
              unsigned int v105 = (llvm *)((char *)v105 + 72);
              if (v105 != v209)
              {
                while (*(_DWORD *)v105 >= 0xFFFFFFFE)
                {
                  unsigned int v105 = (llvm *)((char *)v105 + 72);
                  if (v105 == v209) {
                    goto LABEL_268;
                  }
                }
                if (v105 != v209) {
                  continue;
                }
              }
              break;
            }
          }
        }
      }
LABEL_268:
      unint64_t v201 = v213;
      if (v215)
      {
        uint64_t v202 = 72 * v215;
        unint64_t v203 = (char *)v213 + 24;
        do
        {
          if (*((_DWORD *)v203 - 6) <= 0xFFFFFFFD)
          {
            size_t v204 = (char *)*((void *)v203 - 2);
            if (v203 != v204) {
              free(v204);
            }
          }
          v203 += 72;
          v202 -= 72;
        }
        while (v202);
        unint64_t v201 = v213;
        uint64_t v205 = 72 * v215;
      }
      else
      {
        uint64_t v205 = 0;
      }
      llvm::deallocate_buffer(v201, (void *)v205);
    }
  }
}

BOOL mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  uint64_t v6 = *((void *)this + 3);
  unsigned int v4 = (char *)this + 24;
  uint64_t v5 = v6;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  if (!v7) {
    goto LABEL_23;
  }
  unsigned int v8 = v7 - 1;
  unsigned int v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v10 = (mlir::Operation **)(v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a2) {
    goto LABEL_17;
  }
  int v12 = 0;
  int v13 = 1;
  while (v11 != (mlir::Operation *)-4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v11 == (mlir::Operation *)-8192;
    }
    if (v14) {
      int v12 = v10;
    }
    unsigned int v15 = v9 + v13++;
    unsigned int v9 = v15 & v8;
    unsigned int v10 = (mlir::Operation **)(v5 + 16 * (v15 & v8));
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_17;
    }
  }
  if (v12) {
    unsigned int v10 = v12;
  }
  int v19 = *((_DWORD *)this + 8);
  if (4 * v19 + 4 < 3 * v7)
  {
    if (v7 + ~v19 - *((_DWORD *)this + 9) > v7 >> 3) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_23:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  uint64_t v20 = *((void *)this + 3);
  int v21 = *((_DWORD *)this + 10) - 1;
  unsigned int v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v10 = (mlir::Operation **)(v20 + 16 * v22);
  unsigned int v23 = *v10;
  if (*v10 == a2)
  {
LABEL_25:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Operation *)-4096) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (mlir::Operation *)-8192;
    }
    if (v26) {
      uint64_t v24 = v10;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    unsigned int v10 = (mlir::Operation **)(v20 + 16 * (v27 & v21));
    unsigned int v23 = *v10;
    if (*v10 == a2) {
      goto LABEL_25;
    }
  }
  if (v24) {
    unsigned int v10 = v24;
  }
LABEL_14:
  int v16 = *v10;
  ++*((_DWORD *)this + 8);
  if (v16 != (mlir::Operation *)-4096) {
LABEL_15:
  }
    --*((_DWORD *)this + 9);
LABEL_16:
  char *v10 = a2;
  v10[1] = 0;
LABEL_17:
  uint64_t v17 = v10[1];
  return *((unsigned char *)v17 + 5) && *((unsigned char *)v17 + 4) != 0;
}

uint64_t anonymous namespace'::anonymous namespace'::PropertiesSectionBuilder::emit(uint64_t a1, char *a2, unint64_t a3)
{
  v68[5] = *MEMORY[0x1E4F143B8];
  uint64_t v66 = (char *)v68;
  long long v67 = xmmword_1810FE310;
  long long v64 = 0u;
  long long v62 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)int v60 = 0u;
  *(_OWORD *)int v61 = 0u;
  int v65 = 1;
  int v52 = 0;
  char v56 = 0;
  uint64_t v57 = 0;
  int v58 = 1;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  unint64_t v51 = &unk_1EC9A3930;
  uint64_t v59 = &v66;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v51, 0, 0, 0);
  uint64_t v6 = (char *)v61[1];
  unsigned int v7 = (char *)v62;
  while (v6 != v7)
  {
    unsigned int v8 = *(const char **)v6;
    size_t v9 = *((void *)v6 + 1);
    v6 += 16;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v51, v8, v9);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v51, (const char *)v60[0], (char *)v60[1] - (char *)v60[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
  unsigned int v10 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v11 = __p[1];
    int v12 = __p[0];
    if (__p[1] != __p[0])
    {
      int v13 = (char *)__p[1];
      do
      {
        unsigned int v15 = (void *)*((void *)v13 - 3);
        v13 -= 24;
        BOOL v14 = v15;
        if (v15)
        {
          *(v11 - 2) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      int v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  if (v61[1])
  {
    *(void **)&long long v62 = v61[1];
    operator delete(v61[1]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  int v16 = *(char **)a1;
  uint64_t v17 = *(char **)(a1 + 8);
  if ((unint64_t)v17 >= *(void *)(a1 + 16))
  {
    unint64_t v18 = std::vector<std::vector<char>>::__emplace_back_slow_path<>((char **)a1);
  }
  else
  {
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    unint64_t v18 = v17 + 24;
    *((void *)v17 + 2) = 0;
  }
  *(void *)(a1 + 8) = v18;
  int v19 = (unsigned char *)*((void *)v18 - 3);
  int64_t v20 = v67;
  uint64_t v21 = v67 + a3;
  if (*((void *)v18 - 1) - (void)v19 < (unint64_t)v67 + a3)
  {
    unsigned int v50 = v16;
    if (v21 < 0) {
      abort();
    }
    unsigned int v22 = (unsigned char *)*((void *)v18 - 2);
    unsigned int v23 = operator new(v67 + a3);
    unint64_t v24 = v22 - v19;
    int v25 = &v23[v22 - v19];
    BOOL v26 = v25;
    if (v22 == v19) {
      goto LABEL_38;
    }
    if (v24 < 8)
    {
      unsigned int v27 = &v23[v22 - v19];
      goto LABEL_35;
    }
    unsigned int v27 = &v23[v22 - v19];
    if ((unint64_t)(v19 - v23) >= 0x20)
    {
      if (v24 < 0x20)
      {
        unint64_t v28 = 0;
        goto LABEL_30;
      }
      unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v29 = (long long *)(v22 - 16);
      int v30 = &v23[v22 - 16 - v19];
      unint64_t v31 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        *int v30 = v32;
        v30 -= 2;
        v29 -= 2;
        v31 -= 32;
      }
      while (v31);
      if (v24 == v28) {
        goto LABEL_37;
      }
      if ((v24 & 0x18) != 0)
      {
LABEL_30:
        unsigned int v27 = &v25[-(v24 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v33 = &v22[-v28 - 8];
        int64_t v34 = v33 - v19;
        unint64_t v35 = v28 - (v24 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v36 = *(void *)v33;
          v33 -= 8;
          *(void *)&v23[v34] = v36;
          v34 -= 8;
          v35 += 8;
        }
        while (v35);
        v22 -= v24 & 0xFFFFFFFFFFFFFFF8;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      unsigned int v27 = &v25[-v28];
      v22 -= v28;
    }
LABEL_35:
    uint64_t v37 = v27 - 1;
    do
    {
      char v38 = *--v22;
      *v37-- = v38;
    }
    while (v22 != v19);
LABEL_37:
    BOOL v26 = v23;
LABEL_38:
    *((void *)v18 - 3) = v26;
    *((void *)v18 - 2) = v25;
    *((void *)v18 - 1) = &v23[v21];
    int v16 = v50;
    if (v19)
    {
      operator delete(v19);
      int64_t v20 = v67;
    }
  }
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)(v18 - 24), *((char **)v18 - 2), v66, &v66[v20], v20);
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)(v18 - 24), *((char **)v18 - 2), a2, &a2[a3], a3);
  unint64_t v39 = (void *)(*((void *)v18 - 2) - *((void *)v18 - 3));
  v60[0] = *((void **)v18 - 3);
  v60[1] = v39;
  v61[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  unint64_t v51 = 0;
  char v40 = llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)(a1 + 88), (uint64_t)v60, &v51);
  uint64_t v41 = v51;
  if ((v40 & 1) == 0)
  {
    unsigned int v48 = llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::InsertIntoBucketImpl<llvm::ArrayRef<char>>(a1 + 88, (uint64_t)v60, (uint64_t)v60, v51);
    *(_OWORD *)unsigned int v48 = *(_OWORD *)v60;
    unsigned int v48[2] = v61[0];
    uint64_t v46 = v48[2];
    BOOL v47 = v66;
    if (v66 == (char *)v68) {
      return v46;
    }
LABEL_46:
    free(v47);
    return v46;
  }
  uint64_t v42 = *(void *)(a1 + 8);
  uint64_t v45 = *(void **)(v42 - 24);
  uint64_t v44 = v42 - 24;
  unsigned int v43 = v45;
  if (v45)
  {
    *(void *)(*(void *)(a1 + 8) - 16) = v43;
    operator delete(v43);
  }
  *(void *)(a1 + 8) = v44;
  uint64_t v46 = v41[2];
  BOOL v47 = v66;
  if (v66 != (char *)v68) {
    goto LABEL_46;
  }
  return v46;
}

char *std::vector<std::vector<char>>::__emplace_back_slow_path<>(char **a1)
{
  unint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((v1 - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - v2) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - v2) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  unsigned int v8 = &v7[24 * v3];
  size_t v9 = &v7[24 * v6];
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  unsigned int v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      uint64_t v11 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v12 = *(_OWORD *)(v1 - 24);
      v1 -= 24;
      *(_OWORD *)(v8 - (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v12;
      v8 -= 24;
      *((void *)v11 - 1) = *((void *)v1 + 2);
      *(void *)unint64_t v1 = 0;
      *((void *)v1 + 1) = 0;
      *((void *)v1 + 2) = 0;
    }
    while (v1 != v2);
    unint64_t v1 = *a1;
    int v13 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v13 != v1)
    {
      BOOL v14 = v13;
      do
      {
        int v16 = (void *)*((void *)v14 - 3);
        v14 -= 24;
        unsigned int v15 = v16;
        if (v16)
        {
          *((void *)v13 - 2) = v15;
          operator delete(v15);
        }
        int v13 = v14;
      }
      while (v14 != v1);
    }
  }
  if (v1) {
    operator delete(v1);
  }
  return v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    goto LABEL_44;
  }
  uint64_t v6 = *a1;
  unsigned int v7 = v4 - 1;
  unsigned int v8 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a2, *(void *)a2 + *(void *)(a2 + 8));
  size_t v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      uint64_t v11 = 0;
      int v22 = 1;
      uint64_t v13 = v6 + 24 * v8;
      unsigned int v23 = *(const void **)v13;
      if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_37;
      }
      while (v23 != (const void *)-1)
      {
        if (v11) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v23 == (const void *)-2;
        }
        if (v24) {
          uint64_t v11 = v13;
        }
        unsigned int v25 = v8 + v22++;
        unsigned int v8 = v25 & v7;
        uint64_t v13 = v6 + 24 * (v25 & v7);
        unsigned int v23 = *(const void **)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_37:
          if (v10 == *(void *)(v13 + 8) && !memcmp(__s1, v23, v10)) {
            goto LABEL_43;
          }
        }
      }
      goto LABEL_40;
    }
    uint64_t v11 = 0;
    int v18 = 1;
    uint64_t v13 = v6 + 24 * v8;
    int v19 = *(const void **)v13;
    if (*(void *)v13 == -2) {
      goto LABEL_21;
    }
LABEL_18:
    if (v19 != (const void *)-1
      && (v10 != *(void *)(v13 + 8) || memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v19, v10)))
    {
LABEL_21:
      while (v19 != (const void *)-1)
      {
        if (v11) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v19 == (const void *)-2;
        }
        if (v20) {
          uint64_t v11 = v13;
        }
        unsigned int v21 = v8 + v18++;
        unsigned int v8 = v21 & v7;
        uint64_t v13 = v6 + 24 * (v21 & v7);
        int v19 = *(const void **)v13;
        if (*(void *)v13 != -2) {
          goto LABEL_18;
        }
      }
      goto LABEL_40;
    }
LABEL_43:
    uint64_t result = 1;
    goto LABEL_44;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  uint64_t v13 = v6 + 24 * v8;
  BOOL v14 = *(const void **)v13;
  if (*(void *)v13 == -1) {
    goto LABEL_7;
  }
LABEL_4:
  if (v14 == (const void *)-2 || v10 == *(void *)(v13 + 8) && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v14, v10)) {
    goto LABEL_43;
  }
LABEL_7:
  while (v14 != (const void *)-1)
  {
    if (v11) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v14 == (const void *)-2;
    }
    if (v15) {
      uint64_t v11 = v13;
    }
    unsigned int v16 = v8 + v12++;
    unsigned int v8 = v16 & v7;
    uint64_t v13 = v6 + 24 * (v16 & v7);
    BOOL v14 = *(const void **)v13;
    if (*(void *)v13 != -1) {
      goto LABEL_4;
    }
  }
LABEL_40:
  uint64_t result = 0;
  if (v11) {
    uint64_t v13 = v11;
  }
LABEL_44:
  *a3 = v13;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<char const>(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v69 = a1;
    unint64_t v3 = 0x1E8EB8000uLL;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v67;
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = *(void *)(v3 + 3024);
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v15 + v12 + v28, 44) + v28 + __ROR8__(v16 + v19 + v13 + v28, 21);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v32 = v24;
    }
    else
    {
      uint64_t v33 = a1 + 15;
      do
      {
        uint64_t v34 = *(v33 - 6);
        uint64_t v35 = __ROR8__(v16 + v27 + v26 + v34, 37);
        uint64_t v37 = *(v33 - 2);
        uint64_t v36 = *(v33 - 1);
        unint64_t v16 = v37 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v36, 42);
        uint64_t v38 = v24 + v30;
        uint64_t v39 = *(v33 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v40 = *(v33 - 4);
        uint64_t v41 = *(v33 - 5);
        uint64_t v42 = v39 + v34 + v41;
        unint64_t v32 = (0xB492B66FBE98F273 * v35) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v38, 33);
        uint64_t v25 = __ROR8__(v42, 44) + v39 + __ROR8__(v32 + v30 + v39 + v40, 21);
        uint64_t v27 = v42 + v40;
        unint64_t v43 = v26 + v29 + *(v33 - 3);
        uint64_t v44 = *v33;
        v33 += 8;
        uint64_t v45 = __ROR8__(v16 + v41 + v43 + v44, 21);
        unint64_t v46 = v37 + v36 + v43;
        uint64_t v29 = v45 + v43 + __ROR8__(v46, 44);
        uint64_t v30 = v46 + v44;
        unint64_t v24 = v32;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v47 = *(void *)(v2 - 56);
      uint64_t v48 = *(void *)(v2 - 16);
      uint64_t v49 = *(void *)(v2 - 8);
      uint64_t v50 = v32 + v30;
      unint64_t v51 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v47, 37)) ^ v29;
      uint64_t v53 = *(void *)(v2 - 32);
      uint64_t v52 = *(void *)(v2 - 24);
      unint64_t v16 = v52 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v48, 42);
      uint64_t v54 = v51 + v30;
      uint64_t v55 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v58 = v2 - 48;
      uint64_t v56 = *(void *)(v2 - 48);
      uint64_t v57 = *(void *)(v58 + 8);
      uint64_t v59 = v55 + v47 + v56;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
      uint64_t v25 = __ROR8__(v59, 44) + v55 + __ROR8__(v54 + v55 + v57, 21);
      uint64_t v27 = v59 + v57;
      unint64_t v60 = v26 + v29 + v53;
      unint64_t v61 = v52 + v48 + v60;
      uint64_t v29 = __ROR8__(v16 + v56 + v60 + v49, 21) + v60 + __ROR8__(v61, 44);
      uint64_t v30 = v61 + v49;
      unint64_t v32 = v51;
    }
    unint64_t v62 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v63 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v62 ^ (v62 >> 47));
    unint64_t v64 = 0x9DDFEA08EB382D69
        * ((v32
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v63);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) >> 47));
  }
  else
  {
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)a1, v5, v4);
  }
}

unint64_t llvm::hashing::detail::hash_short(llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 > 4)
  {
    if (a2 - 9 > 7)
    {
      if (a2 - 17 > 0xF)
      {
        if (a2 < 0x21)
        {
          if (a2)
          {
            unint64_t v32 = (0x9AE16A3B2F90404FLL
                 * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
            return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
          }
          else
          {
            return a3 ^ 0x9AE16A3B2F90404FLL;
          }
        }
        else
        {
          uint64_t v12 = (char *)this + a2;
          uint64_t v13 = *(void *)((char *)this + a2 - 16);
          uint64_t v14 = *(void *)((char *)this + a2 - 8);
          uint64_t v15 = *(void *)this - 0x3C5A37A36834CED9 * (v13 + a2);
          uint64_t v17 = *((void *)this + 2);
          uint64_t v16 = *((void *)this + 3);
          uint64_t v18 = __ROR8__(v15 + v16, 52);
          uint64_t v19 = v15 + *((void *)this + 1);
          uint64_t v20 = __ROR8__(v19, 7);
          uint64_t v21 = v19 + v17;
          uint64_t v22 = v20 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9 * (v13 + a2), 37) + v18;
          uint64_t v23 = *(void *)((char *)this + a2 - 32) + v17;
          uint64_t v24 = __ROR8__(v23 + v14, 52);
          uint64_t v25 = v22 + __ROR8__(v21, 31);
          uint64_t v26 = __ROR8__(v23, 37);
          uint64_t v27 = *((void *)v12 - 3) + v23;
          uint64_t v28 = __ROR8__(v27, 7);
          uint64_t v29 = v27 + v13;
          uint64_t v30 = __ROR8__(v29, 31);
          unint64_t v31 = ((0xC3A5C85C97CB3127
                * ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1
                                                             * (v21 + v16 + v26 + v24 + v28 + v30)) ^ ((0xC3A5C85C97CB3127 * (v29 + v14 + v25) - 0x651E95C4D06FBFB1 * (v21 + v16 + v26 + v24 + v28 + v30)) >> 47))) ^ a3)
              + v25;
          return 0x9AE16A3B2F90404FLL * (v31 ^ (v31 >> 47));
        }
      }
      else
      {
        uint64_t v8 = *((void *)this + 1);
        unint64_t v9 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
        uint64_t v10 = __ROR8__(0xB492B66FBE98F273 * *(void *)this - v8, 43)
            - 0x3C5A37A36834CED9 * *(void *)((char *)this + a2 - 16)
            + __ROR8__(v9 ^ a3, 30);
        unint64_t v11 = a3 + a2 + __ROR8__(v8 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(void *)this - v9;
        return 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(void *)((char *)this + a2 - 8);
      uint64_t v7 = __ROR8__(v6 + a2, a2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                    * (*(void *)this ^ a3 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v7)))) >> 47))) ^ v6;
    }
  }
  else
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  }
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::InsertIntoBucketImpl<llvm::ArrayRef<char>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::grow(a1, v7);
    unint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v18 = result;
      do
      {
        _OWORD *v18 = xmmword_1810FFA60;
        *(_OWORD *)((char *)v18 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            if (*(void *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>,llvm::ArrayRef<char>,long long,llvm::DenseMapInfo<llvm::ArrayRef<char>,void>,llvm::detail::DenseMapPair<llvm::ArrayRef<char>,long long>>::LookupBucketFor<llvm::ArrayRef<char>>((uint64_t *)a1, v21, &v27);
              uint64_t v22 = v27;
              _OWORD *v27 = *(_OWORD *)v21;
              *((void *)v22 + 2) = *(void *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      _OWORD *v12 = xmmword_1810FFA60;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_25:
      uint64_t v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        _OWORD *v15 = xmmword_1810FFA60;
        uint64_t v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v23 = v14 / 0x18 + 1;
    uint64_t v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v25 = result;
    do
    {
      _OWORD *v25 = xmmword_1810FFA60;
      *(_OWORD *)((char *)v25 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::BytecodeOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      unint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v17 = 75;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::bytecode::detail::IRNumberingState::getNumber(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  uint64_t v6 = *((void *)this + 3);
  unint64_t v4 = (char *)this + 24;
  uint64_t v5 = v6;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  if (!v7) {
    goto LABEL_21;
  }
  unsigned int v8 = v7 - 1;
  unsigned int v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = v5 + 16 * v9;
  uint64_t v11 = *(mlir::Operation **)v10;
  if (*(mlir::Operation **)v10 == a2) {
    return **(unsigned int **)(v10 + 8);
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v11 != (mlir::Operation *)-4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v11 == (mlir::Operation *)-8192;
    }
    if (v16) {
      uint64_t v14 = v10;
    }
    unsigned int v17 = v9 + v15++;
    unsigned int v9 = v17 & v8;
    uint64_t v10 = v5 + 16 * (v17 & v8);
    uint64_t v11 = *(mlir::Operation **)v10;
    if (*(mlir::Operation **)v10 == a2) {
      return **(unsigned int **)(v10 + 8);
    }
  }
  if (v14) {
    uint64_t v10 = v14;
  }
  int v18 = *((_DWORD *)this + 8);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *((_DWORD *)this + 9) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  uint64_t v19 = *((void *)this + 3);
  int v20 = *((_DWORD *)this + 10) - 1;
  unsigned int v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = v19 + 16 * v21;
  uint64_t v22 = *(mlir::Operation **)v10;
  if (*(mlir::Operation **)v10 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Operation *)-4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v23 = 0;
  int v24 = 1;
  while (v22 != (mlir::Operation *)-4096)
  {
    if (v23) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v22 == (mlir::Operation *)-8192;
    }
    if (v25) {
      uint64_t v23 = v10;
    }
    unsigned int v26 = v21 + v24++;
    unsigned int v21 = v26 & v20;
    uint64_t v10 = v19 + 16 * (v26 & v20);
    uint64_t v22 = *(mlir::Operation **)v10;
    if (*(mlir::Operation **)v10 == a2) {
      goto LABEL_23;
    }
  }
  if (v23) {
    uint64_t v10 = v23;
  }
LABEL_6:
  uint64_t v13 = *(mlir::Operation **)v10;
  ++*((_DWORD *)this + 8);
  if (v13 != (mlir::Operation *)-4096) {
LABEL_7:
  }
    --*((_DWORD *)this + 9);
LABEL_8:
  *(void *)uint64_t v10 = a2;
  *(void *)(v10 + 8) = 0;
  return **(unsigned int **)(v10 + 8);
}

int *std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::BytecodeWriter::writeUseListOrders(anonymous namespace'::EncodingEmitter &,unsigned char &,mlir::ValueRange)::$_2 &,std::pair<unsigned int,unsigned long long> *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v90 = *((void *)a2 - 1);
                unint64_t v91 = *(void *)(v10 + 8);
                if (v90 > v91)
                {
                  int v92 = *(_DWORD *)v10;
                  *(_DWORD *)unint64_t v10 = *(a2 - 4);
                  *(a2 - 4) = v92;
                  *(void *)(v10 + 8) = v90;
                  *((void *)a2 - 1) = v91;
                }
                return result;
              case 3:
                unint64_t v93 = *(void *)(v10 + 24);
                unint64_t v94 = *(void *)(v10 + 8);
                unint64_t v95 = *((void *)a2 - 1);
                if (v93 <= v94)
                {
                  if (v95 > v93)
                  {
                    int v144 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v144;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v95;
                    *((void *)a2 - 1) = v93;
                    unint64_t v145 = *(void *)(v10 + 24);
                    unint64_t v146 = *(void *)(v10 + 8);
                    if (v145 > v146)
                    {
                      int v147 = *(_DWORD *)v10;
                      *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v147;
                      *(void *)(v10 + 8) = v145;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v146;
                    }
                  }
                }
                else
                {
                  int v96 = *(_DWORD *)v10;
                  if (v95 <= v93)
                  {
                    *(_DWORD *)unint64_t v10 = *(_DWORD *)(v10 + 16);
                    *(_DWORD *)(v10 + 16) = v96;
                    *(void *)(v10 + 8) = v93;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v94;
                    unint64_t v155 = *((void *)a2 - 1);
                    if (v155 <= v94) {
                      return result;
                    }
                    *(_DWORD *)(v10 + 16) = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v155;
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v10 = *(a2 - 4);
                    *(a2 - 4) = v96;
                    *(void *)(v10 + 8) = v95;
                  }
                  *((void *)a2 - 1) = v94;
                }
                break;
              case 4:
                return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), a2 - 4);
              case 5:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)v10, (int *)(v10 + 16), (int *)(v10 + 32), (int *)(v10 + 48));
                unint64_t v97 = *((void *)a2 - 1);
                unint64_t v98 = *(void *)(v10 + 56);
                if (v97 > v98)
                {
                  int v99 = *(_DWORD *)(v10 + 48);
                  *(_DWORD *)(v10 + 48) = *(a2 - 4);
                  *(a2 - 4) = v99;
                  *(void *)(v10 + 56) = v97;
                  *((void *)a2 - 1) = v98;
                  unint64_t v100 = *(void *)(v10 + 56);
                  unint64_t v101 = *(void *)(v10 + 40);
                  if (v100 > v101)
                  {
                    int v102 = *(_DWORD *)(v10 + 32);
                    int v103 = *(_DWORD *)(v10 + 48);
                    *(_DWORD *)(v10 + 32) = v103;
                    *(_DWORD *)(v10 + 48) = v102;
                    *(void *)(v10 + 40) = v100;
                    *(void *)(v10 + 56) = v101;
                    unint64_t v104 = *(void *)(v10 + 24);
                    if (v100 > v104)
                    {
                      int v105 = *(_DWORD *)(v10 + 16);
                      *(_DWORD *)(v10 + 16) = v103;
                      *(_DWORD *)(v10 + 32) = v105;
                      *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v100;
                      *(void *)(v10 + 40) = v104;
                      unint64_t v106 = *(void *)(v10 + 8);
                      if (v100 > v106)
                      {
                        int v107 = *(_DWORD *)v10;
                        *(_DWORD *)unint64_t v10 = v103;
                        *(_DWORD *)(v10 + 16) = v107;
                        *(void *)(v10 + 8) = v100;
                        *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v106;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            unint64_t v108 = (int *)(v10 + 16);
            BOOL v110 = (int *)v10 == a2 || v108 == a2;
            if (a4)
            {
              if (!v110)
              {
                uint64_t v111 = 0;
                unint64_t v112 = (int *)v10;
                do
                {
                  unint64_t v114 = *((void *)v112 + 3);
                  unint64_t v115 = *((void *)v112 + 1);
                  unint64_t v112 = v108;
                  if (v114 > v115)
                  {
                    int v116 = *v108;
                    uint64_t v117 = v111;
                    do
                    {
                      uint64_t v118 = v10 + v117;
                      *(_DWORD *)(v118 + 16) = *(_DWORD *)(v10 + v117);
                      *(void *)(v118 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(void *)(v10 + v117 + 8);
                      if (!v117)
                      {
                        uint64_t v113 = v10;
                        goto LABEL_124;
                      }
                      v117 -= 16;
                    }
                    while (v114 > *(void *)(v118 - 8));
                    uint64_t v113 = v10 + v117 + 16;
LABEL_124:
                    *(_DWORD *)uint64_t v113 = v116;
                    *(void *)(v113 + 8) = v114;
                  }
                  unint64_t v108 = v112 + 4;
                  v111 += 16;
                }
                while (v112 + 4 != a2);
              }
            }
            else if (!v110)
            {
              uint64_t v148 = (unint64_t *)(v10 + 24);
              do
              {
                unint64_t v149 = *(void *)(v9 + 24);
                unint64_t v150 = *(void *)(v9 + 8);
                unint64_t v9 = (unint64_t)v108;
                if (v149 > v150)
                {
                  uint64_t v151 = *(void *)v108;
                  char v152 = v148;
                  do
                  {
                    char v153 = v152;
                    *((_DWORD *)v152 - 2) = *((_DWORD *)v152 - 6);
                    unint64_t v154 = *(v152 - 2);
                    v152 -= 2;
                    *char v153 = v154;
                  }
                  while (v149 > *(v153 - 4));
                  *((_DWORD *)v152 - 2) = v151;
                  *char v152 = v149;
                }
                unint64_t v108 = (int *)(v9 + 16);
                v148 += 2;
              }
              while ((int *)(v9 + 16) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((int *)v10 != a2)
            {
              int64_t v119 = (unint64_t)(v12 - 2) >> 1;
              int64_t v120 = v119;
              do
              {
                if (v119 >= v120)
                {
                  uint64_t v122 = (2 * v120) | 1;
                  unint64_t v123 = v10 + 16 * v122;
                  if (2 * v120 + 2 < v12)
                  {
                    BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                    v123 += 16 * v121;
                    if (v121) {
                      uint64_t v122 = 2 * v120 + 2;
                    }
                  }
                  unint64_t v124 = v10 + 16 * v120;
                  unint64_t v125 = *(void *)(v124 + 8);
                  if (*(void *)(v123 + 8) <= v125)
                  {
                    int v126 = *(_DWORD *)v124;
                    do
                    {
                      unint64_t v127 = v124;
                      unint64_t v124 = v123;
                      *(_DWORD *)unint64_t v127 = *(_DWORD *)v123;
                      *(void *)(v127 + 8) = *(void *)(v123 + 8);
                      if (v119 < v122) {
                        break;
                      }
                      uint64_t v128 = (2 * v122) | 1;
                      unint64_t v123 = v10 + 16 * v128;
                      uint64_t v129 = 2 * v122 + 2;
                      if (v129 < v12)
                      {
                        BOOL v121 = *(void *)(v123 + 8) > *(void *)(v123 + 24);
                        v123 += 16 * v121;
                        if (v121) {
                          uint64_t v128 = v129;
                        }
                      }
                      uint64_t result = *(int **)(v123 + 8);
                      uint64_t v122 = v128;
                    }
                    while ((unint64_t)result <= v125);
                    *(_DWORD *)unint64_t v124 = v126;
                    *(void *)(v124 + 8) = v125;
                  }
                }
                BOOL v121 = v120-- <= 0;
              }
              while (!v121);
              uint64_t v130 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v131 = 0;
                int v132 = *(_DWORD *)v10;
                uint64_t v133 = *(void *)(v10 + 8);
                unint64_t v134 = v10;
                do
                {
                  uint64_t v135 = v134 + 16 * v131 + 16;
                  uint64_t v136 = (2 * v131) | 1;
                  uint64_t v137 = 2 * v131 + 2;
                  if (v137 < v130)
                  {
                    BOOL v121 = *(void *)(v135 + 8) > *(void *)(v135 + 24);
                    v135 += 16 * v121;
                    if (v121) {
                      uint64_t v136 = v137;
                    }
                  }
                  *(_DWORD *)unint64_t v134 = *(_DWORD *)v135;
                  *(void *)(v134 + 8) = *(void *)(v135 + 8);
                  unint64_t v134 = v135;
                  uint64_t v131 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                if ((int *)v135 == a2 - 4)
                {
                  *(_DWORD *)uint64_t v135 = v132;
                  *(void *)(v135 + 8) = v133;
                }
                else
                {
                  *(_DWORD *)uint64_t v135 = *(a2 - 4);
                  *(void *)(v135 + 8) = *((void *)a2 - 1);
                  *(a2 - 4) = v132;
                  *((void *)a2 - 1) = v133;
                  uint64_t v138 = v135 - v10 + 16;
                  if (v138 >= 17)
                  {
                    unint64_t v139 = (((unint64_t)v138 >> 4) - 2) >> 1;
                    uint64_t v140 = v10 + 16 * v139;
                    unint64_t v141 = *(void *)(v135 + 8);
                    if (*(void *)(v140 + 8) > v141)
                    {
                      int v142 = *(_DWORD *)v135;
                      do
                      {
                        uint64_t v143 = v135;
                        uint64_t v135 = v140;
                        *(_DWORD *)uint64_t v143 = *(_DWORD *)v140;
                        *(void *)(v143 + 8) = *(void *)(v140 + 8);
                        if (!v139) {
                          break;
                        }
                        unint64_t v139 = (v139 - 1) >> 1;
                        uint64_t v140 = v10 + 16 * v139;
                      }
                      while (*(void *)(v140 + 8) > v141);
                      *(_DWORD *)uint64_t v135 = v142;
                      *(void *)(v135 + 8) = v141;
                    }
                  }
                }
                a2 -= 4;
                BOOL v121 = v130-- <= 2;
              }
              while (!v121);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          unint64_t v15 = *((void *)a2 - 1);
          if ((unint64_t)v11 < 0x801) {
            break;
          }
          unint64_t v16 = *(void *)(v14 + 8);
          unint64_t v17 = *(void *)(v10 + 8);
          if (v16 <= v17)
          {
            if (v15 > v16)
            {
              int v22 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v22;
              *(void *)(v14 + 8) = v15;
              *((void *)a2 - 1) = v16;
              unint64_t v23 = *(void *)(v14 + 8);
              unint64_t v24 = *(void *)(v10 + 8);
              if (v23 > v24)
              {
                int v25 = *(_DWORD *)v10;
                *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
                *(_DWORD *)unint64_t v14 = v25;
                *(void *)(v10 + 8) = v23;
                *(void *)(v14 + 8) = v24;
              }
            }
          }
          else
          {
            int v18 = *(_DWORD *)v10;
            if (v15 <= v16)
            {
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v18;
              *(void *)(v10 + 8) = v16;
              *(void *)(v14 + 8) = v17;
              unint64_t v31 = *((void *)a2 - 1);
              if (v31 <= v17) {
                goto LABEL_24;
              }
              *(_DWORD *)unint64_t v14 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v14 + 8) = v31;
            }
            else
            {
              *(_DWORD *)unint64_t v10 = *(a2 - 4);
              *(a2 - 4) = v18;
              *(void *)(v10 + 8) = v15;
            }
            *((void *)a2 - 1) = v17;
          }
LABEL_24:
          unint64_t v32 = v10 + 16 * v13;
          unint64_t v33 = v32 - 16;
          unint64_t v34 = *(void *)(v32 - 8);
          unint64_t v35 = *(void *)(v10 + 24);
          unint64_t v36 = *((void *)a2 - 3);
          if (v34 <= v35)
          {
            if (v36 > v34)
            {
              int v38 = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v38;
              *(void *)(v33 + 8) = v36;
              *((void *)a2 - 3) = v34;
              unint64_t v39 = *(void *)(v33 + 8);
              unint64_t v40 = *(void *)(v10 + 24);
              if (v39 > v40)
              {
                int v41 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v41;
                *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v39;
                *(void *)(v33 + 8) = v40;
              }
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 16);
            if (v36 <= v34)
            {
              *(_DWORD *)(v10 + 16) = *(_DWORD *)v33;
              *(_DWORD *)unint64_t v33 = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v34;
              *(void *)(v33 + 8) = v35;
              unint64_t v44 = *((void *)a2 - 3);
              if (v44 <= v35) {
                goto LABEL_38;
              }
              *(_DWORD *)unint64_t v33 = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v33 + 8) = v44;
            }
            else
            {
              *(_DWORD *)(v10 + 16) = *(a2 - 8);
              *(a2 - 8) = v37;
              *(void *)(v10 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v36;
            }
            *((void *)a2 - 3) = v35;
          }
LABEL_38:
          unint64_t v45 = v10 + 16 * v13;
          unint64_t v46 = v45 + 16;
          unint64_t v47 = *(void *)(v45 + 24);
          unint64_t v48 = *(void *)(v10 + 40);
          unint64_t v49 = *((void *)a2 - 5);
          if (v47 <= v48)
          {
            if (v49 > v47)
            {
              int v51 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v51;
              *(void *)(v46 + 8) = v49;
              *((void *)a2 - 5) = v47;
              unint64_t v52 = *(void *)(v46 + 8);
              unint64_t v53 = *(void *)(v10 + 40);
              if (v52 > v53)
              {
                int v54 = *(_DWORD *)(v10 + 32);
                *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v54;
                *(void *)(v10 + 40) = v52;
                *(void *)(v46 + 8) = v53;
              }
            }
          }
          else
          {
            int v50 = *(_DWORD *)(v10 + 32);
            if (v49 <= v47)
            {
              *(_DWORD *)(v10 + 32) = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v50;
              *(void *)(v10 + 40) = v47;
              *(void *)(v46 + 8) = v48;
              unint64_t v55 = *((void *)a2 - 5);
              if (v55 <= v48) {
                goto LABEL_47;
              }
              *(_DWORD *)unint64_t v46 = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v46 + 8) = v55;
            }
            else
            {
              *(_DWORD *)(v10 + 32) = *(a2 - 12);
              *(a2 - 12) = v50;
              *(void *)(v10 + 40) = v49;
            }
            *((void *)a2 - 5) = v48;
          }
LABEL_47:
          unint64_t v56 = *(void *)(v14 + 8);
          unint64_t v57 = *(void *)(v33 + 8);
          unint64_t v58 = *(void *)(v46 + 8);
          if (v56 <= v57)
          {
            int v59 = *(_DWORD *)v14;
            if (v58 > v56)
            {
              int v60 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v14 + 8) = v58;
              *(void *)(v46 + 8) = v56;
              if (v58 <= v57)
              {
                unint64_t v57 = v58;
                int v59 = v60;
              }
              else
              {
                int v59 = *(_DWORD *)v33;
                *(_DWORD *)unint64_t v33 = v60;
                *(_DWORD *)unint64_t v14 = v59;
                *(void *)(v33 + 8) = v58;
                *(void *)(v14 + 8) = v57;
              }
            }
            else
            {
              unint64_t v57 = *(void *)(v14 + 8);
            }
          }
          else
          {
            int v59 = *(_DWORD *)v33;
            if (v58 <= v56)
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v14;
              *(_DWORD *)unint64_t v14 = v59;
              *(void *)(v33 + 8) = v56;
              *(void *)(v14 + 8) = v57;
              if (v58 > v57)
              {
                int v61 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v14 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v59;
                *(void *)(v14 + 8) = v58;
                *(void *)(v46 + 8) = v57;
                unint64_t v57 = v58;
                int v59 = v61;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v33 = *(_DWORD *)v46;
              *(_DWORD *)unint64_t v46 = v59;
              *(void *)(v33 + 8) = v58;
              *(void *)(v46 + 8) = v57;
              int v59 = *(_DWORD *)v14;
              unint64_t v57 = v56;
            }
          }
          int v62 = *(_DWORD *)v10;
          *(_DWORD *)unint64_t v10 = v59;
          *(_DWORD *)unint64_t v14 = v62;
          unint64_t v63 = v10 + 16 * v13;
          uint64_t v64 = *(void *)(v10 + 8);
          *(void *)(v10 + 8) = v57;
          *(void *)(v63 + 8) = v64;
          --a3;
          uint64_t v30 = *(void *)v10;
          if (a4) {
            goto LABEL_34;
          }
LABEL_58:
          unint64_t v43 = *(void *)(v10 + 8);
          if (*(void *)(v10 - 8) > v43) {
            goto LABEL_59;
          }
          if (v43 > *((void *)a2 - 1))
          {
            unint64_t v79 = v10;
            do
            {
              unint64_t v10 = v79 + 16;
              unint64_t v80 = *(void *)(v79 + 24);
              v79 += 16;
            }
            while (v43 <= v80);
          }
          else
          {
            unint64_t v81 = v10 + 16;
            do
            {
              unint64_t v10 = v81;
              if (v81 >= (unint64_t)a2) {
                break;
              }
              unint64_t v82 = *(void *)(v81 + 8);
              v81 += 16;
            }
            while (v43 <= v82);
          }
          int v83 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v84 = a2;
            do
            {
              int v83 = v84 - 4;
              unint64_t v85 = *((void *)v84 - 1);
              v84 -= 4;
            }
            while (v43 > v85);
          }
          while (v10 < (unint64_t)v83)
          {
            int v86 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = *v83;
            int *v83 = v86;
            uint64_t v87 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *((void *)v83 + 1);
            *((void *)v83 + 1) = v87;
            do
            {
              unint64_t v88 = *(void *)(v10 + 24);
              v10 += 16;
            }
            while (v43 <= v88);
            do
            {
              unint64_t v89 = *((void *)v83 - 1);
              v83 -= 4;
            }
            while (v43 > v89);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
            *(void *)(v9 + 8) = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v10 - 16) = v30;
          *(void *)(v10 - 8) = v43;
        }
        unint64_t v19 = *(void *)(v10 + 8);
        unint64_t v20 = *(void *)(v14 + 8);
        if (v19 > v20)
        {
          int v21 = *(_DWORD *)v14;
          if (v15 <= v19)
          {
            *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
            *(_DWORD *)unint64_t v10 = v21;
            *(void *)(v14 + 8) = v19;
            *(void *)(v10 + 8) = v20;
            unint64_t v42 = *((void *)a2 - 1);
            if (v42 <= v20) {
              goto LABEL_33;
            }
            *(_DWORD *)unint64_t v10 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v10 + 8) = v42;
          }
          else
          {
            *(_DWORD *)unint64_t v14 = *(a2 - 4);
            *(a2 - 4) = v21;
            *(void *)(v14 + 8) = v15;
          }
          *((void *)a2 - 1) = v20;
LABEL_33:
          --a3;
          uint64_t v30 = *(void *)v10;
          if ((a4 & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_34;
        }
        if (v15 <= v19) {
          goto LABEL_33;
        }
        int v26 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = *(a2 - 4);
        *(a2 - 4) = v26;
        *(void *)(v10 + 8) = v15;
        *((void *)a2 - 1) = v19;
        unint64_t v27 = *(void *)(v10 + 8);
        unint64_t v28 = *(void *)(v14 + 8);
        if (v27 <= v28) {
          goto LABEL_33;
        }
        int v29 = *(_DWORD *)v14;
        *(_DWORD *)unint64_t v14 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = v29;
        *(void *)(v14 + 8) = v27;
        *(void *)(v10 + 8) = v28;
        --a3;
        uint64_t v30 = *(void *)v10;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_34:
        unint64_t v43 = *(void *)(v10 + 8);
LABEL_59:
        uint64_t v65 = 0;
        do
        {
          unint64_t v66 = *(void *)(v10 + v65 + 24);
          v65 += 16;
        }
        while (v66 > v43);
        unint64_t v67 = v10 + v65;
        uint64_t v68 = a2;
        if (v65 == 16)
        {
          unsigned long long v71 = a2;
          while (v67 < (unint64_t)v71)
          {
            uint64_t v69 = v71 - 4;
            unint64_t v72 = *((void *)v71 - 1);
            v71 -= 4;
            if (v72 > v43) {
              goto LABEL_67;
            }
          }
          uint64_t v69 = v71;
          unint64_t v10 = v67;
        }
        else
        {
          do
          {
            uint64_t v69 = v68 - 4;
            unint64_t v70 = *((void *)v68 - 1);
            v68 -= 4;
          }
          while (v70 <= v43);
LABEL_67:
          unint64_t v10 = v67;
          if (v67 < (unint64_t)v69)
          {
            unint64_t v73 = (unint64_t)v69;
            do
            {
              int v74 = *(_DWORD *)v10;
              *(_DWORD *)unint64_t v10 = *(_DWORD *)v73;
              *(_DWORD *)unint64_t v73 = v74;
              uint64_t v75 = *(void *)(v10 + 8);
              *(void *)(v10 + 8) = *(void *)(v73 + 8);
              *(void *)(v73 + 8) = v75;
              do
              {
                unint64_t v76 = *(void *)(v10 + 24);
                v10 += 16;
              }
              while (v76 > v43);
              do
              {
                unint64_t v77 = *(void *)(v73 - 8);
                v73 -= 16;
              }
              while (v77 <= v43);
            }
            while (v10 < v73);
          }
        }
        if (v10 - 16 != v9)
        {
          *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
          *(void *)(v9 + 8) = *(void *)(v10 - 8);
        }
        *(_DWORD *)(v10 - 16) = v30;
        *(void *)(v10 - 8) = v43;
        if (v67 >= (unint64_t)v69) {
          break;
        }
LABEL_78:
        a4 = 0;
      }
      if (result) {
        break;
      }
      if (!v78) {
        goto LABEL_78;
      }
    }
    a2 = (int *)(v10 - 16);
    if (!v78) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::BytecodeWriter::writeUseListOrders(anonymous namespace'::EncodingEmitter &,unsigned char &,mlir::ValueRange)::$_2 &,std::pair<unsigned int,unsigned long long> *>(uint64_t a1, int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 1);
      unint64_t v7 = *(void *)(a1 + 8);
      if (v6 > v7)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        *(void *)(a1 + 8) = v6;
        *((void *)a2 - 1) = v7;
      }
      return result;
    case 3:
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *((void *)a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(a2 - 4);
          *(a2 - 4) = v30;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v11;
          *((void *)a2 - 1) = v9;
          unint64_t v31 = *(void *)(a1 + 24);
          unint64_t v32 = *(void *)(a1 + 8);
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v33;
            *(void *)(a1 + 8) = v31;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v12;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
          unint64_t v37 = *((void *)a2 - 1);
          if (v37 > v10)
          {
            *(_DWORD *)(a1 + 16) = *(a2 - 4);
            *(a2 - 4) = v12;
            *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v37;
            *((void *)a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *(a2 - 4);
          *(a2 - 4) = v12;
          *(void *)(a1 + 8) = v11;
          *((void *)a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::BytecodeReader::Impl::sortUseListOrder(mlir::Value)::$_2 &,std::pair<unsigned int,unsigned long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (int *)(a1 + 48));
      unint64_t v19 = *((void *)a2 - 1);
      unint64_t v20 = *(void *)(a1 + 56);
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = *(a2 - 4);
      *(a2 - 4) = v21;
      *(void *)(a1 + 56) = v19;
      *((void *)a2 - 1) = v20;
      unint64_t v22 = *(void *)(a1 + 56);
      unint64_t v23 = *(void *)(a1 + 40);
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *(_DWORD *)(a1 + 32);
      int v25 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 48) = v24;
      *(void *)(a1 + 40) = v22;
      *(void *)(a1 + 56) = v23;
      unint64_t v26 = *(void *)(a1 + 24);
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = v27;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v22;
      *(void *)(a1 + 40) = v26;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v22 <= v28) {
        return 1;
      }
      int v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *(_DWORD *)(a1 + 16) = v29;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v28;
      return 1;
    default:
      unint64_t v13 = *(void *)(a1 + 8);
      unint64_t v14 = (unint64_t *)(a1 + 24);
      unint64_t v15 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 40);
      if (v15 > v13)
      {
        int v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v17;
          *(void *)(a1 + 8) = v15;
          *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 24);
        }
        else
        {
          *(_DWORD *)a1 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v17;
          int v18 = (unint64_t *)(a1 + 8);
        }
        unint64_t v14 = (unint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *(_DWORD *)(a1 + 16);
        int v35 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 16) = v35;
        *(_DWORD *)(a1 + 32) = v34;
        *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v16;
        *(void *)(a1 + 40) = v15;
        if (v16 > v13)
        {
          int v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *(_DWORD *)(a1 + 16) = v36;
          int v18 = (unint64_t *)(a1 + 8);
LABEL_29:
          unint64_t *v18 = v16;
          unint64_t *v14 = v13;
        }
      }
LABEL_30:
      int v38 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      int v41 = (int *)(a1 + 32);
      while (1)
      {
        unint64_t v42 = *((void *)v38 + 1);
        if (v42 > *((void *)v41 + 1)) {
          break;
        }
LABEL_39:
        int v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *v38;
      uint64_t v44 = v39;
      do
      {
        uint64_t v45 = a1 + v44;
        *(_DWORD *)(v45 + 48) = *(_DWORD *)(a1 + v44 + 32);
        *(void *)(v45 + 56) = *(void *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          *(void *)(a1 + 8) = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *(void *)(v45 + 24));
      uint64_t v46 = a1 + v44;
      *(_DWORD *)(v46 + 48) = v43;
      *(void *)(v46 + 56) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 4 == a2;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>,unsigned int,llvm::SmallVector<unsigned int,12u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,12u>>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v7 = *(_DWORD **)a1;
    unint64_t v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      unint64_t v9 = *(_DWORD **)a1;
LABEL_7:
      unint64_t v13 = &v7[18 * v6];
      do
      {
        _DWORD *v9 = -1;
        v9 += 18;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x48 + 1;
    unint64_t v9 = &v7[18 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    int v12 = *(_DWORD **)a1;
    do
    {
      _DWORD *v12 = -1;
      v12[18] = -1;
      v12 += 36;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      int v14 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & (37 * v14);
        uint64_t v17 = *(void *)a1 + 72 * v16;
        int v18 = *(_DWORD *)v17;
        if (v14 != *(_DWORD *)v17)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -1)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -2;
            }
            if (v22) {
              uint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = *(void *)a1 + 72 * (v23 & v15);
            int v18 = *(_DWORD *)v17;
            if (v14 == *(_DWORD *)v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        *(_DWORD *)uint64_t v17 = v14;
        *(void *)(v17 + 8) = v17 + 24;
        *(void *)(v17 + 16) = 0xC00000000;
        if (v4[4]) {
          llvm::SmallVectorImpl<unsigned int>::operator=(v17 + 8, (uint64_t)(v4 + 2));
        }
        ++*(_DWORD *)(a1 + 8);
        unint64_t v19 = (int *)*((void *)v4 + 1);
        if (v19 != v4 + 6) {
          free(v19);
        }
      }
      v4 += 18;
    }
    while (v4 != a3);
  }
}

uint64_t anonymous namespace'::BytecodeWriter::writeRegions(anonymous namespace'::EncodingEmitter &,llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::Region&)#1}::operator()(uint64_t *a1, void *a2)
{
  v212[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_anonymous_namespace_::EncodingEmitter *)a1[1];
  if ((void *)*a2 == a2)
  {
    unsigned int v16 = (unsigned char *)*((void *)v2 + 1);
    unint64_t v15 = *((void *)v2 + 2);
    if ((unint64_t)v16 < v15)
    {
      unsigned char *v16 = 1;
      *((void *)v2 + 1) = v16 + 1;
      return 1;
    }
    unint64_t v183 = *(unsigned char **)v2;
    unint64_t v184 = (unint64_t)&v16[-*(void *)v2];
    unint64_t v185 = v184 + 1;
    if ((uint64_t)(v184 + 1) < 0) {
      goto LABEL_306;
    }
    unint64_t v186 = v15 - (void)v183;
    if (2 * v186 > v185) {
      unint64_t v185 = 2 * v186;
    }
    if (v186 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v187 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v187 = v185;
    }
    if (v187) {
      unint64_t v188 = operator new(v187);
    }
    else {
      unint64_t v188 = 0;
    }
    uint64_t v189 = &v188[v184];
    unint64_t v190 = &v188[v187];
    v188[v184] = 1;
    uint64_t v191 = (uint64_t)&v188[v184 + 1];
    if (v16 == v183)
    {
      *(void *)uint64_t v2 = v189;
      *((void *)v2 + 1) = v191;
      *((void *)v2 + 2) = v190;
      if (!v16) {
        goto LABEL_301;
      }
      goto LABEL_300;
    }
    if (v184 < 8 || (unint64_t)(v183 - v188) < 0x20) {
      goto LABEL_297;
    }
    if (v184 >= 0x20)
    {
      unint64_t v192 = v184 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v193 = (long long *)(v16 - 16);
      long long v194 = &v188[v16 - 16 - v183];
      unint64_t v195 = v184 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v196 = *v193;
        *(v194 - 1) = *(v193 - 1);
        _OWORD *v194 = v196;
        v194 -= 2;
        v193 -= 2;
        v195 -= 32;
      }
      while (v195);
      if (v184 == v192)
      {
LABEL_299:
        unsigned int v16 = *(unsigned char **)v2;
        *(void *)uint64_t v2 = v188;
        *((void *)v2 + 1) = v191;
        *((void *)v2 + 2) = v190;
        if (!v16)
        {
LABEL_301:
          *((void *)v2 + 1) = v191;
          return 1;
        }
LABEL_300:
        operator delete(v16);
        goto LABEL_301;
      }
      if ((v184 & 0x18) == 0)
      {
        v189 -= v192;
        v16 -= v192;
        goto LABEL_297;
      }
    }
    else
    {
      unint64_t v192 = 0;
    }
    v189 -= v184 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v197 = &v16[-v192 - 8];
    uint64_t v198 = &v188[v197 - v183];
    unint64_t v199 = v192 - (v184 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v200 = *(void *)v197;
      v197 -= 8;
      *v198-- = v200;
      v199 += 8;
    }
    while (v199);
    v16 -= v184 & 0xFFFFFFFFFFFFFFF8;
    if (v184 == (v184 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_299;
    }
LABEL_297:
    unint64_t v201 = v189 - 1;
    do
    {
      char v202 = *--v16;
      *v201-- = v202;
    }
    while (v16 != v183);
    goto LABEL_299;
  }
  unint64_t v3 = a2;
  uint64_t v4 = *a1;
  v212[0] = (uint64_t)a2;
  int v5 = *(_DWORD *)(v4 + 960);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 944);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v9 = (uint64_t *)(v6 + 16 * v8);
    uint64_t v10 = *v9;
    if ((void *)*v9 == a2) {
      goto LABEL_17;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      unint64_t v9 = (uint64_t *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if ((void *)*v9 == a2) {
        goto LABEL_17;
      }
    }
    if (v11) {
      uint64_t v17 = v11;
    }
    else {
      uint64_t v17 = v9;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  unint64_t v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(v4 + 944, v17, v212);
LABEL_17:
  unint64_t v18 = HIDWORD(v9[1]);
  unint64_t v19 = (void *)v3[1];
  if (v19 == v3) {
    return 1;
  }
  uint64_t v209 = (mlir::bytecode::detail::IRNumberingState *)(v4 + 40);
  uint64_t v203 = v4 + 112;
  uint64_t v205 = v3;
  while (2)
  {
    if (v19) {
      uint64_t v20 = (mlir::Block *)(v19 - 1);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v22 = *((void *)v20 + 6);
    uint64_t v21 = *((void *)v20 + 7);
    unsigned int OperationCount = mlir::bytecode::detail::IRNumberingState::getOperationCount(v209, v20);
    uint64_t v208 = v22;
    uint64_t v24 = v21 - v22;
    if (v21 == v22) {
      goto LABEL_267;
    }
    int64x2_t v206 = v19;
    uint64_t v207 = v20;
    uint64_t v25 = v24 >> 3;
    uint64_t v26 = v22;
    unint64_t v204 = v25;
    uint64_t v210 = v22 + 8 * v25;
    do
    {
      uint64_t v27 = *(void *)(*(void *)v26 + 32);
      unint64_t v28 = *(void *)(*(void *)v26 + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v29 = *(void *)(v4 + 112);
      unsigned int v30 = *(_DWORD *)(v4 + 128);
      if (**(uint64_t **)(v4 + 984) < 4)
      {
        if (!v30) {
          goto LABEL_189;
        }
        unsigned int v39 = v30 - 1;
        unsigned int v40 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
        int v41 = (unint64_t *)(v29 + 16 * v40);
        unint64_t v42 = *v41;
        if (*v41 == v28) {
          goto LABEL_68;
        }
        int v43 = 0;
        int v44 = 1;
        while (v42 != -4096)
        {
          if (v43) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -8192;
          }
          if (v45) {
            int v43 = v41;
          }
          unsigned int v46 = v40 + v44++;
          unsigned int v40 = v46 & v39;
          int v41 = (unint64_t *)(v29 + 16 * (v46 & v39));
          unint64_t v42 = *v41;
          if (*v41 == v28) {
            goto LABEL_68;
          }
        }
        if (v43) {
          int v41 = v43;
        }
        int v136 = *(_DWORD *)(v4 + 120);
        if (4 * v136 + 4 < 3 * v30)
        {
          if (v30 + ~v136 - *(_DWORD *)(v4 + 124) > v30 >> 3) {
            goto LABEL_64;
          }
        }
        else
        {
LABEL_189:
          v30 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v203, v30);
        uint64_t v137 = *(void *)(v4 + 112);
        int v138 = *(_DWORD *)(v4 + 128) - 1;
        unsigned int v139 = v138 & ((v28 >> 4) ^ (v28 >> 9));
        int v41 = (unint64_t *)(v137 + 16 * v139);
        unint64_t v140 = *v41;
        if (*v41 == v28)
        {
          unint64_t v52 = v28;
          goto LABEL_65;
        }
        unint64_t v149 = 0;
        int v150 = 1;
        while (v140 != -4096)
        {
          if (v149) {
            BOOL v151 = 0;
          }
          else {
            BOOL v151 = v140 == -8192;
          }
          if (v151) {
            unint64_t v149 = v41;
          }
          unsigned int v152 = v139 + v150++;
          unsigned int v139 = v152 & v138;
          int v41 = (unint64_t *)(v137 + 16 * (v152 & v138));
          unint64_t v140 = *v41;
          unint64_t v52 = v28;
          if (*v41 == v28) {
            goto LABEL_65;
          }
        }
        if (v149) {
          int v41 = v149;
        }
LABEL_64:
        unint64_t v52 = *v41;
LABEL_65:
        ++*(_DWORD *)(v4 + 120);
        if (v52 != -4096) {
          --*(_DWORD *)(v4 + 124);
        }
        *int v41 = v28;
        v41[1] = 0;
LABEL_68:
        unint64_t v53 = *(unsigned int *)(v41[1] + 8);
        if (v53 > 0x7F)
        {
          unsigned int v57 = *(_DWORD *)(v4 + 56);
          if (!v57) {
            goto LABEL_142;
          }
          goto LABEL_73;
        }
        char v54 = (2 * v53) | 1;
        unint64_t v56 = (unsigned char *)*((void *)v2 + 1);
        unint64_t v55 = *((void *)v2 + 2);
        if ((unint64_t)v56 < v55)
        {
          unsigned char *v56 = v54;
          *((void *)v2 + 1) = v56 + 1;
          unsigned int v57 = *(_DWORD *)(v4 + 56);
          if (!v57) {
            goto LABEL_142;
          }
          goto LABEL_73;
        }
        uint64_t v75 = *(unsigned char **)v2;
        unint64_t v76 = (unint64_t)&v56[-*(void *)v2];
        unint64_t v77 = v76 + 1;
        if ((uint64_t)(v76 + 1) < 0) {
          goto LABEL_306;
        }
        unint64_t v78 = v55 - (void)v75;
        if (2 * v78 > v77) {
          unint64_t v77 = 2 * v78;
        }
        if (v78 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v79 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v79 = v77;
        }
        if (v79)
        {
          unint64_t v80 = (char *)operator new(v79);
          unint64_t v81 = &v80[v76];
          v80[v76] = v54;
          uint64_t v82 = (uint64_t)&v80[v76 + 1];
          if (v56 == v75)
          {
LABEL_139:
            *(void *)uint64_t v2 = v81;
            *((void *)v2 + 1) = v82;
            *((void *)v2 + 2) = &v80[v79];
            if (v56) {
              operator delete(v56);
            }
            *((void *)v2 + 1) = v82;
            unsigned int v57 = *(_DWORD *)(v4 + 56);
            if (!v57)
            {
LABEL_142:
              int v61 = 0;
              int v106 = *(_DWORD *)(v4 + 48);
              if (4 * v106 + 4 < 3 * v57) {
                goto LABEL_143;
              }
              goto LABEL_195;
            }
LABEL_73:
            uint64_t v58 = *(void *)(v4 + 40);
            unsigned int v59 = v57 - 1;
            unsigned int v60 = (v57 - 1) & ((v27 >> 4) ^ (v27 >> 9));
            int v61 = (uint64_t *)(v58 + 16 * v60);
            uint64_t v62 = *v61;
            if (*v61 == v27) {
              goto LABEL_148;
            }
            unint64_t v63 = 0;
            int v64 = 1;
            while (v62 != -4096)
            {
              if (v63) {
                BOOL v65 = 0;
              }
              else {
                BOOL v65 = v62 == -8192;
              }
              if (v65) {
                unint64_t v63 = v61;
              }
              unsigned int v66 = v60 + v64++;
              unsigned int v60 = v66 & v59;
              int v61 = (uint64_t *)(v58 + 16 * (v66 & v59));
              uint64_t v62 = *v61;
              if (*v61 == v27) {
                goto LABEL_148;
              }
            }
            if (v63) {
              int v61 = v63;
            }
            int v106 = *(_DWORD *)(v4 + 48);
            if (4 * v106 + 4 < 3 * v57)
            {
LABEL_143:
              if (v57 + ~v106 - *(_DWORD *)(v4 + 52) > v57 >> 3) {
                goto LABEL_144;
              }
              goto LABEL_196;
            }
LABEL_195:
            v57 *= 2;
LABEL_196:
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v209, v57);
            uint64_t v141 = *(void *)(v4 + 40);
            int v142 = *(_DWORD *)(v4 + 56) - 1;
            unsigned int v143 = v142 & ((v27 >> 4) ^ (v27 >> 9));
            int v61 = (uint64_t *)(v141 + 16 * v143);
            uint64_t v144 = *v61;
            if (*v61 == v27)
            {
              uint64_t v107 = v27;
              goto LABEL_145;
            }
            char v153 = 0;
            int v154 = 1;
            while (v144 != -4096)
            {
              if (v153) {
                BOOL v155 = 0;
              }
              else {
                BOOL v155 = v144 == -8192;
              }
              if (v155) {
                char v153 = v61;
              }
              unsigned int v156 = v143 + v154++;
              unsigned int v143 = v156 & v142;
              int v61 = (uint64_t *)(v141 + 16 * (v156 & v142));
              uint64_t v144 = *v61;
              if (*v61 == v27)
              {
                uint64_t v107 = v27;
                goto LABEL_145;
              }
            }
            if (v153) {
              int v61 = v153;
            }
LABEL_144:
            uint64_t v107 = *v61;
LABEL_145:
            ++*(_DWORD *)(v4 + 48);
            if (v107 != -4096) {
              --*(_DWORD *)(v4 + 52);
            }
            *int v61 = v27;
            v61[1] = 0;
LABEL_148:
            unint64_t v108 = *(unsigned int *)(v61[1] + 8);
            if (v108 > 0x7F)
            {
              goto LABEL_26;
            }
            char v109 = (2 * v108) | 1;
            uint64_t v111 = (unsigned char *)*((void *)v2 + 1);
            unint64_t v110 = *((void *)v2 + 2);
            if ((unint64_t)v111 < v110)
            {
              unsigned char *v111 = v109;
              *((void *)v2 + 1) = v111 + 1;
              goto LABEL_26;
            }
            unint64_t v112 = *(unsigned char **)v2;
            unint64_t v113 = (unint64_t)&v111[-*(void *)v2];
            unint64_t v114 = v113 + 1;
            if ((uint64_t)(v113 + 1) < 0) {
              goto LABEL_306;
            }
            unint64_t v115 = v110 - (void)v112;
            if (2 * v115 > v114) {
              unint64_t v114 = 2 * v115;
            }
            if (v115 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v116 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v116 = v114;
            }
            if (v116)
            {
              uint64_t v117 = (char *)operator new(v116);
              uint64_t v118 = &v117[v113];
              v117[v113] = v109;
              uint64_t v119 = (uint64_t)&v117[v113 + 1];
              if (v111 == v112) {
                goto LABEL_177;
              }
            }
            else
            {
              uint64_t v117 = 0;
              uint64_t v118 = &v111[-*(void *)v2];
              *(unsigned char *)unint64_t v113 = v109;
              uint64_t v119 = v113 + 1;
              if (v111 == v112)
              {
LABEL_177:
                *(void *)uint64_t v2 = v118;
                *((void *)v2 + 1) = v119;
                *((void *)v2 + 2) = &v117[v116];
                if (v111) {
                  operator delete(v111);
                }
                *((void *)v2 + 1) = v119;
                goto LABEL_26;
              }
            }
            if (v113 >= 8 && (unint64_t)(v112 - v117) >= 0x20)
            {
              if (v113 < 0x20)
              {
                unint64_t v120 = 0;
                goto LABEL_169;
              }
              unint64_t v120 = v113 & 0xFFFFFFFFFFFFFFE0;
              BOOL v121 = &v117[v113 - 16];
              uint64_t v122 = (long long *)(v111 - 16);
              unint64_t v123 = v113 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v124 = *v122;
                *((_OWORD *)v121 - 1) = *(v122 - 1);
                *(_OWORD *)BOOL v121 = v124;
                v121 -= 32;
                v122 -= 2;
                v123 -= 32;
              }
              while (v123);
              if (v113 == v120) {
                goto LABEL_176;
              }
              if ((v113 & 0x18) != 0)
              {
LABEL_169:
                v118 -= v113 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v125 = &v117[&v111[-v120] - v112 - 8];
                int v126 = (uint64_t *)&v111[-v120 - 8];
                unint64_t v127 = v120 - (v113 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v128 = *v126--;
                  *(void *)unint64_t v125 = v128;
                  v125 -= 8;
                  v127 += 8;
                }
                while (v127);
                v111 -= v113 & 0xFFFFFFFFFFFFFFF8;
                if (v113 == (v113 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_176;
                }
                goto LABEL_174;
              }
              v118 -= v120;
              v111 -= v120;
            }
LABEL_174:
            uint64_t v129 = v118 - 1;
            do
            {
              char v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v112);
LABEL_176:
            uint64_t v111 = *(unsigned char **)v2;
            uint64_t v118 = v117;
            goto LABEL_177;
          }
        }
        else
        {
          unint64_t v80 = 0;
          unint64_t v81 = &v56[-*(void *)v2];
          *(unsigned char *)unint64_t v76 = v54;
          uint64_t v82 = v76 + 1;
          if (v56 == v75) {
            goto LABEL_139;
          }
        }
        if (v76 >= 8 && (unint64_t)(v75 - v80) >= 0x20)
        {
          if (v76 < 0x20)
          {
            unint64_t v84 = 0;
            goto LABEL_123;
          }
          unint64_t v84 = v76 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v93 = &v80[v76 - 16];
          unint64_t v94 = (long long *)(v56 - 16);
          unint64_t v95 = v76 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v96 = *v94;
            *((_OWORD *)v93 - 1) = *(v94 - 1);
            *(_OWORD *)unint64_t v93 = v96;
            v93 -= 32;
            v94 -= 2;
            v95 -= 32;
          }
          while (v95);
          if (v76 == v84) {
            goto LABEL_138;
          }
          if ((v76 & 0x18) != 0)
          {
LABEL_123:
            v81 -= v76 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v97 = &v80[&v56[-v84] - v75 - 8];
            unint64_t v98 = (uint64_t *)&v56[-v84 - 8];
            unint64_t v99 = v84 - (v76 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v100 = *v98--;
              *(void *)unint64_t v97 = v100;
              v97 -= 8;
              v99 += 8;
            }
            while (v99);
            v56 -= v76 & 0xFFFFFFFFFFFFFFF8;
            if (v76 == (v76 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_138;
            }
            goto LABEL_136;
          }
          v81 -= v84;
          v56 -= v84;
        }
LABEL_136:
        unint64_t v104 = v81 - 1;
        do
        {
          char v105 = *--v56;
          *v104-- = v105;
        }
        while (v56 != v75);
LABEL_138:
        unint64_t v56 = *(unsigned char **)v2;
        unint64_t v81 = v80;
        goto LABEL_139;
      }
      if (!v30) {
        goto LABEL_183;
      }
      unsigned int v31 = v30 - 1;
      unsigned int v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
      int v33 = (unint64_t *)(v29 + 16 * v32);
      unint64_t v34 = *v33;
      if (*v33 == v28) {
        goto LABEL_56;
      }
      int v35 = 0;
      int v36 = 1;
      while (v34 != -4096)
      {
        if (v35) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v34 == -8192;
        }
        if (v37) {
          int v35 = v33;
        }
        unsigned int v38 = v32 + v36++;
        unsigned int v32 = v38 & v31;
        int v33 = (unint64_t *)(v29 + 16 * (v38 & v31));
        unint64_t v34 = *v33;
        if (*v33 == v28) {
          goto LABEL_56;
        }
      }
      if (v35) {
        int v33 = v35;
      }
      int v131 = *(_DWORD *)(v4 + 120);
      if (4 * v131 + 4 < 3 * v30)
      {
        if (v30 + ~v131 - *(_DWORD *)(v4 + 124) > v30 >> 3) {
          goto LABEL_52;
        }
      }
      else
      {
LABEL_183:
        v30 *= 2;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v203, v30);
      uint64_t v132 = *(void *)(v4 + 112);
      int v133 = *(_DWORD *)(v4 + 128) - 1;
      unsigned int v134 = v133 & ((v28 >> 4) ^ (v28 >> 9));
      int v33 = (unint64_t *)(v132 + 16 * v134);
      unint64_t v135 = *v33;
      if (*v33 == v28)
      {
        unint64_t v47 = v28;
        goto LABEL_53;
      }
      unint64_t v145 = 0;
      int v146 = 1;
      while (v135 != -4096)
      {
        if (v145) {
          BOOL v147 = 0;
        }
        else {
          BOOL v147 = v135 == -8192;
        }
        if (v147) {
          unint64_t v145 = v33;
        }
        unsigned int v148 = v134 + v146++;
        unsigned int v134 = v148 & v133;
        int v33 = (unint64_t *)(v132 + 16 * (v148 & v133));
        unint64_t v135 = *v33;
        unint64_t v47 = v28;
        if (*v33 == v28) {
          goto LABEL_53;
        }
      }
      if (v145) {
        int v33 = v145;
      }
LABEL_52:
      unint64_t v47 = *v33;
LABEL_53:
      ++*(_DWORD *)(v4 + 120);
      if (v47 != -4096) {
        --*(_DWORD *)(v4 + 124);
      }
      *int v33 = v28;
      v33[1] = 0;
LABEL_56:
      unint64_t v48 = (*(void *)(*(void *)v27 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) | (2 * *(unsigned int *)(v33[1] + 8));
      if (v48 > 0x7F)
      {
        if (*(_UNKNOWN **)(*(void *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
          goto LABEL_134;
        }
        goto LABEL_26;
      }
      char v49 = (2 * v48) | 1;
      int v51 = (unsigned char *)*((void *)v2 + 1);
      unint64_t v50 = *((void *)v2 + 2);
      if ((unint64_t)v51 < v50)
      {
        *int v51 = v49;
        *((void *)v2 + 1) = v51 + 1;
        if (*(_UNKNOWN **)(*(void *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
          goto LABEL_134;
        }
        goto LABEL_26;
      }
      unint64_t v67 = *(unsigned char **)v2;
      unint64_t v68 = (unint64_t)&v51[-*(void *)v2];
      unint64_t v69 = v68 + 1;
      if ((uint64_t)(v68 + 1) < 0) {
        goto LABEL_306;
      }
      unint64_t v70 = v50 - (void)v67;
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v71 = v69;
      }
      if (!v71)
      {
        unint64_t v72 = 0;
        unint64_t v73 = &v51[-*(void *)v2];
        *(unsigned char *)unint64_t v68 = v49;
        uint64_t v74 = v68 + 1;
        if (v51 == v67) {
          goto LABEL_131;
        }
LABEL_102:
        if (v68 >= 8 && (unint64_t)(v67 - v72) >= 0x20)
        {
          if (v68 < 0x20)
          {
            unint64_t v83 = 0;
            goto LABEL_115;
          }
          unint64_t v83 = v68 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v85 = &v72[v68 - 16];
          int v86 = (long long *)(v51 - 16);
          unint64_t v87 = v68 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v88 = *v86;
            *((_OWORD *)v85 - 1) = *(v86 - 1);
            *(_OWORD *)unint64_t v85 = v88;
            v85 -= 32;
            v86 -= 2;
            v87 -= 32;
          }
          while (v87);
          if (v68 == v83) {
            goto LABEL_130;
          }
          if ((v68 & 0x18) != 0)
          {
LABEL_115:
            v73 -= v68 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v89 = &v72[&v51[-v83] - v67 - 8];
            unint64_t v90 = (uint64_t *)&v51[-v83 - 8];
            unint64_t v91 = v83 - (v68 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v92 = *v90--;
              *(void *)unint64_t v89 = v92;
              v89 -= 8;
              v91 += 8;
            }
            while (v91);
            v51 -= v68 & 0xFFFFFFFFFFFFFFF8;
            if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_130;
            }
            goto LABEL_128;
          }
          v73 -= v83;
          v51 -= v83;
        }
LABEL_128:
        unint64_t v101 = v73 - 1;
        do
        {
          char v102 = *--v51;
          *v101-- = v102;
        }
        while (v51 != v67);
LABEL_130:
        int v51 = *(unsigned char **)v2;
        unint64_t v73 = v72;
        goto LABEL_131;
      }
      unint64_t v72 = (char *)operator new(v71);
      unint64_t v73 = &v72[v68];
      v72[v68] = v49;
      uint64_t v74 = (uint64_t)&v72[v68 + 1];
      if (v51 != v67) {
        goto LABEL_102;
      }
LABEL_131:
      *(void *)uint64_t v2 = v73;
      *((void *)v2 + 1) = v74;
      *((void *)v2 + 2) = &v72[v71];
      if (v51) {
        operator delete(v51);
      }
      *((void *)v2 + 1) = v74;
      if (*(_UNKNOWN **)(*(void *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
      {
LABEL_134:
        unsigned int Number = mlir::bytecode::detail::IRNumberingState::getNumber((uint64_t)v209, v27);
      }
LABEL_26:
      v26 += 8;
    }
    while (v26 != v210);
    unint64_t v3 = v205;
    unint64_t v19 = v206;
    uint64_t v20 = v207;
    if (**(uint64_t **)(v4 + 984) > 2)
    {
      uint64_t v158 = *(unsigned char **)v2;
      unint64_t v157 = (unsigned char *)*((void *)v2 + 1);
      char v211 = 0;
      unint64_t v159 = *((void *)v2 + 2);
      if ((unint64_t)v157 < v159)
      {
        unsigned char *v157 = 0;
        uint64_t v160 = (uint64_t)(v157 + 1);
        goto LABEL_266;
      }
      unint64_t v161 = v157 - v158;
      uint64_t v162 = v157 - v158 + 1;
      if (v162 >= 0)
      {
        unint64_t v163 = v159 - (void)v158;
        if (2 * v163 > v162) {
          uint64_t v162 = 2 * v163;
        }
        if (v163 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v164 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v164 = v162;
        }
        if (v164)
        {
          uint64_t v165 = operator new(v164);
          unint64_t v166 = &v165[v161];
          v165[v161] = 0;
          uint64_t v160 = (uint64_t)&v165[v161 + 1];
          if (v157 != v158) {
            goto LABEL_245;
          }
LABEL_248:
          long long v168 = v157;
          *(void *)uint64_t v2 = v166;
          *((void *)v2 + 1) = v160;
          *((void *)v2 + 2) = &v165[v164];
          if (!v157)
          {
LABEL_266:
            *((void *)v2 + 1) = v160;
            mlir::ValueRange::ValueRange((unint64_t *)v212, v208, v204);
          }
LABEL_265:
          operator delete(v168);
          goto LABEL_266;
        }
        uint64_t v165 = 0;
        unint64_t v166 = (char *)(v157 - v158);
        *(unsigned char *)unint64_t v161 = 0;
        uint64_t v160 = v161 + 1;
        if (v157 == v158) {
          goto LABEL_248;
        }
LABEL_245:
        if (v161 < 8)
        {
          unint64_t v167 = v157;
          goto LABEL_262;
        }
        unint64_t v167 = v157;
        if ((unint64_t)(v158 - v165) < 0x20) {
          goto LABEL_262;
        }
        if (v161 >= 0x20)
        {
          unint64_t v169 = v161 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v170 = &v165[v161 - 16];
          unint64_t v171 = (long long *)(v157 - 16);
          unint64_t v172 = v161 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v173 = *v171;
            *(v170 - 1) = *(v171 - 1);
            *unint64_t v170 = v173;
            v170 -= 2;
            v171 -= 2;
            v172 -= 32;
          }
          while (v172);
          if (v161 != v169)
          {
            if ((v161 & 0x18) == 0)
            {
              v166 -= v169;
              unint64_t v167 = &v157[-v169];
              goto LABEL_262;
            }
            goto LABEL_257;
          }
        }
        else
        {
          unint64_t v169 = 0;
LABEL_257:
          unint64_t v167 = &v157[-(v161 & 0xFFFFFFFFFFFFFFF8)];
          v166 -= v161 & 0xFFFFFFFFFFFFFFF8;
          char v174 = &v165[&v157[-v169] - v158 - 8];
          int v175 = (uint64_t *)&v157[-v169 - 8];
          unint64_t v176 = v169 - (v161 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v177 = *v175--;
            *v174-- = v177;
            v176 += 8;
          }
          while (v176);
          if (v161 != (v161 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_262:
            unint64_t v178 = v166 - 1;
            do
            {
              char v179 = *--v167;
              *v178-- = v179;
            }
            while (v167 != v158);
          }
        }
        long long v168 = *(unsigned char **)v2;
        *(void *)uint64_t v2 = v165;
        *((void *)v2 + 1) = v160;
        *((void *)v2 + 2) = &v165[v164];
        if (!v168) {
          goto LABEL_266;
        }
        goto LABEL_265;
      }
LABEL_306:
      abort();
    }
LABEL_267:
    unint64_t v180 = (mlir::GenericProgramPoint *)*((void *)v20 + 5);
    if (v180 == (mlir::Block *)((char *)v20 + 32))
    {
LABEL_19:
      unint64_t v19 = (void *)v19[1];
      if (v19 == v3) {
        return 1;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v180);
      return 0;
    unint64_t v180 = (mlir::GenericProgramPoint *)*((void *)v180 + 1);
    if (v180 == (mlir::Block *)((char *)v20 + 32)) {
      goto LABEL_19;
    }
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    BOOL v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        BOOL v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 16 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void *llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      BOOL v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        void *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        BOOL v15 = &result[2 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      unsigned int v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v22 = (void *)(*(void *)a1 + 16 * v25);
          uint64_t v26 = *v22;
          if (v23 != *v22)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              uint64_t v22 = (void *)(*(void *)a1 + 16 * (v30 & v24));
              uint64_t v26 = *v22;
              if (v23 == *v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          void *v22 = v23;
          v22[1] = *((void *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        unsigned int v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      void *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[2 * v17];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t mlir::bytecode::detail::IRNumberingState::getOperationCount(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unsigned int v4 = *((_DWORD *)this + 224);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = *((void *)this + 110);
  unsigned int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v5 + 16 * v7;
  unint64_t v9 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2) {
    return *(unsigned int *)(v8 + 8);
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v9 != (mlir::Block *)-4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v9 == (mlir::Block *)-8192;
    }
    if (v14) {
      uint64_t v12 = v8;
    }
    unsigned int v15 = v7 + v13++;
    unsigned int v7 = v15 & v6;
    uint64_t v8 = v5 + 16 * (v15 & v6);
    unint64_t v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2) {
      return *(unsigned int *)(v8 + 8);
    }
  }
  if (v12) {
    uint64_t v8 = v12;
  }
  int v16 = *((_DWORD *)this + 222);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *((_DWORD *)this + 223) > v4 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 880, v4);
  uint64_t v17 = *((void *)this + 110);
  int v18 = *((_DWORD *)this + 224) - 1;
  unsigned int v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v17 + 16 * v19;
  uint64_t v20 = *(mlir::Block **)v8;
  if (*(mlir::Block **)v8 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 222);
    if (a2 == (mlir::Block *)-4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v20 != (mlir::Block *)-4096)
  {
    if (v21) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v20 == (mlir::Block *)-8192;
    }
    if (v23) {
      uint64_t v21 = v8;
    }
    unsigned int v24 = v19 + v22++;
    unsigned int v19 = v24 & v18;
    uint64_t v8 = v17 + 16 * (v24 & v18);
    uint64_t v20 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2) {
      goto LABEL_23;
    }
  }
  if (v21) {
    uint64_t v8 = v21;
  }
LABEL_6:
  uint64_t v11 = *(mlir::Block **)v8;
  ++*((_DWORD *)this + 222);
  if (v11 != (mlir::Block *)-4096) {
LABEL_7:
  }
    --*((_DWORD *)this + 223);
LABEL_8:
  *(void *)uint64_t v8 = a2;
  *(_DWORD *)(v8 + 8) = 0;
  return 0;
}

void anonymous namespace'::BytecodeWriter::writeResourceSection(mlir::Operation *,anonymous namespace'::EncodingEmitter &)::$_1::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(uint64_t ***)(a1 + 8);
  uint64_t v5 = *((unsigned int *)v4 + 2);
  if (v5)
  {
    unsigned int v6 = *v4;
    uint64_t v7 = (uint64_t)&(*v4)[4 * v5];
    uint64_t v38 = v3;
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = v6[1];
      int v11 = *((_DWORD *)v6 + 4);
      unint64_t v12 = v6[3];
      int v13 = *(_anonymous_namespace_::EncodingEmitter **)a1;
      Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue((void *)*v6, v10);
      uint64_t v15 = *(unsigned int *)(v3 + 32);
      *(void *)&long long v39 = v9;
      *((void *)&v39 + 1) = __PAIR64__(HashValue, v10);
      uint64_t v40 = v15;
      uint64_t v16 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v3, &v39, &v40);
      uint64_t v17 = *(_anonymous_namespace_::EncodingEmitter **)a1;
      unsigned int v19 = *(unsigned char **)(*(void *)a1 + 8);
      unint64_t v18 = *(void *)(*(void *)a1 + 16);
      if ((unint64_t)v19 >= v18) {
        break;
      }
      unsigned char *v19 = v11;
      uint64_t v8 = (uint64_t)(v19 + 1);
LABEL_4:
      *((void *)v17 + 1) = v8;
      v6 += 4;
      if (v6 == (uint64_t *)v7) {
        return;
      }
    }
    uint64_t v20 = *(unsigned char **)v17;
    unint64_t v21 = (unint64_t)&v19[-*(void *)v17];
    unint64_t v22 = v21 + 1;
    if ((uint64_t)(v21 + 1) < 0) {
      abort();
    }
    unint64_t v23 = v18 - (void)v20;
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v24 = v22;
    }
    if (v24)
    {
      size_t v25 = v24;
      size_t v24 = (size_t)operator new(v24);
      uint64_t v26 = (unsigned char *)(v24 + v21);
      *(unsigned char *)(v24 + v21) = v11;
      uint64_t v8 = v24 + v21 + 1;
      if (v19 == v20)
      {
LABEL_32:
        *(void *)uint64_t v17 = v26;
        *((void *)v17 + 1) = v8;
        *((void *)v17 + 2) = v24 + v25;
        uint64_t v3 = v38;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_4;
      }
    }
    else
    {
      size_t v25 = 0;
      uint64_t v26 = &v19[-*(void *)v17];
      *(unsigned char *)unint64_t v21 = v11;
      uint64_t v8 = v21 + 1;
      if (v19 == v20) {
        goto LABEL_32;
      }
    }
    if (v21 >= 8 && (unint64_t)&v20[-v24] >= 0x20)
    {
      if (v21 < 0x20)
      {
        unint64_t v27 = 0;
        goto LABEL_24;
      }
      unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFE0;
      int v28 = (_OWORD *)(v24 + v21 - 16);
      BOOL v29 = (long long *)(v19 - 16);
      unint64_t v30 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v31 = *v29;
        *(v28 - 1) = *(v29 - 1);
        *int v28 = v31;
        v28 -= 2;
        v29 -= 2;
        v30 -= 32;
      }
      while (v30);
      if (v21 == v27) {
        goto LABEL_31;
      }
      if ((v21 & 0x18) != 0)
      {
LABEL_24:
        v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v32 = (void *)(v24 + &v19[-v27] - v20 - 8);
        int v33 = (uint64_t *)&v19[-v27 - 8];
        unint64_t v34 = v27 - (v21 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v35 = *v33--;
          *v32-- = v35;
          v34 += 8;
        }
        while (v34);
        v19 -= v21 & 0xFFFFFFFFFFFFFFF8;
        if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      v26 -= v27;
      v19 -= v27;
    }
LABEL_29:
    int v36 = v26 - 1;
    do
    {
      char v37 = *--v19;
      *v36-- = v37;
    }
    while (v19 != v20);
LABEL_31:
    unsigned int v19 = *(unsigned char **)v17;
    uint64_t v26 = (unsigned char *)v24;
    goto LABEL_32;
  }
}

void llvm::function_ref<void ()(llvm::StringRef,mlir::AsmResourceEntryKind)>::callback_fn<anonymous namespace'::BytecodeWriter::writeResourceSection(mlir::Operation *,anonymous namespace'::EncodingEmitter &)::$_0>(void **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = (uint64_t)a1[1];
  uint64_t v6 = (*a1)[9] + (*a1)[1] - **a1;
  uint64_t v7 = v6 - *a1[2];
  uint64_t v8 = *(unsigned int *)(v5 + 8);
  if (v8 >= *(_DWORD *)(v5 + 12))
  {
    v18[0] = a2;
    v18[1] = a3;
    int v19 = a4;
    uint64_t v20 = v7;
    unint64_t v11 = v8 + 1;
    BOOL v12 = *(void *)v5 + 32 * v8 > (unint64_t)v18;
    if (*(void *)v5 <= (unint64_t)v18 && v12)
    {
      uint64_t v17 = (char *)v18 - *(void *)v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v11, 32);
      uint64_t v13 = *(void *)v5;
      BOOL v14 = &v17[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v11, 32);
      uint64_t v13 = *(void *)v5;
      BOOL v14 = (char *)v18;
    }
    uint64_t v15 = (_OWORD *)(v13 + 32 * *(unsigned int *)(v5 + 8));
    long long v16 = *((_OWORD *)v14 + 1);
    _OWORD *v15 = *(_OWORD *)v14;
    v15[1] = v16;
    int v10 = *(_DWORD *)(v5 + 8) + 1;
  }
  else
  {
    uint64_t v9 = *(void *)v5 + 32 * v8;
    *(void *)uint64_t v9 = a2;
    *(void *)(v9 + 8) = a3;
    *(_DWORD *)(v9 + 16) = a4;
    *(void *)(v9 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v7;
    int v10 = v8 + 1;
  }
  *(_DWORD *)(v5 + 8) = v10;
  *a1[2] = v6;
}

void anonymous namespace'::ResourceBuilder::~ResourceBuilder(_anonymous_namespace_::ResourceBuilder *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t anonymous namespace'::ResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v8 = *(void **)(a1 + 8);
    int v10 = (unsigned char *)v8[1];
    unint64_t v9 = v8[2];
    if ((unint64_t)v10 < v9)
    {
      unsigned char *v10 = a4;
      uint64_t v11 = (uint64_t)(v10 + 1);
LABEL_32:
      v8[1] = v11;
      goto LABEL_33;
    }
    BOOL v12 = (unsigned char *)*v8;
    unint64_t v13 = (unint64_t)&v10[-*v8];
    unint64_t v14 = v13 + 1;
    if ((uint64_t)(v13 + 1) < 0) {
      abort();
    }
    unint64_t v15 = v9 - (void)v12;
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = operator new(v16);
      unint64_t v18 = &v17[v13];
      int v19 = &v17[v16];
      v17[v13] = a4;
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      if (v10 != v12)
      {
LABEL_12:
        if (v13 < 8 || (unint64_t)(v12 - v17) < 0x20) {
          goto LABEL_28;
        }
        if (v13 >= 0x20)
        {
          unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v21 = (long long *)(v10 - 16);
          unint64_t v22 = &v17[v10 - 16 - v12];
          unint64_t v23 = v13 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            _OWORD *v22 = v24;
            v22 -= 2;
            v21 -= 2;
            v23 -= 32;
          }
          while (v23);
          if (v13 == v20)
          {
LABEL_30:
            int v10 = (unsigned char *)*v8;
            void *v8 = v17;
            v8[1] = v11;
            void v8[2] = v19;
            if (!v10) {
              goto LABEL_32;
            }
LABEL_31:
            operator delete(v10);
            goto LABEL_32;
          }
          if ((v13 & 0x18) == 0)
          {
            v18 -= v20;
            v10 -= v20;
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v20 = 0;
        }
        v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
        size_t v25 = &v10[-v20 - 8];
        uint64_t v26 = &v17[v25 - v12];
        unint64_t v27 = v20 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v28 = *(void *)v25;
          v25 -= 8;
          *v26-- = v28;
          v27 += 8;
        }
        while (v27);
        v10 -= v13 & 0xFFFFFFFFFFFFFFF8;
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_30;
        }
LABEL_28:
        BOOL v29 = v18 - 1;
        do
        {
          char v30 = *--v10;
          *v29-- = v30;
        }
        while (v10 != v12);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v18 = &v10[-*v8];
      int v19 = 0;
      *(unsigned char *)unint64_t v13 = a4;
      uint64_t v11 = v13 + 1;
      if (v10 != v12) {
        goto LABEL_12;
      }
    }
    void *v8 = v18;
    v8[1] = v11;
    void v8[2] = v19;
    if (!v10) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_33:
  unsigned int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 32);

  return v32(v31, a2, a3, 1);
}

uint64_t anonymous namespace'::ResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    unsigned int v8 = a5;
    int v10 = *(_anonymous_namespace_::EncodingEmitter **)(a1 + 8);
    uint64_t v11 = *(void *)(a1 + 16);
    Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(a4, a5);
    uint64_t v13 = *(unsigned int *)(v11 + 32);
    *(void *)&long long v16 = a4;
    *((void *)&v16 + 1) = __PAIR64__(HashValue, v8);
    uint64_t v17 = v13;
    uint64_t v14 = llvm::MapVector<llvm::CachedHashStringRef,unsigned long,llvm::DenseMap<llvm::CachedHashStringRef,unsigned int,llvm::DenseMapInfo<llvm::CachedHashStringRef,void>,llvm::detail::DenseMapPair<llvm::CachedHashStringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::CachedHashStringRef,unsigned long>,0u>>::try_emplace<unsigned long>(v11, &v16, &v17);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(void *)(a1 + 32), a2, a3, 2);
}

uint64_t anonymous namespace'::ResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v12 = *(void *)(a1 + 8);
    if (*(void *)v12 != *(void *)(v12 + 8))
    {
      uint64_t v13 = *(void **)(v12 + 56);
      if ((unint64_t)v13 >= *(void *)(v12 + 64))
      {
        uint64_t v14 = std::vector<std::vector<unsigned char>>::__emplace_back_slow_path<std::vector<unsigned char>>((char **)(v12 + 48), v12);
      }
      else
      {
        void *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
        v13[2] = *(void *)(v12 + 16);
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        uint64_t v14 = (char *)(v13 + 3);
      }
      *(void *)(v12 + 56) = v14;
    }
  }
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);

  return v16(v15, a2, a3, 0);
}

void mlir::bytecode::detail::IRNumberingState::~IRNumberingState(llvm **this)
{
}

void sub_18037F1E4()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 880), (void *)(16 * *(unsigned int *)(v0 + 896)));
}

void sub_18037F1F8()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 856), (void *)(16 * *(unsigned int *)(v0 + 872)));
}

void sub_18037F20C()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 832), (void *)(16 * *(unsigned int *)(v0 + 848)));
}

void sub_18037F220()
{
  if (*(_DWORD *)(v0 + 808)) {
    llvm::deallocate_buffer(**(llvm ***)(v0 + 800), *(void **)(*(void *)(v0 + 800) + 8));
  }
  *(_DWORD *)(v0 + 808) = 0;
  int v1 = *(_DWORD *)(v0 + 760);
  if (v1)
  {
    *(void *)(v0 + 816) = 0;
    uint64_t v2 = *(uint64_t **)(v0 + 752);
    uint64_t v3 = *v2;
    *(void *)(v0 + 736) = *v2;
    *(void *)(v0 + 744) = v3 + 4096;
    if (v1 != 1)
    {
      unint64_t v4 = (((unint64_t)v2 - *(void *)(v0 + 752) + 8) >> 10) & 0x1FFFFFF;
      if (v4 >= 0x1E) {
        LOBYTE(v4) = 30;
      }
      llvm::deallocate_buffer((llvm *)v2[1], (void *)(4096 << v4));
    }
    *(_DWORD *)(v0 + 760) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 736);
  llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectResourceNumbering>::DestroyAll(v0 + 640);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 640);
  if (*(_DWORD *)(v0 + 616)) {
    llvm::deallocate_buffer(**(llvm ***)(v0 + 608), *(void **)(*(void *)(v0 + 608) + 8));
  }
  *(_DWORD *)(v0 + 616) = 0;
  int v5 = *(_DWORD *)(v0 + 568);
  if (v5)
  {
    *(void *)(v0 + 6(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
    uint64_t v6 = *(uint64_t **)(v0 + 560);
    uint64_t v7 = *v6;
    *(void *)(v0 + 544) = *v6;
    *(void *)(v0 + 552) = v7 + 4096;
    if (v5 != 1)
    {
      unint64_t v8 = (((unint64_t)v6 - *(void *)(v0 + 560) + 8) >> 10) & 0x1FFFFFF;
      if (v8 >= 0x1E) {
        LOBYTE(v8) = 30;
      }
      llvm::deallocate_buffer((llvm *)v6[1], (void *)(4096 << v8));
    }
    *(_DWORD *)(v0 + 568) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 544);
  if (*(_DWORD *)(v0 + 520)) {
    llvm::deallocate_buffer(**(llvm ***)(v0 + 512), *(void **)(*(void *)(v0 + 512) + 8));
  }
  *(_DWORD *)(v0 + 520) = 0;
  int v9 = *(_DWORD *)(v0 + 472);
  if (v9)
  {
    *(void *)(v0 + 528) = 0;
    uint64_t v10 = *(void *)(v0 + 464);
    uint64_t v11 = *(void *)v10 + 4096;
    *(void *)(v0 + 448) = *(void *)v10;
    *(void *)(v0 + 456) = v11;
    if (v9 != 1)
    {
      unint64_t v12 = ((unint64_t)(v10 + 8 - *(void *)(v0 + 464)) >> 10) & 0x1FFFFFF;
      if (v12 >= 0x1E) {
        LOBYTE(v12) = 30;
      }
      llvm::deallocate_buffer(*(llvm **)(v10 + 8), (void *)(4096 << v12));
    }
    *(_DWORD *)(v0 + 472) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 448);
  llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectNumbering>::DestroyAll(v0 + 352);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 352);
  if (*(_DWORD *)(v0 + 328)) {
    llvm::deallocate_buffer(**(llvm ***)(v0 + 320), *(void **)(*(void *)(v0 + 320) + 8));
  }
  *(_DWORD *)(v0 + 328) = 0;
  int v13 = *(_DWORD *)(v0 + 280);
  if (v13)
  {
    *(void *)(v0 + 336) = 0;
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)v14 + 4096;
    *(void *)(v0 + 256) = *(void *)v14;
    *(void *)(v0 + 264) = v15;
    if (v13 != 1)
    {
      unint64_t v16 = ((unint64_t)(v14 + 8 - *(void *)(v0 + 272)) >> 10) & 0x1FFFFFF;
      if (v16 >= 0x1E) {
        LOBYTE(v16) = 30;
      }
      llvm::deallocate_buffer(*(llvm **)(v14 + 8), (void *)(4096 << v16));
    }
    *(_DWORD *)(v0 + 280) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 256);
  llvm::deallocate_buffer(*(llvm **)(v0 + 232), (void *)(32 * *(unsigned int *)(v0 + 248)));
}

void sub_18037F504()
{
  int v1 = *(void **)(v0 + 208);
  if (v1)
  {
    *(void *)(v0 + 216) = v1;
    operator delete(v1);
  }
  uint64_t v2 = *(void **)(v0 + 184);
  if (v2)
  {
    *(void *)(v0 + 192) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(v0 + 160);
  if (v3)
  {
    *(void *)(v0 + 168) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(v0 + 144);
  if (v4 != (void *)(v0 + 160)) {
    free(v4);
  }
  llvm::deallocate_buffer(*(llvm **)(v0 + 120), (void *)(24 * *(unsigned int *)(v0 + 136)));
}

void sub_18037F560()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 96), (void *)(16 * *(unsigned int *)(v0 + 112)));
}

void sub_18037F574()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 72), (void *)(16 * *(unsigned int *)(v0 + 88)));
}

void sub_18037F588()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 48), (void *)(16 * *(unsigned int *)(v0 + 64)));
}

void sub_18037F59C()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_18037F5B0()
{
  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_18037F5C4()
{
  return v0;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)) {
    llvm::deallocate_buffer(**(llvm ***)(a1 + 16), (void *)0x1000);
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(_DWORD *)(a1 + 72)) {
    llvm::deallocate_buffer(*(llvm **)v2, *(void **)(v2 + 8));
  }
  if (v2 != a1 + 80) {
    free(*(void **)(a1 + 64));
  }
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32)) {
    free(v3);
  }
  return a1;
}

void llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectResourceNumbering>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    unint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      for (unint64_t i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0) {
          operator delete(*(void **)(i - 32));
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  if (v10)
  {
    uint64_t v11 = *(void **)(a1 + 64);
    unint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = *v11 + v11[1];
      for (unint64_t j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0) {
          operator delete(*(void **)(j - 32));
        }
      }
      v11 += 2;
    }
    while (v11 != v12);
    if (*(_DWORD *)(a1 + 72)) {
      llvm::deallocate_buffer(**(llvm ***)(a1 + 64), *(void **)(*(void *)(a1 + 64) + 8));
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  int v15 = *(_DWORD *)(a1 + 24);
  if (v15)
  {
    *(void *)(a1 + 80) = 0;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)v16 + 4096;
    *(void *)a1 = *(void *)v16;
    *(void *)(a1 + 8) = v17;
    if (v15 != 1)
    {
      unint64_t v18 = ((unint64_t)(v16 + 8 - *(void *)(a1 + 16)) >> 10) & 0x1FFFFFF;
      if (v18 >= 0x1E) {
        LOBYTE(v18) = 30;
      }
      llvm::deallocate_buffer(*(llvm **)(v16 + 8), (void *)(4096 << v18));
    }
    *(_DWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  }
}

uint64_t llvm::SpecificBumpPtrAllocator<mlir::bytecode::detail::DialectNumbering>::DestroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(result + 16);
    uint64_t v3 = &v2[v1];
    do
    {
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v5 = *v2;
      if (*v2 == *(void *)(v4 + 8 * *(unsigned int *)(result + 24) - 8))
      {
        unint64_t v7 = *(void *)result;
      }
      else
      {
        uint64_t v6 = (((unint64_t)v2 - v4) >> 10) & 0x1FFFFFF;
        if (v6 >= 0x1E) {
          LOBYTE(v6) = 30;
        }
        unint64_t v7 = v5 + (4096 << v6);
      }
      unint64_t v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      int v9 = (llvm **)(v8 + 120);
      if (v8 + 120 <= v7)
      {
        uint64_t v10 = *(llvm ***)(v8 + 104);
        if (v9 != v10) {
          free(v10);
        }
        llvm::deallocate_buffer(*(v9 - 5), (void *)(24 * *((unsigned int *)v9 - 6)));
      }
      ++v2;
    }
    while (v2 != v3);
  }
  uint64_t v11 = *(unsigned int *)(result + 72);
  if (v11)
  {
    unint64_t v12 = *(void **)(result + 64);
    unint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = (*v12 + 7) & 0xFFFFFFFFFFFFFFF8;
      int v15 = (llvm **)(v14 + 120);
      if (v14 + 120 <= *v12 + v12[1])
      {
        uint64_t v16 = *(llvm ***)(v14 + 104);
        if (v15 != v16) {
          free(v16);
        }
        llvm::deallocate_buffer(*(v15 - 5), (void *)(24 * *((unsigned int *)v15 - 6)));
      }
      v12 += 2;
    }
    while (v12 != v13);
    if (*(_DWORD *)(result + 72)) {
      llvm::deallocate_buffer(**(llvm ***)(result + 64), *(void **)(*(void *)(result + 64) + 8));
    }
  }
  *(_DWORD *)(result + 72) = 0;
  int v17 = *(_DWORD *)(result + 24);
  if (v17)
  {
    *(void *)(result + 80) = 0;
    uint64_t v18 = *(void *)(result + 16);
    uint64_t v19 = *(void *)v18 + 4096;
    *(void *)BOOL result = *(void *)v18;
    *(void *)(result + 8) = v19;
    if (v17 != 1)
    {
      unint64_t v20 = ((unint64_t)(v18 + 8 - *(void *)(result + 16)) >> 10) & 0x1FFFFFF;
      if (v20 >= 0x1E) {
        LOBYTE(v20) = 30;
      }
      llvm::deallocate_buffer(*(llvm **)(v18 + 8), (void *)(4096 << v20));
    }
    *(_DWORD *)(result + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  }
  return result;
}

void mlir::BytecodeWriterConfig::Impl::~Impl(mlir::BytecodeWriterConfig::Impl *this)
{
  uint64_t v2 = (char *)*((void *)this + 23);
  uint64_t v3 = *((unsigned int *)this + 48);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 23);
  }
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  unint64_t v7 = (char *)*((void *)this + 15);
  uint64_t v8 = *((unsigned int *)this + 32);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = v7 - 8;
    do
    {
      uint64_t v11 = *(void *)&v10[v9];
      *(void *)&v10[v9] = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      v9 -= 8;
    }
    while (v9);
    unint64_t v7 = (char *)*((void *)this + 15);
  }
  if (v7 != (char *)this + 136) {
    free(v7);
  }
  unint64_t v12 = (char *)*((void *)this + 7);
  uint64_t v13 = *((unsigned int *)this + 16);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    int v15 = v12 - 8;
    do
    {
      uint64_t v16 = *(void *)&v15[v14];
      *(void *)&v15[v14] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      v14 -= 8;
    }
    while (v14);
    unint64_t v12 = (char *)*((void *)this + 7);
  }
  if (v12 != (char *)this + 72) {
    free(v12);
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v17 = *((unsigned int *)this + 6);
    if (v17)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = *(llvm **)(*((void *)this + 2) + v18);
        if (v19 != (llvm *)-8 && v19 != 0)
        {
          uint64_t v22 = *(void *)v19;
          uint64_t v21 = *((void *)v19 + 1);
          *((void *)v19 + 1) = 0;
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          llvm::deallocate_buffer(v19, (void *)(v22 + 17));
        }
        v18 += 8;
      }
      while (8 * v17 != v18);
    }
  }
  free(*((void **)this + 2));
}

mlir::bytecode::detail::IRNumberingState *mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2, const mlir::BytecodeWriterConfig *a3)
{
  v171[16] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
  uint64_t v5 = (char *)this + 24;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 18) = (char *)this + 160;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 62) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 34) = (char *)this + 288;
  *((void *)this + 35) = 0x400000000;
  *((void *)this + 40) = (char *)this + 336;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = (char *)this + 384;
  *((void *)this + 47) = 0x400000000;
  *((void *)this + 52) = (char *)this + 432;
  *(_OWORD *)((char *)this + 4(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = (char *)this + 480;
  *((void *)this + 59) = 0x400000000;
  *((void *)this + 64) = (char *)this + 528;
  *((void *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((void *)this + 70) = (char *)this + 576;
  *((void *)this + 71) = 0x400000000;
  *((void *)this + 76) = (char *)this + 624;
  *((void *)this + 81) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 82) = (char *)this + 672;
  *((void *)this + 83) = 0x400000000;
  *((void *)this + 88) = (char *)this + 720;
  *((void *)this + 93) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((void *)this + 94) = (char *)this + 768;
  *((void *)this + 95) = 0x400000000;
  *((void *)this + 100) = (char *)this + 816;
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_DWORD *)this + 2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_DWORD *)this + 230) = 0;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 232) = 0;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 8(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((void *)this + 117) = a3;
  LODWORD(v166) = 0;
  unint64_t v169 = v171;
  uint64_t v170 = 0x200000000;
  *(void *)&long long v163 = &v169;
  *((void *)&v163 + 1) = this;
  size_t v164 = (mlir::GenericProgramPoint *)&v166;
  mlir::detail::walk((uint64_t)a2, (void (*)(uint64_t, uint64_t, int *))llvm::function_ref<void ()(mlir::Operation *,mlir::WalkStage const&)>::callback_fn<mlir::bytecode::detail::IRNumberingState::computeGlobalNumberingState(mlir::Operation *)::$_0>, (uint64_t)&v163);
  if (v169 != v171) {
    free(v169);
  }
  mlir::bytecode::detail::IRNumberingState::number(this, a2);
  unint64_t v169 = v171;
  uint64_t v170 = 0x800000000;
  uint64_t v162 = a2;
  unint64_t v6 = *((unsigned int *)a2 + 11);
  uint64_t v7 = v6 & 0x7FFFFF;
  if ((v6 & 0x7FFFFF) == 0) {
    goto LABEL_64;
  }
  unint64_t v8 = (((unint64_t)a2 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)a2 + 10);
  if (mlir::bytecode::detail::IRNumberingState::isIsolatedFromAbove(this, v162)) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = *((_DWORD *)this + 232);
  }
  unsigned int v10 = v170;
  uint64_t v11 = 24 * v7;
  unint64_t v12 = v8;
  do
  {
    while (v10 < HIDWORD(v170))
    {
      uint64_t v13 = (char *)v169 + 16 * v10;
      *(void *)uint64_t v13 = v12;
      *((_DWORD *)v13 + 2) = v9;
      LODWORD(v170) = ++v10;
      v12 += 24;
      v8 += 24;
      v11 -= 24;
      if (!v11) {
        goto LABEL_12;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v10 + 1, 16);
    uint64_t v14 = (unint64_t *)((char *)v169 + 16 * v170);
    unint64_t *v14 = v8;
    v14[1] = v9;
    unsigned int v10 = v170 + 1;
    LODWORD(v170) = v170 + 1;
    v12 += 24;
    v8 += 24;
    v11 -= 24;
  }
  while (v11);
LABEL_12:
  if (!v10) {
    goto LABEL_64;
  }
  while (2)
  {
    int v15 = (char *)v169 + 16 * v10;
    uint64_t v17 = (mlir::Region *)*((void *)v15 - 2);
    uint64_t v16 = *((void *)v15 - 1);
    LODWORD(v170) = v10 - 1;
    *((_DWORD *)this + 232) = v16;
    mlir::bytecode::detail::IRNumberingState::number(this, v17);
    mlir::Region::OpIterator::OpIterator(&v166, v17, 0);
    mlir::Region::OpIterator::OpIterator(v165, v17, 1);
    uint64_t v18 = v167;
    size_t v164 = v167;
    long long v163 = v166;
    uint64_t v19 = (mlir::GenericProgramPoint *)v165[2];
    while (v18 != v19)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v18);
      unint64_t v21 = *(unsigned int *)(v20 + 44);
      if ((v21 & 0x7FFFFF) == 0) {
        goto LABEL_16;
      }
      uint64_t v22 = v20;
      uint64_t v23 = *(unsigned int *)(v20 + 40);
      unsigned int v24 = *((_DWORD *)this + 10);
      if (!v24) {
        goto LABEL_48;
      }
      uint64_t v25 = *((void *)this + 3);
      unsigned int v26 = v24 - 1;
      unsigned int v27 = (v24 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      uint64_t v28 = (void *)(v25 + 16 * v27);
      uint64_t v29 = *v28;
      if (*v28 != v20)
      {
        char v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            char v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          uint64_t v28 = (void *)(v25 + 16 * (v33 & v26));
          uint64_t v29 = *v28;
          if (*v28 == v20) {
            goto LABEL_35;
          }
        }
        if (v30) {
          uint64_t v28 = v30;
        }
        int v43 = *((_DWORD *)this + 8);
        if (4 * v43 + 4 < 3 * v24)
        {
          if (v24 + ~v43 - *((_DWORD *)this + 9) <= v24 >> 3) {
            goto LABEL_49;
          }
        }
        else
        {
LABEL_48:
          v24 *= 2;
LABEL_49:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v5, v24);
          uint64_t v44 = *((void *)this + 3);
          int v45 = *((_DWORD *)this + 10) - 1;
          unsigned int v46 = v45 & ((v22 >> 4) ^ (v22 >> 9));
          uint64_t v28 = (void *)(v44 + 16 * v46);
          uint64_t v47 = *v28;
          if (*v28 == v22)
          {
LABEL_50:
            ++*((_DWORD *)this + 8);
            if (v22 == -4096) {
              goto LABEL_34;
            }
LABEL_33:
            --*((_DWORD *)this + 9);
LABEL_34:
            *uint64_t v28 = v22;
            v28[1] = 0;
            goto LABEL_35;
          }
          unint64_t v48 = 0;
          int v49 = 1;
          while (v47 != -4096)
          {
            if (v48) {
              BOOL v50 = 0;
            }
            else {
              BOOL v50 = v47 == -8192;
            }
            if (v50) {
              unint64_t v48 = v28;
            }
            unsigned int v51 = v46 + v49++;
            unsigned int v46 = v51 & v45;
            uint64_t v28 = (void *)(v44 + 16 * (v51 & v45));
            uint64_t v47 = *v28;
            if (*v28 == v22) {
              goto LABEL_50;
            }
          }
          if (v48) {
            uint64_t v28 = v48;
          }
        }
        uint64_t v34 = *v28;
        ++*((_DWORD *)this + 8);
        if (v34 != -4096) {
          goto LABEL_33;
        }
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v35 = v28[1];
      if (*(unsigned char *)(v35 + 5) && *(unsigned char *)(v35 + 4)) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = *((unsigned int *)this + 232);
      }
      unint64_t v37 = ((v22 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v23;
      unsigned int v38 = v170;
      uint64_t v39 = 24 * (v21 & 0x7FFFFF);
      unint64_t v40 = v37;
      do
      {
        while (v38 < HIDWORD(v170))
        {
          int v41 = (char *)v169 + 16 * v38;
          *(void *)int v41 = v37;
          *((_DWORD *)v41 + 2) = v36;
          LODWORD(v170) = ++v38;
          v37 += 24;
          v40 += 24;
          v39 -= 24;
          if (!v39) {
            goto LABEL_16;
          }
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v171, v38 + 1, 16);
        unint64_t v42 = (unint64_t *)((char *)v169 + 16 * v170);
        *unint64_t v42 = v40;
        v42[1] = v36;
        unsigned int v38 = v170 + 1;
        LODWORD(v170) = v170 + 1;
        v37 += 24;
        v40 += 24;
        v39 -= 24;
      }
      while (v39);
LABEL_16:
      mlir::Region::OpIterator::operator++((uint64_t *)&v166);
      uint64_t v18 = v167;
    }
    unsigned int v10 = v170;
    if (v170) {
      continue;
    }
    break;
  }
LABEL_64:
  unsigned int v52 = *((_DWORD *)this + 38);
  if (v52)
  {
    uint64_t v53 = *((void *)this + 18);
    unint64_t v54 = 24 * v52 - 24;
    if (v54 < 0x18)
    {
      LODWORD(v55) = 0;
      uint64_t v56 = *((void *)this + 18);
      goto LABEL_70;
    }
    uint64_t v57 = 0;
    unint64_t v58 = v54 / 0x18 + 1;
    uint64_t v55 = v58 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v56 = v53 + 24 * (v58 & 0x1FFFFFFFFFFFFFFELL);
    unsigned int v59 = (uint64_t *)(v53 + 40);
    do
    {
      uint64_t v60 = *(v59 - 3);
      uint64_t v61 = *v59;
      v59 += 6;
      *(_DWORD *)(v60 + 16) = v57;
      *(_DWORD *)(v61 + 16) = v57 + 1;
      v57 += 2;
    }
    while (v55 != v57);
    if (v58 != v55)
    {
LABEL_70:
      uint64_t v62 = v53 + 24 * v52;
      do
      {
        *(_DWORD *)(*(void *)(v56 + 16) + 16) = v55;
        LODWORD(v55) = v55 + 1;
        v56 += 24;
      }
      while (v56 != v62);
    }
  }
  int v64 = (char *)*((void *)this + 20);
  unint64_t v63 = (char *)*((void *)this + 21);
  if (v63 - v64 < 1025)
  {
LABEL_76:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v64, v63, (v63 - v64) >> 3, 0, 0);
    unint64_t v70 = (char *)*((void *)this + 23);
    unint64_t v69 = (char *)*((void *)this + 24);
    unint64_t v71 = (v69 - v70) >> 3;
    if (v69 - v70 >= 1025) {
      goto LABEL_79;
    }
LABEL_82:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v70, v69, v71, 0, 0);
    unint64_t v76 = v162;
    unint64_t v78 = (char *)*((void *)this + 26);
    unint64_t v77 = (char *)*((void *)this + 27);
    unint64_t v79 = (v77 - v78) >> 3;
    if (v77 - v78 < 1025) {
      goto LABEL_88;
    }
LABEL_83:
    unint64_t v80 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v81 = v79;
    while (1)
    {
      uint64_t v82 = (char *)operator new(8 * v81, v80);
      if (v82) {
        break;
      }
      BOOL v68 = v81 > 1;
      v81 >>= 1;
      if (!v68)
      {
        __n128 v83 = std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, 0, 0);
        goto LABEL_91;
      }
    }
    unint64_t v87 = v82;
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, v82, v81);
    operator delete(v87);
LABEL_91:
    unint64_t v76 = v162;
    unint64_t v85 = (char *)*((void *)this + 20);
    uint64_t v86 = *((void *)this + 21) - (void)v85;
    if (v86) {
      goto LABEL_92;
    }
    goto LABEL_109;
  }
  BOOL v65 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v66 = (v63 - v64) >> 3;
  while (1)
  {
    unint64_t v67 = (char *)operator new(8 * v66, v65);
    if (v67) {
      break;
    }
    BOOL v68 = v66 > 1;
    v66 >>= 1;
    if (!v68) {
      goto LABEL_76;
    }
  }
  unint64_t v72 = v67;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v64, v63, (v63 - v64) >> 3, v67, v66);
  operator delete(v72);
  unint64_t v70 = (char *)*((void *)this + 23);
  unint64_t v69 = (char *)*((void *)this + 24);
  unint64_t v71 = (v69 - v70) >> 3;
  if (v69 - v70 < 1025) {
    goto LABEL_82;
  }
LABEL_79:
  unint64_t v73 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v74 = v71;
  while (1)
  {
    uint64_t v75 = (char *)operator new(8 * v74, v73);
    if (v75) {
      break;
    }
    BOOL v68 = v74 > 1;
    v74 >>= 1;
    if (!v68) {
      goto LABEL_82;
    }
  }
  unint64_t v84 = v75;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v70, v69, v71, v75, v74);
  operator delete(v84);
  unint64_t v76 = v162;
  unint64_t v78 = (char *)*((void *)this + 26);
  unint64_t v77 = (char *)*((void *)this + 27);
  unint64_t v79 = (v77 - v78) >> 3;
  if (v77 - v78 >= 1025) {
    goto LABEL_83;
  }
LABEL_88:
  __n128 v83 = std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(v78, v77, v79, 0, 0);
  unint64_t v85 = (char *)*((void *)this + 20);
  uint64_t v86 = *((void *)this + 21) - (void)v85;
  if (!v86) {
    goto LABEL_109;
  }
LABEL_92:
  unint64_t v88 = 0;
  uint64_t v156 = v86;
  unint64_t v89 = v86 >> 3;
  LODWORD(v166) = 0;
  unint64_t v90 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  uint64_t v91 = 1;
  uint64_t v153 = v86 >> 3;
  unint64_t v159 = v85;
  do
  {
    unint64_t v88 = (1 << (7 * v91)) - v88;
    if (v89 >= v88) {
      int64_t v92 = v88;
    }
    else {
      int64_t v92 = v89;
    }
    *(void *)&long long v163 = &v168;
    *((void *)&v163 + 1) = &v166;
    unint64_t v93 = v92;
    if (v92 < 129)
    {
LABEL_99:
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v85, &v85[8 * v92], (uint64_t)&v163, v92, 0, 0);
    }
    else
    {
      while (1)
      {
        unint64_t v94 = (char *)operator new(8 * v93, v90);
        if (v94) {
          break;
        }
        BOOL v68 = v93 > 1;
        v93 >>= 1;
        if (!v68) {
          goto LABEL_99;
        }
      }
      unint64_t v95 = v94;
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v85, &v85[8 * v92], (uint64_t)&v163, v92, v94, v93);
      operator delete(v95);
    }
    LODWORD(v166) = *(_DWORD *)(*(void *)(*(void *)&v85[8 * v92 - 8] + 16) + 16);
    v89 -= v92;
    if (!v89) {
      break;
    }
    ++v91;
    v85 += 8 * v92;
  }
  while (v91 != 9);
  if ((unint64_t)(v156 - 8) < 8)
  {
    LODWORD(v96) = 0;
    unint64_t v97 = v159;
    unint64_t v76 = v162;
    unint64_t v98 = v159;
    goto LABEL_108;
  }
  uint64_t v99 = 0;
  unint64_t v100 = ((unint64_t)(v156 - 8) >> 3) + 1;
  uint64_t v96 = v100 & 0x3FFFFFFFFFFFFFFELL;
  unint64_t v97 = v159;
  unint64_t v98 = &v159[8 * (v100 & 0x3FFFFFFFFFFFFFFELL)];
  do
  {
    unint64_t v101 = &v159[8 * v99];
    uint64_t v103 = *(void *)v101;
    uint64_t v102 = *((void *)v101 + 1);
    *(_DWORD *)(v103 + 8) = v99;
    *(_DWORD *)(v102 + 8) = v99 + 1;
    v99 += 2;
  }
  while (v96 != v99);
  unint64_t v76 = v162;
  if (v100 != v96)
  {
    do
    {
LABEL_108:
      uint64_t v104 = *(void *)v98;
      v98 += 8;
      *(_DWORD *)(v104 + 8) = v96;
      LODWORD(v96) = v96 + 1;
    }
    while (v98 != &v97[8 * v153]);
  }
LABEL_109:
  char v105 = (char *)*((void *)this + 23);
  uint64_t v106 = *((void *)this + 24) - (void)v105;
  if (v106)
  {
    unint64_t v107 = 0;
    uint64_t v157 = *((void *)this + 24) - (void)v105;
    unint64_t v108 = v106 >> 3;
    LODWORD(v166) = 0;
    char v109 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    uint64_t v110 = 1;
    uint64_t v154 = v106 >> 3;
    uint64_t v160 = v105;
    do
    {
      unint64_t v107 = (1 << (7 * v110)) - v107;
      if (v108 >= v107) {
        int64_t v111 = v107;
      }
      else {
        int64_t v111 = v108;
      }
      *(void *)&long long v163 = &v168;
      *((void *)&v163 + 1) = &v166;
      unint64_t v112 = v111;
      if (v111 < 129)
      {
LABEL_117:
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v105, &v105[8 * v111], (uint64_t)&v163, v111, 0, 0);
      }
      else
      {
        while (1)
        {
          unint64_t v113 = (char *)operator new(8 * v112, v109);
          if (v113) {
            break;
          }
          BOOL v68 = v112 > 1;
          v112 >>= 1;
          if (!v68) {
            goto LABEL_117;
          }
        }
        unint64_t v114 = v113;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v105, &v105[8 * v111], (uint64_t)&v163, v111, v113, v112);
        operator delete(v114);
      }
      LODWORD(v166) = *(_DWORD *)(**(void **)&v105[8 * v111 - 8] + 16);
      v108 -= v111;
      if (!v108) {
        break;
      }
      ++v110;
      v105 += 8 * v111;
    }
    while (v110 != 9);
    if ((unint64_t)(v157 - 8) < 8)
    {
      LODWORD(v115) = 0;
      size_t v116 = v160;
      unint64_t v76 = v162;
      uint64_t v117 = v160;
      goto LABEL_126;
    }
    uint64_t v118 = 0;
    unint64_t v119 = ((unint64_t)(v157 - 8) >> 3) + 1;
    uint64_t v115 = v119 & 0x3FFFFFFFFFFFFFFELL;
    size_t v116 = v160;
    uint64_t v117 = &v160[8 * (v119 & 0x3FFFFFFFFFFFFFFELL)];
    do
    {
      unint64_t v120 = &v160[8 * v118];
      uint64_t v122 = *(void *)v120;
      uint64_t v121 = *((void *)v120 + 1);
      *(_DWORD *)(v122 + 16) = v118;
      *(_DWORD *)(v121 + 16) = v118 + 1;
      v118 += 2;
    }
    while (v115 != v118);
    unint64_t v76 = v162;
    if (v119 != v115)
    {
      do
      {
LABEL_126:
        uint64_t v123 = *(void *)v117;
        v117 += 8;
        *(_DWORD *)(v123 + 16) = v115;
        LODWORD(v115) = v115 + 1;
      }
      while (v117 != &v116[8 * v154]);
    }
  }
  long long v124 = (char *)*((void *)this + 26);
  uint64_t v125 = *((void *)this + 27) - (void)v124;
  if (v125)
  {
    unint64_t v126 = 0;
    uint64_t v158 = *((void *)this + 27) - (void)v124;
    unint64_t v127 = v125 >> 3;
    LODWORD(v166) = 0;
    uint64_t v128 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    uint64_t v129 = 1;
    uint64_t v155 = v125 >> 3;
    unint64_t v161 = v124;
    do
    {
      unint64_t v126 = (1 << (7 * v129)) - v126;
      if (v127 >= v126) {
        int64_t v130 = v126;
      }
      else {
        int64_t v130 = v127;
      }
      *(void *)&long long v163 = &v168;
      *((void *)&v163 + 1) = &v166;
      unint64_t v131 = v130;
      if (v130 < 129)
      {
LABEL_135:
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v124, &v124[8 * v130], (uint64_t)&v163, v130, 0, 0);
      }
      else
      {
        while (1)
        {
          uint64_t v132 = (char *)operator new(8 * v131, v128);
          if (v132) {
            break;
          }
          BOOL v68 = v131 > 1;
          v131 >>= 1;
          if (!v68) {
            goto LABEL_135;
          }
        }
        int v133 = v132;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(v124, &v124[8 * v130], (uint64_t)&v163, v130, v132, v131);
        operator delete(v133);
      }
      LODWORD(v166) = *(_DWORD *)(*(void *)(*(void *)&v124[8 * v130 - 8] + 16) + 16);
      v127 -= v130;
      if (!v127) {
        break;
      }
      ++v129;
      v124 += 8 * v130;
    }
    while (v129 != 9);
    if ((unint64_t)(v158 - 8) < 8)
    {
      LODWORD(v134) = 0;
      unint64_t v135 = v161;
      unint64_t v76 = v162;
      int v136 = v161;
      goto LABEL_144;
    }
    uint64_t v137 = 0;
    unint64_t v138 = ((unint64_t)(v158 - 8) >> 3) + 1;
    uint64_t v134 = v138 & 0x3FFFFFFFFFFFFFFELL;
    unint64_t v135 = v161;
    int v136 = &v161[8 * (v138 & 0x3FFFFFFFFFFFFFFELL)];
    do
    {
      unsigned int v139 = &v161[8 * v137];
      uint64_t v141 = *(void *)v139;
      uint64_t v140 = *((void *)v139 + 1);
      *(_DWORD *)(v141 + 8) = v137;
      *(_DWORD *)(v140 + 8) = v137 + 1;
      v137 += 2;
    }
    while (v134 != v137);
    unint64_t v76 = v162;
    if (v138 != v134)
    {
      do
      {
LABEL_144:
        uint64_t v142 = *(void *)v136;
        v136 += 8;
        *(_DWORD *)(v142 + 8) = v134;
        LODWORD(v134) = v134 + 1;
      }
      while (v136 != &v135[8 * v155]);
    }
  }
  LODWORD(v166) = 0;
  unsigned int v143 = *((_DWORD *)this + 38);
  if (v143)
  {
    uint64_t v144 = *((void *)this + 18);
    uint64_t v145 = v144 + 24 * v143;
    do
    {
      uint64_t v146 = *(void *)(v144 + 16);
      uint64_t v147 = *(void *)(v146 + 32);
      if (v147)
      {
        *(void *)&long long v163 = &unk_1EC99B600;
        *((void *)&v163 + 1) = v146;
        size_t v164 = (mlir::GenericProgramPoint *)&v166;
        (*(void (**)(uint64_t, mlir::Operation *, uint64_t, long long *, __n128))(*(void *)v147 + 56))(v147, v76, v146 + 40, &v163, v83);
        uint64_t v148 = *(unsigned int *)(v146 + 112);
        if (v148)
        {
          int v149 = v166;
          uint64_t v150 = 24 * v148;
          uint64_t v151 = *(void *)(v146 + 104) + 16;
          do
          {
            if (*(unsigned char *)(*(void *)v151 + 28))
            {
              *(_DWORD *)(*(void *)v151 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v149++;
              LODWORD(v166) = v149;
            }
            v151 += 24;
            v150 -= 24;
          }
          while (v150);
        }
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v163);
      }
      v144 += 24;
    }
    while (v144 != v145);
  }
  if (v169 != v171) {
    free(v169);
  }
  return this;
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Operation *a2)
{
  mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *((void *)a2 + 6));
  uint64_t v4 = *((unsigned int *)a2 + 9);
  if (v4) {
    uint64_t v5 = (char *)a2 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      v14[0] = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, i);
      int v7 = *((_DWORD *)this + 232);
      *((_DWORD *)this + 232) = v7 + 1;
      v13[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 107, v14, v13) & 1) == 0)
      {
        unint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this + 856, (uint64_t)v14, v14, v13[0]);
        void *v8 = v14[0];
        *((_DWORD *)v8 + 2) = v7;
      }
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, (uint64_t **)(*(void *)(v14[0] + 8) & 0xFFFFFFFFFFFFFFF8));
    }
  }
  unint64_t AttrDictionary = (uint64_t **)*((void *)a2 + 7);
  if (mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*((mlir::BytecodeWriterConfig **)this + 117)) < 5) {
    unint64_t AttrDictionary = (uint64_t **)mlir::Operation::getAttrDictionary(a2);
  }
  if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&AttrDictionary)) {
    mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, AttrDictionary);
  }
  if (mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*((mlir::BytecodeWriterConfig **)this + 117)) >= 5
    && HIBYTE(*((_DWORD *)a2 + 11)))
  {
    uint64_t v9 = *((void *)a2 + 6);
    if (*(_UNKNOWN **)(v9 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      unint64_t v12 = (uint64_t **)*((void *)a2 + 2 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1) + 8);
      if (v12) {
        mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, v12);
      }
    }
    else
    {
      uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::BytecodeOpInterface>(v9 + 32);
      if (!v10) {
        uint64_t v10 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::BytecodeOpInterface>(*(void *)(v9 + 24), *((void *)a2 + 6));
      }
      v14[0] = (unint64_t)a2;
      v14[1] = v10;
      DialectVersionMap = (void *)mlir::BytecodeWriterConfig::getDialectVersionMap(*((mlir::BytecodeWriterConfig **)this
                                                                                     + 117));
      v13[0] = &unk_1EC9CDA40;
      v13[1] = this;
      v13[2] = DialectVersionMap;
      mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v14, (uint64_t)v13);
    }
  }
  mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *((uint64_t ***)a2 + 3));
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Region *a2)
{
  if (*(mlir::Region **)a2 == a2) {
    return;
  }
  int v4 = *((_DWORD *)this + 232);
  uint64_t v5 = (mlir::Region *)*((void *)a2 + 1);
  if (v5 == a2)
  {
    int v6 = 0;
    int v28 = *((_DWORD *)this + 232);
    unsigned int v29 = *((_DWORD *)this + 230);
    if (!v29) {
      goto LABEL_48;
    }
LABEL_45:
    uint64_t v30 = *((void *)this + 113);
    unsigned int v31 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v32 = (mlir::Region **)(v30 + 16 * v31);
    unsigned int v33 = *v32;
    if (*v32 == a2) {
      return;
    }
    unsigned int v38 = 0;
    int v39 = 1;
    while (v33 != (mlir::Region *)-4096)
    {
      if (v38) {
        BOOL v40 = 0;
      }
      else {
        BOOL v40 = v33 == (mlir::Region *)-8192;
      }
      if (v40) {
        unsigned int v38 = v32;
      }
      unsigned int v41 = v31 + v39++;
      unsigned int v31 = v41 & (v29 - 1);
      BOOL v32 = (mlir::Region **)(v30 + 16 * v31);
      unsigned int v33 = *v32;
      if (*v32 == a2) {
        return;
      }
    }
    if (v38) {
      uint64_t v34 = v38;
    }
    else {
      uint64_t v34 = v32;
    }
    int v35 = *((_DWORD *)this + 228);
    if (4 * v35 + 4 < 3 * v29) {
      goto LABEL_49;
    }
LABEL_66:
    v29 *= 2;
    goto LABEL_67;
  }
  int v6 = 0;
  do
  {
    if (v5) {
      uint64_t v11 = (mlir::Region *)((char *)v5 - 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unsigned int v12 = *((_DWORD *)this + 212);
    if (!v12) {
      goto LABEL_28;
    }
    uint64_t v7 = *((void *)this + 104);
    unsigned int v8 = (v12 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v9 = (mlir::Block **)(v7 + 16 * v8);
    uint64_t v10 = *v9;
    if (v11 == *v9) {
      goto LABEL_5;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v10 != (mlir::Block *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v10 == (mlir::Block *)-8192;
      }
      if (v16) {
        uint64_t v14 = v9;
      }
      unsigned int v17 = v8 + v15++;
      unsigned int v8 = v17 & (v12 - 1);
      uint64_t v9 = (mlir::Block **)(v7 + 16 * v8);
      uint64_t v10 = *v9;
      if (v11 == *v9) {
        goto LABEL_5;
      }
    }
    uint64_t v18 = v14 ? v14 : v9;
    int v19 = *((_DWORD *)this + 210);
    if (4 * v19 + 4 < 3 * v12)
    {
      if (v12 + ~v19 - *((_DWORD *)this + 211) > v12 >> 3) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_28:
      v12 *= 2;
    }
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 832, v12);
    uint64_t v20 = *((void *)this + 104);
    int v21 = *((_DWORD *)this + 212) - 1;
    unsigned int v22 = v21 & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v18 = (mlir::Block **)(v20 + 16 * v22);
    uint64_t v23 = *v18;
    if (v11 == *v18)
    {
LABEL_30:
      ++*((_DWORD *)this + 210);
      if (v11 == (mlir::Block *)-4096) {
        goto LABEL_14;
      }
LABEL_13:
      --*((_DWORD *)this + 211);
      goto LABEL_14;
    }
    unsigned int v24 = 0;
    int v25 = 1;
    while (v23 != (mlir::Block *)-4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == (mlir::Block *)-8192;
      }
      if (v26) {
        unsigned int v24 = v18;
      }
      unsigned int v27 = v22 + v25++;
      unsigned int v22 = v27 & v21;
      uint64_t v18 = (mlir::Block **)(v20 + 16 * (v27 & v21));
      uint64_t v23 = *v18;
      if (v11 == *v18) {
        goto LABEL_30;
      }
    }
    if (v24) {
      uint64_t v18 = v24;
    }
LABEL_12:
    uint64_t v13 = *v18;
    ++*((_DWORD *)this + 210);
    if (v13 != (mlir::Block *)-4096) {
      goto LABEL_13;
    }
LABEL_14:
    mlir::GenericProgramPoint *v18 = v11;
    *((_DWORD *)v18 + 2) = v6;
LABEL_5:
    mlir::bytecode::detail::IRNumberingState::number(this, v11);
    ++v6;
    uint64_t v5 = (mlir::Region *)*((void *)v5 + 1);
  }
  while (v5 != a2);
  int v28 = *((_DWORD *)this + 232);
  unsigned int v29 = *((_DWORD *)this + 230);
  if (v29) {
    goto LABEL_45;
  }
LABEL_48:
  uint64_t v34 = 0;
  int v35 = *((_DWORD *)this + 228);
  if (4 * v35 + 4 >= 3 * v29) {
    goto LABEL_66;
  }
LABEL_49:
  if (v29 + ~v35 - *((_DWORD *)this + 229) > v29 >> 3) {
    goto LABEL_50;
  }
LABEL_67:
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)this + 904, v29);
  uint64_t v42 = *((void *)this + 113);
  int v43 = *((_DWORD *)this + 230) - 1;
  unsigned int v44 = v43 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v34 = (mlir::Region **)(v42 + 16 * v44);
  int v45 = *v34;
  if (*v34 == a2)
  {
LABEL_68:
    int v37 = v28 - v4;
    ++*((_DWORD *)this + 228);
    if (a2 == (mlir::Region *)-4096) {
      goto LABEL_52;
    }
LABEL_51:
    --*((_DWORD *)this + 229);
    goto LABEL_52;
  }
  unsigned int v46 = 0;
  int v47 = 1;
  while (v45 != (mlir::Region *)-4096)
  {
    if (v46) {
      BOOL v48 = 0;
    }
    else {
      BOOL v48 = v45 == (mlir::Region *)-8192;
    }
    if (v48) {
      unsigned int v46 = v34;
    }
    unsigned int v49 = v44 + v47++;
    unsigned int v44 = v49 & v43;
    uint64_t v34 = (mlir::Region **)(v42 + 16 * (v49 & v43));
    int v45 = *v34;
    if (*v34 == a2) {
      goto LABEL_68;
    }
  }
  if (v46) {
    uint64_t v34 = v46;
  }
LABEL_50:
  unint64_t v36 = *v34;
  int v37 = v28 - v4;
  ++*((_DWORD *)this + 228);
  if (v36 != (mlir::Region *)-4096) {
    goto LABEL_51;
  }
LABEL_52:
  *uint64_t v34 = a2;
  *((_DWORD *)v34 + 2) = v6;
  *((_DWORD *)v34 + 3) = v37;
}

void mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, uint64_t **a2)
{
  unint64_t v85 = (mlir::Dialect ***)a2;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!v4) {
    goto LABEL_81;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (uint64_t ***)(*(void *)a1 + 16 * v6);
  unsigned int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_3:
    ++*(_DWORD *)(*(void *)(v5 + 16 * v6 + 8) + 12);
    return;
  }
  uint64_t v62 = 0;
  int v63 = 1;
  while (v8 != (uint64_t **)-4096)
  {
    if (v62) {
      BOOL v64 = 0;
    }
    else {
      BOOL v64 = v8 == (uint64_t **)-8192;
    }
    if (v64) {
      uint64_t v62 = v7;
    }
    int v65 = v6 + v63++;
    uint64_t v6 = v65 & (v4 - 1);
    uint64_t v7 = (uint64_t ***)(v5 + 16 * v6);
    unsigned int v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_3;
    }
  }
  unint64_t v66 = v62 ? v62 : v7;
  int v67 = *(_DWORD *)(a1 + 8);
  if (4 * v67 + 4 < 3 * v4)
  {
    if (v4 + ~v67 - *(_DWORD *)(a1 + 12) > v4 >> 3)
    {
LABEL_6:
      uint64_t v9 = *v66;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_81:
    v4 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v4);
  int v68 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v69 = v68 & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v66 = (uint64_t ***)(*(void *)a1 + 16 * v69);
  unint64_t v70 = *v66;
  if (*v66 != a2)
  {
    unint64_t v71 = 0;
    int v72 = 1;
    while (v70 != (uint64_t **)-4096)
    {
      if (v71) {
        BOOL v73 = 0;
      }
      else {
        BOOL v73 = v70 == (uint64_t **)-8192;
      }
      if (v73) {
        unint64_t v71 = v66;
      }
      unsigned int v74 = v69 + v72++;
      unsigned int v69 = v74 & v68;
      unint64_t v66 = (uint64_t ***)(*(void *)a1 + 16 * v69);
      unint64_t v70 = *v66;
      uint64_t v9 = a2;
      if (*v66 == a2) {
        goto LABEL_7;
      }
    }
    if (v71) {
      unint64_t v66 = v71;
    }
    goto LABEL_6;
  }
  uint64_t v9 = a2;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v9 != (uint64_t **)-4096) {
    --*(_DWORD *)(a1 + 12);
  }
  char *v66 = a2;
  v66[1] = 0;
  *(void *)(a1 + 336) += 24;
  uint64_t v10 = *(void *)(a1 + 256);
  if (v10 && ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 <= *(void *)(a1 + 264) - v10)
  {
    uint64_t v11 = (uint64_t **)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 280) >> 7;
    if (v12 >= 0x1E) {
      LOBYTE(v12) = 30;
    }
    uint64_t v13 = 4096 << v12;
    buffer = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
    uint64_t v15 = *(unsigned int *)(a1 + 280);
    if (v15 >= *(_DWORD *)(a1 + 284))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 272, (void *)(a1 + 288), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a1 + 280);
    }
    *(void *)(*(void *)(a1 + 272) + 8 * v15) = buffer;
    ++*(_DWORD *)(a1 + 280);
    *(void *)(a1 + 264) = &buffer[v13];
    uint64_t v11 = (uint64_t **)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 256) = v11 + 3;
  mlir::Block *v11 = (uint64_t *)((unint64_t)v85 & 0xFFFFFFFFFFFFFFFBLL);
  v11[1] = (uint64_t *)0x100000000;
  unint64_t v11[2] = 0;
  v66[1] = v11;
  unsigned int v17 = *(char **)(a1 + 168);
  unint64_t v16 = *(void *)(a1 + 176);
  if ((unint64_t)v17 < v16)
  {
    *(void *)unsigned int v17 = v11;
    uint64_t v18 = (uint64_t)(v17 + 8);
    goto LABEL_39;
  }
  int v19 = *(char **)(a1 + 160);
  uint64_t v20 = (v17 - v19) >> 3;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 61) {
    abort();
  }
  uint64_t v22 = v16 - (void)v19;
  if (v22 >> 2 > v21) {
    unint64_t v21 = v22 >> 2;
  }
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    if (v23 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v24 = (char *)operator new(8 * v23);
    int v25 = &v24[8 * v20];
    BOOL v26 = &v24[8 * v23];
    *(void *)int v25 = v11;
    uint64_t v18 = (uint64_t)(v25 + 8);
    unsigned int v27 = (char *)(v17 - v19);
    if (v17 == v19) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  unsigned int v24 = 0;
  int v25 = (char *)(8 * v20);
  BOOL v26 = 0;
  *(void *)(8 * v20) = v11;
  uint64_t v18 = 8 * v20 + 8;
  unsigned int v27 = (char *)(v17 - v19);
  if (v17 != v19)
  {
LABEL_30:
    unint64_t v28 = (unint64_t)(v27 - 8);
    if (v28 < 0x58) {
      goto LABEL_100;
    }
    if ((unint64_t)(v19 - v24) < 0x20) {
      goto LABEL_100;
    }
    uint64_t v29 = (v28 >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v31 = &v17[-v30];
    v25 -= v30;
    BOOL v32 = &v24[8 * v20 - 16];
    unsigned int v33 = v17 - 16;
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
      *(_OWORD *)BOOL v32 = v35;
      v32 -= 32;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    unsigned int v17 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        uint64_t v36 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v25 - 1) = v36;
        v25 -= 8;
      }
      while (v17 != v19);
    }
    unsigned int v17 = *(char **)(a1 + 160);
  }
LABEL_37:
  *(void *)(a1 + 160) = v25;
  *(void *)(a1 + 168) = v18;
  *(void *)(a1 + 176) = v26;
  if (v17) {
    operator delete(v17);
  }
LABEL_39:
  *(void *)(a1 + 168) = v18;
  int v37 = (uint64_t *)v85;
  unsigned int v38 = *v85;
  int v39 = (*v85)[17];
  BOOL v40 = v39 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  if (v39 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id) {
    unsigned int v41 = v85;
  }
  else {
    unsigned int v41 = 0;
  }
  uint64_t v75 = v41;
  if (v40)
  {
    v83[0] = (mlir::detail::AsmStateImpl *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v83);
    uint64_t v56 = v55;
    uint64_t v57 = a1;
    unint64_t v58 = (mlir::detail::AsmStateImpl *)AttrData;
    unsigned int v59 = v56;
LABEL_57:
    mlir::bytecode::detail::IRNumberingState::numberDialect(v57, (uint64_t)v58, (uint64_t)v59);
    unint64_t v11[2] = v60;
    return;
  }
  unint64_t v11[2] = (uint64_t *)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, *v38);
  if (mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(*v37))
  {
LABEL_50:
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v85);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v75);
    mlir::AsmState::AsmState(v83, Context, &v75, 0, 0);
    LODWORD(v76) = 0;
    char v80 = 0;
    uint64_t v81 = 0;
    int v82 = 1;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = (mlir::Dialect ***)&unk_1EC9A3838;
    mlir::Attribute::print((uint64_t ***)&v85, (llvm::raw_ostream *)&v75, (mlir::AsmState *)v83, 0);
    uint64_t DialectResources = mlir::AsmState::getDialectResources((mlir::AsmState *)v83);
    if (*(_DWORD *)(DialectResources + 8))
    {
      uint64_t v51 = *(unsigned int *)(DialectResources + 16);
      if (v51)
      {
        uint64_t v52 = 48 * v51;
        uint64_t v53 = *(void *)DialectResources;
        while ((*(void *)v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v53 += 48;
          v52 -= 48;
          if (!v52) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        uint64_t v53 = *(void *)DialectResources;
      }
      uint64_t v61 = *(void *)DialectResources + 48 * v51;
LABEL_61:
      if (v53 != v61)
      {
        mlir::bytecode::detail::IRNumberingState::number(a1, *(mlir::Dialect **)v53, *(uint64_t **)(v53 + 32), *(unsigned int *)(v53 + 40));
        while (1)
        {
          v53 += 48;
          if (v53 == v61) {
            break;
          }
          if ((*(void *)v53 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_61;
          }
        }
      }
    }
LABEL_55:
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v75);
    mlir::AsmState::~AsmState(v83);
    return;
  }
  uint64_t AttributeWriterCallbacks = mlir::BytecodeWriterConfig::getAttributeWriterCallbacks(*(mlir::BytecodeWriterConfig **)(a1 + 936));
  if (!v43)
  {
LABEL_48:
    uint64_t v47 = v11[2][3];
    if (v47)
    {
      uint64_t DialectVersionMap = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
      uint64_t v75 = (mlir::Dialect ***)&unk_1EC9CDA40;
      uint64_t v76 = a1;
      uint64_t v77 = DialectVersionMap;
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, mlir::Dialect ****))(*(void *)v47 + 32))(v47, v37, &v75))
      {
        return;
      }
    }
    goto LABEL_50;
  }
  unsigned int v44 = (void *)AttributeWriterCallbacks;
  uint64_t v45 = 8 * v43;
  while (1)
  {
    uint64_t v46 = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
    uint64_t v75 = (mlir::Dialect ***)&unk_1EC9CDA40;
    uint64_t v76 = a1;
    uint64_t v77 = v46;
    LOBYTE(v83[0]) = 0;
    char v84 = 0;
    if ((*(unsigned __int8 (**)(void, uint64_t *, mlir::detail::AsmStateImpl **, mlir::Dialect ****))(*(void *)*v44 + 16))(*v44, v37, v83, &v75))
    {
      break;
    }
    ++v44;
    v45 -= 8;
    if (!v45) {
      goto LABEL_48;
    }
  }
  if (v84)
  {
    unint64_t v58 = v83[0];
    unsigned int v59 = v83[1];
    uint64_t v57 = a1;
    goto LABEL_57;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t v15;
  char *buffer;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t *v39;
  mlir::Dialect **v40;
  mlir::Dialect *v41;
  BOOL v42;
  mlir::Dialect ***v43;
  uint64_t TypeWriterCallbacks;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t DialectVersionMap;
  uint64_t Context;
  uint64_t DialectResources;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t AttrData;
  mlir::detail::AsmStateImpl *v57;
  mlir::detail::AsmStateImpl *v58;
  uint64_t v59;
  mlir::detail::AsmStateImpl *v60;
  mlir::detail::AsmStateImpl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t ***v64;
  int v65;
  BOOL v66;
  int v67;
  uint64_t ***v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t ***v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  mlir::Dialect ***v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  mlir::detail::AsmStateImpl *v86[2];
  char v87;
  mlir::Dialect ***v88;

  unint64_t v88 = (mlir::Dialect ***)a2;
  uint64_t v6 = *(void *)(a1 + 72);
  unsigned int v4 = a1 + 72;
  uint64_t v5 = v6;
  uint64_t v7 = *(_DWORD *)(v4 + 16);
  if (!v7) {
    goto LABEL_81;
  }
  unsigned int v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = (uint64_t ***)(v5 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 == a2)
  {
LABEL_3:
    ++*(_DWORD *)(*(void *)(v5 + 16 * v8 + 8) + 12);
    return;
  }
  BOOL v64 = 0;
  int v65 = 1;
  while (v10 != (uint64_t **)-4096)
  {
    if (v64) {
      unint64_t v66 = 0;
    }
    else {
      unint64_t v66 = v10 == (uint64_t **)-8192;
    }
    if (v66) {
      BOOL v64 = v9;
    }
    int v67 = v8 + v65++;
    unsigned int v8 = v67 & (v7 - 1);
    uint64_t v9 = (uint64_t ***)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_3;
    }
  }
  int v68 = v64 ? v64 : v9;
  unsigned int v69 = *(_DWORD *)(a1 + 80);
  if (4 * v69 + 4 < 3 * v7)
  {
    if (v7 + ~v69 - *(_DWORD *)(a1 + 84) > v7 >> 3)
    {
LABEL_6:
      uint64_t v11 = *v68;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_81:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  unint64_t v70 = *(void *)(a1 + 72);
  unint64_t v71 = *(_DWORD *)(a1 + 88) - 1;
  int v72 = v71 & ((a2 >> 4) ^ (a2 >> 9));
  int v68 = (uint64_t ***)(v70 + 16 * v72);
  BOOL v73 = *v68;
  if (*v68 != a2)
  {
    unsigned int v74 = 0;
    uint64_t v75 = 1;
    while (v73 != (uint64_t **)-4096)
    {
      if (v74) {
        uint64_t v76 = 0;
      }
      else {
        uint64_t v76 = v73 == (uint64_t **)-8192;
      }
      if (v76) {
        unsigned int v74 = v68;
      }
      uint64_t v77 = v72 + v75++;
      int v72 = v77 & v71;
      int v68 = (uint64_t ***)(v70 + 16 * v72);
      BOOL v73 = *v68;
      uint64_t v11 = a2;
      if (*v68 == a2) {
        goto LABEL_7;
      }
    }
    if (v74) {
      int v68 = v74;
    }
    goto LABEL_6;
  }
  uint64_t v11 = a2;
LABEL_7:
  ++*(_DWORD *)(a1 + 80);
  if (v11 != (uint64_t **)-4096) {
    --*(_DWORD *)(a1 + 84);
  }
  *int v68 = a2;
  v68[1] = 0;
  *(void *)(a1 + 816) += 24;
  unsigned int v12 = *(void *)(a1 + 736);
  if (v12 && ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 24 <= *(void *)(a1 + 744) - v12)
  {
    uint64_t v13 = (uint64_t **)((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t v14 = *(_DWORD *)(a1 + 760) >> 7;
    if (v14 >= 0x1E) {
      LOBYTE(v14) = 30;
    }
    uint64_t v15 = 4096 << v14;
    buffer = (char *)llvm::allocate_buffer(4096 << v14, (std::align_val_t)8uLL);
    unsigned int v17 = *(unsigned int *)(a1 + 760);
    if (v17 >= *(_DWORD *)(a1 + 764))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 752, (void *)(a1 + 768), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 760);
    }
    *(void *)(*(void *)(a1 + 752) + 8 * v17) = buffer;
    ++*(_DWORD *)(a1 + 760);
    *(void *)(a1 + 744) = &buffer[v15];
    uint64_t v13 = (uint64_t **)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 736) = v13 + 3;
  mlir::Block *v13 = (uint64_t *)((unint64_t)v88 | 4);
  v13[1] = (uint64_t *)0x100000000;
  v13[2] = 0;
  v68[1] = v13;
  int v19 = *(char **)(a1 + 216);
  uint64_t v18 = *(void *)(a1 + 224);
  if ((unint64_t)v19 < v18)
  {
    *(void *)int v19 = v13;
    uint64_t v20 = (uint64_t)(v19 + 8);
    goto LABEL_39;
  }
  unint64_t v21 = *(char **)(a1 + 208);
  uint64_t v22 = (v19 - v21) >> 3;
  unint64_t v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61) {
    abort();
  }
  unsigned int v24 = v18 - (void)v21;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    int v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    int v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v26 = (char *)operator new(8 * v25);
    unsigned int v27 = &v26[8 * v22];
    unint64_t v28 = &v26[8 * v25];
    *(void *)unsigned int v27 = v13;
    uint64_t v20 = (uint64_t)(v27 + 8);
    uint64_t v29 = (char *)(v19 - v21);
    if (v19 == v21) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  BOOL v26 = 0;
  unsigned int v27 = (char *)(8 * v22);
  unint64_t v28 = 0;
  *(void *)(8 * v22) = v13;
  uint64_t v20 = 8 * v22 + 8;
  uint64_t v29 = (char *)(v19 - v21);
  if (v19 != v21)
  {
LABEL_30:
    uint64_t v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58) {
      goto LABEL_100;
    }
    if ((unint64_t)(v21 - v26) < 0x20) {
      goto LABEL_100;
    }
    unsigned int v31 = (v30 >> 3) + 1;
    BOOL v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v33 = &v19[-v32];
    v27 -= v32;
    uint64_t v34 = &v26[8 * v22 - 16];
    long long v35 = v19 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int v37 = *(_OWORD *)v35;
      *((_OWORD *)v34 - 1) = *((_OWORD *)v35 - 1);
      *(_OWORD *)uint64_t v34 = v37;
      v34 -= 32;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    int v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        unsigned int v38 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v27 - 1) = v38;
        v27 -= 8;
      }
      while (v19 != v21);
    }
    int v19 = *(char **)(a1 + 208);
  }
LABEL_37:
  *(void *)(a1 + 208) = v27;
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 2(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v28;
  if (v19) {
    operator delete(v19);
  }
LABEL_39:
  *(void *)(a1 + 216) = v20;
  int v39 = (uint64_t *)v88;
  BOOL v40 = *v88;
  unsigned int v41 = (*v88)[17];
  uint64_t v42 = v41 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  if (v41 == (mlir::Dialect *)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id) {
    uint64_t v43 = v88;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v78 = v43;
  if (v42)
  {
    v86[0] = (mlir::detail::AsmStateImpl *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v78);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v86);
    unint64_t v58 = v57;
    unsigned int v59 = a1;
    uint64_t v60 = (mlir::detail::AsmStateImpl *)AttrData;
    uint64_t v61 = v58;
LABEL_57:
    mlir::bytecode::detail::IRNumberingState::numberDialect(v59, (uint64_t)v60, (uint64_t)v61);
    v13[2] = v62;
    return;
  }
  v13[2] = (uint64_t *)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, *v40);
  if (mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(*v39))
  {
LABEL_50:
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v88);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v78);
    mlir::AsmState::AsmState(v86, Context, &v78, 0, 0);
    LODWORD(v79) = 0;
    __n128 v83 = 0;
    char v84 = 0;
    unint64_t v85 = 1;
    uint64_t v81 = 0;
    int v82 = 0;
    char v80 = 0;
    uint64_t v78 = (mlir::Dialect ***)&unk_1EC9A3838;
    mlir::Type::print((uint64_t ***)&v88, (llvm::raw_ostream *)&v78, (mlir::AsmState *)v86);
    uint64_t DialectResources = mlir::AsmState::getDialectResources((mlir::AsmState *)v86);
    if (*(_DWORD *)(DialectResources + 8))
    {
      uint64_t v53 = *(unsigned int *)(DialectResources + 16);
      if (v53)
      {
        unint64_t v54 = 48 * v53;
        uint64_t v55 = *(void *)DialectResources;
        while ((*(void *)v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v55 += 48;
          v54 -= 48;
          if (!v54) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        uint64_t v55 = *(void *)DialectResources;
      }
      int v63 = *(void *)DialectResources + 48 * v53;
LABEL_61:
      if (v55 != v63)
      {
        mlir::bytecode::detail::IRNumberingState::number(a1, *(mlir::Dialect **)v55, *(uint64_t **)(v55 + 32), *(unsigned int *)(v55 + 40));
        while (1)
        {
          v55 += 48;
          if (v55 == v63) {
            break;
          }
          if ((*(void *)v55 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_61;
          }
        }
      }
    }
LABEL_55:
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v78);
    mlir::AsmState::~AsmState(v86);
    return;
  }
  TypeWriterCallbacks = mlir::BytecodeWriterConfig::getTypeWriterCallbacks(*(mlir::BytecodeWriterConfig **)(a1 + 936));
  if (!v45)
  {
LABEL_48:
    unsigned int v49 = v13[2][3];
    if (v49)
    {
      uint64_t DialectVersionMap = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
      uint64_t v78 = (mlir::Dialect ***)&unk_1EC9CDA40;
      uint64_t v79 = a1;
      char v80 = DialectVersionMap;
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t *, mlir::Dialect ****))(*(void *)v49 + 40))(v49, v39, &v78))
      {
        return;
      }
    }
    goto LABEL_50;
  }
  uint64_t v46 = (void *)TypeWriterCallbacks;
  uint64_t v47 = 8 * v45;
  while (1)
  {
    BOOL v48 = mlir::BytecodeWriterConfig::getDialectVersionMap(*(mlir::BytecodeWriterConfig **)(a1 + 936));
    uint64_t v78 = (mlir::Dialect ***)&unk_1EC9CDA40;
    uint64_t v79 = a1;
    char v80 = v48;
    LOBYTE(v86[0]) = 0;
    unint64_t v87 = 0;
    if ((*(unsigned __int8 (**)(void, uint64_t *, mlir::detail::AsmStateImpl **, mlir::Dialect ****))(*(void *)*v46 + 16))(*v46, v39, v86, &v78))
    {
      break;
    }
    ++v46;
    v47 -= 8;
    if (!v47) {
      goto LABEL_48;
    }
  }
  if (v87)
  {
    uint64_t v60 = v86[0];
    uint64_t v61 = v86[1];
    unsigned int v59 = a1;
    goto LABEL_57;
  }
}

double mlir::bytecode::detail::IRNumberingState::numberDialect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v15 = a2;
  *((void *)&v15 + 1) = a3;
  unsigned int v4 = (void *)llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *>,0u>>::operator[](a1 + 120, &v15);
  if (!*v4)
  {
    *(void *)(a1 + 432) += 120;
    uint64_t v6 = *(void *)(a1 + 352);
    if (v6) {
      BOOL v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 120 > *(void *)(a1 + 360) - v6;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)(a1 + 376) >> 7;
      if (v8 >= 0x1E) {
        LOBYTE(v8) = 30;
      }
      uint64_t v9 = 4096 << v8;
      buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
      uint64_t v11 = *(unsigned int *)(a1 + 376);
      if (v11 >= *(_DWORD *)(a1 + 380))
      {
        uint64_t v14 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 368, (void *)(a1 + 384), v11 + 1, 8);
        buffer = v14;
        LODWORD(v11) = *(_DWORD *)(a1 + 376);
      }
      *(void *)(*(void *)(a1 + 368) + 8 * v11) = buffer;
      ++*(_DWORD *)(a1 + 376);
      *(void *)(a1 + 360) = &buffer[v9];
      unint64_t v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 352) = v12 + 120;
    int v13 = *(_DWORD *)(a1 + 152) - 1;
    *(_OWORD *)unint64_t v12 = v15;
    *(_DWORD *)(v12 + 16) = v13;
    double result = 0.0;
    *(_OWORD *)(v12 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_DWORD *)(v12 + 56) = 0;
    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 64) = v12 + 80;
    *(void *)(v12 + 72) = 0;
    *(void *)(v12 + 88) = 0;
    *(_DWORD *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = v12 + 120;
    *(void *)(v12 + 112) = 0;
    *unsigned int v4 = v12;
  }
  return result;
}

mlir::Dialect *mlir::bytecode::detail::IRNumberingState::numberDialect(mlir::bytecode::detail::IRNumberingState *this, mlir::Dialect *a2)
{
  uint64_t v6 = *((void *)this + 12);
  unsigned int v4 = (char *)this + 96;
  uint64_t v5 = v6;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  if (!v7) {
    goto LABEL_26;
  }
  unsigned int v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = (mlir::Dialect **)(v5 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 == a2) {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (v10 != (mlir::Dialect *)-4096)
  {
    if (v11) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v10 == (mlir::Dialect *)-8192;
    }
    if (v13) {
      uint64_t v11 = v9;
    }
    unsigned int v14 = v8 + v12++;
    unsigned int v8 = v14 & (v7 - 1);
    uint64_t v9 = (mlir::Dialect **)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_17;
    }
  }
  if (v11) {
    uint64_t v9 = v11;
  }
  int v20 = *((_DWORD *)this + 26);
  if (4 * v20 + 4 < 3 * v7)
  {
    if (v7 + ~v20 - *((_DWORD *)this + 27) > v7 >> 3) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_26:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v7);
  uint64_t v21 = *((void *)this + 12);
  int v22 = *((_DWORD *)this + 28) - 1;
  unsigned int v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = (mlir::Dialect **)(v21 + 16 * v23);
  unsigned int v24 = *v9;
  if (*v9 == a2)
  {
LABEL_28:
    ++*((_DWORD *)this + 26);
    if (a2 == (mlir::Dialect *)-4096) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v25 = 0;
  int v26 = 1;
  while (v24 != (mlir::Dialect *)-4096)
  {
    if (v25) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = v24 == (mlir::Dialect *)-8192;
    }
    if (v27) {
      int v25 = v9;
    }
    unsigned int v28 = v23 + v26++;
    unsigned int v23 = v28 & v22;
    uint64_t v9 = (mlir::Dialect **)(v21 + 16 * v23);
    unsigned int v24 = *v9;
    if (*v9 == a2) {
      goto LABEL_28;
    }
  }
  if (v25) {
    uint64_t v9 = v25;
  }
LABEL_14:
  long long v15 = *v9;
  ++*((_DWORD *)this + 26);
  if (v15 != (mlir::Dialect *)-4096) {
LABEL_15:
  }
    --*((_DWORD *)this + 27);
LABEL_16:
  mlir::Block *v9 = a2;
  v9[1] = 0;
LABEL_17:
  double result = v9[1];
  if (!result)
  {
    mlir::bytecode::detail::IRNumberingState::numberDialect((uint64_t)this, *((void *)a2 + 1), *((void *)a2 + 2));
    v9[1] = v17;
    uint64_t v18 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)a2);
    if (v18) {
      uint64_t v18 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>((uint64_t)a2);
    }
    *((void *)v9[1] + 3) = v18;
    uint64_t v19 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2);
    if (v19) {
      uint64_t v19 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>((uint64_t)a2);
    }
    *((void *)v9[1] + 4) = v19;
    return v9[1];
  }
  return result;
}

uint64_t mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, mlir::Dialect *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = (uint64_t)mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, a2);
  if (a4)
  {
    uint64_t v8 = result;
    uint64_t v9 = &a3[3 * a4];
    uint64_t v10 = result + 40;
    uint64_t v11 = result + 80;
    while (1)
    {
      uint64_t result = llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert(v10, a3);
      if (!result) {
        return result;
      }
      *(void *)(a1 + 720) += 32;
      uint64_t v16 = *(void *)(a1 + 640);
      if (v16) {
        BOOL v17 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 32 > *(void *)(a1 + 648) - v16;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        unsigned int v18 = *(_DWORD *)(a1 + 664) >> 7;
        if (v18 >= 0x1E) {
          LOBYTE(v18) = 30;
        }
        uint64_t v19 = 4096 << v18;
        buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
        unint64_t v21 = *(unsigned int *)(a1 + 664);
        if (v21 >= *(unsigned int *)(a1 + 668))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 656, (void *)(a1 + 672), v21 + 1, 8);
          unint64_t v21 = *(unsigned int *)(a1 + 664);
        }
        *(void *)(*(void *)(a1 + 656) + 8 * v21) = buffer;
        ++*(_DWORD *)(a1 + 664);
        *(void *)(a1 + 648) = &buffer[v19];
        unint64_t v22 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unint64_t v22 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(a1 + 640) = v22 + 32;
      (*(void (**)(long long *__return_ptr))(**(void **)(v8 + 32) + 40))(&v45);
      long long v23 = v45;
      *(void *)(v22 + 16) = v46;
      *(_OWORD *)unint64_t v22 = v23;
      uint64_t v46 = 0;
      long long v45 = 0uLL;
      *(_DWORD *)(v22 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 0;
      *(unsigned char *)(v22 + 28) = 1;
      unint64_t v25 = *(void *)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      if (*(char *)(v22 + 23) >= 0)
      {
        unint64_t v25 = v22;
        uint64_t v24 = *(unsigned __int8 *)(v22 + 23);
      }
      *(void *)&long long v43 = v25;
      *((void *)&v43 + 1) = v24;
      unint64_t v44 = v22;
      uint64_t result = llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *>,0u>>::try_emplace<mlir::bytecode::detail::DialectResourceNumbering *>(v11, &v43, (uint64_t *)&v44);
      unsigned int v26 = *(_DWORD *)(a1 + 248);
      if (!v26) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(a1 + 232);
      uint64_t v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v26 - 1);
      unsigned int v14 = (uint64_t *)(v12 + 32 * v13);
      uint64_t v15 = *v14;
      if (*a3 != *v14) {
        break;
      }
LABEL_4:
      a3 += 3;
      if (a3 == v9) {
        return result;
      }
    }
    uint64_t v29 = 0;
    int v30 = 1;
    while (v15 != -4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v15 == -8192;
      }
      if (v31) {
        uint64_t v29 = v14;
      }
      int v32 = v13 + v30++;
      uint64_t v13 = v32 & (v26 - 1);
      unsigned int v14 = (uint64_t *)(v12 + 32 * v13);
      uint64_t v15 = *v14;
      if (*a3 == *v14) {
        goto LABEL_4;
      }
    }
    if (v29) {
      unsigned int v33 = v29;
    }
    else {
      unsigned int v33 = v14;
    }
    int v34 = *(_DWORD *)(a1 + 240);
    if (4 * v34 + 4 < 3 * v26)
    {
      if (v26 + ~v34 - *(_DWORD *)(a1 + 244) > v26 >> 3) {
        goto LABEL_21;
      }
    }
    else
    {
LABEL_38:
      v26 *= 2;
    }
    uint64_t result = (uint64_t)llvm::DenseMap<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseMapPair<mlir::AsmDialectResourceHandle,mlir::bytecode::detail::DialectResourceNumbering *>>::grow(a1 + 232, v26);
    uint64_t v35 = *(void *)(a1 + 232);
    uint64_t v27 = *a3;
    int v36 = *(_DWORD *)(a1 + 248) - 1;
    uint64_t v37 = ((*a3 >> 4) ^ (*a3 >> 9)) & v36;
    unsigned int v33 = (uint64_t *)(v35 + 32 * v37);
    uint64_t v38 = *v33;
    if (*a3 == *v33) {
      goto LABEL_22;
    }
    int v39 = 0;
    int v40 = 1;
    while (v38 != -4096)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v38 == -8192;
      }
      if (v41) {
        int v39 = v33;
      }
      int v42 = v37 + v40++;
      uint64_t v37 = v42 & v36;
      unsigned int v33 = (uint64_t *)(v35 + 32 * v37);
      uint64_t v38 = *v33;
      if (v27 == *v33) {
        goto LABEL_22;
      }
    }
    if (v39) {
      unsigned int v33 = v39;
    }
LABEL_21:
    uint64_t v27 = *v33;
LABEL_22:
    ++*(_DWORD *)(a1 + 240);
    if (v27 != -4096) {
      --*(_DWORD *)(a1 + 244);
    }
    uint64_t v28 = a3[2];
    *(_OWORD *)unsigned int v33 = *(_OWORD *)a3;
    v33[2] = v28;
    v33[3] = v22;
    goto LABEL_4;
  }
  return result;
}

void mlir::bytecode::detail::IRNumberingState::number(mlir::bytecode::detail::IRNumberingState *this, mlir::Block *a2)
{
  unsigned int v4 = (unint64_t *)*((void *)a2 + 6);
  uint64_t v5 = *((void *)a2 + 7) - (void)v4;
  if (v5)
  {
    uint64_t v6 = 8 * (v5 >> 3);
    do
    {
      unint64_t v31 = *v4;
      int v32 = 0;
      int v7 = *((_DWORD *)this + 232);
      *((_DWORD *)this + 232) = v7 + 1;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 107, &v31, &v32) & 1) == 0)
      {
        uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this + 856, (uint64_t)&v31, &v31, v32);
        void *v8 = v31;
        *((_DWORD *)v8 + 2) = v7;
      }
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, *(uint64_t ***)(v31 + 32));
      mlir::bytecode::detail::IRNumberingState::number((uint64_t)this, (uint64_t **)(*(void *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8));
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  unsigned int v9 = *((_DWORD *)this + 224);
  if (!v9) {
    goto LABEL_28;
  }
  uint64_t v10 = *((void *)this + 110);
  unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = v10 + 16 * v11;
  uint64_t v13 = *(mlir::Block **)v12;
  if (*(mlir::Block **)v12 == a2) {
    goto LABEL_22;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != (mlir::Block *)-4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == (mlir::Block *)-8192;
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    unsigned int v17 = v11 + v15++;
    unsigned int v11 = v17 & (v9 - 1);
    uint64_t v12 = v10 + 16 * v11;
    uint64_t v13 = *(mlir::Block **)v12;
    if (*(mlir::Block **)v12 == a2) {
      goto LABEL_22;
    }
  }
  if (v14) {
    uint64_t v12 = v14;
  }
  int v22 = *((_DWORD *)this + 222);
  if (4 * v22 + 4 < 3 * v9)
  {
    if (v9 + ~v22 - *((_DWORD *)this + 223) > v9 >> 3) {
      goto LABEL_19;
    }
  }
  else
  {
LABEL_28:
    v9 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 880, v9);
  uint64_t v23 = *((void *)this + 110);
  int v24 = *((_DWORD *)this + 224) - 1;
  unsigned int v25 = v24 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = v23 + 16 * v25;
  unsigned int v26 = *(mlir::Block **)v12;
  if (*(mlir::Block **)v12 == a2)
  {
LABEL_30:
    ++*((_DWORD *)this + 222);
    if (a2 == (mlir::Block *)-4096) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v27 = 0;
  int v28 = 1;
  while (v26 != (mlir::Block *)-4096)
  {
    if (v27) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = v26 == (mlir::Block *)-8192;
    }
    if (v29) {
      uint64_t v27 = v12;
    }
    unsigned int v30 = v25 + v28++;
    unsigned int v25 = v30 & v24;
    uint64_t v12 = v23 + 16 * v25;
    unsigned int v26 = *(mlir::Block **)v12;
    if (*(mlir::Block **)v12 == a2) {
      goto LABEL_30;
    }
  }
  if (v27) {
    uint64_t v12 = v27;
  }
LABEL_19:
  unsigned int v18 = *(mlir::Block **)v12;
  ++*((_DWORD *)this + 222);
  if (v18 != (mlir::Block *)-4096) {
LABEL_20:
  }
    --*((_DWORD *)this + 223);
LABEL_21:
  *(void *)uint64_t v12 = a2;
  *(_DWORD *)(v12 + 8) = 0;
LABEL_22:
  uint64_t v19 = (mlir::Block *)((char *)a2 + 32);
  for (uint64_t i = (mlir::GenericProgramPoint *)*((void *)a2 + 5); i != v19; uint64_t i = (mlir::GenericProgramPoint *)*((void *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    mlir::bytecode::detail::IRNumberingState::number(this, v21);
    ++*(_DWORD *)(v12 + 8);
  }
}

uint64_t llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectNumbering *>,0u>>::operator[](uint64_t a1, long long *a2)
{
  long long v18 = *a2;
  int v19 = 0;
  *(void *)&long long v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)&v18, &v16))
  {
    unsigned int v4 = *(_DWORD *)(v16 + 16);
  }
  else
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)&v18, (uint64_t)&v18, (void *)v16);
    *(_OWORD *)uint64_t v5 = v18;
    *((_DWORD *)v5 + 4) = v19;
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(void *)(a1 + 24);
    long long v16 = *a2;
    uint64_t v17 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    unsigned int v9 = (char *)&v16;
    if (v8 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v13 = v8 + 1;
      BOOL v14 = v7 + 24 * v8 > (unint64_t)&v16;
      if (v7 <= (unint64_t)&v16 && v14)
      {
        int v15 = (char *)&v16 - v7;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 40), v13, 24);
        unint64_t v7 = *(void *)(a1 + 24);
        unsigned int v9 = &v15[v7];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 40), v13, 24);
        unint64_t v7 = *(void *)(a1 + 24);
        unsigned int v9 = (char *)&v16;
      }
    }
    uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 32);
    long long v11 = *(_OWORD *)v9;
    *(void *)(v10 + 16) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t v10 = v11;
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4 + 1;
    *((_DWORD *)v5 + 4) = v4;
  }
  return *(void *)(a1 + 24) + 24 * v4 + 16;
}

void mlir::bytecode::detail::IRNumberingState::number(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v4 = a1 + 48;
  uint64_t v5 = v6;
  unsigned int v7 = *(_DWORD *)(v4 + 16);
  if (!v7) {
    goto LABEL_59;
  }
  unsigned int v8 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v9 = (void *)(v5 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 == a2) {
    goto LABEL_18;
  }
  long long v11 = 0;
  int v12 = 1;
  while (v10 != -4096)
  {
    if (v11) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v10 == -8192;
    }
    if (v13) {
      long long v11 = v9;
    }
    unsigned int v14 = v8 + v12++;
    unsigned int v8 = v14 & (v7 - 1);
    unsigned int v9 = (void *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_18;
    }
  }
  if (v11) {
    unsigned int v9 = v11;
  }
  int v50 = *(_DWORD *)(a1 + 56);
  if (4 * v50 + 4 < 3 * v7)
  {
    if (v7 + ~v50 - *(_DWORD *)(a1 + 60) > v7 >> 3) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_59:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  uint64_t v51 = *(void *)(a1 + 48);
  int v52 = *(_DWORD *)(a1 + 64) - 1;
  unsigned int v53 = ((a2 >> 4) ^ (a2 >> 9)) & v52;
  unsigned int v9 = (void *)(v51 + 16 * v53);
  uint64_t v54 = *v9;
  if (*v9 == a2)
  {
    uint64_t v15 = a2;
    goto LABEL_15;
  }
  uint64_t v56 = 0;
  int v57 = 1;
  while (v54 != -4096)
  {
    if (v56) {
      BOOL v58 = 0;
    }
    else {
      BOOL v58 = v54 == -8192;
    }
    if (v58) {
      uint64_t v56 = v9;
    }
    unsigned int v59 = v53 + v57++;
    unsigned int v53 = v59 & v52;
    unsigned int v9 = (void *)(v51 + 16 * v53);
    uint64_t v54 = *v9;
    uint64_t v15 = a2;
    if (*v9 == a2) {
      goto LABEL_15;
    }
  }
  if (v56) {
    unsigned int v9 = v56;
  }
LABEL_14:
  uint64_t v15 = *v9;
LABEL_15:
  ++*(_DWORD *)(a1 + 56);
  if (v15 != -4096) {
    --*(_DWORD *)(a1 + 60);
  }
  void *v9 = a2;
  v9[1] = 0;
LABEL_18:
  uint64_t v16 = v9[1];
  if (v16)
  {
    ++*(_DWORD *)(v16 + 20);
    return;
  }
  if (*(_UNKNOWN **)(v60 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t Values = *(mlir::Dialect **)(v60 + 24);
    if (Values) {
      goto LABEL_22;
    }
LABEL_25:
    uint64_t DialectNamespace = mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v60);
    mlir::bytecode::detail::IRNumberingState::numberDialect(a1, DialectNamespace, v21);
    long long v18 = v22;
    *(void *)(a1 + 624) += 24;
    uint64_t v19 = *(void *)(a1 + 544);
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  uint64_t v61 = *(void *)(v60 + 8);
  uint64_t Values = (mlir::Dialect *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v61);
  if (!Values) {
    goto LABEL_25;
  }
LABEL_22:
  long long v18 = mlir::bytecode::detail::IRNumberingState::numberDialect((mlir::bytecode::detail::IRNumberingState *)a1, Values);
  *(void *)(a1 + 624) += 24;
  uint64_t v19 = *(void *)(a1 + 544);
  if (!v19) {
    goto LABEL_28;
  }
LABEL_26:
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 24 <= *(void *)(a1 + 552) - v19)
  {
    uint64_t v23 = (void *)((v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_33;
  }
LABEL_28:
  unsigned int v24 = *(_DWORD *)(a1 + 568) >> 7;
  if (v24 >= 0x1E) {
    LOBYTE(v(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 30;
  }
  uint64_t v25 = 4096 << v24;
  buffer = (char *)llvm::allocate_buffer(4096 << v24, (std::align_val_t)8uLL);
  uint64_t v27 = *(unsigned int *)(a1 + 568);
  if (v27 >= *(_DWORD *)(a1 + 572))
  {
    uint64_t v55 = buffer;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 560, (void *)(a1 + 576), v27 + 1, 8);
    buffer = v55;
    LODWORD(v27) = *(_DWORD *)(a1 + 568);
  }
  *(void *)(*(void *)(a1 + 560) + 8 * v27) = buffer;
  ++*(_DWORD *)(a1 + 568);
  *(void *)(a1 + 552) = &buffer[v25];
  uint64_t v23 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_33:
  *(void *)(a1 + 544) = v23 + 3;
  uint64_t v28 = v60;
  void *v23 = v18;
  v23[1] = v28;
  void v23[2] = 0x100000000;
  v9[1] = v23;
  unsigned int v30 = *(char **)(a1 + 192);
  unint64_t v29 = *(void *)(a1 + 200);
  if ((unint64_t)v30 >= v29)
  {
    int v32 = *(char **)(a1 + 184);
    uint64_t v33 = (v30 - v32) >> 3;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61) {
      abort();
    }
    uint64_t v35 = v29 - (void)v32;
    if (v35 >> 2 > v34) {
      unint64_t v34 = v35 >> 2;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      if (v36 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v37 = (char *)operator new(8 * v36);
      uint64_t v38 = &v37[8 * v33];
      int v39 = &v37[8 * v36];
      *(void *)uint64_t v38 = v9[1];
      uint64_t v31 = (uint64_t)(v38 + 8);
      int v40 = (char *)(v30 - v32);
      if (v30 == v32) {
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = (char *)(8 * v33);
      int v39 = 0;
      *(void *)(8 * v33) = v23;
      uint64_t v31 = 8 * v33 + 8;
      int v40 = (char *)(v30 - v32);
      if (v30 == v32)
      {
LABEL_53:
        *(void *)(a1 + 184) = v38;
        *(void *)(a1 + 192) = v31;
        *(void *)(a1 + 200) = v39;
        if (v30) {
          operator delete(v30);
        }
        goto LABEL_55;
      }
    }
    unint64_t v41 = (unint64_t)(v40 - 8);
    if (v41 < 0x58) {
      goto LABEL_78;
    }
    if ((unint64_t)(v32 - v37) < 0x20) {
      goto LABEL_78;
    }
    uint64_t v42 = (v41 >> 3) + 1;
    uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v44 = &v30[-v43];
    v38 -= v43;
    long long v45 = &v37[8 * v33 - 16];
    uint64_t v46 = v30 - 16;
    uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *(_OWORD *)v46;
      *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
      *(_OWORD *)long long v45 = v48;
      v45 -= 32;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    unsigned int v30 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        uint64_t v49 = *((void *)v30 - 1);
        v30 -= 8;
        *((void *)v38 - 1) = v49;
        v38 -= 8;
      }
      while (v30 != v32);
    }
    unsigned int v30 = *(char **)(a1 + 184);
    goto LABEL_53;
  }
  *(void *)unsigned int v30 = v23;
  uint64_t v31 = (uint64_t)(v30 + 8);
LABEL_55:
  *(void *)(a1 + 192) = v31;
}

uint64_t llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    unsigned int v7 = (void *)(*(void *)a1 + 24 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7) {
      return 0;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v8 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v8 == -8192;
      }
      if (v18) {
        uint64_t v16 = v7;
      }
      unsigned int v19 = v6 + v17++;
      unsigned int v6 = v19 & v5;
      unsigned int v7 = (void *)(*(void *)a1 + 24 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return 0;
      }
    }
    if (v16) {
      uint64_t v10 = v16;
    }
    else {
      uint64_t v10 = v7;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(a1, v10, v2);
  uint64_t v11 = a1 + 24;
  unint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if (v13 >= *(_DWORD *)(a1 + 36))
  {
    unint64_t v20 = v13 + 1;
    unint64_t v21 = v12 + 24 * v13;
    if (v12 <= (unint64_t)v2 && v21 > (unint64_t)v2)
    {
      uint64_t v23 = (char *)v2 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      unint64_t v12 = *(void *)(a1 + 24);
      uint64_t v2 = (uint64_t *)&v23[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v20, 24);
      unint64_t v12 = *(void *)(a1 + 24);
    }
  }
  unint64_t v14 = v12 + 24 * *(unsigned int *)(a1 + 32);
  long long v15 = *(_OWORD *)v2;
  *(void *)(v14 + 16) = v2[2];
  *(_OWORD *)unint64_t v14 = v15;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeAttribute(uint64_t a1, uint64_t **a2)
{
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeOptionalAttribute(uint64_t a1, uint64_t **a2)
{
  if (a2) {
    mlir::bytecode::detail::IRNumberingState::number(*(void *)(a1 + 8), a2);
  }
}

void mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeType(uint64_t a1, uint64_t **a2)
{
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::writeResourceHandle(uint64_t a1, uint64_t a2)
{
  return mlir::bytecode::detail::IRNumberingState::number(*(void *)(a1 + 8), *(mlir::Dialect **)(a2 + 16), (uint64_t *)a2, 1);
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::getBytecodeVersion(mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter *this)
{
  return mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*(mlir::BytecodeWriterConfig **)(*((void *)this + 1)
                                                                                              + 936));
}

uint64_t mlir::bytecode::detail::IRNumberingState::NumberingDialectWriter::getDialectVersion(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v4, a2, a3);
  if (Key == -1) {
    uint64_t v6 = *(unsigned int *)(v4 + 8);
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)v4 + 8 * v6;
  if (v7 == **(void **)(a1 + 16) + 8 * *(unsigned int *)(*(void *)(a1 + 16) + 8)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)v7 + 8);
  }
}

void anonymous namespace'::NumberingResourceBuilder::~NumberingResourceBuilder(_anonymous_namespace_::NumberingResourceBuilder *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t anonymous namespace'::NumberingResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  uint64_t v6 = *(void *)(v4 + 104);
  uint64_t v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(void *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0) {
    uint64_t v7 = (unsigned int *)(v4 + 112);
  }
  unsigned int v8 = *v7;
  if (v6 + 24 * v8 != *(void *)(*(void *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(void *)(a1 + 8) + 112))
  {
    unsigned int v9 = *(_DWORD **)(a1 + 16);
    int v10 = (*v9)++;
    uint64_t v11 = *(void *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
    *(unsigned char *)(v11 + 28) = 0;
  }
  return result;
}

uint64_t anonymous namespace'::NumberingResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  uint64_t v6 = *(void *)(v4 + 104);
  uint64_t v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(void *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0) {
    uint64_t v7 = (unsigned int *)(v4 + 112);
  }
  unsigned int v8 = *v7;
  if (v6 + 24 * v8 != *(void *)(*(void *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(void *)(a1 + 8) + 112))
  {
    unsigned int v9 = *(_DWORD **)(a1 + 16);
    int v10 = (*v9)++;
    uint64_t v11 = *(void *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
    *(unsigned char *)(v11 + 28) = 0;
  }
  return result;
}

uint64_t anonymous namespace'::NumberingResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 80), (uint64_t)v12, &v13);
  uint64_t v6 = *(void *)(v4 + 104);
  uint64_t v7 = (unsigned int *)(v13 + 16);
  if ((result & (v13 != *(void *)(v4 + 80) + 24 * *(unsigned int *)(v4 + 96))) == 0) {
    uint64_t v7 = (unsigned int *)(v4 + 112);
  }
  unsigned int v8 = *v7;
  if (v6 + 24 * v8 != *(void *)(*(void *)(a1 + 8) + 104)
                       + 24 * *(unsigned int *)(*(void *)(a1 + 8) + 112))
  {
    unsigned int v9 = *(_DWORD **)(a1 + 16);
    int v10 = (*v9)++;
    uint64_t v11 = *(void *)(v6 + 24 * v8 + 16);
    *(_DWORD *)(v11 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = v10;
    *(unsigned char *)(v11 + 28) = 0;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)a1;
      if (*(_DWORD *)(v7 + 12) > *(_DWORD *)(*(void *)a1 + 12))
      {
        *(void *)a1 = v7;
        *((void *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      unint64_t v20 = a3 >> 1;
      unint64_t v21 = &a1[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, v21, v22, a4);
        unsigned int v24 = &a4[8 * v20];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
        uint64_t v25 = v24;
        unsigned int v26 = a4;
        uint64_t v27 = v6;
        uint64_t v28 = &a4[8 * a3];
        do
        {
          if (v25 == v28)
          {
            if (v26 == v24) {
              return result;
            }
            unint64_t v47 = &a4[8 * v20] - v26 - 8;
            if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
            {
              uint64_t v51 = 0;
              uint64_t v52 = (v47 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              long long v48 = &v26[v53];
              uint64_t v49 = (__n128 *)((char *)v27 + v53);
              uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v55 = &v27[v51];
                __n128 result = *(__n128 *)&v26[v51 * 16];
                __n128 v56 = *(__n128 *)&v26[v51 * 16 + 16];
                *uint64_t v55 = result;
                v55[1] = v56;
                v51 += 2;
                v54 -= 4;
              }
              while (v54);
              if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              long long v48 = v26;
              uint64_t v49 = v27;
            }
            do
            {
              unint64_t v50 = *(void *)v48;
              v48 += 8;
              v49->n128_u64[0] = v50;
              uint64_t v49 = (__n128 *)((char *)v49 + 8);
            }
            while (v48 != v24);
            return result;
          }
          unint64_t v29 = v25;
          unint64_t v30 = *(void *)v25;
          unint64_t v31 = *(void *)v26;
          unsigned int v32 = *(_DWORD *)(v30 + 12);
          unsigned int v33 = *(_DWORD *)(*(void *)v26 + 12);
          if (v32 > v33) {
            unint64_t v31 = v30;
          }
          v26 += 8 * (v32 <= v33);
          uint64_t v25 = &v29[8 * (v32 > v33)];
          v27->n128_u64[0] = v31;
          uint64_t v27 = (__n128 *)((char *)v27 + 8);
          uint64_t v6 = (__n128 *)((char *)v6 + 8);
        }
        while (v26 != v24);
        if (v25 != v28)
        {
          uint64_t v34 = -8;
          if (v32 <= v33) {
            uint64_t v34 = 0;
          }
          unint64_t v35 = &a4[8 * a3] - v29 + v34 - 8;
          if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20) {
            goto LABEL_50;
          }
          unint64_t v36 = 0;
          uint64_t v37 = (v35 >> 3) + 1;
          BOOL v38 = v32 > v33;
          uint64_t v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v25 += v39;
          int v40 = (__n128 *)((char *)v27 + v39);
          char v41 = v38 ? 1 : 2;
          uint64_t v42 = &v29[8 * (v41 & 1)];
          uint64_t v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            unint64_t v44 = &v27[v36];
            __n128 result = *(__n128 *)&v42[v36 * 16];
            __n128 v45 = *(__n128 *)&v42[v36 * 16 + 16];
            *unint64_t v44 = result;
            v44[1] = v45;
            v36 += 2;
            v43 -= 4;
          }
          while (v43);
          uint64_t v27 = v40;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              unint64_t v46 = *(void *)v25;
              v25 += 8;
              v27->n128_u64[0] = v46;
              uint64_t v27 = (__n128 *)((char *)v27 + 8);
            }
            while (v25 != v28);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      int v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        uint64_t v11 = 0;
        unint64_t v12 = a1;
        do
        {
          uint64_t v14 = *(void *)v12;
          unint64_t v12 = v10;
          uint64_t v15 = *(void *)v10;
          unsigned int v16 = *(_DWORD *)(v15 + 12);
          if (v16 > *(_DWORD *)(v14 + 12))
          {
            uint64_t v17 = v11;
            do
            {
              *(void *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                uint64_t v13 = a1;
                goto LABEL_10;
              }
              uint64_t v14 = *(void *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 12));
            uint64_t v13 = &a1[v17 + 8];
LABEL_10:
            *(void *)uint64_t v13 = v15;
          }
          int v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(void *)uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *((void *)a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 12);
      unsigned int v10 = *(_DWORD *)(*(void *)a1 + 12);
      if (v9 <= v10) {
        uint64_t v8 = *(void *)a1;
      }
      *(void *)a4 = v8;
      uint64_t v4 = a4 + 8;
      if (v9 <= v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = 8 * (a3 >> 1);
      uint64_t v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      uint64_t v25 = v4;
      unsigned int v26 = v6;
      uint64_t v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23) {
            return result;
          }
          unint64_t v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            uint64_t v49 = 0;
            uint64_t v50 = (v45 >> 3) + 1;
            uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v46 = &v4[v51];
            unint64_t v47 = &v26[v51];
            uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v53 = &v4[v49];
              __n128 result = *(__n128 *)&v26[v49];
              long long v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)uint64_t v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            unint64_t v46 = v4;
            unint64_t v47 = v26;
          }
          do
          {
            uint64_t v48 = *(void *)v47;
            v47 += 8;
            *(void *)unint64_t v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v27;
        uint64_t v30 = *(void *)v26;
        unsigned int v31 = *(_DWORD *)(v29 + 12);
        unsigned int v32 = *(_DWORD *)(*(void *)v26 + 12);
        if (v31 > v32) {
          uint64_t v30 = v29;
        }
        uint64_t v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(void *)uint64_t v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        uint64_t v33 = -8;
        if (v31 <= v32) {
          uint64_t v33 = 0;
        }
        unint64_t v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68) {
          goto LABEL_49;
        }
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v35 = 0;
        uint64_t v36 = (v34 >> 3) + 1;
        BOOL v37 = v31 > v32;
        uint64_t v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = &v4[v38];
        v27 += v38;
        int v40 = &v28[8 * v37];
        uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v42 = &v4[v35];
          __n128 result = *(__n128 *)&v40[v35];
          long long v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)uint64_t v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        uint64_t v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            uint64_t v44 = *(void *)v27;
            v27 += 8;
            *(void *)uint64_t v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v11 = a1 + 8;
      *(void *)a4 = *(void *)a1;
      if (a1 + 8 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        uint64_t v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            uint64_t v16 = *v14++;
            uint64_t v15 = v16;
            if (*(_DWORD *)(*(void *)v11 + 12) > *(_DWORD *)(v16 + 12)) {
              break;
            }
            uint64_t *v14 = *(void *)v11;
            v11 += 8;
            v12 += 8;
            uint64_t v13 = (char *)v14;
            if (v11 == a2) {
              return result;
            }
          }
          *((void *)v13 + 1) = v15;
          uint64_t v17 = a4;
          if (v13 != a4)
          {
            uint64_t v18 = v12;
            while (1)
            {
              uint64_t v17 = &a4[v18];
              uint64_t v19 = *(void *)&a4[v18 - 8];
              if (*(_DWORD *)(*(void *)v11 + 12) <= *(_DWORD *)(v19 + 12)) {
                break;
              }
              *(void *)uint64_t v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                uint64_t v17 = a4;
                break;
              }
            }
          }
          uint64_t v20 = *(void *)v11;
          v11 += 8;
          *(void *)uint64_t v17 = v20;
          v12 += 8;
          uint64_t v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(__n128 *a1, __n128 *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v14 = -a4;
    while (1)
    {
      uint64_t v15 = a1->n128_i64[v13 / 8];
      if (*(_DWORD *)(a2->n128_u64[0] + 12) > *(_DWORD *)(v15 + 12)) {
        break;
      }
      v13 += 8;
      if (__CFADD__(v14++, 1)) {
        return result;
      }
    }
    uint64_t v17 = (__n128 *)((char *)a1 + v13);
    if (-v14 >= v8)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v15;
        return result;
      }
      if (v14 <= 0) {
        uint64_t v35 = -v14;
      }
      else {
        uint64_t v35 = 1 - v14;
      }
      uint64_t v27 = v35 >> 1;
      unint64_t v21 = (__n128 *)((char *)a1 + 8 * (v35 >> 1) + v13);
      uint64_t v20 = a2;
      if (a2 != (__n128 *)a3)
      {
        unint64_t v36 = (a3 - (char *)a2) >> 3;
        uint64_t v20 = a2;
        do
        {
          unint64_t v37 = v36 >> 1;
          uint64_t v38 = &v20->n128_u64[v36 >> 1];
          unint64_t v40 = *v38;
          uint64_t v39 = (__n128 *)(v38 + 1);
          v36 += ~(v36 >> 1);
          if (*(_DWORD *)(v40 + 12) > *(_DWORD *)(v21->n128_u64[0] + 12)) {
            uint64_t v20 = v39;
          }
          else {
            unint64_t v36 = v37;
          }
        }
        while (v36);
      }
      uint64_t v19 = ((char *)v20 - (char *)a2) >> 3;
      if (v21 != a2)
      {
LABEL_22:
        uint64_t v28 = (char *)v20 - (char *)a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          uint64_t v29 = (__n128 *)&v21->n128_i8[8];
          uint64_t v114 = v19;
          if (&v21->n128_i8[8] == (__int8 *)a2)
          {
            unint64_t v110 = v21->n128_u64[0];
            unint64_t v112 = a6;
            uint64_t v41 = a2;
            size_t v42 = (char *)v20 - (char *)a2;
            long long v43 = a3;
            uint64_t v44 = v27;
            memmove(v21, v41, v42);
            uint64_t v17 = (__n128 *)((char *)a1 + v13);
            uint64_t v19 = v114;
            uint64_t v27 = v44;
            a3 = v43;
            a6 = v112;
            a2 = (__n128 *)((char *)v21 + v28);
            *(unint64_t *)((char *)v21->n128_u64 + v28) = v110;
          }
          else
          {
            uint64_t v30 = v27;
            unsigned int v31 = (__n128 *)&a2->n128_i8[8];
            if (&a2->n128_i8[8] == (__int8 *)v20)
            {
              uint64_t v45 = v20[-1].n128_i64[1];
              a2 = (__n128 *)&v21->n128_i8[8];
              if (&v20[-1].n128_i8[8] != (__int8 *)v21)
              {
                unint64_t v113 = a6;
                unint64_t v46 = a3;
                uint64_t v111 = v20[-1].n128_i64[1];
                memmove(&v21->n128_i8[8], v21, &v20[-1].n128_i8[8] - (__int8 *)v21);
                uint64_t v45 = v111;
                a6 = v113;
                uint64_t v17 = (__n128 *)((char *)a1 + v13);
                a3 = v46;
              }
              v21->n128_u64[0] = v45;
              uint64_t v27 = v30;
              uint64_t v19 = v114;
            }
            else
            {
              uint64_t v32 = ((char *)a2 - (char *)v21) >> 3;
              if (v32 == v28 >> 3)
              {
                do
                {
                  uint64_t v33 = v29[-1].n128_i64[1];
                  v29[-1].n128_u64[1] = v31[-1].n128_u64[1];
                  v31[-1].n128_u64[1] = v33;
                  if (v29 == a2) {
                    break;
                  }
                  uint64_t v29 = (__n128 *)((char *)v29 + 8);
                  BOOL v34 = v31 == v20;
                  unsigned int v31 = (__n128 *)((char *)v31 + 8);
                }
                while (!v34);
              }
              else
              {
                uint64_t v47 = v28 >> 3;
                uint64_t v48 = ((char *)a2 - (char *)v21) >> 3;
                do
                {
                  uint64_t v49 = v48;
                  uint64_t v48 = v47;
                  uint64_t v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  uint64_t v50 = (__n128 *)((char *)v21 + 8 * v48);
                  do
                  {
                    unint64_t v52 = v50[-1].n128_u64[1];
                    uint64_t v50 = (__n128 *)((char *)v50 - 8);
                    unint64_t v51 = v52;
                    uint64_t v53 = (__n128 *)((char *)v50 + 8 * v32);
                    long long v54 = v50;
                    do
                    {
                      uint64_t v55 = v53;
                      v54->n128_u64[0] = v53->n128_u64[0];
                      uint64_t v56 = ((char *)v20 - (char *)v53) >> 3;
                      BOOL v57 = __OFSUB__(v32, v56);
                      uint64_t v58 = v32 - v56;
                      char v94 = (v58 < 0) ^ v57;
                      uint64_t v53 = (__n128 *)((char *)v21 + 8 * v58);
                      if (v94) {
                        uint64_t v53 = (__n128 *)((char *)v55 + 8 * v32);
                      }
                      long long v54 = v55;
                    }
                    while (v53 != v50);
                    v55->n128_u64[0] = v51;
                  }
                  while (v50 != v21);
                }
                a2 = (__n128 *)((char *)v21 + 8 * (v28 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v18 = v8;
      }
      else {
        uint64_t v18 = v8 + 1;
      }
      uint64_t v19 = v18 >> 1;
      uint64_t v20 = (__n128 *)((char *)a2 + 8 * (v18 >> 1));
      unint64_t v21 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        unint64_t v22 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
        unint64_t v21 = (__n128 *)((char *)a1 + v13);
        do
        {
          unint64_t v23 = v22 >> 1;
          unsigned int v24 = &v21->n128_i64[v22 >> 1];
          uint64_t v26 = *v24;
          uint64_t v25 = (__n128 *)(v24 + 1);
          v22 += ~(v22 >> 1);
          if (*(_DWORD *)(v20->n128_u64[0] + 12) > *(_DWORD *)(v26 + 12)) {
            unint64_t v22 = v23;
          }
          else {
            unint64_t v21 = v25;
          }
        }
        while (v22);
      }
      uint64_t v27 = (uint64_t)((char *)v21 - (char *)a1 - v13) >> 3;
      if (v21 != a2) {
        goto LABEL_22;
      }
    }
    a2 = v20;
LABEL_57:
    a4 = -(v27 + v14);
    uint64_t v59 = v8 - v19;
    if (v27 + v19 >= v8 - (v27 + v19) - v14)
    {
      BOOL v64 = a2;
      int v65 = v20;
      uint64_t v66 = v27;
      uint64_t v67 = v19;
      uint64_t v68 = v8 - v19;
      unsigned int v69 = a6;
      a1 = v17;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(a2, v65, a3, -(v27 + v14), v68, a6, a7);
      a6 = v69;
      a2 = v21;
      uint64_t v70 = v67;
      a4 = v66;
      a3 = (char *)v64;
      uint64_t v8 = v70;
      if (!v70) {
        return result;
      }
    }
    else
    {
      uint64_t v60 = &a1->n128_u64[v13 / 8];
      uint64_t v61 = a6;
      uint64_t v62 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v60, v21, a2, v27, v19, a6, a7);
      a3 = v62;
      a6 = v61;
      a1 = a2;
      a2 = v20;
      uint64_t v8 = v59;
      if (!v59) {
        return result;
      }
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      unint64_t v81 = (char *)a2 - (char *)a1 - 8;
      int v82 = a6;
      __n128 v83 = a1;
      if (v81 < 0x18) {
        goto LABEL_111;
      }
      int v82 = a6;
      __n128 v83 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20) {
        goto LABEL_111;
      }
      uint64_t v84 = (v81 >> 3) + 1;
      uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      int v82 = &a6[v85];
      __n128 v83 = (__n128 *)((char *)a1 + v85);
      uint64_t v86 = a1 + 1;
      unint64_t v87 = (__n128 *)(a6 + 16);
      uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v86[-1];
        __n128 v89 = *v86;
        v87[-1] = result;
        *unint64_t v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_111:
        do
        {
          unint64_t v90 = v83->n128_u64[0];
          __n128 v83 = (__n128 *)((char *)v83 + 8);
          *(void *)int v82 = v90;
          v82 += 8;
        }
        while (v83 != a2);
      }
      if (v82 != a6)
      {
        while (a2 != (__n128 *)a3)
        {
          unint64_t v91 = a2->n128_u64[0];
          unsigned int v92 = *(_DWORD *)(a2->n128_u64[0] + 12);
          unsigned int v93 = *(_DWORD *)(*(void *)a6 + 12);
          char v94 = v92 > v93;
          BOOL v95 = v92 <= v93;
          if (v94) {
            unsigned int v96 = 1;
          }
          else {
            unsigned int v96 = 0;
          }
          if (!v94) {
            unint64_t v91 = *(void *)a6;
          }
          a2 = (__n128 *)((char *)a2 + 8 * v96);
          a6 += 8 * v95;
          a1->n128_u64[0] = v91;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a6 == v82) {
            return result;
          }
        }
        memmove(a1, a6, v82 - a6);
      }
    }
    return result;
  }
  int64_t v71 = a3 - (char *)a2;
  if (a3 == (char *)a2) {
    return result;
  }
  unint64_t v72 = v71 - 8;
  if ((unint64_t)(v71 - 8) < 0x18)
  {
    BOOL v73 = a6;
    unsigned int v74 = a2;
    do
    {
LABEL_91:
      unint64_t v97 = v74->n128_u64[0];
      unsigned int v74 = (__n128 *)((char *)v74 + 8);
      *(void *)BOOL v73 = v97;
      v73 += 8;
    }
    while (v74 != (__n128 *)a3);
    goto LABEL_92;
  }
  BOOL v73 = a6;
  unsigned int v74 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20) {
    goto LABEL_91;
  }
  uint64_t v75 = (v72 >> 3) + 1;
  uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
  BOOL v73 = &a6[v76];
  unsigned int v74 = (__n128 *)((char *)a2 + v76);
  uint64_t v77 = a2 + 1;
  uint64_t v78 = (__n128 *)(a6 + 16);
  uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v77[-1];
    __n128 v80 = *v77;
    v78[-1] = result;
    __n128 *v78 = v80;
    v77 += 2;
    v78 += 2;
    v79 -= 4;
  }
  while (v79);
  if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_91;
  }
LABEL_92:
  if (v73 != a6)
  {
    unint64_t v98 = a3;
    while (a2 != a1)
    {
      uint64_t v99 = a2[-1].n128_i64[1];
      if (*(_DWORD *)(*((void *)v73 - 1) + 12) > *(_DWORD *)(v99 + 12))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        uint64_t v99 = *((void *)v73 - 1);
        v73 -= 8;
      }
      *((void *)a3 - 1) = v99;
      a3 -= 8;
      v98 -= 8;
      if (v73 == a6) {
        return result;
      }
    }
    unint64_t v100 = v73 - a6 - 8;
    if (v100 < 0x58 || (unint64_t)(v73 - v98) < 0x20)
    {
      unint64_t v101 = v73;
      uint64_t v102 = a3;
      goto LABEL_103;
    }
    uint64_t v105 = 0;
    uint64_t v106 = (v100 >> 3) + 1;
    uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v101 = &v73[-v107];
    uint64_t v102 = &a3[-v107];
    uint64_t v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v73[v105 - 16];
      char v109 = &a3[v105];
      *((_OWORD *)v109 - 2) = *(_OWORD *)&v73[v105 - 32];
      *((__n128 *)v109 - 1) = result;
      v105 -= 32;
      v108 -= 4;
    }
    while (v108);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_103:
      uint64_t v103 = v102 - 8;
      do
      {
        uint64_t v104 = *((void *)v101 - 1);
        v101 -= 8;
        *(void *)uint64_t v103 = v104;
        v103 -= 8;
      }
      while (v101 != a6);
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)a1;
      if (*(_DWORD *)(v7 + 20) > *(_DWORD *)(*(void *)a1 + 20))
      {
        *(void *)a1 = v7;
        *((void *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      unint64_t v20 = a3 >> 1;
      unint64_t v21 = &a1[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, v21, v22, a4);
        unsigned int v24 = &a4[8 * v20];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
        uint64_t v25 = v24;
        uint64_t v26 = a4;
        uint64_t v27 = v6;
        uint64_t v28 = &a4[8 * a3];
        do
        {
          if (v25 == v28)
          {
            if (v26 == v24) {
              return result;
            }
            unint64_t v47 = &a4[8 * v20] - v26 - 8;
            if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
            {
              uint64_t v51 = 0;
              uint64_t v52 = (v47 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v26[v53];
              uint64_t v49 = (__n128 *)((char *)v27 + v53);
              uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v55 = &v27[v51];
                __n128 result = *(__n128 *)&v26[v51 * 16];
                __n128 v56 = *(__n128 *)&v26[v51 * 16 + 16];
                *uint64_t v55 = result;
                v55[1] = v56;
                v51 += 2;
                v54 -= 4;
              }
              while (v54);
              if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v48 = v26;
              uint64_t v49 = v27;
            }
            do
            {
              unint64_t v50 = *(void *)v48;
              v48 += 8;
              v49->n128_u64[0] = v50;
              uint64_t v49 = (__n128 *)((char *)v49 + 8);
            }
            while (v48 != v24);
            return result;
          }
          uint64_t v29 = v25;
          unint64_t v30 = *(void *)v25;
          unint64_t v31 = *(void *)v26;
          unsigned int v32 = *(_DWORD *)(v30 + 20);
          unsigned int v33 = *(_DWORD *)(*(void *)v26 + 20);
          if (v32 > v33) {
            unint64_t v31 = v30;
          }
          v26 += 8 * (v32 <= v33);
          uint64_t v25 = &v29[8 * (v32 > v33)];
          v27->n128_u64[0] = v31;
          uint64_t v27 = (__n128 *)((char *)v27 + 8);
          uint64_t v6 = (__n128 *)((char *)v6 + 8);
        }
        while (v26 != v24);
        if (v25 != v28)
        {
          uint64_t v34 = -8;
          if (v32 <= v33) {
            uint64_t v34 = 0;
          }
          unint64_t v35 = &a4[8 * a3] - v29 + v34 - 8;
          if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20) {
            goto LABEL_50;
          }
          unint64_t v36 = 0;
          uint64_t v37 = (v35 >> 3) + 1;
          BOOL v38 = v32 > v33;
          uint64_t v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v25 += v39;
          unint64_t v40 = (__n128 *)((char *)v27 + v39);
          char v41 = v38 ? 1 : 2;
          size_t v42 = &v29[8 * (v41 & 1)];
          uint64_t v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v44 = &v27[v36];
            __n128 result = *(__n128 *)&v42[v36 * 16];
            __n128 v45 = *(__n128 *)&v42[v36 * 16 + 16];
            *uint64_t v44 = result;
            v44[1] = v45;
            v36 += 2;
            v43 -= 4;
          }
          while (v43);
          uint64_t v27 = v40;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              unint64_t v46 = *(void *)v25;
              v25 += 8;
              v27->n128_u64[0] = v46;
              uint64_t v27 = (__n128 *)((char *)v27 + 8);
            }
            while (v25 != v28);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      unsigned int v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          uint64_t v14 = *(void *)v12;
          uint64_t v12 = v10;
          uint64_t v15 = *(void *)v10;
          unsigned int v16 = *(_DWORD *)(v15 + 20);
          if (v16 > *(_DWORD *)(v14 + 20))
          {
            uint64_t v17 = v11;
            do
            {
              *(void *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                unint64_t v13 = a1;
                goto LABEL_10;
              }
              uint64_t v14 = *(void *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 20));
            unint64_t v13 = &a1[v17 + 8];
LABEL_10:
            *(void *)unint64_t v13 = v15;
          }
          unsigned int v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(void *)uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *((void *)a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      unsigned int v10 = *(_DWORD *)(*(void *)a1 + 20);
      if (v9 <= v10) {
        uint64_t v8 = *(void *)a1;
      }
      *(void *)a4 = v8;
      uint64_t v4 = a4 + 8;
      if (v9 <= v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = 8 * (a3 >> 1);
      unint64_t v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      uint64_t v25 = v4;
      uint64_t v26 = v6;
      uint64_t v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23) {
            return result;
          }
          unint64_t v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            uint64_t v49 = 0;
            uint64_t v50 = (v45 >> 3) + 1;
            uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v46 = &v4[v51];
            unint64_t v47 = &v26[v51];
            uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v53 = &v4[v49];
              __n128 result = *(__n128 *)&v26[v49];
              long long v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)uint64_t v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            unint64_t v46 = v4;
            unint64_t v47 = v26;
          }
          do
          {
            uint64_t v48 = *(void *)v47;
            v47 += 8;
            *(void *)unint64_t v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v27;
        uint64_t v30 = *(void *)v26;
        unsigned int v31 = *(_DWORD *)(v29 + 20);
        unsigned int v32 = *(_DWORD *)(*(void *)v26 + 20);
        if (v31 > v32) {
          uint64_t v30 = v29;
        }
        uint64_t v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(void *)uint64_t v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        uint64_t v33 = -8;
        if (v31 <= v32) {
          uint64_t v33 = 0;
        }
        unint64_t v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68) {
          goto LABEL_49;
        }
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v35 = 0;
        uint64_t v36 = (v34 >> 3) + 1;
        BOOL v37 = v31 > v32;
        uint64_t v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = &v4[v38];
        v27 += v38;
        unint64_t v40 = &v28[8 * v37];
        uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          size_t v42 = &v4[v35];
          __n128 result = *(__n128 *)&v40[v35];
          long long v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)size_t v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        uint64_t v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            uint64_t v44 = *(void *)v27;
            v27 += 8;
            *(void *)uint64_t v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v11 = a1 + 8;
      *(void *)a4 = *(void *)a1;
      if (a1 + 8 != a2)
      {
        uint64_t v12 = 0;
        unint64_t v13 = a4;
        uint64_t v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            uint64_t v16 = *v14++;
            uint64_t v15 = v16;
            if (*(_DWORD *)(*(void *)v11 + 20) > *(_DWORD *)(v16 + 20)) {
              break;
            }
            uint64_t *v14 = *(void *)v11;
            v11 += 8;
            v12 += 8;
            unint64_t v13 = (char *)v14;
            if (v11 == a2) {
              return result;
            }
          }
          *((void *)v13 + 1) = v15;
          uint64_t v17 = a4;
          if (v13 != a4)
          {
            uint64_t v18 = v12;
            while (1)
            {
              uint64_t v17 = &a4[v18];
              uint64_t v19 = *(void *)&a4[v18 - 8];
              if (*(_DWORD *)(*(void *)v11 + 20) <= *(_DWORD *)(v19 + 20)) {
                break;
              }
              *(void *)uint64_t v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                uint64_t v17 = a4;
                break;
              }
            }
          }
          uint64_t v20 = *(void *)v11;
          v11 += 8;
          *(void *)uint64_t v17 = v20;
          v12 += 8;
          unint64_t v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(__n128 *a1, __n128 *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v14 = -a4;
    while (1)
    {
      uint64_t v15 = a1->n128_i64[v13 / 8];
      if (*(_DWORD *)(a2->n128_u64[0] + 20) > *(_DWORD *)(v15 + 20)) {
        break;
      }
      v13 += 8;
      if (__CFADD__(v14++, 1)) {
        return result;
      }
    }
    uint64_t v17 = (__n128 *)((char *)a1 + v13);
    if (-v14 >= v8)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v15;
        return result;
      }
      if (v14 <= 0) {
        uint64_t v35 = -v14;
      }
      else {
        uint64_t v35 = 1 - v14;
      }
      uint64_t v27 = v35 >> 1;
      unint64_t v21 = (__n128 *)((char *)a1 + 8 * (v35 >> 1) + v13);
      uint64_t v20 = a2;
      if (a2 != (__n128 *)a3)
      {
        unint64_t v36 = (a3 - (char *)a2) >> 3;
        uint64_t v20 = a2;
        do
        {
          unint64_t v37 = v36 >> 1;
          uint64_t v38 = &v20->n128_u64[v36 >> 1];
          unint64_t v40 = *v38;
          uint64_t v39 = (__n128 *)(v38 + 1);
          v36 += ~(v36 >> 1);
          if (*(_DWORD *)(v40 + 20) > *(_DWORD *)(v21->n128_u64[0] + 20)) {
            uint64_t v20 = v39;
          }
          else {
            unint64_t v36 = v37;
          }
        }
        while (v36);
      }
      uint64_t v19 = ((char *)v20 - (char *)a2) >> 3;
      if (v21 != a2)
      {
LABEL_22:
        uint64_t v28 = (char *)v20 - (char *)a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          uint64_t v29 = (__n128 *)&v21->n128_i8[8];
          uint64_t v114 = v19;
          if (&v21->n128_i8[8] == (__int8 *)a2)
          {
            unint64_t v110 = v21->n128_u64[0];
            unint64_t v112 = a6;
            uint64_t v41 = a2;
            size_t v42 = (char *)v20 - (char *)a2;
            long long v43 = a3;
            uint64_t v44 = v27;
            memmove(v21, v41, v42);
            uint64_t v17 = (__n128 *)((char *)a1 + v13);
            uint64_t v19 = v114;
            uint64_t v27 = v44;
            a3 = v43;
            a6 = v112;
            a2 = (__n128 *)((char *)v21 + v28);
            *(unint64_t *)((char *)v21->n128_u64 + v28) = v110;
          }
          else
          {
            uint64_t v30 = v27;
            unsigned int v31 = (__n128 *)&a2->n128_i8[8];
            if (&a2->n128_i8[8] == (__int8 *)v20)
            {
              uint64_t v45 = v20[-1].n128_i64[1];
              a2 = (__n128 *)&v21->n128_i8[8];
              if (&v20[-1].n128_i8[8] != (__int8 *)v21)
              {
                unint64_t v113 = a6;
                unint64_t v46 = a3;
                uint64_t v111 = v20[-1].n128_i64[1];
                memmove(&v21->n128_i8[8], v21, &v20[-1].n128_i8[8] - (__int8 *)v21);
                uint64_t v45 = v111;
                a6 = v113;
                uint64_t v17 = (__n128 *)((char *)a1 + v13);
                a3 = v46;
              }
              v21->n128_u64[0] = v45;
              uint64_t v27 = v30;
              uint64_t v19 = v114;
            }
            else
            {
              uint64_t v32 = ((char *)a2 - (char *)v21) >> 3;
              if (v32 == v28 >> 3)
              {
                do
                {
                  uint64_t v33 = v29[-1].n128_i64[1];
                  v29[-1].n128_u64[1] = v31[-1].n128_u64[1];
                  v31[-1].n128_u64[1] = v33;
                  if (v29 == a2) {
                    break;
                  }
                  uint64_t v29 = (__n128 *)((char *)v29 + 8);
                  BOOL v34 = v31 == v20;
                  unsigned int v31 = (__n128 *)((char *)v31 + 8);
                }
                while (!v34);
              }
              else
              {
                uint64_t v47 = v28 >> 3;
                uint64_t v48 = ((char *)a2 - (char *)v21) >> 3;
                do
                {
                  uint64_t v49 = v48;
                  uint64_t v48 = v47;
                  uint64_t v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  uint64_t v50 = (__n128 *)((char *)v21 + 8 * v48);
                  do
                  {
                    unint64_t v52 = v50[-1].n128_u64[1];
                    uint64_t v50 = (__n128 *)((char *)v50 - 8);
                    unint64_t v51 = v52;
                    uint64_t v53 = (__n128 *)((char *)v50 + 8 * v32);
                    long long v54 = v50;
                    do
                    {
                      uint64_t v55 = v53;
                      v54->n128_u64[0] = v53->n128_u64[0];
                      uint64_t v56 = ((char *)v20 - (char *)v53) >> 3;
                      BOOL v57 = __OFSUB__(v32, v56);
                      uint64_t v58 = v32 - v56;
                      char v94 = (v58 < 0) ^ v57;
                      uint64_t v53 = (__n128 *)((char *)v21 + 8 * v58);
                      if (v94) {
                        uint64_t v53 = (__n128 *)((char *)v55 + 8 * v32);
                      }
                      long long v54 = v55;
                    }
                    while (v53 != v50);
                    v55->n128_u64[0] = v51;
                  }
                  while (v50 != v21);
                }
                a2 = (__n128 *)((char *)v21 + 8 * (v28 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v18 = v8;
      }
      else {
        uint64_t v18 = v8 + 1;
      }
      uint64_t v19 = v18 >> 1;
      uint64_t v20 = (__n128 *)((char *)a2 + 8 * (v18 >> 1));
      unint64_t v21 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        unint64_t v22 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
        unint64_t v21 = (__n128 *)((char *)a1 + v13);
        do
        {
          unint64_t v23 = v22 >> 1;
          unsigned int v24 = &v21->n128_i64[v22 >> 1];
          uint64_t v26 = *v24;
          uint64_t v25 = (__n128 *)(v24 + 1);
          v22 += ~(v22 >> 1);
          if (*(_DWORD *)(v20->n128_u64[0] + 20) > *(_DWORD *)(v26 + 20)) {
            unint64_t v22 = v23;
          }
          else {
            unint64_t v21 = v25;
          }
        }
        while (v22);
      }
      uint64_t v27 = (uint64_t)((char *)v21 - (char *)a1 - v13) >> 3;
      if (v21 != a2) {
        goto LABEL_22;
      }
    }
    a2 = v20;
LABEL_57:
    a4 = -(v27 + v14);
    uint64_t v59 = v8 - v19;
    if (v27 + v19 >= v8 - (v27 + v19) - v14)
    {
      BOOL v64 = a2;
      int v65 = v20;
      uint64_t v66 = v27;
      uint64_t v67 = v19;
      uint64_t v68 = v8 - v19;
      unsigned int v69 = a6;
      a1 = v17;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(a2, v65, a3, -(v27 + v14), v68, a6, a7);
      a6 = v69;
      a2 = v21;
      uint64_t v70 = v67;
      a4 = v66;
      a3 = (char *)v64;
      uint64_t v8 = v70;
      if (!v70) {
        return result;
      }
    }
    else
    {
      uint64_t v60 = &a1->n128_u64[v13 / 8];
      uint64_t v61 = a6;
      uint64_t v62 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::OpNameNumbering **>>(v60, v21, a2, v27, v19, a6, a7);
      a3 = v62;
      a6 = v61;
      a1 = a2;
      a2 = v20;
      uint64_t v8 = v59;
      if (!v59) {
        return result;
      }
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      unint64_t v81 = (char *)a2 - (char *)a1 - 8;
      int v82 = a6;
      __n128 v83 = a1;
      if (v81 < 0x18) {
        goto LABEL_111;
      }
      int v82 = a6;
      __n128 v83 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20) {
        goto LABEL_111;
      }
      uint64_t v84 = (v81 >> 3) + 1;
      uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      int v82 = &a6[v85];
      __n128 v83 = (__n128 *)((char *)a1 + v85);
      uint64_t v86 = a1 + 1;
      unint64_t v87 = (__n128 *)(a6 + 16);
      uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v86[-1];
        __n128 v89 = *v86;
        v87[-1] = result;
        *unint64_t v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_111:
        do
        {
          unint64_t v90 = v83->n128_u64[0];
          __n128 v83 = (__n128 *)((char *)v83 + 8);
          *(void *)int v82 = v90;
          v82 += 8;
        }
        while (v83 != a2);
      }
      if (v82 != a6)
      {
        while (a2 != (__n128 *)a3)
        {
          unint64_t v91 = a2->n128_u64[0];
          unsigned int v92 = *(_DWORD *)(a2->n128_u64[0] + 20);
          unsigned int v93 = *(_DWORD *)(*(void *)a6 + 20);
          char v94 = v92 > v93;
          BOOL v95 = v92 <= v93;
          if (v94) {
            unsigned int v96 = 1;
          }
          else {
            unsigned int v96 = 0;
          }
          if (!v94) {
            unint64_t v91 = *(void *)a6;
          }
          a2 = (__n128 *)((char *)a2 + 8 * v96);
          a6 += 8 * v95;
          a1->n128_u64[0] = v91;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a6 == v82) {
            return result;
          }
        }
        memmove(a1, a6, v82 - a6);
      }
    }
    return result;
  }
  int64_t v71 = a3 - (char *)a2;
  if (a3 == (char *)a2) {
    return result;
  }
  unint64_t v72 = v71 - 8;
  if ((unint64_t)(v71 - 8) < 0x18)
  {
    BOOL v73 = a6;
    unsigned int v74 = a2;
    do
    {
LABEL_91:
      unint64_t v97 = v74->n128_u64[0];
      unsigned int v74 = (__n128 *)((char *)v74 + 8);
      *(void *)BOOL v73 = v97;
      v73 += 8;
    }
    while (v74 != (__n128 *)a3);
    goto LABEL_92;
  }
  BOOL v73 = a6;
  unsigned int v74 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20) {
    goto LABEL_91;
  }
  uint64_t v75 = (v72 >> 3) + 1;
  uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
  BOOL v73 = &a6[v76];
  unsigned int v74 = (__n128 *)((char *)a2 + v76);
  uint64_t v77 = a2 + 1;
  uint64_t v78 = (__n128 *)(a6 + 16);
  uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v77[-1];
    __n128 v80 = *v77;
    v78[-1] = result;
    __n128 *v78 = v80;
    v77 += 2;
    v78 += 2;
    v79 -= 4;
  }
  while (v79);
  if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_91;
  }
LABEL_92:
  if (v73 != a6)
  {
    unint64_t v98 = a3;
    while (a2 != a1)
    {
      uint64_t v99 = a2[-1].n128_i64[1];
      if (*(_DWORD *)(*((void *)v73 - 1) + 20) > *(_DWORD *)(v99 + 20))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        uint64_t v99 = *((void *)v73 - 1);
        v73 -= 8;
      }
      *((void *)a3 - 1) = v99;
      a3 -= 8;
      v98 -= 8;
      if (v73 == a6) {
        return result;
      }
    }
    unint64_t v100 = v73 - a6 - 8;
    if (v100 < 0x58 || (unint64_t)(v73 - v98) < 0x20)
    {
      unint64_t v101 = v73;
      uint64_t v102 = a3;
      goto LABEL_103;
    }
    uint64_t v105 = 0;
    uint64_t v106 = (v100 >> 3) + 1;
    uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v101 = &v73[-v107];
    uint64_t v102 = &a3[-v107];
    uint64_t v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v73[v105 - 16];
      char v109 = &a3[v105];
      *((_OWORD *)v109 - 2) = *(_OWORD *)&v73[v105 - 32];
      *((__n128 *)v109 - 1) = result;
      v105 -= 32;
      v108 -= 4;
    }
    while (v108);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_103:
      uint64_t v103 = v102 - 8;
      do
      {
        uint64_t v104 = *((void *)v101 - 1);
        v101 -= 8;
        *(void *)uint64_t v103 = v104;
        v103 -= 8;
      }
      while (v101 != a6);
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)a1;
      if (*(_DWORD *)(v7 + 12) > *(_DWORD *)(*(void *)a1 + 12))
      {
        *(void *)a1 = v7;
        *((void *)a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      unint64_t v20 = a3 >> 1;
      unint64_t v21 = &a1[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, v21, v22, a4);
        unsigned int v24 = &a4[8 * v20];
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6->n128_i8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24).n128_u64[0];
        uint64_t v25 = v24;
        uint64_t v26 = a4;
        uint64_t v27 = v6;
        uint64_t v28 = &a4[8 * a3];
        do
        {
          if (v25 == v28)
          {
            if (v26 == v24) {
              return result;
            }
            unint64_t v47 = &a4[8 * v20] - v26 - 8;
            if (v47 >= 0x38 && (unint64_t)((char *)v6 - v26) >= 0x20)
            {
              uint64_t v51 = 0;
              uint64_t v52 = (v47 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v26[v53];
              uint64_t v49 = (__n128 *)((char *)v27 + v53);
              uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v55 = &v27[v51];
                __n128 result = *(__n128 *)&v26[v51 * 16];
                __n128 v56 = *(__n128 *)&v26[v51 * 16 + 16];
                *uint64_t v55 = result;
                v55[1] = v56;
                v51 += 2;
                v54 -= 4;
              }
              while (v54);
              if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v48 = v26;
              uint64_t v49 = v27;
            }
            do
            {
              unint64_t v50 = *(void *)v48;
              v48 += 8;
              v49->n128_u64[0] = v50;
              uint64_t v49 = (__n128 *)((char *)v49 + 8);
            }
            while (v48 != v24);
            return result;
          }
          uint64_t v29 = v25;
          unint64_t v30 = *(void *)v25;
          unint64_t v31 = *(void *)v26;
          unsigned int v32 = *(_DWORD *)(v30 + 12);
          unsigned int v33 = *(_DWORD *)(*(void *)v26 + 12);
          if (v32 > v33) {
            unint64_t v31 = v30;
          }
          v26 += 8 * (v32 <= v33);
          uint64_t v25 = &v29[8 * (v32 > v33)];
          v27->n128_u64[0] = v31;
          uint64_t v27 = (__n128 *)((char *)v27 + 8);
          uint64_t v6 = (__n128 *)((char *)v6 + 8);
        }
        while (v26 != v24);
        if (v25 != v28)
        {
          uint64_t v34 = -8;
          if (v32 <= v33) {
            uint64_t v34 = 0;
          }
          unint64_t v35 = &a4[8 * a3] - v29 + v34 - 8;
          if (v35 < 0x78 || (unint64_t)((char *)v6 - &v29[8 * (v32 > v33)]) < 0x20) {
            goto LABEL_50;
          }
          unint64_t v36 = 0;
          uint64_t v37 = (v35 >> 3) + 1;
          BOOL v38 = v32 > v33;
          uint64_t v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v25 += v39;
          unint64_t v40 = (__n128 *)((char *)v27 + v39);
          char v41 = v38 ? 1 : 2;
          size_t v42 = &v29[8 * (v41 & 1)];
          uint64_t v43 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v44 = &v27[v36];
            __n128 result = *(__n128 *)&v42[v36 * 16];
            __n128 v45 = *(__n128 *)&v42[v36 * 16 + 16];
            *uint64_t v44 = result;
            v44[1] = v45;
            v36 += 2;
            v43 -= 4;
          }
          while (v43);
          uint64_t v27 = v40;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              unint64_t v46 = *(void *)v25;
              v25 += 8;
              v27->n128_u64[0] = v46;
              uint64_t v27 = (__n128 *)((char *)v27 + 8);
            }
            while (v25 != v28);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::AttributeNumbering **>>(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      unsigned int v10 = a1 + 8;
      if (a1 + 8 != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          uint64_t v14 = *(void *)v12;
          uint64_t v12 = v10;
          uint64_t v15 = *(void *)v10;
          unsigned int v16 = *(_DWORD *)(v15 + 12);
          if (v16 > *(_DWORD *)(v14 + 12))
          {
            uint64_t v17 = v11;
            do
            {
              *(void *)&a1[v17 + 8] = v14;
              if (!v17)
              {
                unint64_t v13 = a1;
                goto LABEL_10;
              }
              uint64_t v14 = *(void *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v16 > *(_DWORD *)(v14 + 12));
            unint64_t v13 = &a1[v17 + 8];
LABEL_10:
            *(void *)unint64_t v13 = v15;
          }
          unsigned int v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = a1;
    if (a3 == 1)
    {
LABEL_8:
      *(void *)uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *((void *)a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 12);
      unsigned int v10 = *(_DWORD *)(*(void *)a1 + 12);
      if (v9 <= v10) {
        uint64_t v8 = *(void *)a1;
      }
      *(void *)a4 = v8;
      uint64_t v4 = a4 + 8;
      if (v9 <= v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = 8 * (a3 >> 1);
      unint64_t v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::bytecode::detail::IRNumberingState::IRNumberingState(mlir::Operation *,mlir::BytecodeWriterConfig const&)::$_1 &,std::__wrap_iter<mlir::bytecode::detail::TypeNumbering **>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      uint64_t v25 = v4;
      uint64_t v26 = v6;
      uint64_t v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23) {
            return result;
          }
          unint64_t v45 = &v6[8 * v21] - v26 - 8;
          if (v45 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            uint64_t v49 = 0;
            uint64_t v50 = (v45 >> 3) + 1;
            uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v46 = &v4[v51];
            unint64_t v47 = &v26[v51];
            uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v53 = &v4[v49];
              __n128 result = *(__n128 *)&v26[v49];
              long long v54 = *(_OWORD *)&v26[v49 + 16];
              *(__n128 *)uint64_t v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 32;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            unint64_t v46 = v4;
            unint64_t v47 = v26;
          }
          do
          {
            uint64_t v48 = *(void *)v47;
            v47 += 8;
            *(void *)unint64_t v46 = v48;
            v46 += 8;
          }
          while (v47 != v23);
          return result;
        }
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v27;
        uint64_t v30 = *(void *)v26;
        unsigned int v31 = *(_DWORD *)(v29 + 12);
        unsigned int v32 = *(_DWORD *)(*(void *)v26 + 12);
        if (v31 > v32) {
          uint64_t v30 = v29;
        }
        uint64_t v27 = &v28[8 * (v31 > v32)];
        v26 += 8 * (v31 <= v32);
        *(void *)uint64_t v4 = v30;
        v4 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        uint64_t v33 = -8;
        if (v31 <= v32) {
          uint64_t v33 = 0;
        }
        unint64_t v34 = a2 - v28 + v33 - 8;
        if (v34 < 0x68) {
          goto LABEL_49;
        }
        if ((unint64_t)(v25 - &v28[8 * (v31 > v32)]) < 0x20) {
          goto LABEL_49;
        }
        uint64_t v35 = 0;
        uint64_t v36 = (v34 >> 3) + 1;
        BOOL v37 = v31 > v32;
        uint64_t v38 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = &v4[v38];
        v27 += v38;
        unint64_t v40 = &v28[8 * v37];
        uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          size_t v42 = &v4[v35];
          __n128 result = *(__n128 *)&v40[v35];
          long long v43 = *(_OWORD *)&v40[v35 + 16];
          *(__n128 *)size_t v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v35 += 32;
          v41 -= 4;
        }
        while (v41);
        uint64_t v4 = v39;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            uint64_t v44 = *(void *)v27;
            v27 += 8;
            *(void *)uint64_t v4 = v44;
            v4 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v11 = a1 + 8;
      *(void *)a4 = *(void *)a1;
      if (a1 + 8 != a2)
      {
        uint64_t v12 = 0;
        unint64_t v13 = a4;
        uint64_t v14 = (uint64_t *)a4;
        do
        {
          while (1)
          {
            uint64_t v16 = *v14++;
            uint64_t v15 = v16;
            if (*(_DWORD *)(*(void *)v11 + 12) > *(_DWORD *)(v16 + 12)) {
              break;
            }
            uint64_t *v14 = *(void *)v11;
            v11 += 8;
            v12 += 8;
            unint64_t v13 = (char *)v14;
            if (v11 == a2) {
              return result;
            }
          }
          *((void *)v13 + 1) = v15;
          uint64_t v17 = a4;
          if (v13 != a4)
          {
            uint64_t v18 = v12;
            while (1)
            {
              uint64_t v17 = &a4[v18];
              uint64_t v19 = *(void *)&a4[v18 - 8];
              if (*(_DWORD *)(*(void *)v11 + 12) <= *(_DWORD *)(v19 + 12)) {
                break;
              }
              *(void *)uint64_t v17 = v19;
              v18 -= 8;
              if (!v18)
              {
                uint64_t v17 = a4;
                break;
              }
            }
          }
          uint64_t v20 = *(void *)v11;
          v11 += 8;
          *(void *)uint64_t v17 = v20;
          v12 += 8;
          unint64_t v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    uint64_t v10 = *(void *)a1;
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)(v9 + 16) + 16);
    unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 == v11) {
        return;
      }
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(void *)a1 = v9;
    *((void *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return;
    }
    uint64_t v15 = a1 + 8;
    if (a1 + 8 == a2) {
      return;
    }
    uint64_t v16 = 0;
    uint64_t v17 = a1;
LABEL_13:
    uint64_t v19 = v17;
    uint64_t v17 = v15;
    uint64_t v20 = *((void *)v19 + 1);
    int v21 = **(_DWORD **)(a3 + 8);
    unsigned int v22 = *(_DWORD *)(*(void *)(v20 + 16) + 16);
    unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)v19 + 16) + 16);
    if (v22 == v21)
    {
      if (v23 == v21) {
        goto LABEL_12;
      }
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((void *)v19 + 1) = *(void *)v19;
    uint64_t v18 = a1;
    if (v19 == a1) {
      goto LABEL_11;
    }
    uint64_t v25 = v16;
    while (1)
    {
      uint64_t v26 = *(void *)&a1[v25 - 8];
      int v27 = **(_DWORD **)(a3 + 8);
      unsigned int v28 = *(_DWORD *)(*(void *)(v20 + 16) + 16);
      unsigned int v29 = *(_DWORD *)(*(void *)(v26 + 16) + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          uint64_t v18 = &a1[v25];
LABEL_11:
          *(void *)uint64_t v18 = v20;
LABEL_12:
          uint64_t v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2) {
            return;
          }
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        uint64_t v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(void *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        uint64_t v18 = a1;
        goto LABEL_11;
      }
    }
  }
  unint64_t v34 = a4 >> 1;
  uint64_t v35 = &a1[8 * (a4 >> 1)];
  unint64_t v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  BOOL v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  uint64_t v38 = v8;
  uint64_t v39 = v37;
  unint64_t v40 = a5;
  uint64_t v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37) {
          return;
        }
        unint64_t v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (v50 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v51 = &v8[v62];
          uint64_t v52 = &v40[v62];
          uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            BOOL v64 = &v8[v60];
            long long v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)BOOL v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            return;
          }
        }
        else
        {
          uint64_t v51 = v8;
          uint64_t v52 = v40;
        }
        do
        {
          uint64_t v53 = *(void *)v52;
          v52 += 8;
          *(void *)uint64_t v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      int v42 = **(_DWORD **)(a3 + 8);
      unsigned int v43 = *(_DWORD *)(*(void *)(*(void *)v39 + 16) + 16);
      unsigned int v44 = *(_DWORD *)(*(void *)(*(void *)v40 + 16) + 16);
      if (v43 != v42) {
        break;
      }
      if (v44 == v42) {
        goto LABEL_53;
      }
LABEL_44:
      *(void *)uint64_t v8 = *(void *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37) {
        goto LABEL_54;
      }
    }
    if (v44 != v42 && v44 > v43) {
      goto LABEL_44;
    }
LABEL_53:
    *(void *)uint64_t v8 = *(void *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_54:
  if (v39 == v41) {
    return;
  }
  unint64_t v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    unint64_t v47 = v8;
    uint64_t v48 = v39;
    do
    {
LABEL_58:
      uint64_t v49 = *(void *)v48;
      v48 += 8;
      *(void *)unint64_t v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  uint64_t v54 = 0;
  uint64_t v55 = (v46 >> 3) + 1;
  uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v47 = &v8[v56];
  uint64_t v48 = &v39[v56];
  uint64_t v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v58 = &v8[v54];
    long long v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)uint64_t v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_58;
  }
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  if (!a4) {
    return result;
  }
  int v5 = a5;
  uint64_t v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(void *)int v5 = *(void *)v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v10 = *((void *)a2 - 1);
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)(v10 + 16) + 16);
    unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 != v11) {
        goto LABEL_35;
      }
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    uint64_t v10 = *(void *)a1;
    uint64_t v7 = a2 - 8;
LABEL_35:
    *(void *)a5 = v10;
    int v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    uint64_t v14 = a1 + 8;
    *(void *)a5 = *(void *)a1;
    if (a1 + 8 == a2) {
      return result;
    }
    uint64_t v15 = 0;
    uint64_t v16 = a5;
    uint64_t v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      uint64_t v21 = *v17++;
      uint64_t v20 = v21;
      int v22 = **(_DWORD **)(a3 + 8);
      unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)v14 + 16) + 16);
      unsigned int v24 = *(_DWORD *)(*(void *)(v21 + 16) + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((void *)v16 + 1) = v20;
          uint64_t v18 = a5;
          if (v16 == a5) {
            goto LABEL_12;
          }
          uint64_t v25 = v15;
          while (1)
          {
            uint64_t v26 = *(void *)&a5[v25 - 8];
            int v27 = **(_DWORD **)(a3 + 8);
            unsigned int v28 = *(_DWORD *)(*(void *)(*(void *)v14 + 16) + 16);
            unsigned int v29 = *(_DWORD *)(*(void *)(v26 + 16) + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                uint64_t v18 = &a5[v25];
LABEL_12:
                uint64_t v19 = *(void *)v14;
                v14 += 8;
                *(void *)uint64_t v18 = v19;
                v15 += 8;
                uint64_t v16 = (char *)v17;
                if (v14 == a2) {
                  return result;
                }
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              uint64_t v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(void *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              uint64_t v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *uint64_t v17 = *(void *)v14;
      v14 += 8;
      v15 += 8;
      uint64_t v16 = (char *)v17;
      if (v14 == a2) {
        return result;
      }
      continue;
    }
  }
  unint64_t v32 = a4 >> 1;
  uint64_t v33 = 8 * (a4 >> 1);
  unint64_t v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  unint64_t v36 = v5;
  BOOL v37 = v7;
  uint64_t v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34) {
          return result;
        }
        unint64_t v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          uint64_t v57 = 0;
          uint64_t v58 = (v47 >> 3) + 1;
          uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v48 = &v5[v59];
          uint64_t v49 = &v37[v59];
          uint64_t v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v61 = &v5[v57];
            __n128 result = *(__n128 *)&v37[v57];
            long long v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)uint64_t v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          uint64_t v48 = v5;
          uint64_t v49 = v37;
        }
        do
        {
          uint64_t v50 = *(void *)v49;
          v49 += 8;
          *(void *)uint64_t v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      int v39 = **(_DWORD **)(a3 + 8);
      unsigned int v40 = *(_DWORD *)(*(void *)(*(void *)v38 + 16) + 16);
      unsigned int v41 = *(_DWORD *)(*(void *)(*(void *)v37 + 16) + 16);
      if (v40 != v39) {
        break;
      }
      if (v41 == v39) {
        goto LABEL_48;
      }
LABEL_39:
      *(void *)int v5 = *(void *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34) {
        goto LABEL_49;
      }
    }
    if (v41 != v39 && v41 > v40) {
      goto LABEL_39;
    }
LABEL_48:
    *(void *)int v5 = *(void *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2) {
    return result;
  }
  unint64_t v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    unsigned int v44 = v5;
    unint64_t v45 = v38;
    do
    {
LABEL_53:
      uint64_t v46 = *(void *)v45;
      v45 += 8;
      *(void *)unsigned int v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  uint64_t v51 = 0;
  uint64_t v52 = (v43 >> 3) + 1;
  uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  unsigned int v44 = &v5[v53];
  unint64_t v45 = &v38[v53];
  uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v55 = &v5[v51];
    __n128 result = *(__n128 *)&v38[v51];
    long long v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)uint64_t v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_53;
  }
  return result;
}

char *_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a6;
  while (2)
  {
    if (v8 <= a8 || a5 <= a8)
    {
      if (a5 > v8)
      {
        if (a2 == a3) {
          return result;
        }
        unint64_t v89 = a3 - a2 - 8;
        unint64_t v90 = a7;
        unint64_t v91 = a2;
        if (v89 < 0x18) {
          goto LABEL_147;
        }
        unint64_t v90 = a7;
        unint64_t v91 = a2;
        if ((unint64_t)(a7 - a2) < 0x20) {
          goto LABEL_147;
        }
        uint64_t v92 = (v89 >> 3) + 1;
        uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v90 = &a7[v93];
        unint64_t v91 = &a2[v93];
        char v94 = (long long *)(a2 + 16);
        BOOL v95 = a7 + 16;
        uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *BOOL v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 4;
        }
        while (v96);
        if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_147:
          do
          {
            uint64_t v98 = *(void *)v91;
            v91 += 8;
            *(void *)unint64_t v90 = v98;
            v90 += 8;
          }
          while (v91 != a3);
        }
        if (v90 == a7) {
          return result;
        }
        for (uint64_t i = a3; ; i -= 8)
        {
          if (a2 == result)
          {
            unint64_t v120 = v90 - a7 - 8;
            if (v120 < 0x58 || (unint64_t)(v90 - i) < 0x20)
            {
              uint64_t v121 = v90;
              uint64_t v122 = a3;
              goto LABEL_136;
            }
            uint64_t v125 = 0;
            uint64_t v126 = (v120 >> 3) + 1;
            uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v121 = &v90[-v127];
            uint64_t v122 = &a3[-v127];
            uint64_t v128 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v129 = *(_OWORD *)&v90[v125 - 16];
              int64_t v130 = &a3[v125];
              *((_OWORD *)v130 - 2) = *(_OWORD *)&v90[v125 - 32];
              *((_OWORD *)v130 - 1) = v129;
              v125 -= 32;
              v128 -= 4;
            }
            while (v128);
            if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              uint64_t v123 = v122 - 8;
              do
              {
                uint64_t v124 = *((void *)v121 - 1);
                v121 -= 8;
                *(void *)uint64_t v123 = v124;
                v123 -= 8;
              }
              while (v121 != a7);
            }
            return result;
          }
          unint64_t v101 = a2 - 8;
          uint64_t v100 = *((void *)a2 - 1);
          int v102 = **(_DWORD **)(a4 + 8);
          unsigned int v103 = *(_DWORD *)(*(void *)(v100 + 16) + 16);
          unsigned int v104 = *(_DWORD *)(*(void *)(*((void *)v90 - 1) + 16) + 16);
          if (v104 == v102)
          {
            if (v103 != v102) {
              goto LABEL_101;
            }
          }
          else if (v103 != v102 && v103 > v104)
          {
            goto LABEL_101;
          }
          uint64_t v100 = *((void *)v90 - 1);
          unint64_t v101 = a2;
          v90 -= 8;
LABEL_101:
          *((void *)a3 - 1) = v100;
          a3 -= 8;
          a2 = v101;
          if (v90 == a7) {
            return result;
          }
        }
      }
      if (result == a2) {
        return result;
      }
      unint64_t v106 = a2 - result - 8;
      uint64_t v107 = a7;
      uint64_t v108 = result;
      if (v106 < 0x18) {
        goto LABEL_148;
      }
      uint64_t v107 = a7;
      uint64_t v108 = result;
      if ((unint64_t)(a7 - result) < 0x20) {
        goto LABEL_148;
      }
      uint64_t v109 = (v106 >> 3) + 1;
      uint64_t v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v107 = &a7[v110];
      uint64_t v108 = &result[v110];
      uint64_t v111 = (long long *)(result + 16);
      unint64_t v112 = a7 + 16;
      uint64_t v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v114 = *v111;
        *(v112 - 1) = *(v111 - 1);
        _OWORD *v112 = v114;
        v111 += 2;
        v112 += 2;
        v113 -= 4;
      }
      while (v113);
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_148:
        do
        {
          uint64_t v115 = *(void *)v108;
          v108 += 8;
          *(void *)uint64_t v107 = v115;
          v107 += 8;
        }
        while (v108 != a2);
      }
      if (v107 == a7) {
        return result;
      }
      while (1)
      {
        while (1)
        {
          if (a2 == a3)
          {
            return (char *)memmove(result, a7, v107 - a7);
          }
          int v116 = **(_DWORD **)(a4 + 8);
          unsigned int v117 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 16);
          unsigned int v118 = *(_DWORD *)(*(void *)(*(void *)a7 + 16) + 16);
          if (v117 == v116) {
            break;
          }
          if (v118 == v116 || v118 <= v117) {
            goto LABEL_130;
          }
LABEL_121:
          *(void *)__n128 result = *(void *)a2;
          result += 8;
          a2 += 8;
          if (a7 == v107) {
            return result;
          }
        }
        if (v118 != v116) {
          goto LABEL_121;
        }
LABEL_130:
        *(void *)__n128 result = *(void *)a7;
        result += 8;
        a7 += 8;
        if (a7 == v107) {
          return result;
        }
      }
    }
    if (!a5) {
      return result;
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = **(_DWORD **)(a4 + 8);
    unsigned int v14 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 16);
    while (1)
    {
      uint64_t v16 = *(void *)&result[8 * v12];
      unsigned int v17 = *(_DWORD *)(*(void *)(v16 + 16) + 16);
      if (v14 != v13) {
        break;
      }
      if (v17 != v13) {
        goto LABEL_14;
      }
LABEL_11:
      ++v12;
      v11 -= 8;
      if (a5 == v12) {
        return result;
      }
    }
    char v15 = v17 != v13 && v17 > v14;
    if (!v15) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v18 = a5 - v12;
    uint64_t v19 = &result[-v11];
    if (a5 - v12 >= v8)
    {
      if (a5 - 1 != v12)
      {
        if (v18 >= 0) {
          uint64_t v34 = a5 - v12;
        }
        else {
          uint64_t v34 = v18 + 1;
        }
        uint64_t v35 = v34 >> 1;
        unint64_t v36 = &result[8 * (v34 >> 1)];
        if (a3 == a2)
        {
          int v22 = a3;
        }
        else
        {
          unint64_t v37 = (a3 - a2) >> 3;
          unsigned int v38 = *(_DWORD *)(*(void *)(*(void *)&v36[8 * v12] + 16) + 16);
          int v22 = a2;
          if (v38 == v13)
          {
            do
            {
              unint64_t v39 = v37 >> 1;
              unsigned int v40 = (uint64_t *)&v22[8 * (v37 >> 1)];
              uint64_t v42 = *v40;
              unsigned int v41 = (char *)(v40 + 1);
              int v43 = *(_DWORD *)(*(void *)(v42 + 16) + 16);
              BOOL v44 = v43 != v13 || v38 == v43;
              v37 += ~v39;
              if (v44) {
                unint64_t v37 = v39;
              }
              else {
                int v22 = v41;
              }
            }
            while (v37);
          }
          else
          {
            do
            {
              unint64_t v45 = v37 >> 1;
              uint64_t v46 = (uint64_t *)&v22[8 * (v37 >> 1)];
              uint64_t v48 = *v46;
              unint64_t v47 = (char *)(v46 + 1);
              unsigned int v49 = *(_DWORD *)(*(void *)(v48 + 16) + 16);
              BOOL v51 = v49 == v13 || v38 > v49;
              v37 += ~v45;
              if (v51) {
                int v22 = v47;
              }
              else {
                unint64_t v37 = v45;
              }
            }
            while (v37);
          }
        }
        uint64_t v25 = &v36[-v11];
        uint64_t v21 = (v22 - a2) >> 3;
        uint64_t v52 = v22;
        if (&v36[-v11] != a2) {
          goto LABEL_60;
        }
        goto LABEL_85;
      }
      *(void *)&result[8 * v12] = *(void *)a2;
      *(void *)a2 = v16;
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = v8 + 1;
      }
      uint64_t v21 = v20 >> 1;
      int v22 = &a2[8 * (v20 >> 1)];
      if (v19 == a2)
      {
        uint64_t v25 = a2;
      }
      else
      {
        unint64_t v23 = (uint64_t)(a2 - result + v11) >> 3;
        unsigned int v24 = *(_DWORD *)(*(void *)(*(void *)v22 + 16) + 16);
        uint64_t v25 = v19;
        if (v24 == v13)
        {
          do
          {
            unint64_t v26 = v23 >> 1;
            int v27 = (uint64_t *)&v25[8 * (v23 >> 1)];
            uint64_t v29 = *v27;
            unsigned int v28 = (char *)(v27 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(void *)(v29 + 16) + 16) == v13) {
              uint64_t v25 = v28;
            }
            else {
              unint64_t v23 = v26;
            }
          }
          while (v23);
        }
        else
        {
          do
          {
            unint64_t v30 = v23 >> 1;
            unsigned int v31 = (uint64_t *)&v25[8 * (v23 >> 1)];
            uint64_t v33 = *v31;
            unint64_t v32 = (char *)(v31 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(void *)(v33 + 16) + 16) != v13 && *(_DWORD *)(*(void *)(v33 + 16) + 16) > v24) {
              unint64_t v23 = v30;
            }
            else {
              uint64_t v25 = v32;
            }
          }
          while (v23);
        }
      }
      uint64_t v35 = (v25 - v19) >> 3;
      uint64_t v52 = v22;
      if (v25 == a2) {
        goto LABEL_85;
      }
LABEL_60:
      uint64_t v52 = v25;
      if (a2 != v22)
      {
        if (v25 + 8 == a2)
        {
          uint64_t v131 = *(void *)v25;
          int v133 = v19;
          int64_t v60 = v22 - a2;
          uint64_t v135 = a4;
          uint64_t v137 = a7;
          uint64_t v61 = a3;
          uint64_t v62 = a8;
          memmove(v25, a2, v22 - a2);
          uint64_t v19 = v133;
          a4 = v135;
          a8 = v62;
          a3 = v61;
          a7 = v137;
          uint64_t v52 = &v25[v60];
          *(void *)uint64_t v52 = v131;
        }
        else if (a2 + 8 == v22)
        {
          uint64_t v63 = *((void *)v22 - 1);
          uint64_t v52 = v25 + 8;
          if (v22 - 8 != v25)
          {
            uint64_t v136 = a4;
            unint64_t v138 = a7;
            BOOL v64 = a3;
            uint64_t v65 = a8;
            uint64_t v132 = *((void *)v22 - 1);
            uint64_t v134 = v19;
            memmove(v25 + 8, v25, v22 - 8 - v25);
            uint64_t v63 = v132;
            uint64_t v19 = v134;
            a8 = v65;
            a4 = v136;
            a7 = v138;
            a3 = v64;
          }
          *(void *)uint64_t v25 = v63;
        }
        else
        {
          uint64_t v53 = (a2 - v25) >> 3;
          uint64_t v54 = (v22 - a2) >> 3;
          if (v53 == v54)
          {
            uint64_t v55 = 0;
            do
            {
              uint64_t v56 = *(void *)&v25[v55];
              *(void *)&v25[v55] = *(void *)&a2[v55];
              uint64_t v57 = (uint64_t)&v25[v55 + 8];
              *(void *)&a2[v55] = v56;
              uint64_t v58 = (uint64_t)&a2[v55 + 8];
              v55 += 8;
            }
            while ((char *)v57 != a2 && v58 != (void)v22);
            uint64_t v52 = a2;
          }
          else
          {
            uint64_t v66 = (v22 - a2) >> 3;
            uint64_t v67 = (a2 - v25) >> 3;
            do
            {
              uint64_t v68 = v67;
              uint64_t v67 = v66;
              uint64_t v66 = v68 % v66;
            }
            while (v66);
            if (v67)
            {
              unsigned int v69 = &v25[8 * v67];
              do
              {
                uint64_t v71 = *((void *)v69 - 1);
                v69 -= 8;
                uint64_t v70 = v71;
                unint64_t v72 = &v69[8 * v53];
                BOOL v73 = v69;
                do
                {
                  unsigned int v74 = v73;
                  BOOL v73 = v72;
                  *(void *)unsigned int v74 = *(void *)v72;
                  uint64_t v75 = (v22 - v72) >> 3;
                  BOOL v76 = __OFSUB__(v53, v75);
                  uint64_t v77 = v53 - v75;
                  char v15 = (v77 < 0) ^ v76;
                  unint64_t v72 = &v25[8 * v77];
                  if (v15) {
                    unint64_t v72 = &v73[8 * v53];
                  }
                }
                while (v72 != v69);
                *(void *)BOOL v73 = v70;
              }
              while (v69 != v25);
            }
            uint64_t v52 = &v25[8 * v54];
          }
        }
      }
LABEL_85:
      uint64_t v78 = a5 - v35 - v12;
      uint64_t v79 = v8 - v21;
      if (v35 + v21 < v8 + a5 - (v35 + v21) - v12)
      {
        __n128 v80 = a3;
        uint64_t v81 = a4;
        int v82 = a7;
        uint64_t v83 = a8;
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v19, v25, v52);
        a8 = v83;
        a4 = v81;
        a3 = v80;
        a7 = v82;
        __n128 result = v52;
        a5 = v78;
        uint64_t v8 = v79;
        a2 = v22;
        if (!v79) {
          return result;
        }
        continue;
      }
      uint64_t v84 = v22;
      uint64_t v85 = a4;
      uint64_t v86 = v19;
      unint64_t v87 = a7;
      uint64_t v88 = a8;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v52, v84, a3);
      __n128 result = v86;
      a8 = v88;
      a4 = v85;
      a7 = v87;
      a3 = v52;
      a5 = v35;
      uint64_t v8 = v21;
      a2 = v25;
      if (v21) {
        continue;
      }
    }
    return result;
  }
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    uint64_t v10 = *(void *)a1;
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)v9 + 16);
    unsigned int v13 = *(_DWORD *)(**(void **)a1 + 16);
    if (v12 == v11)
    {
      if (v13 == v11) {
        return;
      }
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(void *)a1 = v9;
    *((void *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return;
    }
    char v15 = a1 + 8;
    if (a1 + 8 == a2) {
      return;
    }
    uint64_t v16 = 0;
    unsigned int v17 = a1;
LABEL_13:
    uint64_t v19 = v17;
    unsigned int v17 = v15;
    uint64_t v20 = *((void *)v19 + 1);
    int v21 = **(_DWORD **)(a3 + 8);
    unsigned int v22 = *(_DWORD *)(*(void *)v20 + 16);
    unsigned int v23 = *(_DWORD *)(**(void **)v19 + 16);
    if (v22 == v21)
    {
      if (v23 == v21) {
        goto LABEL_12;
      }
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((void *)v19 + 1) = *(void *)v19;
    uint64_t v18 = a1;
    if (v19 == a1) {
      goto LABEL_11;
    }
    uint64_t v25 = v16;
    while (1)
    {
      uint64_t v26 = *(void *)&a1[v25 - 8];
      int v27 = **(_DWORD **)(a3 + 8);
      unsigned int v28 = *(_DWORD *)(*(void *)v20 + 16);
      unsigned int v29 = *(_DWORD *)(*(void *)v26 + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          uint64_t v18 = &a1[v25];
LABEL_11:
          *(void *)uint64_t v18 = v20;
LABEL_12:
          char v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2) {
            return;
          }
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        uint64_t v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(void *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        uint64_t v18 = a1;
        goto LABEL_11;
      }
    }
  }
  unint64_t v34 = a4 >> 1;
  uint64_t v35 = &a1[8 * (a4 >> 1)];
  unint64_t v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  unint64_t v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  unsigned int v38 = v8;
  unint64_t v39 = v37;
  unsigned int v40 = a5;
  unsigned int v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37) {
          return;
        }
        unint64_t v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (v50 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v51 = &v8[v62];
          uint64_t v52 = &v40[v62];
          uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            BOOL v64 = &v8[v60];
            long long v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)BOOL v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            return;
          }
        }
        else
        {
          BOOL v51 = v8;
          uint64_t v52 = v40;
        }
        do
        {
          uint64_t v53 = *(void *)v52;
          v52 += 8;
          *(void *)BOOL v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      int v42 = **(_DWORD **)(a3 + 8);
      unsigned int v43 = *(_DWORD *)(**(void **)v39 + 16);
      unsigned int v44 = *(_DWORD *)(**(void **)v40 + 16);
      if (v43 != v42) {
        break;
      }
      if (v44 == v42) {
        goto LABEL_53;
      }
LABEL_44:
      *(void *)uint64_t v8 = *(void *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37) {
        goto LABEL_54;
      }
    }
    if (v44 != v42 && v44 > v43) {
      goto LABEL_44;
    }
LABEL_53:
    *(void *)uint64_t v8 = *(void *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_54:
  if (v39 == v41) {
    return;
  }
  unint64_t v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    unint64_t v47 = v8;
    uint64_t v48 = v39;
    do
    {
LABEL_58:
      uint64_t v49 = *(void *)v48;
      v48 += 8;
      *(void *)unint64_t v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  uint64_t v54 = 0;
  uint64_t v55 = (v46 >> 3) + 1;
  uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v47 = &v8[v56];
  uint64_t v48 = &v39[v56];
  uint64_t v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v58 = &v8[v54];
    long long v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)uint64_t v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_58;
  }
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  if (!a4) {
    return result;
  }
  int v5 = a5;
  uint64_t v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(void *)int v5 = *(void *)v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v10 = *((void *)a2 - 1);
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)v10 + 16);
    unsigned int v13 = *(_DWORD *)(**(void **)a1 + 16);
    if (v12 == v11)
    {
      if (v13 != v11) {
        goto LABEL_35;
      }
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    uint64_t v10 = *(void *)a1;
    uint64_t v7 = a2 - 8;
LABEL_35:
    *(void *)a5 = v10;
    int v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    unsigned int v14 = a1 + 8;
    *(void *)a5 = *(void *)a1;
    if (a1 + 8 == a2) {
      return result;
    }
    uint64_t v15 = 0;
    uint64_t v16 = a5;
    unsigned int v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      uint64_t v21 = *v17++;
      uint64_t v20 = v21;
      int v22 = **(_DWORD **)(a3 + 8);
      unsigned int v23 = *(_DWORD *)(**(void **)v14 + 16);
      unsigned int v24 = *(_DWORD *)(*(void *)v21 + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((void *)v16 + 1) = v20;
          uint64_t v18 = a5;
          if (v16 == a5) {
            goto LABEL_12;
          }
          uint64_t v25 = v15;
          while (1)
          {
            uint64_t v26 = *(void *)&a5[v25 - 8];
            int v27 = **(_DWORD **)(a3 + 8);
            unsigned int v28 = *(_DWORD *)(**(void **)v14 + 16);
            unsigned int v29 = *(_DWORD *)(*(void *)v26 + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                uint64_t v18 = &a5[v25];
LABEL_12:
                uint64_t v19 = *(void *)v14;
                v14 += 8;
                *(void *)uint64_t v18 = v19;
                v15 += 8;
                uint64_t v16 = (char *)v17;
                if (v14 == a2) {
                  return result;
                }
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              uint64_t v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(void *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              uint64_t v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *unsigned int v17 = *(void *)v14;
      v14 += 8;
      v15 += 8;
      uint64_t v16 = (char *)v17;
      if (v14 == a2) {
        return result;
      }
      continue;
    }
  }
  unint64_t v32 = a4 >> 1;
  uint64_t v33 = 8 * (a4 >> 1);
  unint64_t v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  unint64_t v36 = v5;
  unint64_t v37 = v7;
  unsigned int v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34) {
          return result;
        }
        unint64_t v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          uint64_t v57 = 0;
          uint64_t v58 = (v47 >> 3) + 1;
          uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v48 = &v5[v59];
          uint64_t v49 = &v37[v59];
          uint64_t v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v61 = &v5[v57];
            __n128 result = *(__n128 *)&v37[v57];
            long long v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)uint64_t v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          uint64_t v48 = v5;
          uint64_t v49 = v37;
        }
        do
        {
          uint64_t v50 = *(void *)v49;
          v49 += 8;
          *(void *)uint64_t v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      int v39 = **(_DWORD **)(a3 + 8);
      unsigned int v40 = *(_DWORD *)(**(void **)v38 + 16);
      unsigned int v41 = *(_DWORD *)(**(void **)v37 + 16);
      if (v40 != v39) {
        break;
      }
      if (v41 == v39) {
        goto LABEL_48;
      }
LABEL_39:
      *(void *)int v5 = *(void *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34) {
        goto LABEL_49;
      }
    }
    if (v41 != v39 && v41 > v40) {
      goto LABEL_39;
    }
LABEL_48:
    *(void *)int v5 = *(void *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2) {
    return result;
  }
  unint64_t v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    unsigned int v44 = v5;
    unint64_t v45 = v38;
    do
    {
LABEL_53:
      uint64_t v46 = *(void *)v45;
      v45 += 8;
      *(void *)unsigned int v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  uint64_t v51 = 0;
  uint64_t v52 = (v43 >> 3) + 1;
  uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  unsigned int v44 = &v5[v53];
  unint64_t v45 = &v38[v53];
  uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v55 = &v5[v51];
    __n128 result = *(__n128 *)&v38[v51];
    long long v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)uint64_t v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_53;
  }
  return result;
}

char *_ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a6;
  while (2)
  {
    if (v8 <= a8 || a5 <= a8)
    {
      if (a5 > v8)
      {
        if (a2 == a3) {
          return result;
        }
        unint64_t v89 = a3 - a2 - 8;
        unint64_t v90 = a7;
        unint64_t v91 = a2;
        if (v89 < 0x18) {
          goto LABEL_147;
        }
        unint64_t v90 = a7;
        unint64_t v91 = a2;
        if ((unint64_t)(a7 - a2) < 0x20) {
          goto LABEL_147;
        }
        uint64_t v92 = (v89 >> 3) + 1;
        uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v90 = &a7[v93];
        unint64_t v91 = &a2[v93];
        char v94 = (long long *)(a2 + 16);
        BOOL v95 = a7 + 16;
        uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *BOOL v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 4;
        }
        while (v96);
        if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_147:
          do
          {
            uint64_t v98 = *(void *)v91;
            v91 += 8;
            *(void *)unint64_t v90 = v98;
            v90 += 8;
          }
          while (v91 != a3);
        }
        if (v90 == a7) {
          return result;
        }
        for (uint64_t i = a3; ; i -= 8)
        {
          if (a2 == result)
          {
            unint64_t v120 = v90 - a7 - 8;
            if (v120 < 0x58 || (unint64_t)(v90 - i) < 0x20)
            {
              uint64_t v121 = v90;
              uint64_t v122 = a3;
              goto LABEL_136;
            }
            uint64_t v125 = 0;
            uint64_t v126 = (v120 >> 3) + 1;
            uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v121 = &v90[-v127];
            uint64_t v122 = &a3[-v127];
            uint64_t v128 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v129 = *(_OWORD *)&v90[v125 - 16];
              int64_t v130 = &a3[v125];
              *((_OWORD *)v130 - 2) = *(_OWORD *)&v90[v125 - 32];
              *((_OWORD *)v130 - 1) = v129;
              v125 -= 32;
              v128 -= 4;
            }
            while (v128);
            if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              uint64_t v123 = v122 - 8;
              do
              {
                uint64_t v124 = *((void *)v121 - 1);
                v121 -= 8;
                *(void *)uint64_t v123 = v124;
                v123 -= 8;
              }
              while (v121 != a7);
            }
            return result;
          }
          unint64_t v101 = a2 - 8;
          uint64_t v100 = *((void *)a2 - 1);
          int v102 = **(_DWORD **)(a4 + 8);
          unsigned int v103 = *(_DWORD *)(*(void *)v100 + 16);
          unsigned int v104 = *(_DWORD *)(**((void **)v90 - 1) + 16);
          if (v104 == v102)
          {
            if (v103 != v102) {
              goto LABEL_101;
            }
          }
          else if (v103 != v102 && v103 > v104)
          {
            goto LABEL_101;
          }
          uint64_t v100 = *((void *)v90 - 1);
          unint64_t v101 = a2;
          v90 -= 8;
LABEL_101:
          *((void *)a3 - 1) = v100;
          a3 -= 8;
          a2 = v101;
          if (v90 == a7) {
            return result;
          }
        }
      }
      if (result == a2) {
        return result;
      }
      unint64_t v106 = a2 - result - 8;
      uint64_t v107 = a7;
      uint64_t v108 = result;
      if (v106 < 0x18) {
        goto LABEL_148;
      }
      uint64_t v107 = a7;
      uint64_t v108 = result;
      if ((unint64_t)(a7 - result) < 0x20) {
        goto LABEL_148;
      }
      uint64_t v109 = (v106 >> 3) + 1;
      uint64_t v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v107 = &a7[v110];
      uint64_t v108 = &result[v110];
      uint64_t v111 = (long long *)(result + 16);
      unint64_t v112 = a7 + 16;
      uint64_t v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v114 = *v111;
        *(v112 - 1) = *(v111 - 1);
        _OWORD *v112 = v114;
        v111 += 2;
        v112 += 2;
        v113 -= 4;
      }
      while (v113);
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_148:
        do
        {
          uint64_t v115 = *(void *)v108;
          v108 += 8;
          *(void *)uint64_t v107 = v115;
          v107 += 8;
        }
        while (v108 != a2);
      }
      if (v107 == a7) {
        return result;
      }
      while (1)
      {
        while (1)
        {
          if (a2 == a3)
          {
            return (char *)memmove(result, a7, v107 - a7);
          }
          int v116 = **(_DWORD **)(a4 + 8);
          unsigned int v117 = *(_DWORD *)(**(void **)a2 + 16);
          unsigned int v118 = *(_DWORD *)(**(void **)a7 + 16);
          if (v117 == v116) {
            break;
          }
          if (v118 == v116 || v118 <= v117) {
            goto LABEL_130;
          }
LABEL_121:
          *(void *)__n128 result = *(void *)a2;
          result += 8;
          a2 += 8;
          if (a7 == v107) {
            return result;
          }
        }
        if (v118 != v116) {
          goto LABEL_121;
        }
LABEL_130:
        *(void *)__n128 result = *(void *)a7;
        result += 8;
        a7 += 8;
        if (a7 == v107) {
          return result;
        }
      }
    }
    if (!a5) {
      return result;
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = **(_DWORD **)(a4 + 8);
    unsigned int v14 = *(_DWORD *)(**(void **)a2 + 16);
    while (1)
    {
      uint64_t v16 = *(void *)&result[8 * v12];
      unsigned int v17 = *(_DWORD *)(*(void *)v16 + 16);
      if (v14 != v13) {
        break;
      }
      if (v17 != v13) {
        goto LABEL_14;
      }
LABEL_11:
      ++v12;
      v11 -= 8;
      if (a5 == v12) {
        return result;
      }
    }
    char v15 = v17 != v13 && v17 > v14;
    if (!v15) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v18 = a5 - v12;
    uint64_t v19 = &result[-v11];
    if (a5 - v12 >= v8)
    {
      if (a5 - 1 != v12)
      {
        if (v18 >= 0) {
          uint64_t v34 = a5 - v12;
        }
        else {
          uint64_t v34 = v18 + 1;
        }
        uint64_t v35 = v34 >> 1;
        unint64_t v36 = &result[8 * (v34 >> 1)];
        if (a3 == a2)
        {
          int v22 = a3;
        }
        else
        {
          unint64_t v37 = (a3 - a2) >> 3;
          unsigned int v38 = *(_DWORD *)(**(void **)&v36[8 * v12] + 16);
          int v22 = a2;
          if (v38 == v13)
          {
            do
            {
              unint64_t v39 = v37 >> 1;
              unsigned int v40 = (uint64_t *)&v22[8 * (v37 >> 1)];
              uint64_t v42 = *v40;
              unsigned int v41 = (char *)(v40 + 1);
              int v43 = *(_DWORD *)(*(void *)v42 + 16);
              BOOL v44 = v43 != v13 || v38 == v43;
              v37 += ~v39;
              if (v44) {
                unint64_t v37 = v39;
              }
              else {
                int v22 = v41;
              }
            }
            while (v37);
          }
          else
          {
            do
            {
              unint64_t v45 = v37 >> 1;
              uint64_t v46 = (uint64_t *)&v22[8 * (v37 >> 1)];
              uint64_t v48 = *v46;
              unint64_t v47 = (char *)(v46 + 1);
              unsigned int v49 = *(_DWORD *)(*(void *)v48 + 16);
              BOOL v51 = v49 == v13 || v38 > v49;
              v37 += ~v45;
              if (v51) {
                int v22 = v47;
              }
              else {
                unint64_t v37 = v45;
              }
            }
            while (v37);
          }
        }
        uint64_t v25 = &v36[-v11];
        uint64_t v21 = (v22 - a2) >> 3;
        uint64_t v52 = v22;
        if (&v36[-v11] != a2) {
          goto LABEL_60;
        }
        goto LABEL_85;
      }
      *(void *)&result[8 * v12] = *(void *)a2;
      *(void *)a2 = v16;
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = v8 + 1;
      }
      uint64_t v21 = v20 >> 1;
      int v22 = &a2[8 * (v20 >> 1)];
      if (v19 == a2)
      {
        uint64_t v25 = a2;
      }
      else
      {
        unint64_t v23 = (uint64_t)(a2 - result + v11) >> 3;
        unsigned int v24 = *(_DWORD *)(**(void **)v22 + 16);
        uint64_t v25 = v19;
        if (v24 == v13)
        {
          do
          {
            unint64_t v26 = v23 >> 1;
            int v27 = (uint64_t *)&v25[8 * (v23 >> 1)];
            uint64_t v29 = *v27;
            unsigned int v28 = (char *)(v27 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(void *)v29 + 16) == v13) {
              uint64_t v25 = v28;
            }
            else {
              unint64_t v23 = v26;
            }
          }
          while (v23);
        }
        else
        {
          do
          {
            unint64_t v30 = v23 >> 1;
            unsigned int v31 = (uint64_t *)&v25[8 * (v23 >> 1)];
            uint64_t v33 = *v31;
            unint64_t v32 = (char *)(v31 + 1);
            v23 += ~(v23 >> 1);
            if (*(_DWORD *)(*(void *)v33 + 16) != v13 && *(_DWORD *)(*(void *)v33 + 16) > v24) {
              unint64_t v23 = v30;
            }
            else {
              uint64_t v25 = v32;
            }
          }
          while (v23);
        }
      }
      uint64_t v35 = (v25 - v19) >> 3;
      uint64_t v52 = v22;
      if (v25 == a2) {
        goto LABEL_85;
      }
LABEL_60:
      uint64_t v52 = v25;
      if (a2 != v22)
      {
        if (v25 + 8 == a2)
        {
          uint64_t v131 = *(void *)v25;
          int v133 = v19;
          int64_t v60 = v22 - a2;
          uint64_t v135 = a4;
          uint64_t v137 = a7;
          uint64_t v61 = a3;
          uint64_t v62 = a8;
          memmove(v25, a2, v22 - a2);
          uint64_t v19 = v133;
          a4 = v135;
          a8 = v62;
          a3 = v61;
          a7 = v137;
          uint64_t v52 = &v25[v60];
          *(void *)uint64_t v52 = v131;
        }
        else if (a2 + 8 == v22)
        {
          uint64_t v63 = *((void *)v22 - 1);
          uint64_t v52 = v25 + 8;
          if (v22 - 8 != v25)
          {
            uint64_t v136 = a4;
            unint64_t v138 = a7;
            BOOL v64 = a3;
            uint64_t v65 = a8;
            uint64_t v132 = *((void *)v22 - 1);
            uint64_t v134 = v19;
            memmove(v25 + 8, v25, v22 - 8 - v25);
            uint64_t v63 = v132;
            uint64_t v19 = v134;
            a8 = v65;
            a4 = v136;
            a7 = v138;
            a3 = v64;
          }
          *(void *)uint64_t v25 = v63;
        }
        else
        {
          uint64_t v53 = (a2 - v25) >> 3;
          uint64_t v54 = (v22 - a2) >> 3;
          if (v53 == v54)
          {
            uint64_t v55 = 0;
            do
            {
              uint64_t v56 = *(void *)&v25[v55];
              *(void *)&v25[v55] = *(void *)&a2[v55];
              uint64_t v57 = (uint64_t)&v25[v55 + 8];
              *(void *)&a2[v55] = v56;
              uint64_t v58 = (uint64_t)&a2[v55 + 8];
              v55 += 8;
            }
            while ((char *)v57 != a2 && v58 != (void)v22);
            uint64_t v52 = a2;
          }
          else
          {
            uint64_t v66 = (v22 - a2) >> 3;
            uint64_t v67 = (a2 - v25) >> 3;
            do
            {
              uint64_t v68 = v67;
              uint64_t v67 = v66;
              uint64_t v66 = v68 % v66;
            }
            while (v66);
            if (v67)
            {
              unsigned int v69 = &v25[8 * v67];
              do
              {
                uint64_t v71 = *((void *)v69 - 1);
                v69 -= 8;
                uint64_t v70 = v71;
                unint64_t v72 = &v69[8 * v53];
                BOOL v73 = v69;
                do
                {
                  unsigned int v74 = v73;
                  BOOL v73 = v72;
                  *(void *)unsigned int v74 = *(void *)v72;
                  uint64_t v75 = (v22 - v72) >> 3;
                  BOOL v76 = __OFSUB__(v53, v75);
                  uint64_t v77 = v53 - v75;
                  char v15 = (v77 < 0) ^ v76;
                  unint64_t v72 = &v25[8 * v77];
                  if (v15) {
                    unint64_t v72 = &v73[8 * v53];
                  }
                }
                while (v72 != v69);
                *(void *)BOOL v73 = v70;
              }
              while (v69 != v25);
            }
            uint64_t v52 = &v25[8 * v54];
          }
        }
      }
LABEL_85:
      uint64_t v78 = a5 - v35 - v12;
      uint64_t v79 = v8 - v21;
      if (v35 + v21 < v8 + a5 - (v35 + v21) - v12)
      {
        __n128 v80 = a3;
        uint64_t v81 = a4;
        int v82 = a7;
        uint64_t v83 = a8;
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v19, v25, v52);
        a8 = v83;
        a4 = v81;
        a3 = v80;
        a7 = v82;
        __n128 result = v52;
        a5 = v78;
        uint64_t v8 = v79;
        a2 = v22;
        if (!v79) {
          return result;
        }
        continue;
      }
      uint64_t v84 = v22;
      uint64_t v85 = a4;
      uint64_t v86 = v19;
      unint64_t v87 = a7;
      uint64_t v88 = a8;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail15OpNameNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v52, v84, a3);
      __n128 result = v86;
      a8 = v88;
      a4 = v85;
      a7 = v87;
      a3 = v52;
      a5 = v35;
      uint64_t v8 = v21;
      a2 = v25;
      if (v21) {
        continue;
      }
    }
    return result;
  }
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    uint64_t v10 = *(void *)a1;
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)(v9 + 16) + 16);
    unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 == v11) {
        return;
      }
    }
    else if (v13 == v11 || v13 <= v12)
    {
      return;
    }
    *(void *)a1 = v9;
    *((void *)a2 - 1) = v10;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return;
    }
    char v15 = a1 + 8;
    if (a1 + 8 == a2) {
      return;
    }
    uint64_t v16 = 0;
    unsigned int v17 = a1;
LABEL_13:
    uint64_t v19 = v17;
    unsigned int v17 = v15;
    uint64_t v20 = *((void *)v19 + 1);
    int v21 = **(_DWORD **)(a3 + 8);
    unsigned int v22 = *(_DWORD *)(*(void *)(v20 + 16) + 16);
    unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)v19 + 16) + 16);
    if (v22 == v21)
    {
      if (v23 == v21) {
        goto LABEL_12;
      }
    }
    else if (v23 == v21 || v23 <= v22)
    {
      goto LABEL_12;
    }
    *((void *)v19 + 1) = *(void *)v19;
    uint64_t v18 = a1;
    if (v19 == a1) {
      goto LABEL_11;
    }
    uint64_t v25 = v16;
    while (1)
    {
      uint64_t v26 = *(void *)&a1[v25 - 8];
      int v27 = **(_DWORD **)(a3 + 8);
      unsigned int v28 = *(_DWORD *)(*(void *)(v20 + 16) + 16);
      unsigned int v29 = *(_DWORD *)(*(void *)(v26 + 16) + 16);
      if (v28 == v27)
      {
        if (v29 == v27)
        {
          uint64_t v18 = &a1[v25];
LABEL_11:
          *(void *)uint64_t v18 = v20;
LABEL_12:
          char v15 = v17 + 8;
          v16 += 8;
          if (v17 + 8 == a2) {
            return;
          }
          goto LABEL_13;
        }
      }
      else if (v29 == v27 || v29 <= v28)
      {
        uint64_t v18 = v19;
        goto LABEL_11;
      }
      v19 -= 8;
      *(void *)&a1[v25] = v26;
      v25 -= 8;
      if (!v25)
      {
        uint64_t v18 = a1;
        goto LABEL_11;
      }
    }
  }
  unint64_t v34 = a4 >> 1;
  uint64_t v35 = &a1[8 * (a4 >> 1)];
  unint64_t v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, v35, a3, v36, a5, a6);
    _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail18AttributeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SK_OSE_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    return;
  }
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(a1, v35, a3, v36, a5);
  unint64_t v37 = &a5[8 * v34];
  _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37);
  unsigned int v38 = v8;
  unint64_t v39 = v37;
  unsigned int v40 = a5;
  unsigned int v41 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v39 == v41)
      {
        if (v40 == v37) {
          return;
        }
        unint64_t v50 = &a5[8 * v34] - v40 - 8;
        if (v50 >= 0x38 && (unint64_t)(v38 - v40) >= 0x20)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (v50 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v51 = &v8[v62];
          uint64_t v52 = &v40[v62];
          uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            BOOL v64 = &v8[v60];
            long long v65 = *(_OWORD *)&v40[v60 + 16];
            *(_OWORD *)BOOL v64 = *(_OWORD *)&v40[v60];
            *((_OWORD *)v64 + 1) = v65;
            v60 += 32;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            return;
          }
        }
        else
        {
          BOOL v51 = v8;
          uint64_t v52 = v40;
        }
        do
        {
          uint64_t v53 = *(void *)v52;
          v52 += 8;
          *(void *)BOOL v51 = v53;
          v51 += 8;
        }
        while (v52 != v37);
        return;
      }
      int v42 = **(_DWORD **)(a3 + 8);
      unsigned int v43 = *(_DWORD *)(*(void *)(*(void *)v39 + 16) + 16);
      unsigned int v44 = *(_DWORD *)(*(void *)(*(void *)v40 + 16) + 16);
      if (v43 != v42) {
        break;
      }
      if (v44 == v42) {
        goto LABEL_53;
      }
LABEL_44:
      *(void *)uint64_t v8 = *(void *)v39;
      v8 += 8;
      v39 += 8;
      v38 += 8;
      if (v40 == v37) {
        goto LABEL_54;
      }
    }
    if (v44 != v42 && v44 > v43) {
      goto LABEL_44;
    }
LABEL_53:
    *(void *)uint64_t v8 = *(void *)v40;
    v8 += 8;
    v40 += 8;
    v38 += 8;
  }
  while (v40 != v37);
LABEL_54:
  if (v39 == v41) {
    return;
  }
  unint64_t v46 = &a5[8 * a4] - v39 - 8;
  if (v46 < 0x48 || (unint64_t)(v38 - v39) < 0x20)
  {
    unint64_t v47 = v8;
    uint64_t v48 = v39;
    do
    {
LABEL_58:
      uint64_t v49 = *(void *)v48;
      v48 += 8;
      *(void *)unint64_t v47 = v49;
      v47 += 8;
    }
    while (v48 != v41);
    return;
  }
  uint64_t v54 = 0;
  uint64_t v55 = (v46 >> 3) + 1;
  uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v47 = &v8[v56];
  uint64_t v48 = &v39[v56];
  uint64_t v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v58 = &v8[v54];
    long long v59 = *(_OWORD *)&v39[v54 + 16];
    *(_OWORD *)uint64_t v58 = *(_OWORD *)&v39[v54];
    *((_OWORD *)v58 + 1) = v59;
    v54 += 32;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_58;
  }
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeE(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  if (!a4) {
    return result;
  }
  int v5 = a5;
  uint64_t v7 = a1;
  if (a4 == 1)
  {
LABEL_36:
    *(void *)int v5 = *(void *)v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v10 = *((void *)a2 - 1);
    int v11 = **(_DWORD **)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(*(void *)(v10 + 16) + 16);
    unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 16);
    if (v12 == v11)
    {
      if (v13 != v11) {
        goto LABEL_35;
      }
    }
    else if (v13 != v11 && v13 > v12)
    {
      goto LABEL_35;
    }
    uint64_t v10 = *(void *)a1;
    uint64_t v7 = a2 - 8;
LABEL_35:
    *(void *)a5 = v10;
    int v5 = a5 + 8;
    goto LABEL_36;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    unsigned int v14 = a1 + 8;
    *(void *)a5 = *(void *)a1;
    if (a1 + 8 == a2) {
      return result;
    }
    uint64_t v15 = 0;
    uint64_t v16 = a5;
    unsigned int v17 = (uint64_t *)a5;
LABEL_13:
    while (2)
    {
      uint64_t v21 = *v17++;
      uint64_t v20 = v21;
      int v22 = **(_DWORD **)(a3 + 8);
      unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)v14 + 16) + 16);
      unsigned int v24 = *(_DWORD *)(*(void *)(v21 + 16) + 16);
      if (v23 == v22)
      {
        if (v24 != v22)
        {
LABEL_15:
          *((void *)v16 + 1) = v20;
          uint64_t v18 = a5;
          if (v16 == a5) {
            goto LABEL_12;
          }
          uint64_t v25 = v15;
          while (1)
          {
            uint64_t v26 = *(void *)&a5[v25 - 8];
            int v27 = **(_DWORD **)(a3 + 8);
            unsigned int v28 = *(_DWORD *)(*(void *)(*(void *)v14 + 16) + 16);
            unsigned int v29 = *(_DWORD *)(*(void *)(v26 + 16) + 16);
            if (v28 == v27)
            {
              if (v29 == v27)
              {
                uint64_t v18 = &a5[v25];
LABEL_12:
                uint64_t v19 = *(void *)v14;
                v14 += 8;
                *(void *)uint64_t v18 = v19;
                v15 += 8;
                uint64_t v16 = (char *)v17;
                if (v14 == a2) {
                  return result;
                }
                goto LABEL_13;
              }
            }
            else if (v29 == v27 || v29 <= v28)
            {
              uint64_t v18 = v16;
              goto LABEL_12;
            }
            v16 -= 8;
            *(void *)&a5[v25] = v26;
            v25 -= 8;
            if (!v25)
            {
              uint64_t v18 = a5;
              goto LABEL_12;
            }
          }
        }
      }
      else if (v24 != v22 && v24 > v23)
      {
        goto LABEL_15;
      }
      *unsigned int v17 = *(void *)v14;
      v14 += 8;
      v15 += 8;
      uint64_t v16 = (char *)v17;
      if (v14 == a2) {
        return result;
      }
      continue;
    }
  }
  unint64_t v32 = a4 >> 1;
  uint64_t v33 = 8 * (a4 >> 1);
  unint64_t v34 = &a1[v33];
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(a1, &a1[v33], a3, a4 >> 1, a5, a4 >> 1);
  _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZL21groupByDialectPerByteIN4llvm15MutableArrayRefIPN4mlir8bytecode6detail13TypeNumberingEEEEvT_EUlRKSB_RKT0_E_PS9_EEvT1_SK_SE_NS_15iterator_traitsISK_E15difference_typeEPNSM_10value_typeEl(&v7[v33], a2, a3, a4 - v32, &v5[v33], a4 - v32);
  unint64_t v36 = v5;
  unint64_t v37 = v7;
  unsigned int v38 = &v7[v33];
  do
  {
    while (1)
    {
      if (v38 == a2)
      {
        if (v37 == v34) {
          return result;
        }
        unint64_t v47 = &v7[8 * v32] - v37 - 8;
        if (v47 >= 0x38 && (unint64_t)(v36 - v37) >= 0x20)
        {
          uint64_t v57 = 0;
          uint64_t v58 = (v47 >> 3) + 1;
          uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v48 = &v5[v59];
          uint64_t v49 = &v37[v59];
          uint64_t v60 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v61 = &v5[v57];
            __n128 result = *(__n128 *)&v37[v57];
            long long v62 = *(_OWORD *)&v37[v57 + 16];
            *(__n128 *)uint64_t v61 = result;
            *((_OWORD *)v61 + 1) = v62;
            v57 += 32;
            v60 -= 4;
          }
          while (v60);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          uint64_t v48 = v5;
          uint64_t v49 = v37;
        }
        do
        {
          uint64_t v50 = *(void *)v49;
          v49 += 8;
          *(void *)uint64_t v48 = v50;
          v48 += 8;
        }
        while (v49 != v34);
        return result;
      }
      int v39 = **(_DWORD **)(a3 + 8);
      unsigned int v40 = *(_DWORD *)(*(void *)(*(void *)v38 + 16) + 16);
      unsigned int v41 = *(_DWORD *)(*(void *)(*(void *)v37 + 16) + 16);
      if (v40 != v39) {
        break;
      }
      if (v41 == v39) {
        goto LABEL_48;
      }
LABEL_39:
      *(void *)int v5 = *(void *)v38;
      v5 += 8;
      v38 += 8;
      v36 += 8;
      if (v37 == v34) {
        goto LABEL_49;
      }
    }
    if (v41 != v39 && v41 > v40) {
      goto LABEL_39;
    }
LABEL_48:
    *(void *)int v5 = *(void *)v37;
    v5 += 8;
    v37 += 8;
    v36 += 8;
  }
  while (v37 != v34);
LABEL_49:
  if (v38 == a2) {
    return result;
  }
  unint64_t v43 = a2 - v38 - 8;
  if (v43 < 0x48 || (unint64_t)(v36 - v38) < 0x20)
  {
    unsigned int v44 = v5;
    unint64_t v45 = v38;
    do
    {
LABEL_53:
      uint64_t v46 = *(void *)v45;
      v45 += 8;
      *(void *)unsigned int v44 = v46;
      v44 += 8;
    }
    while (v45 != a2);
    return result;
  }
  uint64_t v51 = 0;
  uint64_t v52 = (v43 >> 3) + 1;
  uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
  unsigned int v44 = &v5[v53];
  unint64_t v45 = &v38[v53];
  uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v55 = &v5[v51];
    __n128 result = *(__n128 *)&v38[v51];
    long long v56 = *(_OWORD *)&v38[v51 + 16];
    *(__n128 *)uint64_t v55 = result;
    *((_OWORD *)v55 + 1) = v56;
    v51 += 32;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_53;
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *,mlir::WalkStage const&)>::callback_fn<mlir::bytecode::detail::IRNumberingState::computeGlobalNumberingState(mlir::Operation *)::$_0>(uint64_t **a1, uint64_t a2, _DWORD *a3)
{
  int v4 = a3[1];
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x7FFFFF) == 0 || v4 != *a3)
  {
    if (v4) {
      return;
    }
    uint64_t v8 = a1[1];
    unsigned int v9 = *((_DWORD *)*a1 + 2);
    if (v9 && *(unsigned char *)(**a1 + 24 * v9 - 8))
    {
      uint64_t v10 = *(mlir::Block **)(a2 + 16);
      if (v10)
      {
        unint64_t Parent = mlir::Block::getParent(v10);
        int v5 = *(_DWORD *)(a2 + 44);
      }
      else
      {
        unint64_t Parent = 0;
      }
      if ((v5 & 0x800000) != 0)
      {
        uint64_t v14 = *(unsigned int *)(a2 + 68);
        if (v14)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(void *)(a2 + 72);
          do
          {
            v64[0] = *(void *)(v16 + 32 * v15 + 24);
            ParentRegion = mlir::Value::getParentRegion((mlir::Value *)v64);
            if (ParentRegion != (mlir::Block *)Parent)
            {
              uint64_t v18 = **a1;
              uint64_t v19 = 24 * *((unsigned int *)*a1 + 2);
              uint64_t v20 = v18 + v19;
              while (v19)
              {
                uint64_t v21 = *(void *)(v18 + v19 - 24);
                int v22 = *(unsigned __int8 *)(v18 + v19 - 8);
                v19 -= 24;
                if (v22) {
                  BOOL v23 = v21 == *((void *)ParentRegion + 2);
                }
                else {
                  BOOL v23 = 1;
                }
                if (v23)
                {
                  v18 += v19 + 24;
                  break;
                }
              }
              while (v20 != v18)
              {
                *(unsigned char *)(v20 - 8) = *(unsigned char *)(v18 - 8);
                *(_WORD *)(*(void *)(v20 - 16) + 4) = 256;
                v20 -= 24;
              }
            }
            ++v15;
          }
          while (v15 != v14);
        }
      }
    }
    v8[66] += 8;
    uint64_t v24 = v8[56];
    if (v24 && ((v24 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v24 + 8 <= v8[57] - v24)
    {
      unint64_t v25 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    else
    {
      unsigned int v26 = *((_DWORD *)v8 + 118) >> 7;
      if (v26 >= 0x1E) {
        LOBYTE(v26) = 30;
      }
      uint64_t v27 = 4096 << v26;
      buffer = (char *)llvm::allocate_buffer(4096 << v26, (std::align_val_t)8uLL);
      uint64_t v29 = *((unsigned int *)v8 + 118);
      if (v29 >= *((_DWORD *)v8 + 119))
      {
        uint64_t v58 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 58), v8 + 60, v29 + 1, 8);
        buffer = v58;
        LODWORD(v29) = *((_DWORD *)v8 + 118);
      }
      *(void *)(v8[58] + 8 * v29) = buffer;
      ++*((_DWORD *)v8 + 118);
      v8[57] = (uint64_t)&buffer[v27];
      unint64_t v25 = (unint64_t)(buffer + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    v8[56] = v25 + 8;
    unint64_t v30 = a1[2];
    int v31 = (*(_DWORD *)v30)++;
    *(_DWORD *)unint64_t v25 = v31;
    *(_WORD *)(v25 + 4) = 0;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((void *)(a2 + 48))) {
      *(_WORD *)(v25 + 4) = 257;
    }
    uint64_t v32 = v8[3];
    unsigned int v33 = *((_DWORD *)v8 + 10);
    if (!v33) {
      goto LABEL_68;
    }
    unsigned int v34 = (v33 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v35 = (void *)(v32 + 16 * v34);
    uint64_t v36 = *v35;
    if (*v35 == a2) {
      goto LABEL_55;
    }
    unint64_t v37 = 0;
    int v38 = 1;
    while (v36 != -4096)
    {
      if (v37) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v36 == -8192;
      }
      if (v39) {
        unint64_t v37 = v35;
      }
      unsigned int v40 = v34 + v38++;
      unsigned int v34 = v40 & (v33 - 1);
      uint64_t v35 = (void *)(v32 + 16 * v34);
      uint64_t v36 = *v35;
      if (*v35 == a2) {
        goto LABEL_55;
      }
    }
    uint64_t v52 = v37 ? v37 : v35;
    int v53 = *((_DWORD *)v8 + 8);
    if (4 * v53 + 4 < 3 * v33)
    {
      if (v33 + ~v53 - *((_DWORD *)v8 + 9) > v33 >> 3) {
        goto LABEL_52;
      }
    }
    else
    {
LABEL_68:
      v33 *= 2;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)(v8 + 3), v33);
    uint64_t v54 = v8[3];
    int v55 = *((_DWORD *)v8 + 10) - 1;
    unsigned int v56 = v55 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v52 = (void *)(v54 + 16 * v56);
    uint64_t v57 = *v52;
    if (*v52 == a2)
    {
LABEL_70:
      ++*((_DWORD *)v8 + 8);
      if (a2 == -4096) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    uint64_t v59 = 0;
    int v60 = 1;
    while (v57 != -4096)
    {
      if (v59) {
        BOOL v61 = 0;
      }
      else {
        BOOL v61 = v57 == -8192;
      }
      if (v61) {
        uint64_t v59 = v52;
      }
      unsigned int v62 = v56 + v60++;
      unsigned int v56 = v62 & v55;
      uint64_t v52 = (void *)(v54 + 16 * (v62 & v55));
      uint64_t v57 = *v52;
      if (*v52 == a2) {
        goto LABEL_70;
      }
    }
    if (v59) {
      uint64_t v52 = v59;
    }
LABEL_52:
    uint64_t v41 = *v52;
    ++*((_DWORD *)v8 + 8);
    if (v41 == -4096)
    {
LABEL_54:
      *uint64_t v52 = a2;
      v52[1] = v25;
LABEL_55:
      if ((*(_DWORD *)(a2 + 44) & 0x7FFFFF) != 0)
      {
        int v42 = *a1;
        char v43 = *(unsigned char *)(v25 + 5) ^ 1;
        uint64_t v44 = *((unsigned int *)v42 + 2);
        if (v44 >= *((_DWORD *)v42 + 3))
        {
          v64[0] = a2;
          v64[1] = v25;
          char v65 = v43;
          unint64_t v46 = v44 + 1;
          BOOL v47 = *v42 + 24 * (unint64_t)v44 > (unint64_t)v64;
          if (*v42 <= (unint64_t)v64 && v47)
          {
            uint64_t v63 = (char *)v64 - *v42;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 2, v46, 24);
            uint64_t v48 = *v42;
            uint64_t v49 = &v63[*v42];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 2, v46, 24);
            uint64_t v48 = *v42;
            uint64_t v49 = (char *)v64;
          }
          uint64_t v50 = v48 + 24 * *((unsigned int *)v42 + 2);
          long long v51 = *(_OWORD *)v49;
          *(void *)(v50 + 16) = *((void *)v49 + 2);
          *(_OWORD *)uint64_t v50 = v51;
        }
        else
        {
          uint64_t v45 = *v42 + 24 * v44;
          *(void *)uint64_t v45 = a2;
          *(void *)(v45 + 8) = v25;
          *(unsigned char *)(v45 + 16) = v43;
        }
        ++*((_DWORD *)v42 + 2);
      }
      return;
    }
LABEL_53:
    --*((_DWORD *)v8 + 9);
    goto LABEL_54;
  }
  unsigned int v12 = *((_DWORD *)*a1 + 2);
  uint64_t v13 = *(void *)(**a1 + 24 * v12 - 16);
  *((_DWORD *)*a1 + 2) = v12 - 1;
  if (!*(unsigned char *)(v13 + 5)) {
    *(_WORD *)(v13 + 4) = 257;
  }
}

uint64_t mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v2 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v1 = a1;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v17 = 98;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      uint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::AttributeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      uint64_t v2 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v1 = a1;
    }
  }
  uint64_t v3 = (void *)(v1 + 72);
  uint64_t v4 = v2[420];
  uint64_t v5 = *(void *)(v1 + 96);
  if ((v5 & 2) == 0) {
    uint64_t v3 = (void *)*v3;
  }
  return (*(uint64_t (**)(void *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v3, v4);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(a1, v7);
    unint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v18 = result;
      do
      {
        _OWORD *v18 = xmmword_1810FFA60;
        *(_OWORD *)((char *)v18 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            if (*(void *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v27);
              int v22 = v27;
              _OWORD *v27 = *(_OWORD *)v21;
              *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      _OWORD *v12 = xmmword_1810FFA60;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_25:
      unsigned int v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        _OWORD *v15 = xmmword_1810FFA60;
        uint64_t v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v23 = v14 / 0x18 + 1;
    uint64_t v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    unint64_t v25 = result;
    do
    {
      _OWORD *v25 = xmmword_1810FFA60;
      *(_OWORD *)((char *)v25 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = xmmword_1810FFA60;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v2 = 0x1E8EB8000;
    uint64_t v1 = a1;
    if (v7)
    {
      unint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::StorageUserTrait::IsMutable<Empty>]";
      unint64_t v17 = 98;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      unsigned int v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::StorageUserTrait::IsMutable<mlir::TypeID mlir::TypeID::get<mlir::TypeTrait::IsMutable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v2 = 0x1E8EB8000;
      uint64_t v1 = a1;
    }
  }
  uint64_t v3 = (void *)(v1 + 72);
  uint64_t v4 = *(void *)(v2 + 2080);
  uint64_t v5 = *(void *)(v1 + 96);
  if ((v5 & 2) == 0) {
    uint64_t v3 = (void *)*v3;
  }
  return (*(uint64_t (**)(void *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v3, v4);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>,mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::InsertIntoBucket<mlir::AsmDialectResourceHandle const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v11 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (void *)(*(void *)a1 + 24 * v12);
  uint64_t v13 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = a2;
      }
      unsigned int v17 = v12 + v15++;
      unsigned int v12 = v17 & v11;
      a2 = (void *)(*(void *)a1 + 24 * (v17 & v11));
      uint64_t v13 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v14) {
      a2 = v14;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  long long v9 = *(_OWORD *)a3;
  a2[2] = a3[2];
  *(_OWORD *)a2 = v9;
  return a2;
}

int64x2_t *llvm::DenseMap<mlir::AsmDialectResourceHandle,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>,llvm::detail::DenseSetPair<mlir::AsmDialectResourceHandle>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = (int64x2_t *)llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x48)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      unsigned int v12 = &result->i64[3 * (v16 & 0x1FFFFFFFFFFFFFFCLL)];
      int64x2_t v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v18 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      uint64_t v19 = result;
      do
      {
        int64x2_t *v19 = v17;
        v19[1] = (int64x2_t)xmmword_181100040;
        void v19[4] = (int64x2_t)xmmword_181100040;
        void v19[5] = (int64x2_t)xmmword_181100030;
        void v19[2] = (int64x2_t)xmmword_181100030;
        void v19[3] = v17;
        v19 += 6;
        v18 -= 4;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v21 = v4;
          do
          {
            uint64_t v29 = *(void *)v21;
            if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              int v30 = *(_DWORD *)(a1 + 16) - 1;
              unsigned int v31 = v30 & ((v29 >> 4) ^ (v29 >> 9));
              uint64_t v27 = (void *)(*(void *)a1 + 24 * v31);
              uint64_t v32 = *v27;
              if (v29 != *v27)
              {
                unsigned int v33 = 0;
                int v34 = 1;
                while (v32 != -4096)
                {
                  if (v33) {
                    BOOL v35 = 0;
                  }
                  else {
                    BOOL v35 = v32 == -8192;
                  }
                  if (v35) {
                    unsigned int v33 = v27;
                  }
                  unsigned int v36 = v31 + v34++;
                  unsigned int v31 = v36 & v30;
                  uint64_t v27 = (void *)(*(void *)a1 + 24 * (v36 & v30));
                  uint64_t v32 = *v27;
                  if (v29 == *v27) {
                    goto LABEL_26;
                  }
                }
                if (v33) {
                  uint64_t v27 = v33;
                }
              }
LABEL_26:
              long long v28 = *(_OWORD *)v21;
              v27[2] = *((void *)v21 + 2);
              *(_OWORD *)uint64_t v27 = v28;
              ++*(_DWORD *)(a1 + 8);
            }
            uint64_t v21 = (llvm *)((char *)v21 + 24);
          }
          while (v21 != (llvm *)((char *)v4 + 24 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      unsigned int v12 = (uint64_t *)result;
    }
    uint64_t v20 = &result->i64[3 * v10];
    do
    {
      uint64_t *v12 = -4096;
      v12[1] = -4096;
      void v12[2] = 0;
      v12 += 3;
    }
    while (v12 != v20);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x48)
    {
      int v15 = (uint64_t *)result;
LABEL_21:
      unsigned int v26 = &result->i64[3 * v13];
      do
      {
        uint64_t *v15 = -4096;
        v15[1] = -4096;
        v15[2] = 0;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v22 = v14 / 0x18 + 1;
    int v15 = &result->i64[3 * (v22 & 0x1FFFFFFFFFFFFFFCLL)];
    int64x2_t v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    unint64_t v25 = result;
    do
    {
      int64x2_t *v25 = v23;
      v25[1] = (int64x2_t)xmmword_181100040;
      v25[4] = (int64x2_t)xmmword_181100040;
      v25[5] = (int64x2_t)xmmword_181100030;
      void v25[2] = (int64x2_t)xmmword_181100030;
      void v25[3] = v23;
      v25 += 6;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL)) {
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t llvm::MapVector<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *,llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::SmallVector<std::pair<llvm::StringRef,mlir::bytecode::detail::DialectResourceNumbering *>,0u>>::try_emplace<mlir::bytecode::detail::DialectResourceNumbering *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v20 = *a2;
  LODWORD(v21) = 0;
  uint64_t v19 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)&v20, &v19))return *(void *)(a1 + 24) + 24 * *((unsigned int *)v19 + 4); {
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)&v20, (uint64_t)&v20, v19);
  }
  *(_OWORD *)int v7 = v20;
  *((_DWORD *)v7 + 4) = v21;
  unsigned int v8 = (void *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  *((_DWORD *)v7 + 4) = v9;
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    long long v20 = *a2;
    uint64_t v21 = *a3;
    unint64_t v12 = v9 + 1;
    BOOL v13 = *v8 + 24 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v8 <= (unint64_t)&v20 && v13)
    {
      uint64_t v18 = (char *)&v20 - *v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      uint64_t v14 = *(void *)(a1 + 24);
      int v15 = &v18[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v12, 24);
      uint64_t v14 = *(void *)(a1 + 24);
      int v15 = (char *)&v20;
    }
    uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 32);
    long long v17 = *(_OWORD *)v15;
    *(void *)(v16 + 16) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v16 = v17;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24) + 24 * v9;
    *(_OWORD *)uint64_t v10 = *a2;
    *(void *)(v10 + 16) = *a3;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v11;
  return *v8 + 24 * v11 - 24;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::CastOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v17 = 71;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3744), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::CastOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v22 = 71;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3744);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void mlir::OperationState::addAttribute(mlir::Attribute *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a1);
  __int16 v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::NamedAttribute::NamedAttribute(v12, v9, a4);
  mlir::NamedAttrList::push_back((uint64_t)a1 + 112, v12[0], v12[1]);
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
  }
  {
    unint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
    unint64_t v9 = 76;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Write>(void)::instance;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  BOOL v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  unint64_t v4 = v39;
  if (mlir::detail::DenseArrayAttrImpl<int>::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        unint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    unint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)unint64_t v10 = v11;
    ++v47;
  }
  unsigned int v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int32_t>]";
  unint64_t v41 = 91;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    unsigned int v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          unint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      unint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)unint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        unint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      unint64_t v25 = v53;
      unsigned int v26 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unsigned int v26 = __p;
      }
      int v53 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v50;
    if (v50)
    {
      long long v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          unsigned int v31 = (void *)*--v28;
          int v30 = v31;
          *long long v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      long long v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::DialectBytecodeWriter::writeSparseArray<int>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  if (a3)
  {
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (a2[v8])
      {
        unsigned int v7 = v8;
        ++v6;
      }
      ++v8;
    }
    while (a3 != v8);
    if (v7 > 0x100) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v7 = 0;
    unsigned int v6 = 0;
  }
  if (v6 > a3 >> 1)
  {
LABEL_15:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, 2 * a3);
    if (a3)
    {
      uint64_t v14 = 4 * a3;
      do
      {
        uint64_t v15 = *v4++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v15);
        v14 -= 4;
      }
      while (v14);
    }
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, (2 * v6) | 1);
  if (v6)
  {
    uint64_t v10 = v7 + 1;
    uint64_t v11 = 32 - __clz(v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v11);
    uint64_t v12 = 0;
    do
    {
      int v13 = v4[v12];
      if (v13) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, (v13 << v11) | v12);
      }
      ++v12;
    }
    while (v10 != v12);
  }
  return result;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
  }
  {
    uint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
    unint64_t v9 = 75;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Read>(void)::instance;
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
  }
  {
    uint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
    unint64_t v9 = 79;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    unint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Allocate>(void)::instance;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (const char *)*((unsigned int *)a2 + 2);
  uint64_t v7 = (const char *)*(unsigned int *)(a3 + 8);
  if (v6 == v7)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = *(void **)a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      unsigned int v47 = v6;
      int v13 = &v46;
      uint64_t v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v14 = (char *)v50;
          int v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          int v13 = &v46;
          uint64_t v14 = (char *)v50;
        }
      }
      uint64_t v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        unsigned int v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        unint64_t v18 = &v46;
        long long v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v19 = (char *)v50;
            unint64_t v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            unint64_t v18 = &v46;
            long long v19 = (char *)v50;
          }
        }
        uint64_t v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)uint64_t v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          unsigned int v47 = v7;
          long long v23 = &v46;
          uint64_t v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              uint64_t v24 = (char *)v50;
              long long v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              long long v23 = &v46;
              uint64_t v24 = (char *)v50;
            }
          }
          unint64_t v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)unint64_t v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = (void **)__p;
      if (__p)
      {
        long long v28 = v57;
        uint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            long long v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      int v30 = v54;
      if (v54)
      {
        unsigned int v31 = v55;
        unint64_t v32 = v54;
        if (v55 != v54)
        {
          do
          {
            unint64_t v34 = (void *)*--v31;
            unint64_t v33 = v34;
            *unsigned int v31 = 0;
            if (v34) {
              operator delete[](v33);
            }
          }
          while (v31 != v30);
          unint64_t v32 = v54;
        }
        uint64_t v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  BOOL v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::UnitAttr]";
  unint64_t v41 = 64;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    BOOL v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          uint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      long long v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        long long v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v19 = (char *)v46;
            unint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            long long v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    long long v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      uint64_t v27 = v51;
      long long v28 = v50;
      if (v51 != v50)
      {
        do
        {
          int v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        long long v28 = v50;
      }
      unsigned int v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::AsmParser::parseType<mlir::FunctionType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  long long v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      long long v9 = v25;
      unint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          long long v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        unint64_t v10 = __p;
      }
      unint64_t v25 = v8;
      operator delete(v10);
    }
    unint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      unint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = (void *)*--v12;
          uint64_t v14 = v15;
          void *v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v22;
      }
      long long v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t **a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[1];
  uint64_t v8 = **a2;
  uint64_t v7 = (*a2)[1];
  uint64_t v10 = *v6;
  uint64_t v9 = v6[1];
  v65[0] = v8;
  v60[0] = v10;
  BOOL v11 = v7 == 0;
  BOOL v12 = v9 == 0;
  BOOL v13 = (v7 | v9) == 0;
  if (!(v7 | v9))
  {
    uint64_t v14 = (const char *)a3[1];
    if (v14)
    {
      uint64_t v15 = 0;
LABEL_31:
      __int16 v61 = 257;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v65, a1, a4, v60);
      if (v65[0])
      {
        int v62 = 5;
        uint64_t v63 = v15;
        uint64_t v29 = &v62;
        int v30 = (char *)v66;
        if (v67 >= v68)
        {
          unint64_t v52 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            int64_t v57 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            int v30 = (char *)v66;
            uint64_t v29 = (int *)((char *)v66 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v52, 24);
            uint64_t v29 = &v62;
            int v30 = (char *)v66;
          }
        }
        unsigned int v31 = &v30[24 * v67];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = *((void *)v29 + 2);
        *(_OWORD *)unsigned int v31 = v32;
        uint64_t v33 = ++v67;
        if (v65[0])
        {
          int v62 = 3;
          uint64_t v63 = " operands present, but expected ";
          uint64_t v64 = 32;
          unint64_t v34 = &v62;
          int64_t v35 = (char *)v66;
          if (v33 >= v68)
          {
            unint64_t v53 = v33 + 1;
            BOOL v54 = (char *)v66 + 24 * v33 > (char *)&v62;
            if (v66 <= &v62 && v54)
            {
              int64_t v58 = (char *)&v62 - (unsigned char *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              int64_t v35 = (char *)v66;
              unint64_t v34 = (int *)((char *)v66 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
              unint64_t v34 = &v62;
              int64_t v35 = (char *)v66;
            }
          }
          int64_t v36 = &v35[24 * v67];
          long long v37 = *(_OWORD *)v34;
          *((void *)v36 + 2) = *((void *)v34 + 2);
          *(_OWORD *)int64_t v36 = v37;
          uint64_t v38 = ++v67;
          if (v65[0])
          {
            int v62 = 5;
            uint64_t v63 = v14;
            uint64_t v39 = &v62;
            BOOL v40 = (char *)v66;
            if (v38 >= v68)
            {
              unint64_t v55 = v38 + 1;
              BOOL v56 = (char *)v66 + 24 * v38 > (char *)&v62;
              if (v66 <= &v62 && v56)
              {
                int64_t v59 = (char *)&v62 - (unsigned char *)v66;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                BOOL v40 = (char *)v66;
                uint64_t v39 = (int *)((char *)v66 + v59);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
                uint64_t v39 = &v62;
                BOOL v40 = (char *)v66;
              }
            }
            unint64_t v41 = &v40[24 * v67];
            long long v42 = *(_OWORD *)v39;
            *((void *)v41 + 2) = *((void *)v39 + 2);
            *(_OWORD *)unint64_t v41 = v42;
            ++v67;
          }
        }
      }
      uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      }
      if (v74)
      {
        __int16 v43 = (void **)__p;
        if (__p)
        {
          uint64_t v44 = v73;
          uint64_t v45 = __p;
          if (v73 != __p)
          {
            do
              uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
            while (v44 != v43);
            uint64_t v45 = __p;
          }
          BOOL v73 = v43;
          operator delete(v45);
        }
        int v46 = v70;
        if (v70)
        {
          unsigned int v47 = v71;
          unsigned int v48 = v70;
          if (v71 != v70)
          {
            do
            {
              uint64_t v50 = (void *)*--v47;
              uint64_t v49 = v50;
              *unsigned int v47 = 0;
              if (v50) {
                operator delete[](v49);
              }
            }
            while (v47 != v46);
            unsigned int v48 = v70;
          }
          uint64_t v71 = v46;
          operator delete(v48);
        }
        if (v66 != v69) {
          free(v66);
        }
      }
      return v28;
    }
    return 1;
  }
  uint64_t v15 = 0;
  uint64_t v17 = v10;
  uint64_t v18 = v8;
  uint64_t v19 = v8 + 32 * v7;
  uint64_t v20 = v10 + 32 * v9;
  while (1)
  {
    if (v18 != v19)
    {
      uint64_t v21 = v65;
LABEL_9:
      *uint64_t v21 = v18 + 32;
      uint64_t v18 = v65[0];
      uint64_t v22 = v60[0];
      goto LABEL_10;
    }
    uint64_t v22 = v10 + 32 * v9;
    uint64_t v18 = v19;
    if (v17 != v20)
    {
      uint64_t v21 = v60;
      uint64_t v18 = v17;
      goto LABEL_9;
    }
LABEL_10:
    ++v15;
    uint64_t v17 = v22;
    if (v18 == v19)
    {
      uint64_t v17 = v22;
      if (v22 == v20) {
        break;
      }
    }
  }
  uint64_t v14 = (const char *)a3[1];
  if (v14 != v15) {
    goto LABEL_31;
  }
  if (v13) {
    return 1;
  }
  long long v23 = (void *)*a3;
  while (1)
  {
    uint64_t v24 = v12 ? 0 : v10;
    uint64_t v25 = (v8 == 0) | v11 ? v24 : v8;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v25, *v23, a5))break; {
    if (v11)
    }
      uint64_t v26 = v10;
    else {
      uint64_t v26 = v8;
    }
    uint64_t v27 = v26 + 32;
    if (v11) {
      uint64_t v10 = v27;
    }
    else {
      uint64_t v8 = v27;
    }
    ++v23;
    BOOL v12 = v10 == v20;
    BOOL v11 = v8 == v19;
    if (v8 == v19 && v10 == v20) {
      return 1;
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v7 = v6;
  uint64_t v8 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v8 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 40);
  }
  else
  {
    *((void *)v6 + 4) = v8 + 1;
    unsigned char *v8 = 40;
  }
  v11[0] = ", ";
  v11[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)v11);
  uint64_t v9 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v9 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((void *)v7 + 4) = v9 + 1;
    unsigned char *v9 = 41;
  }
  return mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(a1, a3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(8uLL);
    *unint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        BOOL v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[443];
    return a1[32];
  }
  return result;
}

void mlir::bufferization::ToMemrefOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v12 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  if (a5)
  {
    Unituint64_t Attr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x10uLL);
    *unint64_t v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        BOOL v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[445];
    return a1[32];
  }
  return result;
}

void mlir::bufferization::ToTensorOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4)
  {
    Unituint64_t Attr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a5)
  {
    uint64_t v11 = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = v11;
  }
  long long __src = v25;
  uint64_t v24 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v26 = v22;
  if (v24 != 1)
  {
    if (!v24)
    {
      if (HIDWORD(v24))
      {
        unsigned int v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v25, 1uLL, 8);
      unsigned int v13 = v24;
      if (v24 != 1) {
        goto LABEL_10;
      }
    }
LABEL_11:
    LODWORD(v(*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = 1;
  }
  uint64_t v14 = mlir::ValueRange::dereference_iterator(&v26, 0);
  uint64_t TensorTypeFromMemRefType = mlir::memref::getTensorTypeFromMemRefType(*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  *(void *)long long __src = TensorTypeFromMemRefType;
  long long v16 = __src;
  uint64_t v17 = v24;
  uint64_t v18 = *(unsigned int *)(a2 + 72);
  unint64_t v19 = v18 + v24;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if (v17)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v25) {
    free(__src);
  }
}

uint64_t mlir::DialectBytecodeReader::readSparseArray<int>(uint64_t a1, _DWORD *a2, const char *a3)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  unint64_t v101 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v101)) {
    return 0;
  }
  unint64_t v6 = v101;
  unint64_t v7 = v101 >> 1;
  v101 >>= 1;
  if (v6 < 2) {
    return 1;
  }
  if (v6)
  {
    unint64_t v98 = 0;
    if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v98))
    {
      if (v98 >= 9)
      {
        v99[0] = "reading sparse array with indexing above 8 bits: ";
        __int16 v100 = 259;
        (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
        if (v105[0])
        {
          int v102 = 5;
          unsigned int v103 = (const char *)v98;
          int64_t v36 = &v102;
          long long v37 = (char *)v106;
          if (v107 >= v108)
          {
            unint64_t v76 = v107 + 1;
            if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
            {
              int64_t v90 = (char *)&v102 - (unsigned char *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              long long v37 = (char *)v106;
              int64_t v36 = (int *)((char *)v106 + v90);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v76, 24);
              int64_t v36 = &v102;
              long long v37 = (char *)v106;
            }
          }
          uint64_t v38 = &v37[24 * v107];
          long long v39 = *(_OWORD *)v36;
          *((void *)v38 + 2) = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v38 = v39;
          ++v107;
          if (v105[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
          }
        }
        if (!v114) {
          return 0;
        }
        BOOL v40 = (void **)__p;
        if (__p)
        {
          unint64_t v41 = v113;
          long long v42 = __p;
          if (v113 != __p)
          {
            do
              unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
            while (v41 != v40);
            long long v42 = __p;
          }
          uint64_t v113 = v40;
          operator delete(v42);
        }
        unsigned int v31 = v110;
        if (!v110) {
          goto LABEL_78;
        }
        __int16 v43 = v111;
        uint64_t v33 = v110;
        if (v111 == v110) {
          goto LABEL_77;
        }
        do
        {
          uint64_t v45 = (void *)*--v43;
          uint64_t v44 = v45;
          *__int16 v43 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v43 != v31);
        goto LABEL_76;
      }
      uint64_t v46 = v101;
      if (!v101) {
        return 1;
      }
      while (1)
      {
        unint64_t v97 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v97)) {
          break;
        }
        unint64_t v47 = v97 & ~(-1 << v98);
        if (v47 >= (unint64_t)a3)
        {
          v99[0] = "reading a sparse array found index ";
          __int16 v100 = 259;
          (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
          if (v105[0])
          {
            int v102 = 5;
            unsigned int v103 = (const char *)v47;
            unsigned int v48 = &v102;
            uint64_t v49 = (char *)v106;
            if (v107 >= v108)
            {
              unint64_t v81 = v107 + 1;
              if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
              {
                int64_t v93 = (char *)&v102 - (unsigned char *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                uint64_t v49 = (char *)v106;
                unsigned int v48 = (int *)((char *)v106 + v93);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v81, 24);
                unsigned int v48 = &v102;
                uint64_t v49 = (char *)v106;
              }
            }
            uint64_t v50 = &v49[24 * v107];
            long long v51 = *(_OWORD *)v48;
            *((void *)v50 + 2) = *((void *)v48 + 2);
            *(_OWORD *)uint64_t v50 = v51;
            uint64_t v52 = ++v107;
            if (v105[0])
            {
              int v102 = 3;
              unsigned int v103 = " but only ";
              uint64_t v104 = 10;
              unint64_t v53 = &v102;
              BOOL v54 = (char *)v106;
              if (v52 >= v108)
              {
                unint64_t v82 = v52 + 1;
                BOOL v83 = (char *)v106 + 24 * v52 > (char *)&v102;
                if (v106 <= &v102 && v83)
                {
                  int64_t v94 = (char *)&v102 - (unsigned char *)v106;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  BOOL v54 = (char *)v106;
                  unint64_t v53 = (int *)((char *)v106 + v94);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v82, 24);
                  unint64_t v53 = &v102;
                  BOOL v54 = (char *)v106;
                }
              }
              unint64_t v55 = &v54[24 * v107];
              long long v56 = *(_OWORD *)v53;
              *((void *)v55 + 2) = *((void *)v53 + 2);
              *(_OWORD *)unint64_t v55 = v56;
              uint64_t v57 = ++v107;
              if (v105[0])
              {
                int v102 = 5;
                unsigned int v103 = a3;
                int64_t v58 = &v102;
                int64_t v59 = (char *)v106;
                if (v57 >= v108)
                {
                  unint64_t v84 = v57 + 1;
                  BOOL v85 = (char *)v106 + 24 * v57 > (char *)&v102;
                  if (v106 <= &v102 && v85)
                  {
                    int64_t v95 = (char *)&v102 - (unsigned char *)v106;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    int64_t v59 = (char *)v106;
                    int64_t v58 = (int *)((char *)v106 + v95);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v84, 24);
                    int64_t v58 = &v102;
                    int64_t v59 = (char *)v106;
                  }
                }
                int v60 = &v59[24 * v107];
                long long v61 = *(_OWORD *)v58;
                *((void *)v60 + 2) = *((void *)v58 + 2);
                *(_OWORD *)int v60 = v61;
                uint64_t v62 = ++v107;
                if (v105[0])
                {
                  int v102 = 3;
                  unsigned int v103 = " storage available.";
                  uint64_t v104 = 19;
                  uint64_t v63 = &v102;
                  uint64_t v64 = (char *)v106;
                  if (v62 >= v108)
                  {
                    unint64_t v86 = v62 + 1;
                    BOOL v87 = (char *)v106 + 24 * v62 > (char *)&v102;
                    if (v106 <= &v102 && v87)
                    {
                      int64_t v96 = (char *)&v102 - (unsigned char *)v106;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      uint64_t v64 = (char *)v106;
                      uint64_t v63 = (int *)((char *)v106 + v96);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v86, 24);
                      uint64_t v63 = &v102;
                      uint64_t v64 = (char *)v106;
                    }
                  }
                  char v65 = &v64[24 * v107];
                  long long v66 = *(_OWORD *)v63;
                  *((void *)v65 + 2) = *((void *)v63 + 2);
                  *(_OWORD *)char v65 = v66;
                  ++v107;
                  if (v105[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
                  }
                }
              }
            }
          }
          if (!v114) {
            return 0;
          }
          unsigned int v67 = (void **)__p;
          if (__p)
          {
            unsigned int v68 = v113;
            unsigned int v69 = __p;
            if (v113 != __p)
            {
              do
                unsigned int v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
              while (v68 != v67);
              unsigned int v69 = __p;
            }
            uint64_t v113 = v67;
            operator delete(v69);
          }
          unsigned int v31 = v110;
          if (!v110) {
            goto LABEL_78;
          }
          uint64_t v70 = v111;
          uint64_t v33 = v110;
          if (v111 == v110) {
            goto LABEL_77;
          }
          do
          {
            unint64_t v72 = (void *)*--v70;
            uint64_t v71 = v72;
            *uint64_t v70 = 0;
            if (v72) {
              operator delete[](v71);
            }
          }
          while (v70 != v31);
          goto LABEL_76;
        }
        a2[v47] = v97 >> v98;
        if (!--v46) {
          return 1;
        }
      }
    }
  }
  else
  {
    if (v7 <= (unint64_t)a3)
    {
      while (1)
      {
        v105[0] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 72))(a1, v105)) {
          break;
        }
        *a2++ = v105[0];
        if (!--v7) {
          return 1;
        }
      }
      return 0;
    }
    v99[0] = "trying to read an array of ";
    __int16 v100 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)a1 + 16))(v105, a1, v99);
    if (v105[0])
    {
      int v102 = 5;
      unsigned int v103 = (const char *)v101;
      unint64_t v9 = &v102;
      uint64_t v10 = (char *)v106;
      if (v107 >= v108)
      {
        unint64_t v73 = v107 + 1;
        if (v106 <= &v102 && (char *)v106 + 24 * v107 > (char *)&v102)
        {
          int64_t v88 = (char *)&v102 - (unsigned char *)v106;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          uint64_t v10 = (char *)v106;
          unint64_t v9 = (int *)((char *)v106 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v73, 24);
          unint64_t v9 = &v102;
          uint64_t v10 = (char *)v106;
        }
      }
      uint64_t v11 = &v10[24 * v107];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v107;
      if (v105[0])
      {
        int v102 = 3;
        unsigned int v103 = " but only ";
        uint64_t v104 = 10;
        uint64_t v14 = &v102;
        uint64_t v15 = (char *)v106;
        if (v13 >= v108)
        {
          unint64_t v74 = v13 + 1;
          BOOL v75 = (char *)v106 + 24 * v13 > (char *)&v102;
          if (v106 <= &v102 && v75)
          {
            int64_t v89 = (char *)&v102 - (unsigned char *)v106;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            uint64_t v15 = (char *)v106;
            uint64_t v14 = (int *)((char *)v106 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v74, 24);
            uint64_t v14 = &v102;
            uint64_t v15 = (char *)v106;
          }
        }
        long long v16 = &v15[24 * v107];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)long long v16 = v17;
        uint64_t v18 = ++v107;
        if (v105[0])
        {
          int v102 = 5;
          unsigned int v103 = a3;
          unint64_t v19 = &v102;
          uint64_t v20 = (char *)v106;
          if (v18 >= v108)
          {
            unint64_t v77 = v18 + 1;
            BOOL v78 = (char *)v106 + 24 * v18 > (char *)&v102;
            if (v106 <= &v102 && v78)
            {
              int64_t v91 = (char *)&v102 - (unsigned char *)v106;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              uint64_t v20 = (char *)v106;
              unint64_t v19 = (int *)((char *)v106 + v91);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v77, 24);
              unint64_t v19 = &v102;
              uint64_t v20 = (char *)v106;
            }
          }
          unint64_t v21 = &v20[24 * v107];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = *((void *)v19 + 2);
          *(_OWORD *)unint64_t v21 = v22;
          uint64_t v23 = ++v107;
          if (v105[0])
          {
            int v102 = 3;
            unsigned int v103 = " storage available.";
            uint64_t v104 = 19;
            uint64_t v24 = &v102;
            uint64_t v25 = (char *)v106;
            if (v23 >= v108)
            {
              unint64_t v79 = v23 + 1;
              BOOL v80 = (char *)v106 + 24 * v23 > (char *)&v102;
              if (v106 <= &v102 && v80)
              {
                int64_t v92 = (char *)&v102 - (unsigned char *)v106;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                uint64_t v25 = (char *)v106;
                uint64_t v24 = (int *)((char *)v106 + v92);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v109, v79, 24);
                uint64_t v24 = &v102;
                uint64_t v25 = (char *)v106;
              }
            }
            long long v26 = &v25[24 * v107];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = *((void *)v24 + 2);
            *(_OWORD *)long long v26 = v27;
            ++v107;
            if (v105[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v105);
            }
          }
        }
      }
    }
    if (v114)
    {
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v113;
        int v30 = __p;
        if (v113 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          int v30 = __p;
        }
        uint64_t v113 = v28;
        operator delete(v30);
      }
      unsigned int v31 = v110;
      if (!v110) {
        goto LABEL_78;
      }
      long long v32 = v111;
      uint64_t v33 = v110;
      if (v111 == v110)
      {
LABEL_77:
        uint64_t v111 = v31;
        operator delete(v33);
LABEL_78:
        if (v106 != v109) {
          free(v106);
        }
        return 0;
      }
      do
      {
        int64_t v35 = (void *)*--v32;
        unint64_t v34 = v35;
        *long long v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
LABEL_76:
      uint64_t v33 = v110;
      goto LABEL_77;
    }
  }
  return 0;
}

const char *mlir::SideEffects::DefaultResource::getName(mlir::SideEffects::DefaultResource *this)
{
  return "<Default>";
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::tensor::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::AsmParser::parseType<mlir::TensorType>(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v20)) {
    return 0;
  }
  uint64_t v5 = v20;
  unint64_t v6 = *(void **)(*(void *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v18 = "invalid kind of type specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v4, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v27;
      long long v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        long long v12 = __p;
      }
      long long v27 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v24;
    if (v24)
    {
      uint64_t v14 = v25;
      uint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          long long v17 = (void *)*--v14;
          long long v16 = v17;
          void *v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  unint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::MemoryEffectOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v17 = 79;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3912), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::MemoryEffectOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v22 = 79;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3912);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v14 = *(void *)a1 + (v6 << 6);
    if (*(void *)a1 <= a3 && v14 > a3)
    {
      unint64_t v16 = a3 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
      unint64_t v3 = *(void *)a1 + v16;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(a1, v7);
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (a2)
  {
    unint64_t v9 = (void *)(*(void *)a1 + (v8 << 6));
    uint64_t v10 = a2;
    while (1)
    {
      int v12 = v9 + 2;
      void *v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v9 == (void *)v3) {
        goto LABEL_7;
      }
      unint64_t v13 = *(unsigned int *)(v3 + 8);
      if (!*(_DWORD *)(v3 + 8)) {
        goto LABEL_7;
      }
      if (v13 < 7)
      {
        uint64_t v11 = *(unsigned int *)(v3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 8);
        uint64_t v11 = *(unsigned int *)(v3 + 8);
        if (!v11) {
          goto LABEL_6;
        }
        int v12 = (void *)*v9;
      }
      memcpy(v12, *(const void **)v3, 8 * v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 8;
      if (!--v10)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unint64_t v3 = (_DWORD *)(a1 + 16);
  BOOL v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 64, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = v7 << 6;
    unint64_t v9 = v4;
    do
    {
      void *v9 = v9 + 2;
      v9[1] = 0x600000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 8;
      v6 += 16;
      v8 -= 64;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = v10 << 6;
      do
      {
        int v12 = *(char **)((char *)v6 + v11 - 64);
        if ((char *)v6 + v11 - 48 != v12) {
          free(v12);
        }
        v11 -= 64;
      }
      while (v11);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::DimOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::DimOp,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>>(mlir::IndexType **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.dim", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"tensor.dim";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::tensor::DimOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::detail::TypedValue<mlir::TensorType>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    void v18[2] = (uint64_t)"tensor.extract";
    unint64_t v18[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(void *)(a4 + 8));
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  int v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

uint64_t **llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>(uint64_t ***a1, void *a2)
{
  uint64_t result = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = &result[5 * v4];
    uint64_t v6 = 40 * v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    while (1)
    {
      uint64_t v8 = **result;
      {
        uint64_t v25 = result;
        uint64_t v23 = v5;
        uint64_t v24 = a2;
        uint64_t v21 = v8;
        uint64_t v22 = v6;
        uint64_t v8 = v21;
        uint64_t v6 = v22;
        uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
        uint64_t v5 = v23;
        a2 = v24;
        int v12 = v11;
        uint64_t result = v25;
        if (v12)
        {
          long long v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
          unint64_t v27 = 79;
          unint64_t v13 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
          if (v27 >= v13) {
            unint64_t v14 = v13;
          }
          else {
            unint64_t v14 = v27;
          }
          uint64_t v15 = &v26[v14];
          unint64_t v16 = v27 - v14;
          uint64_t v17 = 18;
          if (v16 < 0x12) {
            uint64_t v17 = v16;
          }
          uint64_t v18 = (uint64_t)&v15[v17];
          unint64_t v19 = v16 - v17;
          if (v19 >= v19 - 1) {
            uint64_t v20 = v19 - 1;
          }
          else {
            uint64_t v20 = v19;
          }
          mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v18, v20);
          uint64_t v8 = v21;
          uint64_t v6 = v22;
          uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
          uint64_t v5 = v23;
          a2 = v24;
          uint64_t result = v25;
        }
      }
      if (v8 == v7[439])
      {
        unint64_t v9 = (unint64_t)result[2];
        unint64_t v10 = v9 <= 7 ? 0 : v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
        if (*a2 == v10) {
          break;
        }
      }
      result += 5;
      v6 -= 40;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine(llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  if (a2)
  {
    if (this == (llvm::hashing::detail::hash_combine_recursive_helper *)__src || __src == a4) {
      goto LABEL_44;
    }
    if ((char *)this + 1 == __src)
    {
      char v17 = *(unsigned char *)this;
      uint64_t v18 = a4 - __src;
      memmove(this, __src, a4 - __src);
      *((unsigned char *)this + v18) = v17;
LABEL_44:
      uint64_t v46 = *((void *)this + 9);
      uint64_t v47 = *((void *)this + 11);
      uint64_t v48 = *((void *)this + 1);
      uint64_t v49 = *((void *)this + 12);
      uint64_t v50 = *((void *)this + 13);
      uint64_t v52 = *((void *)this + 6);
      uint64_t v51 = *((void *)this + 7);
      uint64_t v53 = *((void *)this + 14);
      unint64_t v54 = v53 ^ (0xB492B66FBE98F273 * __ROR8__(v46 + *((void *)this + 8) + v47 + v48, 37));
      uint64_t v55 = v47 - 0x4B6D499041670D8DLL * __ROR8__(v49 + v46 + v52, 42);
      uint64_t v56 = v50 + *((void *)this + 10);
      uint64_t v57 = *(void *)this - 0x4B6D499041670D8DLL * v49;
      uint64_t v58 = v57 + v50;
      uint64_t v60 = *((void *)this + 2);
      uint64_t v59 = *((void *)this + 3);
      uint64_t v61 = v57 + v48 + v60;
      uint64_t v62 = *((void *)this + 5);
      unint64_t v63 = v55 + v62;
      uint64_t v64 = __ROR8__(v56, 33);
      uint64_t v65 = __ROR8__(v58 + v59 + v54, 21) + v57 + __ROR8__(v61, 44);
      uint64_t v66 = v61 + v59;
      uint64_t v67 = v60 + v63;
      uint64_t v68 = *((void *)this + 4) + v53 - 0x4B6D499041670D8DLL * v64;
      uint64_t v69 = v62 + v52 + v68;
      uint64_t v70 = __ROR8__(v68 + v51 + v67, 21) + v68 + __ROR8__(v69, 44);
      *((void *)this + 11) = v66;
      *((void *)this + 12) = v65;
      *((void *)this + 13) = v69 + v51;
      *((void *)this + 14) = v70;
      *((void *)this + 9) = v63;
      *((void *)this + 10) = v54;
      *((void *)this + 8) = 0xB492B66FBE98F273 * v64;
      unint64_t v71 = v54
          - 0x4B6D499041670D8DLL * (v63 ^ (v63 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * ((v69 + v51) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                   * ((v69 + v51) ^ v66)))) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ ((0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v69 + v51) ^ v66)))) >> 47));
      unint64_t v72 = 0x9DDFEA08EB382D69
          * (v70 ^ ((0x9DDFEA08EB382D69 * (v70 ^ v65)) >> 47) ^ (0x9DDFEA08EB382D69 * (v70 ^ v65)));
      unint64_t v73 = 0xB492B66FBE98F273
          * (v64 + ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47)))
          - 0x622015F714C7D297 * (v72 ^ (v72 >> 47));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69
             * (v73 ^ ((0x9DDFEA08EB382D69 * (v73 ^ v71)) >> 47) ^ (0x9DDFEA08EB382D69 * (v73 ^ v71)))) ^ ((0x9DDFEA08EB382D69 * (v73 ^ ((0x9DDFEA08EB382D69 * (v73 ^ v71)) >> 47) ^ (0x9DDFEA08EB382D69 * (v73 ^ v71)))) >> 47));
    }
    if (__src + 1 == a4)
    {
      char v19 = *(a4 - 1);
      if (a4 - 1 != (char *)this) {
        memmove((char *)this + 1, this, a4 - 1 - (char *)this);
      }
      *(unsigned char *)this = v19;
      goto LABEL_44;
    }
    uint64_t v7 = __src - (char *)this;
    uint64_t v8 = a4 - __src;
    if (__src - (char *)this != a4 - __src)
    {
      uint64_t v20 = __src - (char *)this;
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = v8;
        uint64_t v8 = v21 % v8;
      }
      while (v8);
      if (v20)
      {
        uint64_t v22 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v20);
        do
        {
          char v24 = *((unsigned char *)v22 - 1);
          uint64_t v22 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v22 - 1);
          char v23 = v24;
          uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v22 + v7);
          long long v26 = v22;
          do
          {
            unint64_t v27 = v26;
            long long v26 = v25;
            *(unsigned char *)unint64_t v27 = *(unsigned char *)v25;
            char v28 = (char *)(a4 - (char *)v25);
            BOOL v29 = __OFSUB__(v7, v28);
            uint64_t v31 = v7 - (void)v28;
            char v30 = (v31 < 0) ^ v29;
            uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v31);
            if (v30) {
              uint64_t v25 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v26 + v7);
            }
          }
          while (v25 != v22);
          *(unsigned char *)long long v26 = v23;
        }
        while (v22 != this);
      }
      goto LABEL_44;
    }
    unint64_t v9 = &a4[~(unint64_t)__src];
    if (v9 >= &__src[~(unint64_t)this]) {
      unint64_t v9 = &__src[~(unint64_t)this];
    }
    unint64_t v10 = (unint64_t)(v9 + 1);
    int v11 = __src;
    int v12 = this;
    if (v10 >= 8)
    {
      if (&__src[v10] <= (char *)this || (int v11 = __src, v12 = this, (char *)this + v10 <= __src))
      {
        if (v10 >= 0x20)
        {
          unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFE0;
          long long v32 = (long long *)((char *)this + 16);
          uint64_t v33 = __src + 16;
          unint64_t v34 = v10 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v35 = *(v32 - 1);
            long long v36 = *v32;
            long long v37 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *long long v32 = v37;
            *((_OWORD *)v33 - 1) = v35;
            *(_OWORD *)uint64_t v33 = v36;
            v32 += 2;
            v33 += 32;
            v34 -= 32;
          }
          while (v34);
          if (v10 == v13) {
            goto LABEL_44;
          }
          if ((v10 & 0x18) == 0)
          {
            int v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v13);
            int v11 = &__src[v13];
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v13 = 0;
        }
        int v11 = &__src[v10 & 0xFFFFFFFFFFFFFFF8];
        int v12 = (llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + (v10 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = (uint64_t *)((char *)this + v13);
        long long v39 = &__src[v13];
        unint64_t v40 = v13 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v41 = *v38;
          *v38++ = *(void *)v39;
          *(void *)long long v39 = v41;
          v39 += 8;
          v40 += 8;
        }
        while (v40);
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_44;
        }
      }
    }
LABEL_40:
    long long v42 = v11 + 1;
    __int16 v43 = (char *)v12 + 1;
    do
    {
      char v44 = *(v43 - 1);
      *(v43 - 1) = *(v42 - 1);
      *(v42 - 1) = v44;
      if (v43 == __src) {
        break;
      }
      ++v43;
    }
    while (v42++ != a4);
    goto LABEL_44;
  }
  unint64_t v14 = __src - (char *)this;
  unint64_t v15 = *((void *)this + 15);

  return llvm::hashing::detail::hash_short(this, v14, v15);
}

uint64_t mlir::AsmParser::parseType<mlir::BaseMemRefType>(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v20)) {
    return 0;
  }
  uint64_t v5 = v20;
  uint64_t v6 = *(void **)(*(void *)v20 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v18 = "invalid kind of type specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v4, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    unint64_t v10 = (void **)__p;
    if (__p)
    {
      int v11 = v27;
      int v12 = __p;
      if (v27 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        int v12 = __p;
      }
      unint64_t v27 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          char v17 = (void *)*--v14;
          unint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = result;
  if (result != a3 || a2 != a4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(*(void *)(result + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13 != a3 || a2 + 1 != a4)
    {
      if (v13 != a3)
      {
        for (uint64_t i = (uint64_t *)(v13 + 32 * a2 + 56); ; i += 4)
        {
          unint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          char v17 = *(const char **)a7;
          unint64_t v18 = *(void *)(a7 + 8);
          __int16 v19 = (void *)*((void *)v16 + 4);
          if (v18 > *((void *)v16 + 3) - (void)v19)
          {
            llvm::raw_ostream::write(v16, v17, *(void *)(a7 + 8));
          }
          else if (v18)
          {
            memcpy(v19, v17, *(void *)(a7 + 8));
            *((void *)v16 + 4) += v18;
          }
          uint64_t v15 = *i;
          (*(void (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      uint64_t v20 = ~a2 + a4;
      uint64_t v21 = (uint64_t *)(v13 + 32 * a2 + 56);
      do
      {
        uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        char v24 = *(const char **)a7;
        unint64_t v25 = *(void *)(a7 + 8);
        long long v26 = (void *)*((void *)v23 + 4);
        if (v25 > *((void *)v23 + 3) - (void)v26)
        {
          llvm::raw_ostream::write(v23, v24, *(void *)(a7 + 8));
        }
        else if (v25)
        {
          memcpy(v26, v24, *(void *)(a7 + 8));
          *((void *)v23 + 4) += v25;
        }
        uint64_t v22 = *v21;
        v21 += 4;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v5 = v4;
  uint64_t v6 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 3uLL)
  {
    _DWORD *v6 = 540945696;
    *((void *)v4 + 4) += 4;
  }
  else
  {
    uint64_t v5 = llvm::raw_ostream::write(v4, " -> ", 4uLL);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  BOOL v13 = (*a2 != v9 || v8 != v10) && v7 == v9 && v8 + 1 == v10;
  if (!v13
    || *(_UNKNOWN **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v8) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    unint64_t v14 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v14 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 40);
    }
    else
    {
      *((void *)v5 + 4) = v14 + 1;
      unsigned char *v14 = 40;
    }
    char v17 = ", ";
    uint64_t v18 = 2;
    uint64_t result = (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v17);
    unint64_t v16 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v16 >= *((void *)v5 + 3))
    {
      return llvm::raw_ostream::write(v5, 41);
    }
    else
    {
      *((void *)v5 + 4) = v16 + 1;
      unsigned char *v16 = 41;
    }
  }
  else
  {
    char v17 = ", ";
    uint64_t v18 = 2;
    return (llvm::raw_ostream *)llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(*a2, a2[1], a2[2], a2[3], a1, a1, (uint64_t)&v17);
  }
  return result;
}

uint64_t llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = this;
  if (this != a3 || a2 != a4)
  {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(this, a2);
    this = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = a2 + 1;
    if (v13 != a3 || v15 != a4)
    {
      if (v13 != a3)
      {
        while (1)
        {
          char v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          uint64_t v18 = *(const char **)a7;
          unint64_t v19 = *(void *)(a7 + 8);
          uint64_t v20 = (void *)*((void *)v17 + 4);
          if (v19 > *((void *)v17 + 3) - (void)v20)
          {
            llvm::raw_ostream::write(v17, v18, *(void *)(a7 + 8));
          }
          else if (v19)
          {
            memcpy(v20, v18, *(void *)(a7 + 8));
            *((void *)v17 + 4) += v19;
          }
          uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
          (*(void (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
          ++v15;
        }
      }
      do
      {
        uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        uint64_t v23 = *(const char **)a7;
        unint64_t v24 = *(void *)(a7 + 8);
        unint64_t v25 = (void *)*((void *)v22 + 4);
        if (v24 > *((void *)v22 + 3) - (void)v25)
        {
          llvm::raw_ostream::write(v22, v23, *(void *)(a7 + 8));
        }
        else if (v24)
        {
          memcpy(v25, v23, *(void *)(a7 + 8));
          *((void *)v22 + 4) += v24;
        }
        uint64_t v21 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15);
        this = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a5 + 32))(a5, *(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v15;
      }
      while (a4 != v15);
    }
  }
  return this;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToMemrefOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::bufferization::detail::ToTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  unint64_t v41 = 67;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          char v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::IntegerAttr]";
  unint64_t v41 = 67;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          char v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    unint64_t v10 = a2;
    unint64_t v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = v4;
  unint64_t v12 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, *a2);
  unint64_t v13 = v12;
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    uint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v7 = (char *)v46;
        uint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        uint64_t v7 = (char *)v46;
      }
    }
    int v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)int v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::AffineMapAttr]";
  unint64_t v41 = 69;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    long long v26 = v50;
    if (v50)
    {
      unint64_t v27 = v51;
      char v28 = v50;
      if (v51 != v50)
      {
        do
        {
          char v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        char v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::AsmParser::parseOptionalInteger<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v28 = 1;
  unint64_t v27 = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 352))(a1, &v27);
  if (v5 < 0x100u || v5 == 0)
  {
    unsigned __int8 v7 = v5;
    int v8 = HIBYTE(v5);
    if (v28 < 0x41) {
      return v7 | (v8 << 8);
    }
    goto LABEL_46;
  }
  llvm::APInt::sextOrTrunc((char *)&v27, 0x40u, (uint64_t)&__p);
  unsigned int v9 = v30;
  if (v30 >= 0x41)
  {
    unsigned int v12 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    unint64_t v13 = __p;
    if (v12 <= 0x40)
    {
      *a2 = *(void *)__p;
    }
    else
    {
      uint64_t v10 = -1;
      *a2 = -1;
      if (!v13)
      {
        unsigned int v11 = v28;
        unsigned int v30 = v28;
        if (v28 > 0x40) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
    }
    operator delete[](v13);
    uint64_t v10 = *a2;
    unsigned int v11 = v28;
    unsigned int v30 = v28;
    if (v28 > 0x40) {
      goto LABEL_20;
    }
LABEL_14:
    if (v11) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
    else {
      unint64_t v14 = 0;
    }
    long long __p = (void *)(v14 & v10);
LABEL_21:
    if (__p == v27) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  uint64_t v10 = (uint64_t)__p;
  *a2 = (uint64_t)__p;
  unsigned int v11 = v28;
  unsigned int v30 = v28;
  if (v28 <= 0x40) {
    goto LABEL_14;
  }
LABEL_20:
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, v10, 0);
  if (v30 <= 0x40) {
    goto LABEL_21;
  }
  BOOL v15 = llvm::APInt::equalSlowCase((const void **)&__p, (const void **)&v27);
  if (__p) {
    operator delete[](__p);
  }
  if (v15)
  {
LABEL_22:
    unsigned __int8 v7 = 1;
    int v8 = 1;
    if (v28 < 0x41) {
      return v7 | (v8 << 8);
    }
    goto LABEL_46;
  }
LABEL_27:
  unint64_t v25 = "integer value too large";
  __int16 v26 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&__p, a1, v4, &v25);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v37)
  {
    uint64_t v16 = (void **)v35;
    if (v35)
    {
      long long v17 = v36;
      uint64_t v18 = v35;
      if (v36 != v35)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = v35;
      }
      int64_t v36 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v33;
    if (v33)
    {
      uint64_t v20 = v34;
      long long v21 = v33;
      if (v34 != v33)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        long long v21 = v33;
      }
      unint64_t v34 = v19;
      operator delete(v21);
    }
    if (v31 != &v32) {
      free(v31);
    }
  }
  unsigned __int8 v7 = 0;
  int v8 = 1;
  if (v28 >= 0x41)
  {
LABEL_46:
    if (v27) {
      operator delete[](v27);
    }
  }
  return v7 | (v8 << 8);
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(void *a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *long long __dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 8 - v8;
      uint64_t v31 = (char *)a1 + 8 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 8 - v8;
    uint64_t v31 = (char *)a1 + 8 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(void *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *long long __dst = a5;
    return (char *)(__dst + 1);
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 4 - v8;
      uint64_t v31 = (char *)a1 + 4 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 4 - v8;
    uint64_t v31 = (char *)a1 + 4 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, (char *)&__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(uint64_t *__sz, uint64_t a2, char a3)
{
  unsigned __int16 v5 = __sz + 10;
  __sz[10] += a2;
  uint64_t v6 = (1 << a3) - 1;
  uint64_t v7 = *__sz;
  uint64_t v8 = -(1 << a3);
  uint64_t v9 = ((v6 + *__sz) & v8) - *__sz;
  if (*__sz) {
    BOOL v10 = v9 + a2 > (unint64_t)(__sz[1] - *__sz);
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v11 = a2 + (1 << a3);
    uint64_t v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) <= 0x1000)
    {
      unsigned int v17 = *((_DWORD *)__sz + 6) >> 7;
      if (v17 >= 0x1E) {
        LOBYTE(v17) = 30;
      }
      uint64_t v18 = 4096 << v17;
      buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
      uint64_t v20 = *((unsigned int *)__sz + 6);
      if (v20 >= *((_DWORD *)__sz + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 2), __sz + 4, v20 + 1, 8);
        LODWORD(v20) = *((_DWORD *)__sz + 6);
      }
      *(void *)(__sz[2] + 8 * v20) = buffer;
      ++*((_DWORD *)__sz + 6);
      uint64_t result = (unint64_t)&buffer[v6] & v8;
      *__sz = result + a2;
      __sz[1] = (uint64_t)&buffer[v18];
    }
    else
    {
      uint64_t v13 = llvm::allocate_buffer(v11 - 1, (std::align_val_t)8uLL);
      uint64_t v14 = *((unsigned int *)__sz + 18);
      if (v14 >= *((_DWORD *)__sz + 19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(__sz + 8), v5, v14 + 1, 16);
        LODWORD(v14) = *((_DWORD *)__sz + 18);
      }
      uint64_t v15 = (void *)(__sz[8] + 16 * v14);
      void *v15 = v13;
      v15[1] = v12;
      ++*((_DWORD *)__sz + 18);
      return ((unint64_t)v13 + v6) & v8;
    }
  }
  else
  {
    uint64_t result = v7 + v9;
    *__sz = v7 + v9 + a2;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::append<char const*&>(uint64_t a1, const char **a2)
{
  if (*(void *)a1)
  {
    unint64_t v3 = *a2;
    if (*a2) {
      size_t v4 = strlen(*a2);
    }
    else {
      size_t v4 = 0;
    }
    int v15 = 3;
    uint64_t v16 = v3;
    size_t v17 = v4;
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = &v15;
    if (v5 >= *(_DWORD *)(a1 + 36))
    {
      uint64_t v11 = a1 + 24;
      unint64_t v12 = v5 + 1;
      BOOL v13 = v6 + 24 * v5 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = &v15;
      }
    }
    uint64_t v8 = v6 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

BOOL mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[1];
  if (v3 - v2 != a2[3] - v4) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  BOOL v7 = *a1 == a1[2];
  if (v3 == v2 && *a1 == a1[2]) {
    return 1;
  }
  unint64_t v9 = *(void *)(*(void *)(v5 + 32 * v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(*a2, a2[1]) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v7)
  {
    if (v9 == v10)
    {
      uint64_t v17 = v4 + 1;
      uint64_t v18 = (uint64_t *)(v5 + 32 * v2 + 56);
      do
      {
        uint64_t v19 = *v18;
        v18 += 4;
        unint64_t v20 = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v17++);
      }
      while (v20 == (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    }
    return 0;
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = v4 + 1;
  unint64_t v12 = (uint64_t *)(v5 + 32 * v2 + 56);
  uint64_t v13 = ~v2 + v3;
  do
  {
    BOOL result = v13 == 0;
    if (!v13) {
      break;
    }
    uint64_t v14 = *v12;
    v12 += 4;
    unint64_t v15 = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v11);
    BOOL result = 0;
    ++v11;
    --v13;
  }
  while (v15 == (*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

uint64_t mlir::OpAsmDialectInterface::getAlias()
{
  return 0;
}

{
  return 0;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v176 = 109;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      uint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[455];
  BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      uint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      uint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2776);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2912);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3904);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      int v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3856) == a1;
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v144 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v154 = 104;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      BOOL v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2776);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2912);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || *(void *)(v17 + 3904) == a1;
}

uint64_t mlir::AsmParser::parseType<mlir::MemRefType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      unint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      unint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          unint64_t v15 = (void *)*--v12;
          uint64_t v14 = v15;
          void *v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::AsmParser::parseType<mlir::RankedTensorType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      unint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          unint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      unint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          unint64_t v15 = (void *)*--v12;
          uint64_t v14 = v15;
          void *v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v20, a3)) {
    return 0;
  }
  uint64_t v7 = v20;
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  uint64_t v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v27;
      uint64_t v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v24;
    if (v24)
    {
      uint64_t v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          __int16 v17 = (void *)*--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

uint64_t mlir::CallOpInterface::resolveCallable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v5 = (mlir::Operation *)(v4 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8 & (v4 << 61 >> 63);
  if (v9) {
    return mlir::Value::getDefiningOp((mlir::Value *)&v9);
  }
  uint64_t v7 = *(mlir::SymbolTable **)a1;
  if (a2)
  {
    return mlir::SymbolTableCollection::lookupNearestSymbolFrom(a2, v7, (uint64_t)v5);
  }
  else
  {
    uint64_t v8 = *(mlir::SymbolTable **)a1;
    return mlir::SymbolTable::lookupNearestSymbolFrom(v8, v5);
  }
}

uint64_t mlir::CallOpInterface::getArgOperands(mlir::CallOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 16))(*((void *)this + 1), *(void *)this);
}

uint64_t mlir::CallableOpInterface::getArgAttrsAttr(mlir::CallableOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 24))(*((void *)this + 1), *(void *)this);
}

uint64_t mlir::CallableOpInterface::getResAttrsAttr(mlir::CallableOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 32))(*((void *)this + 1), *(void *)this);
}

unint64_t mlir::complex::ConstantOp::fold(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::complex::ConstantOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "cst", 3);
}

BOOL mlir::complex::ConstantOp::isBuildableWith(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v21 = v2;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id ? a2 : 0;
  uint64_t v20 = v3;
  if (!v3) {
    return 0;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  if (v4 != 2) {
    return 0;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
  uint64_t v6 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void **)(**(void **)v6 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v7 = 0;
  }
  uint64_t v19 = v7;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v9 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void **)(**(void **)v9 + 136);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v10 = 0;
    }
    uint64_t v19 = v10;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v12 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
      unint64_t v13 = *(void **)(*(void *)v12 + 136);
      if (v13 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v12 = 0;
      }
      uint64_t v18 = v12;
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        uint64_t v14 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
        if (v14 == Value) {
          return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == v14;
        }
      }
    }
    return 0;
  }
  uint64_t v16 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21) + 8);
  __int16 v17 = *(void **)(*(void *)v16 + 136);
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v16 = 0;
  }
  uint64_t v18 = v16;
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19) != Value)
  {
    return 0;
  }
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18) == Value;
}

uint64_t mlir::complex::ConstantOp::verify(uint64_t **this)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v83 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
  if (v2 == 2)
  {
    v87[0] = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v87);
    uint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
    uint64_t v5 = *(void *)v4;
    if (*(_UNKNOWN **)(**(void **)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
      uint64_t v5 = 0;
    }
    uint64_t v80 = v5;
    uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83) + 8);
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
      uint64_t v6 = 0;
    }
    uint64_t v79 = v6;
    if (v80 && v6)
    {
      if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80)
        && Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79))
      {
        return 1;
      }
      __int16 v82 = 257;
      mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
      if (v87[0])
      {
        int v84 = 3;
        int v85 = "requires attribute's element types (";
        uint64_t v86 = 36;
        uint64_t v7 = &v84;
        uint64_t v8 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v62 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v72 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            uint64_t v8 = (char *)v88;
            uint64_t v7 = (int *)((char *)v88 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v62, 24);
            uint64_t v7 = &v84;
            uint64_t v8 = (char *)v88;
          }
        }
        uint64_t v9 = &v8[24 * v89];
        long long v10 = *(_OWORD *)v7;
        *((void *)v9 + 2) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v9 = v10;
        ++v89;
      }
      uint64_t v11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      if (v87[0])
      {
        uint64_t v12 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v11);
        unint64_t v13 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v63 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v73 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            unint64_t v13 = (char *)v88;
            uint64_t v12 = (int *)((char *)v88 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v63, 24);
            uint64_t v12 = &v84;
            unint64_t v13 = (char *)v88;
          }
        }
        uint64_t v14 = &v13[24 * v89];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = *((void *)v12 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        uint64_t v16 = ++v89;
        if (v87[0])
        {
          int v84 = 3;
          int v85 = ", ";
          uint64_t v86 = 2;
          __int16 v17 = &v84;
          uint64_t v18 = (char *)v88;
          if (v16 >= v90)
          {
            unint64_t v65 = v16 + 1;
            BOOL v66 = (char *)v88 + 24 * v16 > (char *)&v84;
            if (v88 <= &v84 && v66)
            {
              int64_t v75 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              uint64_t v18 = (char *)v88;
              __int16 v17 = (int *)((char *)v88 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v65, 24);
              __int16 v17 = &v84;
              uint64_t v18 = (char *)v88;
            }
          }
          uint64_t v19 = &v18[24 * v89];
          long long v20 = *(_OWORD *)v17;
          *((void *)v19 + 2) = *((void *)v17 + 2);
          *(_OWORD *)uint64_t v19 = v20;
          ++v89;
        }
      }
      uint64_t v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
      if (v87[0])
      {
        uint64_t v22 = &v84;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v21);
        uint64_t v23 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v64 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v74 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            uint64_t v23 = (char *)v88;
            uint64_t v22 = (int *)((char *)v88 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v64, 24);
            uint64_t v22 = &v84;
            uint64_t v23 = (char *)v88;
          }
        }
        uint64_t v24 = &v23[24 * v89];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        uint64_t v26 = ++v89;
        if (v87[0])
        {
          int v84 = 3;
          int v85 = ") to match the element type of the op's return type (";
          uint64_t v86 = 53;
          uint64_t v27 = &v84;
          char v28 = (char *)v88;
          if (v26 >= v90)
          {
            unint64_t v67 = v26 + 1;
            BOOL v68 = (char *)v88 + 24 * v26 > (char *)&v84;
            if (v88 <= &v84 && v68)
            {
              int64_t v76 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              char v28 = (char *)v88;
              uint64_t v27 = (int *)((char *)v88 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v67, 24);
              uint64_t v27 = &v84;
              char v28 = (char *)v88;
            }
          }
          uint64_t v29 = &v28[24 * v89];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          ++v89;
          if (v87[0])
          {
            int v31 = &v84;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, Value);
            unint64_t v32 = (char *)v88;
            if (v89 >= v90)
            {
              unint64_t v69 = v89 + 1;
              if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
              {
                int64_t v77 = (char *)&v84 - (unsigned char *)v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                unint64_t v32 = (char *)v88;
                int v31 = (int *)((char *)v88 + v77);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v69, 24);
                int v31 = &v84;
                unint64_t v32 = (char *)v88;
              }
            }
            uint64_t v33 = &v32[24 * v89];
            long long v34 = *(_OWORD *)v31;
            *((void *)v33 + 2) = *((void *)v31 + 2);
            *(_OWORD *)uint64_t v33 = v34;
            uint64_t v35 = ++v89;
            if (v87[0])
            {
              int v84 = 3;
              int v85 = ")";
              uint64_t v86 = 1;
              int v36 = &v84;
              int v37 = (char *)v88;
              if (v35 >= v90)
              {
                unint64_t v70 = v35 + 1;
                BOOL v71 = (char *)v88 + 24 * v35 > (char *)&v84;
                if (v88 <= &v84 && v71)
                {
                  int64_t v78 = (char *)&v84 - (unsigned char *)v88;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  int v37 = (char *)v88;
                  int v36 = (int *)((char *)v88 + v78);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
                  int v36 = &v84;
                  int v37 = (char *)v88;
                }
              }
              unint64_t v38 = &v37[24 * v89];
              long long v39 = *(_OWORD *)v36;
              *((void *)v38 + 2) = *((void *)v36 + 2);
              *(_OWORD *)unint64_t v38 = v39;
              ++v89;
            }
          }
        }
      }
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
      if (v96)
      {
        unint64_t v41 = (void **)__p;
        if (__p)
        {
          uint64_t v42 = v95;
          unint64_t v43 = __p;
          if (v95 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            unint64_t v43 = __p;
          }
          unint64_t v95 = v41;
          operator delete(v43);
        }
        uint64_t v44 = v92;
        if (!v92) {
          goto LABEL_71;
        }
        int v45 = v93;
        int v46 = v92;
        if (v93 == v92)
        {
LABEL_70:
          unint64_t v93 = v44;
          operator delete(v46);
LABEL_71:
          if (v88 != v91) {
            free(v88);
          }
          return v40;
        }
        do
        {
          unint64_t v48 = (void *)*--v45;
          unint64_t v47 = v48;
          void *v45 = 0;
          if (v48) {
            operator delete[](v47);
          }
        }
        while (v45 != v44);
LABEL_69:
        int v46 = v92;
        goto LABEL_70;
      }
    }
    else
    {
      v81[0] = (const void **)"requires attribute's elements to be float attributes";
      __int16 v82 = 259;
      mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
      if (v96)
      {
        int v55 = (void **)__p;
        if (__p)
        {
          unint64_t v56 = v95;
          unint64_t v57 = __p;
          if (v95 != __p)
          {
            do
              unint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            unint64_t v57 = __p;
          }
          unint64_t v95 = v55;
          operator delete(v57);
        }
        uint64_t v44 = v92;
        if (!v92) {
          goto LABEL_71;
        }
        int v58 = v93;
        int v46 = v92;
        if (v93 == v92) {
          goto LABEL_70;
        }
        do
        {
          uint64_t v60 = (void *)*--v58;
          unint64_t v59 = v60;
          void *v58 = 0;
          if (v60) {
            operator delete[](v59);
          }
        }
        while (v58 != v44);
        goto LABEL_69;
      }
    }
  }
  else
  {
    v81[0] = (const void **)"requires 'value' to be a complex constant, represented as array of two values";
    __int16 v82 = 259;
    mlir::OpState::emitOpError(this, v81, (uint64_t)v87);
    uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v87);
    if (v87[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
    }
    if (v96)
    {
      int v49 = (void **)__p;
      if (__p)
      {
        unint64_t v50 = v95;
        uint64_t v51 = __p;
        if (v95 != __p)
        {
          do
            unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          uint64_t v51 = __p;
        }
        unint64_t v95 = v49;
        operator delete(v51);
      }
      uint64_t v44 = v92;
      if (!v92) {
        goto LABEL_71;
      }
      unint64_t v52 = v93;
      int v46 = v92;
      if (v93 == v92) {
        goto LABEL_70;
      }
      do
      {
        int v54 = (void *)*--v52;
        uint64_t v53 = v54;
        *unint64_t v52 = 0;
        if (v54) {
          operator delete[](v53);
        }
      }
      while (v52 != v44);
      goto LABEL_69;
    }
  }
  return v40;
}

uint64_t mlir::complex::BitcastOp::fold(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t v2 = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = v1 | 4;
  if (v2 == (*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8)) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t mlir::complex::BitcastOp::verify(uint64_t **this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  unint64_t v41 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = *(v1 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (v41 == v40) {
    return 1;
  }
  if (!mlir::Type::isIntOrFloat((mlir::Type *)&v41)
    && *(_UNKNOWN **)(*(void *)v41 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (const void **)"operand must be int/float/complex";
    __int16 v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v48;
        uint64_t v6 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        unint64_t v48 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      uint64_t v8 = v46;
      uint64_t v9 = v45;
      if (v46 == v45)
      {
LABEL_73:
        int v46 = v7;
        operator delete(v9);
LABEL_74:
        if (v43 != &v44) {
          free(v43);
        }
        return v3;
      }
      do
      {
        uint64_t v11 = (void *)*--v8;
        long long v10 = v11;
        void *v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
LABEL_72:
      uint64_t v9 = v45;
      goto LABEL_73;
    }
    return v3;
  }
  BOOL isIntOrFloat = mlir::Type::isIntOrFloat((mlir::Type *)&v40);
  unint64_t v13 = v40;
  uint64_t v14 = *(void **)(*(void *)v40 + 136);
  if (isIntOrFloat)
  {
    long long v15 = (const void **)v41;
    uint64_t v16 = *(void **)(*(void *)v41 + 136);
    if ((v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (v14 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
    {
      if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_44:
    v38[0] = (const void **)"requires input or output is a complex type";
    __int16 v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      long long v25 = (void **)__p;
      if (__p)
      {
        uint64_t v26 = v48;
        uint64_t v27 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          uint64_t v27 = __p;
        }
        unint64_t v48 = v25;
        operator delete(v27);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      char v28 = v46;
      uint64_t v9 = v45;
      if (v46 == v45) {
        goto LABEL_73;
      }
      do
      {
        long long v30 = (void *)*--v28;
        uint64_t v29 = v30;
        *char v28 = 0;
        if (v30) {
          operator delete[](v29);
        }
      }
      while (v28 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  if (v14 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v38[0] = (const void **)"result must be int/float/complex";
    __int16 v39 = 259;
    mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v49)
    {
      __int16 v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v48;
        uint64_t v19 = __p;
        if (v48 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        unint64_t v48 = v17;
        operator delete(v19);
      }
      uint64_t v7 = v45;
      if (!v45) {
        goto LABEL_74;
      }
      long long v20 = v46;
      uint64_t v9 = v45;
      if (v46 == v45) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v22 = (void *)*--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v20 != v7);
      goto LABEL_72;
    }
    return v3;
  }
  long long v15 = (const void **)v41;
  if (*(_UNKNOWN **)(*(void *)v41 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    goto LABEL_44;
  }
LABEL_38:
  unint64_t v40 = (unint64_t)v15;
  unint64_t v41 = v13;
  uint64_t v16 = *(void **)(*(void *)v13 + 136);
  long long v15 = (const void **)v13;
LABEL_39:
  if (v16 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = 0;
  }
  v38[0] = v23;
  v42[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v38);
  IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v42);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v40) == 2 * IntOrFloatBitWidth) {
    return 1;
  }
  v38[0] = (const void **)"casting bitwidths do not match";
  __int16 v39 = 259;
  mlir::OpState::emitOpError(this, v38, (uint64_t)v42);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
  if (v42[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
  }
  if (v49)
  {
    int v31 = (void **)__p;
    if (__p)
    {
      unint64_t v32 = v48;
      uint64_t v33 = __p;
      if (v48 != __p)
      {
        do
          unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        uint64_t v33 = __p;
      }
      unint64_t v48 = v31;
      operator delete(v33);
    }
    uint64_t v7 = v45;
    if (!v45) {
      goto LABEL_74;
    }
    long long v34 = v46;
    uint64_t v9 = v45;
    if (v46 == v45) {
      goto LABEL_73;
    }
    do
    {
      int v36 = (void *)*--v34;
      uint64_t v35 = v36;
      *long long v34 = 0;
      if (v36) {
        operator delete[](v35);
      }
    }
    while (v34 != v7);
    goto LABEL_72;
  }
  return v3;
}

void mlir::complex::BitcastOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  mlir::RewritePatternSet::addImpl<ArithBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<MergeComplexBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<MergeArithBitcast,mlir::MLIRContext *&>(a1, 0, 0, &v3);
}

uint64_t mlir::complex::CreateOp::fold(uint64_t a1)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  if (result)
  {
    uint64_t v3 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ReOp,void>::id)
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v5);
      if (result)
      {
        if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ImOp,void>::id)
        {
          uint64_t v4 = *(void *)(*(void *)(v3 + 72) + 24);
          if (v4 == *(void *)(*(void *)(result + 72) + 24)) {
            return v4 | 4;
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t mlir::complex::ImOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2) {
        return *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) + 8) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 56) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

void mlir::complex::ImOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"complex.im", 10, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC9980F0;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldComponentNeg<mlir::complex::ImOp, 1>]";
  unint64_t v39 = 113;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      char v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      long long v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)long long v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::complex::ReOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)v3 + 136);
    if (v4 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v8 = v3;
    if (v4 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
      if (v5 == 2) {
        return *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  unint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::CreateOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

void mlir::complex::ReOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"complex.re", 10, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC998148;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldComponentNeg<mlir::complex::ReOp, 0>]";
  unint64_t v39 = 113;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      char v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      long long v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)long long v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::complex::AddOp::fold(uint64_t *a1)
{
  void v21[3] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!DefiningOp)
  {
    uint64_t v20 = *(void *)(*(void *)(*a1 + 72) + 56);
    uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (v5) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v6 = *a1;
    goto LABEL_10;
  }
  uint64_t v3 = *a1;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id)
  {
    uint64_t v4 = *(void *)(DefiningOp + 72);
    if (*(void *)(*(void *)(v3 + 72) + 56) == *(void *)(v4 + 56)) {
      goto LABEL_7;
    }
  }
  uint64_t v20 = *(void *)(*(void *)(v3 + 72) + 56);
  uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (!v5) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v6 = *a1;
  if (*(_UNKNOWN **)(*(void *)(v5 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::SubOp,void>::id
    || (uint64_t v4 = *(void *)(v5 + 72), *(void *)(*(void *)(v6 + 72) + 24) != *(void *)(v4 + 56)))
  {
LABEL_10:
    uint64_t v20 = *(void *)(*(void *)(v6 + 72) + 56);
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
    if (!result) {
      return result;
    }
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id) {
      return 0;
    }
    uint64_t v17 = *(void *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    uint64_t v16 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17);
    uint64_t Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v16, (uint64_t)&v20);
    unint64_t v10 = (void *)v21[0];
    uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble(Value);
    unint64_t v12 = (uint64_t *)v21[1];
    if (v11 != v10) {
      unint64_t v12 = &v20;
    }
    if ((*((unsigned char *)v12 + 28) & 7) == 3)
    {
      uint64_t v15 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v17) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v15, (uint64_t)v18);
      uint64_t v13 = (unsigned char *)v19[1];
      if (v11 != (void *)v19[0]) {
        uint64_t v13 = v18;
      }
      BOOL v14 = (v13[28] & 7) == 3;
      if (v11 != (void *)v19[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (v11 == (void *)v21[0]) {
          goto LABEL_20;
        }
LABEL_23:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
        if (!v14) {
          return 0;
        }
        goto LABEL_24;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
      if (v11 != (void *)v21[0]) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v14 = 0;
      if (v11 != v10) {
        goto LABEL_23;
      }
    }
LABEL_20:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (!v14) {
      return 0;
    }
LABEL_24:
    uint64_t v7 = *(void *)(*(void *)(*a1 + 72) + 24);
    return v7 | 4;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v4 + 24);
  return v7 | 4;
}

uint64_t mlir::complex::SubOp::fold(uint64_t *a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp)
  {
    uint64_t v3 = *a1;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::AddOp,void>::id
    || (uint64_t v4 = *(void *)(DefiningOp + 72), *(void *)(*(void *)(v3 + 72) + 56) != *(void *)(v4 + 56)))
  {
LABEL_6:
    uint64_t v18 = *(void *)(*(void *)(v3 + 72) + 56);
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (!result) {
      return result;
    }
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id) {
      return 0;
    }
    uint64_t v15 = *(void *)(result + 16 * (((unint64_t)*(unsigned int *)(result + 44) >> 23) & 1) + 64);
    uint64_t v14 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
    uint64_t Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v14, (uint64_t)&v18);
    uint64_t v8 = (void *)v19[0];
    unint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    unint64_t v10 = (uint64_t *)v19[1];
    if (v9 != v8) {
      unint64_t v10 = &v18;
    }
    if ((*((unsigned char *)v10 + 28) & 7) == 3)
    {
      uint64_t v13 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15) + 8);
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)v16);
      uint64_t v11 = (unsigned char *)v17[1];
      if (v9 != (void *)v17[0]) {
        uint64_t v11 = v16;
      }
      BOOL v12 = (v11[28] & 7) == 3;
      if (v9 != (void *)v17[0])
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
        if (v9 == (void *)v19[0]) {
          goto LABEL_16;
        }
LABEL_19:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
        if (!v12) {
          return 0;
        }
        goto LABEL_20;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
      if (v9 != (void *)v19[0]) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v12 = 0;
      if (v9 != v8) {
        goto LABEL_19;
      }
    }
LABEL_16:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
    if (!v12) {
      return 0;
    }
LABEL_20:
    uint64_t v5 = *(void *)(*(void *)(*a1 + 72) + 24);
    return v5 | 4;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  return v5 | 4;
}

uint64_t mlir::complex::NegOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::NegOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::LogOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ExpOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::ExpOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::LogOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::ConjOp::fold(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v2);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConjOp,void>::id) {
      return *(void *)(*(void *)(result + 72) + 24) | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::complex::MulOp::fold(uint64_t a1)
{
  void v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::complex::ConstantOp,void>::id)
  {
    uint64_t v10 = *(void *)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
    uint64_t v13 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v13, (uint64_t)&v15);
    uint64_t v11 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10) + 8);
    uint64_t Value = mlir::FloatAttr::getValue((mlir::FloatAttr *)&v11, (uint64_t)&v13);
    uint64_t v6 = (void *)v14[0];
    uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble(Value);
    uint64_t v8 = (uint64_t *)v14[1];
    if (v7 != v6) {
      uint64_t v8 = &v13;
    }
    if ((*((unsigned char *)v8 + 28) & 7) != 3) {
      goto LABEL_18;
    }
    if (v7 == (void *)v16[0])
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)v7, 1);
      if (v7 != (void *)v16[0])
      {
LABEL_10:
        int v9 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v16, (const llvm::detail::IEEEFloat *)v12);
        if (v7 != (void *)v12[0]) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, v16[0], (llvm::APInt *)1);
      if (v7 != (void *)v16[0]) {
        goto LABEL_10;
      }
    }
    int v9 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v16, (const llvm::detail::DoubleAPFloat *)v12);
    if (v7 != (void *)v12[0])
    {
LABEL_11:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
      if (v9 == 1) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
LABEL_17:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
    if (v9 == 1)
    {
LABEL_12:
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
      if (v7 == (void *)v14[0]) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v3 = 0;
    if (v7 == (void *)v14[0])
    {
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
      if (v7 == (void *)v16[0])
      {
LABEL_14:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
        return v3;
      }
LABEL_20:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
      return v3;
    }
LABEL_19:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
    if (v7 == (void *)v16[0]) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  return 0;
}

BOOL mlir::complex::AbsOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AbsOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[461];
    return a1[32];
  }
  return result;
}

uint64_t mlir::complex::AbsOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  v15[0] = a4;
  v15[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(void **)a11 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  return 1;
}

uint64_t mlir::complex::AbsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v20[0] = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  if (!mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0; {
  v20[0] = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v7 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v7 = 0;
  }
  if (Value == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v18 = (const void **)"failed to verify that complex element type matches result type";
  __int16 v19 = 259;
  mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    unint64_t v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v26;
      int v11 = __p;
      if (v26 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        int v11 = __p;
      }
      uint64_t v26 = v9;
      operator delete(v11);
    }
    unsigned int v12 = v23;
    if (v23)
    {
      uint64_t v13 = v24;
      unint64_t v14 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v16 = (void *)*--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        unint64_t v14 = v23;
      }
      uint64_t v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v8;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    goto LABEL_2;
  }
  v64[0] = a2;
  uint64_t v37 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v64) + 136);
  BOOL v38 = v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v39 = v38 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v40 = v39 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v41 = v40 || v37 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v42 = v41 || v37 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v43 = v42 || v37 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v44 = v43 || v37 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v45 = v44 || v37 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  if (v45 || v37 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    return 1;
  }
  if (v37 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v37 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
LABEL_2:
  __int16 v60 = 261;
  v59[0] = a3;
  v59[1] = a4;
  mlir::Operation::emitOpError(a1, v59, (uint64_t)v64);
  if (v64[0])
  {
    int v61 = 3;
    unint64_t v62 = " #";
    uint64_t v63 = 2;
    uint64_t v10 = &v61;
    int v11 = (char *)v65;
    if (v66 >= v67)
    {
      unint64_t v49 = v66 + 1;
      if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
      {
        int64_t v55 = (char *)&v61 - (unsigned char *)v65;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        int v11 = (char *)v65;
        uint64_t v10 = (int *)((char *)v65 + v55);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v49, 24);
        uint64_t v10 = &v61;
        int v11 = (char *)v65;
      }
    }
    unsigned int v12 = &v11[24 * v66];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    uint64_t v14 = ++v66;
    if (v64[0])
    {
      int v61 = 5;
      unint64_t v62 = (const char *)a5;
      uint64_t v15 = &v61;
      uint64_t v16 = (char *)v65;
      if (v14 >= v67)
      {
        unint64_t v50 = v14 + 1;
        BOOL v51 = (char *)v65 + 24 * v14 > (char *)&v61;
        if (v65 <= &v61 && v51)
        {
          int64_t v56 = (char *)&v61 - (unsigned char *)v65;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          uint64_t v16 = (char *)v65;
          uint64_t v15 = (int *)((char *)v65 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v50, 24);
          uint64_t v15 = &v61;
          uint64_t v16 = (char *)v65;
        }
      }
      uint64_t v17 = &v16[24 * v66];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v66;
      if (v64[0])
      {
        int v61 = 3;
        unint64_t v62 = " must be complex type with floating-point elements, but got ";
        uint64_t v63 = 60;
        uint64_t v20 = &v61;
        uint64_t v21 = (char *)v65;
        if (v19 >= v67)
        {
          unint64_t v52 = v19 + 1;
          BOOL v53 = (char *)v65 + 24 * v19 > (char *)&v61;
          if (v65 <= &v61 && v53)
          {
            int64_t v57 = (char *)&v61 - (unsigned char *)v65;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            uint64_t v21 = (char *)v65;
            uint64_t v20 = (int *)((char *)v65 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
            uint64_t v20 = &v61;
            uint64_t v21 = (char *)v65;
          }
        }
        uint64_t v22 = &v21[24 * v66];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v66;
        if (v64[0])
        {
          uint64_t v24 = &v61;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v61, a2);
          unint64_t v25 = (char *)v65;
          if (v66 >= v67)
          {
            unint64_t v54 = v66 + 1;
            if (v65 <= &v61 && (char *)v65 + 24 * v66 > (char *)&v61)
            {
              int64_t v58 = (char *)&v61 - (unsigned char *)v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              unint64_t v25 = (char *)v65;
              uint64_t v24 = (int *)((char *)v65 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              uint64_t v24 = &v61;
              unint64_t v25 = (char *)v65;
            }
          }
          uint64_t v26 = &v25[24 * v66];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v66;
        }
      }
    }
  }
  uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v64);
  if (v64[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v64);
  }
  if (v73)
  {
    uint64_t v29 = (void **)__p;
    if (__p)
    {
      long long v30 = v72;
      uint64_t v31 = __p;
      if (v72 != __p)
      {
        do
          long long v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        uint64_t v31 = __p;
      }
      int64_t v72 = v29;
      operator delete(v31);
    }
    long long v32 = v69;
    if (v69)
    {
      long long v33 = v70;
      uint64_t v34 = v69;
      if (v70 != v69)
      {
        do
        {
          uint64_t v36 = (void *)*--v33;
          uint64_t v35 = v36;
          *long long v33 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v33 != v32);
        uint64_t v34 = v69;
      }
      unint64_t v70 = v32;
      operator delete(v34);
    }
    if (v65 != v68) {
      free(v65);
    }
  }
  return v28;
}

uint64_t mlir::complex::__mlir_ods_local_type_constraint_ComplexOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  uint64_t v10 = 1;
  if (v5 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    __int16 v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      int v52 = 3;
      BOOL v53 = " #";
      uint64_t v54 = 2;
      uint64_t v14 = &v52;
      uint64_t v15 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v46 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          uint64_t v15 = (char *)v56;
          uint64_t v14 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          uint64_t v14 = &v52;
          uint64_t v15 = (char *)v56;
        }
      }
      uint64_t v16 = &v15[24 * v57];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      uint64_t v18 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        BOOL v53 = (const char *)a5;
        uint64_t v19 = &v52;
        uint64_t v20 = (char *)v56;
        if (v18 >= v58)
        {
          unint64_t v41 = v18 + 1;
          BOOL v42 = (char *)v56 + 24 * v18 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            int64_t v47 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v20 = (char *)v56;
            uint64_t v19 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v19 = &v52;
            uint64_t v20 = (char *)v56;
          }
        }
        uint64_t v21 = &v20[24 * v57];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        uint64_t v23 = ++v57;
        if (v55[0])
        {
          int v52 = 3;
          BOOL v53 = " must be floating-point, but got ";
          uint64_t v54 = 33;
          uint64_t v24 = &v52;
          unint64_t v25 = (char *)v56;
          if (v23 >= v58)
          {
            unint64_t v43 = v23 + 1;
            BOOL v44 = (char *)v56 + 24 * v23 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              int64_t v48 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              unint64_t v25 = (char *)v56;
              uint64_t v24 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              uint64_t v24 = &v52;
              unint64_t v25 = (char *)v56;
            }
          }
          uint64_t v26 = &v25[24 * v57];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v57;
          if (v55[0])
          {
            uint64_t v28 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, a2);
            uint64_t v29 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v49 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                uint64_t v29 = (char *)v56;
                uint64_t v28 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                uint64_t v28 = &v52;
                uint64_t v29 = (char *)v56;
              }
            }
            long long v30 = &v29[24 * v57];
            long long v31 = *(_OWORD *)v28;
            *((void *)v30 + 2) = *((void *)v28 + 2);
            *(_OWORD *)long long v30 = v31;
            ++v57;
          }
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      long long v32 = (void **)__p;
      if (__p)
      {
        long long v33 = v63;
        uint64_t v34 = __p;
        if (v63 != __p)
        {
          do
            long long v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          uint64_t v34 = __p;
        }
        uint64_t v63 = v32;
        operator delete(v34);
      }
      uint64_t v35 = v60;
      if (v60)
      {
        uint64_t v36 = v61;
        uint64_t v37 = v60;
        if (v61 != v60)
        {
          do
          {
            BOOL v39 = (void *)*--v36;
            BOOL v38 = v39;
            *uint64_t v36 = 0;
            if (v39) {
              operator delete[](v38);
            }
          }
          while (v36 != v35);
          uint64_t v37 = v60;
        }
        int v61 = v35;
        operator delete(v37);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
  }
  return v10;
}

BOOL mlir::complex::AbsOp::parse(uint64_t a1, void *a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    int v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AbsOpGenericAdaptorBase::Properties>(a2);
    void *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AbsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((long long v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

void mlir::complex::AbsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v31[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v9 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        unsigned char *v9 = 32;
      }
      uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v11 = (void *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v11 > 7uLL)
      {
        void *v11 = 0x6874616D74736166;
        *((void *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      uint64_t v29 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        unsigned int v12 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v29, a2);
        if (v13 == (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v29);
        }
      }
    }
  }
  uint64_t v29 = v31;
  v31[0] = "fastmath";
  v31[1] = 8;
  uint64_t v30 = 0x200000001;
  uint64_t v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v15 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    unsigned int v18 = v30;
    if (v30 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 16);
      unsigned int v18 = v30;
    }
    uint64_t v19 = (char *)v29 + 16 * v18;
    void *v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v30) = v30 + 1;
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_18:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v29, v30);
  long long v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    unsigned char *v23 = 32;
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if (*((unsigned char **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    unsigned char *v25 = 58;
    ++*((void *)v24 + 4);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    unsigned char *v27 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v29 != v31) {
    free(v29);
  }
}

uint64_t mlir::complex::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.add", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::AddOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AddOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AddOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::AddOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[463];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::AddOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::complex::AddOp::parse(uint64_t a1, void *a2)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AddOpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AddOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::complex::AngleOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::AngleOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[465];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::AngleOp::parse(uint64_t a1, void *a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  memset(v22, 0, 24);
  v19[0] = (uint64_t)v22;
  v19[1] = 1;
  v17[1] = 1;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  v17[0] = &v21;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v22, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v18, 0))return 0; {
  if (v18)
  }
  {
    int v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::AngleOpGenericAdaptorBase::Properties>(a2);
    void *v5 = v18;
  }
LABEL_6:
  v14[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v6 = a2[1];
  __src[0] = a1;
  __src[1] = v14;
  __src[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::AngleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, __src)) {
    return 0;
  }
  uint64_t v21 = __src[0];
  uint64_t v16 = __src[0];
  if (*(_UNKNOWN **)(*(void *)__src[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
    && ((uint64_t v13 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src) + 136),
         v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
  {
    v14[0] = v21;
    __src[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v19, v17, v4, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v15 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(__src, a1, v8, v14);
    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)__src, "'complex' must be complex type with floating-point elements, but got ");
    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v16);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)__src);
  }
  return v11;
}

BOOL mlir::complex::Atan2Op::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[467];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::Atan2Op::parse(uint64_t a1, void *a2)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::Atan2OpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))
  {
    uint64_t v5 = a2[1];
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::Atan2Op::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if (mlir::AsmParser::parseType<mlir::ComplexType>(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
          unint64_t v7 = a2 + 2;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, void *))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::complex::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.bitcast", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::BitcastOp::verifyInvariantsImpl(mlir::complex::BitcastOp *this)
{
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v1 = *(void *)this - 16;
  }
  else {
    uint64_t v1 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v1, 0);
  return 1;
}

BOOL mlir::complex::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConjOpGenericAdaptorBase::ConjOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.conj", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::complex::ConjOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ConjOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 109;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[469];
    return a1[32];
  }
  return result;
}

BOOL mlir::complex::ConjOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::complex::ConjOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v14, 0))return 0; {
  if (v14)
  }
  {
    int v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConjOpGenericAdaptorBase::Properties>((void *)a2);
    void *v5 = v14;
  }
LABEL_6:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  void v11[2] = a2;
  uint64_t v7 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v6 + 96));
  if (v7)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v7, (const void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::ConjOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::ComplexType>(a1, v11)) {
    return 0;
  }
  uint64_t v8 = v11[0];
  uint64_t v16 = v11[0];
  uint64_t v9 = *(unsigned int *)(a2 + 72);
  if (v9 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a2 + 72);
    uint64_t v8 = v16;
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

uint64_t mlir::complex::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 136) + 72))(*(void *)(*((void *)this + 1) + 136), *(void *)(*((void *)this + 1) + 80) + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "complex.constant", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::complex::ConstantOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      long long v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          long long v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          long long v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      long long v31 = v67;
      long long v32 = __p;
      if (v67 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      unsigned int v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *long long v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "value", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected key entry for value in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      BOOL v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)BOOL v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v67;
      BOOL v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      unsigned int v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      unint64_t v45 = (void *)*--v43;
      BOOL v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      __int16 v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          __int16 v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          __int16 v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unsigned int v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      void *v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

void *mlir::complex::ConstantOp::setInherentAttr(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(unsigned char *)(a2 + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = 0;
      }
      llvm::raw_ostream *result = v5;
    }
    else
    {
      llvm::raw_ostream *result = 0;
    }
  }
  return result;
}

BOOL mlir::complex::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v6, (const void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: array attribute";
        uint64_t v31 = 47;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      BOOL v42 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          long long v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      unint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::complex::ConstantOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    *uint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    {
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[471];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::ArrayAttr]";
  unint64_t v41 = 65;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::complex::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)mlir::OperationState::getOrAddProperties<mlir::complex::detail::ConstantOpGenericAdaptorBase::Properties>((void *)a2) = a4;
  uint64_t v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::complex::ConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v3, (const void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps0(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'value'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        uint64_t v8 = v24;
        long long v9 = __p;
        if (v24 != __p)
        {
          do
            uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          long long v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        unint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            unint64_t v14 = (void *)*--v11;
            unint64_t v13 = v14;
            void *v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}