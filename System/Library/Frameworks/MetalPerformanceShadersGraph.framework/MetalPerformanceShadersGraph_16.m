uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)2>::promoteAxesValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t DefiningOp;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void v18[4];
  __int16 v19;
  uint64_t **v20;

  v16 = 0;
  v17 = 0;
  v20 = (uint64_t **)&v16;
  v18[0] = a3;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v20, DefiningOp))
  {
    v10 = 1;
    mlir::getIntValues<long long>(v16, v17, a5, 1);
    switch(*(_DWORD *)(a5 + 8))
    {
      case 0:
        v11 = *(void *)a5;
        v12 = a5;
        v13 = 4;
        goto LABEL_10;
      case 1:
        v11 = *(void *)a5;
        v12 = a5;
        v13 = 3;
LABEL_10:
        llvm::SmallVectorImpl<long long>::insert(v12, v11, v13, a4);
        v10 = 1;
        break;
      case 2:
        v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 8, 1uLL, a4);
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5, 1uLL, a4);
        break;
      case 3:
        v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 16, 1uLL, a4);
        break;
      default:
        return v10;
    }
  }
  else
  {
    v18[0] = "failed: axes value must be a constant";
    v19 = 259;
    v20 = (uint64_t **)v18;
    v14 = *(void *)(a1 + 16);
    if (v14 && mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v14 + 64))(v14, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::Operation *&>(mlir::Operation *&,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v20);
    }
    else {
      return 0;
    }
  }
  return v10;
}

void *mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)3>::~ConvertStridedSlice(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)3>::~ConvertStridedSlice(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a2;
  long long v120 = *(_OWORD *)(a3 + 72);
  v5 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  v9 = *(void **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v107 = v5;
  uint64_t v108 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  int64_t v17 = v16;
  BOOL IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v91);
  v118[0] = v119;
  v118[1] = (void *)0x500000000;
  uint64_t v19 = v91;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91);
  {
    uint64_t v63 = 0;
    goto LABEL_126;
  }
  v116[0] = v117;
  v116[1] = (void *)0x500000000;
  uint64_t v21 = v91;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v91);
  {
    v113 = v115;
    uint64_t v114 = 0x500000000;
    uint64_t v23 = v91;
    uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v91);
    if (v114)
    {
      v25 = (uint64_t *)v113;
      uint64_t v26 = 8 * v114;
      while (*v25 > 0)
      {
        ++v25;
        v26 -= 8;
        if (!v26) {
          goto LABEL_18;
        }
      }
      v107 = "failed: non strictly positive strides are not supported";
      v109[8] = 259;
      uint64_t v64 = v91;
      v101 = &v107;
      uint64_t v65 = *(void *)(a4 + 16);
      if (v65 && mlir::RewriterBase::Listener::classof(v65))
      {
        uint64_t v63 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v65 + 64))(v65, *(void *)(v64 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v101);
        goto LABEL_122;
      }
LABEL_89:
      uint64_t v63 = 0;
LABEL_122:
      if (v113 != v115) {
        free(v113);
      }
      goto LABEL_124;
    }
LABEL_18:
    v107 = v109;
    uint64_t v108 = 0x500000000;
    v111 = 0;
    uint64_t v112 = 0;
    v110 = &v111;
    uint64_t v27 = v91;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v91);
    {
      v101 = v103;
      uint64_t v102 = 0x500000000;
      v105 = 0;
      uint64_t v106 = 0;
      v104 = &v105;
      uint64_t v29 = v91;
      unsigned int Offset = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v91);
      {
        v96 = v98;
        uint64_t v97 = 0x500000000;
        v99 = 0;
        uint64_t v100 = 0;
        v98[5] = &v99;
        uint64_t v31 = v91;
        unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v91);
        {
          v33 = (char *)mlir::ValueRange::dereference_iterator(&v120, 0);
          v90 = v33;
          v93 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
          v34 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
          v89[0] = mlir::getRankPromotionTypeForANE((uint64_t)v34, v35);
          v89[1] = v36;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (v37 >= 1)
          {
            for (uint64_t i = 0; i < v39; ++i)
            {
              uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
              if (v112)
              {
                for (j = v111; j; j = (void *)*j)
                {
                  uint64_t v42 = j[4];
                  if (i >= v42)
                  {
                    if (v42 >= i) {
                      goto LABEL_39;
                    }
                    ++j;
                  }
                }
              }
              else if (v108)
              {
                v43 = v107;
                uint64_t v44 = 8 * v108;
                while (*v43 != i)
                {
                  ++v43;
                  v44 -= 8;
                  if (!v44) {
                    goto LABEL_40;
                  }
                }
                if (v44)
                {
LABEL_39:
                  uint64_t v45 = 0;
                  goto LABEL_41;
                }
              }
LABEL_40:
              uint64_t v45 = *((void *)v118[0] + i);
LABEL_41:
              uint64_t v46 = *(void *)(ArgAttrsAttr + 8 * i);
              if (v106)
              {
                for (k = v105; k; k = (void *)*k)
                {
                  uint64_t v48 = k[4];
                  if (i >= v48)
                  {
                    if (v48 >= i)
                    {
                      uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
                      goto LABEL_56;
                    }
                    ++k;
                  }
                }
LABEL_55:
                uint64_t v49 = *((void *)v116[0] + i);
                goto LABEL_56;
              }
              if (!v102) {
                goto LABEL_55;
              }
              v50 = v101;
              uint64_t v51 = 8 * v102;
              while (*v50 != i)
              {
                ++v50;
                v51 -= 8;
                if (!v51) {
                  goto LABEL_55;
                }
              }
              uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
              if (!v51) {
                goto LABEL_55;
              }
LABEL_56:
              uint64_t v52 = *((void *)v113 + i);
              uint64_t v53 = v49 + v45;
              if (v49 == -1) {
                uint64_t v53 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (!IsSize) {
                uint64_t v53 = v49;
              }
              uint64_t v54 = (v46 & (v45 >> 63)) + v45;
              uint64_t v55 = (v46 & (v53 >> 63)) + v53;
              if (v46 - 1 < v54) {
                uint64_t v54 = v46 - 1;
              }
              uint64_t v56 = v54 & ~(v54 >> 63);
              if (v46 >= v55) {
                uint64_t v57 = v55;
              }
              else {
                uint64_t v57 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (v100)
              {
                for (m = v99; m; m = (void *)*m)
                {
                  uint64_t v59 = m[4];
                  if (i >= v59)
                  {
                    if (v59 >= i) {
                      goto LABEL_79;
                    }
                    ++m;
                  }
                }
              }
              else if (v97)
              {
                v60 = v96;
                v61 = &v96[v97];
                while (*v60 != i)
                {
                  if (++v60 == v61) {
                    goto LABEL_81;
                  }
                }
                if (v60 != v61)
                {
LABEL_79:
                  uint64_t v62 = 1;
                  if (v46 == 1) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }
LABEL_81:
              uint64_t v62 = (v52 + ~v56 + (v57 & ~(v57 >> 63))) / v52;
              if (v62 == v46) {
                goto LABEL_24;
              }
LABEL_23:
              v90 = v33;
LABEL_24:
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
            }
          }
          if (v97 || v100)
          {
            v93 = (void *)(*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8);
            v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
            v88[1] = v66;
            v93 = v95;
            uint64_t v94 = 0x400000000;
            uint64_t v67 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
            if (v68)
            {
              v69 = (uint64_t *)v67;
              uint64_t v70 = 0;
              v71 = (uint64_t *)(v67 + 8 * v68);
              do
              {
                if (v100)
                {
                  for (n = v99; n; n = (void *)*n)
                  {
                    uint64_t v73 = n[4];
                    if (v70 >= v73)
                    {
                      if (v73 >= v70) {
                        goto LABEL_96;
                      }
                      ++n;
                    }
                  }
                }
                else if (v97)
                {
                  v74 = v96;
                  uint64_t v75 = 8 * v97;
                  while (*v74 != v70)
                  {
                    ++v74;
                    v75 -= 8;
                    if (!v75) {
                      goto LABEL_109;
                    }
                  }
                  if (v75) {
                    goto LABEL_96;
                  }
                }
LABEL_109:
                uint64_t v76 = *v69;
                uint64_t v77 = v94;
                if (v94 >= (unint64_t)HIDWORD(v94))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 8);
                  uint64_t v77 = v94;
                }
                *((void *)v93 + v77) = v76;
                LODWORD(v94) = v94 + 1;
LABEL_96:
                ++v70;
                ++v69;
              }
              while (v69 != v71);
            }
            v78 = v93;
            v79 = (mlir::AffineMap *)v94;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)v33);
            v86 = (uint64_t *)mlir::MemRefType::get(v78, v79, ElementTypeOrSelf, 0, 0, 0);
            v81 = mlir::Type::cast<mlir::ShapedType>(&v86);
            v87[0] = mlir::getRankPromotionTypeForANE((uint64_t)v81, v82);
            v87[1] = v83;
            v33 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a4 + 8), *(void *)(v91 + 24), v87, (uint64_t *)&v90)- 16;
            v90 = v33;
            if (v93 != v95)
            {
              free(v93);
              v33 = v90;
            }
          }
          v84 = (unsigned int *)v91;
          v93 = v33;
          uint64_t v63 = 1;
          mlir::ValueRange::ValueRange(v92, (uint64_t)&v93, 1uLL);
          mlir::ConversionPatternRewriter::replaceOp(a4, v84, v92[0], v92[1]);
        }
        else
        {
          uint64_t v63 = 0;
        }
        llvm::SmallSet<long long,5u,std::less<long long>>::~SmallSet((uint64_t)&v96);
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v104, v105);
      if (v101 != v103) {
        free(v101);
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v110, v111);
    if (v107 != v109) {
      free(v107);
    }
    goto LABEL_122;
  }
  uint64_t v63 = 0;
LABEL_124:
  if (v116[0] != v117) {
    free(v116[0]);
  }
LABEL_126:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v63;
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)3>::promoteAxesValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v20 = (uint64_t **)&v16;
  v18[0] = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v20, DefiningOp))
  {
    uint64_t v10 = 1;
    mlir::getIntValues<long long>(v16, v17, a5, 1);
    switch(*(_DWORD *)(a5 + 8))
    {
      case 0:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 4;
        goto LABEL_10;
      case 1:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 3;
LABEL_10:
        llvm::SmallVectorImpl<long long>::insert(v12, v11, v13, a4);
        uint64_t v10 = 1;
        break;
      case 2:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 8, 1uLL, a4);
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5, 1uLL, a4);
        break;
      case 3:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 16, 1uLL, a4);
        break;
      default:
        return v10;
    }
  }
  else
  {
    v18[0] = "failed: axes value must be a constant";
    __int16 v19 = 259;
    v20 = (uint64_t **)v18;
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 && mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v14 + 64))(v14, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::Operation *&>(mlir::Operation *&,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v20);
    }
    else {
      return 0;
    }
  }
  return v10;
}

void *mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)4>::~ConvertStridedSlice(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)4>::~ConvertStridedSlice(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a2;
  long long v120 = *(_OWORD *)(a3 + 72);
  v5 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v107 = v5;
  uint64_t v108 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  int64_t v17 = v16;
  BOOL IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v91);
  v118[0] = v119;
  v118[1] = (void *)0x500000000;
  uint64_t v19 = v91;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91);
  {
    uint64_t v63 = 0;
    goto LABEL_126;
  }
  v116[0] = v117;
  v116[1] = (void *)0x500000000;
  uint64_t v21 = v91;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v91);
  {
    v113 = v115;
    uint64_t v114 = 0x500000000;
    uint64_t v23 = v91;
    uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v91);
    if (v114)
    {
      v25 = (uint64_t *)v113;
      uint64_t v26 = 8 * v114;
      while (*v25 > 0)
      {
        ++v25;
        v26 -= 8;
        if (!v26) {
          goto LABEL_18;
        }
      }
      v107 = "failed: non strictly positive strides are not supported";
      v109[8] = 259;
      uint64_t v64 = v91;
      v101 = &v107;
      uint64_t v65 = *(void *)(a4 + 16);
      if (v65 && mlir::RewriterBase::Listener::classof(v65))
      {
        uint64_t v63 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v65 + 64))(v65, *(void *)(v64 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v101);
        goto LABEL_122;
      }
LABEL_89:
      uint64_t v63 = 0;
LABEL_122:
      if (v113 != v115) {
        free(v113);
      }
      goto LABEL_124;
    }
LABEL_18:
    v107 = v109;
    uint64_t v108 = 0x500000000;
    v111 = 0;
    uint64_t v112 = 0;
    v110 = &v111;
    uint64_t v27 = v91;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v91);
    {
      v101 = v103;
      uint64_t v102 = 0x500000000;
      v105 = 0;
      uint64_t v106 = 0;
      v104 = &v105;
      uint64_t v29 = v91;
      unsigned int Offset = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v91);
      {
        v96 = v98;
        uint64_t v97 = 0x500000000;
        v99 = 0;
        uint64_t v100 = 0;
        v98[5] = &v99;
        uint64_t v31 = v91;
        unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v91);
        {
          v33 = (char *)mlir::ValueRange::dereference_iterator(&v120, 0);
          v90 = v33;
          v93 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
          v34 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
          v89[0] = mlir::getRankPromotionTypeForANE((uint64_t)v34, v35);
          v89[1] = v36;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (v37 >= 1)
          {
            for (uint64_t i = 0; i < v39; ++i)
            {
              uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
              if (v112)
              {
                for (j = v111; j; j = (void *)*j)
                {
                  uint64_t v42 = j[4];
                  if (i >= v42)
                  {
                    if (v42 >= i) {
                      goto LABEL_39;
                    }
                    ++j;
                  }
                }
              }
              else if (v108)
              {
                v43 = v107;
                uint64_t v44 = 8 * v108;
                while (*v43 != i)
                {
                  ++v43;
                  v44 -= 8;
                  if (!v44) {
                    goto LABEL_40;
                  }
                }
                if (v44)
                {
LABEL_39:
                  uint64_t v45 = 0;
                  goto LABEL_41;
                }
              }
LABEL_40:
              uint64_t v45 = *((void *)v118[0] + i);
LABEL_41:
              uint64_t v46 = *(void *)(ArgAttrsAttr + 8 * i);
              if (v106)
              {
                for (k = v105; k; k = (void *)*k)
                {
                  uint64_t v48 = k[4];
                  if (i >= v48)
                  {
                    if (v48 >= i)
                    {
                      uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
                      goto LABEL_56;
                    }
                    ++k;
                  }
                }
LABEL_55:
                uint64_t v49 = *((void *)v116[0] + i);
                goto LABEL_56;
              }
              if (!v102) {
                goto LABEL_55;
              }
              v50 = v101;
              uint64_t v51 = 8 * v102;
              while (*v50 != i)
              {
                ++v50;
                v51 -= 8;
                if (!v51) {
                  goto LABEL_55;
                }
              }
              uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
              if (!v51) {
                goto LABEL_55;
              }
LABEL_56:
              uint64_t v52 = *((void *)v113 + i);
              uint64_t v53 = v49 + v45;
              if (v49 == -1) {
                uint64_t v53 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (!IsSize) {
                uint64_t v53 = v49;
              }
              uint64_t v54 = (v46 & (v45 >> 63)) + v45;
              uint64_t v55 = (v46 & (v53 >> 63)) + v53;
              if (v46 - 1 < v54) {
                uint64_t v54 = v46 - 1;
              }
              uint64_t v56 = v54 & ~(v54 >> 63);
              if (v46 >= v55) {
                uint64_t v57 = v55;
              }
              else {
                uint64_t v57 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (v100)
              {
                for (m = v99; m; m = (void *)*m)
                {
                  uint64_t v59 = m[4];
                  if (i >= v59)
                  {
                    if (v59 >= i) {
                      goto LABEL_79;
                    }
                    ++m;
                  }
                }
              }
              else if (v97)
              {
                v60 = v96;
                v61 = &v96[v97];
                while (*v60 != i)
                {
                  if (++v60 == v61) {
                    goto LABEL_81;
                  }
                }
                if (v60 != v61)
                {
LABEL_79:
                  uint64_t v62 = 1;
                  if (v46 == 1) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }
LABEL_81:
              uint64_t v62 = (v52 + ~v56 + (v57 & ~(v57 >> 63))) / v52;
              if (v62 == v46) {
                goto LABEL_24;
              }
LABEL_23:
              v90 = v33;
LABEL_24:
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
            }
          }
          if (v97 || v100)
          {
            v93 = (void *)(*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8);
            v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
            v88[1] = v66;
            v93 = v95;
            uint64_t v94 = 0x400000000;
            uint64_t v67 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
            if (v68)
            {
              v69 = (uint64_t *)v67;
              uint64_t v70 = 0;
              v71 = (uint64_t *)(v67 + 8 * v68);
              do
              {
                if (v100)
                {
                  for (n = v99; n; n = (void *)*n)
                  {
                    uint64_t v73 = n[4];
                    if (v70 >= v73)
                    {
                      if (v73 >= v70) {
                        goto LABEL_96;
                      }
                      ++n;
                    }
                  }
                }
                else if (v97)
                {
                  v74 = v96;
                  uint64_t v75 = 8 * v97;
                  while (*v74 != v70)
                  {
                    ++v74;
                    v75 -= 8;
                    if (!v75) {
                      goto LABEL_109;
                    }
                  }
                  if (v75) {
                    goto LABEL_96;
                  }
                }
LABEL_109:
                uint64_t v76 = *v69;
                uint64_t v77 = v94;
                if (v94 >= (unint64_t)HIDWORD(v94))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 8);
                  uint64_t v77 = v94;
                }
                *((void *)v93 + v77) = v76;
                LODWORD(v94) = v94 + 1;
LABEL_96:
                ++v70;
                ++v69;
              }
              while (v69 != v71);
            }
            v78 = v93;
            v79 = (mlir::AffineMap *)v94;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)v33);
            v86 = (uint64_t *)mlir::MemRefType::get(v78, v79, ElementTypeOrSelf, 0, 0, 0);
            v81 = mlir::Type::cast<mlir::ShapedType>(&v86);
            v87[0] = mlir::getRankPromotionTypeForANE((uint64_t)v81, v82);
            v87[1] = v83;
            v33 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a4 + 8), *(void *)(v91 + 24), v87, (uint64_t *)&v90)- 16;
            v90 = v33;
            if (v93 != v95)
            {
              free(v93);
              v33 = v90;
            }
          }
          v84 = (unsigned int *)v91;
          v93 = v33;
          uint64_t v63 = 1;
          mlir::ValueRange::ValueRange(v92, (uint64_t)&v93, 1uLL);
          mlir::ConversionPatternRewriter::replaceOp(a4, v84, v92[0], v92[1]);
        }
        else
        {
          uint64_t v63 = 0;
        }
        llvm::SmallSet<long long,5u,std::less<long long>>::~SmallSet((uint64_t)&v96);
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v104, v105);
      if (v101 != v103) {
        free(v101);
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v110, v111);
    if (v107 != v109) {
      free(v107);
    }
    goto LABEL_122;
  }
  uint64_t v63 = 0;
LABEL_124:
  if (v116[0] != v117) {
    free(v116[0]);
  }
LABEL_126:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v63;
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)4>::promoteAxesValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v20 = (uint64_t **)&v16;
  v18[0] = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v20, DefiningOp))
  {
    uint64_t v10 = 1;
    mlir::getIntValues<long long>(v16, v17, a5, 1);
    switch(*(_DWORD *)(a5 + 8))
    {
      case 0:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 4;
        goto LABEL_10;
      case 1:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 3;
LABEL_10:
        llvm::SmallVectorImpl<long long>::insert(v12, v11, v13, a4);
        uint64_t v10 = 1;
        break;
      case 2:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 8, 1uLL, a4);
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5, 1uLL, a4);
        break;
      case 3:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 16, 1uLL, a4);
        break;
      default:
        return v10;
    }
  }
  else
  {
    v18[0] = "failed: axes value must be a constant";
    __int16 v19 = 259;
    v20 = (uint64_t **)v18;
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 && mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v14 + 64))(v14, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::Operation *&>(mlir::Operation *&,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v20);
    }
    else {
      return 0;
    }
  }
  return v10;
}

void *mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)5>::~ConvertStridedSlice(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)5>::~ConvertStridedSlice(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a2;
  long long v120 = *(_OWORD *)(a3 + 72);
  v5 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v107 = v5;
  uint64_t v108 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  int64_t v17 = v16;
  BOOL IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v91);
  v118[0] = v119;
  v118[1] = (void *)0x500000000;
  uint64_t v19 = v91;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91);
  {
    uint64_t v63 = 0;
    goto LABEL_126;
  }
  v116[0] = v117;
  v116[1] = (void *)0x500000000;
  uint64_t v21 = v91;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v91);
  {
    v113 = v115;
    uint64_t v114 = 0x500000000;
    uint64_t v23 = v91;
    uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v91);
    if (v114)
    {
      v25 = (uint64_t *)v113;
      uint64_t v26 = 8 * v114;
      while (*v25 > 0)
      {
        ++v25;
        v26 -= 8;
        if (!v26) {
          goto LABEL_18;
        }
      }
      v107 = "failed: non strictly positive strides are not supported";
      v109[8] = 259;
      uint64_t v64 = v91;
      v101 = &v107;
      uint64_t v65 = *(void *)(a4 + 16);
      if (v65 && mlir::RewriterBase::Listener::classof(v65))
      {
        uint64_t v63 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v65 + 64))(v65, *(void *)(v64 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v101);
        goto LABEL_122;
      }
LABEL_89:
      uint64_t v63 = 0;
LABEL_122:
      if (v113 != v115) {
        free(v113);
      }
      goto LABEL_124;
    }
LABEL_18:
    v107 = v109;
    uint64_t v108 = 0x500000000;
    v111 = 0;
    uint64_t v112 = 0;
    v110 = &v111;
    uint64_t v27 = v91;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v91);
    {
      v101 = v103;
      uint64_t v102 = 0x500000000;
      v105 = 0;
      uint64_t v106 = 0;
      v104 = &v105;
      uint64_t v29 = v91;
      unsigned int Offset = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v91);
      {
        v96 = v98;
        uint64_t v97 = 0x500000000;
        v99 = 0;
        uint64_t v100 = 0;
        v98[5] = &v99;
        uint64_t v31 = v91;
        unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v91);
        {
          v33 = (char *)mlir::ValueRange::dereference_iterator(&v120, 0);
          v90 = v33;
          v93 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
          v34 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
          v89[0] = mlir::getRankPromotionTypeForANE((uint64_t)v34, v35);
          v89[1] = v36;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (v37 >= 1)
          {
            for (uint64_t i = 0; i < v39; ++i)
            {
              uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
              if (v112)
              {
                for (j = v111; j; j = (void *)*j)
                {
                  uint64_t v42 = j[4];
                  if (i >= v42)
                  {
                    if (v42 >= i) {
                      goto LABEL_39;
                    }
                    ++j;
                  }
                }
              }
              else if (v108)
              {
                v43 = v107;
                uint64_t v44 = 8 * v108;
                while (*v43 != i)
                {
                  ++v43;
                  v44 -= 8;
                  if (!v44) {
                    goto LABEL_40;
                  }
                }
                if (v44)
                {
LABEL_39:
                  uint64_t v45 = 0;
                  goto LABEL_41;
                }
              }
LABEL_40:
              uint64_t v45 = *((void *)v118[0] + i);
LABEL_41:
              uint64_t v46 = *(void *)(ArgAttrsAttr + 8 * i);
              if (v106)
              {
                for (k = v105; k; k = (void *)*k)
                {
                  uint64_t v48 = k[4];
                  if (i >= v48)
                  {
                    if (v48 >= i)
                    {
                      uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
                      goto LABEL_56;
                    }
                    ++k;
                  }
                }
LABEL_55:
                uint64_t v49 = *((void *)v116[0] + i);
                goto LABEL_56;
              }
              if (!v102) {
                goto LABEL_55;
              }
              v50 = v101;
              uint64_t v51 = 8 * v102;
              while (*v50 != i)
              {
                ++v50;
                v51 -= 8;
                if (!v51) {
                  goto LABEL_55;
                }
              }
              uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
              if (!v51) {
                goto LABEL_55;
              }
LABEL_56:
              uint64_t v52 = *((void *)v113 + i);
              uint64_t v53 = v49 + v45;
              if (v49 == -1) {
                uint64_t v53 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (!IsSize) {
                uint64_t v53 = v49;
              }
              uint64_t v54 = (v46 & (v45 >> 63)) + v45;
              uint64_t v55 = (v46 & (v53 >> 63)) + v53;
              if (v46 - 1 < v54) {
                uint64_t v54 = v46 - 1;
              }
              uint64_t v56 = v54 & ~(v54 >> 63);
              if (v46 >= v55) {
                uint64_t v57 = v55;
              }
              else {
                uint64_t v57 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (v100)
              {
                for (m = v99; m; m = (void *)*m)
                {
                  uint64_t v59 = m[4];
                  if (i >= v59)
                  {
                    if (v59 >= i) {
                      goto LABEL_79;
                    }
                    ++m;
                  }
                }
              }
              else if (v97)
              {
                v60 = v96;
                v61 = &v96[v97];
                while (*v60 != i)
                {
                  if (++v60 == v61) {
                    goto LABEL_81;
                  }
                }
                if (v60 != v61)
                {
LABEL_79:
                  uint64_t v62 = 1;
                  if (v46 == 1) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }
LABEL_81:
              uint64_t v62 = (v52 + ~v56 + (v57 & ~(v57 >> 63))) / v52;
              if (v62 == v46) {
                goto LABEL_24;
              }
LABEL_23:
              v90 = v33;
LABEL_24:
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
            }
          }
          if (v97 || v100)
          {
            v93 = (void *)(*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8);
            v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
            v88[1] = v66;
            v93 = v95;
            uint64_t v94 = 0x400000000;
            uint64_t v67 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
            if (v68)
            {
              v69 = (uint64_t *)v67;
              uint64_t v70 = 0;
              v71 = (uint64_t *)(v67 + 8 * v68);
              do
              {
                if (v100)
                {
                  for (n = v99; n; n = (void *)*n)
                  {
                    uint64_t v73 = n[4];
                    if (v70 >= v73)
                    {
                      if (v73 >= v70) {
                        goto LABEL_96;
                      }
                      ++n;
                    }
                  }
                }
                else if (v97)
                {
                  v74 = v96;
                  uint64_t v75 = 8 * v97;
                  while (*v74 != v70)
                  {
                    ++v74;
                    v75 -= 8;
                    if (!v75) {
                      goto LABEL_109;
                    }
                  }
                  if (v75) {
                    goto LABEL_96;
                  }
                }
LABEL_109:
                uint64_t v76 = *v69;
                uint64_t v77 = v94;
                if (v94 >= (unint64_t)HIDWORD(v94))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 8);
                  uint64_t v77 = v94;
                }
                *((void *)v93 + v77) = v76;
                LODWORD(v94) = v94 + 1;
LABEL_96:
                ++v70;
                ++v69;
              }
              while (v69 != v71);
            }
            v78 = v93;
            v79 = (mlir::AffineMap *)v94;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)v33);
            v86 = (uint64_t *)mlir::MemRefType::get(v78, v79, ElementTypeOrSelf, 0, 0, 0);
            v81 = mlir::Type::cast<mlir::ShapedType>(&v86);
            v87[0] = mlir::getRankPromotionTypeForANE((uint64_t)v81, v82);
            v87[1] = v83;
            v33 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a4 + 8), *(void *)(v91 + 24), v87, (uint64_t *)&v90)- 16;
            v90 = v33;
            if (v93 != v95)
            {
              free(v93);
              v33 = v90;
            }
          }
          v84 = (unsigned int *)v91;
          v93 = v33;
          uint64_t v63 = 1;
          mlir::ValueRange::ValueRange(v92, (uint64_t)&v93, 1uLL);
          mlir::ConversionPatternRewriter::replaceOp(a4, v84, v92[0], v92[1]);
        }
        else
        {
          uint64_t v63 = 0;
        }
        llvm::SmallSet<long long,5u,std::less<long long>>::~SmallSet((uint64_t)&v96);
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v104, v105);
      if (v101 != v103) {
        free(v101);
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v110, v111);
    if (v107 != v109) {
      free(v107);
    }
    goto LABEL_122;
  }
  uint64_t v63 = 0;
LABEL_124:
  if (v116[0] != v117) {
    free(v116[0]);
  }
LABEL_126:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v63;
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)5>::promoteAxesValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v20 = (uint64_t **)&v16;
  v18[0] = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v20, DefiningOp))
  {
    uint64_t v10 = 1;
    mlir::getIntValues<long long>(v16, v17, a5, 1);
    switch(*(_DWORD *)(a5 + 8))
    {
      case 0:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 4;
        goto LABEL_10;
      case 1:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 3;
LABEL_10:
        llvm::SmallVectorImpl<long long>::insert(v12, v11, v13, a4);
        uint64_t v10 = 1;
        break;
      case 2:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 8, 1uLL, a4);
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5, 1uLL, a4);
        break;
      case 3:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 16, 1uLL, a4);
        break;
      default:
        return v10;
    }
  }
  else
  {
    v18[0] = "failed: axes value must be a constant";
    __int16 v19 = 259;
    v20 = (uint64_t **)v18;
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 && mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v14 + 64))(v14, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::Operation *&>(mlir::Operation *&,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v20);
    }
    else {
      return 0;
    }
  }
  return v10;
}

void *mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)6>::~ConvertStridedSlice(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)6>::~ConvertStridedSlice(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a2;
  long long v120 = *(_OWORD *)(a3 + 72);
  v5 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v107 = v5;
  uint64_t v108 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  int64_t v17 = v16;
  BOOL IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v91);
  v118[0] = v119;
  v118[1] = (void *)0x500000000;
  uint64_t v19 = v91;
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91);
  {
    uint64_t v63 = 0;
    goto LABEL_126;
  }
  v116[0] = v117;
  v116[1] = (void *)0x500000000;
  uint64_t v21 = v91;
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v91);
  {
    v113 = v115;
    uint64_t v114 = 0x500000000;
    uint64_t v23 = v91;
    uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v91);
    if (v114)
    {
      v25 = (uint64_t *)v113;
      uint64_t v26 = 8 * v114;
      while (*v25 > 0)
      {
        ++v25;
        v26 -= 8;
        if (!v26) {
          goto LABEL_18;
        }
      }
      v107 = "failed: non strictly positive strides are not supported";
      v109[8] = 259;
      uint64_t v64 = v91;
      v101 = &v107;
      uint64_t v65 = *(void *)(a4 + 16);
      if (v65 && mlir::RewriterBase::Listener::classof(v65))
      {
        uint64_t v63 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v65 + 64))(v65, *(void *)(v64 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v101);
        goto LABEL_122;
      }
LABEL_89:
      uint64_t v63 = 0;
LABEL_122:
      if (v113 != v115) {
        free(v113);
      }
      goto LABEL_124;
    }
LABEL_18:
    v107 = v109;
    uint64_t v108 = 0x500000000;
    v111 = 0;
    uint64_t v112 = 0;
    v110 = &v111;
    uint64_t v27 = v91;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v91);
    {
      v101 = v103;
      uint64_t v102 = 0x500000000;
      v105 = 0;
      uint64_t v106 = 0;
      v104 = &v105;
      uint64_t v29 = v91;
      unsigned int Offset = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v91);
      {
        v96 = v98;
        uint64_t v97 = 0x500000000;
        v99 = 0;
        uint64_t v100 = 0;
        v98[5] = &v99;
        uint64_t v31 = v91;
        unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v91);
        {
          v33 = (char *)mlir::ValueRange::dereference_iterator(&v120, 0);
          v90 = v33;
          v93 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
          v34 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
          v89[0] = mlir::getRankPromotionTypeForANE((uint64_t)v34, v35);
          v89[1] = v36;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (v37 >= 1)
          {
            for (uint64_t i = 0; i < v39; ++i)
            {
              uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
              if (v112)
              {
                for (j = v111; j; j = (void *)*j)
                {
                  uint64_t v42 = j[4];
                  if (i >= v42)
                  {
                    if (v42 >= i) {
                      goto LABEL_39;
                    }
                    ++j;
                  }
                }
              }
              else if (v108)
              {
                v43 = v107;
                uint64_t v44 = 8 * v108;
                while (*v43 != i)
                {
                  ++v43;
                  v44 -= 8;
                  if (!v44) {
                    goto LABEL_40;
                  }
                }
                if (v44)
                {
LABEL_39:
                  uint64_t v45 = 0;
                  goto LABEL_41;
                }
              }
LABEL_40:
              uint64_t v45 = *((void *)v118[0] + i);
LABEL_41:
              uint64_t v46 = *(void *)(ArgAttrsAttr + 8 * i);
              if (v106)
              {
                for (k = v105; k; k = (void *)*k)
                {
                  uint64_t v48 = k[4];
                  if (i >= v48)
                  {
                    if (v48 >= i)
                    {
                      uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
                      goto LABEL_56;
                    }
                    ++k;
                  }
                }
LABEL_55:
                uint64_t v49 = *((void *)v116[0] + i);
                goto LABEL_56;
              }
              if (!v102) {
                goto LABEL_55;
              }
              v50 = v101;
              uint64_t v51 = 8 * v102;
              while (*v50 != i)
              {
                ++v50;
                v51 -= 8;
                if (!v51) {
                  goto LABEL_55;
                }
              }
              uint64_t v49 = *(void *)(ArgAttrsAttr + 8 * i);
              if (!v51) {
                goto LABEL_55;
              }
LABEL_56:
              uint64_t v52 = *((void *)v113 + i);
              uint64_t v53 = v49 + v45;
              if (v49 == -1) {
                uint64_t v53 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (!IsSize) {
                uint64_t v53 = v49;
              }
              uint64_t v54 = (v46 & (v45 >> 63)) + v45;
              uint64_t v55 = (v46 & (v53 >> 63)) + v53;
              if (v46 - 1 < v54) {
                uint64_t v54 = v46 - 1;
              }
              uint64_t v56 = v54 & ~(v54 >> 63);
              if (v46 >= v55) {
                uint64_t v57 = v55;
              }
              else {
                uint64_t v57 = *(void *)(ArgAttrsAttr + 8 * i);
              }
              if (v100)
              {
                for (m = v99; m; m = (void *)*m)
                {
                  uint64_t v59 = m[4];
                  if (i >= v59)
                  {
                    if (v59 >= i) {
                      goto LABEL_79;
                    }
                    ++m;
                  }
                }
              }
              else if (v97)
              {
                v60 = v96;
                v61 = &v96[v97];
                while (*v60 != i)
                {
                  if (++v60 == v61) {
                    goto LABEL_81;
                  }
                }
                if (v60 != v61)
                {
LABEL_79:
                  uint64_t v62 = 1;
                  if (v46 == 1) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }
LABEL_81:
              uint64_t v62 = (v52 + ~v56 + (v57 & ~(v57 >> 63))) / v52;
              if (v62 == v46) {
                goto LABEL_24;
              }
LABEL_23:
              v90 = v33;
LABEL_24:
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
            }
          }
          if (v97 || v100)
          {
            v93 = (void *)(*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8);
            v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v93);
            v88[1] = v66;
            v93 = v95;
            uint64_t v94 = 0x400000000;
            uint64_t v67 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
            if (v68)
            {
              v69 = (uint64_t *)v67;
              uint64_t v70 = 0;
              v71 = (uint64_t *)(v67 + 8 * v68);
              do
              {
                if (v100)
                {
                  for (n = v99; n; n = (void *)*n)
                  {
                    uint64_t v73 = n[4];
                    if (v70 >= v73)
                    {
                      if (v73 >= v70) {
                        goto LABEL_96;
                      }
                      ++n;
                    }
                  }
                }
                else if (v97)
                {
                  v74 = v96;
                  uint64_t v75 = 8 * v97;
                  while (*v74 != v70)
                  {
                    ++v74;
                    v75 -= 8;
                    if (!v75) {
                      goto LABEL_109;
                    }
                  }
                  if (v75) {
                    goto LABEL_96;
                  }
                }
LABEL_109:
                uint64_t v76 = *v69;
                uint64_t v77 = v94;
                if (v94 >= (unint64_t)HIDWORD(v94))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 8);
                  uint64_t v77 = v94;
                }
                *((void *)v93 + v77) = v76;
                LODWORD(v94) = v94 + 1;
LABEL_96:
                ++v70;
                ++v69;
              }
              while (v69 != v71);
            }
            v78 = v93;
            v79 = (mlir::AffineMap *)v94;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)v33);
            v86 = (uint64_t *)mlir::MemRefType::get(v78, v79, ElementTypeOrSelf, 0, 0, 0);
            v81 = mlir::Type::cast<mlir::ShapedType>(&v86);
            v87[0] = mlir::getRankPromotionTypeForANE((uint64_t)v81, v82);
            v87[1] = v83;
            v33 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::ShapedType &,mlir::Value &>((mlir::OpBuilder *)(a4 + 8), *(void *)(v91 + 24), v87, (uint64_t *)&v90)- 16;
            v90 = v33;
            if (v93 != v95)
            {
              free(v93);
              v33 = v90;
            }
          }
          v84 = (unsigned int *)v91;
          v93 = v33;
          uint64_t v63 = 1;
          mlir::ValueRange::ValueRange(v92, (uint64_t)&v93, 1uLL);
          mlir::ConversionPatternRewriter::replaceOp(a4, v84, v92[0], v92[1]);
        }
        else
        {
          uint64_t v63 = 0;
        }
        llvm::SmallSet<long long,5u,std::less<long long>>::~SmallSet((uint64_t)&v96);
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v104, v105);
      if (v101 != v103) {
        free(v101);
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v110, v111);
    if (v107 != v109) {
      free(v107);
    }
    goto LABEL_122;
  }
  uint64_t v63 = 0;
LABEL_124:
  if (v116[0] != v117) {
    free(v116[0]);
  }
LABEL_126:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v63;
}

uint64_t mlir::anonymous namespace'::ConvertStridedSlice<(mlir::anec::Family)6>::promoteAxesValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v20 = (uint64_t **)&v16;
  v18[0] = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v20, DefiningOp))
  {
    uint64_t v10 = 1;
    mlir::getIntValues<long long>(v16, v17, a5, 1);
    switch(*(_DWORD *)(a5 + 8))
    {
      case 0:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 4;
        goto LABEL_10;
      case 1:
        uint64_t v11 = *(void *)a5;
        uint64_t v12 = a5;
        unint64_t v13 = 3;
LABEL_10:
        llvm::SmallVectorImpl<long long>::insert(v12, v11, v13, a4);
        uint64_t v10 = 1;
        break;
      case 2:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 8, 1uLL, a4);
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5, 1uLL, a4);
        break;
      case 3:
        uint64_t v10 = 1;
        llvm::SmallVectorImpl<long long>::insert(a5, *(void *)a5 + 16, 1uLL, a4);
        break;
      default:
        return v10;
    }
  }
  else
  {
    v18[0] = "failed: axes value must be a constant";
    __int16 v19 = 259;
    v20 = (uint64_t **)v18;
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 && mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v14 + 64))(v14, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::Operation *&>(mlir::Operation *&,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v20);
    }
    else {
      return 0;
    }
  }
  return v10;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)0>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)0>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::CropOpGenericAdaptorBase::CropOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::CropOpGenericAdaptorBase::CropOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::CropOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.input_view", (const unsigned __int8 *)0xF, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.input_view";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::InputView::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)1>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)1>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)2>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)2>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)3>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)3>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)4>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)4>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)5>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)5>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void *mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)6>::~ConvertCrop(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)6>::~ConvertCrop(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertCrop<(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  long long v56 = *(_OWORD *)(a3 + 40);
  v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    uint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v49 = v5;
  uint64_t v50 = v15;
  uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v51);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(Filter, v17, 0, 0);
  if (v19)
  {
    uint64_t v20 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
    v57[0] = v58;
    v57[1] = (void *)0x100000000;
    if (!SortedUniquePromotedPositiveAxesAttr) {
      goto LABEL_21;
    }
    uint64_t v21 = *SortedUniquePromotedPositiveAxesAttr;
    unint64_t v22 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v23 = *(unsigned int *)(v21 + 16);
    if (!v23) {
      goto LABEL_21;
    }
    v24 = *(void **)(v21 + 8);
    uint64_t v25 = &v24[2 * v23];
    do
    {
      unint64_t v26 = v23 >> 1;
      uint64_t v27 = &v24[2 * (v23 >> 1)];
      unint64_t v29 = *v27;
      long long v28 = v27 + 2;
      v23 += ~(v23 >> 1);
      if (v29 < v22) {
        v24 = v28;
      }
      else {
        unint64_t v23 = v26;
      }
    }
    while (v23);
    if (v24 != v25 && *v24 == v22) {
      uint64_t v30 = v24[1];
    }
    else {
LABEL_21:
    }
      uint64_t v30 = 0;
    mlir::getIntValues<unsigned long long>(v20, v30, (uint64_t)v57, 1);
    v48[0] = mlir::getRankPromotionTypeForANE((uint64_t)v49, v50);
    v48[1] = v31;
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v51);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = (uint64_t **)&v53;
    uint64_t v55 = Bias;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
      uint64_t v47 = SingleInt;
      if ((SingleInt & 0xFF00000000) == 0) {
        goto LABEL_33;
      }
      int v35 = SingleInt;
      uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v51);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = (uint64_t **)&v53;
      uint64_t v55 = SparseShape;
      uint64_t v37 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
      if (!v37) {
        goto LABEL_33;
      }
      if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, v37)
        && (uint64_t v38 = mlir::getSingleIntValue<int>(v53, v54), (v38 & 0xFF00000000) != 0))
      {
        int v39 = v38;
        uint64_t v40 = *(unsigned int *)v57[0];
        uint64_t v41 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48) + 8 * v40);
        uint64_t v42 = *((void *)v51 + 3);
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v56, 0);
        uint64_t v55 = *(void *)v57[0];
        uint64_t v52 = (uint64_t **)(v41 - (v39 + (uint64_t)v35));
        v43 = mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value,unsigned long long,int &,unsigned long long>((mlir::Builder *)(a4 + 1), v42, &v53, &v55, (int *)&v47, (uint64_t *)&v52);
        mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v51, v43);
        uint64_t v44 = 1;
      }
      else
      {
LABEL_33:
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v47 = 0;
    }
    if (v57[0] != v58) {
      free(v57[0]);
    }
  }
  else
  {
    v57[0] = "could not extract positive promoted axes";
    v58[8] = 259;
    uint64_t v45 = v51;
    uint64_t v53 = (uint64_t)v57;
    uint64_t v44 = a4[2];
    if (v44)
    {
      if (mlir::RewriterBase::Listener::classof(v44)) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v44 + 64))(v44, *((void *)v45 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropOp &>(mlir::mps::CropOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v53);
      }
      else {
        return 0;
      }
    }
  }
  return v44;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CosOp,mlir::anec::Cos>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A89C0;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        unint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    unint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    unint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18086AA7C()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::CosOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::CosOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::CosOpGenericAdaptorBase::CosOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CosOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::CosOpGenericAdaptorBase::CosOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::CosOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  int v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        int v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CosOp &>(mlir::mps::CosOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CosOp &>(mlir::mps::CosOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CosOp,mlir::anec::Cos>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      unint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        long long v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    int v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      uint64_t v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      uint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  uint64_t v51 = mlir::OpBuilder::create<mlir::anec::Cos,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CosOp &>(mlir::mps::CosOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CosOp,mlir::anec::Cos>::matchAndRewriteWithStaticShapes(mlir::mps::CosOp,mlir::mps::CosOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Cos,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.cos", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.cos";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Cos,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SinOp,mlir::anec::Sin>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8B80;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18086B7A8()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::SinOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::SinOpGenericAdaptorBase::SinOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SinOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::SinOpGenericAdaptorBase::SinOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SinOp &>(mlir::mps::SinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SinOp &>(mlir::mps::SinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SinOp,mlir::anec::Sin>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        long long v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    int v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      uint64_t v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      uint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  uint64_t v51 = mlir::OpBuilder::create<mlir::anec::Sin,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SinOp &>(mlir::mps::SinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SinOp,mlir::anec::Sin>::matchAndRewriteWithStaticShapes(mlir::mps::SinOp,mlir::mps::SinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Sin,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sin", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.sin";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Sin,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void *mlir::anonymous namespace'::FoldOperation<mlir::mps::IdentityOp>::~FoldOperation(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::FoldOperation<mlir::mps::IdentityOp>::~FoldOperation(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::IdentityOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::IdentityOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::IdentityOpGenericAdaptorBase::IdentityOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::IdentityOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::IdentityOpGenericAdaptorBase::IdentityOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::IdentityOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::IdentityOp &>(mlir::mps::IdentityOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::IdentityOp &>(mlir::mps::IdentityOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::FoldOperation<mlir::mps::IdentityOp>::matchAndRewriteWithStaticShapes(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::IdentityOp &>(mlir::mps::IdentityOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::anonymous namespace'::ConvertNormalization::~ConvertNormalization(mlir::_anonymous_namespace_::ConvertNormalization *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NormalizationOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::NormalizationOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::NormalizationOpGenericAdaptorBase::NormalizationOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NormalizationOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::NormalizationOpGenericAdaptorBase::NormalizationOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::NormalizationOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 48);
  uint64_t v9 = *(void *)(a3 + 56);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NormalizationOp &>(mlir::mps::NormalizationOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v28;
        long long v29 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  uint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NormalizationOp &>(mlir::mps::NormalizationOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertNormalization::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  long long v23 = *(_OWORD *)(a3 + 48);
  uint64_t v17 = mlir::ValueRange::dereference_iterator(&v23, 0);
  uint64_t v16 = mlir::ValueRange::dereference_iterator(&v23, 1);
  uint64_t v15 = mlir::ValueRange::dereference_iterator(&v23, 2);
  uint64_t v14 = mlir::ValueRange::dereference_iterator(&v23, 3);
  uint64_t v13 = mlir::ValueRange::dereference_iterator(&v23, 4);
  uint64_t v17 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(void *)(a2 + 24), &v17, &v16)- 16;
  Epsilon = mlir::mps::InstanceNormOp::getEpsilon((mlir::mps::InstanceNormOp *)&v18, (uint64_t)v21);
  uint64_t v7 = llvm::APFloatBase::IEEEhalf(Epsilon);
  LOBYTE(v19) = 0;
  llvm::APFloat::convert((uint64_t)v21, v7, 1, &v19);
  uint64_t v15 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::Value &,llvm::APFloat &>((mlir::Float16Type **)(a4 + 8), *(void *)(v18 + 24), &v15, (uint64_t)v21)- 16;
  uint64_t v17 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>((uint64_t *)(a4 + 8), *(void *)(v18 + 24), &v17, &v15)- 16;
  uint64_t v17 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>((uint64_t *)(a4 + 8), *(void *)(v18 + 24), &v17, &v14)- 16;
  unint64_t v8 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(void *)(v18 + 24), &v17, &v13);
  uint64_t v9 = (unsigned int *)v18;
  uint64_t v19 = (char *)v8 - 16;
  mlir::ValueRange::ValueRange(v20, (uint64_t)&v19, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v9, v20[0], v20[1]);
  uint64_t v10 = (void *)v22[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v11) == v10) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
  }
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NormalizationOp &>(mlir::mps::NormalizationOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sub", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"anec.sub";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::Value &,llvm::APFloat &>(mlir::Float16Type **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v26[38] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.r_sqrt", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v23 = 1283;
    v22[2] = (uint64_t)"anec.r_sqrt";
    void v22[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  uint64_t v11 = *a3;
  uint64_t v13 = *(void **)(a4 + 8);
  uint64_t v12 = (const llvm::detail::DoubleAPFloat *)(a4 + 8);
  uint64_t v15 = llvm::APFloatBase::PPCDoubleDouble(v14);
  if (v15 == v13) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v25, v12);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v25, v12);
  }
  mlir::anec::Rsqrt::build(a1, (uint64_t)v26, v11, (uint64_t)v24);
  if (v15 == (void *)v25[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v25);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v25);
  }
  __int16 v16 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v17;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"anec.add";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::anonymous namespace'::ConvertReductionVariance::~ConvertReductionVariance(mlir::_anonymous_namespace_::ConvertReductionVariance *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionVarianceOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 48);
  uint64_t v9 = *(void *)(a3 + 56);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionVarianceOp &>(mlir::mps::ReductionVarianceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v28;
        long long v29 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      uint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  uint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionVarianceOp &>(mlir::mps::ReductionVarianceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertReductionVariance::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = a2;
  unint64_t v7 = *(void *)(a3 + 56);
  v77[0] = *(void *)(a3 + 48);
  uint64_t v6 = v77[0];
  v77[1] = v7;
  mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v76, *(const mlir::TypeConverter **)(a1 + 96));
  uint64_t v73 = v8;
  if (!(_BYTE)v8)
  {
    v78 = (uint64_t *)"failed to convert operand axes";
    __int16 v81 = 259;
    uint64_t v66 = (uint64_t *)&v78;
    uint64_t v58 = *(void *)(a4 + 16);
    if (v58 && mlir::RewriterBase::Listener::classof(v58)) {
      (*(void (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v58 + 64))(v58, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionVarianceOp &>(mlir::mps::ReductionVarianceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v66);
    }
LABEL_58:
    mlir::TypeConverter::~TypeConverter(v76);
  }
  v71 = (uint64_t *)mlir::ValueRange::dereference_iterator(v77, 0);
  uint64_t v9 = (uint64_t *)(v71[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_11:
  }
    uint64_t v19 = 0;
  v70[0] = mlir::getRankPromotionTypeForANE((uint64_t)v9, v19);
  v70[1] = v20;
  uint64_t v69 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ReduceAvg,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&v71, (uint64_t *)&v72)- 16;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v74))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v74) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_22;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_22;
    }
    uint64_t v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      long long v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      long long v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        uint64_t v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23) {
      uint64_t v31 = v25[1];
    }
    else {
LABEL_22:
    }
      uint64_t v31 = 0;
    v78 = v21;
    v79 = (void *)v31;
  }
  v71 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&v71, &v69)- 16);
  v71 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>((uint64_t *)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&v71, (uint64_t *)&v71)- 16);
  v71 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::anec::ReduceSum,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&v71, (uint64_t *)&v72)- 16);
  if ((_BYTE)v73)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v78, v72, 0);
    uint64_t v32 = v72;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v72);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v66, v32, NumElements);
    uint64_t v34 = 1;
    while (1)
    {
      BOOL v35 = v78 == v66 && v79 == v67;
      if (v35 && v80 == v68) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v78, (llvm::APInt *)&__p);
      if (v65 >= 0x41) {
        p_p = (unsigned int *)__p;
      }
      else {
        p_p = (unsigned int *)&__p;
      }
      uint64_t v37 = *p_p;
      uint64_t v38 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v70) + 8 * v37);
      if (v65 >= 0x41 && __p) {
        operator delete[](__p);
      }
      v34 *= v38;
      ++v80;
    }
    if (v34 != 1)
    {
      int v39 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v66, 1.0 / ((double)v34 + -1.0));
      uint64_t v40 = llvm::APFloatBase::IEEEdouble(v39);
      llvm::APFloat::Storage::Storage(&v79, &v66, v40);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v66);
      uint64_t v42 = llvm::APFloatBase::IEEEhalf(v41);
      LOBYTE(v66) = 0;
      llvm::APFloat::convert((uint64_t)&v78, v42, 1, &v66);
      v43 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v74) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v43) {
        goto LABEL_49;
      }
      uint64_t v44 = *v43;
      unint64_t v45 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v46 = *(unsigned int *)(v44 + 16);
      if (!v46) {
        goto LABEL_49;
      }
      uint64_t v47 = *(void **)(v44 + 8);
      uint64_t v48 = &v47[2 * v46];
      do
      {
        unint64_t v49 = v46 >> 1;
        uint64_t v50 = &v47[2 * (v46 >> 1)];
        unint64_t v52 = *v50;
        uint64_t v51 = v50 + 2;
        v46 += ~(v46 >> 1);
        if (v52 < v45) {
          uint64_t v47 = v51;
        }
        else {
          unint64_t v46 = v49;
        }
      }
      while (v46);
      if (v47 != v48 && *v47 == v45) {
        uint64_t v53 = v47[1];
      }
      else {
LABEL_49:
      }
        uint64_t v53 = 0;
      RankPromotionTypeForANE = (llvm::APFloatBase *)mlir::getRankPromotionTypeForANE((uint64_t)v43, v53);
      uint64_t v66 = (uint64_t *)mlir::DenseElementsAttr::get(RankPromotionTypeForANE, v55, (uint64_t)&v78, 1);
      __p = (void *)mlir::TypeConverter::convertType((uint64_t)v76, RankPromotionTypeForANE);
      uint64_t v63 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>((mlir::OpBuilder *)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&__p, &v66);
      long long v56 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(void *)(v74 + 24), (uint64_t *)&v71, &v63);
      v71 = (uint64_t *)((char *)v56 - 16);
      uint64_t v57 = v79;
      if (llvm::APFloatBase::PPCDoubleDouble(v56) == v57) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v79);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v79);
      }
    }
    uint64_t v59 = (unsigned int *)v74;
    v78 = v71;
    mlir::ValueRange::ValueRange(v75, (uint64_t)&v78, 1uLL);
    mlir::ConversionPatternRewriter::replaceOp(a4, v59, v75[0], v75[1]);
    goto LABEL_58;
  }
  v60 = (const void ****)std::__throw_bad_optional_access[abi:nn180100]();
  return llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionVarianceOp &>(mlir::mps::ReductionVarianceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(v60, v61);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionVarianceOp &>(mlir::mps::ReductionVarianceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)0>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)0>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMinOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::ReductionArgMinOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::ReductionArgMinOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 48);
  uint64_t v9 = *(void *)(a3 + 56);
  BOOL v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        BOOL v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMinOp &>(mlir::mps::ReductionArgMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v28;
        long long v29 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  uint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMinOp &>(mlir::mps::ReductionArgMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  v153 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v156 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v156 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v152[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v152[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v156 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v156;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v151 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v156 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v151 = 0;
    if (v23)
    {
      v158 = &v151;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v158, DefiningOp))
      {
        return 0;
      }
    }
  }
  v164 = (char *)&v166;
  uint64_t v165 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v156 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v151, v36, (uint64_t)&v164, 0, 0)) {
    goto LABEL_114;
  }
  unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  uint64_t v38 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v38;
  uint64_t v156 = v37;
  if (v37) {
    uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
  }
  RankPromotionTypeForANE = v38;
  uint64_t v156 = 0;
  uint64_t v149 = 0;
  uint64_t v150 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152);
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
  if (!v41
    || (unsigned int v42 = IndexFromDim,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152),
        unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
        !v45))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  unsigned int v46 = v44;
  uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v42);
  uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v46);
  unint64_t v49 = v164;
  uint64_t v50 = v165;
  v161 = &v163;
  uint64_t v162 = 0x100000000;
  if (v165 < 2)
  {
    int v51 = 0;
    if (!v165)
    {
      v145 = &v163;
      goto LABEL_50;
    }
    uint64_t v53 = 0;
    unint64_t v52 = &v163;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, &v163, v165, 8);
    int v51 = v162;
    unint64_t v52 = v161;
    uint64_t v53 = v162;
  }
  uint64_t v54 = &v52[v53];
  unint64_t v55 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v145 = v52;
  if (v55 < 7)
  {
    long long v56 = v49;
    do
    {
LABEL_47:
      uint64_t v65 = *(void *)v56;
      v56 += 8;
      *v54++ = v65;
    }
    while (v56 != &v49[8 * v50]);
    goto LABEL_50;
  }
  uint64_t v58 = &v52[v53];
  long long v56 = v49;
  if ((unint64_t)((char *)v58 - v49) < 0x20) {
    goto LABEL_47;
  }
  unint64_t v59 = v55 + 1;
  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v54 = (uint64_t *)((char *)v54 + v60);
  long long v56 = &v49[v60];
  uint64_t v61 = (long long *)(v49 + 16);
  uint64_t v62 = v58 + 2;
  uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v64 = *v61;
    *(v62 - 1) = *(v61 - 1);
    *uint64_t v62 = v64;
    v61 += 2;
    v62 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_47;
  }
LABEL_50:
  uint64_t v66 = (v51 + v50);
  LODWORD(v162) = v51 + v50;
  v158 = v160;
  memset_pattern16(v160, &unk_1810FE350, 0x10uLL);
  uint64_t v159 = 0x200000002;
  RankPromotionTypeForANE = v157;
  memset(v157, 0, sizeof(v157));
  uint64_t v156 = 0x400000004;
  unsigned __int8 v67 = (mlir::Builder *)(a4 + 8);
  uint64_t v68 = *((void *)v153 + 3);
  v154[0] = v66;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v154, 1, IntegerType, 0);
  v71 = v70;
  if (v70)
  {
    uint64_t v72 = a4;
    uint64_t v73 = *v70;
    unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v75 = *(unsigned int *)(v73 + 16);
    if (v75)
    {
      uint64_t v76 = *(void **)(v73 + 8);
      uint64_t v77 = &v76[2 * v75];
      do
      {
        unint64_t v78 = v75 >> 1;
        v79 = &v76[2 * (v75 >> 1)];
        unint64_t v81 = *v79;
        uint64_t v80 = v79 + 2;
        v75 += ~(v75 >> 1);
        if (v81 < v74) {
          uint64_t v76 = v80;
        }
        else {
          unint64_t v75 = v78;
        }
      }
      while (v75);
      a4 = v72;
      if (v76 != v77)
      {
        uint64_t v82 = v145;
        if (*v76 == v74) {
          uint64_t v83 = v76[1];
        }
        else {
          uint64_t v83 = 0;
        }
        goto LABEL_67;
      }
      uint64_t v83 = 0;
    }
    else
    {
      uint64_t v83 = 0;
      a4 = v72;
    }
    uint64_t v82 = v145;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = v145;
  }
LABEL_67:
  uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
  v154[0] = v47;
  v154[1] = v48;
  v167[0] = 2;
  uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v85 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v84, 0);
  v86 = v85;
  if (!v85) {
    goto LABEL_76;
  }
  uint64_t v87 = *v85;
  unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v89 = *(unsigned int *)(v87 + 16);
  if (!v89) {
    goto LABEL_76;
  }
  v90 = *(void **)(v87 + 8);
  uint64_t v91 = &v90[2 * v89];
  do
  {
    unint64_t v92 = v89 >> 1;
    v93 = &v90[2 * (v89 >> 1)];
    unint64_t v95 = *v93;
    uint64_t v94 = v93 + 2;
    v89 += ~(v89 >> 1);
    if (v95 < v88) {
      v90 = v94;
    }
    else {
      unint64_t v89 = v92;
    }
  }
  while (v89);
  if (v90 != v91 && *v90 == v88) {
    uint64_t v96 = v90[1];
  }
  else {
LABEL_76:
  }
    uint64_t v96 = 0;
  uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v154, 16, 8, 1, 0);
  uint64_t v97 = v158;
  uint64_t v98 = v159;
  v167[0] = v159;
  uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v99, 0);
  v101 = v100;
  if (!v100) {
    goto LABEL_86;
  }
  uint64_t v102 = *v100;
  unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v104 = *(unsigned int *)(v102 + 16);
  if (!v104) {
    goto LABEL_86;
  }
  v105 = *(void **)(v102 + 8);
  uint64_t v106 = &v105[2 * v104];
  do
  {
    unint64_t v107 = v104 >> 1;
    uint64_t v108 = &v105[2 * (v104 >> 1)];
    unint64_t v110 = *v108;
    v109 = v108 + 2;
    v104 += ~(v104 >> 1);
    if (v110 < v103) {
      v105 = v109;
    }
    else {
      unint64_t v104 = v107;
    }
  }
  while (v104);
  if (v105 != v106 && *v105 == v103) {
    uint64_t v111 = v105[1];
  }
  else {
LABEL_86:
  }
    uint64_t v111 = 0;
  uint64_t v146 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
  uint64_t v112 = RankPromotionTypeForANE;
  uint64_t v113 = v156;
  v167[0] = v156;
  uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v115 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v114, 0);
  v116 = v115;
  if (!v115) {
    goto LABEL_96;
  }
  uint64_t v117 = *v115;
  unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v119 = *(unsigned int *)(v117 + 16);
  if (!v119) {
    goto LABEL_96;
  }
  long long v120 = *(void **)(v117 + 8);
  uint64_t v121 = &v120[2 * v119];
  do
  {
    unint64_t v122 = v119 >> 1;
    v123 = &v120[2 * (v119 >> 1)];
    unint64_t v125 = *v123;
    v124 = v123 + 2;
    v119 += ~(v119 >> 1);
    if (v125 < v118) {
      long long v120 = v124;
    }
    else {
      unint64_t v119 = v122;
    }
  }
  while (v119);
  if (v120 != v121 && *v120 == v118) {
    uint64_t v126 = v120[1];
  }
  else {
LABEL_96:
  }
    uint64_t v126 = 0;
  v167[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
  uint64_t v150 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v150, &v148, &v149, &v147, &v146, v167)- 16;
  if (RankPromotionTypeForANE != v157) {
    free(RankPromotionTypeForANE);
  }
  if (v158 != v160) {
    free(v158);
  }
  if (v161 != &v163) {
    free(v161);
  }
  v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v127) {
    goto LABEL_112;
  }
  uint64_t v128 = *v127;
  unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v130 = *(unsigned int *)(v128 + 16);
  if (!v130) {
    goto LABEL_112;
  }
  v131 = *(void **)(v128 + 8);
  v132 = &v131[2 * v130];
  do
  {
    unint64_t v133 = v130 >> 1;
    v134 = &v131[2 * (v130 >> 1)];
    unint64_t v136 = *v134;
    v135 = v134 + 2;
    v130 += ~(v130 >> 1);
    if (v136 < v129) {
      v131 = v135;
    }
    else {
      unint64_t v130 = v133;
    }
  }
  while (v130);
  if (v131 != v132 && *v131 == v129) {
    uint64_t v137 = v131[1];
  }
  else {
LABEL_112:
  }
    uint64_t v137 = 0;
  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
  uint64_t v156 = v138;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v141 = v140;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v150);
  uint64_t v143 = mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
  if (v143 != (*(void *)(v150 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_114:
    uint64_t v57 = 0;
    goto LABEL_116;
  }
  uint64_t v57 = 1;
  mlir::ConversionPatternRewriter::replaceOp(a4, v153, (uint64_t)&v150, 1);
LABEL_116:
  if (v164 != (char *)&v166) {
    free(v164);
  }
  return v57;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMinOp &>(mlir::mps::ReductionArgMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v27[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.arg_min_max", (const unsigned __int8 *)0x10, Context);
  if (!v18)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"anec.arg_min_max";
    void v25[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v17);
  mlir::anec::ArgMinMax::build(a1, (uint64_t)v27, *a3, *a4, *a5, *a6, *a7, *a8);
  uint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ArgMinMax,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v20;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)1>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)1>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  v153 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v156 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v156 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v152[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v152[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v156 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v156;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v151 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v156 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v151 = 0;
    if (v23)
    {
      v158 = &v151;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v158, DefiningOp))
      {
        return 0;
      }
    }
  }
  v164 = (char *)&v166;
  uint64_t v165 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v156 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v151, v36, (uint64_t)&v164, 0, 0)) {
    goto LABEL_114;
  }
  unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  uint64_t v38 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v38;
  uint64_t v156 = v37;
  if (v37) {
    uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
  }
  RankPromotionTypeForANE = v38;
  uint64_t v156 = 0;
  uint64_t v149 = 0;
  uint64_t v150 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152);
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
  if (!v41
    || (unsigned int v42 = IndexFromDim,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152),
        unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
        !v45))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  unsigned int v46 = v44;
  uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v42);
  uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v46);
  unint64_t v49 = v164;
  uint64_t v50 = v165;
  v161 = &v163;
  uint64_t v162 = 0x100000000;
  if (v165 < 2)
  {
    int v51 = 0;
    if (!v165)
    {
      v145 = &v163;
      goto LABEL_50;
    }
    uint64_t v53 = 0;
    unint64_t v52 = &v163;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, &v163, v165, 8);
    int v51 = v162;
    unint64_t v52 = v161;
    uint64_t v53 = v162;
  }
  uint64_t v54 = &v52[v53];
  unint64_t v55 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v145 = v52;
  if (v55 < 7)
  {
    long long v56 = v49;
    do
    {
LABEL_47:
      uint64_t v65 = *(void *)v56;
      v56 += 8;
      *v54++ = v65;
    }
    while (v56 != &v49[8 * v50]);
    goto LABEL_50;
  }
  uint64_t v58 = &v52[v53];
  long long v56 = v49;
  if ((unint64_t)((char *)v58 - v49) < 0x20) {
    goto LABEL_47;
  }
  unint64_t v59 = v55 + 1;
  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v54 = (uint64_t *)((char *)v54 + v60);
  long long v56 = &v49[v60];
  uint64_t v61 = (long long *)(v49 + 16);
  uint64_t v62 = v58 + 2;
  uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v64 = *v61;
    *(v62 - 1) = *(v61 - 1);
    *uint64_t v62 = v64;
    v61 += 2;
    v62 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_47;
  }
LABEL_50:
  uint64_t v66 = (v51 + v50);
  LODWORD(v162) = v51 + v50;
  v158 = v160;
  memset_pattern16(v160, &unk_1810FE350, 0x10uLL);
  uint64_t v159 = 0x200000002;
  RankPromotionTypeForANE = v157;
  memset(v157, 0, sizeof(v157));
  uint64_t v156 = 0x400000004;
  unsigned __int8 v67 = (mlir::Builder *)(a4 + 8);
  uint64_t v68 = *((void *)v153 + 3);
  v154[0] = v66;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v154, 1, IntegerType, 0);
  v71 = v70;
  if (v70)
  {
    uint64_t v72 = a4;
    uint64_t v73 = *v70;
    unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v75 = *(unsigned int *)(v73 + 16);
    if (v75)
    {
      uint64_t v76 = *(void **)(v73 + 8);
      uint64_t v77 = &v76[2 * v75];
      do
      {
        unint64_t v78 = v75 >> 1;
        v79 = &v76[2 * (v75 >> 1)];
        unint64_t v81 = *v79;
        uint64_t v80 = v79 + 2;
        v75 += ~(v75 >> 1);
        if (v81 < v74) {
          uint64_t v76 = v80;
        }
        else {
          unint64_t v75 = v78;
        }
      }
      while (v75);
      a4 = v72;
      if (v76 != v77)
      {
        uint64_t v82 = v145;
        if (*v76 == v74) {
          uint64_t v83 = v76[1];
        }
        else {
          uint64_t v83 = 0;
        }
        goto LABEL_67;
      }
      uint64_t v83 = 0;
    }
    else
    {
      uint64_t v83 = 0;
      a4 = v72;
    }
    uint64_t v82 = v145;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = v145;
  }
LABEL_67:
  uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
  v154[0] = v47;
  v154[1] = v48;
  v167[0] = 2;
  uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v85 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v84, 0);
  v86 = v85;
  if (!v85) {
    goto LABEL_76;
  }
  uint64_t v87 = *v85;
  unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v89 = *(unsigned int *)(v87 + 16);
  if (!v89) {
    goto LABEL_76;
  }
  v90 = *(void **)(v87 + 8);
  uint64_t v91 = &v90[2 * v89];
  do
  {
    unint64_t v92 = v89 >> 1;
    v93 = &v90[2 * (v89 >> 1)];
    unint64_t v95 = *v93;
    uint64_t v94 = v93 + 2;
    v89 += ~(v89 >> 1);
    if (v95 < v88) {
      v90 = v94;
    }
    else {
      unint64_t v89 = v92;
    }
  }
  while (v89);
  if (v90 != v91 && *v90 == v88) {
    uint64_t v96 = v90[1];
  }
  else {
LABEL_76:
  }
    uint64_t v96 = 0;
  uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v154, 16, 8, 1, 0);
  uint64_t v97 = v158;
  uint64_t v98 = v159;
  v167[0] = v159;
  uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v99, 0);
  v101 = v100;
  if (!v100) {
    goto LABEL_86;
  }
  uint64_t v102 = *v100;
  unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v104 = *(unsigned int *)(v102 + 16);
  if (!v104) {
    goto LABEL_86;
  }
  v105 = *(void **)(v102 + 8);
  uint64_t v106 = &v105[2 * v104];
  do
  {
    unint64_t v107 = v104 >> 1;
    uint64_t v108 = &v105[2 * (v104 >> 1)];
    unint64_t v110 = *v108;
    v109 = v108 + 2;
    v104 += ~(v104 >> 1);
    if (v110 < v103) {
      v105 = v109;
    }
    else {
      unint64_t v104 = v107;
    }
  }
  while (v104);
  if (v105 != v106 && *v105 == v103) {
    uint64_t v111 = v105[1];
  }
  else {
LABEL_86:
  }
    uint64_t v111 = 0;
  uint64_t v146 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
  uint64_t v112 = RankPromotionTypeForANE;
  uint64_t v113 = v156;
  v167[0] = v156;
  uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v115 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v114, 0);
  v116 = v115;
  if (!v115) {
    goto LABEL_96;
  }
  uint64_t v117 = *v115;
  unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v119 = *(unsigned int *)(v117 + 16);
  if (!v119) {
    goto LABEL_96;
  }
  long long v120 = *(void **)(v117 + 8);
  uint64_t v121 = &v120[2 * v119];
  do
  {
    unint64_t v122 = v119 >> 1;
    v123 = &v120[2 * (v119 >> 1)];
    unint64_t v125 = *v123;
    v124 = v123 + 2;
    v119 += ~(v119 >> 1);
    if (v125 < v118) {
      long long v120 = v124;
    }
    else {
      unint64_t v119 = v122;
    }
  }
  while (v119);
  if (v120 != v121 && *v120 == v118) {
    uint64_t v126 = v120[1];
  }
  else {
LABEL_96:
  }
    uint64_t v126 = 0;
  v167[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
  uint64_t v150 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v150, &v148, &v149, &v147, &v146, v167)- 16;
  if (RankPromotionTypeForANE != v157) {
    free(RankPromotionTypeForANE);
  }
  if (v158 != v160) {
    free(v158);
  }
  if (v161 != &v163) {
    free(v161);
  }
  v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v127) {
    goto LABEL_112;
  }
  uint64_t v128 = *v127;
  unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v130 = *(unsigned int *)(v128 + 16);
  if (!v130) {
    goto LABEL_112;
  }
  v131 = *(void **)(v128 + 8);
  v132 = &v131[2 * v130];
  do
  {
    unint64_t v133 = v130 >> 1;
    v134 = &v131[2 * (v130 >> 1)];
    unint64_t v136 = *v134;
    v135 = v134 + 2;
    v130 += ~(v130 >> 1);
    if (v136 < v129) {
      v131 = v135;
    }
    else {
      unint64_t v130 = v133;
    }
  }
  while (v130);
  if (v131 != v132 && *v131 == v129) {
    uint64_t v137 = v131[1];
  }
  else {
LABEL_112:
  }
    uint64_t v137 = 0;
  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
  uint64_t v156 = v138;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v141 = v140;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v150);
  uint64_t v143 = mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
  if (v143 != (*(void *)(v150 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_114:
    uint64_t v57 = 0;
    goto LABEL_116;
  }
  uint64_t v57 = 1;
  mlir::ConversionPatternRewriter::replaceOp(a4, v153, (uint64_t)&v150, 1);
LABEL_116:
  if (v164 != (char *)&v166) {
    free(v164);
  }
  return v57;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v168[1] = *MEMORY[0x1E4F143B8];
  v154 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v157 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v157 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v153[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v153[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v157 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v157;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v152 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v157 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v152 = 0;
    if (v23)
    {
      uint64_t v159 = &v152;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v159, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v165 = (char *)&v167;
  uint64_t v166 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v157 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v152, v36, (uint64_t)&v165, 0, 0))
  {
    unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    uint64_t v38 = (void *)*((void *)this + 6);
    RankPromotionTypeForANE = v38;
    uint64_t v157 = v37;
    if (v37) {
      uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
    }
    RankPromotionTypeForANE = v38;
    uint64_t v157 = 0;
    uint64_t v150 = 0;
    uint64_t v151 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153);
    unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
    if (!v41
      || (unsigned int v42 = IndexFromDim,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153),
          unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
          !v45))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
    }
    unsigned int v46 = v44;
    uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v42);
    uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v46);
    unint64_t v49 = v165;
    uint64_t v50 = v166;
    uint64_t v162 = &v164;
    uint64_t v163 = 0x100000000;
    if (v166 < 2)
    {
      int v51 = 0;
      if (!v166)
      {
        uint64_t v146 = &v164;
        goto LABEL_51;
      }
      uint64_t v53 = 0;
      unint64_t v52 = &v164;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, &v164, v166, 8);
      int v51 = v163;
      unint64_t v52 = v162;
      uint64_t v53 = v163;
    }
    unint64_t v55 = &v52[v53];
    unint64_t v56 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v146 = v52;
    if (v56 >= 7)
    {
      uint64_t v58 = &v52[v53];
      uint64_t v57 = v49;
      if ((unint64_t)((char *)v58 - v49) >= 0x20)
      {
        unint64_t v59 = v56 + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v55 = (uint64_t *)((char *)v55 + v60);
        uint64_t v57 = &v49[v60];
        uint64_t v61 = (long long *)(v49 + 16);
        uint64_t v62 = v58 + 2;
        uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v64 = *v61;
          *(v62 - 1) = *(v61 - 1);
          *uint64_t v62 = v64;
          v61 += 2;
          v62 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          uint64_t v66 = (v51 + v50);
          LODWORD(v163) = v51 + v50;
          uint64_t v159 = v161;
          memset_pattern16(v161, &unk_1810FE350, 0x10uLL);
          uint64_t v160 = 0x200000002;
          RankPromotionTypeForANE = v158;
          memset(v158, 0, sizeof(v158));
          uint64_t v157 = 0x400000004;
          unsigned __int8 v67 = (mlir::Builder *)(a4 + 8);
          uint64_t v68 = *((void *)v154 + 3);
          v155[0] = v66;
          uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
          uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v155, 1, IntegerType, 0);
          v71 = v70;
          if (v70)
          {
            uint64_t v72 = a4;
            uint64_t v73 = *v70;
            unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v75 = *(unsigned int *)(v73 + 16);
            if (v75)
            {
              uint64_t v76 = *(void **)(v73 + 8);
              uint64_t v77 = &v76[2 * v75];
              do
              {
                unint64_t v78 = v75 >> 1;
                v79 = &v76[2 * (v75 >> 1)];
                unint64_t v81 = *v79;
                uint64_t v80 = v79 + 2;
                v75 += ~(v75 >> 1);
                if (v81 < v74) {
                  uint64_t v76 = v80;
                }
                else {
                  unint64_t v75 = v78;
                }
              }
              while (v75);
              a4 = v72;
              if (v76 != v77)
              {
                uint64_t v82 = v146;
                if (*v76 == v74) {
                  uint64_t v83 = v76[1];
                }
                else {
                  uint64_t v83 = 0;
                }
LABEL_68:
                uint64_t v149 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
                v155[0] = v47;
                v155[1] = v48;
                v168[0] = 2;
                uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v85 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v84, 0);
                v86 = v85;
                if (!v85) {
                  goto LABEL_77;
                }
                uint64_t v87 = *v85;
                unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v89 = *(unsigned int *)(v87 + 16);
                if (!v89) {
                  goto LABEL_77;
                }
                v90 = *(void **)(v87 + 8);
                uint64_t v91 = &v90[2 * v89];
                do
                {
                  unint64_t v92 = v89 >> 1;
                  v93 = &v90[2 * (v89 >> 1)];
                  unint64_t v95 = *v93;
                  uint64_t v94 = v93 + 2;
                  v89 += ~(v89 >> 1);
                  if (v95 < v88) {
                    v90 = v94;
                  }
                  else {
                    unint64_t v89 = v92;
                  }
                }
                while (v89);
                if (v90 != v91 && *v90 == v88) {
                  uint64_t v96 = v90[1];
                }
                else {
LABEL_77:
                }
                  uint64_t v96 = 0;
                uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v155, 16, 8, 1, 0);
                uint64_t v97 = v159;
                uint64_t v98 = v160;
                v168[0] = v160;
                uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v99, 0);
                v101 = v100;
                if (!v100) {
                  goto LABEL_87;
                }
                uint64_t v102 = *v100;
                unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v104 = *(unsigned int *)(v102 + 16);
                if (!v104) {
                  goto LABEL_87;
                }
                v105 = *(void **)(v102 + 8);
                uint64_t v106 = &v105[2 * v104];
                do
                {
                  unint64_t v107 = v104 >> 1;
                  uint64_t v108 = &v105[2 * (v104 >> 1)];
                  unint64_t v110 = *v108;
                  v109 = v108 + 2;
                  v104 += ~(v104 >> 1);
                  if (v110 < v103) {
                    v105 = v109;
                  }
                  else {
                    unint64_t v104 = v107;
                  }
                }
                while (v104);
                if (v105 != v106 && *v105 == v103) {
                  uint64_t v111 = v105[1];
                }
                else {
LABEL_87:
                }
                  uint64_t v111 = 0;
                uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
                uint64_t v112 = RankPromotionTypeForANE;
                uint64_t v113 = v157;
                v168[0] = v157;
                uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v115 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v114, 0);
                v116 = v115;
                if (!v115) {
                  goto LABEL_97;
                }
                uint64_t v117 = *v115;
                unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v119 = *(unsigned int *)(v117 + 16);
                if (!v119) {
                  goto LABEL_97;
                }
                long long v120 = *(void **)(v117 + 8);
                uint64_t v121 = &v120[2 * v119];
                do
                {
                  unint64_t v122 = v119 >> 1;
                  v123 = &v120[2 * (v119 >> 1)];
                  unint64_t v125 = *v123;
                  v124 = v123 + 2;
                  v119 += ~(v119 >> 1);
                  if (v125 < v118) {
                    long long v120 = v124;
                  }
                  else {
                    unint64_t v119 = v122;
                  }
                }
                while (v119);
                if (v120 != v121 && *v120 == v118) {
                  uint64_t v126 = v120[1];
                }
                else {
LABEL_97:
                }
                  uint64_t v126 = 0;
                v168[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
                uint64_t v151 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v151, &v149, &v150, &v148, &v147, v168)- 16;
                if (RankPromotionTypeForANE != v158) {
                  free(RankPromotionTypeForANE);
                }
                if (v159 != v161) {
                  free(v159);
                }
                if (v162 != &v164) {
                  free(v162);
                }
                v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
                if (!v127) {
                  goto LABEL_113;
                }
                uint64_t v128 = *v127;
                unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v130 = *(unsigned int *)(v128 + 16);
                if (!v130) {
                  goto LABEL_113;
                }
                v131 = *(void **)(v128 + 8);
                v132 = &v131[2 * v130];
                do
                {
                  unint64_t v133 = v130 >> 1;
                  v134 = &v131[2 * (v130 >> 1)];
                  unint64_t v136 = *v134;
                  v135 = v134 + 2;
                  v130 += ~(v130 >> 1);
                  if (v136 < v129) {
                    v131 = v135;
                  }
                  else {
                    unint64_t v130 = v133;
                  }
                }
                while (v130);
                if (v131 != v132 && *v131 == v129) {
                  uint64_t v137 = v131[1];
                }
                else {
LABEL_113:
                }
                  uint64_t v137 = 0;
                RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
                uint64_t v157 = v138;
                uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                v141 = v140;
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v151);
                uint64_t v159 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
                uint64_t v143 = v154;
                if (v159 == (void *)(*(void *)(v151 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  mlir::ConversionPatternRewriter::replaceOp(a4, v154, (uint64_t)&v151, 1);
                }
                else
                {
                  v144 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v67, *((void *)v154 + 3), (uint64_t *)&v159, &v151);
                  (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v143, v144);
                }
                uint64_t v54 = 1;
                goto LABEL_118;
              }
              uint64_t v83 = 0;
            }
            else
            {
              uint64_t v83 = 0;
              a4 = v72;
            }
            uint64_t v82 = v146;
            goto LABEL_68;
          }
          uint64_t v83 = 0;
          uint64_t v82 = v146;
          goto LABEL_68;
        }
      }
    }
    else
    {
      uint64_t v57 = v49;
    }
    do
    {
      uint64_t v65 = *(void *)v57;
      v57 += 8;
      *v55++ = v65;
    }
    while (v57 != &v49[8 * v50]);
    goto LABEL_51;
  }
  uint64_t v54 = 0;
LABEL_118:
  if (v165 != (char *)&v167) {
    free(v165);
  }
  return v54;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v168[1] = *MEMORY[0x1E4F143B8];
  v154 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v157 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v157 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v153[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v153[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v157 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v157;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v152 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v157 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v152 = 0;
    if (v23)
    {
      uint64_t v159 = &v152;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v159, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v165 = (char *)&v167;
  uint64_t v166 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v157 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v152, v36, (uint64_t)&v165, 0, 0))
  {
    unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    uint64_t v38 = (void *)*((void *)this + 6);
    RankPromotionTypeForANE = v38;
    uint64_t v157 = v37;
    if (v37) {
      uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
    }
    RankPromotionTypeForANE = v38;
    uint64_t v157 = 0;
    uint64_t v150 = 0;
    uint64_t v151 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153);
    unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
    if (!v41
      || (unsigned int v42 = IndexFromDim,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153),
          unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
          !v45))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
    }
    unsigned int v46 = v44;
    uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v42);
    uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v46);
    unint64_t v49 = v165;
    uint64_t v50 = v166;
    uint64_t v162 = &v164;
    uint64_t v163 = 0x100000000;
    if (v166 < 2)
    {
      int v51 = 0;
      if (!v166)
      {
        uint64_t v146 = &v164;
        goto LABEL_51;
      }
      uint64_t v53 = 0;
      unint64_t v52 = &v164;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, &v164, v166, 8);
      int v51 = v163;
      unint64_t v52 = v162;
      uint64_t v53 = v163;
    }
    unint64_t v55 = &v52[v53];
    unint64_t v56 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v146 = v52;
    if (v56 >= 7)
    {
      uint64_t v58 = &v52[v53];
      uint64_t v57 = v49;
      if ((unint64_t)((char *)v58 - v49) >= 0x20)
      {
        unint64_t v59 = v56 + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v55 = (uint64_t *)((char *)v55 + v60);
        uint64_t v57 = &v49[v60];
        uint64_t v61 = (long long *)(v49 + 16);
        uint64_t v62 = v58 + 2;
        uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v64 = *v61;
          *(v62 - 1) = *(v61 - 1);
          *uint64_t v62 = v64;
          v61 += 2;
          v62 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          uint64_t v66 = (v51 + v50);
          LODWORD(v163) = v51 + v50;
          uint64_t v159 = v161;
          memset_pattern16(v161, &unk_1810FE350, 0x10uLL);
          uint64_t v160 = 0x200000002;
          RankPromotionTypeForANE = v158;
          memset(v158, 0, sizeof(v158));
          uint64_t v157 = 0x400000004;
          unsigned __int8 v67 = (mlir::Builder *)(a4 + 8);
          uint64_t v68 = *((void *)v154 + 3);
          v155[0] = v66;
          uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
          uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v155, 1, IntegerType, 0);
          v71 = v70;
          if (v70)
          {
            uint64_t v72 = a4;
            uint64_t v73 = *v70;
            unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v75 = *(unsigned int *)(v73 + 16);
            if (v75)
            {
              uint64_t v76 = *(void **)(v73 + 8);
              uint64_t v77 = &v76[2 * v75];
              do
              {
                unint64_t v78 = v75 >> 1;
                v79 = &v76[2 * (v75 >> 1)];
                unint64_t v81 = *v79;
                uint64_t v80 = v79 + 2;
                v75 += ~(v75 >> 1);
                if (v81 < v74) {
                  uint64_t v76 = v80;
                }
                else {
                  unint64_t v75 = v78;
                }
              }
              while (v75);
              a4 = v72;
              if (v76 != v77)
              {
                uint64_t v82 = v146;
                if (*v76 == v74) {
                  uint64_t v83 = v76[1];
                }
                else {
                  uint64_t v83 = 0;
                }
LABEL_68:
                uint64_t v149 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
                v155[0] = v47;
                v155[1] = v48;
                v168[0] = 2;
                uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v85 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v84, 0);
                v86 = v85;
                if (!v85) {
                  goto LABEL_77;
                }
                uint64_t v87 = *v85;
                unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v89 = *(unsigned int *)(v87 + 16);
                if (!v89) {
                  goto LABEL_77;
                }
                v90 = *(void **)(v87 + 8);
                uint64_t v91 = &v90[2 * v89];
                do
                {
                  unint64_t v92 = v89 >> 1;
                  v93 = &v90[2 * (v89 >> 1)];
                  unint64_t v95 = *v93;
                  uint64_t v94 = v93 + 2;
                  v89 += ~(v89 >> 1);
                  if (v95 < v88) {
                    v90 = v94;
                  }
                  else {
                    unint64_t v89 = v92;
                  }
                }
                while (v89);
                if (v90 != v91 && *v90 == v88) {
                  uint64_t v96 = v90[1];
                }
                else {
LABEL_77:
                }
                  uint64_t v96 = 0;
                uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v155, 16, 8, 1, 0);
                uint64_t v97 = v159;
                uint64_t v98 = v160;
                v168[0] = v160;
                uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v99, 0);
                v101 = v100;
                if (!v100) {
                  goto LABEL_87;
                }
                uint64_t v102 = *v100;
                unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v104 = *(unsigned int *)(v102 + 16);
                if (!v104) {
                  goto LABEL_87;
                }
                v105 = *(void **)(v102 + 8);
                uint64_t v106 = &v105[2 * v104];
                do
                {
                  unint64_t v107 = v104 >> 1;
                  uint64_t v108 = &v105[2 * (v104 >> 1)];
                  unint64_t v110 = *v108;
                  v109 = v108 + 2;
                  v104 += ~(v104 >> 1);
                  if (v110 < v103) {
                    v105 = v109;
                  }
                  else {
                    unint64_t v104 = v107;
                  }
                }
                while (v104);
                if (v105 != v106 && *v105 == v103) {
                  uint64_t v111 = v105[1];
                }
                else {
LABEL_87:
                }
                  uint64_t v111 = 0;
                uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
                uint64_t v112 = RankPromotionTypeForANE;
                uint64_t v113 = v157;
                v168[0] = v157;
                uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v115 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v114, 0);
                v116 = v115;
                if (!v115) {
                  goto LABEL_97;
                }
                uint64_t v117 = *v115;
                unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v119 = *(unsigned int *)(v117 + 16);
                if (!v119) {
                  goto LABEL_97;
                }
                long long v120 = *(void **)(v117 + 8);
                uint64_t v121 = &v120[2 * v119];
                do
                {
                  unint64_t v122 = v119 >> 1;
                  v123 = &v120[2 * (v119 >> 1)];
                  unint64_t v125 = *v123;
                  v124 = v123 + 2;
                  v119 += ~(v119 >> 1);
                  if (v125 < v118) {
                    long long v120 = v124;
                  }
                  else {
                    unint64_t v119 = v122;
                  }
                }
                while (v119);
                if (v120 != v121 && *v120 == v118) {
                  uint64_t v126 = v120[1];
                }
                else {
LABEL_97:
                }
                  uint64_t v126 = 0;
                v168[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
                uint64_t v151 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v151, &v149, &v150, &v148, &v147, v168)- 16;
                if (RankPromotionTypeForANE != v158) {
                  free(RankPromotionTypeForANE);
                }
                if (v159 != v161) {
                  free(v159);
                }
                if (v162 != &v164) {
                  free(v162);
                }
                v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
                if (!v127) {
                  goto LABEL_113;
                }
                uint64_t v128 = *v127;
                unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v130 = *(unsigned int *)(v128 + 16);
                if (!v130) {
                  goto LABEL_113;
                }
                v131 = *(void **)(v128 + 8);
                v132 = &v131[2 * v130];
                do
                {
                  unint64_t v133 = v130 >> 1;
                  v134 = &v131[2 * (v130 >> 1)];
                  unint64_t v136 = *v134;
                  v135 = v134 + 2;
                  v130 += ~(v130 >> 1);
                  if (v136 < v129) {
                    v131 = v135;
                  }
                  else {
                    unint64_t v130 = v133;
                  }
                }
                while (v130);
                if (v131 != v132 && *v131 == v129) {
                  uint64_t v137 = v131[1];
                }
                else {
LABEL_113:
                }
                  uint64_t v137 = 0;
                RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
                uint64_t v157 = v138;
                uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                v141 = v140;
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v151);
                uint64_t v159 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
                uint64_t v143 = v154;
                if (v159 == (void *)(*(void *)(v151 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  mlir::ConversionPatternRewriter::replaceOp(a4, v154, (uint64_t)&v151, 1);
                }
                else
                {
                  v144 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v67, *((void *)v154 + 3), (uint64_t *)&v159, &v151);
                  (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v143, v144);
                }
                uint64_t v54 = 1;
                goto LABEL_118;
              }
              uint64_t v83 = 0;
            }
            else
            {
              uint64_t v83 = 0;
              a4 = v72;
            }
            uint64_t v82 = v146;
            goto LABEL_68;
          }
          uint64_t v83 = 0;
          uint64_t v82 = v146;
          goto LABEL_68;
        }
      }
    }
    else
    {
      uint64_t v57 = v49;
    }
    do
    {
      uint64_t v65 = *(void *)v57;
      v57 += 8;
      *v55++ = v65;
    }
    while (v57 != &v49[8 * v50]);
    goto LABEL_51;
  }
  uint64_t v54 = 0;
LABEL_118:
  if (v165 != (char *)&v167) {
    free(v165);
  }
  return v54;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    uint64_t v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.global_arg_min_max", (const unsigned __int8 *)0x17, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.global_arg_min_max";
    v19[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::GlobalArgMinMax::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GlobalArgMinMax,void>::id) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  char v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  __int16 v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    __int16 v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMinOp,(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  char v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  __int16 v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    __int16 v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::ReductionArgMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::ReductionArgMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 48);
  uint64_t v9 = *(void *)(a3 + 56);
  unint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v28;
        long long v29 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  unint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  v153 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v156 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v156 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v152[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v152[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v156 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v156;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    uint64_t v151 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v156 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v151 = 0;
    if (v23)
    {
      v158 = &v151;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v158, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v164 = (char *)&v166;
  uint64_t v165 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v156 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v151, v36, (uint64_t)&v164, 0, 0)) {
    goto LABEL_114;
  }
  unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  uint64_t v38 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v38;
  uint64_t v156 = v37;
  if (v37) {
    uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
  }
  RankPromotionTypeForANE = v38;
  uint64_t v156 = 0;
  uint64_t v149 = 1;
  uint64_t v150 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152);
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
  if (!v41
    || (unsigned int v42 = IndexFromDim,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152),
        unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
        !v45))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  unsigned int v46 = v44;
  uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v42);
  uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v46);
  uint64_t v49 = v164;
  uint64_t v50 = v165;
  v161 = &v163;
  uint64_t v162 = 0x100000000;
  if (v165 < 2)
  {
    int v51 = 0;
    if (!v165)
    {
      v145 = &v163;
      goto LABEL_50;
    }
    uint64_t v53 = 0;
    unint64_t v52 = &v163;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, &v163, v165, 8);
    int v51 = v162;
    unint64_t v52 = v161;
    uint64_t v53 = v162;
  }
  uint64_t v54 = &v52[v53];
  unint64_t v55 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v145 = v52;
  if (v55 < 7)
  {
    uint64_t v56 = v49;
    do
    {
LABEL_47:
      uint64_t v65 = *(void *)v56;
      v56 += 8;
      *v54++ = v65;
    }
    while (v56 != &v49[8 * v50]);
    goto LABEL_50;
  }
  uint64_t v58 = &v52[v53];
  uint64_t v56 = v49;
  if ((unint64_t)((char *)v58 - v49) < 0x20) {
    goto LABEL_47;
  }
  unint64_t v59 = v55 + 1;
  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v54 = (uint64_t *)((char *)v54 + v60);
  uint64_t v56 = &v49[v60];
  uint64_t v61 = (long long *)(v49 + 16);
  uint64_t v62 = v58 + 2;
  uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v64 = *v61;
    *(v62 - 1) = *(v61 - 1);
    *uint64_t v62 = v64;
    v61 += 2;
    v62 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_47;
  }
LABEL_50:
  uint64_t v66 = (v51 + v50);
  LODWORD(v162) = v51 + v50;
  v158 = v160;
  memset_pattern16(v160, &unk_1810FE350, 0x10uLL);
  uint64_t v159 = 0x200000002;
  RankPromotionTypeForANE = v157;
  memset(v157, 0, sizeof(v157));
  uint64_t v156 = 0x400000004;
  uint64_t v67 = (mlir::Builder *)(a4 + 8);
  uint64_t v68 = *((void *)v153 + 3);
  v154[0] = v66;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v154, 1, IntegerType, 0);
  v71 = v70;
  if (v70)
  {
    uint64_t v72 = a4;
    uint64_t v73 = *v70;
    unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v75 = *(unsigned int *)(v73 + 16);
    if (v75)
    {
      uint64_t v76 = *(void **)(v73 + 8);
      uint64_t v77 = &v76[2 * v75];
      do
      {
        unint64_t v78 = v75 >> 1;
        v79 = &v76[2 * (v75 >> 1)];
        unint64_t v81 = *v79;
        uint64_t v80 = v79 + 2;
        v75 += ~(v75 >> 1);
        if (v81 < v74) {
          uint64_t v76 = v80;
        }
        else {
          unint64_t v75 = v78;
        }
      }
      while (v75);
      a4 = v72;
      if (v76 != v77)
      {
        uint64_t v82 = v145;
        if (*v76 == v74) {
          uint64_t v83 = v76[1];
        }
        else {
          uint64_t v83 = 0;
        }
        goto LABEL_67;
      }
      uint64_t v83 = 0;
    }
    else
    {
      uint64_t v83 = 0;
      a4 = v72;
    }
    uint64_t v82 = v145;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = v145;
  }
LABEL_67:
  uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
  v154[0] = v47;
  v154[1] = v48;
  v167[0] = 2;
  uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v85 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v84, 0);
  v86 = v85;
  if (!v85) {
    goto LABEL_76;
  }
  uint64_t v87 = *v85;
  unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v89 = *(unsigned int *)(v87 + 16);
  if (!v89) {
    goto LABEL_76;
  }
  v90 = *(void **)(v87 + 8);
  uint64_t v91 = &v90[2 * v89];
  do
  {
    unint64_t v92 = v89 >> 1;
    v93 = &v90[2 * (v89 >> 1)];
    unint64_t v95 = *v93;
    uint64_t v94 = v93 + 2;
    v89 += ~(v89 >> 1);
    if (v95 < v88) {
      v90 = v94;
    }
    else {
      unint64_t v89 = v92;
    }
  }
  while (v89);
  if (v90 != v91 && *v90 == v88) {
    uint64_t v96 = v90[1];
  }
  else {
LABEL_76:
  }
    uint64_t v96 = 0;
  uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v154, 16, 8, 1, 0);
  uint64_t v97 = v158;
  uint64_t v98 = v159;
  v167[0] = v159;
  uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v99, 0);
  v101 = v100;
  if (!v100) {
    goto LABEL_86;
  }
  uint64_t v102 = *v100;
  unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v104 = *(unsigned int *)(v102 + 16);
  if (!v104) {
    goto LABEL_86;
  }
  v105 = *(void **)(v102 + 8);
  uint64_t v106 = &v105[2 * v104];
  do
  {
    unint64_t v107 = v104 >> 1;
    uint64_t v108 = &v105[2 * (v104 >> 1)];
    unint64_t v110 = *v108;
    v109 = v108 + 2;
    v104 += ~(v104 >> 1);
    if (v110 < v103) {
      v105 = v109;
    }
    else {
      unint64_t v104 = v107;
    }
  }
  while (v104);
  if (v105 != v106 && *v105 == v103) {
    uint64_t v111 = v105[1];
  }
  else {
LABEL_86:
  }
    uint64_t v111 = 0;
  uint64_t v146 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
  uint64_t v112 = RankPromotionTypeForANE;
  uint64_t v113 = v156;
  v167[0] = v156;
  uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v115 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v114, 0);
  v116 = v115;
  if (!v115) {
    goto LABEL_96;
  }
  uint64_t v117 = *v115;
  unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v119 = *(unsigned int *)(v117 + 16);
  if (!v119) {
    goto LABEL_96;
  }
  long long v120 = *(void **)(v117 + 8);
  uint64_t v121 = &v120[2 * v119];
  do
  {
    unint64_t v122 = v119 >> 1;
    v123 = &v120[2 * (v119 >> 1)];
    unint64_t v125 = *v123;
    v124 = v123 + 2;
    v119 += ~(v119 >> 1);
    if (v125 < v118) {
      long long v120 = v124;
    }
    else {
      unint64_t v119 = v122;
    }
  }
  while (v119);
  if (v120 != v121 && *v120 == v118) {
    uint64_t v126 = v120[1];
  }
  else {
LABEL_96:
  }
    uint64_t v126 = 0;
  v167[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
  uint64_t v150 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v150, &v148, &v149, &v147, &v146, v167)- 16;
  if (RankPromotionTypeForANE != v157) {
    free(RankPromotionTypeForANE);
  }
  if (v158 != v160) {
    free(v158);
  }
  if (v161 != &v163) {
    free(v161);
  }
  v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v127) {
    goto LABEL_112;
  }
  uint64_t v128 = *v127;
  unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v130 = *(unsigned int *)(v128 + 16);
  if (!v130) {
    goto LABEL_112;
  }
  v131 = *(void **)(v128 + 8);
  v132 = &v131[2 * v130];
  do
  {
    unint64_t v133 = v130 >> 1;
    v134 = &v131[2 * (v130 >> 1)];
    unint64_t v136 = *v134;
    v135 = v134 + 2;
    v130 += ~(v130 >> 1);
    if (v136 < v129) {
      v131 = v135;
    }
    else {
      unint64_t v130 = v133;
    }
  }
  while (v130);
  if (v131 != v132 && *v131 == v129) {
    uint64_t v137 = v131[1];
  }
  else {
LABEL_112:
  }
    uint64_t v137 = 0;
  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
  uint64_t v156 = v138;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v141 = v140;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v150);
  uint64_t v143 = mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
  if (v143 != (*(void *)(v150 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_114:
    uint64_t v57 = 0;
    goto LABEL_116;
  }
  uint64_t v57 = 1;
  mlir::ConversionPatternRewriter::replaceOp(a4, v153, (uint64_t)&v150, 1);
LABEL_116:
  if (v164 != (char *)&v166) {
    free(v164);
  }
  return v57;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionArgMaxOp &>(mlir::mps::ReductionArgMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  v153 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v156 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v156 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v152[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v152[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v156 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v156;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    uint64_t v151 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v156 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v151 = 0;
    if (v23)
    {
      v158 = &v151;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v158, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v164 = (char *)&v166;
  uint64_t v165 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v156 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (!mlir::getPositivePromotedAxes(v151, v36, (uint64_t)&v164, 0, 0)) {
    goto LABEL_114;
  }
  unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  uint64_t v38 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v38;
  uint64_t v156 = v37;
  if (v37) {
    uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
  }
  RankPromotionTypeForANE = v38;
  uint64_t v156 = 0;
  uint64_t v149 = 1;
  uint64_t v150 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152);
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
  if (!v41
    || (unsigned int v42 = IndexFromDim,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152),
        unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
        !v45))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  unsigned int v46 = v44;
  uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v42);
  uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v152) + 8 * v46);
  uint64_t v49 = v164;
  uint64_t v50 = v165;
  v161 = &v163;
  uint64_t v162 = 0x100000000;
  if (v165 < 2)
  {
    int v51 = 0;
    if (!v165)
    {
      v145 = &v163;
      goto LABEL_50;
    }
    uint64_t v53 = 0;
    unint64_t v52 = &v163;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, &v163, v165, 8);
    int v51 = v162;
    unint64_t v52 = v161;
    uint64_t v53 = v162;
  }
  uint64_t v54 = &v52[v53];
  unint64_t v55 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v145 = v52;
  if (v55 < 7)
  {
    uint64_t v56 = v49;
    do
    {
LABEL_47:
      uint64_t v65 = *(void *)v56;
      v56 += 8;
      *v54++ = v65;
    }
    while (v56 != &v49[8 * v50]);
    goto LABEL_50;
  }
  uint64_t v58 = &v52[v53];
  uint64_t v56 = v49;
  if ((unint64_t)((char *)v58 - v49) < 0x20) {
    goto LABEL_47;
  }
  unint64_t v59 = v55 + 1;
  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v54 = (uint64_t *)((char *)v54 + v60);
  uint64_t v56 = &v49[v60];
  uint64_t v61 = (long long *)(v49 + 16);
  uint64_t v62 = v58 + 2;
  uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v64 = *v61;
    *(v62 - 1) = *(v61 - 1);
    *uint64_t v62 = v64;
    v61 += 2;
    v62 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_47;
  }
LABEL_50:
  uint64_t v66 = (v51 + v50);
  LODWORD(v162) = v51 + v50;
  v158 = v160;
  memset_pattern16(v160, &unk_1810FE350, 0x10uLL);
  uint64_t v159 = 0x200000002;
  RankPromotionTypeForANE = v157;
  memset(v157, 0, sizeof(v157));
  uint64_t v156 = 0x400000004;
  uint64_t v67 = (mlir::Builder *)(a4 + 8);
  uint64_t v68 = *((void *)v153 + 3);
  v154[0] = v66;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v154, 1, IntegerType, 0);
  v71 = v70;
  if (v70)
  {
    uint64_t v72 = a4;
    uint64_t v73 = *v70;
    unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v75 = *(unsigned int *)(v73 + 16);
    if (v75)
    {
      uint64_t v76 = *(void **)(v73 + 8);
      uint64_t v77 = &v76[2 * v75];
      do
      {
        unint64_t v78 = v75 >> 1;
        v79 = &v76[2 * (v75 >> 1)];
        unint64_t v81 = *v79;
        uint64_t v80 = v79 + 2;
        v75 += ~(v75 >> 1);
        if (v81 < v74) {
          uint64_t v76 = v80;
        }
        else {
          unint64_t v75 = v78;
        }
      }
      while (v75);
      a4 = v72;
      if (v76 != v77)
      {
        uint64_t v82 = v145;
        if (*v76 == v74) {
          uint64_t v83 = v76[1];
        }
        else {
          uint64_t v83 = 0;
        }
        goto LABEL_67;
      }
      uint64_t v83 = 0;
    }
    else
    {
      uint64_t v83 = 0;
      a4 = v72;
    }
    uint64_t v82 = v145;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = v145;
  }
LABEL_67:
  uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
  v154[0] = v47;
  v154[1] = v48;
  v167[0] = 2;
  uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v85 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v84, 0);
  v86 = v85;
  if (!v85) {
    goto LABEL_76;
  }
  uint64_t v87 = *v85;
  unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v89 = *(unsigned int *)(v87 + 16);
  if (!v89) {
    goto LABEL_76;
  }
  v90 = *(void **)(v87 + 8);
  uint64_t v91 = &v90[2 * v89];
  do
  {
    unint64_t v92 = v89 >> 1;
    v93 = &v90[2 * (v89 >> 1)];
    unint64_t v95 = *v93;
    uint64_t v94 = v93 + 2;
    v89 += ~(v89 >> 1);
    if (v95 < v88) {
      v90 = v94;
    }
    else {
      unint64_t v89 = v92;
    }
  }
  while (v89);
  if (v90 != v91 && *v90 == v88) {
    uint64_t v96 = v90[1];
  }
  else {
LABEL_76:
  }
    uint64_t v96 = 0;
  uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v154, 16, 8, 1, 0);
  uint64_t v97 = v158;
  uint64_t v98 = v159;
  v167[0] = v159;
  uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v99, 0);
  v101 = v100;
  if (!v100) {
    goto LABEL_86;
  }
  uint64_t v102 = *v100;
  unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v104 = *(unsigned int *)(v102 + 16);
  if (!v104) {
    goto LABEL_86;
  }
  v105 = *(void **)(v102 + 8);
  uint64_t v106 = &v105[2 * v104];
  do
  {
    unint64_t v107 = v104 >> 1;
    uint64_t v108 = &v105[2 * (v104 >> 1)];
    unint64_t v110 = *v108;
    v109 = v108 + 2;
    v104 += ~(v104 >> 1);
    if (v110 < v103) {
      v105 = v109;
    }
    else {
      unint64_t v104 = v107;
    }
  }
  while (v104);
  if (v105 != v106 && *v105 == v103) {
    uint64_t v111 = v105[1];
  }
  else {
LABEL_86:
  }
    uint64_t v111 = 0;
  uint64_t v146 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
  uint64_t v112 = RankPromotionTypeForANE;
  uint64_t v113 = v156;
  v167[0] = v156;
  uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
  v115 = (void *)mlir::RankedTensorType::get((uint64_t)v167, 1, v114, 0);
  v116 = v115;
  if (!v115) {
    goto LABEL_96;
  }
  uint64_t v117 = *v115;
  unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v119 = *(unsigned int *)(v117 + 16);
  if (!v119) {
    goto LABEL_96;
  }
  long long v120 = *(void **)(v117 + 8);
  uint64_t v121 = &v120[2 * v119];
  do
  {
    unint64_t v122 = v119 >> 1;
    v123 = &v120[2 * (v119 >> 1)];
    unint64_t v125 = *v123;
    v124 = v123 + 2;
    v119 += ~(v119 >> 1);
    if (v125 < v118) {
      long long v120 = v124;
    }
    else {
      unint64_t v119 = v122;
    }
  }
  while (v119);
  if (v120 != v121 && *v120 == v118) {
    uint64_t v126 = v120[1];
  }
  else {
LABEL_96:
  }
    uint64_t v126 = 0;
  v167[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
  uint64_t v150 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v150, &v148, &v149, &v147, &v146, v167)- 16;
  if (RankPromotionTypeForANE != v157) {
    free(RankPromotionTypeForANE);
  }
  if (v158 != v160) {
    free(v158);
  }
  if (v161 != &v163) {
    free(v161);
  }
  v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v153) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v127) {
    goto LABEL_112;
  }
  uint64_t v128 = *v127;
  unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v130 = *(unsigned int *)(v128 + 16);
  if (!v130) {
    goto LABEL_112;
  }
  v131 = *(void **)(v128 + 8);
  v132 = &v131[2 * v130];
  do
  {
    unint64_t v133 = v130 >> 1;
    v134 = &v131[2 * (v130 >> 1)];
    unint64_t v136 = *v134;
    v135 = v134 + 2;
    v130 += ~(v130 >> 1);
    if (v136 < v129) {
      v131 = v135;
    }
    else {
      unint64_t v130 = v133;
    }
  }
  while (v130);
  if (v131 != v132 && *v131 == v129) {
    uint64_t v137 = v131[1];
  }
  else {
LABEL_112:
  }
    uint64_t v137 = 0;
  RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
  uint64_t v156 = v138;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  v141 = v140;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v150);
  uint64_t v143 = mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
  if (v143 != (*(void *)(v150 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_114:
    uint64_t v57 = 0;
    goto LABEL_116;
  }
  uint64_t v57 = 1;
  mlir::ConversionPatternRewriter::replaceOp(a4, v153, (uint64_t)&v150, 1);
LABEL_116:
  if (v164 != (char *)&v166) {
    free(v164);
  }
  return v57;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v168[1] = *MEMORY[0x1E4F143B8];
  v154 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v157 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v157 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v153[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v153[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v157 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v157;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v152 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v157 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v152 = 0;
    if (v23)
    {
      uint64_t v159 = &v152;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v159, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v165 = (char *)&v167;
  uint64_t v166 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v157 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v152, v36, (uint64_t)&v165, 0, 0))
  {
    unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    uint64_t v38 = (void *)*((void *)this + 6);
    RankPromotionTypeForANE = v38;
    uint64_t v157 = v37;
    if (v37) {
      uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
    }
    RankPromotionTypeForANE = v38;
    uint64_t v157 = 0;
    uint64_t v150 = 1;
    uint64_t v151 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153);
    unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
    if (!v41
      || (unsigned int v42 = IndexFromDim,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153),
          unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
          !v45))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
    }
    unsigned int v46 = v44;
    uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v42);
    uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v46);
    uint64_t v49 = v165;
    uint64_t v50 = v166;
    uint64_t v162 = &v164;
    uint64_t v163 = 0x100000000;
    if (v166 < 2)
    {
      int v51 = 0;
      if (!v166)
      {
        uint64_t v146 = &v164;
        goto LABEL_51;
      }
      uint64_t v53 = 0;
      unint64_t v52 = &v164;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, &v164, v166, 8);
      int v51 = v163;
      unint64_t v52 = v162;
      uint64_t v53 = v163;
    }
    unint64_t v55 = &v52[v53];
    unint64_t v56 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v146 = v52;
    if (v56 >= 7)
    {
      uint64_t v58 = &v52[v53];
      uint64_t v57 = v49;
      if ((unint64_t)((char *)v58 - v49) >= 0x20)
      {
        unint64_t v59 = v56 + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v55 = (uint64_t *)((char *)v55 + v60);
        uint64_t v57 = &v49[v60];
        uint64_t v61 = (long long *)(v49 + 16);
        uint64_t v62 = v58 + 2;
        uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v64 = *v61;
          *(v62 - 1) = *(v61 - 1);
          *uint64_t v62 = v64;
          v61 += 2;
          v62 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          uint64_t v66 = (v51 + v50);
          LODWORD(v163) = v51 + v50;
          uint64_t v159 = v161;
          memset_pattern16(v161, &unk_1810FE350, 0x10uLL);
          uint64_t v160 = 0x200000002;
          RankPromotionTypeForANE = v158;
          memset(v158, 0, sizeof(v158));
          uint64_t v157 = 0x400000004;
          uint64_t v67 = (mlir::Builder *)(a4 + 8);
          uint64_t v68 = *((void *)v154 + 3);
          v155[0] = v66;
          uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
          uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v155, 1, IntegerType, 0);
          v71 = v70;
          if (v70)
          {
            uint64_t v72 = a4;
            uint64_t v73 = *v70;
            unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v75 = *(unsigned int *)(v73 + 16);
            if (v75)
            {
              uint64_t v76 = *(void **)(v73 + 8);
              uint64_t v77 = &v76[2 * v75];
              do
              {
                unint64_t v78 = v75 >> 1;
                v79 = &v76[2 * (v75 >> 1)];
                unint64_t v81 = *v79;
                uint64_t v80 = v79 + 2;
                v75 += ~(v75 >> 1);
                if (v81 < v74) {
                  uint64_t v76 = v80;
                }
                else {
                  unint64_t v75 = v78;
                }
              }
              while (v75);
              a4 = v72;
              if (v76 != v77)
              {
                uint64_t v82 = v146;
                if (*v76 == v74) {
                  uint64_t v83 = v76[1];
                }
                else {
                  uint64_t v83 = 0;
                }
LABEL_68:
                uint64_t v149 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
                v155[0] = v47;
                v155[1] = v48;
                v168[0] = 2;
                uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v85 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v84, 0);
                v86 = v85;
                if (!v85) {
                  goto LABEL_77;
                }
                uint64_t v87 = *v85;
                unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v89 = *(unsigned int *)(v87 + 16);
                if (!v89) {
                  goto LABEL_77;
                }
                v90 = *(void **)(v87 + 8);
                uint64_t v91 = &v90[2 * v89];
                do
                {
                  unint64_t v92 = v89 >> 1;
                  v93 = &v90[2 * (v89 >> 1)];
                  unint64_t v95 = *v93;
                  uint64_t v94 = v93 + 2;
                  v89 += ~(v89 >> 1);
                  if (v95 < v88) {
                    v90 = v94;
                  }
                  else {
                    unint64_t v89 = v92;
                  }
                }
                while (v89);
                if (v90 != v91 && *v90 == v88) {
                  uint64_t v96 = v90[1];
                }
                else {
LABEL_77:
                }
                  uint64_t v96 = 0;
                uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v155, 16, 8, 1, 0);
                uint64_t v97 = v159;
                uint64_t v98 = v160;
                v168[0] = v160;
                uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v99, 0);
                v101 = v100;
                if (!v100) {
                  goto LABEL_87;
                }
                uint64_t v102 = *v100;
                unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v104 = *(unsigned int *)(v102 + 16);
                if (!v104) {
                  goto LABEL_87;
                }
                v105 = *(void **)(v102 + 8);
                uint64_t v106 = &v105[2 * v104];
                do
                {
                  unint64_t v107 = v104 >> 1;
                  uint64_t v108 = &v105[2 * (v104 >> 1)];
                  unint64_t v110 = *v108;
                  v109 = v108 + 2;
                  v104 += ~(v104 >> 1);
                  if (v110 < v103) {
                    v105 = v109;
                  }
                  else {
                    unint64_t v104 = v107;
                  }
                }
                while (v104);
                if (v105 != v106 && *v105 == v103) {
                  uint64_t v111 = v105[1];
                }
                else {
LABEL_87:
                }
                  uint64_t v111 = 0;
                uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
                uint64_t v112 = RankPromotionTypeForANE;
                uint64_t v113 = v157;
                v168[0] = v157;
                uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v115 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v114, 0);
                v116 = v115;
                if (!v115) {
                  goto LABEL_97;
                }
                uint64_t v117 = *v115;
                unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v119 = *(unsigned int *)(v117 + 16);
                if (!v119) {
                  goto LABEL_97;
                }
                long long v120 = *(void **)(v117 + 8);
                uint64_t v121 = &v120[2 * v119];
                do
                {
                  unint64_t v122 = v119 >> 1;
                  v123 = &v120[2 * (v119 >> 1)];
                  unint64_t v125 = *v123;
                  v124 = v123 + 2;
                  v119 += ~(v119 >> 1);
                  if (v125 < v118) {
                    long long v120 = v124;
                  }
                  else {
                    unint64_t v119 = v122;
                  }
                }
                while (v119);
                if (v120 != v121 && *v120 == v118) {
                  uint64_t v126 = v120[1];
                }
                else {
LABEL_97:
                }
                  uint64_t v126 = 0;
                v168[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
                uint64_t v151 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v151, &v149, &v150, &v148, &v147, v168)- 16;
                if (RankPromotionTypeForANE != v158) {
                  free(RankPromotionTypeForANE);
                }
                if (v159 != v161) {
                  free(v159);
                }
                if (v162 != &v164) {
                  free(v162);
                }
                v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
                if (!v127) {
                  goto LABEL_113;
                }
                uint64_t v128 = *v127;
                unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v130 = *(unsigned int *)(v128 + 16);
                if (!v130) {
                  goto LABEL_113;
                }
                v131 = *(void **)(v128 + 8);
                v132 = &v131[2 * v130];
                do
                {
                  unint64_t v133 = v130 >> 1;
                  v134 = &v131[2 * (v130 >> 1)];
                  unint64_t v136 = *v134;
                  v135 = v134 + 2;
                  v130 += ~(v130 >> 1);
                  if (v136 < v129) {
                    v131 = v135;
                  }
                  else {
                    unint64_t v130 = v133;
                  }
                }
                while (v130);
                if (v131 != v132 && *v131 == v129) {
                  uint64_t v137 = v131[1];
                }
                else {
LABEL_113:
                }
                  uint64_t v137 = 0;
                RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
                uint64_t v157 = v138;
                uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                v141 = v140;
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v151);
                uint64_t v159 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
                uint64_t v143 = v154;
                if (v159 == (void *)(*(void *)(v151 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  mlir::ConversionPatternRewriter::replaceOp(a4, v154, (uint64_t)&v151, 1);
                }
                else
                {
                  v144 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v67, *((void *)v154 + 3), (uint64_t *)&v159, &v151);
                  (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v143, v144);
                }
                uint64_t v54 = 1;
                goto LABEL_118;
              }
              uint64_t v83 = 0;
            }
            else
            {
              uint64_t v83 = 0;
              a4 = v72;
            }
            uint64_t v82 = v146;
            goto LABEL_68;
          }
          uint64_t v83 = 0;
          uint64_t v82 = v146;
          goto LABEL_68;
        }
      }
    }
    else
    {
      uint64_t v57 = v49;
    }
    do
    {
      uint64_t v65 = *(void *)v57;
      v57 += 8;
      *v55++ = v65;
    }
    while (v57 != &v49[8 * v50]);
    goto LABEL_51;
  }
  uint64_t v54 = 0;
LABEL_118:
  if (v165 != (char *)&v167) {
    free(v165);
  }
  return v54;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  v168[1] = *MEMORY[0x1E4F143B8];
  v154 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v7;
  uint64_t v157 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
  }
  RankPromotionTypeForANE = v7;
  uint64_t v157 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  v153[0] = mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  v153[1] = v19;
  uint64_t v20 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v21 = (void *)*((void *)this + 6);
  RankPromotionTypeForANE = v21;
  uint64_t v157 = v20;
  if (v20)
  {
    uint64_t v21 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v20);
    uint64_t v22 = v157;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (HIDWORD(v20) + v20 == v22)
  {
    v152 = 0;
  }
  else
  {
    RankPromotionTypeForANE = v21;
    uint64_t v157 = 0;
    uint64_t v23 = (void *)mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    v152 = 0;
    if (v23)
    {
      uint64_t v159 = &v152;
      RankPromotionTypeForANE = v23;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&RankPromotionTypeForANE);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&v159, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v165 = (char *)&v167;
  uint64_t v166 = 0x100000000;
  uint64_t v25 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = *(void **)(v26 + 8);
  unint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    uint64_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    __int16 v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      long long v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_30:
  }
    uint64_t v35 = 0;
  RankPromotionTypeForANE = v25;
  uint64_t v157 = v35;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v152, v36, (uint64_t)&v165, 0, 0))
  {
    unsigned int v37 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    uint64_t v38 = (void *)*((void *)this + 6);
    RankPromotionTypeForANE = v38;
    uint64_t v157 = v37;
    if (v37) {
      uint64_t v38 = (void *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v37);
    }
    RankPromotionTypeForANE = v38;
    uint64_t v157 = 0;
    uint64_t v150 = 1;
    uint64_t v151 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153);
    unsigned int IndexFromDim = mlir::anec::getIndexFromDim(3, v39);
    if (!v41
      || (unsigned int v42 = IndexFromDim,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153),
          unsigned int v44 = mlir::anec::getIndexFromDim(3, v43),
          !v45))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
    }
    unsigned int v46 = v44;
    uint64_t v47 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v42);
    uint64_t v48 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v153) + 8 * v46);
    uint64_t v49 = v165;
    uint64_t v50 = v166;
    uint64_t v162 = &v164;
    uint64_t v163 = 0x100000000;
    if (v166 < 2)
    {
      int v51 = 0;
      if (!v166)
      {
        uint64_t v146 = &v164;
        goto LABEL_51;
      }
      uint64_t v53 = 0;
      unint64_t v52 = &v164;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, &v164, v166, 8);
      int v51 = v163;
      unint64_t v52 = v162;
      uint64_t v53 = v163;
    }
    unint64_t v55 = &v52[v53];
    unint64_t v56 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v146 = v52;
    if (v56 >= 7)
    {
      uint64_t v58 = &v52[v53];
      uint64_t v57 = v49;
      if ((unint64_t)((char *)v58 - v49) >= 0x20)
      {
        unint64_t v59 = v56 + 1;
        uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v55 = (uint64_t *)((char *)v55 + v60);
        uint64_t v57 = &v49[v60];
        uint64_t v61 = (long long *)(v49 + 16);
        uint64_t v62 = v58 + 2;
        uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v64 = *v61;
          *(v62 - 1) = *(v61 - 1);
          *uint64_t v62 = v64;
          v61 += 2;
          v62 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          uint64_t v66 = (v51 + v50);
          LODWORD(v163) = v51 + v50;
          uint64_t v159 = v161;
          memset_pattern16(v161, &unk_1810FE350, 0x10uLL);
          uint64_t v160 = 0x200000002;
          RankPromotionTypeForANE = v158;
          memset(v158, 0, sizeof(v158));
          uint64_t v157 = 0x400000004;
          uint64_t v67 = (mlir::Builder *)(a4 + 8);
          uint64_t v68 = *((void *)v154 + 3);
          v155[0] = v66;
          uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
          uint64_t v70 = (void *)mlir::RankedTensorType::get((uint64_t)v155, 1, IntegerType, 0);
          v71 = v70;
          if (v70)
          {
            uint64_t v72 = a4;
            uint64_t v73 = *v70;
            unint64_t v74 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v75 = *(unsigned int *)(v73 + 16);
            if (v75)
            {
              uint64_t v76 = *(void **)(v73 + 8);
              uint64_t v77 = &v76[2 * v75];
              do
              {
                unint64_t v78 = v75 >> 1;
                v79 = &v76[2 * (v75 >> 1)];
                unint64_t v81 = *v79;
                uint64_t v80 = v79 + 2;
                v75 += ~(v75 >> 1);
                if (v81 < v74) {
                  uint64_t v76 = v80;
                }
                else {
                  unint64_t v75 = v78;
                }
              }
              while (v75);
              a4 = v72;
              if (v76 != v77)
              {
                uint64_t v82 = v146;
                if (*v76 == v74) {
                  uint64_t v83 = v76[1];
                }
                else {
                  uint64_t v83 = 0;
                }
LABEL_68:
                uint64_t v149 = mlir::DenseElementsAttr::getFromRawBuffer(v71, v83, v82, 8 * v66, 8, 1, 0);
                v155[0] = v47;
                v155[1] = v48;
                v168[0] = 2;
                uint64_t v84 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v85 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v84, 0);
                v86 = v85;
                if (!v85) {
                  goto LABEL_77;
                }
                uint64_t v87 = *v85;
                unint64_t v88 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v89 = *(unsigned int *)(v87 + 16);
                if (!v89) {
                  goto LABEL_77;
                }
                v90 = *(void **)(v87 + 8);
                uint64_t v91 = &v90[2 * v89];
                do
                {
                  unint64_t v92 = v89 >> 1;
                  v93 = &v90[2 * (v89 >> 1)];
                  unint64_t v95 = *v93;
                  uint64_t v94 = v93 + 2;
                  v89 += ~(v89 >> 1);
                  if (v95 < v88) {
                    v90 = v94;
                  }
                  else {
                    unint64_t v89 = v92;
                  }
                }
                while (v89);
                if (v90 != v91 && *v90 == v88) {
                  uint64_t v96 = v90[1];
                }
                else {
LABEL_77:
                }
                  uint64_t v96 = 0;
                uint64_t v148 = mlir::DenseElementsAttr::getFromRawBuffer(v86, v96, v155, 16, 8, 1, 0);
                uint64_t v97 = v159;
                uint64_t v98 = v160;
                v168[0] = v160;
                uint64_t v99 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                uint64_t v100 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v99, 0);
                v101 = v100;
                if (!v100) {
                  goto LABEL_87;
                }
                uint64_t v102 = *v100;
                unint64_t v103 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v104 = *(unsigned int *)(v102 + 16);
                if (!v104) {
                  goto LABEL_87;
                }
                v105 = *(void **)(v102 + 8);
                uint64_t v106 = &v105[2 * v104];
                do
                {
                  unint64_t v107 = v104 >> 1;
                  uint64_t v108 = &v105[2 * (v104 >> 1)];
                  unint64_t v110 = *v108;
                  v109 = v108 + 2;
                  v104 += ~(v104 >> 1);
                  if (v110 < v103) {
                    v105 = v109;
                  }
                  else {
                    unint64_t v104 = v107;
                  }
                }
                while (v104);
                if (v105 != v106 && *v105 == v103) {
                  uint64_t v111 = v105[1];
                }
                else {
LABEL_87:
                }
                  uint64_t v111 = 0;
                uint64_t v147 = mlir::DenseElementsAttr::getFromRawBuffer(v101, v111, v97, 8 * v98, 8, 1, 0);
                uint64_t v112 = RankPromotionTypeForANE;
                uint64_t v113 = v157;
                v168[0] = v157;
                uint64_t v114 = mlir::Builder::getIntegerType(v67, 0x40u, 0);
                v115 = (void *)mlir::RankedTensorType::get((uint64_t)v168, 1, v114, 0);
                v116 = v115;
                if (!v115) {
                  goto LABEL_97;
                }
                uint64_t v117 = *v115;
                unint64_t v118 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v119 = *(unsigned int *)(v117 + 16);
                if (!v119) {
                  goto LABEL_97;
                }
                long long v120 = *(void **)(v117 + 8);
                uint64_t v121 = &v120[2 * v119];
                do
                {
                  unint64_t v122 = v119 >> 1;
                  v123 = &v120[2 * (v119 >> 1)];
                  unint64_t v125 = *v123;
                  v124 = v123 + 2;
                  v119 += ~(v119 >> 1);
                  if (v125 < v118) {
                    long long v120 = v124;
                  }
                  else {
                    unint64_t v119 = v122;
                  }
                }
                while (v119);
                if (v120 != v121 && *v120 == v118) {
                  uint64_t v126 = v120[1];
                }
                else {
LABEL_97:
                }
                  uint64_t v126 = 0;
                v168[0] = mlir::DenseElementsAttr::getFromRawBuffer(v116, v126, v112, 8 * v113, 8, 1, 0);
                uint64_t v151 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ArgMinMax,mlir::Value &,mlir::DenseIntElementsAttr,mlir::anec::ArgMinMaxMode &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v67, v68, &v151, &v149, &v150, &v148, &v147, v168)- 16;
                if (RankPromotionTypeForANE != v158) {
                  free(RankPromotionTypeForANE);
                }
                if (v159 != v161) {
                  free(v159);
                }
                if (v162 != &v164) {
                  free(v162);
                }
                v127 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v154) + 8) & 0xFFFFFFFFFFFFFFF8);
                if (!v127) {
                  goto LABEL_113;
                }
                uint64_t v128 = *v127;
                unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v130 = *(unsigned int *)(v128 + 16);
                if (!v130) {
                  goto LABEL_113;
                }
                v131 = *(void **)(v128 + 8);
                v132 = &v131[2 * v130];
                do
                {
                  unint64_t v133 = v130 >> 1;
                  v134 = &v131[2 * (v130 >> 1)];
                  unint64_t v136 = *v134;
                  v135 = v134 + 2;
                  v130 += ~(v130 >> 1);
                  if (v136 < v129) {
                    v131 = v135;
                  }
                  else {
                    unint64_t v130 = v133;
                  }
                }
                while (v130);
                if (v131 != v132 && *v131 == v129) {
                  uint64_t v137 = v131[1];
                }
                else {
LABEL_113:
                }
                  uint64_t v137 = 0;
                RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE((uint64_t)v127, v137);
                uint64_t v157 = v138;
                uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
                v141 = v140;
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v151);
                uint64_t v159 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v141, ElementTypeOrSelf, 0, 0, 0);
                uint64_t v143 = v154;
                if (v159 == (void *)(*(void *)(v151 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  mlir::ConversionPatternRewriter::replaceOp(a4, v154, (uint64_t)&v151, 1);
                }
                else
                {
                  v144 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(v67, *((void *)v154 + 3), (uint64_t *)&v159, &v151);
                  (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v143, v144);
                }
                uint64_t v54 = 1;
                goto LABEL_118;
              }
              uint64_t v83 = 0;
            }
            else
            {
              uint64_t v83 = 0;
              a4 = v72;
            }
            uint64_t v82 = v146;
            goto LABEL_68;
          }
          uint64_t v83 = 0;
          uint64_t v82 = v146;
          goto LABEL_68;
        }
      }
    }
    else
    {
      uint64_t v57 = v49;
    }
    do
    {
      uint64_t v65 = *(void *)v57;
      v57 += 8;
      *v55++ = v65;
    }
    while (v57 != &v49[8 * v50]);
    goto LABEL_51;
  }
  uint64_t v54 = 0;
LABEL_118:
  if (v165 != (char *)&v167) {
    free(v165);
  }
  return v54;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    uint64_t v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 1;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    uint64_t v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 1;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

void *mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::~ConvertReductionArg(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::~ConvertReductionArg(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::ConvertReductionArg<mlir::mps::ReductionArgMaxOp,(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(int a1, unsigned int *a2, mlir::scf::detail::ConditionOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a2;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
  unint64_t v7 = (void *)*((void *)this + 6);
  uint64_t v63 = v7;
  uint64_t v64 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v7 = (void *)mlir::ValueRange::offset_base(&v63, ODSOperandIndexAndLength);
  }
  uint64_t v63 = v7;
  uint64_t v64 = 0;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      uint64_t v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_12:
  }
    uint64_t v18 = 0;
  mlir::getRankPromotionTypeForANE((uint64_t)v8, v18);
  uint64_t v19 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 14));
  uint64_t v20 = (void *)*((void *)this + 6);
  uint64_t v63 = v20;
  uint64_t v64 = v19;
  if (v19)
  {
    uint64_t v20 = (void *)mlir::ValueRange::offset_base(&v63, v19);
    uint64_t v21 = v64;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (HIDWORD(v19) + v19 == v21)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v63 = v20;
    uint64_t v64 = 0;
    uint64_t v22 = (void *)mlir::ValueRange::dereference_iterator(&v63, 0);
    uint64_t v61 = 0;
    if (v22)
    {
      RankPromotionTypeForANE = &v61;
      uint64_t v63 = v22;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
      if (!DefiningOp
        || !mlir::detail::constant_op_binder<mlir::DenseIntElementsAttr>::match((unint64_t **)&RankPromotionTypeForANE, DefiningOp))
      {
        return 0;
      }
    }
  }
  uint64_t v63 = &v65;
  uint64_t v64 = 0x100000000;
  __int16 v24 = (unint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v24) {
    goto LABEL_30;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v27 = *(unsigned int *)(v25 + 16);
  if (!v27) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void **)(v25 + 8);
  long long v29 = &v28[2 * v27];
  do
  {
    unint64_t v30 = v27 >> 1;
    unint64_t v31 = &v28[2 * (v27 >> 1)];
    unint64_t v33 = *v31;
    uint64_t v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v27 = v30;
    }
  }
  while (v27);
  if (v28 != v29 && *v28 == v26) {
    uint64_t v34 = v28[1];
  }
  else {
LABEL_30:
  }
    uint64_t v34 = 0;
  RankPromotionTypeForANE = (uint64_t **)v24;
  uint64_t v67 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  if (mlir::getPositivePromotedAxes(v61, v35, (uint64_t)&v63, 0, 0))
  {
    unsigned int v36 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 14));
    unsigned int v37 = (unint64_t *)*((void *)this + 6);
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = v36;
    if (v36) {
      unsigned int v37 = (unint64_t *)mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v36);
    }
    RankPromotionTypeForANE = (uint64_t **)v37;
    uint64_t v67 = 0;
    uint64_t v59 = 1;
    uint64_t v60 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t v60 = (uint64_t)mlir::OpBuilder::create<mlir::anec::GlobalArgMinMax,mlir::Value &,long long &,mlir::anec::ArgMinMaxMode &>((mlir::Builder *)(a4 + 8), *((void *)v62 + 3), &v60, (unsigned int *)v63, &v59)- 16;
    uint64_t v38 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v38) {
      goto LABEL_43;
    }
    uint64_t v39 = *v38;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_43;
    }
    unsigned int v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      char v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unsigned int v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        unsigned int v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_43:
    }
      uint64_t v48 = 0;
    RankPromotionTypeForANE = (uint64_t **)mlir::getRankPromotionTypeForANE((uint64_t)v38, v48);
    uint64_t v67 = v49;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
    unint64_t v52 = v51;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60);
    uint64_t v58 = mlir::MemRefType::get(ArgAttrsAttr, v52, ElementTypeOrSelf, 0, 0, 0);
    uint64_t v54 = v62;
    if (v58 == (*(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::ConversionPatternRewriter::replaceOp(a4, v62, (uint64_t)&v60, 1);
    }
    else
    {
      unint64_t v55 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *((void *)v62 + 3), &v58, &v60);
      (*(void (**)(uint64_t, unsigned int *, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, v54, v55);
    }
    uint64_t v56 = 1;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if (v63 != &v65) {
    free(v63);
  }
  return v56;
}

void mlir::anonymous namespace'::ConvertSignBit::~ConvertSignBit(mlir::_anonymous_namespace_::ConvertSignBit *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::SignbitOpGenericAdaptorBase::SignbitOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::SignbitOpGenericAdaptorBase::SignbitOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  unint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  unint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

void mlir::anonymous namespace'::ConvertSignBit::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v15, *(const mlir::TypeConverter **)(a1 + 96));
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  unint64_t v9 = *((void *)a3 + 5);
  uint64_t v16 = (mlir::GenericProgramPoint *)v9;
  uint64_t v17 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v9 = mlir::ValueRange::offset_base(&v16, ODSOperandIndexAndLength);
  }
  uint64_t v16 = (mlir::GenericProgramPoint *)v9;
  uint64_t v17 = 0;
  uint64_t v13 = mlir::ValueRange::dereference_iterator(&v16, 0);
  uint64_t v16 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanZero,mlir::Value &>(a4 + 1, v7, &v13);
  uint64_t Result = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v14);
  uint64_t v13 = mlir::TypeConverter::convertType((uint64_t)v15, (void *)(*(void *)(Result + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = v14;
  uint64_t v12 = mlir::OpBuilder::create<mlir::anec::Cast,mlir::Type &,mlir::anec::ElementwiseNotEqualZero &>((mlir::OpBuilder *)(a4 + 1), *(void *)(v14 + 24), &v13, &v16);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, v11, v12);
  mlir::TypeConverter::~TypeConverter(v15);
}

uint64_t sub_1808759B8()
{
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignbitOp &>(mlir::mps::SignbitOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::anonymous namespace'::ConvertTile::~ConvertTile(mlir::_anonymous_namespace_::ConvertTile *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::TileOpGenericAdaptorBase::TileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TileOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::TileOpGenericAdaptorBase::TileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::TileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  unint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TileOp &>(mlir::mps::TileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  unint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TileOp &>(mlir::mps::TileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertTile::matchAndRewriteWithStaticShapes(int a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = v36;
  uint64_t v35 = 0x500000000;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u);
  unint64_t v8 = *((void *)this + 5);
  unint64_t v37 = v8;
  uint64_t v38 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v8 = mlir::ValueRange::offset_base(&v37, ODSOperandIndexAndLength);
  }
  unint64_t v37 = v8;
  uint64_t v38 = 0;
  uint64_t v9 = mlir::ValueRange::dereference_iterator(&v37, 0);
  if (mlir::matchConstantWithIntVector<unsigned long long>(v9, (uint64_t)&v34))
  {
    switch((int)v35)
    {
      case 0:
        LODWORD(v35) = 0;
        if (HIDWORD(v35) > 3)
        {
          uint64_t v10 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, 4uLL, 8);
          uint64_t v10 = v35;
        }
        unint64_t v14 = (char *)v34 + 8 * v10;
        *unint64_t v14 = xmmword_181110BD8;
        v14[1] = unk_181110BE8;
        LODWORD(v35) = v35 + 4;
        break;
      case 1:
        uint64_t v12 = (char *)v34;
        unint64_t v13 = 3;
        goto LABEL_12;
      case 2:
        llvm::SmallVectorImpl<long long>::insert((uint64_t)&v34, (uint64_t)v34 + 8, 1uLL, 1uLL);
        uint64_t v12 = (char *)v34;
        goto LABEL_11;
      case 3:
        uint64_t v12 = (char *)v34 + 16;
LABEL_11:
        unint64_t v13 = 1;
LABEL_12:
        llvm::SmallVectorImpl<long long>::insert((uint64_t)&v34, (uint64_t)v12, v13, 1uLL);
        break;
      default:
        break;
    }
    unsigned int v15 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0);
    unint64_t v16 = *((void *)this + 5);
    unint64_t v37 = v16;
    uint64_t v38 = v15;
    if (v15) {
      unint64_t v16 = mlir::ValueRange::offset_base(&v37, v15);
    }
    unint64_t v37 = v16;
    uint64_t v38 = 0;
    unint64_t v37 = mlir::ValueRange::dereference_iterator(&v37, 0);
    uint64_t v33 = v35;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    uint64_t v18 = (void *)mlir::RankedTensorType::get((uint64_t)&v33, 1, IntegerType, 0);
    uint64_t v19 = v18;
    if (!v18) {
      goto LABEL_26;
    }
    uint64_t v20 = *v18;
    unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v22 = *(unsigned int *)(v20 + 16);
    if (!v22) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void **)(v20 + 8);
    __int16 v24 = &v23[2 * v22];
    do
    {
      unint64_t v25 = v22 >> 1;
      uint64_t v26 = &v23[2 * (v22 >> 1)];
      unint64_t v28 = *v26;
      uint64_t v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21) {
        uint64_t v23 = v27;
      }
      else {
        unint64_t v22 = v25;
      }
    }
    while (v22);
    if (v23 != v24 && *v23 == v21) {
      uint64_t v29 = v23[1];
    }
    else {
LABEL_26:
    }
      uint64_t v29 = 0;
    uint64_t v11 = 1;
    uint64_t v32 = mlir::DenseElementsAttr::getFromRawBuffer(v19, v29, v34, 8 * v35, 8, 1, 0);
    unint64_t v30 = mlir::OpBuilder::create<mlir::anec::Tile,mlir::Value,mlir::DenseIntElementsAttr>((mlir::UnknownLoc **)(a4 + 8), *(void *)(a2 + 24), (uint64_t *)&v37, &v32);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v30);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v34 != v36) {
    free(v34);
  }
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Tile,mlir::Value,mlir::DenseIntElementsAttr>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.tile", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"anec.tile";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Tile::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Tile,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::anonymous namespace'::RegionReturnTypeConversion::~RegionReturnTypeConversion(mlir::_anonymous_namespace_::RegionReturnTypeConversion *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::anec::detail::RegionReturnGenericAdaptorBase::RegionReturnGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::anec::RegionReturn>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::anec::detail::RegionReturnGenericAdaptorBase::RegionReturnGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::RegionReturnTypeConversion::matchAndRewrite(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return 1;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8790;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_180876768()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::LeakyReluOpGenericAdaptorBase::LeakyReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LeakyReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::LeakyReluOpGenericAdaptorBase::LeakyReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LeakyReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  unint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LeakyReluOp &>(mlir::mps::LeakyReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LeakyReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(mlir::mps::LeakyReluOp,mlir::mps::LeakyReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.leaky_relu", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.leaky_relu";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::LeakyRelu,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8E20;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_180877494()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ClampOpGenericAdaptorBase::ClampOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ClampOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ClampOpGenericAdaptorBase::ClampOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ClampOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ClampOp &>(mlir::mps::ClampOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ClampOp,mlir::anec::ClampedRelu>::matchAndRewriteWithStaticShapes(mlir::mps::ClampOp,mlir::mps::ClampOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.clamped_relu", (const unsigned __int8 *)0x11, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.clamped_relu";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8F70;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_1808781C0()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::NReluOpGenericAdaptorBase::NReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::NReluOpGenericAdaptorBase::NReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::NReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NReluOp &>(mlir::mps::NReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NReluOp,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(mlir::mps::NReluOp,mlir::mps::NReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.n_relu", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.n_relu";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::NRelu,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8FE0;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_180878EEC()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::PReluOpGenericAdaptorBase::PReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::PReluOpGenericAdaptorBase::PReluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::LeakyRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PReluOp &>(mlir::mps::PReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::PReluOp,mlir::anec::LeakyRelu>::matchAndRewriteWithStaticShapes(mlir::mps::PReluOp,mlir::mps::PReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A9050;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_180879AC8()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Relu6OpGenericAdaptorBase::Relu6OpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Relu6OpGenericAdaptorBase::Relu6OpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::NRelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Relu6Op &>(mlir::mps::Relu6Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::Relu6Op,mlir::anec::NRelu>::matchAndRewriteWithStaticShapes(mlir::mps::Relu6Op,mlir::mps::Relu6OpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8800;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18087A6A4()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReciprocalOpGenericAdaptorBase::ReciprocalOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReciprocalOpGenericAdaptorBase::ReciprocalOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalOp &>(mlir::mps::ReciprocalOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalOp,mlir::anec::Invert>::matchAndRewriteWithStaticShapes(mlir::mps::ReciprocalOp,mlir::mps::ReciprocalOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Invert,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.invert", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.invert";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC97E930;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18087B3D0()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReciprocalSquareRootOpGenericAdaptorBase::ReciprocalSquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::ReciprocalSquareRootOpGenericAdaptorBase::ReciprocalSquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReciprocalSquareRootOp &>(mlir::mps::ReciprocalSquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReciprocalSquareRootOp,mlir::anec::Rsqrt>::matchAndRewriteWithStaticShapes(mlir::mps::ReciprocalSquareRootOp,mlir::mps::ReciprocalSquareRootOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Rsqrt,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.r_sqrt", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.r_sqrt";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Rsqrt,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8950;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18087C0FC()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::LogarithmBase2OpGenericAdaptorBase::LogarithmBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmBase2Op>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::LogarithmBase2OpGenericAdaptorBase::LogarithmBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LogarithmBase2Op>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::Log2,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmBase2Op &>(mlir::mps::LogarithmBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::LogarithmBase2Op,mlir::anec::Log2>::matchAndRewriteWithStaticShapes(mlir::mps::LogarithmBase2Op,mlir::mps::LogarithmBase2OpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Log2,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.log2", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.log2";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::~ConvertElementwiseUnary(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A8A30;
  v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 136);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      while (1)
      {
        unint64_t v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0) {
          operator delete(*(v5 - 3));
        }
        uint64_t v7 = *(v5 - 6);
        uint64_t v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4) {
          goto LABEL_8;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144)) {
    free(v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    uint64_t v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

void *sub_18087CE28()
{
  v1 = (void *)v0[10];
  if (v1 != v0 + 12) {
    free(v1);
  }
  v2 = (void *)v0[4];
  if (v2 != v0 + 6) {
    free(v2);
  }
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::EluOpGenericAdaptorBase::EluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::EluOpGenericAdaptorBase::EluOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::EluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 40);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v36 = v23;
        if (v35)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v32 = 259;
      v29[0] = v31;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 16);
        v33[0] = *(_OWORD *)a3;
        v33[1] = v28;
        v33[2] = *(_OWORD *)(a3 + 32);
        uint64_t v34 = *(void *)(a3 + 48);
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v33, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v36;
    if (v35 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v32 = 259;
  uint64_t v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a1;
  v70[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  uint64_t v65 = 0;
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = v7;
  uint64_t v55 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      uint64_t v11 = a1;
      uint64_t v12 = *((void *)v5 + 13);
      uint64_t v13 = *((unsigned int *)v5 + 30);
      if (v13)
      {
        unsigned int v14 = v13 - 1;
        uint64_t v15 = (_DWORD *)(v12 + 32 * ((v13 - 1) & (37 * v9)));
        int v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          uint64_t v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        int v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          int v20 = v19 + v18++;
          uint64_t v19 = v20 & v14;
          int v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            uint64_t v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      uint64_t v15 = (_DWORD *)(v12 + 32 * v13);
      uint64_t v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        uint64_t v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          uint64_t v35 = v67;
        }
        *((void *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        uint64_t v56 = &v58;
        uint64_t v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56)) {
          BOOL v21 = v57 == 1;
        }
        else {
          BOOL v21 = 0;
        }
        char v22 = v21;
        if (v21)
        {
          uint64_t v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          __int16 v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          uint64_t v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          int v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0) {
            uint64_t v29 = v59[0] + 8;
          }
          else {
            uint64_t v29 = *(void *)(v59[0] + 8);
          }
          if (v28 >= 0) {
            uint64_t v30 = *(unsigned __int8 *)(v59[0] + 31);
          }
          else {
            uint64_t v30 = *(void *)(v59[0] + 16);
          }
          uint64_t F16Type = mlir::Builder::getF16Type(v10, v27);
          uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          uint64_t v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          uint64_t v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
          }
        }
        else
        {
          uint64_t v61 = v59;
          uint64_t v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2])) {
            else
            }
              uint64_t v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58) {
          free(v56);
        }
        if ((v22 & 1) == 0) {
          goto LABEL_57;
        }
      }
      int v9 = v63 + 1;
      uint64_t v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  uint64_t v36 = *((unsigned int *)v5 + 34);
  if (v36)
  {
    uint64_t v37 = *((void *)v5 + 16);
    uint64_t v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    uint64_t v39 = (mlir::Float16Type **)(a4 + 1);
    uint64_t v40 = 56 * v36;
    uint64_t v41 = v37 + 32;
    do
    {
      unsigned int v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24)) {
        unint64_t v43 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62, v42);
      }
      else {
        unint64_t v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      }
      unint64_t v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      int v46 = *(char *)(v41 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v41;
      }
      else {
        uint64_t v47 = *(void *)v41;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        uint64_t v48 = *(void *)(v41 + 8);
      }
      uint64_t v49 = mlir::Builder::getF16Type(v39, v45);
      uint64_t v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      }
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  int v51 = mlir::OpBuilder::create<mlir::anec::Elu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(void *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a4 + 32))(a4, a2, v51);
  uint64_t v4 = 1;
LABEL_57:
  if (v66 != v68) {
    free(v66);
  }
  if (v69[0] != v70) {
    free(v69[0]);
  }
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EluOp &>(mlir::mps::EluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertElementwiseUnary<mlir::mps::EluOp,mlir::anec::Elu>::matchAndRewriteWithStaticShapes(mlir::mps::EluOp,mlir::mps::EluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  uint64_t v4 = v3 + 16;
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = ***a1;
  int v15 = 5;
  uint64_t v16 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unsigned int v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      unint64_t v5 = *(void *)(v3 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Elu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.elu", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.elu";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  BOOL v13 = (const void *)mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Elu,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void *mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::~ConvertQuantizationOp(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::~ConvertQuantizationOp(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DequantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(uint64_t **)(a3 + 56);
  uint64_t v9 = *(void *)(a3 + 64);
  uint64_t v36 = v8;
  uint64_t v37 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        uint64_t v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v37 = v23;
        if (v36)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v36);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v28;
        uint64_t v35 = *(void *)(a3 + 64);
        long long v29 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      uint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v37;
    if (v36 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  unint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v93[3] = *MEMORY[0x1E4F143B8];
  uint64_t v81 = a2;
  long long v90 = *(_OWORD *)(a3 + 56);
  uint64_t v7 = mlir::ValueRange::dereference_iterator(&v90, 0);
  uint64_t v80 = v7;
  uint64_t v8 = mlir::ValueRange::dereference_iterator(&v90, 1);
  uint64_t v9 = mlir::ValueRange::dereference_iterator(&v90, 2);
  if (mlir::mps::DequantizeOp::hasNDParams((mlir::mps::DequantizeOp *)&v81))
  {
    uint64_t v10 = *(void *)(a4 + 16);
    if (v10)
    {
      uint64_t v11 = v81;
      if (mlir::RewriterBase::Listener::classof(v10))
      {
        uint64_t v12 = *(void *)(v11 + 24);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v10 + 64))(v10, v12, v13, &RankPromotionTypeForANE);
      }
    }
    return 0;
  }
  uint64_t v14 = (unint64_t *)mlir::ValueRange::dereference_iterator(&v90, 3);
  if (!mlir::isConstantFPZero(v14))
  {
    uint64_t v10 = *(void *)(a4 + 16);
    if (v10)
    {
      uint64_t v38 = v81;
      if (mlir::RewriterBase::Listener::classof(v10))
      {
        uint64_t v12 = *(void *)(v38 + 24);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v10 + 64))(v10, v12, v13, &RankPromotionTypeForANE);
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 104))
  {
    long long v40 = *(_OWORD *)(a3 + 48);
    uint64_t v87[2] = *(_OWORD *)(a3 + 32);
    long long v88 = v40;
    *(void *)unint64_t v89 = *(void *)(a3 + 64);
    long long v41 = *(_OWORD *)(a3 + 16);
    v87[0] = *(_OWORD *)a3;
    v87[1] = v41;
    uint64_t v84 = v81;
    uint64_t v42 = *(void *)(a1 + 96);
    uint64_t v43 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v84);
    unint64_t v44 = (uint64_t *)mlir::TypeConverter::convertType(v42, (void *)(*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v45 = (uint64_t)v44;
    if (!v44) {
      goto LABEL_35;
    }
    uint64_t v46 = *v44;
    unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v48 = *(unsigned int *)(v46 + 16);
    if (!v48) {
      goto LABEL_35;
    }
    uint64_t v49 = *(void **)(v46 + 8);
    uint64_t v50 = &v49[2 * v48];
    do
    {
      unint64_t v51 = v48 >> 1;
      unint64_t v52 = &v49[2 * (v48 >> 1)];
      unint64_t v54 = *v52;
      uint64_t v53 = v52 + 2;
      v48 += ~(v48 >> 1);
      if (v54 < v47) {
        uint64_t v49 = v53;
      }
      else {
        unint64_t v48 = v51;
      }
    }
    while (v48);
    if (v49 != v50 && *v49 == v47) {
      uint64_t v55 = v49[1];
    }
    else {
LABEL_35:
    }
      uint64_t v55 = 0;
    v83[0] = v45;
    v83[1] = v55;
    unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v87, 1u);
    unint64_t v57 = *((void *)&v88 + 1);
    uint64_t RankPromotionTypeForANE = *((void *)&v88 + 1);
    v92[0] = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength) {
      unint64_t v57 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
    }
    uint64_t RankPromotionTypeForANE = v57;
    v92[0] = 0;
    uint64_t v58 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t RankPromotionTypeForANE = 0;
    v92[0] = 0;
    uint64_t SplatInt = (uint64_t)&RankPromotionTypeForANE;
    v93[0] = v58;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v93);
    if (DefiningOp
      && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&SplatInt, DefiningOp)
      && (uint64_t SplatFloat = mlir::getSplatFloatValue<float>(RankPromotionTypeForANE, v92[0]),
          (SplatFloat & 0xFF00000000) != 0))
    {
      float v61 = *(float *)&SplatFloat;
      unsigned int v62 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v87, 2u);
      unint64_t v63 = *((void *)&v88 + 1);
      uint64_t RankPromotionTypeForANE = *((void *)&v88 + 1);
      v92[0] = v62;
      if (v62) {
        unint64_t v63 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v62);
      }
      uint64_t RankPromotionTypeForANE = v63;
      v92[0] = 0;
      uint64_t v64 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
      uint64_t RankPromotionTypeForANE = 0;
      v92[0] = 0;
      uint64_t SplatInt = (uint64_t)&RankPromotionTypeForANE;
      v93[0] = v64;
      uint64_t v65 = mlir::Value::getDefiningOp((mlir::Value *)v93);
      if (v65)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&SplatInt, v65))
        {
          uint64_t SplatInt = mlir::getSplatIntValue<int>(RankPromotionTypeForANE, v92[0]);
          if ((SplatInt & 0xFF00000000) != 0)
          {
            uint64_t v66 = *(void *)(v84 + 24);
            unsigned int v67 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v87, 0);
            unint64_t v68 = *((void *)&v88 + 1);
            uint64_t RankPromotionTypeForANE = *((void *)&v88 + 1);
            v92[0] = v67;
            if (v67) {
              unint64_t v68 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v67);
            }
            uint64_t RankPromotionTypeForANE = v68;
            v92[0] = 0;
            uint64_t v82 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
            uint64_t v69 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v61);
            uint64_t v70 = llvm::APFloatBase::IEEEsingle(v69);
            llvm::APFloat::Storage::Storage(v92, v93, v70);
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
            v71 = mlir::OpBuilder::create<mlir::anec::DeQuant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>((mlir::Float32Type **)(a4 + 8), v66, v83, &v82, (uint64_t)&RankPromotionTypeForANE, (int *)&SplatInt);
            uint64_t v72 = (uint64_t)v71 - 16;
            uint64_t v73 = (void *)v92[0];
            if (llvm::APFloatBase::PPCDoubleDouble(v71) == v73) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v92);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v92);
            }
            v79 = (unsigned int *)v84;
            v93[0] = v72;
            mlir::ValueRange::ValueRange((unint64_t *)&RankPromotionTypeForANE, (uint64_t)v93, 1uLL);
            mlir::ConversionPatternRewriter::replaceOp(a4, v79, RankPromotionTypeForANE, v92[0]);
            return 1;
          }
        }
      }
      uint64_t v74 = *(void *)(a4 + 16);
      if (!v74) {
        goto LABEL_7;
      }
      uint64_t v78 = v84;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
        goto LABEL_7;
      }
      uint64_t v76 = *(void *)(v78 + 24);
    }
    else
    {
      uint64_t v74 = *(void *)(a4 + 16);
      if (!v74) {
        goto LABEL_7;
      }
      uint64_t v75 = v84;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
        goto LABEL_7;
      }
      uint64_t v76 = *(void *)(v75 + 24);
    }
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v74 + 64))(v74, v76, v77, &RankPromotionTypeForANE))goto LABEL_7; {
    return 1;
    }
  }
LABEL_7:
  uint64_t v15 = *(void *)(v81 + 24);
  uint64_t v16 = (uint64_t *)(*(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void **)(v17 + 8);
  uint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    uint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    __int16 v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      uint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_16:
  }
    uint64_t v26 = 0;
  uint64_t RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v16, v26);
  v92[0] = v27;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  uint64_t v30 = v29;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
  v93[0] = mlir::MemRefType::get(ArgAttrsAttr, v30, ElementTypeOrSelf, 0, 0, 0);
  uint64_t v80 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v15, v93, &v80)- 16;
  if (!v33) {
    return 0;
  }
  if (!v35) {
    return 0;
  }
  uint64_t v36 = (unsigned int *)v81;
  uint64_t RankPromotionTypeForANE = v34;
  uint64_t v37 = 1;
  mlir::ValueRange::ValueRange(v86, (uint64_t)&RankPromotionTypeForANE, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v36, v86[0], v86[1]);
  return v37;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

unint64_t mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::createBiasScaleOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8 = (void *)a4;
  uint64_t v9 = a3;
  v101[1] = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a3;
  uint64_t v92 = a2;
  long long v90 = (char *)a4;
  uint64_t v12 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *v12;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    unint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_10:
  }
    uint64_t v22 = 0;
  v89[0] = v12;
  v89[1] = v22;
  uint64_t v23 = (void *)(v8[1] & 0xFFFFFFFFFFFFFFF8);
  if (v23)
  {
    uint64_t v24 = *v23;
    unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v26 = *(unsigned int *)(v24 + 16);
    if (!v26) {
      goto LABEL_20;
    }
    uint64_t v27 = *(void **)(v24 + 8);
    long long v28 = &v27[2 * v26];
    do
    {
      unint64_t v29 = v26 >> 1;
      uint64_t v30 = &v27[2 * (v26 >> 1)];
      unint64_t v32 = *v30;
      unint64_t v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25) {
        uint64_t v27 = v31;
      }
      else {
        unint64_t v26 = v29;
      }
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
    {
      uint64_t v66 = v27[1];
      uint64_t v87 = v23;
      uint64_t v88 = v66;
      if (v12)
      {
LABEL_21:
        char v33 = (void *)mlir::TypeConverter::convertType(*(void *)(a1 + 96), v12);
        unint64_t v34 = v33;
        if (!v33) {
          goto LABEL_30;
        }
        uint64_t v35 = *v33;
        unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v37 = *(unsigned int *)(v35 + 16);
        if (!v37) {
          goto LABEL_30;
        }
        uint64_t v38 = *(void **)(v35 + 8);
        uint64_t v39 = &v38[2 * v37];
        do
        {
          unint64_t v40 = v37 >> 1;
          long long v41 = &v38[2 * (v37 >> 1)];
          unint64_t v43 = *v41;
          uint64_t v42 = v41 + 2;
          v37 += ~(v37 >> 1);
          if (v43 < v36) {
            uint64_t v38 = v42;
          }
          else {
            unint64_t v37 = v40;
          }
        }
        while (v37);
        if (v38 != v39 && *v38 == v36) {
          uint64_t v44 = v38[1];
        }
        else {
LABEL_30:
        }
          uint64_t v44 = 0;
        v86[0] = v34;
        v86[1] = v44;
        v100[0] = v101;
        v100[1] = (void *)0x100000000;
        if ((mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v92) & 0xFF00000000) != 0) {
          int Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v92);
        }
        else {
          int Axis = 0;
        }
        GOC = (void *)Axis;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
        if (mlir::getPositivePromotedAxes((uint64_t *)&GOC, 1, v46, (uint64_t)v100, 0, 0))
        {
          uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
          uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v48);
          uint64_t FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v92);
          unint64_t v51 = *(mlir::MLIRContext **)(v92 + 24);
          {
            unint64_t v52 = v9 & 0xFFFFFFFFFFFFFF00;
            goto LABEL_76;
          }
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
          unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v53);
          if (NumElements == 1 || *(void *)v100[0] == IndexFromDim)
          {
            GOC = v8;
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&GOC);
            if (DefiningOp)
            {
              uint64_t v56 = DefiningOp;
              uint64_t v57 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v56 + 48) + 32))(*(void *)(v56 + 48), v57))
              {
                if (a5) {
                  uint64_t v58 = v90;
                }
                else {
                  uint64_t v58 = 0;
                }
                if (a5) {
                  uint64_t v59 = 0;
                }
                else {
                  uint64_t v59 = v90;
                }
                uint64_t v60 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
LABEL_72:
                LOBYTE(v9) = v60;
                unint64_t v52 = v60 & 0xFFFFFFFFFFFFFF00;
                goto LABEL_76;
              }
            }
            if (NumElements == 1)
            {
LABEL_68:
              v79 = (mlir::OpBuilder *)(a6 + 8);
              uint64_t v80 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
              p_GOC = (void *)mlir::MemRefType::get(v80, v81, FunctionType, 0, 0, 0);
              if (a5) {
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>(v79, (uint64_t)v51, (uint64_t *)&p_GOC, &v91, (uint64_t *)&v90);
              }
              else {
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::MemRefType,mlir::Value &,mlir::Value &>(v79, (uint64_t)v51, (uint64_t *)&p_GOC, &v91, (uint64_t *)&v90);
              }
              uint64_t v60 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
              goto LABEL_72;
            }
            uint64_t v8 = v90;
          }
          GOC = v98;
          uint64_t v97 = 0xC00000000;
          uint64_t v85 = 0;
          {
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
            uint64_t v84 = 1;
            llvm::SmallVector<long long,6u>::SmallVector((uint64_t)&p_GOC, v68, (unint64_t *)&v84);
            uint64_t v69 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
            uint64_t v71 = mlir::ShapedType::getNumElements(v69, v70);
            uint64_t v72 = p_GOC;
            *((void *)p_GOC + *(void *)v100[0]) = v71;
            uint64_t v73 = (mlir::AffineMap *)v94;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
            uint64_t v84 = mlir::MemRefType::get(v72, v73, OperandRange, 0, 0, 0);
            uint64_t v75 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
            uint64_t v77 = v76;
            uint64_t v78 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
            uint64_t v83 = mlir::MemRefType::get(v75, v77, v78, 0, 0, 0);
            long long v90 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v84, (uint64_t *)&v90)- 16;
            long long v90 = (char *)mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v83, (uint64_t *)&v90)- 16;
            if (p_GOC != &v95) {
              free(p_GOC);
            }
            goto LABEL_66;
          }
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
          if (v65)
          {
            long long v90 = (char *)GOCConstant - 16;
LABEL_66:
            if (GOC != v98) {
              free(GOC);
            }
            goto LABEL_68;
          }
          if (GOC != v98) {
            free(GOC);
          }
        }
        else
        {
          GOC = "failed: could not extract positive promoted axes";
          __int16 v99 = 259;
          uint64_t v61 = v92;
          p_GOC = &GOC;
          uint64_t v62 = *(void *)(a6 + 16);
          if (v62 && mlir::RewriterBase::Listener::classof(v62)) {
            (*(void (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v62 + 64))(v62, *(void *)(v61 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
          }
        }
        LOBYTE(v9) = 0;
        unint64_t v52 = 0;
LABEL_76:
        if (v100[0] != v101) {
          free(v100[0]);
        }
        return v52 & 0xFFFFFFFFFFFFFF00 | v9;
      }
    }
    else
    {
LABEL_20:
      uint64_t v87 = v23;
      uint64_t v88 = 0;
      if (v12) {
        goto LABEL_21;
      }
    }
  }
  GOC = "failed: quantization inputs must be static";
  __int16 v99 = 259;
  p_GOC = &GOC;
  uint64_t v67 = *(void *)(a6 + 16);
  if (v67 && mlir::RewriterBase::Listener::classof(v67)) {
    (*(void (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v67 + 64))(v67, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DequantizeOp &>(mlir::mps::DequantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
  }
  LOBYTE(v9) = 0;
  unint64_t v52 = 0;
  return v52 & 0xFFFFFFFFFFFFFF00 | v9;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: groups / block / batch quantization not supported on ANEC");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::matchAndRewriteWithStaticShapes(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC doesn't support min operand for Dequantize");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::DeQuant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.dequant", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    __int16 v28 = 1283;
    v27[2] = (uint64_t)"anec.dequant";
    v27[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  unint64_t v18 = *(void **)(a5 + 8);
  uint64_t v17 = (void *)(a5 + 8);
  uint64_t v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v20 == v18) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v17);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v30, (uint64_t)v17);
  }
  mlir::anec::DeQuant::build(a1, (uint64_t)v31, v15, v16, (uint64_t)v29, *a6);
  if (v20 == (void *)v30[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  }
  unint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::DeQuant,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::convertToQuantizationUnit(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support scalar constant scale value");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::DequantizeOp>::convertToQuantizationUnit(mlir::mps::DequantizeOp,mlir::mps::DequantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support zeroPoint constant scale value");
}

BOOL mlir::anonymous namespace'::anonymous namespace'::isZeroConstant(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v17 = 0;
  __p = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v2 = DefiningOp;
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), v3)) {
    return 0;
  }
  v21[0] = v22;
  v21[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v21);
  BOOL v4 = (*(void *)v21[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v21[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  if (!v4) {
    unint64_t v17 = *(void *)v21[0] & 0xFFFFFFFFFFFFFFF8;
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v4 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v17)) {
    return 0;
  }
  unint64_t v5 = v17;
  if (mlir::DenseIntElementsAttr::classof(v17)) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v16 = v6;
  if (!v6)
  {
    unint64_t v9 = v17;
    if (mlir::DenseFPElementsAttr::classof(v17)) {
      uint64_t v10 = (void *)v9;
    }
    else {
      uint64_t v10 = 0;
    }
    __p = v10;
    if (v10)
    {
      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&__p, (uint64_t)v21);
      uint64_t v11 = v21[1];
      if (llvm::APFloatBase::PPCDoubleDouble(v12) == v11)
      {
        char v13 = *(unsigned char *)(*(void *)&v22[0] + 28);
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21[1]);
      }
      else
      {
        char v13 = BYTE12(v22[0]);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v21[1]);
      }
      return (v13 & 7) == 3;
    }
    return 0;
  }
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&v16, (uint64_t)v21);
  long long v20 = v22[0];
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)v21, (llvm::APInt *)&__p);
  unsigned int v7 = v19;
  if (v19 <= 0x40) {
    return __p == 0;
  }
  BOOL v14 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v7;
  if (__p) {
    operator delete[](__p);
  }
  return v14;
}

uint64_t llvm::SmallVector<long long,6u>::SmallVector(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v5 = (unint64_t *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 12) = 6;
  unint64_t v6 = *a3;
  if (a2 < 7)
  {
    if (a2)
    {
      unint64_t *v5 = v6;
      if (a2 != 1)
      {
        *(void *)(a1 + 24) = v6;
        if (a2 != 2)
        {
          *(void *)(a1 + 32) = v6;
          if (a2 != 3)
          {
            *(void *)(a1 + 40) = v6;
            if (a2 != 4)
            {
              *(void *)(a1 + 48) = v6;
              if (a2 != 5) {
                *(void *)(a1 + 56) = v6;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v5, a2, 8);
    unsigned int v7 = (unint64_t *)(*(void *)a1 + 8 * (a2 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v8 = a2 & 3;
    int64x2_t v9 = vdupq_n_s64(v6);
    uint64_t v10 = (int64x2_t *)(*(void *)a1 + 16);
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10[-1] = v9;
      int64x2_t *v10 = v9;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      do
      {
        *v7++ = v6;
        --v8;
      }
      while (v8);
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.mult";
    v19[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  char v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseSub,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sub", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.sub";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  char v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::~ConvertQuantizationOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::~ConvertQuantizationOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::QuantizeOpGenericAdaptorBase::QuantizeOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::QuantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::QuantizeOpGenericAdaptorBase::QuantizeOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::QuantizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 56);
  uint64_t v9 = *(void *)(a3 + 64);
  unint64_t v36 = v8;
  uint64_t v37 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v37 = v23;
        if (v36)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v36);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v33 = 259;
      v30[0] = v32;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 48);
        v34[2] = *(_OWORD *)(a3 + 32);
        v34[3] = v28;
        uint64_t v35 = *(void *)(a3 + 64);
        long long v29 = *(_OWORD *)(a3 + 16);
        v34[0] = *(_OWORD *)a3;
        v34[1] = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v34, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v37;
    if (v36 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v33 = 259;
  unint64_t v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v86[3] = *MEMORY[0x1E4F143B8];
  long long v83 = *(_OWORD *)(a3 + 56);
  uint64_t v8 = mlir::ValueRange::dereference_iterator(&v83, 0);
  uint64_t v74 = v8;
  uint64_t v9 = mlir::ValueRange::dereference_iterator(&v83, 1);
  uint64_t v10 = mlir::ValueRange::dereference_iterator(&v83, 2);
  if (!*(unsigned char *)(a1 + 104))
  {
    long long v33 = *(_OWORD *)(a3 + 48);
    v80[2] = *(_OWORD *)(a3 + 32);
    long long v81 = v33;
    *(void *)uint64_t v82 = *(void *)(a3 + 64);
    long long v34 = *(_OWORD *)(a3 + 16);
    v80[0] = *(_OWORD *)a3;
    v80[1] = v34;
    uint64_t v77 = a2;
    uint64_t v35 = *(void *)(a1 + 96);
    uint64_t v36 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v77);
    uint64_t v37 = (uint64_t *)mlir::TypeConverter::convertType(v35, (void *)(*(void *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v38 = (uint64_t)v37;
    if (!v37) {
      goto LABEL_25;
    }
    uint64_t v39 = *v37;
    unint64_t v40 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v41 = *(unsigned int *)(v39 + 16);
    if (!v41) {
      goto LABEL_25;
    }
    uint64_t v42 = *(void **)(v39 + 8);
    unint64_t v43 = &v42[2 * v41];
    do
    {
      unint64_t v44 = v41 >> 1;
      uint64_t v45 = &v42[2 * (v41 >> 1)];
      unint64_t v47 = *v45;
      unint64_t v46 = v45 + 2;
      v41 += ~(v41 >> 1);
      if (v47 < v40) {
        uint64_t v42 = v46;
      }
      else {
        unint64_t v41 = v44;
      }
    }
    while (v41);
    if (v42 != v43 && *v42 == v40) {
      uint64_t v48 = v42[1];
    }
    else {
LABEL_25:
    }
      uint64_t v48 = 0;
    v76[0] = v38;
    v76[1] = v48;
    unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v80, 1u);
    unint64_t v50 = *((void *)&v81 + 1);
    uint64_t RankPromotionTypeForANE = *((void *)&v81 + 1);
    v85[0] = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength) {
      unint64_t v50 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, ODSOperandIndexAndLength);
    }
    uint64_t RankPromotionTypeForANE = v50;
    v85[0] = 0;
    uint64_t v51 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
    uint64_t RankPromotionTypeForANE = 0;
    v85[0] = 0;
    uint64_t SplatInt = (uint64_t)&RankPromotionTypeForANE;
    v86[0] = v51;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v86);
    if (DefiningOp
      && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&SplatInt, DefiningOp)
      && (uint64_t SplatFloat = mlir::getSplatFloatValue<float>(RankPromotionTypeForANE, v85[0]),
          (SplatFloat & 0xFF00000000) != 0))
    {
      float v54 = *(float *)&SplatFloat;
      unsigned int v55 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v80, 2u);
      unint64_t v56 = *((void *)&v81 + 1);
      uint64_t RankPromotionTypeForANE = *((void *)&v81 + 1);
      v85[0] = v55;
      if (v55) {
        unint64_t v56 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v55);
      }
      uint64_t RankPromotionTypeForANE = v56;
      v85[0] = 0;
      uint64_t v57 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
      uint64_t RankPromotionTypeForANE = 0;
      v85[0] = 0;
      uint64_t SplatInt = (uint64_t)&RankPromotionTypeForANE;
      v86[0] = v57;
      uint64_t v58 = mlir::Value::getDefiningOp((mlir::Value *)v86);
      if (v58)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&SplatInt, v58))
        {
          uint64_t SplatInt = mlir::getSplatIntValue<int>(RankPromotionTypeForANE, v85[0]);
          if ((SplatInt & 0xFF00000000) != 0)
          {
            uint64_t v59 = *(void *)(v77 + 24);
            unsigned int v60 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)v80, 0);
            unint64_t v61 = *((void *)&v81 + 1);
            uint64_t RankPromotionTypeForANE = *((void *)&v81 + 1);
            v85[0] = v60;
            if (v60) {
              unint64_t v61 = mlir::ValueRange::offset_base(&RankPromotionTypeForANE, v60);
            }
            uint64_t RankPromotionTypeForANE = v61;
            v85[0] = 0;
            uint64_t v75 = mlir::ValueRange::dereference_iterator(&RankPromotionTypeForANE, 0);
            uint64_t v62 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v86, v54);
            unint64_t v63 = llvm::APFloatBase::IEEEsingle(v62);
            llvm::APFloat::Storage::Storage(v85, v86, v63);
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v86);
            uint64_t v64 = mlir::OpBuilder::create<mlir::anec::Quant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>((mlir::Float32Type **)(a4 + 8), v59, v76, &v75, (uint64_t)&RankPromotionTypeForANE, (int *)&SplatInt);
            uint64_t v65 = (uint64_t)v64 - 16;
            uint64_t v66 = (void *)v85[0];
            if (llvm::APFloatBase::PPCDoubleDouble(v64) == v66) {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v85);
            }
            else {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v85);
            }
            uint64_t v73 = (unsigned int *)v77;
            v86[0] = v65;
            mlir::ValueRange::ValueRange((unint64_t *)&RankPromotionTypeForANE, (uint64_t)v86, 1uLL);
            mlir::ConversionPatternRewriter::replaceOp(a4, v73, RankPromotionTypeForANE, v85[0]);
            return 1;
          }
        }
      }
      uint64_t v67 = *(void *)(a4 + 16);
      if (!v67) {
        goto LABEL_2;
      }
      uint64_t v71 = v77;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
        goto LABEL_2;
      }
      uint64_t v69 = *(void *)(v71 + 24);
    }
    else
    {
      uint64_t v67 = *(void *)(a4 + 16);
      if (!v67) {
        goto LABEL_2;
      }
      uint64_t v68 = v77;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
        goto LABEL_2;
      }
      uint64_t v69 = *(void *)(v68 + 24);
    }
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v67 + 64))(v67, v69, v70, &RankPromotionTypeForANE))goto LABEL_2; {
    return 1;
    }
  }
LABEL_2:
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = (uint64_t *)(*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t v13 = *v12;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    uint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_11:
  }
    uint64_t v22 = 0;
  uint64_t RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v12, v22);
  v85[0] = v23;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&RankPromotionTypeForANE);
  uint64_t v26 = v25;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
  v86[0] = mlir::MemRefType::get(ArgAttrsAttr, v26, ElementTypeOrSelf, 0, 0, 0);
  uint64_t v74 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v11, v86, &v74)- 16;
  if (!v29) {
    return 0;
  }
  if (!v31) {
    return 0;
  }
  uint64_t RankPromotionTypeForANE = v30;
  uint64_t v32 = 1;
  mlir::ValueRange::ValueRange(v79, (uint64_t)&RankPromotionTypeForANE, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v79[0], v79[1]);
  return v32;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

unint64_t mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::createBiasScaleOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8 = (void *)a4;
  uint64_t v9 = a3;
  v104[1] = *MEMORY[0x1E4F143B8];
  uint64_t v94 = a3;
  uint64_t v95 = a2;
  v93 = (char *)a4;
  uint64_t v12 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *v12;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    uint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_10:
  }
    uint64_t v22 = 0;
  v92[0] = v12;
  v92[1] = v22;
  uint64_t v23 = (void *)(v8[1] & 0xFFFFFFFFFFFFFFF8);
  if (v23)
  {
    uint64_t v24 = *v23;
    unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v26 = *(unsigned int *)(v24 + 16);
    if (!v26) {
      goto LABEL_20;
    }
    uint64_t v27 = *(void **)(v24 + 8);
    long long v28 = &v27[2 * v26];
    do
    {
      unint64_t v29 = v26 >> 1;
      unint64_t v30 = &v27[2 * (v26 >> 1)];
      unint64_t v32 = *v30;
      char v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25) {
        uint64_t v27 = v31;
      }
      else {
        unint64_t v26 = v29;
      }
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
    {
      uint64_t v64 = v27[1];
      long long v90 = v23;
      uint64_t v91 = v64;
      if (v12)
      {
LABEL_21:
        long long v33 = (void *)mlir::TypeConverter::convertType(*(void *)(a1 + 96), v12);
        long long v34 = v33;
        if (!v33) {
          goto LABEL_30;
        }
        uint64_t v35 = *v33;
        unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v37 = *(unsigned int *)(v35 + 16);
        if (!v37) {
          goto LABEL_30;
        }
        uint64_t v38 = *(void **)(v35 + 8);
        uint64_t v39 = &v38[2 * v37];
        do
        {
          unint64_t v40 = v37 >> 1;
          unint64_t v41 = &v38[2 * (v37 >> 1)];
          unint64_t v43 = *v41;
          uint64_t v42 = v41 + 2;
          v37 += ~(v37 >> 1);
          if (v43 < v36) {
            uint64_t v38 = v42;
          }
          else {
            unint64_t v37 = v40;
          }
        }
        while (v37);
        if (v38 != v39 && *v38 == v36) {
          uint64_t v44 = v38[1];
        }
        else {
LABEL_30:
        }
          uint64_t v44 = 0;
        v89[0] = v34;
        v89[1] = v44;
        v103[0] = v104;
        v103[1] = (void *)0x100000000;
        if ((mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v95) & 0xFF00000000) != 0) {
          int Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&v95);
        }
        else {
          int Axis = 0;
        }
        GOC = (void *)Axis;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v92);
        if (!mlir::getPositivePromotedAxes((uint64_t *)&GOC, 1, v46, (uint64_t)v103, 0, 0))
        {
          GOC = "failed: could not extract positive promoted axes";
          __int16 v102 = 259;
          uint64_t v62 = v95;
          p_GOC = &GOC;
          uint64_t v63 = *(void *)(a6 + 16);
          if (v63 && mlir::RewriterBase::Listener::classof(v63)) {
            (*(void (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v63 + 64))(v63, *(void *)(v62 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
          }
          goto LABEL_77;
        }
        uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
        uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v48);
        uint64_t FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v95);
        uint64_t v51 = *(mlir::MLIRContext **)(v95 + 24);
        {
          unint64_t v52 = v9 & 0xFFFFFFFFFFFFFF00;
          goto LABEL_80;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
        unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v53);
        if (NumElements == 1 || *(void *)v103[0] == IndexFromDim)
        {
          GOC = v8;
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&GOC);
          if (DefiningOp)
          {
            uint64_t v57 = DefiningOp;
            uint64_t v58 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v57 + 48) + 32))(*(void *)(v57 + 48), v58))
            {
              if (a5) {
                uint64_t v59 = v93;
              }
              else {
                uint64_t v59 = 0;
              }
              if (a5) {
                unsigned int v60 = 0;
              }
              else {
                unsigned int v60 = v93;
              }
              uint64_t v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
              goto LABEL_79;
            }
          }
          if (NumElements == 1)
          {
            if ((a5 & 1) == 0) {
              goto LABEL_78;
            }
            goto LABEL_75;
          }
          uint64_t v8 = v93;
        }
        GOC = v101;
        uint64_t v100 = 0xC00000000;
        uint64_t v88 = 0;
        if (GOCConstantValue)
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          if (!(_BYTE)v56)
          {
            int v80 = 0;
LABEL_70:
            if (GOC != v101) {
              free(GOC);
            }
            if (v80)
            {
              if ((a5 & 1) == 0)
              {
LABEL_78:
                long long v83 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                p_GOC = (void *)mlir::MemRefType::get(v83, v84, FunctionType, 0, 0, 0);
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::MemRefType,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, (uint64_t *)&p_GOC, &v94, (uint64_t *)&v93);
                uint64_t v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
                goto LABEL_79;
              }
              if (GOCConstantValue)
              {
LABEL_76:
                long long v81 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                p_GOC = (void *)mlir::MemRefType::get(v81, v82, FunctionType, 0, 0, 0);
                GOC = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::MemRefType,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, (uint64_t *)&p_GOC, &v94, (uint64_t *)&v93);
                uint64_t v61 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&GOC);
LABEL_79:
                LOBYTE(v9) = v61;
                unint64_t v52 = v61 & 0xFFFFFFFFFFFFFF00;
LABEL_80:
                if (v103[0] != v104) {
                  free(v103[0]);
                }
                return v52 & 0xFFFFFFFFFFFFFF00 | v9;
              }
LABEL_75:
              GOC = mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a6 + 8), 0.0, v56);
              v93 = (char *)mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a6 + 8), (uint64_t)v51, (uint64_t *)&v93, (uint64_t *)&GOC)- 16;
              goto LABEL_76;
            }
LABEL_77:
            LOBYTE(v9) = 0;
            unint64_t v52 = 0;
            goto LABEL_80;
          }
          v93 = (char *)GOCConstant - 16;
        }
        else
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          uint64_t v87 = 1;
          llvm::SmallVector<long long,6u>::SmallVector((uint64_t)&p_GOC, v69, (unint64_t *)&v87);
          uint64_t v70 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
          uint64_t v72 = mlir::ShapedType::getNumElements(v70, v71);
          uint64_t v73 = p_GOC;
          *((void *)p_GOC + *(void *)v103[0]) = v72;
          uint64_t v74 = (mlir::AffineMap *)v97;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
          uint64_t v87 = mlir::MemRefType::get(v73, v74, OperandRange, 0, 0, 0);
          uint64_t v76 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          uint64_t v78 = v77;
          uint64_t v79 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
          uint64_t v86 = mlir::MemRefType::get(v76, v78, v79, 0, 0, 0);
          v93 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v87, (uint64_t *)&v93)- 16;
          v93 = (char *)mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>((mlir::OpBuilder *)(a6 + 8), (uint64_t)v51, &v86, (uint64_t *)&v93)- 16;
          if (p_GOC != &v98) {
            free(p_GOC);
          }
        }
        int v80 = 1;
        goto LABEL_70;
      }
    }
    else
    {
LABEL_20:
      long long v90 = v23;
      uint64_t v91 = 0;
      if (v12) {
        goto LABEL_21;
      }
    }
  }
  GOC = "failed: quantization inputs must be static";
  __int16 v102 = 259;
  p_GOC = &GOC;
  uint64_t v65 = *(void *)(a6 + 16);
  if (v65 && mlir::RewriterBase::Listener::classof(v65)) {
    (*(void (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v65 + 64))(v65, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::QuantizeOp &>(mlir::mps::QuantizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_GOC);
  }
  LOBYTE(v9) = 0;
  unint64_t v52 = 0;
  return v52 & 0xFFFFFFFFFFFFFF00 | v9;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Quant,mlir::ShapedType &,mlir::Value,llvm::APFloat,int &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.quant", (const unsigned __int8 *)0xA, Context);
  if (!v14)
  {
    __int16 v28 = 1283;
    v27[2] = (uint64_t)"anec.quant";
    v27[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  unint64_t v18 = *(void **)(a5 + 8);
  uint64_t v17 = (void *)(a5 + 8);
  uint64_t v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v20 == v18) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v17);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v30, (uint64_t)v17);
  }
  mlir::anec::DeQuant::build(a1, (uint64_t)v31, v15, v16, (uint64_t)v29, *a6);
  if (v20 == (void *)v30[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  }
  unint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Quant,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::convertToQuantizationUnit(mlir::mps::QuantizeOp,mlir::mps::QuantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support scalar constant scale value");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertQuantizationOp<mlir::mps::QuantizeOp>::convertToQuantizationUnit(mlir::mps::QuantizeOp,mlir::mps::QuantizeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ANEC only support zeroPoint constant scale value");
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::MemRefType,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.add";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv2DDataGradientOpGenericAdaptorBase::Conv2DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv2DDataGradientOpGenericAdaptorBase::Conv2DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 96);
  uint64_t v9 = *(void *)(a3 + 104);
  unint64_t v37 = v8;
  uint64_t v38 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = v23;
        if (v37)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v35 = 259;
      v32[0] = v34;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 96);
        long long v29 = *(_OWORD *)(a3 + 64);
        v36[5] = *(_OWORD *)(a3 + 80);
        v36[6] = v28;
        long long v30 = *(_OWORD *)(a3 + 16);
        v36[0] = *(_OWORD *)a3;
        v36[1] = v30;
        long long v31 = *(_OWORD *)(a3 + 32);
        v36[3] = *(_OWORD *)(a3 + 48);
        v36[4] = v29;
        v36[2] = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v36, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v38;
    if (v37 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v35 = 259;
  long long v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v342 = *MEMORY[0x1E4F143B8];
  uint64_t v311 = a2;
  long long v341 = *(_OWORD *)(a3 + 96);
  char v310 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v309 = mlir::ValueRange::dereference_iterator(&v341, 0);
  uint64_t v308 = mlir::ValueRange::dereference_iterator(&v341, 1);
  uint64_t v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v311);
  uint64_t v9 = (uint64_t *)(*(void *)(v309 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  v307[0] = v9;
  v307[1] = v19;
  uint64_t v20 = (uint64_t *)(*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v20) {
    goto LABEL_20;
  }
  uint64_t v21 = *v20;
  unint64_t v22 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v23 = *(unsigned int *)(v21 + 16);
  if (!v23) {
    goto LABEL_20;
  }
  uint64_t v24 = *(void **)(v21 + 8);
  uint64_t v25 = &v24[2 * v23];
  do
  {
    unint64_t v26 = v23 >> 1;
    uint64_t v27 = &v24[2 * (v23 >> 1)];
    unint64_t v29 = *v27;
    long long v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22) {
      uint64_t v24 = v28;
    }
    else {
      unint64_t v23 = v26;
    }
  }
  while (v23);
  if (v24 != v25 && *v24 == v22) {
    uint64_t v30 = v24[1];
  }
  else {
LABEL_20:
  }
    uint64_t v30 = 0;
  v306[0] = v20;
  v306[1] = v30;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v306);
  uint64_t v33 = v32;
  long long v34 = (void *)(*(void *)(v308 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v34) {
    goto LABEL_30;
  }
  uint64_t v35 = *v34;
  unint64_t v36 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v37 = *(unsigned int *)(v35 + 16);
  if (!v37) {
    goto LABEL_30;
  }
  uint64_t v38 = *(void **)(v35 + 8);
  uint64_t v39 = &v38[2 * v37];
  do
  {
    unint64_t v40 = v37 >> 1;
    unint64_t v41 = &v38[2 * (v37 >> 1)];
    unint64_t v43 = *v41;
    uint64_t v42 = v41 + 2;
    v37 += ~(v37 >> 1);
    if (v43 < v36) {
      uint64_t v38 = v42;
    }
    else {
      unint64_t v37 = v40;
    }
  }
  while (v37);
  if (v38 != v39 && *v38 == v36) {
    uint64_t v44 = v38[1];
  }
  else {
LABEL_30:
  }
    uint64_t v44 = 0;
  v304 = v34;
  uint64_t v305 = v44;
  *(void *)&long long v318 = v311;
  unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v318);
  uint64_t v45 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v304);
  uint64_t v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v304);
  uint64_t v48 = (unsigned char *)(v46 + 8 * v47);
  v338 = v340;
  unint64_t v339 = 0x400000000;
  uint64_t v49 = v48 - v45;
  if ((unint64_t)(v48 - v45) < 0x21)
  {
    int v50 = 0;
    if (v48 == v45) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v338, v340, v49 >> 3, 8);
  int v50 = v339;
  if (v48 != v45)
  {
LABEL_35:
    memcpy(&v338[8 * v50], v45, v48 - v45);
    int v50 = v339;
  }
LABEL_36:
  LODWORD(v339) = v50 + ((unint64_t)v49 >> 3);
  v335 = v337;
  uint64_t v336 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v311);
  uint64_t v52 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_45;
  }
  uint64_t v53 = *InputAttributeNames;
  unint64_t v54 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v55 = *(unsigned int *)(v53 + 16);
  if (!v55) {
    goto LABEL_45;
  }
  unint64_t v56 = *(void **)(v53 + 8);
  uint64_t v57 = &v56[2 * v55];
  do
  {
    unint64_t v58 = v55 >> 1;
    uint64_t v59 = &v56[2 * (v55 >> 1)];
    unint64_t v61 = *v59;
    unsigned int v60 = v59 + 2;
    v55 += ~(v55 >> 1);
    if (v61 < v54) {
      unint64_t v56 = v60;
    }
    else {
      unint64_t v55 = v58;
    }
  }
  while (v55);
  if (v56 != v57 && *v56 == v54) {
    uint64_t v62 = v56[1];
  }
  else {
LABEL_45:
  }
    uint64_t v62 = 0;
  mlir::getIntValues<unsigned long long>(v52, v62, (uint64_t)&v335, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v311))
  {
    uint64_t v63 = *(void *)(a4 + 16);
    if (!v63) {
      goto LABEL_51;
    }
    uint64_t v64 = v311;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_51;
    }
    uint64_t v65 = *(void *)(v64 + 24);
LABEL_50:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v63 + 64))(v63, v65, v66, &v318);
LABEL_51:
    uint64_t v67 = 0;
    int v68 = 0;
    goto LABEL_52;
  }
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v311) != 2
    && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v311) != 3)
  {
    uint64_t v63 = *(void *)(a4 + 16);
    if (!v63) {
      goto LABEL_51;
    }
    uint64_t v114 = v311;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_51;
    }
    uint64_t v65 = *(void *)(v114 + 24);
    goto LABEL_50;
  }
  long long v302 = 0uLL;
  uint64_t v300 = 0;
  uint64_t v301 = 0;
  v298 = 0;
  uint64_t v299 = 0;
  uint64_t v296 = 0;
  uint64_t v297 = 0;
  uint64_t v70 = *(void **)(*(void *)(v311 + 72) + 56);
  *(void *)&long long v318 = &v302;
  *((void *)&v318 + 1) = &v300;
  *(void *)&long long v319 = &v298;
  *((void *)&v319 + 1) = &v296;
  ArgOperands = v70;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (v326 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v332) = 1,
        __p = &v332,
        uint64_t v330 = (uint64_t)&v326,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v318, (uint64_t)&__p), !(_BYTE)v332))
  {
    uint64_t v72 = *(void *)(*(void *)(v311 + 72) + 56);
    uint64_t v330 = (uint64_t)&v300;
    *(void *)&v331[0] = &v298;
    *((void *)&v331[0] + 1) = &v296;
    *(void *)&long long v295 = v72;
    uint64_t v73 = mlir::Value::getDefiningOp((mlir::Value *)&v295);
    if (!v73) {
      goto LABEL_75;
    }
    v332 = (void *)v73;
    if (*(_UNKNOWN **)(*(void *)(v73 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      goto LABEL_75;
    }
    if ((*(unsigned char *)(v73 + 46) & 0x80) == 0) {
      goto LABEL_75;
    }
    if (*(_DWORD *)(v73 + 68) != 4) {
      goto LABEL_75;
    }
    LOBYTE(v314) = 1;
    v326 = &v314;
    uint64_t v327 = (uint64_t)&v332;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v326);
    if (!(_BYTE)v314) {
      goto LABEL_75;
    }
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v298);
  uint64_t v316 = v74;
  uint64_t v75 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v75, v76) == 1 && mlir::ElementsAttr::getNumElements(v296, v297) == 1) {
    BOOL v77 = (mlir::getSingleFloatValue<float>(v296, v297) & 0x7FFFFFFF) == 0;
  }
  else {
LABEL_75:
  }
    BOOL v77 = 0;
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v79 = 1;
  }
  else {
    BOOL v79 = (void)v302 == 0;
  }
  int v80 = !v79;
  if (v79)
  {
    uint64_t v86 = 0;
    uint64_t v284 = 0;
  }
  else
  {
    uint64_t v284 = mlir::convertElementsAttr(v300, v301, 1);
    *(void *)&long long v318 = mlir::getElementTypeOrSelf(v298);
    BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v318);
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v298);
    uint64_t v330 = v83;
    LOBYTE(v318) = 0;
    LOBYTE(v319) = 0;
    uint64_t v84 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v318, IntegerType);
    uint64_t v86 = mlir::rewriteElementsAttr((uint64_t)v298, v299, v84, v85, 1);
  }
  long long v295 = 0uLL;
  __p = &v295;
  *(void *)&long long v318 = v308;
  uint64_t v87 = mlir::Value::getDefiningOp((mlir::Value *)&v318);
  if ((!v87 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&__p, v87))
    && (!v77 || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v311) == 3))
  {
    uint64_t v63 = *(void *)(a4 + 16);
    if (!v63) {
      goto LABEL_51;
    }
    uint64_t v88 = v311;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_51;
    }
    uint64_t v65 = *(void *)(v88 + 24);
    goto LABEL_50;
  }
  v280 = v86;
  int v282 = v80;
  if (v80)
  {
    long long v295 = v302;
    unint64_t v89 = v338;
    long long v90 = (mlir::AffineMap *)v339;
    *(void *)&long long v318 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v295);
    *((void *)&v318 + 1) = v91;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v318);
    __p = (void *)mlir::MemRefType::get(v89, v90, OperandRange, 0, 0, 0);
    uint64_t v308 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (void **)&v295)- 16;
  }
  uint64_t v281 = v7;
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v311) == 3)
  {
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v308);
    uint64_t v94 = operator new(0x40uLL);
    *(void *)&v331[0] = v94 + 4;
    *uint64_t v94 = xmmword_181110B50;
    v94[1] = xmmword_181110B60;
    v94[2] = xmmword_181110B70;
    v94[3] = xmmword_181110B80;
    __p = v94;
    uint64_t v330 = (uint64_t)(v94 + 4);
    *(void *)&long long v318 = &v319;
    *((void *)&v318 + 1) = 0x100000000;
    mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v318, Loc, &v308, (uint64_t)&__p);
    uint64_t v95 = *(void *)v318;
    if ((long long *)v318 != &v319) {
      free((void *)v318);
    }
    uint64_t v308 = v95;
    if (__p)
    {
      uint64_t v330 = (uint64_t)__p;
      operator delete(__p);
      uint64_t v95 = v308;
    }
    uint64_t v96 = (void *)(*(void *)(v95 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v96) {
      goto LABEL_108;
    }
    uint64_t v97 = *v96;
    unint64_t v98 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v99 = *(unsigned int *)(v97 + 16);
    if (!v99) {
      goto LABEL_108;
    }
    uint64_t v100 = *(void **)(v97 + 8);
    v101 = &v100[2 * v99];
    do
    {
      unint64_t v102 = v99 >> 1;
      unint64_t v103 = &v100[2 * (v99 >> 1)];
      unint64_t v105 = *v103;
      unint64_t v104 = v103 + 2;
      v99 += ~(v99 >> 1);
      if (v105 < v98) {
        uint64_t v100 = v104;
      }
      else {
        unint64_t v99 = v102;
      }
    }
    while (v99);
    if (v100 != v101 && *v100 == v98) {
      uint64_t v106 = v100[1];
    }
    else {
LABEL_108:
    }
      uint64_t v106 = 0;
    v304 = v96;
    uint64_t v305 = v106;
    unint64_t v107 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v304);
    uint64_t v108 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v304);
    unint64_t v110 = (unsigned char *)(v108 + 8 * v109);
    *(void *)&long long v318 = &v319;
    *((void *)&v318 + 1) = 0x400000000;
    uint64_t v111 = v110 - v107;
    if ((unint64_t)(v110 - v107) < 0x21)
    {
      unsigned int v112 = 0;
      uint64_t v113 = (char *)&v319;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v318, &v319, v111 >> 3, 8);
      unsigned int v112 = DWORD2(v318);
      uint64_t v113 = (char *)v318;
    }
    if (v110 != v107)
    {
      memcpy(&v113[8 * v112], v107, v110 - v107);
      unsigned int v112 = DWORD2(v318);
      uint64_t v113 = (char *)v318;
    }
    unint64_t v115 = v112 + ((unint64_t)v111 >> 3);
    DWORD2(v318) = v112 + ((unint64_t)v111 >> 3);
    if (v113 != (char *)&v319)
    {
      if (v338 != v340)
      {
        free(v338);
        uint64_t v113 = (char *)v318;
        LODWORD(v115) = DWORD2(v318);
      }
      v338 = v113;
      unint64_t v339 = __PAIR64__(HIDWORD(v318), v115);
      *(void *)&long long v318 = &v319;
      HIDWORD(v318) = 0;
      goto LABEL_136;
    }
    uint64_t v116 = v339;
    if (v339 >= v115)
    {
      if (v115) {
        memmove(v338, &v319, 8 * v115);
      }
      goto LABEL_135;
    }
    if (HIDWORD(v339) >= v115)
    {
      if (v339)
      {
        memmove(v338, &v319, 8 * v339);
        goto LABEL_133;
      }
    }
    else
    {
      LODWORD(v339) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v338, v340, v115, 8);
    }
    uint64_t v116 = 0;
LABEL_133:
    if (v116 != DWORD2(v318)) {
      memcpy(&v338[8 * v116], (const void *)(v318 + 8 * v116), 8 * DWORD2(v318) - 8 * v116);
    }
LABEL_135:
    LODWORD(v339) = v115;
LABEL_136:
    DWORD2(v318) = 0;
    if ((long long *)v318 != &v319) {
      free((void *)v318);
    }
  }
  *(void *)&long long v318 = 3;
  uint64_t v117 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  unint64_t v118 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v318, 1, v117, 0);
  *(void *)&long long v318 = 6;
  uint64_t v119 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v283 = (void *)mlir::RankedTensorType::get((uint64_t)&v318, 1, v119, 0);
  v332 = v334;
  uint64_t v333 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v311);
  uint64_t v121 = (uint64_t)Strides;
  if (Strides)
  {
    uint64_t v122 = *Strides;
    unint64_t v123 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v124 = *(unsigned int *)(v122 + 16);
    if (!v124)
    {
      uint64_t v131 = 0;
      goto LABEL_150;
    }
    unint64_t v125 = *(void **)(v122 + 8);
    uint64_t v126 = &v125[2 * v124];
    do
    {
      unint64_t v127 = v124 >> 1;
      uint64_t v128 = &v125[2 * (v124 >> 1)];
      unint64_t v130 = *v128;
      unint64_t v129 = v128 + 2;
      v124 += ~(v124 >> 1);
      if (v130 < v123) {
        unint64_t v125 = v129;
      }
      else {
        unint64_t v124 = v127;
      }
    }
    while (v124);
    if (v125 != v126 && *v125 == v123)
    {
      uint64_t v131 = v125[1];
      goto LABEL_150;
    }
  }
  uint64_t v131 = 0;
LABEL_150:
  mlir::getIntValues<unsigned long long>(v121, v131, (uint64_t)&v332, 1);
  v132 = v332;
  if (*v332 != 1 || v332[1] != 1)
  {
    uint64_t v134 = *(void *)(a4 + 16);
    if (!v134) {
      goto LABEL_158;
    }
    uint64_t v135 = v311;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_158;
    }
    uint64_t v136 = *(void *)(v135 + 24);
    goto LABEL_157;
  }
  uint64_t v133 = 8 * v333 - 16;
  if (v333 != 2) {
    memmove(v332, v332 + 2, 8 * v333 - 16);
  }
  LODWORD(v333) = (unint64_t)(&v132[v133] - (unsigned char *)v332) >> 3;
  *(void *)&long long v318 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v332, (uint64_t)v332, (uint64_t *)&v318);
  if (v118)
  {
    uint64_t v138 = *v118;
    unint64_t v139 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v140 = *(unsigned int *)(v138 + 16);
    if (!v140) {
      goto LABEL_171;
    }
    v141 = *(void **)(v138 + 8);
    v142 = &v141[2 * v140];
    do
    {
      unint64_t v143 = v140 >> 1;
      v144 = &v141[2 * (v140 >> 1)];
      unint64_t v146 = *v144;
      v145 = v144 + 2;
      v140 += ~(v140 >> 1);
      if (v146 < v139) {
        v141 = v145;
      }
      else {
        unint64_t v140 = v143;
      }
    }
    while (v140);
    if (v141 != v142 && *v141 == v139) {
      uint64_t v147 = v141[1];
    }
    else {
LABEL_171:
    }
      uint64_t v147 = 0;
  }
  else
  {
    uint64_t v147 = 0;
  }
  uint64_t v294 = mlir::DenseElementsAttr::getFromRawBuffer(v118, v147, v332, 8 * v333, 8, 1, 0);
  uint64_t v148 = v335;
  if (*v335 != 1 || v335[1] != 1)
  {
    uint64_t v134 = *(void *)(a4 + 16);
    if (!v134) {
      goto LABEL_158;
    }
    uint64_t v150 = v311;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_158;
    }
    uint64_t v136 = *(void *)(v150 + 24);
    goto LABEL_157;
  }
  uint64_t v149 = 8 * v336 - 16;
  if (v336 != 2) {
    memmove(v335, v335 + 2, 8 * v336 - 16);
  }
  LODWORD(v336) = (unint64_t)(&v148[v149] - (unsigned char *)v335) >> 3;
  *(void *)&long long v318 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v335, (uint64_t)v335, (uint64_t *)&v318);
  if (!v118) {
    goto LABEL_191;
  }
  uint64_t v151 = *v118;
  unint64_t v152 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v153 = *(unsigned int *)(v151 + 16);
  if (!v153) {
    goto LABEL_191;
  }
  v154 = *(void **)(v151 + 8);
  v155 = &v154[2 * v153];
  do
  {
    unint64_t v156 = v153 >> 1;
    uint64_t v157 = &v154[2 * (v153 >> 1)];
    unint64_t v159 = *v157;
    v158 = v157 + 2;
    v153 += ~(v153 >> 1);
    if (v159 < v152) {
      v154 = v158;
    }
    else {
      unint64_t v153 = v156;
    }
  }
  while (v153);
  if (v154 != v155 && *v154 == v152) {
    uint64_t v160 = v154[1];
  }
  else {
LABEL_191:
  }
    uint64_t v160 = 0;
  unint64_t v292 = 0;
  uint64_t v293 = mlir::DenseElementsAttr::getFromRawBuffer(v118, v160, v335, 8 * v336, 8, 1, 0);
  unint64_t v162 = v335[1];
  unint64_t v161 = v335[2];
  BOOL v163 = v162 > 1 || v161 > 1;
  int v164 = v163;
  uint64_t v278 = (*((void *)v338 + 2) - 1) * v162;
  uint64_t v279 = (*((void *)v338 + 3) - 1) * v161;
  unint64_t v290 = 0;
  unint64_t v291 = 0;
  uint64_t v289 = 0;
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v311);
  uint64_t v166 = (uint64_t)Rewriter;
  if (!Rewriter) {
    goto LABEL_207;
  }
  uint64_t v167 = *Rewriter;
  unint64_t v168 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v169 = *(unsigned int *)(v167 + 16);
  if (!v169) {
    goto LABEL_207;
  }
  v170 = *(void **)(v167 + 8);
  v171 = &v170[2 * v169];
  do
  {
    unint64_t v172 = v169 >> 1;
    v173 = &v170[2 * (v169 >> 1)];
    unint64_t v175 = *v173;
    v174 = v173 + 2;
    v169 += ~(v169 >> 1);
    if (v175 < v168) {
      v170 = v174;
    }
    else {
      unint64_t v169 = v172;
    }
  }
  while (v169);
  if (v170 != v171 && *v170 == v168) {
    uint64_t v176 = v170[1];
  }
  else {
LABEL_207:
  }
    uint64_t v176 = 0;
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v311);
  {
    __p = v331;
    memset(v331, 0, sizeof(v331));
    uint64_t v330 = 0x600000006;
    v326 = v328;
    memset(v328, 0, sizeof(v328));
    uint64_t v327 = 0x600000006;
    if (v164)
    {
      uint64_t v178 = *(void *)(a4 + 16);
      if (v178)
      {
        uint64_t v179 = v311;
        if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      }
        }
      uint64_t v67 = 0;
      int v68 = 0;
LABEL_317:
      if (v326 != v328) {
        free(v326);
      }
      if (__p != v331) {
        free(__p);
      }
      goto LABEL_159;
    }
    uint64_t v181 = *(void *)(ArgAttrsAttr + 16);
    uint64_t v182 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v307) + 16);
    uint64_t v183 = v332[1];
    unint64_t v184 = v292;
    uint64_t v185 = *(void *)(ArgAttrsAttr + 24);
    uint64_t v186 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v307) + 24);
    v187 = v332;
    uint64_t v188 = v332[2];
    *(void *)&long long v318 = &v319;
    long long v319 = 0u;
    long long v321 = 0u;
    uint64_t v189 = v188 - v188 * v186;
    *((void *)&v318 + 1) = 0x600000006;
    long long v320 = v278 - v184;
    uint64_t v190 = v184 + v181 + v183 - v183 * v182 - v332[1];
    *((void *)&v320 + 1) = v190;
    *(void *)&long long v321 = v279 - v290;
    *((void *)&v321 + 1) = v290 + v185 + v189 - v332[2];
    v191 = v326;
    if ((uint64_t)(v278 - v184) > v278)
    {
      *((void *)v326 + 2) = -(uint64_t)v184;
      *(void *)&long long v320 = v278;
      uint64_t v190 = *((void *)&v320 + 1);
    }
    BOOL v163 = v190 <= v278;
    uint64_t v192 = v190 - v278;
    v193 = v283;
    if (!v163)
    {
      v191[3] = v192;
      *((void *)&v320 + 1) = v278;
    }
    if ((uint64_t)v321 > v279)
    {
      v191[4] = v321 - v279;
      *(void *)&long long v321 = v279;
    }
    if (*((uint64_t *)&v321 + 1) > v279)
    {
      v191[5] = *((void *)&v321 + 1) - v279;
      *((void *)&v321 + 1) = v279;
    }
    uint64_t v194 = *v187 + v319 - 2 + *((void *)&v319 + 1);
    if (v194 >= 1)
    {
      *((void *)&v319 + 1) = 2 - (*v187 + v319);
      v191[1] += v194;
    }
    if (v278 + 2 >= 0) {
      uint64_t v195 = (v278 + 2) & 1;
    }
    else {
      uint64_t v195 = -((v278 + 2) & 1);
    }
    uint64_t v196 = v195 + 2 * ~v278 + v187[1] + v320;
    uint64_t v197 = v196 + *((void *)&v320 + 1);
    if (v196 + *((void *)&v320 + 1) >= 1)
    {
      *((void *)&v320 + 1) = -v196;
      v191[3] += v197;
    }
    uint64_t v198 = v187[2];
    if (v279 + 2 >= 0) {
      uint64_t v199 = (v279 + 2) & 1;
    }
    else {
      uint64_t v199 = -((v279 + 2) & 1);
    }
    uint64_t v200 = v199 + 2 * ~v279 + v198 + v321;
    uint64_t v201 = v200 + *((void *)&v321 + 1);
    if (v200 + *((void *)&v321 + 1) >= 1)
    {
      *((void *)&v321 + 1) = -v200;
      v191[5] += v201;
    }
    v202 = __p;
    *(void *)__p = -(uint64_t)(v319 & ((uint64_t)v319 >> 63));
    *(void *)&long long v319 = v319 & ~((uint64_t)v319 >> 63);
    v202[1] = -(*((void *)&v319 + 1) & (*((uint64_t *)&v319 + 1) >> 63));
    *((void *)&v319 + 1) &= ~(*((uint64_t *)&v319 + 1) >> 63);
    v202[2] = -(uint64_t)(v320 & ((uint64_t)v320 >> 63));
    *(void *)&long long v320 = v320 & ~((uint64_t)v320 >> 63);
    v202[3] = -(*((void *)&v320 + 1) & (*((uint64_t *)&v320 + 1) >> 63));
    *((void *)&v320 + 1) &= ~(*((uint64_t *)&v320 + 1) >> 63);
    v202[4] = -(uint64_t)(v321 & ((uint64_t)v321 >> 63));
    *(void *)&long long v321 = v321 & ~((uint64_t)v321 >> 63);
    v202[5] = -(*((void *)&v321 + 1) & (*((uint64_t *)&v321 + 1) >> 63));
    uint64_t v203 = v321;
    uint64_t v204 = *((void *)&v321 + 1) & ~(*((uint64_t *)&v321 + 1) >> 63);
    *((void *)&v321 + 1) = v204;
    long long v205 = v320;
    unint64_t v291 = *((void *)&v320 + 1);
    unint64_t v292 = v320;
    uint64_t v289 = v204;
    unint64_t v290 = v321;
    if (v283)
    {
      uint64_t v206 = *v283;
      unint64_t v207 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v208 = *(unsigned int *)(v206 + 16);
      if (v208)
      {
        v209 = *(void **)(v206 + 8);
        v210 = &v209[2 * v208];
        do
        {
          unint64_t v211 = v208 >> 1;
          v212 = &v209[2 * (v208 >> 1)];
          unint64_t v214 = *v212;
          v213 = v212 + 2;
          v208 += ~(v208 >> 1);
          if (v214 < v207) {
            v209 = v213;
          }
          else {
            unint64_t v208 = v211;
          }
        }
        while (v208);
        uint64_t v215 = v281;
        if (v209 != v210 && *v209 == v207) {
          uint64_t v216 = v209[1];
        }
        else {
          uint64_t v216 = 0;
        }
      }
      else
      {
        uint64_t v216 = 0;
        uint64_t v215 = v281;
      }
      v193 = v283;
    }
    else
    {
      uint64_t v216 = 0;
      uint64_t v215 = v281;
    }
    long long v318 = 0uLL;
    long long v319 = v205;
    *(void *)&long long v320 = v203;
    *((void *)&v320 + 1) = v204;
    uint64_t v287 = 0;
    uint64_t v288 = mlir::DenseElementsAttr::getFromRawBuffer(v193, v216, &v318, 48, 8, 1, 0);
    uint64_t v217 = *(void *)(v311 + 24);
    if (v282)
    {
      v218 = v280;
      v219 = (uint64_t *)(a4 + 8);
      uint64_t v220 = v284;
    }
    else
    {
      uint64_t v220 = 0;
      v218 = 0;
      v219 = (uint64_t *)(a4 + 8);
    }
    *(void *)&long long v318 = v220;
    ArgOperands = v218;
    uint64_t v286 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v219, v217, &v309, &v308, &v294, &v293, &v288, &v287, (uint64_t *)&Groups, &v310, (uint64_t *)&v318, (uint64_t *)&ArgOperands)- 16;
    if (!v327)
    {
LABEL_290:
      v251 = __p;
      if (*((void *)__p + 2) || *((void *)__p + 3))
      {
        v252 = (uint64_t *)(*(void *)(v286 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v252) {
          goto LABEL_301;
        }
        uint64_t v253 = *v252;
        unint64_t v254 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v255 = *(unsigned int *)(v253 + 16);
        if (!v255) {
          goto LABEL_301;
        }
        v256 = *(void **)(v253 + 8);
        v257 = &v256[2 * v255];
        do
        {
          unint64_t v258 = v255 >> 1;
          v259 = &v256[2 * (v255 >> 1)];
          unint64_t v261 = *v259;
          v260 = v259 + 2;
          v255 += ~(v255 >> 1);
          if (v261 < v254) {
            v256 = v260;
          }
          else {
            unint64_t v255 = v258;
          }
        }
        while (v255);
        if (v256 != v257 && *v256 == v254) {
          uint64_t v262 = v256[1];
        }
        else {
LABEL_301:
        }
          uint64_t v262 = 0;
        *(void *)&long long v318 = v252;
        *((void *)&v318 + 1) = v262;
        uint64_t v263 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v318) + 16);
        LODWORD(v314) = 2;
        uint64_t v264 = *((void *)__p + 3);
        *(void *)&long long v318 = *((void *)__p + 2);
        ArgOperands = (void *)(v263 - (v318 + v264));
        uint64_t v286 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v219, v215, &v286, (int *)&v314, (uint64_t *)&v318, (uint64_t *)&ArgOperands)- 16;
        v251 = __p;
      }
      if (v251[4] || v251[5])
      {
        v265 = (uint64_t *)(*(void *)(v286 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v265) {
          goto LABEL_314;
        }
        uint64_t v266 = *v265;
        unint64_t v267 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v268 = *(unsigned int *)(v266 + 16);
        if (!v268) {
          goto LABEL_314;
        }
        v269 = *(void **)(v266 + 8);
        v270 = &v269[2 * v268];
        do
        {
          unint64_t v271 = v268 >> 1;
          v272 = &v269[2 * (v268 >> 1)];
          unint64_t v274 = *v272;
          v273 = v272 + 2;
          v268 += ~(v268 >> 1);
          if (v274 < v267) {
            v269 = v273;
          }
          else {
            unint64_t v268 = v271;
          }
        }
        while (v268);
        if (v269 != v270 && *v269 == v267) {
          uint64_t v275 = v269[1];
        }
        else {
LABEL_314:
        }
          uint64_t v275 = 0;
        *(void *)&long long v318 = v265;
        *((void *)&v318 + 1) = v275;
        uint64_t v276 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v318) + 24);
        LODWORD(v314) = 3;
        uint64_t v277 = *((void *)__p + 5);
        *(void *)&long long v318 = *((void *)__p + 4);
        ArgOperands = (void *)(v276 - (v318 + v277));
        uint64_t v286 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v219, v215, &v286, (int *)&v314, (uint64_t *)&v318, (uint64_t *)&ArgOperands)- 16;
      }
      uint64_t v67 = mlir::Value::getDefiningOp((mlir::Value *)&v286);
      int v68 = 1;
      goto LABEL_317;
    }
    v221 = v326;
    uint64_t v222 = 8 * v327;
    v223 = (uint64_t *)v326;
    while (*v223 < 1)
    {
      ++v223;
      v222 -= 8;
      if (!v222) {
        goto LABEL_290;
      }
    }
    *(void *)&long long v318 = &v319;
    long long v319 = 0u;
    long long v320 = 0u;
    long long v321 = 0u;
    *((void *)&v318 + 1) = 0xA0000000ALL;
    ArgOperands = v317;
    memset_pattern16(v317, &unk_181110BB0, 0x28uLL);
    uint64_t v316 = 0x500000005;
    *(int64x2_t *)&v317[24] = vdupq_n_s64(6uLL);
    uint64_t v322 = v221[2];
    uint64_t v323 = v221[3];
    uint64_t v324 = v221[4];
    uint64_t v325 = v221[5];
    long long v314 = xmmword_1810FE2F0;
    uint64_t v224 = mlir::Builder::getIntegerType((mlir::Builder *)v219, 0x40u, 0);
    v225 = (void *)mlir::RankedTensorType::get((uint64_t)&v314, 2, v224, 0);
    v226 = v225;
    if (!v225) {
      goto LABEL_271;
    }
    uint64_t v227 = *v225;
    unint64_t v228 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v229 = *(unsigned int *)(v227 + 16);
    if (v229)
    {
      v230 = *(void **)(v227 + 8);
      v231 = &v230[2 * v229];
      do
      {
        unint64_t v232 = v229 >> 1;
        v233 = &v230[2 * (v229 >> 1)];
        unint64_t v235 = *v233;
        v234 = v233 + 2;
        v229 += ~(v229 >> 1);
        if (v235 < v228) {
          v230 = v234;
        }
        else {
          unint64_t v229 = v232;
        }
      }
      while (v229);
      v219 = (uint64_t *)(a4 + 8);
      if (v230 == v231 || *v230 != v228)
      {
LABEL_271:
        uint64_t v236 = 0;
        goto LABEL_274;
      }
      uint64_t v236 = v230[1];
    }
    else
    {
      uint64_t v236 = 0;
      v219 = (uint64_t *)(a4 + 8);
    }
LABEL_274:
    uint64_t v285 = mlir::DenseElementsAttr::getFromRawBuffer(v226, v236, v318, 8 * DWORD2(v318), 8, 1, 0);
    F16uint64_t FloatAttr = 5;
    uint64_t v237 = mlir::Builder::getIntegerType((mlir::Builder *)v219, 0x40u, 0);
    v238 = (void *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v237, 0);
    v239 = v238;
    if (v238)
    {
      uint64_t v240 = *v238;
      unint64_t v241 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v242 = *(unsigned int *)(v240 + 16);
      if (!v242)
      {
        uint64_t v249 = 0;
        v219 = (uint64_t *)(a4 + 8);
        goto LABEL_286;
      }
      v243 = *(void **)(v240 + 8);
      v244 = &v243[2 * v242];
      do
      {
        unint64_t v245 = v242 >> 1;
        v246 = &v243[2 * (v242 >> 1)];
        unint64_t v248 = *v246;
        v247 = v246 + 2;
        v242 += ~(v242 >> 1);
        if (v248 < v241) {
          v243 = v247;
        }
        else {
          unint64_t v242 = v245;
        }
      }
      while (v242);
      v219 = (uint64_t *)(a4 + 8);
      if (v243 != v244 && *v243 == v241)
      {
        uint64_t v249 = v243[1];
        goto LABEL_286;
      }
    }
    uint64_t v249 = 0;
LABEL_286:
    *(void *)&long long v314 = mlir::DenseElementsAttr::getFromRawBuffer(v239, v249, ArgOperands, 8 * v316, 8, 1, 0);
    F16uint64_t FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v219, 0.0, v250);
    uint64_t v286 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v219, v215, &v286, (uint64_t *)&v314, &v285, &F16FloatAttr)- 16;
    if (ArgOperands != v317) {
      free(ArgOperands);
    }
    if ((long long *)v318 != &v319) {
      free((void *)v318);
    }
    goto LABEL_290;
  }
  uint64_t v134 = *(void *)(a4 + 16);
  if (v134)
  {
    uint64_t v180 = v311;
    if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16)))
    {
      uint64_t v136 = *(void *)(v180 + 24);
LABEL_157:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v134 + 64))(v134, v136, v137, &v318);
    }
  }
LABEL_158:
  uint64_t v67 = 0;
  int v68 = 0;
LABEL_159:
  if (v332 != (void *)v334) {
    free(v332);
  }
LABEL_52:
  if (v335 != (void *)v337) {
    free(v335);
  }
  if (v338 != v340) {
    free(v338);
  }
  if (!v68) {
    return 0;
  }
  *(void *)&long long v318 = v67 - 16;
  uint64_t v69 = 1;
  mlir::ValueRange::ValueRange(v312, (uint64_t)&v318, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v312[0], v312[1]);
  return v69;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.input_view", (const unsigned __int8 *)0xF, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.input_view";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::InputView::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  unint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>(uint64_t ***a1, uint64_t a2)
{
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v6 = DefiningOp;
  if (DefiningOp)
  {
    uint64_t v16 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::QuantizeOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 3)
    {
      char v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> &,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> & &)#1},0ul,1ul,2ul>((uint64_t)a1, (uint64_t)v14);
      BOOL v5 = v15 != 0;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  BOOL v7 = v5 && **(unsigned char **)a2 != 0;
  if (!v6) {
    BOOL v7 = 0;
  }
  **(unsigned char **)a2 = v7;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t v8 = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (v8) {
    LOBYTE(v8) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 1, v8);
  }
  if (**(unsigned char **)a2) {
    char v9 = v8;
  }
  else {
    char v9 = 0;
  }
  **(unsigned char **)a2 = v9;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 88);
  uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (v10) {
    LOBYTE(v10) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 2, v10);
  }
  if (**(unsigned char **)a2) {
    char v11 = v10;
  }
  else {
    char v11 = 0;
  }
  **(unsigned char **)a2 = v11;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 120);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (result) {
    uint64_t result = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 3, result);
  }
  if (**(unsigned char **)a2) {
    char v13 = result;
  }
  else {
    char v13 = 0;
  }
  **(unsigned char **)a2 = v13;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> &,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher> & &)#1},0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    uint64_t v4 = DefiningOp;
    uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    LOBYTE(DefiningOp) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 32))(*(void *)(v4 + 48), v5);
  }
  if (**(unsigned char **)a2) {
    char v6 = DefiningOp;
  }
  else {
    char v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v15 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t v7 = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    LOBYTE(v7) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 48) + 32))(*(void *)(v8 + 48), v9);
  }
  if (**(unsigned char **)a2) {
    char v10 = v7;
  }
  else {
    char v10 = 0;
  }
  **(unsigned char **)a2 = v10;
  uint64_t v15 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 88);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 48) + 32))(*(void *)(v12 + 48), v13);
  }
  if (**(unsigned char **)a2) {
    char v14 = result;
  }
  else {
    char v14 = 0;
  }
  **(unsigned char **)a2 = v14;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

void mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a3;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.transpose", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    __int16 v24 = 1283;
    v23[2] = (uint64_t)"anec.transpose";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a3, v11);
  mlir::anec::Transpose::build(a1, (uint64_t)v25, *a4, *(uint64_t **)a5, (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  char v14 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::Operation *)v25, v13);
  uint64_t v15 = *((void *)a1 + 2);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)*((void *)a1 + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v15 + 32, (uint64_t)v14);
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
    uint64_t v17 = *v16;
    *uint64_t v18 = *v16;
    v18[1] = (uint64_t)v16;
    *(void *)(v17 + 8) = v18;
    *uint64_t v16 = (uint64_t)v18;
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
  }
  if (mlir::OpBuilder::tryFold(a1, (uint64_t)v14, a2))
  {
    mlir::Operation::erase(v14);
  }
  else
  {
    uint64_t v19 = *((void *)a1 + 1);
    if (v19) {
      (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(void *)v19 + 16))(v19, v14);
    }
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DDataGradientOp,mlir::anec::Deconvolution>::convert2D(mlir::mps::Conv2DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Dilation not supported for deconvolution");
}

void *mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::~ConvertConv(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::~ConvertConv(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv2DOpGenericAdaptorBase::Conv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv2DOpGenericAdaptorBase::Conv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 96);
  uint64_t v9 = *(void *)(a3 + 104);
  unint64_t v37 = v8;
  uint64_t v38 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = v23;
        if (v37)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v35 = 259;
      v32[0] = v34;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 96);
        long long v29 = *(_OWORD *)(a3 + 64);
        v36[5] = *(_OWORD *)(a3 + 80);
        v36[6] = v28;
        long long v30 = *(_OWORD *)(a3 + 16);
        v36[0] = *(_OWORD *)a3;
        v36[1] = v30;
        long long v31 = *(_OWORD *)(a3 + 32);
        v36[3] = *(_OWORD *)(a3 + 48);
        v36[4] = v29;
        v36[2] = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v36, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v38;
    if (v37 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v35 = 259;
  uint64_t v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  uint64_t v269 = a2;
  long long v299 = *(_OWORD *)(a3 + 96);
  char v268 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v267 = mlir::ValueRange::dereference_iterator(&v299, 0);
  uint64_t v266 = mlir::ValueRange::dereference_iterator(&v299, 1);
  uint64_t v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v269);
  uint64_t v9 = (uint64_t *)(*(void *)(v267 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  v265[0] = v9;
  v265[1] = v19;
  if (*(void *)(v8 + 8) >= 8uLL) {
    mlir::TypeID::get<mlir::ShapedType>();
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v265);
  uint64_t v22 = v21;
  uint64_t v23 = (void *)(*(void *)(v266 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_22;
  }
  uint64_t v24 = *v23;
  unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v26 = *(unsigned int *)(v24 + 16);
  if (!v26) {
    goto LABEL_22;
  }
  uint64_t v27 = *(void **)(v24 + 8);
  long long v28 = &v27[2 * v26];
  do
  {
    unint64_t v29 = v26 >> 1;
    long long v30 = &v27[2 * (v26 >> 1)];
    unint64_t v32 = *v30;
    long long v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25) {
      uint64_t v27 = v31;
    }
    else {
      unint64_t v26 = v29;
    }
  }
  while (v26);
  if (v27 != v28 && *v27 == v25) {
    uint64_t v33 = v27[1];
  }
  else {
LABEL_22:
  }
    uint64_t v33 = 0;
  uint64_t v263 = v23;
  uint64_t v264 = v33;
  *(void *)&long long v276 = v269;
  unsigned int Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v276);
  long long v34 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  uint64_t v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  unint64_t v37 = (unsigned char *)(v35 + 8 * v36);
  uint64_t v296 = v298;
  unint64_t v297 = 0x400000000;
  uint64_t v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    int v39 = 0;
    if (v37 == v34) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, v298, v38 >> 3, 8);
  int v39 = v297;
  if (v37 != v34)
  {
LABEL_27:
    memcpy(&v296[8 * v39], v34, v37 - v34);
    int v39 = v297;
  }
LABEL_28:
  LODWORD(v297) = v39 + ((unint64_t)v38 >> 3);
  uint64_t v293 = v295;
  uint64_t v294 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v269);
  uint64_t v41 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_37;
  }
  uint64_t v42 = *InputAttributeNames;
  unint64_t v43 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v44 = *(unsigned int *)(v42 + 16);
  if (!v44) {
    goto LABEL_37;
  }
  uint64_t v45 = *(void **)(v42 + 8);
  uint64_t v46 = &v45[2 * v44];
  do
  {
    unint64_t v47 = v44 >> 1;
    uint64_t v48 = &v45[2 * (v44 >> 1)];
    unint64_t v50 = *v48;
    uint64_t v49 = v48 + 2;
    v44 += ~(v44 >> 1);
    if (v50 < v43) {
      uint64_t v45 = v49;
    }
    else {
      unint64_t v44 = v47;
    }
  }
  while (v44);
  if (v45 != v46 && *v45 == v43) {
    uint64_t v51 = v45[1];
  }
  else {
LABEL_37:
  }
    uint64_t v51 = 0;
  mlir::getIntValues<unsigned long long>(v41, v51, (uint64_t)&v293, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v269))
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v53 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v53 + 24);
LABEL_42:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v52 + 64))(v52, v54, v55, &v276);
LABEL_43:
    uint64_t v56 = 0;
    int v57 = 0;
    goto LABEL_44;
  }
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v269) != 2
    && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v269) != 3)
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v103 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v103 + 24);
    goto LABEL_42;
  }
  long long v261 = 0uLL;
  uint64_t v259 = 0;
  uint64_t v260 = 0;
  v257 = 0;
  uint64_t v258 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  uint64_t v59 = *(void **)(*(void *)(v269 + 72) + 56);
  *(void *)&long long v276 = &v261;
  *((void *)&v276 + 1) = &v259;
  *(void *)&long long v277 = &v257;
  *((void *)&v277 + 1) = &v255;
  ArgOperands = v59;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (uint64_t v284 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v290) = 1,
        __p = &v290,
        uint64_t v288 = (uint64_t)&v284,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v276, (uint64_t)&__p), !(_BYTE)v290))
  {
    uint64_t v61 = *(void *)(*(void *)(v269 + 72) + 56);
    uint64_t v288 = (uint64_t)&v259;
    *(void *)&v289[0] = &v257;
    *((void *)&v289[0] + 1) = &v255;
    *(void *)&long long v254 = v61;
    uint64_t v62 = mlir::Value::getDefiningOp((mlir::Value *)&v254);
    if (!v62) {
      goto LABEL_67;
    }
    unint64_t v290 = (void *)v62;
    if (*(_UNKNOWN **)(*(void *)(v62 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      goto LABEL_67;
    }
    if ((*(unsigned char *)(v62 + 46) & 0x80) == 0) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(v62 + 68) != 4) {
      goto LABEL_67;
    }
    LOBYTE(v272) = 1;
    uint64_t v284 = &v272;
    uint64_t v285 = (uint64_t)&v290;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v284);
    if (!(_BYTE)v272) {
      goto LABEL_67;
    }
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v257);
  uint64_t v274 = v63;
  uint64_t v64 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v64, v65) == 1 && mlir::ElementsAttr::getNumElements(v255, v256) == 1) {
    BOOL v66 = (mlir::getSingleFloatValue<float>(v255, v256) & 0x7FFFFFFF) == 0;
  }
  else {
LABEL_67:
  }
    BOOL v66 = 0;
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v68 = 1;
  }
  else {
    BOOL v68 = (void)v261 == 0;
  }
  int v69 = !v68;
  if (v68)
  {
    uint64_t v75 = 0;
    uint64_t v243 = 0;
  }
  else
  {
    uint64_t v243 = mlir::convertElementsAttr(v259, v260, 1);
    *(void *)&long long v276 = mlir::getElementTypeOrSelf(v257);
    BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v276);
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v257);
    uint64_t v288 = v72;
    LOBYTE(v276) = 0;
    LOBYTE(v277) = 0;
    uint64_t v73 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v276, IntegerType);
    uint64_t v75 = mlir::rewriteElementsAttr((uint64_t)v257, v258, v73, v74, 1);
  }
  long long v254 = 0uLL;
  __p = &v254;
  *(void *)&long long v276 = v266;
  uint64_t v76 = mlir::Value::getDefiningOp((mlir::Value *)&v276);
  if ((!v76 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&__p, v76))
    && (!v66 || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v269) == 3))
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v77 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v77 + 24);
    goto LABEL_42;
  }
  unint64_t v242 = v75;
  int v239 = v69;
  if (v69)
  {
    long long v254 = v261;
    uint64_t v78 = v296;
    BOOL v79 = (mlir::AffineMap *)v297;
    *(void *)&long long v276 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v254);
    *((void *)&v276 + 1) = v80;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v276);
    __p = (void *)mlir::MemRefType::get(v78, v79, OperandRange, 0, 0, 0);
    uint64_t v266 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (void **)&v254)- 16;
  }
  uint64_t v240 = v7;
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v269) != 3) {
    goto LABEL_129;
  }
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v266);
  uint64_t v83 = operator new(0x40uLL);
  *(void *)&v289[0] = v83 + 4;
  *uint64_t v83 = xmmword_181110B50;
  v83[1] = xmmword_181110B60;
  uint64_t v83[2] = xmmword_181110B70;
  v83[3] = xmmword_181110B80;
  __p = v83;
  uint64_t v288 = (uint64_t)(v83 + 4);
  *(void *)&long long v276 = &v277;
  *((void *)&v276 + 1) = 0x100000000;
  mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v276, Loc, &v266, (uint64_t)&__p);
  uint64_t v84 = *(void *)v276;
  if ((long long *)v276 != &v277) {
    free((void *)v276);
  }
  uint64_t v266 = v84;
  if (__p)
  {
    uint64_t v288 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v84 = v266;
  }
  uint64_t v85 = (void *)(*(void *)(v84 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v85) {
    goto LABEL_100;
  }
  uint64_t v86 = *v85;
  unint64_t v87 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v88 = *(unsigned int *)(v86 + 16);
  if (!v88) {
    goto LABEL_100;
  }
  unint64_t v89 = *(void **)(v86 + 8);
  long long v90 = &v89[2 * v88];
  do
  {
    unint64_t v91 = v88 >> 1;
    uint64_t v92 = &v89[2 * (v88 >> 1)];
    unint64_t v94 = *v92;
    v93 = v92 + 2;
    v88 += ~(v88 >> 1);
    if (v94 < v87) {
      unint64_t v89 = v93;
    }
    else {
      unint64_t v88 = v91;
    }
  }
  while (v88);
  if (v89 != v90 && *v89 == v87) {
    uint64_t v95 = v89[1];
  }
  else {
LABEL_100:
  }
    uint64_t v95 = 0;
  uint64_t v263 = v85;
  uint64_t v264 = v95;
  uint64_t v96 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  uint64_t v97 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  unint64_t v99 = (unsigned char *)(v97 + 8 * v98);
  *(void *)&long long v276 = &v277;
  *((void *)&v276 + 1) = 0x400000000;
  uint64_t v100 = v99 - v96;
  if ((unint64_t)(v99 - v96) < 0x21)
  {
    unsigned int v101 = 0;
    unint64_t v102 = (char *)&v277;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, &v277, v100 >> 3, 8);
    unsigned int v101 = DWORD2(v276);
    unint64_t v102 = (char *)v276;
  }
  if (v99 != v96)
  {
    memcpy(&v102[8 * v101], v96, v99 - v96);
    unsigned int v101 = DWORD2(v276);
    unint64_t v102 = (char *)v276;
  }
  unint64_t v104 = v101 + ((unint64_t)v100 >> 3);
  DWORD2(v276) = v101 + ((unint64_t)v100 >> 3);
  if (v102 != (char *)&v277)
  {
    if (v296 != v298)
    {
      free(v296);
      unint64_t v102 = (char *)v276;
      LODWORD(v104) = DWORD2(v276);
    }
    uint64_t v296 = v102;
    unint64_t v297 = __PAIR64__(HIDWORD(v276), v104);
    *(void *)&long long v276 = &v277;
    HIDWORD(v276) = 0;
    goto LABEL_127;
  }
  uint64_t v105 = v297;
  if (v297 >= v104)
  {
    if (v104) {
      memmove(v296, &v277, 8 * v104);
    }
    goto LABEL_126;
  }
  if (HIDWORD(v297) >= v104)
  {
    if (v297)
    {
      memmove(v296, &v277, 8 * v297);
      goto LABEL_124;
    }
  }
  else
  {
    LODWORD(v297) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, v298, v104, 8);
  }
  uint64_t v105 = 0;
LABEL_124:
  if (v105 != DWORD2(v276)) {
    memcpy(&v296[8 * v105], (const void *)(v276 + 8 * v105), 8 * DWORD2(v276) - 8 * v105);
  }
LABEL_126:
  LODWORD(v297) = v104;
LABEL_127:
  DWORD2(v276) = 0;
  if ((long long *)v276 != &v277) {
    free((void *)v276);
  }
LABEL_129:
  *(void *)&long long v276 = 3;
  uint64_t v106 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  unint64_t v107 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v276, 1, v106, 0);
  *(void *)&long long v276 = 6;
  unint64_t v241 = (uint64_t *)(a4 + 8);
  uint64_t v108 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  v238 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v276, 1, v108, 0);
  unint64_t v290 = v292;
  uint64_t v291 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v269);
  uint64_t v110 = (uint64_t)Strides;
  if (!Strides) {
    goto LABEL_139;
  }
  uint64_t v111 = *Strides;
  unint64_t v112 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v113 = *(unsigned int *)(v111 + 16);
  if (!v113)
  {
    uint64_t v121 = 0;
    long long v120 = v242;
    goto LABEL_142;
  }
  uint64_t v114 = *(void **)(v111 + 8);
  unint64_t v115 = &v114[2 * v113];
  do
  {
    unint64_t v116 = v113 >> 1;
    uint64_t v117 = &v114[2 * (v113 >> 1)];
    unint64_t v119 = *v117;
    unint64_t v118 = v117 + 2;
    v113 += ~(v113 >> 1);
    if (v119 < v112) {
      uint64_t v114 = v118;
    }
    else {
      unint64_t v113 = v116;
    }
  }
  while (v113);
  if (v114 == v115)
  {
LABEL_139:
    uint64_t v121 = 0;
    long long v120 = v242;
  }
  else
  {
    long long v120 = v242;
    if (*v114 == v112) {
      uint64_t v121 = v114[1];
    }
    else {
      uint64_t v121 = 0;
    }
  }
LABEL_142:
  mlir::getIntValues<unsigned long long>(v110, v121, (uint64_t)&v290, 1);
  uint64_t v122 = v290;
  if (*v290 != 1 || v290[1] != 1)
  {
    uint64_t v124 = *(void *)(a4 + 16);
    if (!v124) {
      goto LABEL_150;
    }
    uint64_t v125 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_150;
    }
    uint64_t v126 = *(void *)(v125 + 24);
    goto LABEL_149;
  }
  uint64_t v123 = 8 * v291 - 16;
  if (v291 != 2) {
    memmove(v290, v290 + 2, 8 * v291 - 16);
  }
  LODWORD(v291) = (unint64_t)(&v122[v123] - (unsigned char *)v290) >> 3;
  *(void *)&long long v276 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v290, (uint64_t)v290, (uint64_t *)&v276);
  if (v107)
  {
    uint64_t v128 = *v107;
    unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v130 = *(unsigned int *)(v128 + 16);
    if (!v130) {
      goto LABEL_163;
    }
    uint64_t v131 = *(void **)(v128 + 8);
    v132 = &v131[2 * v130];
    do
    {
      unint64_t v133 = v130 >> 1;
      uint64_t v134 = &v131[2 * (v130 >> 1)];
      unint64_t v136 = *v134;
      uint64_t v135 = v134 + 2;
      v130 += ~(v130 >> 1);
      if (v136 < v129) {
        uint64_t v131 = v135;
      }
      else {
        unint64_t v130 = v133;
      }
    }
    while (v130);
    if (v131 != v132 && *v131 == v129) {
      uint64_t v137 = v131[1];
    }
    else {
LABEL_163:
    }
      uint64_t v137 = 0;
  }
  else
  {
    uint64_t v137 = 0;
  }
  uint64_t v253 = mlir::DenseElementsAttr::getFromRawBuffer(v107, v137, v290, 8 * v291, 8, 1, 0);
  uint64_t v138 = v293;
  if (*(void *)v293 == 1 && *((void *)v293 + 1) == 1)
  {
    uint64_t v139 = 8 * v294 - 16;
    if (v294 != 2) {
      memmove(v293, v293 + 16, 8 * v294 - 16);
    }
    LODWORD(v294) = (unint64_t)(&v138[v139] - v293) >> 3;
    *(void *)&long long v276 = 1;
    llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v293, (uint64_t)v293, (uint64_t *)&v276);
    if (!v107) {
      goto LABEL_183;
    }
    uint64_t v141 = *v107;
    unint64_t v142 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v143 = *(unsigned int *)(v141 + 16);
    if (!v143) {
      goto LABEL_183;
    }
    v144 = *(void **)(v141 + 8);
    v145 = &v144[2 * v143];
    do
    {
      unint64_t v146 = v143 >> 1;
      uint64_t v147 = &v144[2 * (v143 >> 1)];
      unint64_t v149 = *v147;
      uint64_t v148 = v147 + 2;
      v143 += ~(v143 >> 1);
      if (v149 < v142) {
        v144 = v148;
      }
      else {
        unint64_t v143 = v146;
      }
    }
    while (v143);
    if (v144 != v145 && *v144 == v142) {
      uint64_t v150 = v144[1];
    }
    else {
LABEL_183:
    }
      uint64_t v150 = 0;
    unint64_t v251 = 0;
    uint64_t v252 = mlir::DenseElementsAttr::getFromRawBuffer(v107, v150, v293, 8 * v294, 8, 1, 0);
    uint64_t v237 = (*((void *)v296 + 2) - 1) * *((void *)v293 + 1) + 1;
    uint64_t v151 = (*((void *)v296 + 3) - 1) * *((void *)v293 + 2) + 1;
    unint64_t v249 = 0;
    unint64_t v250 = 0;
    unint64_t v248 = 0;
    Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v269);
    uint64_t v153 = (uint64_t)Rewriter;
    if (!Rewriter) {
      goto LABEL_193;
    }
    uint64_t v154 = *Rewriter;
    unint64_t v155 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v156 = *(unsigned int *)(v154 + 16);
    if (!v156) {
      goto LABEL_193;
    }
    uint64_t v157 = *(void **)(v154 + 8);
    v158 = &v157[2 * v156];
    do
    {
      unint64_t v159 = v156 >> 1;
      uint64_t v160 = &v157[2 * (v156 >> 1)];
      unint64_t v162 = *v160;
      unint64_t v161 = v160 + 2;
      v156 += ~(v156 >> 1);
      if (v162 < v155) {
        uint64_t v157 = v161;
      }
      else {
        unint64_t v156 = v159;
      }
    }
    while (v156);
    if (v157 != v158 && *v157 == v155) {
      uint64_t v163 = v157[1];
    }
    else {
LABEL_193:
    }
      uint64_t v163 = 0;
    int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v269);
    {
      __p = v289;
      memset(v289, 0, sizeof(v289));
      uint64_t v288 = 0x600000006;
      uint64_t v284 = v286;
      memset(v286, 0, sizeof(v286));
      uint64_t v285 = 0x600000006;
      if (v238)
      {
        uint64_t v165 = *v238;
        unint64_t v166 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v167 = *(unsigned int *)(v165 + 16);
        uint64_t v168 = v240;
        if (!v167) {
          goto LABEL_204;
        }
        unint64_t v169 = *(void **)(v165 + 8);
        v170 = &v169[2 * v167];
        do
        {
          unint64_t v171 = v167 >> 1;
          unint64_t v172 = &v169[2 * (v167 >> 1)];
          unint64_t v174 = *v172;
          v173 = v172 + 2;
          v167 += ~(v167 >> 1);
          if (v174 < v166) {
            unint64_t v169 = v173;
          }
          else {
            unint64_t v167 = v171;
          }
        }
        while (v167);
        if (v169 != v170 && *v169 == v166) {
          uint64_t v175 = v169[1];
        }
        else {
LABEL_204:
        }
          uint64_t v175 = 0;
      }
      else
      {
        uint64_t v175 = 0;
        uint64_t v168 = v240;
      }
      long long v276 = 0uLL;
      *(void *)&long long v277 = v251;
      *((void *)&v277 + 1) = v250;
      *(void *)&long long v278 = v249;
      *((void *)&v278 + 1) = v248;
      uint64_t v246 = 0;
      uint64_t v247 = mlir::DenseElementsAttr::getFromRawBuffer(v238, v175, &v276, 48, 8, 1, 0);
      uint64_t v178 = *(void *)(v269 + 24);
      if (v239)
      {
        uint64_t v179 = v243;
      }
      else
      {
        uint64_t v179 = 0;
        long long v120 = 0;
      }
      *(void *)&long long v276 = v179;
      ArgOperands = v120;
      uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v241, v178, &v267, &v266, &v253, &v252, &v247, &v246, (uint64_t *)&Groups, &v268, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
      if (v285)
      {
        uint64_t v180 = v284;
        uint64_t v181 = 8 * v285;
        uint64_t v182 = (uint64_t *)v284;
        while (*v182 < 1)
        {
          ++v182;
          v181 -= 8;
          if (!v181) {
            goto LABEL_244;
          }
        }
        *(void *)&long long v276 = &v277;
        long long v277 = 0u;
        long long v278 = 0u;
        long long v279 = 0u;
        *((void *)&v276 + 1) = 0xA0000000ALL;
        ArgOperands = v275;
        memset_pattern16(v275, &unk_181110BB0, 0x28uLL);
        uint64_t v274 = 0x500000005;
        *(int64x2_t *)&v275[24] = vdupq_n_s64(6uLL);
        uint64_t v280 = v180[2];
        uint64_t v281 = v180[3];
        uint64_t v282 = v180[4];
        uint64_t v283 = v180[5];
        long long v272 = xmmword_1810FE2F0;
        uint64_t v183 = mlir::Builder::getIntegerType((mlir::Builder *)v241, 0x40u, 0);
        unint64_t v184 = (void *)mlir::RankedTensorType::get((uint64_t)&v272, 2, v183, 0);
        uint64_t v185 = v184;
        if (!v184) {
          goto LABEL_228;
        }
        uint64_t v186 = *v184;
        unint64_t v187 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v188 = *(unsigned int *)(v186 + 16);
        if (!v188) {
          goto LABEL_228;
        }
        uint64_t v189 = *(void **)(v186 + 8);
        uint64_t v190 = &v189[2 * v188];
        do
        {
          unint64_t v191 = v188 >> 1;
          uint64_t v192 = &v189[2 * (v188 >> 1)];
          unint64_t v194 = *v192;
          v193 = v192 + 2;
          v188 += ~(v188 >> 1);
          if (v194 < v187) {
            uint64_t v189 = v193;
          }
          else {
            unint64_t v188 = v191;
          }
        }
        while (v188);
        if (v189 != v190 && *v189 == v187) {
          uint64_t v195 = v189[1];
        }
        else {
LABEL_228:
        }
          uint64_t v195 = 0;
        uint64_t v244 = mlir::DenseElementsAttr::getFromRawBuffer(v185, v195, v276, 8 * DWORD2(v276), 8, 1, 0);
        F16uint64_t FloatAttr = 5;
        uint64_t v196 = mlir::Builder::getIntegerType((mlir::Builder *)v241, 0x40u, 0);
        uint64_t v197 = (void *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v196, 0);
        uint64_t v198 = v197;
        if (v197
          && (uint64_t v199 = *v197,
              unint64_t v200 = mlir::TypeID::get<mlir::ShapedType>(),
              unint64_t v201 = *(unsigned int *)(v199 + 16),
              v201))
        {
          v202 = *(void **)(v199 + 8);
          uint64_t v203 = &v202[2 * v201];
          do
          {
            unint64_t v204 = v201 >> 1;
            long long v205 = &v202[2 * (v201 >> 1)];
            unint64_t v207 = *v205;
            uint64_t v206 = v205 + 2;
            v201 += ~(v201 >> 1);
            if (v207 < v200) {
              v202 = v206;
            }
            else {
              unint64_t v201 = v204;
            }
          }
          while (v201);
          uint64_t v168 = v240;
          if (v202 != v203 && *v202 == v200) {
            uint64_t v208 = v202[1];
          }
          else {
            uint64_t v208 = 0;
          }
        }
        else
        {
          uint64_t v208 = 0;
          uint64_t v168 = v240;
        }
        *(void *)&long long v272 = mlir::DenseElementsAttr::getFromRawBuffer(v198, v208, ArgOperands, 8 * v274, 8, 1, 0);
        F16uint64_t FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v241, 0.0, v209);
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v241, v168, &v245, (uint64_t *)&v272, &v244, &F16FloatAttr)- 16;
        if (ArgOperands != v275) {
          free(ArgOperands);
        }
        if ((long long *)v276 != &v277) {
          free((void *)v276);
        }
      }
LABEL_244:
      v210 = __p;
      if (*((void *)__p + 2) || *((void *)__p + 3))
      {
        unint64_t v211 = (uint64_t *)(*(void *)(v245 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v211) {
          goto LABEL_255;
        }
        uint64_t v212 = *v211;
        unint64_t v213 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v214 = *(unsigned int *)(v212 + 16);
        if (!v214) {
          goto LABEL_255;
        }
        uint64_t v215 = *(void **)(v212 + 8);
        uint64_t v216 = &v215[2 * v214];
        do
        {
          unint64_t v217 = v214 >> 1;
          v218 = &v215[2 * (v214 >> 1)];
          unint64_t v220 = *v218;
          v219 = v218 + 2;
          v214 += ~(v214 >> 1);
          if (v220 < v213) {
            uint64_t v215 = v219;
          }
          else {
            unint64_t v214 = v217;
          }
        }
        while (v214);
        if (v215 != v216 && *v215 == v213) {
          uint64_t v221 = v215[1];
        }
        else {
LABEL_255:
        }
          uint64_t v221 = 0;
        *(void *)&long long v276 = v211;
        *((void *)&v276 + 1) = v221;
        uint64_t v222 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v276) + 16);
        LODWORD(v272) = 2;
        uint64_t v223 = *((void *)__p + 3);
        *(void *)&long long v276 = *((void *)__p + 2);
        ArgOperands = (void *)(v222 - (v276 + v223));
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v241, v168, &v245, (int *)&v272, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
        v210 = __p;
      }
      if (v210[4] || v210[5])
      {
        uint64_t v224 = (uint64_t *)(*(void *)(v245 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v224) {
          goto LABEL_268;
        }
        uint64_t v225 = *v224;
        unint64_t v226 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v227 = *(unsigned int *)(v225 + 16);
        if (!v227) {
          goto LABEL_268;
        }
        unint64_t v228 = *(void **)(v225 + 8);
        unint64_t v229 = &v228[2 * v227];
        do
        {
          unint64_t v230 = v227 >> 1;
          v231 = &v228[2 * (v227 >> 1)];
          unint64_t v233 = *v231;
          unint64_t v232 = v231 + 2;
          v227 += ~(v227 >> 1);
          if (v233 < v226) {
            unint64_t v228 = v232;
          }
          else {
            unint64_t v227 = v230;
          }
        }
        while (v227);
        if (v228 != v229 && *v228 == v226) {
          uint64_t v234 = v228[1];
        }
        else {
LABEL_268:
        }
          uint64_t v234 = 0;
        *(void *)&long long v276 = v224;
        *((void *)&v276 + 1) = v234;
        uint64_t v235 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v276) + 24);
        LODWORD(v272) = 3;
        uint64_t v236 = *((void *)__p + 5);
        *(void *)&long long v276 = *((void *)__p + 4);
        ArgOperands = (void *)(v235 - (v276 + v236));
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v241, v168, &v245, (int *)&v272, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
      }
      uint64_t v56 = mlir::Value::getDefiningOp((mlir::Value *)&v245);
      if (v284 != v286) {
        free(v284);
      }
      if (__p != v289) {
        free(__p);
      }
      int v57 = 1;
    }
    else
    {
      uint64_t v176 = *(void *)(a4 + 16);
      if (v176)
      {
        uint64_t v177 = v269;
        if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      }
        }
      uint64_t v56 = 0;
      int v57 = 0;
    }
    goto LABEL_151;
  }
  uint64_t v124 = *(void *)(a4 + 16);
  if (v124)
  {
    uint64_t v140 = v269;
    if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16)))
    {
      uint64_t v126 = *(void *)(v140 + 24);
LABEL_149:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v124 + 64))(v124, v126, v127, &v276);
    }
  }
LABEL_150:
  uint64_t v56 = 0;
  int v57 = 0;
LABEL_151:
  if (v290 != (void *)v292) {
    free(v290);
  }
LABEL_44:
  if (v293 != v295) {
    free(v293);
  }
  if (v296 != v298) {
    free(v296);
  }
  if (!v57) {
    return 0;
  }
  *(void *)&long long v276 = v56 - 16;
  uint64_t v58 = 1;
  mlir::ValueRange::ValueRange(v270, (uint64_t)&v276, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v270[0], v270[1]);
  return v58;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    void v29[2] = (uint64_t)"anec.convolution";
    v29[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Convolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  uint64_t v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::Conv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

void *mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::~ConvertConv(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::Conv3DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::Conv3DDataGradientOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 96);
  uint64_t v9 = *(void *)(a3 + 104);
  unint64_t v37 = v8;
  uint64_t v38 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = v23;
        if (v37)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v35 = 259;
      v32[0] = v34;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 96);
        long long v29 = *(_OWORD *)(a3 + 64);
        v36[5] = *(_OWORD *)(a3 + 80);
        v36[6] = v28;
        long long v30 = *(_OWORD *)(a3 + 16);
        v36[0] = *(_OWORD *)a3;
        v36[1] = v30;
        long long v31 = *(_OWORD *)(a3 + 32);
        v36[3] = *(_OWORD *)(a3 + 48);
        v36[4] = v29;
        v36[2] = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v36, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v38;
    if (v37 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v35 = 259;
  uint64_t v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, unint64_t *a12, unint64_t *a13, unint64_t *a14, unint64_t a15, unint64_t a16, unint64_t a17)
{
  uint64_t v425 = *MEMORY[0x1E4F143B8];
  uint64_t v387 = a2;
  long long v424 = *(_OWORD *)(a3 + 96);
  uint64_t v367 = *(void *)(a2 + 24);
  uint64_t v19 = (void *)mlir::ValueRange::dereference_iterator(&v424, 0);
  v386 = (void *)mlir::ValueRange::dereference_iterator(&v424, 1);
  uint64_t v20 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v387);
  uint64_t v21 = (uint64_t *)(v19[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v21) {
    goto LABEL_10;
  }
  uint64_t v22 = *v21;
  unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v24 = *(unsigned int *)(v22 + 16);
  if (!v24) {
    goto LABEL_10;
  }
  uint64_t v25 = *(void **)(v22 + 8);
  uint64_t v26 = &v25[2 * v24];
  do
  {
    unint64_t v27 = v24 >> 1;
    long long v28 = &v25[2 * (v24 >> 1)];
    unint64_t v30 = *v28;
    long long v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23) {
      uint64_t v25 = v29;
    }
    else {
      unint64_t v24 = v27;
    }
  }
  while (v24);
  if (v25 != v26 && *v25 == v23) {
    uint64_t v31 = v25[1];
  }
  else {
LABEL_10:
  }
    uint64_t v31 = 0;
  v385[0] = v21;
  v385[1] = v31;
  unint64_t v32 = (uint64_t *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v32) {
    goto LABEL_20;
  }
  uint64_t v33 = *v32;
  unint64_t v34 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v35 = *(unsigned int *)(v33 + 16);
  if (!v35) {
    goto LABEL_20;
  }
  uint64_t v36 = *(void **)(v33 + 8);
  unint64_t v37 = &v36[2 * v35];
  do
  {
    unint64_t v38 = v35 >> 1;
    uint64_t v39 = &v36[2 * (v35 >> 1)];
    unint64_t v41 = *v39;
    unint64_t v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34) {
      uint64_t v36 = v40;
    }
    else {
      unint64_t v35 = v38;
    }
  }
  while (v35);
  if (v36 != v37 && *v36 == v34) {
    uint64_t v42 = v36[1];
  }
  else {
LABEL_20:
  }
    uint64_t v42 = 0;
  v384[0] = v32;
  v384[1] = v42;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v384);
  unint64_t v44 = (void *)(v386[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v44) {
    goto LABEL_30;
  }
  uint64_t v45 = *v44;
  unint64_t v46 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v47 = *(unsigned int *)(v45 + 16);
  if (!v47) {
    goto LABEL_30;
  }
  uint64_t v48 = *(void **)(v45 + 8);
  uint64_t v49 = &v48[2 * v47];
  do
  {
    unint64_t v50 = v47 >> 1;
    uint64_t v51 = &v48[2 * (v47 >> 1)];
    unint64_t v53 = *v51;
    uint64_t v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46) {
      uint64_t v48 = v52;
    }
    else {
      unint64_t v47 = v50;
    }
  }
  while (v47);
  if (v48 != v49 && *v48 == v46) {
    uint64_t v54 = v48[1];
  }
  else {
LABEL_30:
  }
    uint64_t v54 = 0;
  v382 = v44;
  uint64_t v383 = v54;
  uint64_t v381 = 1;
  unint64_t v55 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
  uint64_t v56 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
  uint64_t v58 = (unsigned char *)(v56 + 8 * v57);
  v421 = v423;
  unint64_t v422 = 0x500000000;
  uint64_t v59 = v58 - v55;
  if ((unint64_t)(v58 - v55) < 0x29)
  {
    int v60 = 0;
    if (v58 == v55) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, v423, v59 >> 3, 8);
  int v60 = v422;
  if (v58 != v55)
  {
LABEL_35:
    memcpy(&v421[8 * v60], v55, v58 - v55);
    int v60 = v422;
  }
LABEL_36:
  LODWORD(v422) = v60 + ((unint64_t)v59 >> 3);
  v418 = (unint64_t *)v420;
  uint64_t v419 = 0x500000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v387);
  uint64_t v62 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_45;
  }
  uint64_t v63 = *InputAttributeNames;
  unint64_t v64 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v65 = *(unsigned int *)(v63 + 16);
  if (!v65) {
    goto LABEL_45;
  }
  BOOL v66 = *(void **)(v63 + 8);
  uint64_t v67 = &v66[2 * v65];
  do
  {
    unint64_t v68 = v65 >> 1;
    int v69 = &v66[2 * (v65 >> 1)];
    unint64_t v71 = *v69;
    uint64_t v70 = v69 + 2;
    v65 += ~(v65 >> 1);
    if (v71 < v64) {
      BOOL v66 = v70;
    }
    else {
      unint64_t v65 = v68;
    }
  }
  while (v65);
  if (v66 != v67 && *v66 == v64) {
    uint64_t v72 = v66[1];
  }
  else {
LABEL_45:
  }
    uint64_t v72 = 0;
  mlir::getIntValues<unsigned long long>(v62, v72, (uint64_t)&v418, 1);
  int StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v387);
  int v74 = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v387);
  int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v387);
  int v76 = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v387);
  if (StorageType == 7 || v74 == 8)
  {
    if (WeightsLayout != 10 && v76 != 9)
    {
      uint64_t v77 = *(void *)(a4 + 16);
      if (!v77) {
        goto LABEL_57;
      }
      uint64_t v81 = v387;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
        goto LABEL_57;
      }
      uint64_t v79 = *(void *)(v81 + 24);
      goto LABEL_56;
    }
    if (StorageType == 7) {
      uint64_t v86 = 2;
    }
    else {
      uint64_t v86 = 1;
    }
    uint64_t v87 = 2;
    if (StorageType == 7) {
      uint64_t v88 = 3;
    }
    else {
      uint64_t v88 = 2;
    }
    if (StorageType == 7) {
      uint64_t v89 = 4;
    }
    else {
      uint64_t v89 = 3;
    }
    BOOL v354 = v76 == 9;
    if (v76 == 9) {
      uint64_t v90 = 3;
    }
    else {
      uint64_t v90 = 1;
    }
    uint64_t v357 = v90;
    if (v76 == 9) {
      uint64_t v87 = 4;
    }
    uint64_t v359 = v87;
    uint64_t v347 = v86;
    uint64_t v349 = v88;
    unint64_t v364 = *(void *)(ArgAttrsAttr + 8 * v88);
    unint64_t v365 = *(void *)(ArgAttrsAttr + 8 * v86);
    uint64_t v351 = v89;
    __p = *(void **)(ArgAttrsAttr + 8 * v89);
    v395 = (void *)3;
    uint64_t v366 = a4;
    unint64_t v91 = (mlir::Builder *)(a4 + 8);
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    v93 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v395, 1, IntegerType, 0);
    v395 = (void *)6;
    v352 = (uint64_t *)v91;
    uint64_t v94 = mlir::Builder::getIntegerType(v91, 0x40u, 0);
    v353 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v395, 1, v94, 0);
    __dst = v417;
    uint64_t v416 = 0x200000000;
    Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v387);
    uint64_t v96 = (uint64_t)Strides;
    if (!Strides) {
      goto LABEL_89;
    }
    uint64_t v97 = *Strides;
    unint64_t v98 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v99 = *(unsigned int *)(v97 + 16);
    if (!v99) {
      goto LABEL_89;
    }
    uint64_t v100 = *(void **)(v97 + 8);
    unsigned int v101 = &v100[2 * v99];
    do
    {
      unint64_t v102 = v99 >> 1;
      uint64_t v103 = &v100[2 * (v99 >> 1)];
      unint64_t v105 = *v103;
      unint64_t v104 = v103 + 2;
      v99 += ~(v99 >> 1);
      if (v105 < v98) {
        uint64_t v100 = v104;
      }
      else {
        unint64_t v99 = v102;
      }
    }
    while (v99);
    if (v100 != v101 && *v100 == v98) {
      uint64_t v106 = v100[1];
    }
    else {
LABEL_89:
    }
      uint64_t v106 = 0;
    mlir::getIntValues<unsigned long long>(v96, v106, (uint64_t)&__dst, 1);
    unint64_t v107 = __dst;
    if (*(void *)__dst == 1 && *((void *)__dst + 1) == 1)
    {
      uint64_t v108 = 8 * v416 - 16;
      if (v416 != 2) {
        memmove(__dst, (char *)__dst + 16, 8 * v416 - 16);
      }
      LODWORD(v416) = (unint64_t)(&v107[v108] - (unsigned char *)__dst) >> 3;
      if (!v93) {
        goto LABEL_115;
      }
      uint64_t v113 = *v93;
      unint64_t v114 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v115 = *(unsigned int *)(v113 + 16);
      if (!v115) {
        goto LABEL_115;
      }
      unint64_t v116 = *(void **)(v113 + 8);
      uint64_t v117 = &v116[2 * v115];
      do
      {
        unint64_t v118 = v115 >> 1;
        unint64_t v119 = &v116[2 * (v115 >> 1)];
        unint64_t v121 = *v119;
        long long v120 = v119 + 2;
        v115 += ~(v115 >> 1);
        if (v121 < v114) {
          unint64_t v116 = v120;
        }
        else {
          unint64_t v115 = v118;
        }
      }
      while (v115);
      if (v116 != v117 && *v116 == v114) {
        uint64_t v122 = v116[1];
      }
      else {
LABEL_115:
      }
        uint64_t v122 = 0;
      uint64_t v380 = mlir::DenseElementsAttr::getFromRawBuffer(v93, v122, __dst, 8 * v416, 8, 1, 0);
      uint64_t v123 = v418;
      if (*v418 == 1 && v418[1] == 1)
      {
        uint64_t v124 = 8 * v419 - 16;
        if (v419 != 2) {
          memmove(v418, v418 + 2, 8 * v419 - 16);
        }
        uint64_t v355 = 2 * v354;
        LODWORD(v419) = (unint64_t)((char *)v123 + v124 - (char *)v418) >> 3;
        if (v93)
        {
          uint64_t v126 = *v93;
          unint64_t v127 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v128 = *(unsigned int *)(v126 + 16);
          uint64_t v129 = v357;
          if (v128)
          {
            unint64_t v130 = *(void **)(v126 + 8);
            uint64_t v131 = &v130[2 * v128];
            do
            {
              unint64_t v132 = v128 >> 1;
              unint64_t v133 = &v130[2 * (v128 >> 1)];
              unint64_t v135 = *v133;
              uint64_t v134 = v133 + 2;
              v128 += ~(v128 >> 1);
              if (v135 < v127) {
                unint64_t v130 = v134;
              }
              else {
                unint64_t v128 = v132;
              }
            }
            while (v128);
            uint64_t v136 = v359;
            if (v130 != v131 && *v130 == v127) {
              uint64_t v137 = v130[1];
            }
            else {
              uint64_t v137 = 0;
            }
          }
          else
          {
            uint64_t v137 = 0;
            uint64_t v136 = v359;
          }
        }
        else
        {
          uint64_t v137 = 0;
          uint64_t v129 = v357;
          uint64_t v136 = v359;
        }
        uint64_t v379 = mlir::DenseElementsAttr::getFromRawBuffer(v93, v137, v418, 8 * v419, 8, 1, 0);
        unint64_t v138 = v418[1];
        BOOL v139 = *v418 > 1 || v138 > 1;
        unint64_t v140 = v418[2];
        int v142 = v139 || v140 > 1;
        int v345 = v142;
        uint64_t v342 = (*(void *)&v421[8 * v355] - 1) * *v418;
        uint64_t v356 = v342 + 1;
        uint64_t v343 = (*(void *)&v421[8 * v129] - 1) * v138;
        uint64_t v143 = (*(void *)&v421[8 * v136] - 1) * v140;
        uint64_t v358 = v343 + 1;
        uint64_t v360 = v143 + 1;
        uint64_t v377 = 0;
        v378 = 0;
        unint64_t v375 = 0;
        unint64_t v376 = 0;
        uint64_t v373 = 0;
        unint64_t v374 = 0;
        Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v387);
        uint64_t v145 = (uint64_t)Rewriter;
        uint64_t v344 = v143;
        if (!Rewriter) {
          goto LABEL_157;
        }
        uint64_t v146 = *Rewriter;
        unint64_t v147 = mlir::TypeID::get<mlir::ElementsAttr>();
        unint64_t v148 = *(unsigned int *)(v146 + 16);
        if (!v148) {
          goto LABEL_157;
        }
        unint64_t v149 = *(void **)(v146 + 8);
        uint64_t v150 = &v149[2 * v148];
        do
        {
          unint64_t v151 = v148 >> 1;
          unint64_t v152 = &v149[2 * (v148 >> 1)];
          unint64_t v154 = *v152;
          uint64_t v153 = v152 + 2;
          v148 += ~(v148 >> 1);
          if (v154 < v147) {
            unint64_t v149 = v153;
          }
          else {
            unint64_t v148 = v151;
          }
        }
        while (v148);
        if (v149 != v150 && *v149 == v147) {
          uint64_t v155 = v149[1];
        }
        else {
LABEL_157:
        }
          uint64_t v155 = 0;
        int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v387);
        {
          v412 = v414;
          memset(v414, 0, sizeof(v414));
          uint64_t v413 = 0x600000006;
          v409 = v411;
          memset(v411, 0, sizeof(v411));
          uint64_t v410 = 0x600000006;
          a4 = v366;
          if (!v353) {
            goto LABEL_168;
          }
          uint64_t v157 = *v353;
          unint64_t v158 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v159 = *(unsigned int *)(v157 + 16);
          if (!v159) {
            goto LABEL_168;
          }
          uint64_t v160 = *(void **)(v157 + 8);
          unint64_t v161 = &v160[2 * v159];
          do
          {
            unint64_t v162 = v159 >> 1;
            uint64_t v163 = &v160[2 * (v159 >> 1)];
            unint64_t v165 = *v163;
            int v164 = v163 + 2;
            v159 += ~(v159 >> 1);
            if (v165 < v158) {
              uint64_t v160 = v164;
            }
            else {
              unint64_t v159 = v162;
            }
          }
          while (v159);
          if (v160 != v161 && *v160 == v158) {
            uint64_t v166 = v160[1];
          }
          else {
LABEL_168:
          }
            uint64_t v166 = 0;
          uint64_t v341 = (uint64_t)v378;
          v395 = v378;
          uint64_t v396 = v377;
          unint64_t v339 = v376;
          *(void *)&long long v397 = v376;
          *((void *)&v397 + 1) = v375;
          unint64_t v340 = v374;
          *(void *)&long long v398 = v374;
          *((void *)&v398 + 1) = v373;
          uint64_t v371 = 0;
          uint64_t v372 = mlir::DenseElementsAttr::getFromRawBuffer(v353, v166, &v395, 48, 8, 1, 0);
          unint64_t v167 = (uint64_t *)operator new(0x28uLL);
          uint64_t v168 = v167;
          if (StorageType == 7)
          {
            *(_OWORD *)unint64_t v167 = xmmword_181110C48;
            *((_OWORD *)v167 + 1) = unk_181110C58;
            uint64_t v169 = 4;
          }
          else
          {
            *(_OWORD *)unint64_t v167 = xmmword_181110BF8;
            *((_OWORD *)v167 + 1) = unk_181110C08;
            uint64_t v169 = 3;
          }
          v167[4] = v169;
          uint64_t v171 = v387;
          v395 = v19;
          mlir::ValueRange::ValueRange(v408, (uint64_t)&v395, 1uLL);
          __pa = v168;
          v395 = v386;
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v395);
          if (!DefiningOp
            || (uint64_t v173 = DefiningOp,
                uint64_t v174 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                ((*(uint64_t (**)(void, uint64_t))(**(void **)(v173 + 48) + 32))(*(void *)(v173 + 48), v174) & 1) == 0))
          {
            uint64_t v177 = *(void *)(v366 + 16);
            if (v177)
            {
              uint64_t v178 = v387;
              if (mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))) {
            }
              }
            uint64_t v82 = 0;
            int v83 = 0;
            goto LABEL_344;
          }
          uint64_t v175 = (uint64_t *)operator new(0x28uLL);
          uint64_t v176 = v175;
          if (WeightsLayout == 10)
          {
            v175[4] = 0;
            *(_OWORD *)uint64_t v175 = xmmword_181110C20;
            *((_OWORD *)v175 + 1) = unk_181110C30;
          }
          else
          {
            *(_OWORD *)uint64_t v175 = xmmword_181110C70;
            *((_OWORD *)v175 + 1) = unk_181110C80;
            v175[4] = 2;
          }
          uint64_t v179 = v387;
          v395 = v386;
          mlir::ValueRange::ValueRange(v407, (uint64_t)&v395, 1uLL);
          uint64_t v180 = (void *)(v386[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v180) {
            goto LABEL_193;
          }
          uint64_t v181 = *v180;
          unint64_t v182 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v183 = *(unsigned int *)(v181 + 16);
          if (!v183) {
            goto LABEL_193;
          }
          unint64_t v184 = *(void **)(v181 + 8);
          uint64_t v185 = &v184[2 * v183];
          do
          {
            unint64_t v186 = v183 >> 1;
            unint64_t v187 = &v184[2 * (v183 >> 1)];
            unint64_t v189 = *v187;
            unint64_t v188 = v187 + 2;
            v183 += ~(v183 >> 1);
            if (v189 < v182) {
              unint64_t v184 = v188;
            }
            else {
              unint64_t v183 = v186;
            }
          }
          while (v183);
          if (v184 != v185 && *v184 == v182) {
            uint64_t v190 = v184[1];
          }
          else {
LABEL_193:
          }
            uint64_t v190 = 0;
          v382 = v180;
          uint64_t v383 = v190;
          unint64_t v191 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
          uint64_t v192 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v382);
          unint64_t v194 = (unsigned char *)(v192 + 8 * v193);
          v395 = &v397;
          uint64_t v396 = 0x500000000;
          uint64_t v195 = v194 - v191;
          if ((unint64_t)(v194 - v191) < 0x29)
          {
            unsigned int v196 = 0;
            uint64_t v197 = (char *)&v397;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v395, &v397, v195 >> 3, 8);
            unsigned int v196 = v396;
            uint64_t v197 = (char *)v395;
          }
          if (v194 != v191)
          {
            memcpy(&v197[8 * v196], v191, v194 - v191);
            unsigned int v196 = v396;
            uint64_t v197 = (char *)v395;
          }
          unint64_t v198 = v196 + ((unint64_t)v195 >> 3);
          LODWORD(v396) = v196 + ((unint64_t)v195 >> 3);
          if (v197 != (char *)&v397)
          {
            if (v421 != v423)
            {
              free(v421);
              uint64_t v197 = (char *)v395;
              LODWORD(v198) = v396;
            }
            v421 = v197;
            unint64_t v422 = __PAIR64__(HIDWORD(v396), v198);
            v395 = &v397;
            HIDWORD(v396) = 0;
LABEL_216:
            LODWORD(v396) = 0;
            a4 = v366;
            if (v395 != &v397) {
              free(v395);
            }
            v369 = 0;
            if (v345)
            {
              uint64_t v200 = *(void *)(v366 + 16);
              if (v200)
              {
                uint64_t v201 = v387;
                if (mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))) {
              }
                }
              uint64_t v82 = 0;
              int v83 = 0;
LABEL_343:
              operator delete(v176);
LABEL_344:
              operator delete(__pa);
              if (v409 != v411) {
                free(v409);
              }
              if (v412 != v414) {
                free(v412);
              }
              goto LABEL_99;
            }
            uint64_t v202 = 8 * v347;
            v346 = v176;
            uint64_t v348 = *(void *)(ArgAttrsAttr + 8 * v347);
            uint64_t v203 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + v202);
            uint64_t v204 = *(void *)__dst;
            uint64_t v205 = 8 * v349;
            uint64_t v350 = *(void *)(ArgAttrsAttr + 8 * v349);
            uint64_t v206 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + v205);
            uint64_t v207 = *((void *)__dst + 1);
            uint64_t v208 = *(void *)(ArgAttrsAttr + 8 * v351);
            uint64_t v209 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385) + 8 * v351);
            v210 = __dst;
            uint64_t v211 = *((void *)__dst + 2);
            v402[0] = &v403;
            long long v404 = 0u;
            long long v405 = 0u;
            uint64_t v212 = v211 - v211 * v209;
            v402[1] = (void *)0x600000006;
            uint64_t v406 = 0;
            uint64_t v403 = v342 - v341;
            unint64_t v213 = (char *)(v348 + v341 + v204 - v204 * v203 - *(void *)__dst);
            *(void *)&long long v404 = v213;
            *((void *)&v404 + 1) = v343 - v339;
            *(void *)&long long v405 = v350 + v339 + v207 - v207 * v206 - *((void *)__dst + 1);
            *((void *)&v405 + 1) = v344 - v340;
            uint64_t v406 = v208 + v340 + v212 - *((void *)__dst + 2);
            unint64_t v214 = v409;
            if (v342 - v341 >= v356)
            {
              *(void *)v409 = -v341;
              uint64_t v403 = v342;
              unint64_t v213 = (char *)v404;
            }
            if ((uint64_t)v213 >= v356)
            {
              v214[1] = &v213[-v342];
              *(void *)&long long v404 = v342;
            }
            if (*((uint64_t *)&v404 + 1) >= v358)
            {
              v214[2] = *((void *)&v404 + 1) - v343;
              *((void *)&v404 + 1) = v343;
            }
            if ((uint64_t)v405 >= v358)
            {
              v214[3] = v405 - v343;
              *(void *)&long long v405 = v343;
            }
            if (*((uint64_t *)&v405 + 1) >= v360)
            {
              v214[4] = *((void *)&v405 + 1) - v344;
              *((void *)&v405 + 1) = v344;
            }
            if (v406 >= v360)
            {
              v214[5] = v406 - v344;
              uint64_t v406 = v344;
            }
            uint64_t v215 = v409;
            if (v342 + 2 >= 0) {
              uint64_t v216 = (v342 + 2) & 1;
            }
            else {
              uint64_t v216 = -((v342 + 2) & 1);
            }
            uint64_t v217 = v216 + 2 * ~v342 + v403 + *v210;
            uint64_t v218 = v217 + v404;
            if (v217 + (uint64_t)v404 >= 1)
            {
              *(void *)&long long v404 = -v217;
              *((void *)v409 + 1) += v218;
            }
            if (v343 + 2 >= 0) {
              uint64_t v219 = (v343 + 2) & 1;
            }
            else {
              uint64_t v219 = -((v343 + 2) & 1);
            }
            uint64_t v220 = v219 + 2 * ~v343 + *((void *)&v404 + 1) + v210[1];
            uint64_t v221 = v220 + v405;
            if (v220 + (uint64_t)v405 >= 1)
            {
              *(void *)&long long v405 = -v220;
              v215[3] += v221;
            }
            uint64_t v222 = v210[2];
            if (v344 + 2 >= 0) {
              uint64_t v223 = (v344 + 2) & 1;
            }
            else {
              uint64_t v223 = -((v344 + 2) & 1);
            }
            uint64_t v224 = v223 + 2 * ~v344 + *((void *)&v405 + 1) + v222;
            uint64_t v225 = v224 + v406;
            if (v224 + v406 >= 1)
            {
              uint64_t v406 = -v224;
              v215[5] += v225;
            }
            unint64_t v226 = v412;
            *(void *)v412 = -(v403 & (v403 >> 63));
            v403 &= ~(v403 >> 63);
            v226[1] = -(uint64_t)(v404 & ((uint64_t)v404 >> 63));
            *(void *)&long long v404 = v404 & ~((uint64_t)v404 >> 63);
            v226[2] = -(*((void *)&v404 + 1) & (*((uint64_t *)&v404 + 1) >> 63));
            *((void *)&v404 + 1) &= ~(*((uint64_t *)&v404 + 1) >> 63);
            v226[3] = -(uint64_t)(v405 & ((uint64_t)v405 >> 63));
            *(void *)&long long v405 = v405 & ~((uint64_t)v405 >> 63);
            v226[4] = -(*((void *)&v405 + 1) & (*((uint64_t *)&v405 + 1) >> 63));
            *((void *)&v405 + 1) &= ~(*((uint64_t *)&v405 + 1) >> 63);
            v226[5] = -(v406 & (v406 >> 63));
            uint64_t v227 = *((void *)&v405 + 1);
            uint64_t v228 = v406 & ~(v406 >> 63);
            uint64_t v406 = v228;
            unint64_t v229 = (void *)v403;
            uint64_t v230 = v404;
            uint64_t v377 = v404;
            v378 = (void *)v403;
            uint64_t v231 = *((void *)&v404 + 1);
            uint64_t v232 = v405;
            unint64_t v375 = v405;
            unint64_t v376 = *((void *)&v404 + 1);
            uint64_t v373 = v228;
            unint64_t v374 = *((void *)&v405 + 1);
            if (v353)
            {
              uint64_t v361 = *((void *)&v405 + 1);
              uint64_t v233 = *v353;
              unint64_t v234 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v235 = *(unsigned int *)(v233 + 16);
              if (v235)
              {
                uint64_t v236 = *(void **)(v233 + 8);
                uint64_t v237 = &v236[2 * v235];
                do
                {
                  unint64_t v238 = v235 >> 1;
                  int v239 = &v236[2 * (v235 >> 1)];
                  unint64_t v241 = *v239;
                  uint64_t v240 = v239 + 2;
                  v235 += ~(v235 >> 1);
                  if (v241 < v234) {
                    uint64_t v236 = v240;
                  }
                  else {
                    unint64_t v235 = v238;
                  }
                }
                while (v235);
                if (v236 != v237 && *v236 == v234) {
                  uint64_t v242 = v236[1];
                }
                else {
                  uint64_t v242 = 0;
                }
              }
              else
              {
                uint64_t v242 = 0;
              }
              uint64_t v227 = v361;
            }
            else
            {
              uint64_t v242 = 0;
            }
            v395 = v229;
            uint64_t v396 = v230;
            *(void *)&long long v397 = v231;
            *((void *)&v397 + 1) = v232;
            *(void *)&long long v398 = v227;
            *((void *)&v398 + 1) = v228;
            uint64_t v371 = 0;
            uint64_t v372 = mlir::DenseElementsAttr::getFromRawBuffer(v353, v242, &v395, 48, 8, 1, 0);
            uint64_t v243 = *(void *)(v387 + 24);
            LOBYTE(v390) = 0;
            v395 = 0;
            v391 = 0;
            v369 = (void *)((char *)mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL,decltype(nullptr),decltype(nullptr)>(v352, v243, &Transpose, (uint64_t *)&v386, &v380, &v379, &v372, &v371, &v381, (char *)&v390)- 16);
            a4 = v366;
            uint64_t v176 = v346;
            if (v410)
            {
              uint64_t v244 = 0;
              uint64_t v245 = (long long *)v409;
              while (*(uint64_t *)((char *)v409 + v244) < 1)
              {
                v244 += 8;
                if (8 * v410 == v244) {
                  goto LABEL_295;
                }
              }
              v395 = &v397;
              long long v397 = 0u;
              long long v398 = 0u;
              long long v399 = 0u;
              long long v400 = 0u;
              long long v401 = 0u;
              uint64_t v396 = 0xA0000000ALL;
              v391 = v393;
              memset_pattern16(v393, &unk_181110BB0, 0x28uLL);
              uint64_t v392 = 0x500000005;
              int64x2_t v394 = vdupq_n_s64(6uLL);
              v393[1] = 6;
              long long v398 = *v245;
              long long v400 = v245[1];
              long long v401 = v245[2];
              if (v398 != 0)
              {
                uint64_t v329 = *(void *)(v366 + 16);
                if (v329)
                {
                  uint64_t v330 = v387;
                  if (mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))) {
                }
                  }
                if (v391 != v393) {
                  free(v391);
                }
                if (v395 != &v397) {
                  free(v395);
                }
                if (v402[0] != &v403) {
                  free(v402[0]);
                }
                uint64_t v82 = 0;
                int v83 = 0;
                goto LABEL_343;
              }
              long long v390 = xmmword_1810FE2F0;
              uint64_t v246 = mlir::Builder::getIntegerType((mlir::Builder *)v352, 0x40u, 0);
              uint64_t v247 = (void *)mlir::RankedTensorType::get((uint64_t)&v390, 2, v246, 0);
              unint64_t v248 = v247;
              if (!v247) {
                goto LABEL_280;
              }
              uint64_t v249 = *v247;
              unint64_t v250 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v251 = *(unsigned int *)(v249 + 16);
              if (!v251) {
                goto LABEL_280;
              }
              uint64_t v252 = *(void **)(v249 + 8);
              uint64_t v253 = &v252[2 * v251];
              do
              {
                unint64_t v254 = v251 >> 1;
                uint64_t v255 = &v252[2 * (v251 >> 1)];
                unint64_t v257 = *v255;
                uint64_t v256 = v255 + 2;
                v251 += ~(v251 >> 1);
                if (v257 < v250) {
                  uint64_t v252 = v256;
                }
                else {
                  unint64_t v251 = v254;
                }
              }
              while (v251);
              if (v252 != v253 && *v252 == v250) {
                uint64_t v258 = v252[1];
              }
              else {
LABEL_280:
              }
                uint64_t v258 = 0;
              uint64_t v368 = mlir::DenseElementsAttr::getFromRawBuffer(v248, v258, v395, 8 * v396, 8, 1, 0);
              F16uint64_t FloatAttr = 5;
              uint64_t v259 = mlir::Builder::getIntegerType((mlir::Builder *)v352, 0x40u, 0);
              uint64_t v260 = (void *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v259, 0);
              long long v261 = v260;
              if (!v260) {
                goto LABEL_290;
              }
              uint64_t v262 = *v260;
              unint64_t v263 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v264 = *(unsigned int *)(v262 + 16);
              if (!v264) {
                goto LABEL_290;
              }
              v265 = *(void **)(v262 + 8);
              uint64_t v266 = &v265[2 * v264];
              do
              {
                unint64_t v267 = v264 >> 1;
                char v268 = &v265[2 * (v264 >> 1)];
                unint64_t v270 = *v268;
                uint64_t v269 = v268 + 2;
                v264 += ~(v264 >> 1);
                if (v270 < v263) {
                  v265 = v269;
                }
                else {
                  unint64_t v264 = v267;
                }
              }
              while (v264);
              if (v265 != v266 && *v265 == v263) {
                uint64_t v271 = v265[1];
              }
              else {
LABEL_290:
              }
                uint64_t v271 = 0;
              *(void *)&long long v390 = mlir::DenseElementsAttr::getFromRawBuffer(v261, v271, v391, 8 * v392, 8, 1, 0);
              F16uint64_t FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v352, 0.0, v272);
              v369 = (void *)((char *)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v352, v367, (uint64_t *)&v369, (uint64_t *)&v390, &v368, &F16FloatAttr)- 16);
              if (v391 != v393) {
                free(v391);
              }
              if (v395 != &v397) {
                free(v395);
              }
            }
LABEL_295:
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385);
            unsigned int IndexFromDim = mlir::anec::getIndexFromDim(2, v273);
            if (!v275
              || (unsigned int v276 = IndexFromDim,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385),
                  unsigned int v278 = mlir::anec::getIndexFromDim(3, v277),
                  !v279)
              || (unsigned int v280 = v278,
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v385),
                  unsigned int v282 = mlir::anec::getIndexFromDim(4, v281),
                  !v283))
            {
              uint64_t v331 = std::__throw_bad_optional_access[abi:nn180100]();
            }
            unsigned int v284 = v282;
            uint64_t v285 = v412;
            if (*(void *)v412 || *((void *)v412 + 1))
            {
              uint64_t v286 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v286) {
                goto LABEL_309;
              }
              uint64_t v287 = *v286;
              unint64_t v288 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v289 = *(unsigned int *)(v287 + 16);
              if (!v289) {
                goto LABEL_309;
              }
              unint64_t v290 = *(void **)(v287 + 8);
              uint64_t v291 = &v290[2 * v289];
              do
              {
                unint64_t v292 = v289 >> 1;
                uint64_t v293 = &v290[2 * (v289 >> 1)];
                unint64_t v295 = *v293;
                uint64_t v294 = v293 + 2;
                v289 += ~(v289 >> 1);
                if (v295 < v288) {
                  unint64_t v290 = v294;
                }
                else {
                  unint64_t v289 = v292;
                }
              }
              while (v289);
              if (v290 != v291 && *v290 == v288) {
                uint64_t v296 = v290[1];
              }
              else {
LABEL_309:
              }
                uint64_t v296 = 0;
              v395 = v286;
              uint64_t v396 = v296;
              uint64_t v297 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v276);
              LODWORD(v390) = 1;
              uint64_t v298 = *((void *)v412 + 1);
              v395 = *(void **)v412;
              v391 = (void *)(v297 - ((void)v395 + v298));
              v369 = (void *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
              uint64_t v285 = v412;
            }
            a4 = v366;
            if (v285[2] || v285[3])
            {
              long long v299 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v299) {
                goto LABEL_322;
              }
              uint64_t v300 = *v299;
              unint64_t v301 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v302 = *(unsigned int *)(v300 + 16);
              if (!v302) {
                goto LABEL_322;
              }
              v303 = *(void **)(v300 + 8);
              v304 = &v303[2 * v302];
              do
              {
                unint64_t v305 = v302 >> 1;
                v306 = &v303[2 * (v302 >> 1)];
                unint64_t v308 = *v306;
                v307 = v306 + 2;
                v302 += ~(v302 >> 1);
                if (v308 < v301) {
                  v303 = v307;
                }
                else {
                  unint64_t v302 = v305;
                }
              }
              while (v302);
              if (v303 != v304 && *v303 == v301) {
                uint64_t v309 = v303[1];
              }
              else {
LABEL_322:
              }
                uint64_t v309 = 0;
              v395 = v299;
              uint64_t v396 = v309;
              uint64_t v310 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v280);
              LODWORD(v390) = 3;
              uint64_t v311 = *((void *)v412 + 3);
              v395 = (void *)*((void *)v412 + 2);
              v391 = (void *)(v310 - ((void)v395 + v311));
              v369 = (void *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
              uint64_t v285 = v412;
            }
            if (v285[4] || v285[5])
            {
              v312 = (uint64_t *)(v369[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v312) {
                goto LABEL_335;
              }
              uint64_t v313 = *v312;
              unint64_t v314 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v315 = *(unsigned int *)(v313 + 16);
              if (!v315) {
                goto LABEL_335;
              }
              uint64_t v316 = *(void **)(v313 + 8);
              v317 = &v316[2 * v315];
              do
              {
                unint64_t v318 = v315 >> 1;
                long long v319 = &v316[2 * (v315 >> 1)];
                unint64_t v321 = *v319;
                long long v320 = v319 + 2;
                v315 += ~(v315 >> 1);
                if (v321 < v314) {
                  uint64_t v316 = v320;
                }
                else {
                  unint64_t v315 = v318;
                }
              }
              while (v315);
              if (v316 != v317 && *v316 == v314) {
                uint64_t v322 = v316[1];
              }
              else {
LABEL_335:
              }
                uint64_t v322 = 0;
              v395 = v312;
              uint64_t v396 = v322;
              uint64_t v323 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v395)
                               + 8 * v284);
              LODWORD(v390) = 4;
              uint64_t v324 = *((void *)v412 + 5);
              v395 = (void *)*((void *)v412 + 4);
              v391 = (void *)(v323 - ((void)v395 + v324));
              v369 = (void *)((char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v352, v367, (uint64_t *)&v369, (int *)&v390, (uint64_t *)&v395, (uint64_t *)&v391)- 16);
            }
            if (v402[0] != &v403) {
              free(v402[0]);
            }
            uint64_t v325 = (uint64_t *)operator new(0x28uLL);
            v326 = v325;
            uint64_t v176 = v346;
            if (StorageType == 7)
            {
              *(_OWORD *)uint64_t v325 = xmmword_181110C48;
              *((_OWORD *)v325 + 1) = unk_181110C58;
              uint64_t v327 = 4;
            }
            else
            {
              *(_OWORD *)uint64_t v325 = xmmword_181110C70;
              *((_OWORD *)v325 + 1) = unk_181110C80;
              uint64_t v327 = 2;
            }
            v325[4] = v327;
            uint64_t v328 = v387;
            v391 = v369;
            int v83 = 1;
            mlir::ValueRange::ValueRange((unint64_t *)&v395, (uint64_t)&v391, 1uLL);
            uint64_t v82 = mlir::Value::getDefiningOp((mlir::Value *)v402);
            operator delete(v326);
            goto LABEL_343;
          }
          uint64_t v199 = v422;
          if (v422 >= v198)
          {
            if (v198) {
              memmove(v421, &v397, 8 * v198);
            }
            goto LABEL_215;
          }
          if (HIDWORD(v422) >= v198)
          {
            if (v422)
            {
              memmove(v421, &v397, 8 * v422);
              goto LABEL_213;
            }
          }
          else
          {
            LODWORD(v422) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, v423, v198, 8);
          }
          uint64_t v199 = 0;
LABEL_213:
          if (v199 != v396) {
            memcpy(&v421[8 * v199], (char *)v395 + 8 * v199, 8 * v396 - 8 * v199);
          }
LABEL_215:
          LODWORD(v422) = v198;
          goto LABEL_216;
        }
        a4 = v366;
        uint64_t v109 = *(void *)(v366 + 16);
        if (!v109 || (uint64_t v170 = v387, !mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))))
        {
LABEL_98:
          uint64_t v82 = 0;
          int v83 = 0;
LABEL_99:
          if (__dst != v417) {
            free(__dst);
          }
          goto LABEL_58;
        }
        uint64_t v111 = *(void *)(v170 + 24);
      }
      else
      {
        a4 = v366;
        uint64_t v109 = *(void *)(v366 + 16);
        if (!v109) {
          goto LABEL_98;
        }
        uint64_t v125 = v387;
        if (!mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))) {
          goto LABEL_98;
        }
        uint64_t v111 = *(void *)(v125 + 24);
      }
    }
    else
    {
      a4 = v366;
      uint64_t v109 = *(void *)(v366 + 16);
      if (!v109) {
        goto LABEL_98;
      }
      uint64_t v110 = v387;
      if (!mlir::RewriterBase::Listener::classof(*(void *)(v366 + 16))) {
        goto LABEL_98;
      }
      uint64_t v111 = *(void *)(v110 + 24);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v109 + 64))(v109, v111, v112, &v395);
    goto LABEL_98;
  }
  uint64_t v77 = *(void *)(a4 + 16);
  if (!v77) {
    goto LABEL_57;
  }
  uint64_t v78 = v387;
  if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
    goto LABEL_57;
  }
  uint64_t v79 = *(void *)(v78 + 24);
LABEL_56:
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v77 + 64))(v77, v79, v80, &v395);
LABEL_57:
  uint64_t v82 = 0;
  int v83 = 0;
LABEL_58:
  if (v418 != (unint64_t *)v420) {
    free(v418);
  }
  if (v421 != v423) {
    free(v421);
  }
  if (!v83) {
    return 0;
  }
  v395 = (void *)(v82 - 16);
  uint64_t v84 = 1;
  mlir::ValueRange::ValueRange(v388, (uint64_t)&v395, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v388[0], v388[1]);
  return v84;
}

uint64_t mlir::anonymous namespace'::getExplicitConv3DPadding(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, unint64_t *a12, unint64_t *a13, unint64_t *a14, unint64_t a15, unint64_t a16, unint64_t a17)
{
  v35[10] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 1;
  switch(a3)
  {
    case 0:
      uint64_t v33 = v35;
      uint64_t v34 = 0xA00000000;
      mlir::getIntValues<unsigned long long>(a1, a2, (uint64_t)&v33, 1);
      long long v28 = v33;
      long long v29 = (char *)v33 + 8 * v34;
      if (v33 == v29 - 48)
      {
LABEL_14:
        *a9 = *((void *)v29 - 6);
        *a10 = *((void *)v29 - 5);
        *a11 = *((void *)v29 - 4);
        *a12 = *((void *)v29 - 3);
        *a13 = *((void *)v29 - 2);
        *a14 = *((void *)v29 - 1);
        uint64_t v17 = 1;
        if (v28 == v35) {
          return v17;
        }
        goto LABEL_18;
      }
      uint64_t v30 = 8 * v34 - 48;
      uint64_t v31 = v33;
      while (!*v31)
      {
        ++v31;
        v30 -= 8;
        if (!v30) {
          goto LABEL_14;
        }
      }
      uint64_t v17 = 0;
      if (v33 != v35) {
LABEL_18:
      }
        free(v28);
      return v17;
    case 1:
      *a9 = 0;
      *a10 = 0;
      *a11 = 0;
      *a12 = 0;
      *a13 = 0;
      *a14 = 0;
      return v17;
    case 2:
    case 4:
      unint64_t v18 = a4[1];
      unint64_t v19 = a15 % *a4;
      if (!v19) {
        unint64_t v19 = *a4;
      }
      unint64_t v20 = (a6 - v19) & ~((uint64_t)(a6 - v19) >> 63);
      unint64_t v21 = a16 % v18;
      if (!(a16 % v18)) {
        unint64_t v21 = a4[1];
      }
      unint64_t v22 = (a7 - v21) & ~((uint64_t)(a7 - v21) >> 63);
      unint64_t v23 = a4[2];
      if (a17 % v23) {
        unint64_t v23 = a17 % v23;
      }
      unint64_t v24 = (a8 - v23) & ~((uint64_t)(a8 - v23) >> 63);
      *a9 = v20 >> 1;
      *a10 = v20 - (v20 >> 1);
      *a11 = v22 >> 1;
      *a12 = v22 - (v22 >> 1);
      *a13 = v24 >> 1;
      *a14 = v24 - (v24 >> 1);
      if (a3 == 4)
      {
        unint64_t v25 = *a9;
        *a9 = *a10;
        *a10 = v25;
        unint64_t v26 = *a11;
        *a11 = *a12;
        *a12 = v26;
        unint64_t v27 = *a13;
        *a13 = *a14;
        *a14 = v27;
      }
      return v17;
    default:
      return v17;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL,decltype(nullptr),decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  v29[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v20)
  {
    __int16 v28 = 1283;
    v27[2] = (uint64_t)"anec.deconvolution";
    v27[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, 0, 0);
  unint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCDHW & NDHWC are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only weights dataLayout OIDHW & DHWIO are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Dilation not supported for deconvolution");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DDataGradientOp,mlir::anec::Deconvolution>::convert3D(mlir::mps::Conv3DDataGradientOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Depth dim not supported for ANEC padding");
}

void *mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::~ConvertConv(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::~ConvertConv(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv3DOpGenericAdaptorBase::Conv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::Conv3DOpGenericAdaptorBase::Conv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 96);
  uint64_t v9 = *(void *)(a3 + 104);
  unint64_t v37 = v8;
  uint64_t v38 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        unint64_t v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = v23;
        if (v37)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v35 = 259;
      v32[0] = v34;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        long long v28 = *(_OWORD *)(a3 + 96);
        long long v29 = *(_OWORD *)(a3 + 64);
        v36[5] = *(_OWORD *)(a3 + 80);
        v36[6] = v28;
        long long v30 = *(_OWORD *)(a3 + 16);
        v36[0] = *(_OWORD *)a3;
        v36[1] = v30;
        long long v31 = *(_OWORD *)(a3 + 32);
        v36[3] = *(_OWORD *)(a3 + 48);
        v36[4] = v29;
        v36[2] = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v36, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v32);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v38;
    if (v37 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v35 = 259;
  uint64_t v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  uint64_t v203 = a2;
  long long v225 = *(_OWORD *)(a3 + 96);
  char v6 = (void *)mlir::ValueRange::dereference_iterator(&v225, 0);
  uint64_t v7 = (void *)mlir::ValueRange::dereference_iterator(&v225, 1);
  uint64_t v202 = v7;
  uint64_t v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v203);
  uint64_t v9 = (uint64_t *)(v6[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  v201[0] = v9;
  v201[1] = v19;
  if (*(void *)(v8 + 8) >= 8uLL) {
    mlir::TypeID::get<mlir::ShapedType>();
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v201);
  uint64_t v21 = (void *)(v7[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v21) {
    goto LABEL_22;
  }
  uint64_t v22 = *v21;
  unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v24 = *(unsigned int *)(v22 + 16);
  if (!v24) {
    goto LABEL_22;
  }
  uint64_t v25 = *(void **)(v22 + 8);
  uint64_t v26 = &v25[2 * v24];
  do
  {
    unint64_t v27 = v24 >> 1;
    long long v28 = &v25[2 * (v24 >> 1)];
    unint64_t v30 = *v28;
    long long v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23) {
      uint64_t v25 = v29;
    }
    else {
      unint64_t v24 = v27;
    }
  }
  while (v24);
  if (v25 != v26 && *v25 == v23) {
    uint64_t v31 = v25[1];
  }
  else {
LABEL_22:
  }
    uint64_t v31 = 0;
  uint64_t v199 = v21;
  uint64_t v200 = v31;
  uint64_t v198 = 1;
  unint64_t v32 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
  uint64_t v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
  __int16 v35 = (unsigned char *)(v33 + 8 * v34);
  uint64_t v222 = v224;
  unint64_t v223 = 0x500000000;
  uint64_t v36 = v35 - v32;
  if ((unint64_t)(v35 - v32) < 0x29)
  {
    int v37 = 0;
    if (v35 == v32) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v36 >> 3, 8);
  int v37 = v223;
  if (v35 != v32)
  {
LABEL_27:
    memcpy(&v222[8 * v37], v32, v35 - v32);
    int v37 = v223;
  }
LABEL_28:
  LODWORD(v223) = v37 + ((unint64_t)v36 >> 3);
  uint64_t v219 = v221;
  uint64_t v220 = 0x500000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v203);
  uint64_t v39 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_37;
  }
  uint64_t v40 = *InputAttributeNames;
  unint64_t v41 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v42 = *(unsigned int *)(v40 + 16);
  if (!v42) {
    goto LABEL_37;
  }
  unint64_t v43 = *(void **)(v40 + 8);
  unint64_t v44 = &v43[2 * v42];
  do
  {
    unint64_t v45 = v42 >> 1;
    unint64_t v46 = &v43[2 * (v42 >> 1)];
    unint64_t v48 = *v46;
    unint64_t v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41) {
      unint64_t v43 = v47;
    }
    else {
      unint64_t v42 = v45;
    }
  }
  while (v42);
  if (v43 != v44 && *v43 == v41) {
    uint64_t v49 = v43[1];
  }
  else {
LABEL_37:
  }
    uint64_t v49 = 0;
  mlir::getIntValues<unsigned long long>(v39, v49, (uint64_t)&v219, 1);
  int StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v203);
  int v51 = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v203);
  int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v203);
  int v53 = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v203);
  if (StorageType != 7 && v51 != 8)
  {
    uint64_t v54 = *(void *)(a4 + 16);
    if (!v54) {
      goto LABEL_49;
    }
    unint64_t v55 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_49;
    }
    uint64_t v56 = *((void *)v55 + 3);
LABEL_48:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v54 + 64))(v54, v56, v57, v214);
LABEL_49:
    uint64_t v59 = 0;
    int v60 = 0;
    goto LABEL_50;
  }
  if (WeightsLayout != 10 && v53 != 9)
  {
    uint64_t v54 = *(void *)(a4 + 16);
    if (!v54) {
      goto LABEL_49;
    }
    uint64_t v58 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_49;
    }
    uint64_t v56 = *((void *)v58 + 3);
    goto LABEL_48;
  }
  uint64_t v63 = 8;
  uint64_t v64 = 16;
  if (StorageType == 7) {
    uint64_t v63 = 16;
  }
  uint64_t v65 = 24;
  if (StorageType == 7)
  {
    uint64_t v64 = 24;
    uint64_t v65 = 32;
  }
  BOOL v174 = v53 == 9;
  if (v53 == 9) {
    uint64_t v66 = 3;
  }
  else {
    uint64_t v66 = 1;
  }
  uint64_t v67 = 2;
  if (v53 == 9) {
    uint64_t v67 = 4;
  }
  uint64_t v176 = v67;
  uint64_t v178 = v66;
  unint64_t v183 = *(void *)(ArgAttrsAttr + v63);
  unint64_t v181 = *(void *)(ArgAttrsAttr + v64);
  unint64_t v180 = *(void *)(ArgAttrsAttr + v65);
  v214[0] = (void *)3;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  unint64_t v184 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v214, 1, IntegerType, 0);
  v214[0] = (void *)6;
  uint64_t v69 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  uint64_t v173 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v214, 1, v69, 0);
  __dst = v218;
  uint64_t v217 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v203);
  uint64_t v71 = (uint64_t)Strides;
  if (!Strides) {
    goto LABEL_76;
  }
  uint64_t v72 = *Strides;
  unint64_t v73 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v74 = *(unsigned int *)(v72 + 16);
  if (!v74) {
    goto LABEL_76;
  }
  uint64_t v75 = *(void **)(v72 + 8);
  int v76 = &v75[2 * v74];
  do
  {
    unint64_t v77 = v74 >> 1;
    uint64_t v78 = &v75[2 * (v74 >> 1)];
    unint64_t v80 = *v78;
    uint64_t v79 = v78 + 2;
    v74 += ~(v74 >> 1);
    if (v80 < v73) {
      uint64_t v75 = v79;
    }
    else {
      unint64_t v74 = v77;
    }
  }
  while (v74);
  if (v75 != v76 && *v75 == v73) {
    uint64_t v81 = v75[1];
  }
  else {
LABEL_76:
  }
    uint64_t v81 = 0;
  mlir::getIntValues<unsigned long long>(v71, v81, (uint64_t)&__dst, 1);
  uint64_t v82 = __dst;
  if (*(void *)__dst != 1 || *((void *)__dst + 1) != 1)
  {
    uint64_t v84 = *(void *)(a4 + 16);
    if (!v84) {
      goto LABEL_85;
    }
    uint64_t v85 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_85;
    }
    uint64_t v86 = *((void *)v85 + 3);
    goto LABEL_84;
  }
  uint64_t v83 = 8 * v217 - 16;
  if (v217 != 2) {
    memmove(__dst, (char *)__dst + 16, 8 * v217 - 16);
  }
  LODWORD(v217) = (unint64_t)(&v82[v83] - (unsigned char *)__dst) >> 3;
  if (!v184) {
    goto LABEL_101;
  }
  uint64_t v88 = *v184;
  unint64_t v89 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v90 = *(unsigned int *)(v88 + 16);
  if (!v90) {
    goto LABEL_101;
  }
  unint64_t v91 = *(void **)(v88 + 8);
  uint64_t v92 = &v91[2 * v90];
  do
  {
    unint64_t v93 = v90 >> 1;
    uint64_t v94 = &v91[2 * (v90 >> 1)];
    unint64_t v96 = *v94;
    uint64_t v95 = v94 + 2;
    v90 += ~(v90 >> 1);
    if (v96 < v89) {
      unint64_t v91 = v95;
    }
    else {
      unint64_t v90 = v93;
    }
  }
  while (v90);
  if (v91 != v92 && *v91 == v89) {
    uint64_t v97 = v91[1];
  }
  else {
LABEL_101:
  }
    uint64_t v97 = 0;
  uint64_t v197 = mlir::DenseElementsAttr::getFromRawBuffer(v184, v97, __dst, 8 * v217, 8, 1, 0);
  unint64_t v98 = v219;
  if (*v219 != 1 || v219[1] != 1)
  {
    uint64_t v84 = *(void *)(a4 + 16);
    if (!v84) {
      goto LABEL_85;
    }
    uint64_t v100 = v203;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_85;
    }
    uint64_t v86 = *((void *)v100 + 3);
    goto LABEL_84;
  }
  uint64_t v99 = 8 * v220 - 16;
  if (v220 != 2) {
    memmove(v219, v219 + 2, 8 * v220 - 16);
  }
  uint64_t v175 = 2 * v174;
  LODWORD(v220) = (unint64_t)(&v98[v99] - (unsigned char *)v219) >> 3;
  if (!v184) {
    goto LABEL_120;
  }
  uint64_t v101 = *v184;
  unint64_t v102 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v103 = *(unsigned int *)(v101 + 16);
  if (!v103) {
    goto LABEL_120;
  }
  unint64_t v104 = *(void **)(v101 + 8);
  unint64_t v105 = &v104[2 * v103];
  do
  {
    unint64_t v106 = v103 >> 1;
    unint64_t v107 = &v104[2 * (v103 >> 1)];
    unint64_t v109 = *v107;
    uint64_t v108 = v107 + 2;
    v103 += ~(v103 >> 1);
    if (v109 < v102) {
      unint64_t v104 = v108;
    }
    else {
      unint64_t v103 = v106;
    }
  }
  while (v103);
  if (v104 != v105 && *v104 == v102) {
    uint64_t v110 = v104[1];
  }
  else {
LABEL_120:
  }
    uint64_t v110 = 0;
  uint64_t v196 = mlir::DenseElementsAttr::getFromRawBuffer(v184, v110, v219, 8 * v220, 8, 1, 0);
  uint64_t v185 = (*(void *)&v222[8 * v175] - 1) * *v219 + 1;
  uint64_t v179 = (*(void *)&v222[8 * v178] - 1) * v219[1] + 1;
  uint64_t v177 = (*(void *)&v222[8 * v176] - 1) * v219[2] + 1;
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  unint64_t v192 = 0;
  unint64_t v193 = 0;
  unint64_t v190 = 0;
  unint64_t v191 = 0;
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v203);
  uint64_t v112 = (uint64_t)Rewriter;
  if (!Rewriter) {
    goto LABEL_130;
  }
  uint64_t v113 = *Rewriter;
  unint64_t v114 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v115 = *(unsigned int *)(v113 + 16);
  if (!v115) {
    goto LABEL_130;
  }
  unint64_t v116 = *(void **)(v113 + 8);
  uint64_t v117 = &v116[2 * v115];
  do
  {
    unint64_t v118 = v115 >> 1;
    unint64_t v119 = &v116[2 * (v115 >> 1)];
    unint64_t v121 = *v119;
    long long v120 = v119 + 2;
    v115 += ~(v115 >> 1);
    if (v121 < v114) {
      unint64_t v116 = v120;
    }
    else {
      unint64_t v115 = v118;
    }
  }
  while (v115);
  if (v116 != v117 && *v116 == v114) {
    uint64_t v122 = v116[1];
  }
  else {
LABEL_130:
  }
    uint64_t v122 = 0;
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v203);
  {
    v214[0] = v215;
    memset(v215, 0, sizeof(v215));
    v214[1] = (void *)0x600000006;
    uint64_t v211 = v213;
    memset(v213, 0, sizeof(v213));
    uint64_t v212 = 0x600000006;
    if (!v173) {
      goto LABEL_141;
    }
    uint64_t v124 = *v173;
    unint64_t v125 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v126 = *(unsigned int *)(v124 + 16);
    if (!v126) {
      goto LABEL_141;
    }
    unint64_t v127 = *(void **)(v124 + 8);
    unint64_t v128 = &v127[2 * v126];
    do
    {
      unint64_t v129 = v126 >> 1;
      unint64_t v130 = &v127[2 * (v126 >> 1)];
      unint64_t v132 = *v130;
      uint64_t v131 = v130 + 2;
      v126 += ~(v126 >> 1);
      if (v132 < v125) {
        unint64_t v127 = v131;
      }
      else {
        unint64_t v126 = v129;
      }
    }
    while (v126);
    if (v127 != v128 && *v127 == v125) {
      uint64_t v133 = v127[1];
    }
    else {
LABEL_141:
    }
      uint64_t v133 = 0;
    uint64_t v206 = v195;
    uint64_t v207 = v194;
    v208[0] = v193;
    v208[1] = v192;
    v208[2] = v191;
    v208[3] = v190;
    uint64_t v188 = 0;
    uint64_t v189 = mlir::DenseElementsAttr::getFromRawBuffer(v173, v133, &v206, 48, 8, 1, 0);
    uint64_t v134 = (uint64_t *)operator new(0x28uLL);
    unint64_t v135 = v134;
    if (StorageType == 7)
    {
      *(_OWORD *)uint64_t v134 = xmmword_181110C48;
      *((_OWORD *)v134 + 1) = unk_181110C58;
      uint64_t v136 = 4;
    }
    else
    {
      *(_OWORD *)uint64_t v134 = xmmword_181110BF8;
      *((_OWORD *)v134 + 1) = unk_181110C08;
      uint64_t v136 = 3;
    }
    v134[4] = v136;
    uint64_t v138 = (uint64_t)v203;
    uint64_t v206 = v6;
    mlir::ValueRange::ValueRange(v210, (uint64_t)&v206, 1uLL);
    uint64_t v206 = v7;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v206);
    if (!DefiningOp
      || (uint64_t v140 = DefiningOp,
          uint64_t v141 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(void, uint64_t))(**(void **)(v140 + 48) + 32))(*(void *)(v140 + 48), v141) & 1) == 0))
    {
      uint64_t v144 = *(void *)(a4 + 16);
      if (v144)
      {
        uint64_t v145 = v203;
        if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      }
        }
      uint64_t v59 = 0;
      int v60 = 0;
      goto LABEL_197;
    }
    int v142 = (uint64_t *)operator new(0x28uLL);
    uint64_t v143 = v142;
    if (WeightsLayout == 10)
    {
      v142[4] = 0;
      *(_OWORD *)int v142 = xmmword_181110C20;
      *((_OWORD *)v142 + 1) = unk_181110C30;
    }
    else
    {
      *(_OWORD *)int v142 = xmmword_181110C70;
      *((_OWORD *)v142 + 1) = unk_181110C80;
      v142[4] = 2;
    }
    uint64_t v146 = (uint64_t)v203;
    uint64_t v206 = v7;
    mlir::ValueRange::ValueRange(v209, (uint64_t)&v206, 1uLL);
    unint64_t v182 = v143;
    unint64_t v147 = (void *)(v202[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v147) {
      goto LABEL_167;
    }
    uint64_t v148 = *v147;
    unint64_t v149 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v150 = *(unsigned int *)(v148 + 16);
    if (!v150) {
      goto LABEL_167;
    }
    unint64_t v151 = *(void **)(v148 + 8);
    unint64_t v152 = &v151[2 * v150];
    do
    {
      unint64_t v153 = v150 >> 1;
      unint64_t v154 = &v151[2 * (v150 >> 1)];
      unint64_t v156 = *v154;
      uint64_t v155 = v154 + 2;
      v150 += ~(v150 >> 1);
      if (v156 < v149) {
        unint64_t v151 = v155;
      }
      else {
        unint64_t v150 = v153;
      }
    }
    while (v150);
    if (v151 != v152 && *v151 == v149) {
      uint64_t v157 = v151[1];
    }
    else {
LABEL_167:
    }
      uint64_t v157 = 0;
    uint64_t v199 = v147;
    uint64_t v200 = v157;
    unint64_t v158 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
    uint64_t v159 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v199);
    unint64_t v161 = (unsigned char *)(v159 + 8 * v160);
    uint64_t v206 = v208;
    uint64_t v207 = 0x500000000;
    uint64_t v162 = v161 - v158;
    if ((unint64_t)(v161 - v158) < 0x29)
    {
      int v163 = 0;
      int v164 = (char *)v208;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v208, v162 >> 3, 8);
      int v163 = v207;
      int v164 = (char *)v206;
    }
    if (v161 != v158)
    {
      memcpy(&v164[8 * v163], v158, v161 - v158);
      int v163 = v207;
      int v164 = (char *)v206;
    }
    unint64_t v165 = v163 + ((unint64_t)v162 >> 3);
    LODWORD(v207) = v165;
    if (v164 != (char *)v208)
    {
      if (v222 != v224)
      {
        free(v222);
        int v164 = (char *)v206;
        LODWORD(v165) = v207;
      }
      uint64_t v222 = v164;
      unint64_t v223 = __PAIR64__(HIDWORD(v207), v165);
      uint64_t v206 = v208;
      HIDWORD(v207) = 0;
      goto LABEL_191;
    }
    uint64_t v166 = v223;
    if (v223 >= v165)
    {
      if (v165) {
        memmove(v222, v208, 8 * v165);
      }
      goto LABEL_190;
    }
    if (HIDWORD(v223) >= v165)
    {
      if (v223)
      {
        memmove(v222, v208, 8 * v223);
        goto LABEL_188;
      }
    }
    else
    {
      LODWORD(v223) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v165, 8);
    }
    uint64_t v166 = 0;
LABEL_188:
    if (v166 != v207) {
      memcpy(&v222[8 * v166], (char *)v206 + 8 * v166, 8 * v207 - 8 * v166);
    }
LABEL_190:
    LODWORD(v223) = v165;
LABEL_191:
    LODWORD(v207) = 0;
    if (v206 != v208) {
      free(v206);
    }
    uint64_t v167 = *((void *)v203 + 3);
    LOBYTE(v205) = 0;
    uint64_t v206 = 0;
    uint64_t v186 = 0;
    uint64_t v168 = (char *)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,long long &,BOOL,decltype(nullptr),decltype(nullptr)>((uint64_t *)(a4 + 8), v167, &Transpose, (uint64_t *)&v202, &v197, &v196, &v189, &v188, &v198, (char *)&v205)- 16;
    uint64_t v169 = (uint64_t *)operator new(0x28uLL);
    uint64_t v170 = v169;
    if (StorageType == 7)
    {
      *(_OWORD *)uint64_t v169 = xmmword_181110C48;
      *((_OWORD *)v169 + 1) = unk_181110C58;
      uint64_t v171 = 4;
    }
    else
    {
      *(_OWORD *)uint64_t v169 = xmmword_181110C70;
      *((_OWORD *)v169 + 1) = unk_181110C80;
      uint64_t v171 = 2;
    }
    v169[4] = v171;
    uint64_t v172 = (uint64_t)v203;
    uint64_t v205 = v168;
    int v60 = 1;
    mlir::ValueRange::ValueRange((unint64_t *)&v206, (uint64_t)&v205, 1uLL);
    uint64_t v59 = mlir::Value::getDefiningOp((mlir::Value *)&v186);
    operator delete(v170);
    operator delete(v182);
LABEL_197:
    operator delete(v135);
    if (v211 != v213) {
      free(v211);
    }
    if (v214[0] != v215) {
      free(v214[0]);
    }
    goto LABEL_86;
  }
  uint64_t v84 = *(void *)(a4 + 16);
  if (v84)
  {
    uint64_t v137 = v203;
    if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16)))
    {
      uint64_t v86 = *((void *)v137 + 3);
LABEL_84:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v84 + 64))(v84, v86, v87, v214);
    }
  }
LABEL_85:
  uint64_t v59 = 0;
  int v60 = 0;
LABEL_86:
  if (__dst != v218) {
    free(__dst);
  }
LABEL_50:
  if (v219 != (void *)v221) {
    free(v219);
  }
  if (v222 != v224) {
    free(v222);
  }
  if (!v60) {
    return 0;
  }
  v214[0] = (void *)(v59 - 16);
  uint64_t v61 = 1;
  mlir::ValueRange::ValueRange(v204, (uint64_t)v214, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, a2, v204[0], v204[1]);
  return v61;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCDHW & NDHWC are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only weights dataLayout OIDHW & DHWIO are supported for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv3D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::Conv3DOp,mlir::anec::Convolution>::convert3D(mlir::mps::Conv3DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

void *mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::~ConvertConv(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::~ConvertConv(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::DepthwiseConv2DOpGenericAdaptorBase::DepthwiseConv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::detail::DepthwiseConv2DOpGenericAdaptorBase::DepthwiseConv2DOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DepthwiseConv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(uint64_t **)(a3 + 88);
  uint64_t v9 = *(void *)(a3 + 96);
  int v37 = v8;
  uint64_t v38 = 0;
  if (!v9)
  {
LABEL_18:
    uint64_t v19 = *(unsigned int *)(a2 + 36);
    if (v19) {
      uint64_t v20 = a2 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
        int v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v38 = v23;
        if (v37)
        {
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
          {
            goto LABEL_32;
          }
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
          if (v25) {
            break;
          }
        }
LABEL_23:
        if (++v21 == v19) {
          goto LABEL_35;
        }
      }
      uint64_t v26 = 8 * v25;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v26 -= 8;
        if (!v26) {
          goto LABEL_23;
        }
      }
LABEL_32:
      v33[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
      __int16 v34 = 259;
      v31[0] = v33;
      uint64_t v27 = *(void *)(a4 + 16);
      if (v27)
      {
        uint64_t result = mlir::RewriterBase::Listener::classof(v27);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void *))(*(void *)v27 + 64))(v27, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv2DOp &>(mlir::mps::DepthwiseConv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v31);
        }
        return result;
      }
    }
    else
    {
LABEL_35:
      if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp(*(mlir::Block **)(a2 + 16)) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::FusionOp,void>::id)
      {
        uint64_t v36 = *(void *)(a3 + 96);
        long long v28 = *(_OWORD *)(a3 + 80);
        v35[4] = *(_OWORD *)(a3 + 64);
        v35[5] = v28;
        long long v29 = *(_OWORD *)(a3 + 16);
        v35[0] = *(_OWORD *)a3;
        v35[1] = v29;
        long long v30 = *(_OWORD *)(a3 + 48);
        v35[2] = *(_OWORD *)(a3 + 32);
        v35[3] = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v35, a4);
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v31[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v31[1] = v13;
    if (v31[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31))
      {
        goto LABEL_15;
      }
      unint64_t v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
      if (v15) {
        break;
      }
    }
LABEL_3:
    uint64_t v10 = ++v38;
    if (v37 == v8 && v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16) {
      goto LABEL_3;
    }
  }
LABEL_15:
  __int16 v34 = 259;
  unint64_t v32 = v33;
  v33[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v17);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v17 + 64))(v17, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv2DOp &>(mlir::mps::DepthwiseConv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v32);
  }
  return result;
}

uint64_t mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  uint64_t v269 = a2;
  long long v299 = *(_OWORD *)(a3 + 88);
  char v268 = 1;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v267 = mlir::ValueRange::dereference_iterator(&v299, 0);
  uint64_t v266 = mlir::ValueRange::dereference_iterator(&v299, 1);
  uint64_t v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v269);
  uint64_t v9 = (uint64_t *)(*(void *)(v267 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  unint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  v265[0] = v9;
  v265[1] = v19;
  if (*(void *)(v8 + 8) >= 8uLL) {
    mlir::TypeID::get<mlir::ShapedType>();
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v265);
  uint64_t v22 = v21;
  uint64_t v23 = (void *)(*(void *)(v266 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_22;
  }
  uint64_t v24 = *v23;
  unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v26 = *(unsigned int *)(v24 + 16);
  if (!v26) {
    goto LABEL_22;
  }
  uint64_t v27 = *(void **)(v24 + 8);
  long long v28 = &v27[2 * v26];
  do
  {
    unint64_t v29 = v26 >> 1;
    long long v30 = &v27[2 * (v26 >> 1)];
    unint64_t v32 = *v30;
    uint64_t v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25) {
      uint64_t v27 = v31;
    }
    else {
      unint64_t v26 = v29;
    }
  }
  while (v26);
  if (v27 != v28 && *v27 == v25) {
    uint64_t v33 = v27[1];
  }
  else {
LABEL_22:
  }
    uint64_t v33 = 0;
  unint64_t v263 = v23;
  uint64_t v264 = v33;
  uint64_t v262 = 1;
  __int16 v34 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  uint64_t v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  int v37 = (unsigned char *)(v35 + 8 * v36);
  uint64_t v296 = v298;
  unint64_t v297 = 0x400000000;
  uint64_t v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    int v39 = 0;
    if (v37 == v34) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, v298, v38 >> 3, 8);
  int v39 = v297;
  if (v37 != v34)
  {
LABEL_27:
    memcpy(&v296[8 * v39], v34, v37 - v34);
    int v39 = v297;
  }
LABEL_28:
  LODWORD(v297) = v39 + ((unint64_t)v38 >> 3);
  uint64_t v293 = v295;
  uint64_t v294 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v269);
  uint64_t v41 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames) {
    goto LABEL_37;
  }
  uint64_t v42 = *InputAttributeNames;
  unint64_t v43 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v44 = *(unsigned int *)(v42 + 16);
  if (!v44) {
    goto LABEL_37;
  }
  unint64_t v45 = *(void **)(v42 + 8);
  unint64_t v46 = &v45[2 * v44];
  do
  {
    unint64_t v47 = v44 >> 1;
    unint64_t v48 = &v45[2 * (v44 >> 1)];
    unint64_t v50 = *v48;
    uint64_t v49 = v48 + 2;
    v44 += ~(v44 >> 1);
    if (v50 < v43) {
      unint64_t v45 = v49;
    }
    else {
      unint64_t v44 = v47;
    }
  }
  while (v44);
  if (v45 != v46 && *v45 == v43) {
    uint64_t v51 = v45[1];
  }
  else {
LABEL_37:
  }
    uint64_t v51 = 0;
  mlir::getIntValues<unsigned long long>(v41, v51, (uint64_t)&v293, 1);
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v269))
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v53 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v53 + 24);
LABEL_42:
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v52 + 64))(v52, v54, v55, &v276);
LABEL_43:
    uint64_t v56 = 0;
    int v57 = 0;
    goto LABEL_44;
  }
  if (mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v269) != 2
    && mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v269) != 3)
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v103 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v103 + 24);
    goto LABEL_42;
  }
  long long v261 = 0uLL;
  uint64_t v259 = 0;
  uint64_t v260 = 0;
  unint64_t v257 = 0;
  uint64_t v258 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  uint64_t v59 = *(void **)(*(void *)(v269 + 72) + 56);
  *(void *)&long long v276 = &v261;
  *((void *)&v276 + 1) = &v259;
  *(void *)&long long v277 = &v257;
  *((void *)&v277 + 1) = &v255;
  ArgOperands = v59;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp
    || (unsigned int v284 = (void *)DefiningOp,
        *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
    || *(_DWORD *)(DefiningOp + 68) != 4
    || (LOBYTE(v290) = 1,
        __p = &v290,
        uint64_t v288 = (uint64_t)&v284,
        mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&v276, (uint64_t)&__p), !(_BYTE)v290))
  {
    uint64_t v61 = *(void *)(*(void *)(v269 + 72) + 56);
    uint64_t v288 = (uint64_t)&v259;
    *(void *)&v289[0] = &v257;
    *((void *)&v289[0] + 1) = &v255;
    *(void *)&long long v254 = v61;
    uint64_t v62 = mlir::Value::getDefiningOp((mlir::Value *)&v254);
    if (!v62) {
      goto LABEL_67;
    }
    unint64_t v290 = (void *)v62;
    if (*(_UNKNOWN **)(*(void *)(v62 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      goto LABEL_67;
    }
    if ((*(unsigned char *)(v62 + 46) & 0x80) == 0) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(v62 + 68) != 4) {
      goto LABEL_67;
    }
    LOBYTE(v272) = 1;
    unsigned int v284 = &v272;
    uint64_t v285 = (uint64_t)&v290;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcher<mlir::mps::QuantizeOp,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher,mlir::detail::constant_op_matcher>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&__p, (uint64_t)&v284);
    if (!(_BYTE)v272) {
      goto LABEL_67;
    }
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v257);
  uint64_t v274 = v63;
  uint64_t v64 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v64, v65) == 1 && mlir::ElementsAttr::getNumElements(v255, v256) == 1) {
    BOOL v66 = (mlir::getSingleFloatValue<float>(v255, v256) & 0x7FFFFFFF) == 0;
  }
  else {
LABEL_67:
  }
    BOOL v66 = 0;
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v68 = 1;
  }
  else {
    BOOL v68 = (void)v261 == 0;
  }
  int v69 = !v68;
  if (v68)
  {
    uint64_t v75 = 0;
    uint64_t v243 = 0;
  }
  else
  {
    uint64_t v243 = mlir::convertElementsAttr(v259, v260, 1);
    *(void *)&long long v276 = mlir::getElementTypeOrSelf(v257);
    BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v276);
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 8u, isSignedInteger);
    __p = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v257);
    uint64_t v288 = v72;
    LOBYTE(v276) = 0;
    LOBYTE(v277) = 0;
    uint64_t v73 = mlir::ShapedType::cloneWith((uint64_t *)&__p, &v276, IntegerType);
    uint64_t v75 = mlir::rewriteElementsAttr((uint64_t)v257, v258, v73, v74, 1);
  }
  long long v254 = 0uLL;
  __p = &v254;
  *(void *)&long long v276 = v266;
  uint64_t v76 = mlir::Value::getDefiningOp((mlir::Value *)&v276);
  if ((!v76 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&__p, v76))
    && (!v66 || mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v269) == 3))
  {
    uint64_t v52 = *(void *)(a4 + 16);
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v77 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_43;
    }
    uint64_t v54 = *(void *)(v77 + 24);
    goto LABEL_42;
  }
  uint64_t v242 = v75;
  int v239 = v69;
  if (v69)
  {
    long long v254 = v261;
    uint64_t v78 = v296;
    uint64_t v79 = (mlir::AffineMap *)v297;
    *(void *)&long long v276 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v254);
    *((void *)&v276 + 1) = v80;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v276);
    __p = (void *)mlir::MemRefType::get(v78, v79, OperandRange, 0, 0, 0);
    uint64_t v266 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v7, (uint64_t *)&__p, (void **)&v254)- 16;
  }
  uint64_t v240 = v7;
  if (mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v269) != 3) {
    goto LABEL_129;
  }
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v266);
  uint64_t v83 = operator new(0x40uLL);
  *(void *)&v289[0] = v83 + 4;
  *uint64_t v83 = xmmword_181110B50;
  v83[1] = xmmword_181110B60;
  uint64_t v83[2] = xmmword_181110B70;
  v83[3] = xmmword_181110B80;
  __p = v83;
  uint64_t v288 = (uint64_t)(v83 + 4);
  *(void *)&long long v276 = &v277;
  *((void *)&v276 + 1) = 0x100000000;
  mlir::OpBuilder::createOrFold<mlir::anec::Transpose,mlir::Value &,std::vector<std::pair<unsigned long long,unsigned long long>>>((mlir::Builder *)(a4 + 8), (uint64_t)&v276, Loc, &v266, (uint64_t)&__p);
  uint64_t v84 = *(void *)v276;
  if ((long long *)v276 != &v277) {
    free((void *)v276);
  }
  uint64_t v266 = v84;
  if (__p)
  {
    uint64_t v288 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v84 = v266;
  }
  uint64_t v85 = (void *)(*(void *)(v84 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v85) {
    goto LABEL_100;
  }
  uint64_t v86 = *v85;
  unint64_t v87 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v88 = *(unsigned int *)(v86 + 16);
  if (!v88) {
    goto LABEL_100;
  }
  unint64_t v89 = *(void **)(v86 + 8);
  unint64_t v90 = &v89[2 * v88];
  do
  {
    unint64_t v91 = v88 >> 1;
    uint64_t v92 = &v89[2 * (v88 >> 1)];
    unint64_t v94 = *v92;
    unint64_t v93 = v92 + 2;
    v88 += ~(v88 >> 1);
    if (v94 < v87) {
      unint64_t v89 = v93;
    }
    else {
      unint64_t v88 = v91;
    }
  }
  while (v88);
  if (v89 != v90 && *v89 == v87) {
    uint64_t v95 = v89[1];
  }
  else {
LABEL_100:
  }
    uint64_t v95 = 0;
  unint64_t v263 = v85;
  uint64_t v264 = v95;
  unint64_t v96 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  uint64_t v97 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
  uint64_t v99 = (unsigned char *)(v97 + 8 * v98);
  *(void *)&long long v276 = &v277;
  *((void *)&v276 + 1) = 0x400000000;
  uint64_t v100 = v99 - v96;
  if ((unint64_t)(v99 - v96) < 0x21)
  {
    unsigned int v101 = 0;
    unint64_t v102 = (char *)&v277;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, &v277, v100 >> 3, 8);
    unsigned int v101 = DWORD2(v276);
    unint64_t v102 = (char *)v276;
  }
  if (v99 != v96)
  {
    memcpy(&v102[8 * v101], v96, v99 - v96);
    unsigned int v101 = DWORD2(v276);
    unint64_t v102 = (char *)v276;
  }
  unint64_t v104 = v101 + ((unint64_t)v100 >> 3);
  DWORD2(v276) = v101 + ((unint64_t)v100 >> 3);
  if (v102 != (char *)&v277)
  {
    if (v296 != v298)
    {
      free(v296);
      unint64_t v102 = (char *)v276;
      LODWORD(v104) = DWORD2(v276);
    }
    uint64_t v296 = v102;
    unint64_t v297 = __PAIR64__(HIDWORD(v276), v104);
    *(void *)&long long v276 = &v277;
    HIDWORD(v276) = 0;
    goto LABEL_127;
  }
  uint64_t v105 = v297;
  if (v297 >= v104)
  {
    if (v104) {
      memmove(v296, &v277, 8 * v104);
    }
    goto LABEL_126;
  }
  if (HIDWORD(v297) >= v104)
  {
    if (v297)
    {
      memmove(v296, &v277, 8 * v297);
      goto LABEL_124;
    }
  }
  else
  {
    LODWORD(v297) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, v298, v104, 8);
  }
  uint64_t v105 = 0;
LABEL_124:
  if (v105 != DWORD2(v276)) {
    memcpy(&v296[8 * v105], (const void *)(v276 + 8 * v105), 8 * DWORD2(v276) - 8 * v105);
  }
LABEL_126:
  LODWORD(v297) = v104;
LABEL_127:
  DWORD2(v276) = 0;
  if ((long long *)v276 != &v277) {
    free((void *)v276);
  }
LABEL_129:
  *(void *)&long long v276 = 3;
  uint64_t v106 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  unint64_t v107 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v276, 1, v106, 0);
  *(void *)&long long v276 = 6;
  unint64_t v241 = (uint64_t *)(a4 + 8);
  uint64_t v108 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
  unint64_t v238 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v276, 1, v108, 0);
  unint64_t v290 = v292;
  uint64_t v291 = 0x200000000;
  Strides = (uint64_t *)mlir::mps::ColToImOp::getStrides((mlir::mps::ColToImOp *)&v269);
  uint64_t v110 = (uint64_t)Strides;
  if (!Strides) {
    goto LABEL_139;
  }
  uint64_t v111 = *Strides;
  unint64_t v112 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v113 = *(unsigned int *)(v111 + 16);
  if (!v113)
  {
    uint64_t v121 = 0;
    long long v120 = v242;
    goto LABEL_142;
  }
  unint64_t v114 = *(void **)(v111 + 8);
  unint64_t v115 = &v114[2 * v113];
  do
  {
    unint64_t v116 = v113 >> 1;
    uint64_t v117 = &v114[2 * (v113 >> 1)];
    unint64_t v119 = *v117;
    unint64_t v118 = v117 + 2;
    v113 += ~(v113 >> 1);
    if (v119 < v112) {
      unint64_t v114 = v118;
    }
    else {
      unint64_t v113 = v116;
    }
  }
  while (v113);
  if (v114 == v115)
  {
LABEL_139:
    uint64_t v121 = 0;
    long long v120 = v242;
  }
  else
  {
    long long v120 = v242;
    if (*v114 == v112) {
      uint64_t v121 = v114[1];
    }
    else {
      uint64_t v121 = 0;
    }
  }
LABEL_142:
  mlir::getIntValues<unsigned long long>(v110, v121, (uint64_t)&v290, 1);
  uint64_t v122 = v290;
  if (*v290 != 1 || v290[1] != 1)
  {
    uint64_t v124 = *(void *)(a4 + 16);
    if (!v124) {
      goto LABEL_150;
    }
    uint64_t v125 = v269;
    if (!mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      goto LABEL_150;
    }
    uint64_t v126 = *(void *)(v125 + 24);
    goto LABEL_149;
  }
  uint64_t v123 = 8 * v291 - 16;
  if (v291 != 2) {
    memmove(v290, v290 + 2, 8 * v291 - 16);
  }
  LODWORD(v291) = (unint64_t)(&v122[v123] - (unsigned char *)v290) >> 3;
  *(void *)&long long v276 = 1;
  llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v290, (uint64_t)v290, (uint64_t *)&v276);
  if (v107)
  {
    uint64_t v128 = *v107;
    unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v130 = *(unsigned int *)(v128 + 16);
    if (!v130) {
      goto LABEL_163;
    }
    uint64_t v131 = *(void **)(v128 + 8);
    unint64_t v132 = &v131[2 * v130];
    do
    {
      unint64_t v133 = v130 >> 1;
      uint64_t v134 = &v131[2 * (v130 >> 1)];
      unint64_t v136 = *v134;
      unint64_t v135 = v134 + 2;
      v130 += ~(v130 >> 1);
      if (v136 < v129) {
        uint64_t v131 = v135;
      }
      else {
        unint64_t v130 = v133;
      }
    }
    while (v130);
    if (v131 != v132 && *v131 == v129) {
      uint64_t v137 = v131[1];
    }
    else {
LABEL_163:
    }
      uint64_t v137 = 0;
  }
  else
  {
    uint64_t v137 = 0;
  }
  uint64_t v253 = mlir::DenseElementsAttr::getFromRawBuffer(v107, v137, v290, 8 * v291, 8, 1, 0);
  uint64_t v138 = v293;
  if (*(void *)v293 == 1 && *((void *)v293 + 1) == 1)
  {
    uint64_t v139 = 8 * v294 - 16;
    if (v294 != 2) {
      memmove(v293, v293 + 16, 8 * v294 - 16);
    }
    LODWORD(v294) = (unint64_t)(&v138[v139] - v293) >> 3;
    *(void *)&long long v276 = 1;
    llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v293, (uint64_t)v293, (uint64_t *)&v276);
    if (!v107) {
      goto LABEL_183;
    }
    uint64_t v141 = *v107;
    unint64_t v142 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v143 = *(unsigned int *)(v141 + 16);
    if (!v143) {
      goto LABEL_183;
    }
    uint64_t v144 = *(void **)(v141 + 8);
    uint64_t v145 = &v144[2 * v143];
    do
    {
      unint64_t v146 = v143 >> 1;
      unint64_t v147 = &v144[2 * (v143 >> 1)];
      unint64_t v149 = *v147;
      uint64_t v148 = v147 + 2;
      v143 += ~(v143 >> 1);
      if (v149 < v142) {
        uint64_t v144 = v148;
      }
      else {
        unint64_t v143 = v146;
      }
    }
    while (v143);
    if (v144 != v145 && *v144 == v142) {
      uint64_t v150 = v144[1];
    }
    else {
LABEL_183:
    }
      uint64_t v150 = 0;
    unint64_t v251 = 0;
    uint64_t v252 = mlir::DenseElementsAttr::getFromRawBuffer(v107, v150, v293, 8 * v294, 8, 1, 0);
    uint64_t v237 = (*((void *)v296 + 2) - 1) * *((void *)v293 + 1) + 1;
    uint64_t v151 = (*((void *)v296 + 3) - 1) * *((void *)v293 + 2) + 1;
    unint64_t v249 = 0;
    unint64_t v250 = 0;
    unint64_t v248 = 0;
    Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v269);
    uint64_t v153 = (uint64_t)Rewriter;
    if (!Rewriter) {
      goto LABEL_193;
    }
    uint64_t v154 = *Rewriter;
    unint64_t v155 = mlir::TypeID::get<mlir::ElementsAttr>();
    unint64_t v156 = *(unsigned int *)(v154 + 16);
    if (!v156) {
      goto LABEL_193;
    }
    uint64_t v157 = *(void **)(v154 + 8);
    unint64_t v158 = &v157[2 * v156];
    do
    {
      unint64_t v159 = v156 >> 1;
      uint64_t v160 = &v157[2 * (v156 >> 1)];
      unint64_t v162 = *v160;
      unint64_t v161 = v160 + 2;
      v156 += ~(v156 >> 1);
      if (v162 < v155) {
        uint64_t v157 = v161;
      }
      else {
        unint64_t v156 = v159;
      }
    }
    while (v156);
    if (v157 != v158 && *v157 == v155) {
      uint64_t v163 = v157[1];
    }
    else {
LABEL_193:
    }
      uint64_t v163 = 0;
    int PaddingStyle = mlir::mps::DepthwiseConv2DDataGradientOp::getPaddingStyle((mlir::mps::DepthwiseConv2DDataGradientOp *)&v269);
    {
      __p = v289;
      memset(v289, 0, sizeof(v289));
      uint64_t v288 = 0x600000006;
      unsigned int v284 = v286;
      memset(v286, 0, sizeof(v286));
      uint64_t v285 = 0x600000006;
      if (v238)
      {
        uint64_t v165 = *v238;
        unint64_t v166 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v167 = *(unsigned int *)(v165 + 16);
        uint64_t v168 = v240;
        if (!v167) {
          goto LABEL_204;
        }
        uint64_t v169 = *(void **)(v165 + 8);
        uint64_t v170 = &v169[2 * v167];
        do
        {
          unint64_t v171 = v167 >> 1;
          uint64_t v172 = &v169[2 * (v167 >> 1)];
          unint64_t v174 = *v172;
          uint64_t v173 = v172 + 2;
          v167 += ~(v167 >> 1);
          if (v174 < v166) {
            uint64_t v169 = v173;
          }
          else {
            unint64_t v167 = v171;
          }
        }
        while (v167);
        if (v169 != v170 && *v169 == v166) {
          uint64_t v175 = v169[1];
        }
        else {
LABEL_204:
        }
          uint64_t v175 = 0;
      }
      else
      {
        uint64_t v175 = 0;
        uint64_t v168 = v240;
      }
      long long v276 = 0uLL;
      *(void *)&long long v277 = v251;
      *((void *)&v277 + 1) = v250;
      *(void *)&long long v278 = v249;
      *((void *)&v278 + 1) = v248;
      uint64_t v246 = 0;
      uint64_t v247 = mlir::DenseElementsAttr::getFromRawBuffer(v238, v175, &v276, 48, 8, 1, 0);
      uint64_t v178 = *(void *)(v269 + 24);
      if (v239)
      {
        uint64_t v179 = v243;
      }
      else
      {
        uint64_t v179 = 0;
        long long v120 = 0;
      }
      *(void *)&long long v276 = v179;
      ArgOperands = v120;
      uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,unsigned long long &,BOOL const&,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(v241, v178, &v267, &v266, &v253, &v252, &v247, &v246, &v262, &v268, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
      if (v285)
      {
        unint64_t v180 = v284;
        uint64_t v181 = 8 * v285;
        unint64_t v182 = (uint64_t *)v284;
        while (*v182 < 1)
        {
          ++v182;
          v181 -= 8;
          if (!v181) {
            goto LABEL_244;
          }
        }
        *(void *)&long long v276 = &v277;
        long long v277 = 0u;
        long long v278 = 0u;
        long long v279 = 0u;
        *((void *)&v276 + 1) = 0xA0000000ALL;
        ArgOperands = v275;
        memset_pattern16(v275, &unk_181110BB0, 0x28uLL);
        uint64_t v274 = 0x500000005;
        *(int64x2_t *)&v275[24] = vdupq_n_s64(6uLL);
        uint64_t v280 = v180[2];
        uint64_t v281 = v180[3];
        uint64_t v282 = v180[4];
        uint64_t v283 = v180[5];
        long long v272 = xmmword_1810FE2F0;
        uint64_t v183 = mlir::Builder::getIntegerType((mlir::Builder *)v241, 0x40u, 0);
        unint64_t v184 = (void *)mlir::RankedTensorType::get((uint64_t)&v272, 2, v183, 0);
        uint64_t v185 = v184;
        if (!v184) {
          goto LABEL_228;
        }
        uint64_t v186 = *v184;
        unint64_t v187 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v188 = *(unsigned int *)(v186 + 16);
        if (!v188) {
          goto LABEL_228;
        }
        uint64_t v189 = *(void **)(v186 + 8);
        unint64_t v190 = &v189[2 * v188];
        do
        {
          unint64_t v191 = v188 >> 1;
          unint64_t v192 = &v189[2 * (v188 >> 1)];
          unint64_t v194 = *v192;
          unint64_t v193 = v192 + 2;
          v188 += ~(v188 >> 1);
          if (v194 < v187) {
            uint64_t v189 = v193;
          }
          else {
            unint64_t v188 = v191;
          }
        }
        while (v188);
        if (v189 != v190 && *v189 == v187) {
          uint64_t v195 = v189[1];
        }
        else {
LABEL_228:
        }
          uint64_t v195 = 0;
        uint64_t v244 = mlir::DenseElementsAttr::getFromRawBuffer(v185, v195, v276, 8 * DWORD2(v276), 8, 1, 0);
        F16uint64_t FloatAttr = 5;
        uint64_t v196 = mlir::Builder::getIntegerType((mlir::Builder *)v241, 0x40u, 0);
        uint64_t v197 = (void *)mlir::RankedTensorType::get((uint64_t)&F16FloatAttr, 1, v196, 0);
        uint64_t v198 = v197;
        if (v197
          && (uint64_t v199 = *v197,
              unint64_t v200 = mlir::TypeID::get<mlir::ShapedType>(),
              unint64_t v201 = *(unsigned int *)(v199 + 16),
              v201))
        {
          uint64_t v202 = *(void **)(v199 + 8);
          uint64_t v203 = &v202[2 * v201];
          do
          {
            unint64_t v204 = v201 >> 1;
            uint64_t v205 = &v202[2 * (v201 >> 1)];
            unint64_t v207 = *v205;
            uint64_t v206 = v205 + 2;
            v201 += ~(v201 >> 1);
            if (v207 < v200) {
              uint64_t v202 = v206;
            }
            else {
              unint64_t v201 = v204;
            }
          }
          while (v201);
          uint64_t v168 = v240;
          if (v202 != v203 && *v202 == v200) {
            uint64_t v208 = v202[1];
          }
          else {
            uint64_t v208 = 0;
          }
        }
        else
        {
          uint64_t v208 = 0;
          uint64_t v168 = v240;
        }
        *(void *)&long long v272 = mlir::DenseElementsAttr::getFromRawBuffer(v198, v208, ArgOperands, 8 * v274, 8, 1, 0);
        F16uint64_t FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v241, 0.0, v209);
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Padding,mlir::Value const&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &>((mlir::UnknownLoc **)v241, v168, &v245, (uint64_t *)&v272, &v244, &F16FloatAttr)- 16;
        if (ArgOperands != v275) {
          free(ArgOperands);
        }
        if ((long long *)v276 != &v277) {
          free((void *)v276);
        }
      }
LABEL_244:
      v210 = __p;
      if (*((void *)__p + 2) || *((void *)__p + 3))
      {
        uint64_t v211 = (uint64_t *)(*(void *)(v245 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v211) {
          goto LABEL_255;
        }
        uint64_t v212 = *v211;
        unint64_t v213 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v214 = *(unsigned int *)(v212 + 16);
        if (!v214) {
          goto LABEL_255;
        }
        uint64_t v215 = *(void **)(v212 + 8);
        uint64_t v216 = &v215[2 * v214];
        do
        {
          unint64_t v217 = v214 >> 1;
          uint64_t v218 = &v215[2 * (v214 >> 1)];
          unint64_t v220 = *v218;
          uint64_t v219 = v218 + 2;
          v214 += ~(v214 >> 1);
          if (v220 < v213) {
            uint64_t v215 = v219;
          }
          else {
            unint64_t v214 = v217;
          }
        }
        while (v214);
        if (v215 != v216 && *v215 == v213) {
          uint64_t v221 = v215[1];
        }
        else {
LABEL_255:
        }
          uint64_t v221 = 0;
        *(void *)&long long v276 = v211;
        *((void *)&v276 + 1) = v221;
        uint64_t v222 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v276) + 16);
        LODWORD(v272) = 2;
        uint64_t v223 = *((void *)__p + 3);
        *(void *)&long long v276 = *((void *)__p + 2);
        ArgOperands = (void *)(v222 - (v276 + v223));
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v241, v168, &v245, (int *)&v272, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
        v210 = __p;
      }
      if (v210[4] || v210[5])
      {
        uint64_t v224 = (uint64_t *)(*(void *)(v245 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v224) {
          goto LABEL_268;
        }
        uint64_t v225 = *v224;
        unint64_t v226 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v227 = *(unsigned int *)(v225 + 16);
        if (!v227) {
          goto LABEL_268;
        }
        uint64_t v228 = *(void **)(v225 + 8);
        unint64_t v229 = &v228[2 * v227];
        do
        {
          unint64_t v230 = v227 >> 1;
          uint64_t v231 = &v228[2 * (v227 >> 1)];
          unint64_t v233 = *v231;
          uint64_t v232 = v231 + 2;
          v227 += ~(v227 >> 1);
          if (v233 < v226) {
            uint64_t v228 = v232;
          }
          else {
            unint64_t v227 = v230;
          }
        }
        while (v227);
        if (v228 != v229 && *v228 == v226) {
          uint64_t v234 = v228[1];
        }
        else {
LABEL_268:
        }
          uint64_t v234 = 0;
        *(void *)&long long v276 = v224;
        *((void *)&v276 + 1) = v234;
        uint64_t v235 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v276) + 24);
        LODWORD(v272) = 3;
        uint64_t v236 = *((void *)__p + 5);
        *(void *)&long long v276 = *((void *)__p + 4);
        ArgOperands = (void *)(v235 - (v276 + v236));
        uint64_t v245 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,int,unsigned long long,unsigned long long>((mlir::Builder *)v241, v168, &v245, (int *)&v272, (uint64_t *)&v276, (uint64_t *)&ArgOperands)- 16;
      }
      uint64_t v56 = mlir::Value::getDefiningOp((mlir::Value *)&v245);
      if (v284 != v286) {
        free(v284);
      }
      if (__p != v289) {
        free(__p);
      }
      int v57 = 1;
    }
    else
    {
      uint64_t v176 = *(void *)(a4 + 16);
      if (v176)
      {
        uint64_t v177 = v269;
        if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16))) {
      }
        }
      uint64_t v56 = 0;
      int v57 = 0;
    }
    goto LABEL_151;
  }
  uint64_t v124 = *(void *)(a4 + 16);
  if (v124)
  {
    uint64_t v140 = v269;
    if (mlir::RewriterBase::Listener::classof(*(void *)(a4 + 16)))
    {
      uint64_t v126 = *(void *)(v140 + 24);
LABEL_149:
      (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), long long *))(*(void *)v124 + 64))(v124, v126, v127, &v276);
    }
  }
LABEL_150:
  uint64_t v56 = 0;
  int v57 = 0;
LABEL_151:
  if (v290 != (void *)v292) {
    free(v290);
  }
LABEL_44:
  if (v293 != v295) {
    free(v293);
  }
  if (v296 != v298) {
    free(v296);
  }
  if (!v57) {
    return 0;
  }
  *(void *)&long long v276 = v56 - 16;
  uint64_t v58 = 1;
  mlir::ValueRange::ValueRange(v270, (uint64_t)&v276, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, v270[0], v270[1]);
  return v58;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Only dataLayout NCHW is supported for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported weightsLayout for Conv2D\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "weight operand is not a constant!\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv dilation must be 1 for batch / channel axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anonymous namespace'::ConvertConv<mlir::mps::DepthwiseConv2DOp,mlir::anec::Convolution>::convert2D(mlir::mps::DepthwiseConv2DOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

mlir::GenericProgramPoint *mlir::ANECPlacementAnalysis::run(mlir::ANECPlacementAnalysis *this, mlir::Operation *a2)
{
  uint64_t v3 = this;
  return mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECPlacementAnalysis::run(mlir::Operation *)::$_0>, (uint64_t)&v3, 1);
}

void mlir::ANECPlacementAnalysis::_visitOperation(mlir::ANECPlacementAnalysis *this, mlir::Operation *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void **)(*((void *)a2 + 6) + 16);
    BOOL v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id;
    char v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id ? a2 : 0;
    *(void *)&long long v44 = v6;
    if (v5 && mlir::placement::RegionCall::getRegionType((mlir::Operation **)&v44) == 1)
    {
      uint64_t v7 = *((unsigned int *)this + 2);
      if (v7 >= *((_DWORD *)this + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, v7 + 1, 8);
        LODWORD(v7) = *((_DWORD *)this + 2);
      }
      *(void *)(*(void *)this + 8 * v7) = a2;
      ++*((_DWORD *)this + 2);
    }
  }
  uint64_t v8 = *((void *)a2 + 6);
  if (*(_UNKNOWN **)(v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(void *)&long long v44 = *(void *)(v8 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v44);
  }
  else
  {
    uint64_t Values = *(void *)(v8 + 24);
  }
  if (*(void *)(Values + 16) == 3)
  {
    uint64_t v10 = *(unsigned __int16 **)(Values + 8);
    int v11 = *v10;
    int v12 = *((unsigned __int8 *)v10 + 2);
    if (v11 == 28781 && v12 == 115)
    {
      uint64_t v14 = *((void *)a2 + 6);
      unint64_t v15 = *(void **)(v14 + 16);
      BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id
         || v15 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
      if (!v16 && v15 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
      {
        *(void *)&long long v44 = *(void *)(v14 + 8);
        AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v44);
        uint64_t v20 = *((void *)this + 8);
        *(void *)&long long v44 = AttrData;
        *((void *)&v44 + 1) = v19;
        int v21 = *((_DWORD *)this + 20);
        if (v21)
        {
          uint64_t v22 = AttrData;
          size_t v23 = v19;
          int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(AttrData, v19);
          unint64_t v25 = 0;
          uint64_t v26 = (v21 - 1);
          for (int i = 1; ; ++i)
          {
            int v28 = HashValue & v26;
            uint64_t v29 = v20 + 80 * (HashValue & v26);
            long long v30 = *(const void **)v29;
            if (*(void *)v29 == -2)
            {
              if (v22 == (const void *)-2) {
                goto LABEL_45;
              }
            }
            else if (v30 == (const void *)-1)
            {
              if (v22 == (const void *)-1) {
                goto LABEL_45;
              }
            }
            else if (v23 == *(void *)(v29 + 8))
            {
              if (!v23
                || (uint64_t v42 = v25,
                    uint64_t v43 = v20,
                    uint64_t v31 = v26,
                    int v32 = memcmp(v22, *(const void **)v29, v23),
                    uint64_t v26 = v31,
                    unint64_t v25 = v42,
                    uint64_t v20 = v43,
                    !v32))
              {
LABEL_45:
                uint64_t v35 = (_DWORD *)(v29 + 24);
                uint64_t v34 = *(unsigned int *)(v29 + 24);
                uint64_t v36 = (void *)(v29 + 16);
                if (v34 >= *(_DWORD *)(v29 + 28))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v29 + 16, (void *)(v29 + 32), v34 + 1, 8);
                  LODWORD(v34) = *(_DWORD *)(v29 + 24);
                }
                goto LABEL_49;
              }
            }
            if (v30 == (const void *)-1)
            {
              if (v25) {
                int v37 = v25;
              }
              else {
                int v37 = (void *)v29;
              }
              goto LABEL_48;
            }
            if (v25) {
              BOOL v33 = 0;
            }
            else {
              BOOL v33 = v30 == (const void *)-2;
            }
            if (v33) {
              unint64_t v25 = (void *)v29;
            }
            int HashValue = i + v28;
          }
        }
        int v37 = 0;
LABEL_48:
        uint64_t v38 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)this + 64, (uint64_t)&v44, (uint64_t)&v44, v37);
        LODWORD(v34) = 0;
        *(_OWORD *)uint64_t v38 = v44;
        v38[2] = v38 + 4;
        uint64_t v36 = v38 + 2;
        v38[3] = 0x600000000;
        uint64_t v35 = v38 + 3;
LABEL_49:
        *(void *)(*v36 + 8 * v34) = a2;
        ++*v35;
        ++*((void *)this + 11);
        int v39 = *(void **)(*((void *)a2 + 6) + 16);
        if (v39 == &mlir::detail::TypeIDResolver<mlir::mps::PermuteOp,void>::id
          || v39 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
          || v39 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
        {
          ++*((void *)this + 12);
        }
      }
    }
  }
}

double mlir::ANECPlacementAnalysis::printReport(mlir::ANECPlacementAnalysis *this)
{
  unint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = (llvm::raw_ostream *)llvm::dbgs(this);
  BOOL v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x1CuLL)
  {
    qmemcpy(v5, "============================\n", 29);
    *((void *)v4 + 4) += 29;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "============================\n", 0x1DuLL);
  }
  char v6 = (llvm::raw_ostream *)llvm::dbgs(v4);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 <= 0x16uLL)
  {
    uint64_t v8 = llvm::raw_ostream::write(v6, "ANEC Placement Report:\n", 0x17uLL);
    uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(v8);
    if (v2) {
      goto LABEL_6;
    }
LABEL_9:
    int v12 = (void *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v12 <= 0x26uLL)
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, "All MPS operations were placed on ANE.\n", 0x27uLL);
      goto LABEL_21;
    }
    qmemcpy(v12, "All MPS operations were placed on ANE.\n", 39);
    uint64_t v15 = *((void *)v9 + 4) + 39;
    goto LABEL_20;
  }
  qmemcpy(v7, "ANEC Placement Report:\n", 23);
  *((void *)v6 + 4) += 23;
  uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(v6);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v10 = llvm::raw_ostream::operator<<(v9, v2);
  int v11 = (void *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 0x2AuLL)
  {
    qmemcpy(v11, " MPS operations couldn't be placed on ANE.\n", 43);
    *((void *)v10 + 4) += 43;
  }
  else
  {
    uint64_t v10 = llvm::raw_ostream::write(v10, " MPS operations couldn't be placed on ANE.\n", 0x2BuLL);
  }
  uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(v10);
  if (v2 == v3)
  {
    uint64_t v13 = (void *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v13 <= 0x29uLL)
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, "All unplaced operations are typechangers.\n", 0x2AuLL);
      goto LABEL_21;
    }
    qmemcpy(v13, "All unplaced operations are typechangers.\n", 42);
    uint64_t v15 = *((void *)v9 + 4) + 42;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::operator<<(v9, v2 - v3);
    uint64_t v14 = (void *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v14 <= 0x43uLL)
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n", 0x44uLL);
      goto LABEL_21;
    }
    qmemcpy(v14, " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n", 68);
    uint64_t v15 = *((void *)v9 + 4) + 68;
  }
LABEL_20:
  *((void *)v9 + 4) = v15;
LABEL_21:
  if (!*((_DWORD *)this + 18)) {
    goto LABEL_55;
  }
  uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(v9);
  BOOL v16 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v16 > 0x14uLL)
  {
    qmemcpy(v16, "Unplaced operations:\n", 21);
    *((void *)v9 + 4) += 21;
    if (!*((_DWORD *)this + 18)) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, "Unplaced operations:\n", 0x15uLL);
    if (!*((_DWORD *)this + 18)) {
      goto LABEL_55;
    }
  }
  uint64_t v17 = *((unsigned int *)this + 20);
  if (v17)
  {
    uint64_t v18 = 80 * v17;
    uint64_t v19 = *((void *)this + 8);
    while (*(void *)v19 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v19 += 80;
      v18 -= 80;
      if (!v18) {
        goto LABEL_55;
      }
    }
  }
  else
  {
    uint64_t v19 = *((void *)this + 8);
  }
  uint64_t v20 = *((void *)this + 8) + 80 * v17;
  if (v19 != v20)
  {
LABEL_33:
    int v21 = (llvm::raw_ostream *)llvm::dbgs(v9);
    uint64_t v22 = *(const void **)v19;
    unint64_t v23 = *(void *)(v19 + 8);
    uint64_t v24 = (_WORD *)*((void *)v21 + 4);
    if (v23 <= *((void *)v21 + 3) - (void)v24)
    {
      if (v23)
      {
        memcpy(v24, v22, *(void *)(v19 + 8));
        uint64_t v24 = (_WORD *)(*((void *)v21 + 4) + v23);
        *((void *)v21 + 4) = v24;
      }
    }
    else
    {
      int v21 = llvm::raw_ostream::write(v21, (const char *)v22, *(void *)(v19 + 8));
      uint64_t v24 = (_WORD *)*((void *)v21 + 4);
    }
    if (*((void *)v21 + 3) - (void)v24 > 1uLL)
    {
      _WORD *v24 = 10272;
      *((void *)v21 + 4) += 2;
    }
    else
    {
      int v21 = llvm::raw_ostream::write(v21, " (", 2uLL);
    }
    unint64_t v25 = llvm::raw_ostream::operator<<(v21, *(unsigned int *)(v19 + 24));
    uint64_t v26 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v26) > 2)
    {
      *(unsigned char *)(v26 + 2) = 10;
      *(_WORD *)uint64_t v26 = 14889;
      *((void *)v25 + 4) += 3;
      uint64_t v27 = *(unsigned int *)(v19 + 24);
      if (!v27) {
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v25 = llvm::raw_ostream::write(v25, "):\n", 3uLL);
      uint64_t v27 = *(unsigned int *)(v19 + 24);
      if (!v27) {
        goto LABEL_49;
      }
    }
    int v28 = *(mlir::Operation ***)(v19 + 16);
    uint64_t v29 = 8 * v27;
    do
    {
      long long v30 = *v28;
      uint64_t v31 = (llvm::raw_ostream *)llvm::dbgs(v25);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v54);
      int v32 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v54);
      unint64_t v25 = mlir::Operation::print(v30, v31, v32);
      BOOL v33 = (unsigned char *)*((void *)v31 + 4);
      if (*((unsigned char **)v31 + 3) == v33)
      {
        unint64_t v25 = llvm::raw_ostream::write(v31, "\n", 1uLL);
      }
      else
      {
        unsigned char *v33 = 10;
        ++*((void *)v31 + 4);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
LABEL_49:
    uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(v25);
    uint64_t v34 = (unsigned char *)*((void *)v9 + 4);
    if (*((unsigned char **)v9 + 3) == v34)
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, "\n", 1uLL);
    }
    else
    {
      unsigned char *v34 = 10;
      ++*((void *)v9 + 4);
    }
    while (1)
    {
      v19 += 80;
      if (v19 == v20) {
        break;
      }
      if (*(void *)v19 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v19 != v20) {
          goto LABEL_33;
        }
        break;
      }
    }
  }
LABEL_55:
  int v35 = *((_DWORD *)this + 2);
  if (v35 == 1)
  {
    uint64_t v36 = (llvm::raw_ostream *)llvm::dbgs(v9);
    int v37 = (_OWORD *)*((void *)v36 + 4);
    if (*((void *)v36 + 3) - (void)v37 <= 0x2AuLL)
    {
      uint64_t v38 = "Found exactly one ANERegionCall operation.\n";
      goto LABEL_61;
    }
    uint64_t v41 = "Found exactly one ANERegionCall operation.\n";
    goto LABEL_66;
  }
  if (!v35)
  {
    uint64_t v36 = (llvm::raw_ostream *)llvm::dbgs(v9);
    int v37 = (_OWORD *)*((void *)v36 + 4);
    if (*((void *)v36 + 3) - (void)v37 <= 0x2AuLL)
    {
      uint64_t v38 = "Couldn't find any ANERegionCall operation.\n";
LABEL_61:
      uint64_t v36 = llvm::raw_ostream::write(v36, v38, 0x2BuLL);
      goto LABEL_69;
    }
    uint64_t v41 = "Couldn't find any ANERegionCall operation.\n";
LABEL_66:
    long long v42 = *((_OWORD *)v41 + 1);
    *int v37 = *(_OWORD *)v41;
    v37[1] = v42;
    *(_OWORD *)((char *)v37 + 27) = *(_OWORD *)(v41 + 27);
    uint64_t v43 = *((void *)v36 + 4) + 43;
    goto LABEL_68;
  }
  int v39 = (llvm::raw_ostream *)llvm::dbgs(v9);
  uint64_t v36 = llvm::raw_ostream::operator<<(v39, *((unsigned int *)this + 2));
  uint64_t v40 = (void *)*((void *)v36 + 4);
  if (*((void *)v36 + 3) - (void)v40 <= 0x20uLL)
  {
    uint64_t v36 = llvm::raw_ostream::write(v36, " ANERegionCall operations found.\n", 0x21uLL);
    goto LABEL_69;
  }
  qmemcpy(v40, " ANERegionCall operations found.\n", 33);
  uint64_t v43 = *((void *)v36 + 4) + 33;
LABEL_68:
  *((void *)v36 + 4) = v43;
LABEL_69:
  uint64_t v44 = *((unsigned int *)this + 2);
  if (v44)
  {
    unint64_t v45 = *(mlir::Operation ***)this;
    uint64_t v46 = 8 * v44;
    do
    {
      unint64_t v47 = *v45;
      unint64_t v48 = (llvm::raw_ostream *)llvm::dbgs(v36);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v54);
      uint64_t v49 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v54);
      uint64_t v36 = mlir::Operation::print(v47, v48, v49);
      unint64_t v50 = (unsigned char *)*((void *)v48 + 4);
      if (*((unsigned char **)v48 + 3) == v50)
      {
        uint64_t v36 = llvm::raw_ostream::write(v48, "\n", 1uLL);
      }
      else
      {
        unsigned char *v50 = 10;
        ++*((void *)v48 + 4);
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  uint64_t v51 = (llvm::raw_ostream *)llvm::dbgs(v36);
  uint64_t v52 = (void *)*((void *)v51 + 4);
  if (*((void *)v51 + 3) - (void)v52 > 0x1DuLL)
  {
    qmemcpy(v52, "============================\n\n", 30);
    double result = *(double *)"==============\n\n";
    *((void *)v51 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v51, "============================\n\n", 0x1EuLL);
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECPlacementAnalysis::run(mlir::Operation *)::$_0>(mlir::ANECPlacementAnalysis **a1, mlir::Operation *a2)
{
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
    uint64_t v8 = 0;
    unsigned int v9 = v4 - 1;
    uint64_t v10 = *(const void **)a2;
    size_t v11 = *(void *)(a2 + 8);
    for (int i = 1; ; ++i)
    {
      int v13 = HashValue & v9;
      uint64_t v14 = v6 + 80 * (HashValue & v9);
      uint64_t v15 = *(const void **)v14;
      if (*(void *)v14 == -2)
      {
        if (v10 == (const void *)-2) {
          goto LABEL_19;
        }
      }
      else if (v15 == (const void *)-1)
      {
        if (v10 == (const void *)-1) {
          goto LABEL_19;
        }
      }
      else if (v11 == *(void *)(v14 + 8) && (!v11 || !memcmp(v10, *(const void **)v14, v11)))
      {
LABEL_19:
        uint64_t result = 1;
        goto LABEL_21;
      }
      if (v15 == (const void *)-1) {
        break;
      }
      if (v8) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v15 == (const void *)-2;
      }
      if (v16) {
        uint64_t v8 = v14;
      }
      int HashValue = i + v13;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v14 = v8;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
  }
LABEL_21:
  *a3 = v14;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    uint64_t v10 = 80 * v3;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    unint64_t v12 = 80 * v11 - 80;
    if (v12 < 0x50)
    {
      int v13 = result;
LABEL_14:
      uint64_t v17 = &result[5 * v11];
      do
      {
        _OWORD *v13 = xmmword_1810FFA60;
        v13 += 5;
      }
      while (v13 != v17);
      return result;
    }
    unint64_t v14 = v12 / 0x50 + 1;
    int v13 = &result[5 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    BOOL v16 = result;
    do
    {
      *BOOL v16 = xmmword_1810FFA60;
      v16[5] = xmmword_1810FFA60;
      v16 += 10;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_14;
    }
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = 80 * v6 - 80;
    if (v8 < 0x50)
    {
      unsigned int v9 = *(_OWORD **)a1;
LABEL_7:
      int v13 = (_OWORD *)(v7 + 80 * v6);
      do
      {
        _OWORD *v9 = xmmword_1810FFA60;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x50 + 1;
    unsigned int v9 = (_OWORD *)(v7 + 80 * (v10 & 0x7FFFFFFFFFFFFFELL));
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    unint64_t v12 = *(_OWORD **)a1;
    do
    {
      _OWORD *v12 = xmmword_1810FFA60;
      v12[5] = xmmword_1810FFA60;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if (*(void *)v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v4, &v17);
        unint64_t v14 = v17;
        *uint64_t v17 = *(_OWORD *)v4;
        *((void *)v14 + 3) = 0x600000000;
        *((void *)v14 + 2) = v14 + 2;
        uint64_t v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 24)) {
          llvm::SmallVectorImpl<mlir::Value>::operator=(v15, v4 + 16);
        }
        ++*(_DWORD *)(a1 + 8);
        BOOL v16 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v16) {
          free(v16);
        }
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

void mlir::ANECRegionOpCreator::isOpCompatible(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom((uint64_t)v2);
}

mlir::GenericProgramPoint *mlir::ANECRegionOpCreator::getRegionOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  v54[2] = *MEMORY[0x1E4F143B8];
  v54[0] = a6;
  v54[1] = a7;
  v53[0] = a9;
  v53[1] = a10;
  v52[0] = a11;
  v52[1] = a12;
  v51[0] = a13;
  v51[1] = a14;
  v50[0] = a15;
  v50[1] = a16;
  uint64_t v22 = (const std::string::value_type **)(a1 + 328);
  std::string::size_type v23 = *(unsigned __int8 *)(a1 + 351);
  if (*(char *)(a1 + 351) < 0)
  {
    std::string::size_type v24 = *(void *)(a1 + 336);
    if (!v24)
    {
      std::string::__init_copy_ctor_external(&v49, *v22, 0);
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 351))
    {
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
      v49.__r_.__value_.__r.__words[2] = *(void *)(a1 + 344);
      goto LABEL_15;
    }
    std::string::size_type v24 = *(void *)(a1 + 336);
  }
  *((unsigned char *)&v46.__r_.__value_.__s + 23) = 1;
  LOWORD(v46.__r_.__value_.__l.__data_) = 95;
  if ((v23 & 0x80u) == 0) {
    unint64_t v25 = (const std::string::value_type *)(a1 + 328);
  }
  else {
    unint64_t v25 = *v22;
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v26 = v23;
  }
  else {
    std::string::size_type v26 = v24;
  }
  uint64_t v27 = std::string::append(&v46, v25, v26);
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
LABEL_15:
  switch(*(_DWORD *)(a1 + 312))
  {
    case 1:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      uint64_t v31 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A13,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v31, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    case 2:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      int v32 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A14,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v32, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    case 3:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      BOOL v33 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A15,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v33, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    case 4:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      uint64_t v34 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A16,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v34, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    case 5:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      int v35 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A17,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v35, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    case 6:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      uint64_t v36 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A11Legacy,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v36, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
    default:
      __int16 v42 = 773;
      uint64_t v39 = a3;
      uint64_t v40 = a4;
      uint64_t v41 = "_ane_region_";
      v43[0] = &v39;
      uint64_t v44 = &a17;
      __int16 v45 = 2818;
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
      __int16 v47 = 1026;
      llvm::Twine::str((llvm::Twine *)&v46, &__p);
      uint64_t v29 = *(mlir::OpBuilder **)(a1 + 8);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      long long v30 = mlir::OpBuilder::create<mlir::anec::A12,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(v29, a2, (void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)v52, v51, (uint64_t)v54, v53, (uint64_t)v50, (uint64_t)&v46);
      break;
  }
  int v37 = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v37;
    }
LABEL_27:
    operator delete(v49.__r_.__value_.__l.__data_);
    return v37;
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
  return v37;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A12,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A12", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A12";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A13,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A13", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A13";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A14,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A14", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A14";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A15,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A15", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A15";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A16,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A16", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A16";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A17,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A17", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A17";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::A11Legacy,std::string &,mlir::IRMapping &,mlir::ValueRange &,mlir::TypeRange &,mlir::ValueRange &,mlir::TypeRange &,llvm::ArrayRef<mlir::Operation *> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  v33[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.A11Legacy", (const unsigned __int8 *)0xE, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"anec.A11Legacy";
    v31[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v33);
    llvm::report_fatal_error((llvm::Twine *)v33, 1);
  }
  mlir::OperationState::OperationState(v33, a2, v19);
  int v22 = *((char *)a3 + 23);
  if (v22 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = *a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v24 = (uint64_t)a3[1];
  }
  mlir::anec::A11Legacy::build((uint64_t)a1, (uint64_t)v33, v23, v24, a4, *(void **)a5, *(void *)(a5 + 8), v21, *a6, a6[1], *(void **)a7, *(void *)(a7 + 8), *a8, a8[1], *(mlir::Operation ***)a9, *(void *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  unint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v33);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id) {
    std::string::size_type v26 = v25;
  }
  else {
    std::string::size_type v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v33);
  return v26;
}

float mlir::ANECRegionOpCreator::computeHostRegionCost(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v5 = a1 + 224;
  uint64_t v6 = 8 * a3;
  float v7 = 0.0;
  do
  {
    uint64_t v8 = *a2++;
    double v9 = mlir::mps::detail::MPSAbstractCostModel::computeCost(v5, v8, *(void *)(a1 + 320));
    float v7 = v7 + *(float *)&v9;
    v6 -= 8;
  }
  while (v6);
  return v7;
}

float mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  float v4 = 0.0;
  v3[0] = this;
  v3[1] = &v4;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::Operation *)::$_0>, (uint64_t)v3, 1);
  return v4;
}

float mlir::ANECRegionOpCreator::computeDeviceRegionCost(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v5 = 8 * a3;
  float v6 = 0.0;
  do
  {
    uint64_t v9 = *a2;
    if (*a2) {
      uint64_t InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(*a2);
    }
    else {
      uint64_t InterfaceFor = 0;
    }
    v11[0] = v9;
    v11[1] = InterfaceFor;
    mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v11, *(void *)(a1 + 320));
    float v6 = v6 + v8;
    ++a2;
    v5 -= 8;
  }
  while (v5);
  return v6;
}

float mlir::ANECRegionOpCreator::computeDeviceRegionCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  float v4 = 0.0;
  v3[0] = this;
  v3[1] = &v4;
  uint64_t v5 = v3;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_19ANECRegionOpCreator23computeDeviceRegionCostES3_E3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESL_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v5, 1);
  return v4;
}

float mlir::ANECRegionOpCreator::computeModuleCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  uint64_t LoadedDialect = mlir::MLIRContext::getLoadedDialect(Context, (uint64_t)"anec", 4);
  float v7 = 0.0;
  v6[0] = &LoadedDialect;
  v6[1] = this;
  v6[2] = &v7;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeModuleCost(mlir::Operation *)::$_0>, (uint64_t)v6, 1);
  return v7;
}

float mlir::ANECRegionOpCreator::synchronizationCost(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  return *(float *)(*((void *)this + 40) + 48);
}

void mlir::ANECRegionOpCreator::canonicalizeTranslatedRegion(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  float v4 = (mlir::Operation *)((char *)a2 + 24);
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t Context = mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  uint64_t v64 = &v66;
  uint64_t v65 = 0x600000000;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  int v69 = 0;
  uint64_t v71 = 0;
  uint64_t v70 = 0;
  uint64_t v72 = 0x2800000000;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0x2800000000;
  mlir::anec::getANECConvCanonicalizationPatterns(&Context);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v31, &Context, 0, 0, 0, 0);
  unint64_t v5 = *((unsigned int *)a2 + 11);
  if ((v5 & 0x7FFFFF) != 0)
  {
    float v6 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    LOBYTE(v23) = 0;
    uint64_t v46 = 256;
    long long v47 = xmmword_1810FE4B0;
    std::string v49 = 0;
    long long v48 = 0uLL;
    mlir::applyPatternsAndFoldGreedily(v6, (const mlir::FrozenRewritePatternSet *)&v31, (long long *)&v46, (BOOL *)&v23);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v31);
  uint64_t v7 = mlir::Attribute::getContext(v4);
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v46 = v7;
  std::string v49 = &v51;
  uint64_t v50 = 0x600000000;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0x2800000000;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0x2800000000;
  if (*((unsigned char *)this + 352)) {
    mlir::anec::getANECCanonicalizeQuantPatterns(&v46);
  }
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v23, &v46, 0, 0, 0, 0);
  unint64_t v8 = *((unsigned int *)a2 + 11);
  if ((v8 & 0x7FFFFF) != 0)
  {
    uint64_t v9 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    v22[0] = 0;
    uint64_t v31 = 256;
    *(_OWORD *)std::string __p = xmmword_1810FE4B0;
    v33[1] = 0;
    uint64_t v34 = 0;
    v33[0] = 0;
    mlir::applyPatternsAndFoldGreedily(v9, (const mlir::FrozenRewritePatternSet *)&v23, (long long *)&v31, v22);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)&v23);
  uint64_t v31 = mlir::Attribute::getContext(v4);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)BOOL v33 = 0u;
  uint64_t v34 = &v36;
  uint64_t v35 = 0x600000000;
  int v37 = 0;
  uint64_t v38 = 0;
  unsigned int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0x2800000000;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0x2800000000;
  mlir::anec::getANECLateCanonicalizationPatterns(&v31);
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v22, &v31, 0, 0, 0, 0);
  unint64_t v10 = *((unsigned int *)a2 + 11);
  if ((v10 & 0x7FFFFF) != 0)
  {
    uint64_t v11 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *((unsigned int *)a2 + 10));
    BOOL v30 = 0;
    __int16 v23 = 256;
    int v24 = 0;
    __int16 v25 = 0;
    long long v26 = xmmword_1810FE4B0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    mlir::applyPatternsAndFoldGreedily(v11, (const mlir::FrozenRewritePatternSet *)v22, (long long *)&v23, &v30);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v22);
  if (HIDWORD(v44) && v44)
  {
    uint64_t v12 = 0;
    do
    {
      int v13 = *(llvm **)((char *)v43 + v12);
      if (v13 != (llvm *)-8 && v13 != 0)
      {
        uint64_t v15 = *(void *)v13;
        BOOL v16 = (void *)*((void *)v13 + 4);
        if (v16 == (void *)((char *)v13 + 8))
        {
          (*(void (**)(void *))(*((void *)v13 + 1) + 32))((void *)v13 + 1);
        }
        else if (v16)
        {
          (*(void (**)(void *))(*v16 + 40))(v16);
        }
        llvm::deallocate_buffer(v13, (void *)(v15 + 41));
      }
      v12 += 8;
    }
    while (8 * v44 != v12);
  }
  free(v43);
  if (HIDWORD(v41) && v41)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(llvm **)((char *)v40 + v17);
      if (v18 != (llvm *)-8 && v18 != 0)
      {
        uint64_t v20 = *(void *)v18;
        int v21 = (void *)*((void *)v18 + 4);
        if (v21 == (void *)((char *)v18 + 8))
        {
          (*(void (**)(void *))(*((void *)v18 + 1) + 32))((void *)v18 + 1);
        }
        else if (v21)
        {
          (*(void (**)(void *))(*v21 + 40))(v21);
        }
        llvm::deallocate_buffer(v18, (void *)(v20 + 41));
      }
      v17 += 8;
    }
    while (8 * v41 != v17);
  }
  free(v40);
  llvm::deallocate_buffer(v37, (void *)(16 * v39));
}

void mlir::ANECRegionOpCreator::~ANECRegionOpCreator(void **this)
{
  *this = &unk_1EC9AAC18;
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  unint64_t v2 = (void **)this[29];
  if (v2 != this + 31) {
    free(v2);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 26));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

{
  void **v2;

  *this = &unk_1EC9AAC18;
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  unint64_t v2 = (void **)this[29];
  if (v2 != this + 31) {
    free(v2);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 26));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

uint64_t sub_18088C9A0()
{
  return v0;
}

void sub_18088CA14()
{
  operator delete(v0);
}

uint64_t mlir::ANECRegionOpCreator::getMarkAttrID(uint64_t this)
{
  switch(*(_DWORD *)(this + 312))
  {
    case 0:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A12_region";
      goto LABEL_9;
    case 1:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A13_region";
      goto LABEL_9;
    case 2:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A14_region";
      goto LABEL_9;
    case 3:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A15_region";
      goto LABEL_9;
    case 4:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A16_region";
      goto LABEL_9;
    case 5:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A17_region";
      goto LABEL_9;
    case 6:
      uint64_t v1 = *(mlir::StringAttr ***)(this + 8);
      unint64_t v2 = "A11Legacy_region";
LABEL_9:
      int v3 = v2;
      __int16 v4 = 259;
      this = mlir::Builder::getStringAttr(v1, (mlir::MLIRContext *)&v3);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t mlir::ANECRegionOpCreator::isRegionProfitable()
{
  return 1;
}

uint64_t mlir::ANECRegionOpCreator::getCanonicalizationPatterns@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 216);
  *a2 = *(void *)(this + 208);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

mlir::GenericProgramPoint *mlir::ANECRegionOpCreator::getRegionTerminator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::ArrayRef<mlir::Value> &>(*(mlir::OpBuilder **)(a1 + 8), a2, (uint64_t)v5);
}

uint64_t mlir::ANECRegionOpCreator::getBody(mlir::ANECRegionOpCreator *this, mlir::Operation *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (result)
  {
    mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
    return *((void *)a2 + 2);
  }
  return result;
}

void mlir::ANECRegionOpCreator::getInitializedConversionTarget(uint64_t a1@<X8>)
{
}

uint64_t mlir::ANECRegionOpCreator::materializeHostTypeConversion(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  v9[23] = *MEMORY[0x1E4F143B8];
  uint64_t result = mlir::materializeMPSToANECHostTypeConversion(*(mlir::UnknownLoc ***)(a1 + 8), a2, a3, a4, a5, a6);
  if (!(_BYTE)result)
  {
    mlir::emitError(a2, (uint64_t)&v8);
    if (v8)
    {
      mlir::Diagnostic::operator<<((uint64_t)v9, "unable to materialize host type conversion");
      if (v8) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
      }
    }
    return std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::ANECRegionOpCreator::getCallOp(uint64_t a1, uint64_t a2, mlir::SymbolRefAttr *a3, uint64_t a4, uint64_t a5)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v9[0] = a4;
  v9[1] = a5;
  uint64_t v8 = a3;
  unint64_t v5 = *(mlir::MLIRContext ***)(a1 + 8);
  int v7 = 1;
  return mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::Operation *&,mlir::placement::RegionType,mlir::ValueRange &>(v5, a2, &v8, &v7, v9);
}

void *mlir::ANECRegionOpCreator::getConvertedType(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  if (!v5) {
    goto LABEL_10;
  }
  float v6 = *(void **)(v3 + 8);
  int v7 = &v6[2 * v5];
  do
  {
    unint64_t v8 = v5 >> 1;
    uint64_t v9 = &v6[2 * (v5 >> 1)];
    unint64_t v11 = *v9;
    unint64_t v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4) {
      float v6 = v10;
    }
    else {
      unint64_t v5 = v8;
    }
  }
  while (v5);
  if (v6 != v7 && *v6 == v4) {
    uint64_t v12 = v6[1];
  }
  else {
LABEL_10:
  }
    uint64_t v12 = 0;
  v38[0] = a2;
  v38[1] = v12;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38))
  {
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v38);
    uint64_t v15 = v14;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38);
    uint64_t v17 = (void *)mlir::MemRefType::get(ArgAttrsAttr, v15, OperandRange, 0, 0, 0);
    uint64_t v18 = v17;
    if (v17)
    {
      uint64_t v19 = *v17;
      unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v21 = *(unsigned int *)(v19 + 16);
      if (v21)
      {
        int v22 = *(void **)(v19 + 8);
        do
        {
          unint64_t v23 = v21 >> 1;
          int v24 = &v22[2 * (v21 >> 1)];
          unint64_t v26 = *v24;
          __int16 v25 = v24 + 2;
          v21 += ~(v21 >> 1);
          if (v26 < v20) {
            int v22 = v25;
          }
          else {
            unint64_t v21 = v23;
          }
        }
        while (v21);
      }
    }
  }
  else
  {
    uint64_t v27 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38);
    uint64_t v28 = (void *)mlir::UnrankedMemRefType::get(v27, 0);
    uint64_t v18 = v28;
    if (v28)
    {
      uint64_t v29 = *v28;
      unint64_t v30 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v31 = *(unsigned int *)(v29 + 16);
      if (v31)
      {
        __int16 v32 = *(void **)(v29 + 8);
        do
        {
          unint64_t v33 = v31 >> 1;
          uint64_t v34 = &v32[2 * (v31 >> 1)];
          unint64_t v36 = *v34;
          uint64_t v35 = v34 + 2;
          v31 += ~(v31 >> 1);
          if (v36 < v30) {
            __int16 v32 = v35;
          }
          else {
            unint64_t v31 = v33;
          }
        }
        while (v31);
      }
    }
  }
  return v18;
}

uint64_t mlir::ANECRegionOpCreator::getPromotedType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t mlir::ANECRegionOpCreator::insertInstrumentation(mlir::ANECRegionOpCreator *this)
{
  return *((unsigned __int8 *)this + 317);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::anec::RegionReturn,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"anec.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(void *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::RegionReturn,void>::id) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(llvm **)a1;
  if (v2)
  {
    unint64_t v4 = (void *)((char *)v3 + 16);
    uint64_t v5 = 32 * v2;
    do
    {
      if ((*(v4 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        float v6 = (void *)*(v4 - 1);
        if (v6)
        {
          *unint64_t v4 = v6;
          operator delete(v6);
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
    uint64_t v3 = *(llvm **)a1;
    uint64_t v7 = (void *)(32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    uint64_t v7 = 0;
  }
  llvm::deallocate_buffer(v3, v7);
}

void sub_18088D02C()
{
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  *(_DWORD *)(v0 + 16) = v2;
  if (v2)
  {
    *(void *)uint64_t v0 = llvm::allocate_buffer(32 * v2, (std::align_val_t)8uLL);
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>,mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>>((void *)v0, (uint64_t *)v1);
  }
  else
  {
    *(void *)uint64_t v0 = 0;
    *(void *)(v0 + 8) = 0;
  }
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>,mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::copyFrom<llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>>(void *result, uint64_t *a2)
{
  result[1] = a2[1];
  if (*((_DWORD *)result + 4))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      *(void *)(*v3 + v4) = *(void *)(*a2 + v4);
      if ((*(void *)(*v3 + v4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        float v6 = (void *)(*v3 + v4);
        uint64_t v7 = *a2;
        v6[1] = 0;
        uint64_t v8 = v7 + v4;
        v6[2] = 0;
        void v6[3] = 0;
        unint64_t v10 = *(unsigned char **)(v8 + 8);
        uint64_t v9 = *(unsigned char **)(v8 + 16);
        int64_t v11 = v9 - v10;
        if (v9 != v10)
        {
          if (v11 < 0) {
            abort();
          }
          uint64_t v12 = (char *)operator new(v9 - v10);
          v6[1] = v12;
          int v13 = &v12[8 * (v11 >> 3)];
          v6[2] = v12;
          void v6[3] = v13;
          uint64_t result = memcpy(v12, v10, v11);
          v6[2] = v13;
        }
      }
      ++v5;
      v4 += 32;
    }
    while (v5 < *((unsigned int *)v3 + 4));
  }
  return result;
}

float llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeHostRegionCost(mlir::Operation *)::$_0>(void *a1, uint64_t a2)
{
  double v3 = mlir::mps::detail::MPSAbstractCostModel::computeCost(*a1 + 224, a2, *(void *)(*a1 + 320));
  uint64_t v4 = (float *)a1[1];
  float result = *(float *)&v3 + *v4;
  *uint64_t v4 = result;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_19ANECRegionOpCreator23computeDeviceRegionCostES3_E3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESL_E4typeES3_OT1_EUlS3_E_EEvlS3_(float ***a1, uint64_t a2)
{
  uint64_t result = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (result)
  {
    if (a2)
    {
      uint64_t InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      float v6 = *a1;
      v8[0] = a2;
      v8[1] = InterfaceFor;
      uint64_t result = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v8, *((void *)*v6 + 40));
      *v6[1] = v7 + *v6[1];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

float llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ANECRegionOpCreator::computeModuleCost(mlir::Operation *)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 48);
  if (*(_UNKNOWN **)(v5 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(void *)(v5 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v11);
  }
  else
  {
    uint64_t Values = *(void *)(v5 + 24);
  }
  if (Values == **(void **)a1)
  {
    uint64_t InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
    v11[0] = a2;
    v11[1] = InterfaceFor;
    mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v11, *(void *)(v4 + 320));
  }
  else
  {
    double v7 = mlir::mps::detail::MPSAbstractCostModel::computeCost(v4 + 224, a2, *(void *)(v4 + 320));
  }
  uint64_t v9 = *(float **)(a1 + 16);
  float result = *(float *)&v7 + *v9;
  float *v9 = result;
  return result;
}

const char *mlir::affine::AffineDialect::initialize(mlir::affine::AffineDialect *this)
{
  mlir::Dialect::addOperations<mlir::affine::AffineDmaStartOp,mlir::affine::AffineDmaWaitOp,mlir::affine::AffineApplyOp,mlir::affine::AffineDelinearizeIndexOp,mlir::affine::AffineForOp,mlir::affine::AffineIfOp,mlir::affine::AffineLoadOp,mlir::affine::AffineMaxOp,mlir::affine::AffineMinOp,mlir::affine::AffineParallelOp,mlir::affine::AffinePrefetchOp,mlir::affine::AffineStoreOp,mlir::affine::AffineVectorLoadOp,mlir::affine::AffineVectorStoreOp,mlir::affine::AffineYieldOp>((uint64_t)this);
  uint64_t v2 = (char *)operator new(0x18uLL);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = v2;
    unint64_t v3 = 0x1E8EB8000;
    int v7 = v6;
    uint64_t v2 = v15;
    if (v7)
    {
      __int16 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      unint64_t v17 = 79;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      unint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v15;
    }
  }
  uint64_t v4 = *(void *)(v3 + 3896);
  *((void *)v2 + 1) = this;
  *((void *)v2 + 2) = v4;
  *(void *)uint64_t v2 = &unk_1EC99AC10;
  __int16 v16 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v16);
  float result = v16;
  __int16 v16 = 0;
  if (result) {
    return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
  }
  return result;
}

mlir::affine::AffineDialect *mlir::affine::AffineDialect::AffineDialect(mlir::affine::AffineDialect *this, mlir::MLIRContext *a2)
{
  unint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"affine", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDialect,void>::id);
  void *v3 = &unk_1EC9CC928;
  uint64_t v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    int v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::affine::AffineDialect::initialize(this);
  return this;
}

void mlir::affine::AffineDialect::~AffineDialect(llvm **this)
{
}

void sub_18088D510(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::affine::AffineDmaStartOp,mlir::affine::AffineDmaWaitOp,mlir::affine::AffineApplyOp,mlir::affine::AffineDelinearizeIndexOp,mlir::affine::AffineForOp,mlir::affine::AffineIfOp,mlir::affine::AffineLoadOp,mlir::affine::AffineMaxOp,mlir::affine::AffineMinOp,mlir::affine::AffineParallelOp,mlir::affine::AffinePrefetchOp,mlir::affine::AffineStoreOp,mlir::affine::AffineVectorLoadOp,mlir::affine::AffineVectorStoreOp,mlir::affine::AffineYieldOp>(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  uint64_t v3 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  uint64_t v5 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineApplyOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v7 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  mlir::RegisteredOperationName::insert<mlir::affine::AffineDelinearizeIndexOp>(a1);
  unint64_t v8 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineForOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v9 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  mlir::RegisteredOperationName::insert<mlir::affine::AffineIfOp>(a1);
  unint64_t v10 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineLoadOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v11 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineMaxOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v13 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineMinOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v15 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  __int16 v16 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineParallelOp::getAttributeNames(void)::attrNames, 6);
  uint64_t v17 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  mlir::RegisteredOperationName::insert<mlir::affine::AffinePrefetchOp>(a1);
  uint64_t v18 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineStoreOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v19 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  unint64_t v20 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineVectorLoadOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v21 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  int v22 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, (uint64_t)&mlir::affine::AffineVectorStoreOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v23 = (uint64_t)v26;
  unint64_t v26 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  int v24 = operator new(0x70uLL);
  unint64_t v26 = mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v26, 0, 0);
  uint64_t result = (uint64_t)v26;
  unint64_t v26 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::affine::AffineDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a4;
  if (*(_UNKNOWN **)(*a3 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v5;
  if (v5) {
    return mlir::OpBuilder::create<mlir::ub::PoisonOp,mlir::Type &,mlir::ub::PoisonAttr &>(a2, a5, &v8, &v7);
  }
  else {
    return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
  }
}

uint64_t mlir::affine::isValidDim(void *a1, mlir::Block *a2)
{
  uint64_t v17 = a1;
  v16[0] = a1[1] & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = mlir::Type::isIndex((mlir::Type *)v16);
  if (result)
  {
    if (mlir::affine::isValidSymbol(a1, a2)) {
      return 1;
    }
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
      {
        if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0 && (uint64_t v10 = *(unsigned int *)(DefiningOp + 68), v10))
        {
          uint64_t v11 = v10 - 1;
          uint64_t v12 = (uint64_t *)(*(void *)(DefiningOp + 72) + 24);
          do
          {
            uint64_t v13 = *v12;
            v12 += 4;
            uint64_t result = mlir::affine::isValidDim(v13, a2);
            BOOL v15 = v11-- != 0;
          }
          while (result && v15);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedDimOpInterface,mlir::Operation *,llvm::CastInfo<mlir::ShapedDimOpInterface,mlir::Operation *,void>>::doCastIfPossible(DefiningOp);
        v16[0] = result;
        v16[1] = v6;
        if (!result) {
          return result;
        }
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v16);
        uint64_t v18 = canMapOperands;
        if (canMapOperands && (*(void *)(canMapOperands + 8) & 7) == 7)
        {
          uint64_t result = *(void *)(canMapOperands + 16);
        }
        else
        {
          uint64_t result = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v18) + 16);
          if (!result) {
            return result;
          }
        }
        uint64_t result = mlir::Block::getParentOp((mlir::Block *)result);
        if (result) {
          return mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(result + 48));
        }
      }
    }
    else
    {
      uint64_t v8 = *(void **)(*(void *)(mlir::Block::getParentOp((mlir::Block *)v17[2]) + 48) + 16);
      return v8 == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id
          || v8 == &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id;
    }
  }
  return result;
}

uint64_t mlir::affine::isValidSymbol(void *a1, mlir::Block *a2)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a1;
  uint64_t v34 = (void *)(a1[1] & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v34);
  if (!result) {
    return result;
  }
  if (a2)
  {
    uint64_t v34 = a1;
    if ((~*((_DWORD *)a1 + 2) & 7) != 0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a1;
    }
    uint64_t v30 = (uint64_t)v5;
    if (v5)
    {
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v30);
    }
    else
    {
      ParentRegion = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v34) + 16);
      if (ParentRegion) {
        ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
      }
    }
    if (ParentRegion == a2) {
      return 1;
    }
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v27);
    if (!DefiningOp)
    {
LABEL_35:
      uint64_t v20 = *((void *)a2 + 2);
      if (v20 && (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((void *)(v20 + 48)) & 1) == 0)
      {
        uint64_t result = *(void *)(*((void *)a2 + 2) + 16);
        if (result)
        {
          uint64_t result = mlir::Block::getParent((mlir::Block *)result);
          if (result) {
            return mlir::affine::isValidSymbol(v27, result);
          }
        }
        return result;
      }
      return 0;
    }
  }
  else
  {
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v27);
    uint64_t DefiningOp = result;
    if (!result) {
      return result;
    }
  }
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
  {
    uint64_t v34 = v36;
    uint64_t v35 = 0x100000000;
    mlir::Operation::fold(DefiningOp, 0, 0, (uint64_t)&v34);
    unint64_t v8 = *(void *)v34;
    if (v34 != v36) {
      free(v34);
    }
    if (v8 > 7) {
      return 1;
    }
  }
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0) {
      return 1;
    }
    uint64_t v13 = *(unsigned int *)(DefiningOp + 68);
    if (!v13) {
      return 1;
    }
    uint64_t v14 = *(void *)(DefiningOp + 72);
    uint64_t v15 = v13 - 1;
    __int16 v16 = (uint64_t *)(v14 + 24);
    do
    {
      uint64_t v17 = *v16;
      v16 += 4;
      uint64_t result = mlir::affine::isValidSymbol(v17, a2);
      BOOL v19 = v15-- != 0;
    }
    while (result && v19);
    return result;
  }
  uint64_t v9 = (void *)llvm::DefaultDoCastIfPossible<mlir::ShapedDimOpInterface,mlir::Operation *,llvm::CastInfo<mlir::ShapedDimOpInterface,mlir::Operation *,void>>::doCastIfPossible(DefiningOp);
  if (!v9)
  {
    if (!a2) {
      return 0;
    }
    goto LABEL_35;
  }
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  unint64_t v33 = a2;
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v34);
  uint64_t v30 = canMapOperands;
  if (canMapOperands && (*(void *)(canMapOperands + 8) & 7) == 7)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(*(mlir::Block **)(canMapOperands + 16));
    if (ParentOp && (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48)) & 1) != 0) {
      return 1;
    }
  }
  else
  {
    uint64_t v21 = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v30) + 16);
    if (v21)
    {
      uint64_t v22 = mlir::Block::getParentOp(v21);
      if (v22)
      {
        if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(v22 + 48))) {
          return 1;
        }
      }
    }
  }
  if ((~*(_DWORD *)(mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v34) + 8) & 7) == 0) {
    return 0;
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  unint64_t ConstantIntValue = mlir::getConstantIntValue(OperandRange);
  if (!v25) {
    return 0;
  }
  unint64_t v32 = ConstantIntValue;
  uint64_t v29 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v34);
  uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  __int16 v31 = 0;
  v28[0] = (unsigned int *)&v32;
  v28[1] = (unsigned int *)&v33;
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::ViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v30, v28);
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::SubViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v30, v28);
  llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::AllocOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(&v30, v28);
  if (HIBYTE(v31)) {
    BOOL v26 = v31 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  return !v26;
}

uint64_t mlir::affine::isValidSymbol(uint64_t result)
{
  uint64_t v12 = (void *)result;
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v13 = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t result = mlir::Type::isIndex((mlir::Type *)&v13);
    if (result)
    {
      unint64_t v13 = v1;
      if ((~*(_DWORD *)(v1 + 8) & 7) != 0)
      {
        uint64_t v3 = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)&v13) + 16);
        if (v3)
        {
          uint64_t ParentOp = mlir::Block::getParentOp(v3);
          if (ParentOp)
          {
            if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48))) {
              return 1;
            }
          }
        }
      }
      else
      {
        uint64_t v2 = mlir::Block::getParentOp(*(mlir::Block **)(v1 + 16));
        if (v2 && (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(v2 + 48)) & 1) != 0) {
          return 1;
        }
      }
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = v12;
        while (1)
        {
          uint64_t v7 = *(mlir::Block **)(v5 + 16);
          if (!v7) {
            break;
          }
          uint64_t v8 = v5;
          uint64_t v9 = mlir::Block::getParentOp(v7);
          if (!v9) {
            break;
          }
          uint64_t v5 = v9;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(v9 + 48)))
          {
            uint64_t v10 = *(mlir::Block **)(v8 + 16);
            if (v10)
            {
              Parent = (mlir::Block *)mlir::Block::getParent(v10);
              return mlir::affine::isValidSymbol(v6, Parent);
            }
            break;
          }
        }
        Parent = 0;
        return mlir::affine::isValidSymbol(v6, Parent);
      }
    }
  }
  return result;
}

BOOL mlir::affine::parseDimAndSymbolList(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v18[32] = *MEMORY[0x1E4F143B8];
  __int16 v16 = v18;
  uint64_t v17 = 0x800000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 1, 1, 0xFFFFFFFFLL))
  {
    BOOL v12 = 0;
    uint64_t v14 = v16;
    if (v16 == v18) {
      return v12;
    }
    goto LABEL_15;
  }
  *a3 = v17;
  uint64_t v6 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v6, v7);
  if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL))
  {
    if (!v17)
    {
      BOOL v12 = 1;
      uint64_t v14 = v16;
      if (v16 == v18) {
        return v12;
      }
      goto LABEL_15;
    }
    uint64_t v9 = (char *)v16;
    uint64_t v10 = 32 * v17 - 32;
    do
    {
      int v11 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, a2);
      BOOL v12 = v11 != 0;
      v9 += 32;
      if (v11) {
        BOOL v13 = v10 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      v10 -= 32;
    }
    while (!v13);
  }
  else
  {
    BOOL v12 = 0;
  }
  uint64_t v14 = v16;
  if (v16 != v18) {
LABEL_15:
  }
    free(v14);
  return v12;
}

uint64_t mlir::affine::AffineApplyOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v31 = 0;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v31, 0, (uint64_t)"map", 3, a2 + 112))return 0; {
  int v30 = 0;
  }
  if (!mlir::affine::parseDimAndSymbolList(a1, a2 + 16, &v30)
    || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    return 0;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (NumDims == v30
    && *(_DWORD *)(a2 + 24) == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
  {
    uint64_t Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
    uint64_t v9 = *(unsigned int *)(a2 + 72);
    if (v9 + Kind > (unint64_t)*(unsigned int *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + Kind, 8);
      uint64_t v9 = *(unsigned int *)(a2 + 72);
      if (Kind) {
        goto LABEL_8;
      }
    }
    else if (Kind)
    {
LABEL_8:
      uint64_t v10 = *(void *)(a2 + 64) + 8 * v9;
      int v11 = (unint64_t *)v10;
      uint64_t v12 = Kind;
      if (Kind < 4) {
        goto LABEL_38;
      }
      int v11 = (unint64_t *)(v10 + 8 * (Kind & 0xFFFFFFFC));
      uint64_t v12 = Kind & 3;
      int64x2_t v13 = vdupq_n_s64(IndexType);
      uint64_t v14 = (int64x2_t *)(v10 + 16);
      uint64_t v15 = Kind & 0xFFFFFFFC;
      do
      {
        v14[-1] = v13;
        *uint64_t v14 = v13;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if ((Kind & 0xFFFFFFFC) != Kind)
      {
LABEL_38:
        do
        {
          *v11++ = IndexType;
          --v12;
        }
        while (v12);
      }
    }
    *(_DWORD *)(a2 + 72) = v9 + Kind;
    return 1;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v27 = "dimension or symbol index mismatch";
  __int16 v28 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v32, a1, v18, &v27);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
  if (v32[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
  }
  if (v39)
  {
    BOOL v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v38;
      uint64_t v21 = __p;
      if (v38 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v38 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v35;
    if (v35)
    {
      uint64_t v23 = v36;
      int v24 = v35;
      if (v36 != v35)
      {
        do
        {
          BOOL v26 = (void *)*--v23;
          char v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        int v24 = v35;
      }
      unint64_t v36 = v22;
      operator delete(v24);
    }
    if (v33 != &v34) {
      free(v33);
    }
  }
  return v16;
}

uint64_t mlir::affine::AffineApplyOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = *this;
  unint64_t v7 = *((unsigned int *)*this + 11);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v8 = *((void *)v6 + 9);
    uint64_t v9 = *((unsigned int *)v6 + 17);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  v16[0] = *((void *)v6 + 2 * ((v7 >> 23) & 1) + 8);
  v16[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v16);
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v16);
  printDimAndSymbolList(v8, 0, v8, v9, NumDims, (uint64_t)a2);
  int v11 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v16[0] = mlir::Operation::getAttrDictionary(v11);
    uint64_t v12 = (mlir::ArrayAttr *)v16;
  }
  else
  {
    uint64_t v12 = (mlir::Operation *)((char *)v11 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v12);
  v16[0] = "map";
  v16[1] = 3;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, Value, v14, v16, 1);
}

llvm::raw_ostream *printDimAndSymbolList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  LODWORD(v7) = a5;
  uint64_t v8 = a1 + 32 * a2;
  unint64_t v9 = a4 - a2;
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  int v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 40);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *int v11 = 40;
  }
  unint64_t v12 = v7;
  if (v9 >= v7) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v9;
  }
  int64x2_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  uint64_t v21 = ", ";
  uint64_t v22 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, a6, v13, (uint64_t)&v21);
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  uint64_t v15 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v15 >= *((void *)result + 3))
  {
    uint64_t result = llvm::raw_ostream::write(result, 41);
    uint64_t v16 = v9 - v12;
    if (v9 <= v12) {
      return result;
    }
  }
  else
  {
    *((void *)result + 4) = v15 + 1;
    *uint64_t v15 = 41;
    uint64_t v16 = v9 - v12;
    if (v9 <= v12) {
      return result;
    }
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 91);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    *uint64_t v18 = 91;
  }
  BOOL v19 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  uint64_t v21 = ", ";
  uint64_t v22 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8 + 32 * v12, 0, v8 + 32 * v12, v16, a6, v19, (uint64_t)&v21);
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  uint64_t v20 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v20 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 93);
  }
  *((void *)result + 4) = v20 + 1;
  *uint64_t v20 = 93;
  return result;
}

uint64_t mlir::affine::AffineApplyOp::verify(uint64_t **this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v23[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
  if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
    int v2 = *((_DWORD *)*this + 17);
  }
  else {
    int v2 = 0;
  }
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v2 == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
  {
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 1) {
      return 1;
    }
    v20[0] = (const void **)"mapping must produce one value";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v23);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    }
    if (v30)
    {
      int64x2_t v13 = (void **)__p;
      if (__p)
      {
        uint64_t v14 = v29;
        uint64_t v15 = __p;
        if (v29 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v29 = v13;
        operator delete(v15);
      }
      uint64_t v8 = v26;
      if (!v26) {
        goto LABEL_36;
      }
      uint64_t v16 = v27;
      uint64_t v10 = v26;
      if (v27 == v26)
      {
LABEL_35:
        uint64_t v27 = v8;
        operator delete(v10);
LABEL_36:
        if (v24 != &v25) {
          free(v24);
        }
        return v4;
      }
      do
      {
        uint64_t v18 = (void *)*--v16;
        uint64_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v16 != v8);
LABEL_34:
      uint64_t v10 = v26;
      goto LABEL_35;
    }
  }
  else
  {
    v20[0] = (const void **)"operand count and affine map dimension and symbol count must match";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v23);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    }
    if (v30)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v29;
        uint64_t v7 = __p;
        if (v29 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v29 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v26;
      if (!v26) {
        goto LABEL_36;
      }
      unint64_t v9 = v27;
      uint64_t v10 = v26;
      if (v27 == v26) {
        goto LABEL_35;
      }
      do
      {
        unint64_t v12 = (void *)*--v9;
        int v11 = v12;
        void *v9 = 0;
        if (v12) {
          operator delete[](v11);
        }
      }
      while (v9 != v8);
      goto LABEL_34;
    }
  }
  return v4;
}

uint64_t mlir::affine::AffineApplyOp::fold(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  v16[0] = *(void **)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  uint64_t Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v16);
  uint64_t v4 = (void *)mlir::AffineMap::getResult((mlir::AffineMap *)&Value, 0);
  v16[0] = v4;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v16) != 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, 0);
    uint64_t v14 = v16[0];
    if (v16[0]) {
      goto LABEL_3;
    }
LABEL_5:
    v16[0] = v4;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v16) == 7)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, (uint64_t)v4);
      uint64_t v14 = v16[0];
      if (v16[0])
      {
LABEL_7:
        int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        uint64_t v5 = *(void *)(*(void *)a1 + 72)
           + 32 * (mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14) + NumDims);
        return *(void *)(v5 + 24) | 4;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, 0);
      uint64_t v14 = v16[0];
      if (v16[0]) {
        goto LABEL_7;
      }
    }
    v16[0] = v17;
    v16[1] = (void *)0x100000000;
    LOBYTE(v14) = 0;
    char v9 = mlir::AffineMap::constantFold(&Value, *(void *)(a2 + 48), *(unsigned int *)(a2 + 56), (uint64_t)v16, &v14);
    if ((_BYTE)v14)
    {
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(Context);
      unint64_t v7 = mlir::StorageUniquer::getSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) & 0xFFFFFFFFFFFFFFFBLL;
      unint64_t v12 = v16[0];
      if (v16[0] == v17) {
        return v7;
      }
    }
    else
    {
      char v13 = v9;
      unint64_t v12 = v16[0];
      if (v13)
      {
        unint64_t v7 = *(void *)v16[0] & 0xFFFFFFFFFFFFFFFBLL;
        if (v16[0] == v17) {
          return v7;
        }
      }
      else
      {
        unint64_t v7 = 0;
        if (v16[0] == v17) {
          return v7;
        }
      }
    }
    free(v12);
    return v7;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v16, (uint64_t)v4);
  uint64_t v14 = v16[0];
  if (!v16[0]) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v5 = *(void *)(*(void *)a1 + 72)
     + 32 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14);
  return *(void *)(v5 + 24) | 4;
}

void composeAffineMapAndOperands(mlir::AffineBinaryOpExpr *a1, uint64_t a2)
{
  v104[6] = *MEMORY[0x1E4F143B8];
  if (!mlir::AffineExpr::getKind(a1))
  {
    mlir::affine::canonicalizeMapAndOperands(a1, a2);
    *(void *)a1 = mlir::simplifyAffineMap(*(int **)a1);
    return;
  }
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  uint64_t v5 = *(char **)a2;
  unsigned int NumDims = mlir::AffineMap::getNumDims(a1);
  uint64_t v95 = v97;
  *(void *)unint64_t v96 = 0x400000000;
  if (NumDims >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, NumDims, 8);
    uint64_t v7 = v96[0];
LABEL_7:
    memcpy((char *)v95 + 8 * v7, v5, 8 * NumDims);
    unsigned int v8 = v96[0];
    goto LABEL_8;
  }
  if (NumDims)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = 0;
LABEL_8:
  v96[0] = v8 + NumDims;
  char v9 = *(char **)a2;
  int v11 = &v9[8 * mlir::AffineMap::getNumDims(a1)];
  unint64_t v87 = (_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 8);
  uint64_t v92 = v94;
  *(void *)unint64_t v93 = 0x400000000;
  uint64_t v13 = v12 - (void)v11;
  if ((unint64_t)(v12 - (void)v11) < 0x21)
  {
    unsigned int v14 = 0;
    if (v11 == (char *)v12) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v13 >> 3, 8);
  unsigned int v14 = v93[0];
  if (v11 != (char *)v12)
  {
LABEL_12:
    memcpy((char *)v92 + 8 * v14, v11, v12 - (void)v11);
    unsigned int v14 = v93[0];
  }
LABEL_13:
  uint64_t v15 = v14 + ((unint64_t)v13 >> 3);
  v93[0] = v15;
  unsigned int v16 = v96[0];
  if (v15 + v96[0])
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      while (1)
      {
        uint64_t v19 = mlir::AffineBinaryOpExpr::getLHS(a1);
        unsigned int v20 = v96[0];
        __int16 v21 = (mlir *)(v18 - v96[0]);
        uint64_t v22 = (mlir::Value *)(v18 >= v96[0]
                            ? (char *)v92 + 8 * v21
                            : (char *)v95 + 8 * (void)v17);
        if (*(void *)v22)
        {
          uint64_t v23 = (mlir::MLIRContext *)v19;
          uint64_t DefiningOp = mlir::Value::getDefiningOp(v22);
          if (DefiningOp)
          {
            uint64_t v25 = DefiningOp;
            if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id) {
              break;
            }
          }
        }
        uint64_t v17 = (mlir *)(v18 + 1);
        unsigned int v16 = v96[0];
        LODWORD(v15) = v93[0];
        uint64_t v18 = v17;
        if ((mlir *)(v93[0] + (unint64_t)v96[0]) == v17) {
          goto LABEL_79;
        }
      }
      *(void *)uint64_t v22 = 0;
      unint64_t v102 = *(char **)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v102);
      if ((*(unsigned char *)(v25 + 46) & 0x80) != 0)
      {
        uint64_t v26 = *(void *)(v25 + 72);
        unint64_t v27 = *(unsigned int *)(v25 + 68);
        unint64_t v102 = (char *)v104;
        uint64_t v103 = 0x600000000;
        if (v27 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v27, 8);
          __int16 v28 = &v102[8 * v103];
          if (v27 >= 0xD
            && ((unint64_t)v28 < v26 + 32 * v27
              ? (BOOL v29 = v26 + 24 >= (unint64_t)&v102[8 * v27 + 8 * v103])
              : (BOOL v29 = 1),
                v29))
          {
            uint64_t v30 = v27 & 3;
            if ((v27 & 3) == 0) {
              uint64_t v30 = 4;
            }
            unint64_t v31 = v27 - v30;
            v28 += 8 * v31;
            unint64_t v32 = (const double *)(v26 + 88);
            unint64_t v33 = (unsigned long long *)&v102[8 * v103 + 16];
            unint64_t v34 = v31;
            do
            {
              uint64_t v35 = v32 - 8;
              unsigned long long v36 = (unsigned __int128)vld4q_f64(v35);
              unsigned long long v37 = (unsigned __int128)vld4q_f64(v32);
              *(v33 - 1) = v36;
              unsigned long long *v33 = v37;
              v32 += 16;
              v33 += 2;
              v34 -= 4;
            }
            while (v34);
          }
          else
          {
LABEL_38:
            unint64_t v31 = 0;
          }
          unint64_t v38 = v27 - v31;
          char v39 = (uint64_t *)(v26 + 32 * v31 + 24);
          do
          {
            uint64_t v40 = *v39;
            v39 += 4;
            *(void *)__int16 v28 = v40;
            v28 += 8;
            --v38;
          }
          while (v38);
          int v41 = v103;
          goto LABEL_42;
        }
        if (v27)
        {
          __int16 v28 = (char *)v104;
          goto LABEL_38;
        }
        int v41 = 0;
      }
      else
      {
        LODWORD(v27) = 0;
        int v41 = 0;
        unint64_t v102 = (char *)v104;
        HIDWORD(v103) = 6;
      }
LABEL_42:
      LODWORD(v103) = v41 + v27;
      mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&Value, (uint64_t)&v102);
      uint64_t v100 = mlir::AffineMap::shiftDims((mlir::AffineMap *)&Value, v96[0], 0);
      unint64_t v89 = (void *)mlir::AffineMap::shiftSymbols((mlir::AffineMap *)&v100, v93[0], 0);
      uint64_t Result = mlir::AffineMap::getResult((mlir::AffineMap *)&v89, 0);
      uint64_t v43 = (uint64_t)v102;
      unsigned int v44 = v103;
      unsigned int v45 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v44 >= v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = v44;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v100, v43, v46);
      long long v47 = v102;
      uint64_t v48 = v103;
      unsigned int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
      uint64_t v50 = v48 - NumSymbols;
      if (v48 <= NumSymbols) {
        uint64_t v50 = 0;
      }
      if (v48 >= NumSymbols) {
        unint64_t v51 = NumSymbols;
      }
      else {
        unint64_t v51 = v48;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v98, (uint64_t)v47 + 8 * v50, v51);
      if (v18 < v20)
      {
        unint64_t AffineDimExpr = mlir::getAffineDimExpr(v18, v23, v52);
        unint64_t v55 = (void *)v100;
        uint64_t v54 = v101;
        uint64_t v56 = v96[0];
        unint64_t v57 = v101 + v96[0];
        if (v57 <= v96[1]) {
          goto LABEL_55;
        }
LABEL_54:
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, v57, 8);
        uint64_t v56 = v96[0];
        goto LABEL_55;
      }
      unint64_t AffineDimExpr = mlir::getAffineSymbolExpr(v21, v23, v52);
      unint64_t v55 = (void *)v100;
      uint64_t v54 = v101;
      uint64_t v56 = v96[0];
      unint64_t v57 = v101 + v96[0];
      if (v57 > v96[1]) {
        goto LABEL_54;
      }
LABEL_55:
      unint64_t v89 = v55;
      uint64_t v90 = 0;
      if (v54)
      {
        uint64_t v58 = 0;
        uint64_t v59 = (uint64_t *)((char *)v95 + 8 * v56);
        do
        {
          *v59++ = mlir::ValueRange::dereference_iterator(&v89, v58);
          uint64_t v58 = ++v90;
        }
        while (v89 != v55 || v58 != v54);
        LODWORD(v56) = v96[0];
      }
      v96[0] = v56 + v54;
      long long v62 = v98;
      uint64_t v61 = v99;
      uint64_t v63 = v93[0];
      unint64_t v64 = v99 + v93[0];
      if (v64 > v93[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v64, 8);
        uint64_t v63 = v93[0];
      }
      unint64_t v89 = v62;
      uint64_t v90 = 0;
      if (v61)
      {
        uint64_t v65 = 0;
        uint64_t v66 = (uint64_t *)((char *)v92 + 8 * v63);
        do
        {
          *v66++ = mlir::ValueRange::dereference_iterator(&v89, v65);
          uint64_t v65 = ++v90;
        }
        while (v89 != v62 || v65 != v61);
        LODWORD(v63) = v93[0];
      }
      v93[0] = v63 + v61;
      *(void *)a1 = mlir::AffineMap::replace((uint64_t *)a1, AffineDimExpr, Result, v96[0], (int)v63 + (int)v61);
      if (v102 != (char *)v104) {
        free(v102);
      }
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unsigned int v16 = v96[0];
      LODWORD(v15) = v93[0];
    }
    while (v93[0] + (unint64_t)v96[0]);
  }
LABEL_79:
  *unint64_t v87 = 0;
  unint64_t v102 = (char *)v104;
  uint64_t v103 = 0x400000000;
  unint64_t v89 = v91;
  uint64_t v90 = 0x400000000;
  if (v16 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v16, 8);
    LODWORD(v15) = v93[0];
    if (HIDWORD(v90) >= v93[0]) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (v15 > 4) {
LABEL_83:
  }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v15, 8);
LABEL_84:
  uint64_t v86 = (void *)(a2 + 16);
  if (v96[0])
  {
    uint64_t v68 = 0;
    int v69 = (uint64_t *)v95;
    uint64_t v70 = 8 * v96[0];
    do
    {
      while (1)
      {
        uint64_t v71 = *v69;
        if (!*v69) {
          break;
        }
        uint64_t v72 = mlir::getAffineDimExpr(v68, LHS, v10);
        uint64_t v73 = v103;
        if (v103 >= (unint64_t)HIDWORD(v103))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v103 + 1, 8);
          uint64_t v73 = v103;
        }
        *(void *)&v102[8 * v73] = v72;
        LODWORD(v103) = v103 + 1;
        unint64_t v74 = *(unsigned int *)(a2 + 8);
        if (v74 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v86, v74 + 1, 8);
          unint64_t v74 = *(unsigned int *)(a2 + 8);
        }
        uint64_t v68 = (mlir *)(v68 + 1);
        *(void *)(*(void *)a2 + 8 * v74) = v71;
        ++*v87;
        ++v69;
        v70 -= 8;
        if (!v70) {
          goto LABEL_97;
        }
      }
      uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(0, LHS, v10);
      uint64_t v76 = v103;
      if (v103 >= (unint64_t)HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v103 + 1, 8);
        uint64_t v76 = v103;
      }
      *(void *)&v102[8 * v76] = AffineConstantExpr;
      LODWORD(v103) = v103 + 1;
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  else
  {
    LODWORD(v68) = 0;
  }
LABEL_97:
  if (v93[0])
  {
    uint64_t v77 = 0;
    uint64_t v78 = (uint64_t *)v92;
    uint64_t v79 = 8 * v93[0];
    do
    {
      while (1)
      {
        uint64_t v80 = *v78;
        if (!*v78) {
          break;
        }
        uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr(v77, LHS, v10);
        uint64_t v82 = v90;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v90 + 1, 8);
          uint64_t v82 = v90;
        }
        *((void *)v89 + v82) = AffineSymbolExpr;
        LODWORD(v90) = v90 + 1;
        unint64_t v83 = *(unsigned int *)(a2 + 8);
        if (v83 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v86, v83 + 1, 8);
          unint64_t v83 = *(unsigned int *)(a2 + 8);
        }
        uint64_t v77 = (mlir *)(v77 + 1);
        *(void *)(*(void *)a2 + 8 * v83) = v80;
        ++*v87;
        ++v78;
        v79 -= 8;
        if (!v79) {
          goto LABEL_111;
        }
      }
      uint64_t v84 = mlir::getAffineConstantExpr(0, LHS, v10);
      uint64_t v85 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v90 + 1, 8);
        uint64_t v85 = v90;
      }
      *((void *)v89 + v85) = v84;
      LODWORD(v90) = v90 + 1;
      ++v78;
      v79 -= 8;
    }
    while (v79);
  }
  else
  {
    LODWORD(v77) = 0;
  }
LABEL_111:
  *(void *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v102, v103, (uint64_t)v89, v90, (int)v68, (int)v77);
  mlir::affine::canonicalizeMapAndOperands(a1, a2);
  *(void *)a1 = mlir::simplifyAffineMap(*(int **)a1);
  if (v89 != v91) {
    free(v89);
  }
  if (v102 != (char *)v104) {
    free(v102);
  }
  if (v92 != v94) {
    free(v92);
  }
  if (v95 != v97) {
    free(v95);
  }
}

void mlir::affine::canonicalizeMapAndOperands(mlir::AffineBinaryOpExpr *a1, uint64_t a2)
{
  v135[1] = *MEMORY[0x1E4F143B8];
  if (!a1 || !*(_DWORD *)(a2 + 8)) {
    return;
  }
  LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  long long v120 = &v122;
  p_p = (llvm *)0x800000000;
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 <= 8)
  {
    __src = &v109;
    uint64_t v108 = (llvm *)0x800000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v4, 8);
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    __src = &v109;
    uint64_t v108 = (llvm *)0x800000000;
    if (v5 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v5, 8);
    }
  }
  int NumSymbols = mlir::AffineMap::getNumSymbols(a1);
  unsigned int NumDims = mlir::AffineMap::getNumDims(a1);
  unint64_t v130 = v132;
  uint64_t v131 = 0x800000000;
  if (NumDims)
  {
    unsigned int v7 = NumDims;
    uint64_t v8 = NumDims;
    if (NumDims < 9)
    {
      uint64_t v9 = 0;
      uint64_t v10 = NumDims;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, NumDims, 8);
      uint64_t v9 = v131;
      uint64_t v10 = v8 - v131;
      if (v8 == v131) {
        goto LABEL_13;
      }
    }
    bzero(&v130[8 * v9], 8 * v10);
LABEL_13:
    LODWORD(v131) = v7;
  }
  unsigned int NumInputs = mlir::AffineMap::getNumInputs(a1);
  if (NumInputs)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = NumInputs;
    do
    {
      unsigned int v19 = mlir::AffineMap::getNumDims(a1);
      uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
      if (v12 >= v19)
      {
        uint64_t v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          uint64_t v16 = p_p;
        }
        uint64_t v18 = v14;
      }
      else if (mlir::affine::isValidSymbol(*(void *)(*(void *)a2 + 8 * v12)))
      {
        uint64_t v18 = (v14 + 1);
        uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)(v14 + NumSymbols), LHS, v21);
        *(void *)&v130[8 * v12] = AffineSymbolExpr;
        uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
        uint64_t v16 = v108;
        p_src = &__src;
        if (v108 >= (unint64_t)HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v108 + 1, 8);
          uint64_t v16 = v108;
        }
      }
      else
      {
        uint64_t AffineDimExpr = mlir::getAffineDimExpr(v13, LHS, v21);
        *(void *)&v130[8 * v12] = AffineDimExpr;
        uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
        uint64_t v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          uint64_t v16 = p_p;
        }
        uint64_t v18 = v14;
        uint64_t v13 = (mlir *)(v13 + 1);
      }
      *((void *)*p_src + v16) = v20;
      ++*((_DWORD *)p_src + 2);
      ++v12;
      uint64_t v14 = v18;
    }
    while (v15 != v12);
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v13) = 0;
  }
  int v24 = __src;
  uint64_t v25 = v108;
  unsigned int v26 = p_p;
  unint64_t v27 = p_p + (unint64_t)v108;
  if (v27 > HIDWORD(p_p))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v27, 8);
    unsigned int v26 = p_p;
  }
  if (v25)
  {
    memcpy((char *)v120 + 8 * v26, v24, 8 * v25);
    unsigned int v26 = p_p;
  }
  unint64_t v28 = v26 + v25;
  LODWORD(p_p) = v28;
  if (&v120 != (void **)a2)
  {
    uint64_t v29 = *(unsigned int *)(a2 + 8);
    if (v29 >= v28)
    {
      if (v28) {
        memmove(*(void **)a2, v120, 8 * v28);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a2 + 12) >= v28)
    {
      if (v29)
      {
        memmove(*(void **)a2, v120, 8 * v29);
        uint64_t v30 = p_p;
        if (v29 == p_p)
        {
LABEL_43:
          *(_DWORD *)(a2 + 8) = v28;
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = p_p;
        if (!p_p) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28, 8);
      uint64_t v29 = 0;
      uint64_t v30 = p_p;
      if (!p_p) {
        goto LABEL_43;
      }
    }
    memcpy((void *)(*(void *)a2 + 8 * v29), (char *)v120 + 8 * v29, 8 * v30 - 8 * v29);
    goto LABEL_43;
  }
LABEL_44:
  *(void *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v130, v131, 0, 0, (int)v13, (int)v18 + NumSymbols);
  if (v130 != v132) {
    free(v130);
  }
  if (__src != &v109) {
    free(__src);
  }
  if (v120 != &v122) {
    free(v120);
  }
  uint64_t v31 = mlir::AffineMap::getNumDims(a1);
  int v32 = v31;
  unint64_t v102 = (void *)1;
  if (v31 <= 0x39)
  {
    unint64_t v33 = (_DWORD *)((v31 << 58) | 1);
    goto LABEL_58;
  }
  unint64_t v34 = (char *)operator new(0x48uLL);
  unint64_t v33 = v34;
  unsigned int v35 = v32 + 63;
  uint64_t v36 = (v32 + 63) >> 6;
  *(void *)unint64_t v34 = v34 + 16;
  *((_DWORD *)v34 + 3) = 6;
  if ((v32 + 63) >= 0x1C0)
  {
    *((_DWORD *)v34 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v34 + 16, v35 >> 6, 8);
    unsigned long long v37 = *(void **)v33;
    size_t v38 = 8 * v36;
LABEL_56:
    bzero(v37, v38);
    goto LABEL_57;
  }
  if (v35 >= 0x40)
  {
    unsigned long long v37 = v34 + 16;
    size_t v38 = 8 * v36;
    goto LABEL_56;
  }
LABEL_57:
  v33[2] = v36;
  v33[16] = v32;
LABEL_58:
  unint64_t v102 = v33;
  uint64_t v39 = mlir::AffineMap::getNumSymbols(a1);
  int v40 = v39;
  std::string __p = (void *)1;
  if (v39 <= 0x39)
  {
    int v41 = (_DWORD *)((v39 << 58) | 1);
    goto LABEL_66;
  }
  uint64_t v42 = (char *)operator new(0x48uLL);
  int v41 = v42;
  unsigned int v43 = v40 + 63;
  uint64_t v44 = (v40 + 63) >> 6;
  *(void *)uint64_t v42 = v42 + 16;
  *((_DWORD *)v42 + 3) = 6;
  if ((v40 + 63) >= 0x1C0)
  {
    *((_DWORD *)v42 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 16, v43 >> 6, 8);
    unsigned int v45 = *(void **)v41;
    size_t v46 = 8 * v44;
LABEL_64:
    bzero(v45, v46);
    goto LABEL_65;
  }
  if (v43 >= 0x40)
  {
    unsigned int v45 = v42 + 16;
    size_t v46 = 8 * v44;
    goto LABEL_64;
  }
LABEL_65:
  v41[2] = v44;
  v41[16] = v40;
LABEL_66:
  std::string __p = v41;
  long long v120 = &v102;
  p_p = (llvm *)&__p;
  mlir::AffineMap::walkExprs((uint64_t)a1, (uint64_t)llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::AffineMap>(mlir::AffineMap *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>, (uint64_t)&v120);
  uint64_t v99 = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(a1);
  unint64_t v130 = v132;
  uint64_t v131 = 0x800000000;
  unint64_t v47 = *(unsigned int *)(a2 + 8);
  if (v47 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v47, 8);
  }
  long long v120 = (void *)1;
  p_p = (llvm *)-4096;
  uint64_t v123 = -4096;
  uint64_t v124 = -4096;
  uint64_t v125 = -4096;
  uint64_t v126 = -4096;
  uint64_t v127 = -4096;
  uint64_t v128 = -4096;
  uint64_t v129 = -4096;
  unsigned int v48 = mlir::AffineMap::getNumDims(a1);
  uint64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  if (v48)
  {
    unsigned int v49 = v48;
    uint64_t v50 = v48;
    if (v48 < 9)
    {
      uint64_t v51 = 0;
      uint64_t v52 = v48;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v48, 8);
      uint64_t v51 = v118;
      uint64_t v52 = v50 - v118;
      if (v50 == v118) {
        goto LABEL_74;
      }
    }
    bzero((char *)v117 + 8 * v51, 8 * v52);
LABEL_74:
    LODWORD(v118) = v49;
  }
  unsigned int v53 = mlir::AffineMap::getNumDims(a1);
  if (v53)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = v53;
    while (1)
    {
      if (v102)
      {
        if (((1 << v55) & ((unint64_t)v102 >> 1) & ~(-1 << ((unint64_t)v102 >> 58))) != 0)
        {
LABEL_83:
          uint64_t v58 = (unint64_t *)(*(void *)a2 + v54);
          __src = 0;
          int v59 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, v58, &__src);
          if (v120) {
            uint64_t v61 = (void **)&v130;
          }
          else {
            uint64_t v61 = (void **)((char *)p_p + 16 * v122);
          }
          if (!v59 || __src == v61)
          {
            uint64_t v62 = mlir::getAffineDimExpr(v56, v99, v60);
            *((void *)v117 + v55) = v62;
            uint64_t v63 = *(void *)(*(void *)a2 + 8 * v55);
            uint64_t v64 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
              uint64_t v64 = v131;
            }
            *(void *)&v130[8 * v64] = v63;
            LODWORD(v131) = v131 + 1;
            uint64_t v65 = (llvm *)*((void *)v117 + v55);
            __src = *(void **)(*(void *)a2 + 8 * v55);
            uint64_t v108 = v65;
            unint64_t v104 = 0;
            if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, (unint64_t *)&__src, &v104) & 1) == 0)
            {
              uint64_t v66 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&v120, (uint64_t)&__src, (unint64_t *)&__src, v104);
              *uint64_t v66 = __src;
              v66[1] = v108;
            }
            uint64_t v56 = (mlir *)(v56 + 1);
          }
          else
          {
            *((void *)v117 + v55) = *((void *)__src + 1);
          }
        }
      }
      else if ((*(void *)(*(void *)v102 + 8 * (v55 >> 6)) & (1 << v55)) != 0)
      {
        goto LABEL_83;
      }
      ++v55;
      v54 += 8;
      if (v57 == v55) {
        goto LABEL_94;
      }
    }
  }
  LODWORD(v56) = 0;
LABEL_94:
  __src = (void *)1;
  uint64_t v108 = (llvm *)-4096;
  uint64_t v110 = -4096;
  uint64_t v111 = -4096;
  uint64_t v112 = -4096;
  uint64_t v113 = -4096;
  uint64_t v114 = -4096;
  uint64_t v115 = -4096;
  uint64_t v116 = -4096;
  unsigned int v67 = mlir::AffineMap::getNumSymbols(a1);
  unint64_t v104 = v106;
  uint64_t v105 = 0x800000000;
  if (v67)
  {
    unsigned int v68 = v67;
    uint64_t v69 = v67;
    if (v67 < 9)
    {
      uint64_t v70 = 0;
      uint64_t v71 = v67;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v67, 8);
      uint64_t v70 = v105;
      uint64_t v71 = v69 - v105;
      if (v69 == v105) {
        goto LABEL_100;
      }
    }
    bzero((char *)v104 + 8 * v70, 8 * v71);
LABEL_100:
    LODWORD(v105) = v68;
  }
  unsigned int v72 = mlir::AffineMap::getNumSymbols(a1);
  if (v72)
  {
    uint64_t v73 = 0;
    unint64_t v74 = 0;
    uint64_t v75 = v72;
    while (1)
    {
      if (__p)
      {
        if (((1 << v73) & ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58))) != 0)
        {
LABEL_109:
          unint64_t v100 = 0;
          uint64_t v103 = *(void **)(*(void *)a2 + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v103);
          if (!DefiningOp) {
            goto LABEL_119;
          }
          uint64_t v77 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
            goto LABEL_119;
          }
          unint64_t v133 = (void **)v135;
          uint64_t v134 = 0x100000000;
          mlir::Operation::fold(v77, 0, 0, (uint64_t)&v133);
          BOOL v78 = *(_UNKNOWN **)(*(void *)((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
             || ((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) == 0;
          if (!v78) {
            unint64_t v100 = (unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v133 != v135) {
            free(v133);
          }
          if (!v78)
          {
            mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v133);
            if (v134 > 0x40) {
              uint64_t v90 = (uint64_t)*v133;
            }
            else {
              uint64_t v90 = (uint64_t)((void)v133 << -(uint64_t)v134) >> -(uint64_t)v134;
            }
            uint64_t AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v90, v99, v89);
            *((void *)v104 + v73) = AffineConstantExpr;
            if (v134 >= 0x41 && v133) {
              operator delete[](v133);
            }
          }
          else
          {
LABEL_119:
            uint64_t v79 = (unint64_t *)(*(void *)a2
                                     + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
            unint64_t v133 = 0;
            int v80 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, v79, &v133);
            if (__src) {
              uint64_t v82 = &v117;
            }
            else {
              uint64_t v82 = (void **)((char *)v108 + 16 * v109);
            }
            if (!v80 || v133 == v82)
            {
              uint64_t v83 = mlir::getAffineSymbolExpr(v74, v99, v81);
              *((void *)v104 + v73) = v83;
              uint64_t v84 = *(void *)(*(void *)a2 + 8
                                              * (v73 + mlir::AffineMap::getNumDims(a1)));
              uint64_t v85 = v131;
              if (v131 >= (unint64_t)HIDWORD(v131))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
                uint64_t v85 = v131;
              }
              *(void *)&v130[8 * v85] = v84;
              LODWORD(v131) = v131 + 1;
              int v86 = mlir::AffineMap::getNumDims(a1);
              uint64_t v87 = *((void *)v104 + v73);
              unint64_t v133 = *(void ***)(*(void *)a2 + 8 * (v73 + v86));
              uint64_t v134 = v87;
              uint64_t v103 = 0;
              if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, (unint64_t *)&v133, &v103) & 1) == 0)
              {
                unint64_t v88 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&__src, (uint64_t)&v133, (unint64_t *)&v133, v103);
                *unint64_t v88 = v133;
                v88[1] = v134;
              }
              unint64_t v74 = (mlir *)(v74 + 1);
            }
            else
            {
              *((void *)v104 + v73) = v133[1];
            }
          }
        }
      }
      else if ((*(void *)(*(void *)__p + 8 * (v73 >> 6)) & (1 << v73)) != 0)
      {
        goto LABEL_109;
      }
      if (v75 == ++v73) {
        goto LABEL_136;
      }
    }
  }
  LODWORD(v74) = 0;
LABEL_136:
  *(void *)a1 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)a1, (uint64_t)v117, v118, (uint64_t)v104, v105, (int)v56, (int)v74);
  if (&v130 == (char **)a2) {
    goto LABEL_147;
  }
  unint64_t v92 = v131;
  uint64_t v93 = *(unsigned int *)(a2 + 8);
  if (v93 >= v131)
  {
    if (v131) {
      memmove(*(void **)a2, v130, 8 * v131);
    }
    goto LABEL_146;
  }
  if (*(_DWORD *)(a2 + 12) < v131)
  {
    *(_DWORD *)(a2 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v92, 8);
    uint64_t v93 = 0;
    uint64_t v94 = v131;
    if (!v131) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  if (!v93)
  {
    uint64_t v93 = 0;
    uint64_t v94 = v131;
    if (!v131) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  memmove(*(void **)a2, v130, 8 * v93);
  uint64_t v94 = v131;
  if (v93 != v131) {
LABEL_145:
  }
    memcpy((void *)(*(void *)a2 + 8 * v93), &v130[8 * v93], 8 * v94 - 8 * v93);
LABEL_146:
  *(_DWORD *)(a2 + 8) = v92;
LABEL_147:
  if (v104 != v106) {
    free(v104);
  }
  if ((__src & 1) == 0) {
    llvm::deallocate_buffer(v108, (void *)(16 * v109));
  }
  if (v117 != v119) {
    free(v117);
  }
  if ((v120 & 1) == 0) {
    llvm::deallocate_buffer(p_p, (void *)(16 * v122));
  }
  if (v130 != v132) {
    free(v130);
  }
  uint64_t v95 = __p;
  if ((__p & 1) == 0 && __p)
  {
    if (*(void **)__p != (char *)__p + 16) {
      free(*(void **)__p);
    }
    operator delete(v95);
  }
  unint64_t v96 = v102;
  if ((v102 & 1) == 0 && v102)
  {
    if (*(void **)v102 != (char *)v102 + 16) {
      free(*(void **)v102);
    }
    operator delete(v96);
  }
}

void mlir::affine::canonicalizeSetAndOperands(mlir::IntegerSet *a1, uint64_t a2)
{
  v135[1] = *MEMORY[0x1E4F143B8];
  if (!a1 || !*(_DWORD *)(a2 + 8)) {
    return;
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext(a1);
  long long v120 = &v122;
  p_p = (llvm *)0x800000000;
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 <= 8)
  {
    __src = &v109;
    uint64_t v108 = (llvm *)0x800000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v4, 8);
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    __src = &v109;
    uint64_t v108 = (llvm *)0x800000000;
    if (v5 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v5, 8);
    }
  }
  int NumSymbols = mlir::AffineMap::getNumSymbols(a1);
  unsigned int NumDims = mlir::AffineMap::getNumDims(a1);
  unint64_t v130 = v132;
  uint64_t v131 = 0x800000000;
  if (NumDims)
  {
    unsigned int v7 = NumDims;
    uint64_t v8 = NumDims;
    if (NumDims < 9)
    {
      uint64_t v9 = 0;
      uint64_t v10 = NumDims;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, NumDims, 8);
      uint64_t v9 = v131;
      uint64_t v10 = v8 - v131;
      if (v8 == v131) {
        goto LABEL_13;
      }
    }
    bzero(&v130[8 * v9], 8 * v10);
LABEL_13:
    LODWORD(v131) = v7;
  }
  unsigned int NumInputs = mlir::AffineMap::getNumInputs(a1);
  if (NumInputs)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = NumInputs;
    do
    {
      unsigned int v19 = mlir::AffineMap::getNumDims(a1);
      uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
      if (v12 >= v19)
      {
        uint64_t v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          uint64_t v16 = p_p;
        }
        uint64_t v18 = v14;
      }
      else if (mlir::affine::isValidSymbol(*(void *)(*(void *)a2 + 8 * v12)))
      {
        uint64_t v18 = (v14 + 1);
        uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)(v14 + NumSymbols), Context, v21);
        *(void *)&v130[8 * v12] = AffineSymbolExpr;
        uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
        uint64_t v16 = v108;
        p_src = &__src;
        if (v108 >= (unint64_t)HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v109, v108 + 1, 8);
          uint64_t v16 = v108;
        }
      }
      else
      {
        uint64_t AffineDimExpr = mlir::getAffineDimExpr(v13, Context, v21);
        *(void *)&v130[8 * v12] = AffineDimExpr;
        uint64_t v20 = *(void *)(*(void *)a2 + 8 * v12);
        uint64_t v16 = p_p;
        p_src = &v120;
        if (p_p >= (unint64_t)HIDWORD(p_p))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, p_p + 1, 8);
          uint64_t v16 = p_p;
        }
        uint64_t v18 = v14;
        uint64_t v13 = (mlir *)(v13 + 1);
      }
      *((void *)*p_src + v16) = v20;
      ++*((_DWORD *)p_src + 2);
      ++v12;
      uint64_t v14 = v18;
    }
    while (v15 != v12);
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v13) = 0;
  }
  int v24 = __src;
  uint64_t v25 = v108;
  unsigned int v26 = p_p;
  unint64_t v27 = p_p + (unint64_t)v108;
  if (v27 > HIDWORD(p_p))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, &v122, v27, 8);
    unsigned int v26 = p_p;
  }
  if (v25)
  {
    memcpy((char *)v120 + 8 * v26, v24, 8 * v25);
    unsigned int v26 = p_p;
  }
  unint64_t v28 = v26 + v25;
  LODWORD(p_p) = v28;
  if (&v120 != (void **)a2)
  {
    uint64_t v29 = *(unsigned int *)(a2 + 8);
    if (v29 >= v28)
    {
      if (v28) {
        memmove(*(void **)a2, v120, 8 * v28);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a2 + 12) >= v28)
    {
      if (v29)
      {
        memmove(*(void **)a2, v120, 8 * v29);
        uint64_t v30 = p_p;
        if (v29 == p_p)
        {
LABEL_43:
          *(_DWORD *)(a2 + 8) = v28;
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = p_p;
        if (!p_p) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28, 8);
      uint64_t v29 = 0;
      uint64_t v30 = p_p;
      if (!p_p) {
        goto LABEL_43;
      }
    }
    memcpy((void *)(*(void *)a2 + 8 * v29), (char *)v120 + 8 * v29, 8 * v30 - 8 * v29);
    goto LABEL_43;
  }
LABEL_44:
  *(void *)a1 = mlir::IntegerSet::replaceDimsAndSymbols((uint64_t)a1, (uint64_t)v130, v131, 0, 0, (int)v13, (int)v18 + NumSymbols);
  if (v130 != v132) {
    free(v130);
  }
  if (__src != &v109) {
    free(__src);
  }
  if (v120 != &v122) {
    free(v120);
  }
  uint64_t v31 = mlir::AffineMap::getNumDims(a1);
  int v32 = v31;
  unint64_t v102 = (void *)1;
  if (v31 <= 0x39)
  {
    unint64_t v33 = (_DWORD *)((v31 << 58) | 1);
    goto LABEL_58;
  }
  unint64_t v34 = (char *)operator new(0x48uLL);
  unint64_t v33 = v34;
  unsigned int v35 = v32 + 63;
  uint64_t v36 = (v32 + 63) >> 6;
  *(void *)unint64_t v34 = v34 + 16;
  *((_DWORD *)v34 + 3) = 6;
  if ((v32 + 63) >= 0x1C0)
  {
    *((_DWORD *)v34 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v34 + 16, v35 >> 6, 8);
    unsigned long long v37 = *(void **)v33;
    size_t v38 = 8 * v36;
LABEL_56:
    bzero(v37, v38);
    goto LABEL_57;
  }
  if (v35 >= 0x40)
  {
    unsigned long long v37 = v34 + 16;
    size_t v38 = 8 * v36;
    goto LABEL_56;
  }
LABEL_57:
  v33[2] = v36;
  v33[16] = v32;
LABEL_58:
  unint64_t v102 = v33;
  uint64_t v39 = mlir::AffineMap::getNumSymbols(a1);
  int v40 = v39;
  std::string __p = (void *)1;
  if (v39 <= 0x39)
  {
    int v41 = (_DWORD *)((v39 << 58) | 1);
    goto LABEL_66;
  }
  uint64_t v42 = (char *)operator new(0x48uLL);
  int v41 = v42;
  unsigned int v43 = v40 + 63;
  uint64_t v44 = (v40 + 63) >> 6;
  *(void *)uint64_t v42 = v42 + 16;
  *((_DWORD *)v42 + 3) = 6;
  if ((v40 + 63) >= 0x1C0)
  {
    *((_DWORD *)v42 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, v42 + 16, v43 >> 6, 8);
    unsigned int v45 = *(void **)v41;
    size_t v46 = 8 * v44;
LABEL_64:
    bzero(v45, v46);
    goto LABEL_65;
  }
  if (v43 >= 0x40)
  {
    unsigned int v45 = v42 + 16;
    size_t v46 = 8 * v44;
    goto LABEL_64;
  }
LABEL_65:
  v41[2] = v44;
  v41[16] = v40;
LABEL_66:
  std::string __p = v41;
  long long v120 = &v102;
  p_p = (llvm *)&__p;
  mlir::IntegerSet::walkExprs((uint64_t)a1, (uint64_t)llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::IntegerSet>(mlir::IntegerSet *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>, (uint64_t)&v120);
  uint64_t v99 = (mlir::MLIRContext *)mlir::IntegerSet::getContext(a1);
  unint64_t v130 = v132;
  uint64_t v131 = 0x800000000;
  unint64_t v47 = *(unsigned int *)(a2 + 8);
  if (v47 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v47, 8);
  }
  long long v120 = (void *)1;
  p_p = (llvm *)-4096;
  uint64_t v123 = -4096;
  uint64_t v124 = -4096;
  uint64_t v125 = -4096;
  uint64_t v126 = -4096;
  uint64_t v127 = -4096;
  uint64_t v128 = -4096;
  uint64_t v129 = -4096;
  unsigned int v48 = mlir::AffineMap::getNumDims(a1);
  uint64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  if (v48)
  {
    unsigned int v49 = v48;
    uint64_t v50 = v48;
    if (v48 < 9)
    {
      uint64_t v51 = 0;
      uint64_t v52 = v48;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v48, 8);
      uint64_t v51 = v118;
      uint64_t v52 = v50 - v118;
      if (v50 == v118) {
        goto LABEL_74;
      }
    }
    bzero((char *)v117 + 8 * v51, 8 * v52);
LABEL_74:
    LODWORD(v118) = v49;
  }
  unsigned int v53 = mlir::AffineMap::getNumDims(a1);
  if (v53)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = v53;
    while (1)
    {
      if (v102)
      {
        if (((1 << v55) & ((unint64_t)v102 >> 1) & ~(-1 << ((unint64_t)v102 >> 58))) != 0)
        {
LABEL_83:
          uint64_t v58 = (unint64_t *)(*(void *)a2 + v54);
          __src = 0;
          int v59 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, v58, &__src);
          if (v120) {
            uint64_t v61 = (void **)&v130;
          }
          else {
            uint64_t v61 = (void **)((char *)p_p + 16 * v122);
          }
          if (!v59 || __src == v61)
          {
            uint64_t v62 = mlir::getAffineDimExpr(v56, v99, v60);
            *((void *)v117 + v55) = v62;
            uint64_t v63 = *(void *)(*(void *)a2 + 8 * v55);
            uint64_t v64 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
              uint64_t v64 = v131;
            }
            *(void *)&v130[8 * v64] = v63;
            LODWORD(v131) = v131 + 1;
            uint64_t v65 = (llvm *)*((void *)v117 + v55);
            __src = *(void **)(*(void *)a2 + 8 * v55);
            uint64_t v108 = v65;
            unint64_t v104 = 0;
            if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&v120, (unint64_t *)&__src, &v104) & 1) == 0)
            {
              uint64_t v66 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&v120, (uint64_t)&__src, (unint64_t *)&__src, v104);
              *uint64_t v66 = __src;
              v66[1] = v108;
            }
            uint64_t v56 = (mlir *)(v56 + 1);
          }
          else
          {
            *((void *)v117 + v55) = *((void *)__src + 1);
          }
        }
      }
      else if ((*(void *)(*(void *)v102 + 8 * (v55 >> 6)) & (1 << v55)) != 0)
      {
        goto LABEL_83;
      }
      ++v55;
      v54 += 8;
      if (v57 == v55) {
        goto LABEL_94;
      }
    }
  }
  LODWORD(v56) = 0;
LABEL_94:
  __src = (void *)1;
  uint64_t v108 = (llvm *)-4096;
  uint64_t v110 = -4096;
  uint64_t v111 = -4096;
  uint64_t v112 = -4096;
  uint64_t v113 = -4096;
  uint64_t v114 = -4096;
  uint64_t v115 = -4096;
  uint64_t v116 = -4096;
  unsigned int v67 = mlir::AffineMap::getNumSymbols(a1);
  unint64_t v104 = v106;
  uint64_t v105 = 0x800000000;
  if (v67)
  {
    unsigned int v68 = v67;
    uint64_t v69 = v67;
    if (v67 < 9)
    {
      uint64_t v70 = 0;
      uint64_t v71 = v67;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v106, v67, 8);
      uint64_t v70 = v105;
      uint64_t v71 = v69 - v105;
      if (v69 == v105) {
        goto LABEL_100;
      }
    }
    bzero((char *)v104 + 8 * v70, 8 * v71);
LABEL_100:
    LODWORD(v105) = v68;
  }
  unsigned int v72 = mlir::AffineMap::getNumSymbols(a1);
  if (v72)
  {
    uint64_t v73 = 0;
    unint64_t v74 = 0;
    uint64_t v75 = v72;
    while (1)
    {
      if (__p)
      {
        if (((1 << v73) & ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58))) != 0)
        {
LABEL_109:
          unint64_t v100 = 0;
          uint64_t v103 = *(void **)(*(void *)a2 + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v103);
          if (!DefiningOp) {
            goto LABEL_119;
          }
          uint64_t v77 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
            goto LABEL_119;
          }
          unint64_t v133 = (void **)v135;
          uint64_t v134 = 0x100000000;
          mlir::Operation::fold(v77, 0, 0, (uint64_t)&v133);
          BOOL v78 = *(_UNKNOWN **)(*(void *)((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
             || ((unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8) == 0;
          if (!v78) {
            unint64_t v100 = (unint64_t)*v133 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v133 != v135) {
            free(v133);
          }
          if (!v78)
          {
            mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v133);
            if (v134 > 0x40) {
              uint64_t v90 = (uint64_t)*v133;
            }
            else {
              uint64_t v90 = (uint64_t)((void)v133 << -(uint64_t)v134) >> -(uint64_t)v134;
            }
            uint64_t AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v90, v99, v89);
            *((void *)v104 + v73) = AffineConstantExpr;
            if (v134 >= 0x41 && v133) {
              operator delete[](v133);
            }
          }
          else
          {
LABEL_119:
            uint64_t v79 = (unint64_t *)(*(void *)a2
                                     + 8 * (v73 + mlir::AffineMap::getNumDims(a1)));
            unint64_t v133 = 0;
            int v80 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, v79, &v133);
            if (__src) {
              uint64_t v82 = &v117;
            }
            else {
              uint64_t v82 = (void **)((char *)v108 + 16 * v109);
            }
            if (!v80 || v133 == v82)
            {
              uint64_t v83 = mlir::getAffineSymbolExpr(v74, v99, v81);
              *((void *)v104 + v73) = v83;
              uint64_t v84 = *(void *)(*(void *)a2 + 8
                                              * (v73 + mlir::AffineMap::getNumDims(a1)));
              uint64_t v85 = v131;
              if (v131 >= (unint64_t)HIDWORD(v131))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
                uint64_t v85 = v131;
              }
              *(void *)&v130[8 * v85] = v84;
              LODWORD(v131) = v131 + 1;
              int v86 = mlir::AffineMap::getNumDims(a1);
              uint64_t v87 = *((void *)v104 + v73);
              unint64_t v133 = *(void ***)(*(void *)a2 + 8 * (v73 + v86));
              uint64_t v134 = v87;
              uint64_t v103 = 0;
              if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)&__src, (unint64_t *)&v133, &v103) & 1) == 0)
              {
                unint64_t v88 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(&__src, (uint64_t)&v133, (unint64_t *)&v133, v103);
                *unint64_t v88 = v133;
                v88[1] = v134;
              }
              unint64_t v74 = (mlir *)(v74 + 1);
            }
            else
            {
              *((void *)v104 + v73) = v133[1];
            }
          }
        }
      }
      else if ((*(void *)(*(void *)__p + 8 * (v73 >> 6)) & (1 << v73)) != 0)
      {
        goto LABEL_109;
      }
      if (v75 == ++v73) {
        goto LABEL_136;
      }
    }
  }
  LODWORD(v74) = 0;
LABEL_136:
  *(void *)a1 = mlir::IntegerSet::replaceDimsAndSymbols((uint64_t)a1, (uint64_t)v117, v118, (uint64_t)v104, v105, (int)v56, (int)v74);
  if (&v130 == (char **)a2) {
    goto LABEL_147;
  }
  unint64_t v92 = v131;
  uint64_t v93 = *(unsigned int *)(a2 + 8);
  if (v93 >= v131)
  {
    if (v131) {
      memmove(*(void **)a2, v130, 8 * v131);
    }
    goto LABEL_146;
  }
  if (*(_DWORD *)(a2 + 12) < v131)
  {
    *(_DWORD *)(a2 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v92, 8);
    uint64_t v93 = 0;
    uint64_t v94 = v131;
    if (!v131) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  if (!v93)
  {
    uint64_t v93 = 0;
    uint64_t v94 = v131;
    if (!v131) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  memmove(*(void **)a2, v130, 8 * v93);
  uint64_t v94 = v131;
  if (v93 != v131) {
LABEL_145:
  }
    memcpy((void *)(*(void *)a2 + 8 * v93), &v130[8 * v93], 8 * v94 - 8 * v93);
LABEL_146:
  *(_DWORD *)(a2 + 8) = v92;
LABEL_147:
  if (v104 != v106) {
    free(v104);
  }
  if ((__src & 1) == 0) {
    llvm::deallocate_buffer(v108, (void *)(16 * v109));
  }
  if (v117 != v119) {
    free(v117);
  }
  if ((v120 & 1) == 0) {
    llvm::deallocate_buffer(p_p, (void *)(16 * v122));
  }
  if (v130 != v132) {
    free(v130);
  }
  uint64_t v95 = __p;
  if ((__p & 1) == 0 && __p)
  {
    if (*(void **)__p != (char *)__p + 16) {
      free(*(void **)__p);
    }
    operator delete(v95);
  }
  unint64_t v96 = v102;
  if ((v102 & 1) == 0 && v102)
  {
    if (*(void **)v102 != (char *)v102 + 16) {
      free(*(void **)v102);
    }
    operator delete(v96);
  }
}

void mlir::affine::AffineApplyOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.apply", 12, (__int16)v38, a2, 0, 0);
  *(void *)unint64_t v4 = &unk_1EC998568;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    unsigned int v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  size_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineApplyOp>]";
  unint64_t v39 = 118;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  int v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  unsigned int v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)unsigned int v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    __int16 v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    __int16 v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      unsigned int v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)unsigned int v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      unsigned int v7 = (char *)a1[1];
      unsigned int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::affine::AffineDmaStartOp::print(mlir::affine::AffineDmaStartOp *this, mlir::OpAsmPrinter *a2)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *unsigned int v7 = 91;
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t v9 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v10 = *(void *)(v9 + 72);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t Value = mlir::Operation::getInherentAttr(v9, (uint64_t)"src_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  mlir::ValueRange::ValueRange(v55, v10 + 32, NumInputs);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, InherentAttr, v55[0], v55[1]);
  unint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 2)
  {
    *(unsigned char *)(v13 + 2) = 32;
    *(_WORD *)uint64_t v13 = 11357;
    *((void *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, "], ", 3uLL);
  }
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v14 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v14 + 1) + 24));
  unint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 91);
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *uint64_t v16 = 91;
  }
  uint64_t v17 = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t DstIndices = mlir::affine::AffineDmaStartOp::getDstIndices(this);
  mlir::ValueRange::ValueRange(v54, DstIndices, v19);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v17, v54[0], v54[1]);
  unint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = *((void *)v20 + 4);
  if ((unint64_t)(*((void *)v20 + 3) - v21) > 2)
  {
    *(unsigned char *)(v21 + 2) = 32;
    *(_WORD *)uint64_t v21 = 11357;
    *((void *)v20 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v20, "], ", 3uLL);
  }
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v22 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v23 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v22 + v23 + 2) + 24));
  int v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 91);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 91;
  }
  uint64_t v26 = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  uint64_t TagIndices = mlir::affine::AffineDmaStartOp::getTagIndices(this);
  mlir::ValueRange::ValueRange(v53, TagIndices, v28);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v26, v53[0], v53[1]);
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = *((void *)v29 + 4);
  if ((unint64_t)(*((void *)v29 + 3) - v30) > 2)
  {
    *(unsigned char *)(v30 + 2) = 32;
    *(_WORD *)uint64_t v30 = 11357;
    *((void *)v29 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v29, "], ", 3uLL);
  }
  uint64_t NumElements = mlir::affine::AffineDmaStartOp::getNumElements(this);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, NumElements);
  if (!mlir::affine::AffineDmaStartOp::isStrided(this)) {
    goto LABEL_40;
  }
  long long v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v33 = (_WORD *)*((void *)v32 + 4);
  if (*((void *)v32 + 3) - (void)v33 > 1uLL)
  {
    _WORD *v33 = 8236;
    *((void *)v32 + 4) += 2;
    if (!mlir::affine::AffineDmaStartOp::isStrided(this)) {
      goto LABEL_27;
    }
  }
  else
  {
    llvm::raw_ostream::write(v32, ", ", 2uLL);
    if (!mlir::affine::AffineDmaStartOp::isStrided(this))
    {
LABEL_27:
      uint64_t v34 = 0;
      goto LABEL_32;
    }
  }
  uint64_t v35 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v36 = (*(_DWORD *)(v35 + 68) - 2);
  }
  else {
    uint64_t v36 = 4294967294;
  }
  uint64_t v34 = *(void *)(*(void *)(v35 + 72) + 32 * v36 + 24);
LABEL_32:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v34);
  uint64_t v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  size_t v38 = (_WORD *)*((void *)v37 + 4);
  if (*((void *)v37 + 3) - (void)v38 > 1uLL)
  {
    *size_t v38 = 8236;
    *((void *)v37 + 4) += 2;
    if (!mlir::affine::AffineDmaStartOp::isStrided(this)) {
      goto LABEL_34;
    }
LABEL_36:
    uint64_t v40 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
      uint64_t v41 = (*(_DWORD *)(v40 + 68) - 1);
    }
    else {
      uint64_t v41 = 0xFFFFFFFFLL;
    }
    uint64_t v39 = *(void *)(*(void *)(v40 + 72) + 32 * v41 + 24);
    goto LABEL_39;
  }
  llvm::raw_ostream::write(v37, ", ", 2uLL);
  if (mlir::affine::AffineDmaStartOp::isStrided(this)) {
    goto LABEL_36;
  }
LABEL_34:
  uint64_t v39 = 0;
LABEL_39:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v39);
LABEL_40:
  uint64_t v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v43 = *((void *)v42 + 4);
  if ((unint64_t)(*((void *)v42 + 3) - v43) > 2)
  {
    *(unsigned char *)(v43 + 2) = 32;
    *(_WORD *)uint64_t v43 = 14880;
    *((void *)v42 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v42, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v45 = (_WORD *)*((void *)v44 + 4);
  if (*((void *)v44 + 3) - (void)v45 > 1uLL)
  {
    *unsigned int v45 = 8236;
    *((void *)v44 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v44, ", ", 2uLL);
  }
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v46 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v46 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v48 = (_WORD *)*((void *)v47 + 4);
  if (*((void *)v47 + 3) - (void)v48 > 1uLL)
  {
    *unsigned int v48 = 8236;
    *((void *)v47 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v47, ", ", 2uLL);
  }
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v49 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v50 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v49 + v50 + 2) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::affine::AffineDmaStartOp::getDstIndices(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) != 0) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  uint64_t v4 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 1;
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  return v3 + 32 * v4 + 32;
}

uint64_t mlir::affine::AffineDmaStartOp::getTagIndices(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) != 0) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  uint64_t v5 = NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 2;
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  return v3 + 32 * v5 + 32;
}

uint64_t mlir::affine::AffineDmaStartOp::getNumElements(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int v3 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  return *(void *)(*(void *)(*(void *)this + 72)
                   + 32
                   * (NumInputs + v3 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 3)
                   + 24);
}

BOOL mlir::affine::AffineDmaStartOp::isStrided(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(v2 + 46) & 0x80) != 0) {
    int v3 = *(_DWORD *)(v2 + 68);
  }
  else {
    int v3 = 0;
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int v5 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  uint64_t InherentAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  return v3 != NumInputs + v5 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 4;
}

uint64_t mlir::affine::AffineDmaStartOp::parse(uint64_t a1, uint64_t a2)
{
  v49[16] = *MEMORY[0x1E4F143B8];
  memset(v33, 0, 24);
  uint64_t v32 = 0;
  unint64_t v47 = (char *)v49;
  uint64_t v48 = 0x400000000;
  memset(v31, 0, 24);
  uint64_t v30 = 0;
  uint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  memset(v29, 0, 24);
  uint64_t v28 = 0;
  uint64_t v41 = v43;
  uint64_t v42 = 0x400000000;
  memset(v27, 0, 24);
  size_t v38 = v40;
  uint64_t v39 = 0x200000000;
  uint64_t v35 = v37;
  uint64_t v36 = 0x300000000;
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v33, 1)
    || !(*(unsigned __int8 (**)(uint64_t, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v47, &v32, "src_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v31, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v44, &v30, "dst_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v29, 1)
    || !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v41, &v28, "tag_map", 7, a2 + 112, 2)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1)|| !mlir::OpAsmParser::parseTrailingOperandList(a1, (uint64_t)&v38, 0))
  {
    goto LABEL_42;
  }
  int v7 = v39;
  if ((v39 & 0xFFFFFFFD) != 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v9 = "expected two stride related operands";
LABEL_14:
    v25[0] = v9;
    __int16 v26 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v34, a1, v8, v25);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v34);
    goto LABEL_43;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 552))(a1, &v35)) {
    goto LABEL_42;
  }
  if (v36 != 3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v9 = "expected three types";
    goto LABEL_14;
  }
  uint64_t v23 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void))(*(void *)a1 + 696))(a1, v33, *(void *)v35)) {
    goto LABEL_42;
  }
  if (v48)
  {
    int v11 = v47;
    uint64_t v12 = 32 * v48;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IndexType, v23))
    {
      v11 += 32;
      v12 -= 32;
      if (!v12) {
        goto LABEL_22;
      }
    }
    goto LABEL_42;
  }
LABEL_22:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v31, *((void *)v35 + 1), v23))goto LABEL_42; {
  if (v45)
  }
  {
    uint64_t v13 = (char *)v44;
    uint64_t v14 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, IndexType, v23))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14) {
        goto LABEL_27;
      }
    }
    goto LABEL_42;
  }
LABEL_27:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v29, *((void *)v35 + 2), v23))goto LABEL_42; {
  if (v42)
  }
  {
    unint64_t v15 = (char *)v41;
    uint64_t v16 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IndexType, v23))
    {
      v15 += 32;
      v16 -= 32;
      if (!v16) {
        goto LABEL_32;
      }
    }
    goto LABEL_42;
  }
LABEL_32:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v27, IndexType, v23))
  {
LABEL_42:
    uint64_t v10 = 0;
    goto LABEL_43;
  }
  if (v7 == 2 && v39)
  {
    uint64_t v17 = (char *)v38;
    uint64_t v18 = 32 * v39;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, IndexType, v23))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_38;
      }
    }
    goto LABEL_42;
  }
LABEL_38:
  int v19 = v48;
  v34[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  if (v19 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)v34)
    || (int v20 = v45,
        v25[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v30),
        v20 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)v25))
    || (int v21 = v42,
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28),
        v21 != mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value)))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v9 = "memref operand count not equal to map.numInputs";
    goto LABEL_14;
  }
  uint64_t v10 = 1;
LABEL_43:
  if (v35 != v37) {
    free(v35);
  }
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v44 != v46) {
    free(v44);
  }
  if (v47 != (char *)v49) {
    free(v47);
  }
  return v10;
}

uint64_t mlir::affine::AffineDmaStartOp::verifyInvariantsImpl(mlir::affine::AffineDmaStartOp *this)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v97[0] = mlir::Operation::getInherentAttr(v2, (uint64_t)"src_map", 7);
    v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
    if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                          + 32
                                                          * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97)
                                                           + 1)
                                                          + 24)
                                              + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v97[0] = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
      v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
      int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
      v97[0] = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
      v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
      if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                            + 32
                                                            * (NumInputs
                                                             + mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97)
                                                             + 2)
                                                            + 24)
                                                + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v97[0] = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"src_map", 7);
        v95[0] = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        int v25 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v95);
        v97[0] = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"dst_map", 7);
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        int v26 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) + v25;
        v97[0] = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
        v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
        int v27 = v26 + mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
        uint64_t v28 = *(void *)this;
        if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
        {
          int v29 = *(_DWORD *)(v28 + 68);
          if (v29 == v27 + 4 || v29 == v27 + 6) {
            goto LABEL_49;
          }
        }
        else if (v27 == -4 || v27 == -6)
        {
LABEL_49:
          while (1)
          {
            uint64_t v30 = *(mlir::Block **)(v28 + 16);
            if (!v30) {
              break;
            }
            uint64_t v31 = v28;
            uint64_t ParentOp = mlir::Block::getParentOp(v30);
            if (!ParentOp) {
              break;
            }
            uint64_t v28 = ParentOp;
            if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48)))
            {
              long long v33 = *(mlir::Block **)(v31 + 16);
              if (v33)
              {
                Parent = (mlir::Block *)mlir::Block::getParent(v33);
                goto LABEL_55;
              }
              break;
            }
          }
          Parent = 0;
LABEL_55:
          uint64_t v35 = *(void *)this;
          if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
            uint64_t v36 = *(void *)(v35 + 72);
          }
          else {
            uint64_t v36 = 0;
          }
          v97[0] = mlir::Operation::getInherentAttr(v35, (uint64_t)"src_map", 7);
          v97[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v97);
          unsigned int v37 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v97);
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = v36 + 56;
            while (1)
            {
              uint64_t v40 = *(void **)v39;
              v97[0] = *(void *)(*(void *)v39 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!mlir::Type::isIndex((mlir::Type *)v97)) {
                break;
              }
              if ((mlir::affine::isValidDim(v40, Parent) & 1) == 0
                && (mlir::affine::isValidSymbol(v40, Parent) & 1) == 0)
              {
                v95[0] = (const void **)"src index must be a dimension or symbol identifier";
                __int16 v96 = 259;
                mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                if (v97[0]) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                }
                if (!v104) {
                  return v3;
                }
                uint64_t v41 = (void **)__p;
                if (__p)
                {
                  uint64_t v42 = v103;
                  uint64_t v43 = __p;
                  if (v103 != __p)
                  {
                    do
                      uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
                    while (v42 != v41);
                    uint64_t v43 = __p;
                  }
                  uint64_t v103 = v41;
                  operator delete(v43);
                }
                int v7 = v100;
                if (!v100) {
                  goto LABEL_178;
                }
                uint64_t v44 = v101;
                uint64_t v9 = v100;
                if (v101 == v100) {
                  goto LABEL_177;
                }
                do
                {
                  int v46 = (void *)*--v44;
                  uint64_t v45 = v46;
                  *uint64_t v44 = 0;
                  if (v46) {
                    operator delete[](v45);
                  }
                }
                while (v44 != v7);
                goto LABEL_176;
              }
              v39 += 32;
              if (!--v38) {
                goto LABEL_77;
              }
            }
            v95[0] = (const void **)"src index to dma_start must have 'index' type";
            __int16 v96 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
            uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
            if (v97[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
            }
            if (!v104) {
              return v3;
            }
            uint64_t v69 = (void **)__p;
            if (__p)
            {
              uint64_t v70 = v103;
              uint64_t v71 = __p;
              if (v103 != __p)
              {
                do
                  uint64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
                while (v70 != v69);
                uint64_t v71 = __p;
              }
              uint64_t v103 = v69;
              operator delete(v71);
            }
            int v7 = v100;
            if (!v100) {
              goto LABEL_178;
            }
            unsigned int v72 = v101;
            uint64_t v9 = v100;
            if (v101 == v100) {
              goto LABEL_177;
            }
            do
            {
              unint64_t v74 = (void *)*--v72;
              uint64_t v73 = v74;
              *unsigned int v72 = 0;
              if (v74) {
                operator delete[](v73);
              }
            }
            while (v72 != v7);
          }
          else
          {
LABEL_77:
            uint64_t DstIndices = mlir::affine::AffineDmaStartOp::getDstIndices(this);
            if (v48)
            {
              uint64_t v49 = v48;
              uint64_t v50 = DstIndices + 24;
              while (1)
              {
                uint64_t v51 = *(void **)v50;
                v97[0] = *(void *)(*(void *)v50 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!mlir::Type::isIndex((mlir::Type *)v97)) {
                  break;
                }
                if ((mlir::affine::isValidDim(v51, Parent) & 1) == 0
                  && (mlir::affine::isValidSymbol(v51, Parent) & 1) == 0)
                {
                  v95[0] = (const void **)"dst index must be a dimension or symbol identifier";
                  __int16 v96 = 259;
                  mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                  if (v97[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                  }
                  if (!v104) {
                    return v3;
                  }
                  uint64_t v52 = (void **)__p;
                  if (__p)
                  {
                    unsigned int v53 = v103;
                    uint64_t v54 = __p;
                    if (v103 != __p)
                    {
                      do
                        unsigned int v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                      while (v53 != v52);
                      uint64_t v54 = __p;
                    }
                    uint64_t v103 = v52;
                    operator delete(v54);
                  }
                  int v7 = v100;
                  if (!v100) {
                    goto LABEL_178;
                  }
                  uint64_t v55 = v101;
                  uint64_t v9 = v100;
                  if (v101 == v100) {
                    goto LABEL_177;
                  }
                  do
                  {
                    uint64_t v57 = (void *)*--v55;
                    uint64_t v56 = v57;
                    *uint64_t v55 = 0;
                    if (v57) {
                      operator delete[](v56);
                    }
                  }
                  while (v55 != v7);
                  goto LABEL_176;
                }
                v50 += 32;
                if (!--v49) {
                  goto LABEL_97;
                }
              }
              v95[0] = (const void **)"dst index to dma_start must have 'index' type";
              __int16 v96 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
              uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
              if (v97[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
              }
              if (!v104) {
                return v3;
              }
              uint64_t v75 = (void **)__p;
              if (__p)
              {
                uint64_t v76 = v103;
                uint64_t v77 = __p;
                if (v103 != __p)
                {
                  do
                    uint64_t v76 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v76 - 1);
                  while (v76 != v75);
                  uint64_t v77 = __p;
                }
                uint64_t v103 = v75;
                operator delete(v77);
              }
              int v7 = v100;
              if (!v100) {
                goto LABEL_178;
              }
              BOOL v78 = v101;
              uint64_t v9 = v100;
              if (v101 == v100) {
                goto LABEL_177;
              }
              do
              {
                int v80 = (void *)*--v78;
                uint64_t v79 = v80;
                void *v78 = 0;
                if (v80) {
                  operator delete[](v79);
                }
              }
              while (v78 != v7);
            }
            else
            {
LABEL_97:
              uint64_t TagIndices = mlir::affine::AffineDmaStartOp::getTagIndices(this);
              if (!v59) {
                return 1;
              }
              uint64_t v60 = v59;
              for (uint64_t i = TagIndices + 24; ; i += 32)
              {
                uint64_t v62 = *(void **)i;
                v97[0] = *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!mlir::Type::isIndex((mlir::Type *)v97)) {
                  break;
                }
                if ((mlir::affine::isValidDim(v62, Parent) & 1) == 0
                  && (mlir::affine::isValidSymbol(v62, Parent) & 1) == 0)
                {
                  v95[0] = (const void **)"tag index must be a dimension or symbol identifier";
                  __int16 v96 = 259;
                  mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
                  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
                  if (v97[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
                  }
                  if (!v104) {
                    return v3;
                  }
                  uint64_t v63 = (void **)__p;
                  if (__p)
                  {
                    uint64_t v64 = v103;
                    uint64_t v65 = __p;
                    if (v103 != __p)
                    {
                      do
                        uint64_t v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
                      while (v64 != v63);
                      uint64_t v65 = __p;
                    }
                    uint64_t v103 = v63;
                    operator delete(v65);
                  }
                  int v7 = v100;
                  if (!v100) {
                    goto LABEL_178;
                  }
                  uint64_t v66 = v101;
                  uint64_t v9 = v100;
                  if (v101 == v100) {
                    goto LABEL_177;
                  }
                  do
                  {
                    unsigned int v68 = (void *)*--v66;
                    unsigned int v67 = v68;
                    *uint64_t v66 = 0;
                    if (v68) {
                      operator delete[](v67);
                    }
                  }
                  while (v66 != v7);
                  goto LABEL_176;
                }
                uint64_t v3 = 1;
                if (!--v60) {
                  return v3;
                }
              }
              v95[0] = (const void **)"tag index to dma_start must have 'index' type";
              __int16 v96 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
              uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
              if (v97[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
              }
              if (!v104) {
                return v3;
              }
              uint64_t v81 = (void **)__p;
              if (__p)
              {
                uint64_t v82 = v103;
                uint64_t v83 = __p;
                if (v103 != __p)
                {
                  do
                    uint64_t v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
                  while (v82 != v81);
                  uint64_t v83 = __p;
                }
                uint64_t v103 = v81;
                operator delete(v83);
              }
              int v7 = v100;
              if (!v100) {
                goto LABEL_178;
              }
              uint64_t v84 = v101;
              uint64_t v9 = v100;
              if (v101 == v100) {
                goto LABEL_177;
              }
              do
              {
                int v86 = (void *)*--v84;
                uint64_t v85 = v86;
                void *v84 = 0;
                if (v86) {
                  operator delete[](v85);
                }
              }
              while (v84 != v7);
            }
          }
          goto LABEL_176;
        }
        v95[0] = (const void **)"incorrect number of operands";
        __int16 v96 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
        uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        }
        if (v104)
        {
          uint64_t v87 = (void **)__p;
          if (__p)
          {
            unint64_t v88 = v103;
            unint64_t v89 = __p;
            if (v103 != __p)
            {
              do
                unint64_t v88 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v88 - 1);
              while (v88 != v87);
              unint64_t v89 = __p;
            }
            uint64_t v103 = v87;
            operator delete(v89);
          }
          int v7 = v100;
          if (!v100) {
            goto LABEL_178;
          }
          uint64_t v90 = v101;
          uint64_t v9 = v100;
          if (v101 == v100) {
            goto LABEL_177;
          }
          do
          {
            unint64_t v92 = (void *)*--v90;
            unint64_t v91 = v92;
            void *v90 = 0;
            if (v92) {
              operator delete[](v91);
            }
          }
          while (v90 != v7);
          goto LABEL_176;
        }
      }
      else
      {
        v95[0] = (const void **)"expected DMA tag to be of memref type";
        __int16 v96 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
        uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        }
        if (v104)
        {
          int v19 = (void **)__p;
          if (__p)
          {
            int v20 = v103;
            int v21 = __p;
            if (v103 != __p)
            {
              do
                int v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
              while (v20 != v19);
              int v21 = __p;
            }
            uint64_t v103 = v19;
            operator delete(v21);
          }
          int v7 = v100;
          if (!v100) {
            goto LABEL_178;
          }
          int v22 = v101;
          uint64_t v9 = v100;
          if (v101 == v100) {
            goto LABEL_177;
          }
          do
          {
            int v24 = (void *)*--v22;
            uint64_t v23 = v24;
            *int v22 = 0;
            if (v24) {
              operator delete[](v23);
            }
          }
          while (v22 != v7);
          goto LABEL_176;
        }
      }
    }
    else
    {
      v95[0] = (const void **)"expected DMA destination to be of memref type";
      __int16 v96 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
      uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
      if (v97[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
      }
      if (v104)
      {
        uint64_t v12 = (void **)__p;
        if (__p)
        {
          uint64_t v13 = v103;
          uint64_t v14 = __p;
          if (v103 != __p)
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p;
          }
          uint64_t v103 = v12;
          operator delete(v14);
        }
        int v7 = v100;
        if (!v100) {
          goto LABEL_178;
        }
        unint64_t v15 = v101;
        uint64_t v9 = v100;
        if (v101 == v100) {
          goto LABEL_177;
        }
        do
        {
          uint64_t v17 = (void *)*--v15;
          uint64_t v16 = v17;
          *unint64_t v15 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v15 != v7);
        goto LABEL_176;
      }
    }
  }
  else
  {
    v95[0] = (const void **)"expected DMA source to be of memref type";
    __int16 v96 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v95, (uint64_t)v97);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
    if (v97[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
    }
    if (v104)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        int v5 = v103;
        unint64_t v6 = __p;
        if (v103 != __p)
        {
          do
            int v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          unint64_t v6 = __p;
        }
        uint64_t v103 = v4;
        operator delete(v6);
      }
      int v7 = v100;
      if (!v100) {
        goto LABEL_178;
      }
      uint64_t v8 = v101;
      uint64_t v9 = v100;
      if (v101 == v100)
      {
LABEL_177:
        uint64_t v101 = v7;
        operator delete(v9);
LABEL_178:
        if (v98 != &v99) {
          free(v98);
        }
        return v3;
      }
      do
      {
        int v11 = (void *)*--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
LABEL_176:
      uint64_t v9 = v100;
      goto LABEL_177;
    }
  }
  return v3;
}

void mlir::affine::AffineDmaStartOp::getEffects(uint64_t *a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  uint64_t v5 = *(void *)(*(void *)(*a1 + 72) + 24);
  {
    {
      uint64_t InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v63 = 84;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v63 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v63;
      }
      uint64_t v43 = &InherentAttr[v42];
      unint64_t v44 = v63 - v42;
      if (v63 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v63 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1EC9A4AE8;
    *(void *)algn_1E8EB9D58 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_180159000);
  }
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t InherentAttr = (const char *)v4;
    unint64_t v63 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v64 = v5 | 4;
    uint64_t v65 = 0;
    int v66 = 0;
    char v67 = 0;
    unint64_t v17 = v6 + 1;
    BOOL v18 = *(void *)a2 + 40 * (unint64_t)v6 > (unint64_t)&InherentAttr;
    if (*(void *)a2 <= (unint64_t)&InherentAttr && v18)
    {
      uint64_t v38 = (char *)&InherentAttr - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 40);
      uint64_t v19 = *(void *)a2;
      int v20 = (const char **)&v38[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17, 40);
      uint64_t v19 = *(void *)a2;
      int v20 = &InherentAttr;
    }
    uint64_t v21 = v19 + 40 * *(unsigned int *)(a2 + 8);
    long long v22 = *(_OWORD *)v20;
    long long v23 = *((_OWORD *)v20 + 1);
    *(void *)(v21 + 32) = v20[4];
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
  }
  else
  {
    uint64_t v7 = *(void *)a2 + 40 * v6;
    *(void *)uint64_t v7 = v4;
    *(void *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v7 + 16) = v5 | 4;
    *(void *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(unsigned char *)(v7 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v8 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  uint64_t InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  uint64_t v9 = *(void *)(*(void *)(*a1 + 72)
                 + 32 * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 1)
                 + 24);
  {
    {
      uint64_t InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v63 = 84;
      unint64_t v48 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v63 >= v48) {
        unint64_t v49 = v48;
      }
      else {
        unint64_t v49 = v63;
      }
      uint64_t v50 = &InherentAttr[v49];
      unint64_t v51 = v63 - v49;
      if (v63 - v49 >= 0x12) {
        uint64_t v52 = 18;
      }
      else {
        uint64_t v52 = v63 - v49;
      }
      unint64_t v53 = v51 - v52;
      if (v53 >= v53 - 1) {
        uint64_t v54 = v53 - 1;
      }
      else {
        uint64_t v54 = v53;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1EC9A4AE8;
    *(void *)algn_1E8EB9D58 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_180159000);
  }
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t InherentAttr = (const char *)v8;
    unint64_t v63 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v64 = v9 | 4;
    uint64_t v65 = 0;
    int v66 = 0;
    char v67 = 0;
    unint64_t v24 = v10 + 1;
    BOOL v25 = *(void *)a2 + 40 * (unint64_t)v10 > (unint64_t)&InherentAttr;
    if (*(void *)a2 <= (unint64_t)&InherentAttr && v25)
    {
      uint64_t v39 = (char *)&InherentAttr - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v24, 40);
      uint64_t v26 = *(void *)a2;
      p_uint64_t InherentAttr = (const char **)&v39[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v24, 40);
      uint64_t v26 = *(void *)a2;
      p_uint64_t InherentAttr = &InherentAttr;
    }
    uint64_t v28 = v26 + 40 * *(unsigned int *)(a2 + 8);
    long long v29 = *(_OWORD *)p_InherentAttr;
    long long v30 = *((_OWORD *)p_InherentAttr + 1);
    *(void *)(v28 + 32) = p_InherentAttr[4];
    *(_OWORD *)uint64_t v28 = v29;
    *(_OWORD *)(v28 + 16) = v30;
  }
  else
  {
    uint64_t v11 = *(void *)a2 + 40 * v10;
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v11 + 16) = v9 | 4;
    *(void *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v12 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  uint64_t InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"src_map", 7);
  uint64_t InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t InherentAttr = (const char *)mlir::Operation::getInherentAttr(*a1, (uint64_t)"dst_map", 7);
  uint64_t InherentAttr = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  uint64_t v14 = *(void *)(*(void *)(*a1 + 72)
                  + 32
                  * (NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr) + 2)
                  + 24);
  {
    {
      uint64_t InherentAttr = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v63 = 84;
      unint64_t v55 = llvm::StringRef::find((uint64_t *)&InherentAttr, "DesiredTypeName = ", 0x12uLL, 0);
      if (v63 >= v55) {
        unint64_t v56 = v55;
      }
      else {
        unint64_t v56 = v63;
      }
      uint64_t v57 = &InherentAttr[v56];
      unint64_t v58 = v63 - v56;
      if (v63 - v56 >= 0x12) {
        uint64_t v59 = 18;
      }
      else {
        uint64_t v59 = v63 - v56;
      }
      unint64_t v60 = v58 - v59;
      if (v60 >= v60 - 1) {
        uint64_t v61 = v60 - 1;
      }
      else {
        uint64_t v61 = v60;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1EC9A4AE8;
    *(void *)algn_1E8EB9D58 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_180159000);
  }
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t InherentAttr = (const char *)v12;
    unint64_t v63 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v64 = v14 | 4;
    uint64_t v65 = 0;
    int v66 = 0;
    char v67 = 0;
    unint64_t v31 = v15 + 1;
    BOOL v32 = *(void *)a2 + 40 * (unint64_t)v15 > (unint64_t)&InherentAttr;
    if (*(void *)a2 <= (unint64_t)&InherentAttr && v32)
    {
      uint64_t v40 = (char *)&InherentAttr - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v31, 40);
      uint64_t v33 = *(void *)a2;
      uint64_t v34 = (const char **)&v40[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v31, 40);
      uint64_t v33 = *(void *)a2;
      uint64_t v34 = &InherentAttr;
    }
    uint64_t v35 = v33 + 40 * *(unsigned int *)(a2 + 8);
    long long v36 = *(_OWORD *)v34;
    long long v37 = *((_OWORD *)v34 + 1);
    *(void *)(v35 + 32) = v34[4];
    *(_OWORD *)uint64_t v35 = v36;
    *(_OWORD *)(v35 + 16) = v37;
  }
  else
  {
    uint64_t v16 = *(void *)a2 + 40 * v15;
    *(void *)uint64_t v16 = v12;
    *(void *)(v16 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v16 + 16) = v14 | 4;
    *(void *)(v16 + 24) = 0;
    *(_DWORD *)(v16 + 32) = 0;
    *(unsigned char *)(v16 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

void mlir::affine::AffineDmaWaitOp::print(mlir::affine::AffineDmaWaitOp *this, mlir::OpAsmPrinter *a2)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 91;
  }
  uint64_t v8 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v9 = *(void *)(v8 + 72);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t InherentAttr = (void *)mlir::Operation::getInherentAttr(v8, (uint64_t)"tag_map", 7);
  uint64_t InherentAttr = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&InherentAttr);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&InherentAttr);
  uint64_t v11 = NumInputs;
  uint64_t InherentAttr = v35;
  uint64_t v34 = 0x200000000;
  if (NumInputs >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InherentAttr, v35, NumInputs, 8);
    uint64_t v12 = (char *)InherentAttr + 8 * v34;
    if (v11 >= 0xF
      && ((unint64_t)v12 >= v9 + 32 * v11 + 32
       || v9 + 56 >= (unint64_t)InherentAttr + 8 * v34 + 8 * v11))
    {
      uint64_t v14 = v11 & 3;
      if ((v11 & 3) == 0) {
        uint64_t v14 = 4;
      }
      uint64_t v13 = v11 - v14;
      v12 += v13;
      uint64_t v15 = (const double *)(v9 + 120);
      uint64_t v16 = (unsigned long long *)((char *)InherentAttr + 8 * v34 + 16);
      uint64_t v17 = v13;
      do
      {
        BOOL v18 = v15 - 8;
        unsigned long long v19 = (unsigned __int128)vld4q_f64(v18);
        unsigned long long v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        *uint64_t v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v13 = 0;
LABEL_21:
    uint64_t v21 = v11 - v13;
    long long v22 = (uint64_t *)(v9 + 32 * v13 + 56);
    do
    {
      uint64_t v23 = *v22;
      v22 += 4;
      *v12++ = v23;
      --v21;
    }
    while (v21);
    int v24 = v34;
    goto LABEL_24;
  }
  if (NumInputs)
  {
    uint64_t v12 = v35;
    goto LABEL_16;
  }
  int v24 = 0;
LABEL_24:
  LODWORD(v34) = v24 + v11;
  uint64_t v25 = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  mlir::ValueRange::ValueRange(v32, (uint64_t)InherentAttr, v34);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v25, v32[0], v32[1]);
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = *((void *)v26 + 4);
  if ((unint64_t)(*((void *)v26 + 3) - v27) > 2)
  {
    *(unsigned char *)(v27 + 2) = 32;
    *(_WORD *)uint64_t v27 = 11357;
    *((void *)v26 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v26, "], ", 3uLL);
  }
  uint64_t Value = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"tag_map", 7);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  int v28 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v28 + 1) + 24));
  long long v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = *((void *)v29 + 4);
  if ((unint64_t)(*((void *)v29 + 3) - v30) > 2)
  {
    *(unsigned char *)(v30 + 2) = 32;
    *(_WORD *)uint64_t v30 = 14880;
    *((void *)v29 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v29, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (InherentAttr != v35) {
    free(InherentAttr);
  }
}

uint64_t mlir::affine::AffineDmaWaitOp::parse(uint64_t a1, uint64_t a2)
{
  char v24[8] = *MEMORY[0x1E4F143B8];
  memset(v20, 0, 24);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v22 = (char *)v24;
  uint64_t v23 = 0x200000000;
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v17, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v20, 1)) {
    goto LABEL_14;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v22, &v19, "tag_map", 7, a2 + 112, 2))goto LABEL_14; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
  }
    goto LABEL_14;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    goto LABEL_14;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v18)) {
    goto LABEL_14;
  }
  uint64_t v7 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v20, v18, v7))goto LABEL_14; {
  if (v23)
  }
  {
    uint64_t v8 = v22;
    uint64_t v9 = 32 * v23;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, IndexType, v7))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9) {
        goto LABEL_11;
      }
    }
    goto LABEL_14;
  }
LABEL_11:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, IndexType, v7))
  {
LABEL_14:
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  if (*(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    int v14 = v23;
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    if (v14 == mlir::AffineMap::getNumInputs((mlir::AffineMap *)v21))
    {
      uint64_t v12 = 1;
      goto LABEL_15;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v11 = "tag memref operand count != to map.numInputs";
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v11 = "expected tag to be of memref type";
  }
  uint64_t v15 = v11;
  __int16 v16 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v10, &v15);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v21);
LABEL_15:
  if (v22 != (char *)v24) {
    free(v22);
  }
  return v12;
}

uint64_t mlir::affine::AffineDmaWaitOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  Parent = (mlir::Block *)*this;
  if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    do
    {
      int v14 = (mlir::Block *)*((void *)Parent + 2);
      if (!v14) {
        goto LABEL_45;
      }
      uint64_t v12 = Parent;
      uint64_t ParentOp = mlir::Block::getParentOp(v14);
      Parent = (mlir::Block *)ParentOp;
      if (!ParentOp) {
        goto LABEL_22;
      }
    }
    while (!mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48)));
    uint64_t v15 = (mlir::Block *)*((void *)v12 + 2);
    if (v15)
    {
      Parent = (mlir::Block *)mlir::Block::getParent(v15);
LABEL_22:
      uint64_t v16 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0)
      {
LABEL_23:
        uint64_t v17 = *(void *)(v16 + 72);
        goto LABEL_24;
      }
    }
    else
    {
LABEL_45:
      Parent = 0;
      uint64_t v16 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
        goto LABEL_23;
      }
    }
    uint64_t v17 = 0;
LABEL_24:
    v37[0] = mlir::Operation::getInherentAttr(v16, (uint64_t)"tag_map", 7);
    v37[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37);
    unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)v37);
    if (!NumInputs) {
      return 1;
    }
    uint64_t v19 = NumInputs;
    for (uint64_t i = v17 + 56; ; i += 32)
    {
      uint64_t v21 = *(void **)i;
      v37[0] = *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isIndex((mlir::Type *)v37)) {
        break;
      }
      if ((mlir::affine::isValidDim(v21, Parent) & 1) == 0 && (mlir::affine::isValidSymbol(v21, Parent) & 1) == 0)
      {
        v35[0] = (const void **)"index must be a dimension or symbol identifier";
        __int16 v36 = 259;
        mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
        uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
        if (v37[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
        }
        if (!v44) {
          return v3;
        }
        long long v22 = (void **)__p;
        if (__p)
        {
          uint64_t v23 = v43;
          int v24 = __p;
          if (v43 != __p)
          {
            do
              uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            int v24 = __p;
          }
          uint64_t v43 = v22;
          operator delete(v24);
        }
        uint64_t v7 = v40;
        if (!v40) {
          goto LABEL_63;
        }
        uint64_t v25 = v41;
        uint64_t v9 = v40;
        if (v41 == v40) {
          goto LABEL_62;
        }
        do
        {
          uint64_t v27 = (void *)*--v25;
          uint64_t v26 = v27;
          void *v25 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v25 != v7);
        goto LABEL_61;
      }
      if (!--v19) {
        return 1;
      }
    }
    v35[0] = (const void **)"index to dma_wait must have 'index' type";
    __int16 v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (!v44) {
      return v3;
    }
    int v28 = (void **)__p;
    if (__p)
    {
      long long v29 = v43;
      uint64_t v30 = __p;
      if (v43 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      uint64_t v43 = v28;
      operator delete(v30);
    }
    uint64_t v7 = v40;
    if (!v40) {
      goto LABEL_63;
    }
    unint64_t v31 = v41;
    uint64_t v9 = v40;
    if (v41 == v40) {
      goto LABEL_62;
    }
    do
    {
      uint64_t v33 = (void *)*--v31;
      BOOL v32 = v33;
      *unint64_t v31 = 0;
      if (v33) {
        operator delete[](v32);
      }
    }
    while (v31 != v7);
    goto LABEL_61;
  }
  v35[0] = (const void **)"expected DMA tag to be of memref type";
  __int16 v36 = 259;
  mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
  if (v37[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
  }
  if (v44)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v43;
      uint64_t v6 = __p;
      if (v43 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      uint64_t v43 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v40;
    if (!v40) {
      goto LABEL_63;
    }
    uint64_t v8 = v41;
    uint64_t v9 = v40;
    if (v41 == v40)
    {
LABEL_62:
      unint64_t v41 = v7;
      operator delete(v9);
LABEL_63:
      if (v38 != &v39) {
        free(v38);
      }
      return v3;
    }
    do
    {
      uint64_t v11 = (void *)*--v8;
      uint64_t v10 = v11;
      *uint64_t v8 = 0;
      if (v11) {
        operator delete[](v10);
      }
    }
    while (v8 != v7);
LABEL_61:
    uint64_t v9 = v40;
    goto LABEL_62;
  }
  return v3;
}

void *mlir::affine::AffineForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, const char *a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, void *, unint64_t, unint64_t), uint64_t a13)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  v55[0] = a4;
  v55[1] = a7;
  v55[2] = a11;
  uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v55, 3);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v58 = 261;
  unint64_t v56 = "operandSegmentSizes";
  uint64_t v57 = 19;
  uint64_t v18 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v56);
  mlir::NamedAttribute::NamedAttribute(v53, v18, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v53[0], v53[1]);
  unint64_t v56 = a10;
  uint64_t v57 = 0;
  if (a11)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v21 = *(void *)(mlir::ValueRange::dereference_iterator(&v56, (uint64_t)v19) + 8);
      unint64_t v22 = *(unsigned int *)(a2 + 72);
      if (v22 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22 + 1, 8);
        unint64_t v22 = *(unsigned int *)(a2 + 72);
      }
      *(void *)(*(void *)(a2 + 64) + 8 * v22) = v21 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      uint64_t v19 = (mlir::MLIRContext *)++v57;
    }
    while (v56 != a10 || v19 != (mlir::MLIRContext *)a11);
  }
  uint64_t v23 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  uint64_t IndexType = mlir::Builder::getIndexType((mlir::IndexType **)a1, v19);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr(a1, IndexType, a9);
  mlir::NamedAttribute::NamedAttribute(&v56, v23, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v56, v57);
  uint64_t v26 = **(void **)(*(void *)(a2 + 8) + 96);
  uint64_t v27 = mlir::AffineMapAttr::get(a5);
  mlir::NamedAttribute::NamedAttribute(&v56, v26, v27);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v56, v57);
  mlir::OperationState::addOperands(a2, a3, a4);
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16);
  uint64_t v29 = mlir::AffineMapAttr::get(a8);
  mlir::NamedAttribute::NamedAttribute(&v56, v28, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v56, v57);
  mlir::OperationState::addOperands(a2, a6, a7);
  mlir::OperationState::addOperands(a2, (uint64_t)a10, a11);
  uint64_t v30 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  unint64_t v31 = operator new(0x48uLL);
  *unint64_t v31 = 0u;
  v31[1] = 0u;
  *((void *)v31 + 4) = v31 + 2;
  *((void *)v31 + 5) = v31 + 2;
  *((void *)v31 + 7) = 0;
  *((void *)v31 + 8) = 0;
  *((void *)v31 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v30, (uint64_t)v31);
  uint64_t v33 = *v30;
  *((void *)v31 + 2) = v30;
  *((void *)v31 + 1) = v33;
  unint64_t v31 = (_OWORD *)((char *)v31 + 8);
  *(void *)(v33 + 8) = v31;
  uint64_t *v30 = (uint64_t)v31;
  uint64_t v34 = v30[1];
  if (v34) {
    uint64_t v35 = (void *)(v34 - 8);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = mlir::Builder::getIndexType((mlir::IndexType **)a1, v32);
  long long v37 = mlir::Block::addArgument(v35, v36, *(void *)a2);
  unint64_t v56 = a10;
  uint64_t v57 = 0;
  if (!a11)
  {
    uint64_t v39 = a12;
    if (!a12) {
      return (void *)mlir::impl::ensureRegionTerminator(v30, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator);
    }
    goto LABEL_22;
  }
  uint64_t v38 = 0;
  uint64_t v39 = a12;
  do
  {
    v53[0] = mlir::ValueRange::dereference_iterator(&v56, v38);
    unint64_t v40 = *(void *)(v53[0] + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)v53);
    uint64_t result = mlir::Block::addArgument(v35, v40, Loc);
    uint64_t v38 = ++v57;
  }
  while (v56 != a10 || v38 != a11);
  if (a12)
  {
LABEL_22:
    char v44 = (_OWORD *)(a1 + 16);
    long long v52 = *(_OWORD *)(a1 + 16);
    uint64_t v45 = v35[5];
    *(void *)(a1 + 16) = v35;
    *(void *)(a1 + 24) = v45;
    uint64_t v46 = *(void *)a2;
    mlir::ValueRange::ValueRange(v54, v35[6] + 8, ((uint64_t)(v35[7] - v35[6]) >> 3) - 1);
    uint64_t result = (void *)v39(a13, a1, v46, v37, v54[0], v54[1]);
    if ((void)v52)
    {
      *char v44 = v52;
    }
    else
    {
      *(void *)char v44 = 0;
      *(void *)(a1 + 24) = 0;
    }
  }
  return result;
}

void mlir::OperationState::addAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 112;
  mlir::NamedAttribute::NamedAttribute(v4, a2, a3);
  mlir::NamedAttrList::push_back(v3, v4[0], v4[1]);
}

uint64_t mlir::affine::AffineForOp::verifyRegions(uint64_t **this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = v3 + 48;
  uint64_t v4 = *(void *)(v3 + 48);
  if (((*(void *)(v5 + 8) - v4) & 0x7FFFFFFF8) != 0
    && (v46[0] = *(void *)(*(void *)v4 + 8) & 0xFFFFFFFFFFFFFFF8, mlir::Type::isIndex((mlir::Type *)v46)))
  {
    v46[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v46))
    {
      unint64_t v6 = *((unsigned int *)*this + 11);
      uint64_t v7 = HIBYTE(*((_DWORD *)*this + 11)) ? (uint64_t)&(*this)[2 * ((v6 >> 23) & 1) + 8] : 0;
      uint64_t v8 = *(unsigned int *)(v7 + 24);
      uint64_t v9 = (v6 & 0x800000) != 0 ? (*this)[9] : 0;
      v46[0] = (*this)[2 * ((v6 >> 23) & 1) + 8];
      v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
      unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v46);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(this, v9, v8, NumDims)) {
        return 0;
      }
    }
    unint64_t v11 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v11 = 0;
    }
    v46[0] = *(void *)(v11 + 16);
    v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v46))
    {
      unint64_t v12 = *((unsigned int *)*this + 11);
      uint64_t v13 = (uint64_t)&(*this)[2 * ((v12 >> 23) & 1) + 8];
      if (!HIBYTE(*((_DWORD *)*this + 11))) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(unsigned int *)(v13 + 24);
      uint64_t v15 = (v12 & 0x800000) != 0 ? (*this)[9] : 0;
      uint64_t v16 = v15 + 32 * v14;
      uint64_t v17 = (*(_DWORD *)(v13 + 28) + v14) - v14;
      v46[0] = *(void *)(v13 + 16);
      v46[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v46);
      unsigned int v18 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v46);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(this, v16, v17, v18)) {
        return 0;
      }
    }
    int v19 = *((_DWORD *)*this + 9);
    if (!v19) {
      return 1;
    }
    if (mlir::affine::AffineForOp::getNumIterOperands((mlir::affine::AffineForOp *)this) == v19)
    {
      uint64_t v20 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v20) {
        uint64_t v21 = v20 - 8;
      }
      else {
        uint64_t v21 = 0;
      }
      if (((*(void *)(v21 + 56) - *(void *)(v21 + 48)) >> 3) - 1 == v19) {
        return 1;
      }
      v44[0] = (const void **)"mismatch between the number of basic block args and results";
      __int16 v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
      uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      }
      if (v53)
      {
        long long v37 = (void **)__p;
        if (__p)
        {
          uint64_t v38 = v52;
          uint64_t v39 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
            while (v38 != v37);
            uint64_t v39 = __p;
          }
          long long v52 = v37;
          operator delete(v39);
        }
        uint64_t v26 = v49;
        if (!v49) {
          goto LABEL_73;
        }
        unint64_t v40 = v50;
        uint64_t v28 = v49;
        if (v50 == v49)
        {
LABEL_72:
          uint64_t v50 = v26;
          operator delete(v28);
LABEL_73:
          if (v47 != &v48) {
            free(v47);
          }
          return v22;
        }
        do
        {
          unint64_t v42 = (void *)*--v40;
          unint64_t v41 = v42;
          *unint64_t v40 = 0;
          if (v42) {
            operator delete[](v41);
          }
        }
        while (v40 != v26);
LABEL_71:
        uint64_t v28 = v49;
        goto LABEL_72;
      }
    }
    else
    {
      v44[0] = (const void **)"mismatch between the number of loop-carried values and results";
      __int16 v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
      uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      }
      if (v53)
      {
        unint64_t v31 = (void **)__p;
        if (__p)
        {
          BOOL v32 = v52;
          uint64_t v33 = __p;
          if (v52 != __p)
          {
            do
              BOOL v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          long long v52 = v31;
          operator delete(v33);
        }
        uint64_t v26 = v49;
        if (!v49) {
          goto LABEL_73;
        }
        uint64_t v34 = v50;
        uint64_t v28 = v49;
        if (v50 == v49) {
          goto LABEL_72;
        }
        do
        {
          uint64_t v36 = (void *)*--v34;
          uint64_t v35 = v36;
          void *v34 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v34 != v26);
        goto LABEL_71;
      }
    }
  }
  else
  {
    v44[0] = (const void **)"expected body to have a single index argument for the induction variable";
    __int16 v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v46);
    uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
    if (v46[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
    }
    if (v53)
    {
      uint64_t v23 = (void **)__p;
      if (__p)
      {
        int v24 = v52;
        uint64_t v25 = __p;
        if (v52 != __p)
        {
          do
            int v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          uint64_t v25 = __p;
        }
        long long v52 = v23;
        operator delete(v25);
      }
      uint64_t v26 = v49;
      if (!v49) {
        goto LABEL_73;
      }
      uint64_t v27 = v50;
      uint64_t v28 = v49;
      if (v50 == v49) {
        goto LABEL_72;
      }
      do
      {
        uint64_t v30 = (void *)*--v27;
        uint64_t v29 = v30;
        *uint64_t v27 = 0;
        if (v30) {
          operator delete[](v29);
        }
      }
      while (v27 != v26);
      goto LABEL_71;
    }
  }
  return v22;
}

uint64_t verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 1;
  }
  uint64_t v8 = 0;
  while (2)
  {
    uint64_t v9 = *(void **)(a2 + 32 * v8 + 24);
    uint64_t v10 = *a1;
    if (v8 >= a4)
    {
      do
      {
        uint64_t v21 = (mlir::Block *)v10[2];
        if (!v21) {
          goto LABEL_42;
        }
        uint64_t v22 = v10;
        uint64_t ParentOp = mlir::Block::getParentOp(v21);
        if (!ParentOp) {
          goto LABEL_42;
        }
        uint64_t v10 = (uint64_t *)ParentOp;
        {
          char v53 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
          unint64_t v54 = 83;
          unint64_t v24 = llvm::StringRef::find((uint64_t *)&v53, "DesiredTypeName = ", 0x12uLL, 0);
          if (v54 >= v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = v54;
          }
          uint64_t v26 = &v53[v25];
          unint64_t v27 = v54 - v25;
          uint64_t v28 = 18;
          if (v27 < 0x12) {
            uint64_t v28 = v27;
          }
          unint64_t v29 = v27 - v28;
          if (v29 >= v29 - 1) {
            uint64_t v30 = v29 - 1;
          }
          else {
            uint64_t v30 = v29;
          }
          mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v26[v28], v30);
        }
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10[6] + 32))(v10[6], mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
      uint64_t v33 = (mlir::Block *)v22[2];
      if (v33)
      {
        Parent = (mlir::Block *)mlir::Block::getParent(v33);
        if ((mlir::affine::isValidSymbol(v9, Parent) & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_42:
        if ((mlir::affine::isValidSymbol(v9, 0) & 1) == 0)
        {
LABEL_43:
          v51[0] = (const void **)"operand cannot be used as a symbol";
          __int16 v52 = 259;
          mlir::OpState::emitOpError(a1, v51, (uint64_t)&v53);
          uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          if (v53) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
          }
          if (!v61) {
            return v35;
          }
          uint64_t v36 = (void **)__p;
          if (__p)
          {
            long long v37 = v60;
            uint64_t v38 = __p;
            if (v60 != __p)
            {
              do
                long long v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
              while (v37 != v36);
              uint64_t v38 = __p;
            }
            unint64_t v60 = v36;
            operator delete(v38);
          }
          uint64_t v39 = v57;
          if (!v57) {
            goto LABEL_75;
          }
          unint64_t v40 = v58;
          unint64_t v41 = v57;
          if (v58 == v57) {
            goto LABEL_74;
          }
          do
          {
            uint64_t v43 = (void *)*--v40;
            unint64_t v42 = v43;
            *unint64_t v40 = 0;
            if (v43) {
              operator delete[](v42);
            }
          }
          while (v40 != v39);
          goto LABEL_73;
        }
      }
LABEL_4:
      if (++v8 == a3) {
        return 1;
      }
      continue;
    }
    break;
  }
  do
  {
    unint64_t v11 = (mlir::Block *)v10[2];
    if (!v11) {
      goto LABEL_3;
    }
    unint64_t v12 = v10;
    uint64_t v13 = mlir::Block::getParentOp(v11);
    if (!v13) {
      goto LABEL_3;
    }
    uint64_t v10 = (uint64_t *)v13;
    {
      char v53 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      unint64_t v54 = 83;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v53, "DesiredTypeName = ", 0x12uLL, 0);
      if (v54 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v54;
      }
      uint64_t v16 = &v53[v15];
      unint64_t v17 = v54 - v15;
      uint64_t v18 = 18;
      if (v17 < 0x12) {
        uint64_t v18 = v17;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
    }
  }
  while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10[6] + 32))(v10[6], mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
  unint64_t v31 = (mlir::Block *)v12[2];
  if (!v31)
  {
LABEL_3:
    if (mlir::affine::isValidDim(v9, 0)) {
      goto LABEL_4;
    }
    goto LABEL_59;
  }
  BOOL v32 = (mlir::Block *)mlir::Block::getParent(v31);
  if (mlir::affine::isValidDim(v9, v32)) {
    goto LABEL_4;
  }
LABEL_59:
  v51[0] = (const void **)"operand cannot be used as a dimension id";
  __int16 v52 = 259;
  mlir::OpState::emitOpError(a1, v51, (uint64_t)&v53);
  uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  if (v53) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
  }
  if (v61)
  {
    __int16 v45 = (void **)__p;
    if (__p)
    {
      uint64_t v46 = v60;
      uint64_t v47 = __p;
      if (v60 != __p)
      {
        do
          uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        uint64_t v47 = __p;
      }
      unint64_t v60 = v45;
      operator delete(v47);
    }
    uint64_t v39 = v57;
    if (!v57) {
      goto LABEL_75;
    }
    uint64_t v48 = v58;
    unint64_t v41 = v57;
    if (v58 == v57)
    {
LABEL_74:
      __int16 v58 = v39;
      operator delete(v41);
LABEL_75:
      if (v55 != &v56) {
        free(v55);
      }
      return v35;
    }
    do
    {
      uint64_t v50 = (void *)*--v48;
      unint64_t v49 = v50;
      *uint64_t v48 = 0;
      if (v50) {
        operator delete[](v49);
      }
    }
    while (v48 != v39);
LABEL_73:
    unint64_t v41 = v57;
    goto LABEL_74;
  }
  return v35;
}

uint64_t mlir::affine::AffineForOp::getNumIterOperands(mlir::affine::AffineForOp *this)
{
  uint64_t v7 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v7);
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    int v3 = *(_DWORD *)(*(void *)this + 68);
  }
  else {
    int v3 = 0;
  }
  int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  return v3 - (NumInputs + mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v7));
}

uint64_t mlir::affine::AffineForOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  memset(v44, 0, 24);
  char v46 = 0;
  v44[5] = 0;
  char v45 = 0;
  v44[4] = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void, void))(*(void *)a1 + 720))(a1, v44, 0, 0))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1))
  }
    return 0;
  int v6 = *(_DWORD *)(a2 + 24);
  if (!parseBound(1, a2, a1)) {
    return 0;
  }
  int v7 = *(_DWORD *)(a2 + 24);
  std::string __p = " between bounds";
  v55[8] = 259;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &__p))return 0; {
  int v8 = *(_DWORD *)(a2 + 24);
  }
  if (!parseBound(0, a2, a1)) {
    return 0;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "step", 4))
  {
    int v38 = v9;
    int v39 = v8;
    int v40 = v7;
    int v41 = v6;
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
    uint64_t IndexType = mlir::Builder::getIndexType(v4, v10);
    uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v4, IndexType, 1);
    mlir::OperationState::addAttribute(a2, v17, IntegerAttr);
    goto LABEL_19;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v50 = 0;
  uint64_t v13 = mlir::Builder::getIndexType(v4, v12);
  std::string __p = *(void **)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__p);
  uint64_t v15 = (uint64_t)AttrData;
  uint64_t v16 = AttrData ? strlen(AttrData) : 0;
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, (uint64_t *)&v50, v13, v15, v16, a2 + 112))return 0; {
  mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
  }
  unsigned int v20 = v54 - 1;
  if (v54 > 0x40)
  {
    unint64_t v23 = *((void *)__p + (v20 >> 6));
    operator delete[](__p);
    if ((v23 >> v20)) {
      goto LABEL_14;
    }
  }
  else if (((unint64_t)__p >> v20))
  {
LABEL_14:
    uint64_t v47 = "expected step to be representable as a positive signed integer";
    __int16 v49 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&__p, a1, v11, &v47);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
    return v21;
  }
  int v38 = v9;
  int v39 = v8;
  int v40 = v7;
  int v41 = v6;
LABEL_19:
  std::string __p = v55;
  uint64_t v54 = 0x400000000;
  uint64_t v50 = v52;
  uint64_t v51 = 0x400000000;
  __n128 v24 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&__p, (unint64_t)v44);
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, __n128))(*(void *)a1 + 376))(a1, "iter_args", 9, v24))
  {
    if (!mlir::OpAsmParser::parseAssignmentList(a1)
      || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2 + 64))
    {
LABEL_34:
      uint64_t v21 = 0;
      goto LABEL_36;
    }
    if (v54 != 1)
    {
      if (v51)
      {
        uint64_t v25 = *(unsigned int *)(a2 + 72);
        if (v25)
        {
          uint64_t v26 = 0;
          unint64_t v27 = (char *)v50;
          uint64_t v28 = *(void **)(a2 + 64);
          unint64_t v29 = (char *)__p + 96;
          unint64_t v30 = ((unint64_t)v54 << 6) - 128;
          uint64_t v31 = (v25 << 6) - 64;
          unint64_t v32 = ((unint64_t)v51 << 6) - 64;
          while (1)
          {
            *(void *)&v29[v26] = *v28;
            if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 696))(a1, v27)) {
              goto LABEL_34;
            }
            if (v30 != v26 && v32 != v26)
            {
              v27 += 32;
              ++v28;
              BOOL v33 = v31 == v26;
              v26 += 64;
              if (!v33) {
                continue;
              }
            }
            break;
          }
        }
      }
    }
  }
  LODWORD(v47) = v40 - v41;
  HIDWORD(v47) = v38 - v39;
  int v48 = v51;
  uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v4, (uint64_t)&v47, 3);
  mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr);
  uint64_t v35 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (*(unsigned int *)(a2 + 72) + 1 != v54)
  {
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    unint64_t v42 = "mismatch between the number of loop-carried values and results";
    __int16 v43 = 259;
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v47, a1, v37, &v42);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v47);
    goto LABEL_36;
  }
  uint64_t v36 = (void *)v35;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 744))(a1, v35, __p)) {
    goto LABEL_34;
  }
  mlir::impl::ensureRegionTerminator(v36, v4, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112);
LABEL_36:
  if (v50 != v52) {
    free(v50);
  }
  if (__p != v55) {
    free(__p);
  }
  return v21;
}

uint64_t parseBound(int a1, uint64_t a2, uint64_t a3)
{
  v76[4] = *MEMORY[0x1E4F143B8];
  if (a1) {
    int v6 = "max";
  }
  else {
    int v6 = "min";
  }
  if (a1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16;
  }
  char v8 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)a3 + 376))(a3, v6, 3);
  int v9 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
  uint64_t v64 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + v7);
  unint64_t v74 = v76;
  uint64_t v75 = 0x100000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a3 + 688))(a3, &v74, 0, 1, 0xFFFFFFFFLL))goto LABEL_62; {
  if (!v75)
  }
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
    uint64_t v61 = 0;
    uint64_t IndexType = mlir::Builder::getIndexType(v9, v23);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v64);
    if (mlir::AsmParser::parseAttribute<mlir::Attribute>(a3, &v61, IndexType, AttrData, v26, a2 + 112))
    {
      uint64_t v27 = v61;
      uint64_t v28 = *(void **)(*(void *)v61 + 136);
      if (v28 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v29 = v61;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v60 = v29;
      if (v28 != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
      {
        if (v28 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          uint64_t v27 = 0;
        }
        v62[0] = v27;
        if (v28 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          --*(_DWORD *)(a2 + 120);
          uint64_t v51 = v64;
          Int = (mlir *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v62);
          unint64_t ConstantAffineMap = mlir::Builder::getConstantAffineMap(v9, Int, v53);
          uint64_t v55 = mlir::AffineMapAttr::get(ConstantAffineMap);
          mlir::NamedAttribute::NamedAttribute(&v65, v51, v55);
          uint64_t v17 = v65;
          uint64_t v18 = v66;
          uint64_t v19 = a2 + 112;
LABEL_12:
          mlir::NamedAttrList::push_back(v19, v17, v18);
          uint64_t v20 = 1;
          uint64_t v21 = v74;
          if (v74 == v76) {
            return v20;
          }
          goto LABEL_64;
        }
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
        v62[0] = "expected valid affine map representation for loop bounds";
        __int16 v63 = 259;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a3 + 24))(&v65, a3, v30, v62);
        uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
        if (v65) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
        }
        if (!v73) {
          goto LABEL_63;
        }
        uint64_t v31 = (void **)__p;
        if (__p)
        {
          unint64_t v32 = v72;
          BOOL v33 = __p;
          if (v72 != __p)
          {
            do
              unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            BOOL v33 = __p;
          }
          unsigned int v72 = v31;
          operator delete(v33);
        }
        uint64_t v34 = v69;
        if (!v69) {
          goto LABEL_52;
        }
        uint64_t v35 = v70;
        uint64_t v36 = v69;
        if (v70 == v69) {
          goto LABEL_51;
        }
        do
        {
          int v38 = (void *)*--v35;
          uint64_t v37 = v38;
          *uint64_t v35 = 0;
          if (v38) {
            operator delete[](v37);
          }
        }
        while (v35 != v34);
        goto LABEL_50;
      }
      int v46 = *(_DWORD *)(a2 + 24);
      int v59 = 0;
      if (mlir::affine::parseDimAndSymbolList(a3, a2 + 16, &v59))
      {
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v60);
        int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        if (NumDims == v59)
        {
          int v48 = *(_DWORD *)(a2 + 24) - v46;
          if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims == v48)
          {
            uint64_t v20 = 1;
            if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) < 2 || v8) {
              goto LABEL_63;
            }
            if (a1) {
              __int16 v49 = "lower loop bound affine map with multiple results requires 'max' prefix";
            }
            else {
              __int16 v49 = "upper loop bound affine map with multiple results requires 'min' prefix";
            }
            v62[0] = v49;
            __int16 v63 = 259;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a3 + 24))(&v65, a3, v22, v62);
LABEL_70:
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v65);
            uint64_t v21 = v74;
            if (v74 == v76) {
              return v20;
            }
            goto LABEL_64;
          }
          uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
          uint64_t v57 = "symbol operand count and affine map symbol count must match";
        }
        else
        {
          uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
          uint64_t v57 = "dim operand count and affine map dim count must match";
        }
        v62[0] = v57;
        __int16 v63 = 259;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a3 + 24))(&v65, a3, v56, v62);
        goto LABEL_70;
      }
    }
LABEL_62:
    uint64_t v20 = 0;
    goto LABEL_63;
  }
  if (v75 == 1)
  {
    uint64_t v11 = v74;
    uint64_t v12 = mlir::Builder::getIndexType(v9, v10);
    if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a3 + 696))(a3, v11, v12, a2 + 16))
    {
      unint64_t SymbolIdentityMap = mlir::Builder::getSymbolIdentityMap(v9, v13, v14);
      uint64_t v16 = mlir::AffineMapAttr::get(SymbolIdentityMap);
      mlir::NamedAttribute::NamedAttribute(&v65, v64, v16);
      uint64_t v17 = v65;
      uint64_t v18 = v66;
      uint64_t v19 = a2 + 112;
      goto LABEL_12;
    }
    goto LABEL_62;
  }
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  v62[0] = "expected only one loop bound operand";
  __int16 v63 = 259;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a3 + 24))(&v65, a3, v39, v62);
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
  if (v65) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
  }
  if (v73)
  {
    int v40 = (void **)__p;
    if (__p)
    {
      int v41 = v72;
      unint64_t v42 = __p;
      if (v72 != __p)
      {
        do
          int v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unint64_t v42 = __p;
      }
      unsigned int v72 = v40;
      operator delete(v42);
    }
    uint64_t v34 = v69;
    if (!v69)
    {
LABEL_52:
      if (v67 != &v68)
      {
        free(v67);
        uint64_t v21 = v74;
        if (v74 == v76) {
          return v20;
        }
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    __int16 v43 = v70;
    uint64_t v36 = v69;
    if (v70 == v69)
    {
LABEL_51:
      uint64_t v70 = v34;
      operator delete(v36);
      goto LABEL_52;
    }
    do
    {
      char v45 = (void *)*--v43;
      char v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v34);
LABEL_50:
    uint64_t v36 = v69;
    goto LABEL_51;
  }
LABEL_63:
  uint64_t v21 = v74;
  if (v74 != v76) {
LABEL_64:
  }
    free(v21);
  return v20;
}

uint64_t mlir::affine::AffineForOp::print(mlir::affine::AffineForOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  uint64_t v6 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void, void, void, uint64_t))(*(void *)a2 + 152))(a2, **(void **)(v7 + 48), 0, 0, 1);
  char v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v13 = v11 + 64;
  uint64_t v12 = v14;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v13 = 0;
  }
  if ((v10 & 0x800000) != 0) {
    uint64_t v15 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  printBound(v12, v15, *(unsigned int *)(v13 + 24), "max", (uint64_t)a2);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (_DWORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 3uLL)
  {
    *uint64_t v17 = 544175136;
    *((void *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, " to ", 4uLL);
  }
  unint64_t v18 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v19 = *(void *)this + 16 * ((v18 >> 23) & 1) + 64;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(unsigned int *)(v19 + 24);
  int v22 = *(_DWORD *)(v19 + 28);
  if ((v18 & 0x800000) != 0) {
    uint64_t v23 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v23 = 0;
  }
  printBound(v20, v23 + 32 * v21, (v22 + v21) - v21, "min", (uint64_t)a2);
  unint64_t v24 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v24 = 0;
  }
  BOOL v78 = *(const char **)(v24 + 8);
  mlir::IntegerAttr::getValue(&v78, (llvm::APInt *)&__p);
  if (v81 > 0x40)
  {
    unint64_t v25 = *(void *)__p;
    operator delete[](__p);
    if (v25 == 1) {
      goto LABEL_37;
    }
  }
  else if ((uint64_t)((void)__p << -(uint64_t)v81) >> -(uint64_t)v81 == 1)
  {
    goto LABEL_37;
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = *((void *)v26 + 4);
  if ((unint64_t)(*((void *)v26 + 3) - v27) > 5)
  {
    *(_WORD *)(v27 + 4) = 8304;
    *(_DWORD *)uint64_t v27 = 1702130464;
    *((void *)v26 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v26, " step ", 6uLL);
  }
  unint64_t v28 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v28 = 0;
  }
  BOOL v78 = *(const char **)(v28 + 8);
  mlir::IntegerAttr::getValue(&v78, (llvm::APInt *)&__p);
  if (v81 > 0x40)
  {
    unint64_t v29 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    unint64_t v29 = (uint64_t)((void)__p << -(uint64_t)v81) >> -(uint64_t)v81;
  }
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v30, v29);
LABEL_37:
  int NumIterOperands = mlir::affine::AffineForOp::getNumIterOperands(this);
  if (!NumIterOperands) {
    goto LABEL_62;
  }
  unint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = *((void *)v32 + 4);
  if ((unint64_t)(*((void *)v32 + 3) - v33) > 0xA)
  {
    *(_DWORD *)(v33 + 7) = 678651762;
    *(void *)uint64_t v33 = *(void *)" iter_args(";
    *((void *)v32 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v32, " iter_args(", 0xBuLL);
  }
  unint64_t v34 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v35 = *(void *)(((*(void *)this + 16 * ((v34 >> 23) & 1) + 64 + ((v34 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v35) {
    uint64_t v36 = v35 - 8;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = *(void *)(v36 + 48);
  uint64_t v38 = (*(void *)(v36 + 56) - v37) >> 3;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v39 = (_DWORD *)(*(void *)this + 16 * ((v34 >> 23) & 1) + 64);
  }
  else {
    uint64_t v39 = 0;
  }
  if ((v34 & 0x800000) != 0)
  {
    uint64_t v40 = *(void *)(*(void *)this + 72);
    if (v38 != 1)
    {
LABEL_49:
      int v41 = v39[8];
      if (v41)
      {
        uint64_t v42 = (v39[7] + v39[6]);
        uint64_t v43 = *(void *)(v40 + 32 * v42 + 24);
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v37 + 8));
        char v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v45 = *((void *)v44 + 4);
        if ((unint64_t)(*((void *)v44 + 3) - v45) > 2)
        {
          *(unsigned char *)(v45 + 2) = 32;
          *(_WORD *)uint64_t v45 = 15648;
          *((void *)v44 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v44, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v43);
        if (v38 != 2)
        {
          uint64_t v66 = (v41 + v42);
          char v67 = (void *)(v37 + 16);
          uint64_t v68 = 8 * v38 - 16;
          uint64_t v69 = (uint64_t *)(v40 + 32 * v42 + 56);
          uint64_t v70 = ~v42 + v66;
          do
          {
            if (!v70) {
              break;
            }
            uint64_t v71 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
            unsigned int v72 = (_WORD *)*((void *)v71 + 4);
            if (*((void *)v71 + 3) - (void)v72 > 1uLL)
            {
              *unsigned int v72 = 8236;
              *((void *)v71 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v71, ", ", 2uLL);
            }
            uint64_t v73 = *v69;
            (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *v67);
            unint64_t v74 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
            uint64_t v75 = *((void *)v74 + 4);
            if ((unint64_t)(*((void *)v74 + 3) - v75) > 2)
            {
              *(unsigned char *)(v75 + 2) = 32;
              *(_WORD *)uint64_t v75 = 15648;
              *((void *)v74 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v74, " = ", 3uLL);
            }
            (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v73);
            ++v67;
            v69 += 4;
            --v70;
            v68 -= 8;
          }
          while (v68);
        }
      }
    }
  }
  else
  {
    uint64_t v40 = 0;
    if (v38 != 1) {
      goto LABEL_49;
    }
  }
  int v46 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v47 = *((void *)v46 + 4);
  if ((unint64_t)(*((void *)v46 + 3) - v47) > 5)
  {
    *(_WORD *)(v47 + 4) = 10272;
    *(_DWORD *)uint64_t v47 = 1043144745;
    *((void *)v46 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v46, ") -> (", 6uLL);
  }
  uint64_t v48 = *(unsigned int *)(*(void *)this + 36);
  __int16 v49 = (const char *)(*(void *)this - 16);
  if (!v48) {
    __int16 v49 = 0;
  }
  BOOL v78 = v49;
  uint64_t v79 = v48;
  mlir::OperandRange::getTypes((uint64_t *)&v78, (uint64_t *)&__p);
  BOOL v78 = ", ";
  uint64_t v79 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)__p, v81, AttrData, v83, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v78);
  uint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v51 = (unsigned char *)*((void *)v50 + 4);
  if (*((unsigned char **)v50 + 3) == v51)
  {
    llvm::raw_ostream::write(v50, ")", 1uLL);
  }
  else
  {
    *uint64_t v51 = 41;
    ++*((void *)v50 + 4);
  }
LABEL_62:
  __int16 v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v53 = (unsigned char *)*((void *)v52 + 4);
  if ((unint64_t)v53 >= *((void *)v52 + 3))
  {
    llvm::raw_ostream::write(v52, 32);
    uint64_t v54 = *(void *)this;
    unint64_t v55 = *(unsigned int *)(*(void *)this + 44);
    if ((v55 & 0x7FFFFF) != 0) {
      goto LABEL_64;
    }
  }
  else
  {
    *((void *)v52 + 4) = v53 + 1;
    *char v53 = 32;
    uint64_t v54 = *(void *)this;
    unint64_t v55 = *(unsigned int *)(*(void *)this + 44);
    if ((v55 & 0x7FFFFF) != 0)
    {
LABEL_64:
      unint64_t v56 = ((v54 + 16 * ((v55 >> 23) & 1) + ((v55 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v54 + 40);
      goto LABEL_67;
    }
  }
  unint64_t v56 = 0;
LABEL_67:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v56, 0, NumIterOperands != 0, 0);
  uint64_t v57 = *(mlir::Operation **)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    std::string __p = (void *)mlir::Operation::getAttrDictionary(v57);
    p_p = &__p;
  }
  else
  {
    p_p = (void **)((char *)v57 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_p);
  uint64_t v61 = v60;
  BOOL v78 = **(const char ***)(*(void *)(*(void *)this + 48) + 96);
  std::string __p = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v78);
  uint64_t v81 = v62;
  uint64_t v77 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v77);
  uint64_t v83 = v63;
  uint64_t v76 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8);
  uint64_t v84 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v76);
  uint64_t v85 = v64;
  int v86 = "operandSegmentSizes";
  uint64_t v87 = 19;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void **, uint64_t))(*(void *)a2 + 192))(a2, Value, v61, &__p, 4);
}

llvm::raw_ostream *printBound(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v23 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v23);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) != 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    if (a4)
    {
      uint64_t v11 = (llvm::raw_ostream *)v10;
      size_t v12 = strlen(a4);
      uint64_t v13 = (void *)*((void *)v11 + 4);
      if (v12 <= *((void *)v11 + 3) - (void)v13)
      {
        if (v12)
        {
          memcpy(v13, a4, v12);
          *((void *)v11 + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(v11, a4, v12);
      }
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if ((unint64_t)v15 >= *((void *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((void *)v14 + 4) = v15 + 1;
      *uint64_t v15 = 32;
    }
    goto LABEL_17;
  }
  uint64_t v9 = mlir::AffineMap::getResult((mlir::AffineMap *)&Value, 0);
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value)
    || mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value)
    || ((v24 = v9, mlir::AffineExpr::getKind((mlir::AffineExpr *)&v24) != 5) ? (uint64_t v18 = 0) : (uint64_t v18 = v9),
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, v18),
        (uint64_t v21 = v24) == 0))
  {
    if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value)
      || mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) != 1)
    {
      goto LABEL_17;
    }
    uint64_t v24 = v9;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v24) == 7)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, v9);
      if (!v24) {
        goto LABEL_17;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v24, 0);
      if (!v24)
      {
LABEL_17:
        (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 40))(a5, v23);
        int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
        return printDimAndSymbolList(a2, 0, a2, a3, NumDims, a5);
      }
    }
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 160))(a5, *(void *)(a2 + 24));
  }
  unint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
  return llvm::raw_ostream::operator<<(v20, LHS);
}

void mlir::affine::AffineForOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.for", 10, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC99B388;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AffineForEmptyLoopFolder]";
  unint64_t v39 = 97;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

void mlir::affine::AffineForOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v57[2] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (!v7) {
      goto LABEL_12;
    }
    if (TrivialConstantTripCount)
    {
      uint64_t v9 = *a1;
      unint64_t v10 = *(unsigned int *)(*a1 + 44);
      if ((v10 & 0x7FFFFF) != 0)
      {
        uint64_t v11 = (v10 >> 23) & 1;
        uint64_t v12 = (v10 >> 21) & 0x7F8;
        uint64_t v13 = *(unsigned int *)(v9 + 40);
        unint64_t v14 = ((v9 + 16 * v11 + v12 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v13;
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v13 = *(unsigned int *)(v9 + 40);
        uint64_t v11 = (v10 >> 23) & 1;
        uint64_t v12 = (v10 >> 21) & 0x7F8;
      }
      uint64_t v43 = *(void *)(((v9 + 16 * v11 + v12 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v13 + 8);
      if (v43) {
        uint64_t v44 = v43 - 8;
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t v45 = *(void *)(v44 + 48);
      unint64_t v46 = ((*(void *)(v44 + 56) - v45) >> 3) - 1;
      unint64_t v56 = v14;
      uint64_t v23 = (char *)&v56;
      mlir::ValueRange::ValueRange(v57, v45 + 8, v46);
      uint64_t v24 = *(unsigned int *)(a3 + 8);
      unint64_t v25 = *(void *)a3;
      if (v24 < *(_DWORD *)(a3 + 12)) {
        goto LABEL_35;
      }
LABEL_37:
      unint64_t v47 = v24 + 1;
      BOOL v48 = v25 + 24 * v24 > (unint64_t)&v56;
      if (v25 <= (unint64_t)&v56 && v48)
      {
        char v53 = (char *)&v57[-1] - v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v47, 24);
        unint64_t v25 = *(void *)a3;
        uint64_t v23 = &v53[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v47, 24);
        unint64_t v25 = *(void *)a3;
        uint64_t v23 = (char *)&v56;
      }
LABEL_35:
      uint64_t v40 = v25 + 24 * *(unsigned int *)(a3 + 8);
      long long v41 = *(_OWORD *)v23;
      uint64_t v42 = *((void *)v23 + 2);
      goto LABEL_36;
    }
LABEL_14:
    unint64_t v21 = *(unsigned int *)(*a1 + 36);
    if (v21) {
      uint64_t v22 = *a1 - 16;
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v56 = 0;
    uint64_t v23 = (char *)&v56;
    mlir::ValueRange::ValueRange(v57, v22, v21);
    uint64_t v24 = *(unsigned int *)(a3 + 8);
    unint64_t v25 = *(void *)a3;
    if (v24 < *(_DWORD *)(a3 + 12)) {
      goto LABEL_35;
    }
    goto LABEL_37;
  }
  if (v7) {
    BOOL v8 = TrivialConstantTripCount == 1;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v15 = *a1;
  unint64_t v16 = *(unsigned int *)(*a1 + 44);
  if ((v16 & 0x7FFFFF) != 0)
  {
    uint64_t v17 = (v16 >> 23) & 1;
    uint64_t v18 = (v16 >> 21) & 0x7F8;
    uint64_t v19 = *(unsigned int *)(v15 + 40);
    unint64_t v20 = ((v15 + 16 * v17 + v18 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v19;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v19 = *(unsigned int *)(v15 + 40);
    uint64_t v17 = (v16 >> 23) & 1;
    uint64_t v18 = (v16 >> 21) & 0x7F8;
  }
  uint64_t v26 = *(void *)(((v15 + 16 * v17 + v18 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v19 + 8);
  if (v26) {
    uint64_t v27 = v26 - 8;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(void *)(v27 + 48);
  unint64_t v29 = ((*(void *)(v27 + 56) - v28) >> 3) - 1;
  unint64_t v56 = v20;
  uint64_t v30 = (char *)&v56;
  mlir::ValueRange::ValueRange(v57, v28 + 8, v29);
  uint64_t v31 = *(unsigned int *)(a3 + 8);
  unint64_t v32 = *(void *)a3;
  if (v31 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v49 = v31 + 1;
    BOOL v50 = v32 + 24 * v31 > (unint64_t)&v56;
    if (v32 <= (unint64_t)&v56 && v50)
    {
      uint64_t v54 = (char *)&v57[-1] - v32;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v49, 24);
      unint64_t v32 = *(void *)a3;
      long long v33 = &v54[*(void *)a3];
      goto LABEL_25;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v49, 24);
    unint64_t v32 = *(void *)a3;
  }
  long long v33 = (char *)&v56;
LABEL_25:
  uint64_t v34 = v32 + 24 * *(unsigned int *)(a3 + 8);
  long long v35 = *(_OWORD *)v33;
  *(void *)(v34 + 16) = *((void *)v33 + 2);
  *(_OWORD *)uint64_t v34 = v35;
  ++*(_DWORD *)(a3 + 8);
  unint64_t v36 = *(unsigned int *)(*a1 + 36);
  if (v36) {
    uint64_t v37 = *a1 - 16;
  }
  else {
    uint64_t v37 = 0;
  }
  unint64_t v56 = 0;
  mlir::ValueRange::ValueRange(v57, v37, v36);
  uint64_t v38 = *(unsigned int *)(a3 + 8);
  unint64_t v39 = *(void *)a3;
  if (v38 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v51 = v38 + 1;
    BOOL v52 = v39 + 24 * v38 > (unint64_t)&v56;
    if (v39 <= (unint64_t)&v56 && v52)
    {
      unint64_t v55 = (char *)&v57[-1] - v39;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v51, 24);
      unint64_t v39 = *(void *)a3;
      uint64_t v30 = &v55[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v51, 24);
      unint64_t v39 = *(void *)a3;
      uint64_t v30 = (char *)&v56;
    }
  }
  uint64_t v40 = v39 + 24 * *(unsigned int *)(a3 + 8);
  long long v41 = *(_OWORD *)v30;
  uint64_t v42 = *((void *)v30 + 2);
LABEL_36:
  *(void *)(v40 + 16) = v42;
  *(_OWORD *)uint64_t v40 = v41;
  ++*(_DWORD *)(a3 + 8);
}

unint64_t anonymous namespace'::getTrivialConstantTripCount(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    unint64_t v3 = a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v13 = *(void *)(v3 + 8);
  mlir::IntegerAttr::getValue(&v13, (llvm::APInt *)&__p);
  if (v12 > 0x40)
  {
    uint64_t v4 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    uint64_t v4 = (uint64_t)((void)__p << -(uint64_t)v12) >> -(uint64_t)v12;
  }
  std::string __p = *(void **)(v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p)) {
    return 0;
  }
  unint64_t v5 = HIBYTE(*(_DWORD *)(a1 + 44)) ? v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1) : 0;
  std::string __p = *(void **)(v5 + 16);
  std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p) || v4 < 1) {
    return 0;
  }
  std::string __p = *(void **)(v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1));
  std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  SingleConstantuint64_t Result = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v7 = v2 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  }
  else {
    uint64_t v7 = 0;
  }
  std::string __p = *(void **)(v7 + 16);
  std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  uint64_t v8 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
  if (v8 - SingleConstantResult < 1) {
    return 0;
  }
  else {
    return (v4 + v8 - SingleConstantResult - 1) / (unint64_t)v4;
  }
}

uint64_t mlir::affine::AffineForOp::fold(void **a1, uint64_t a2, uint64_t a3)
{
  v101[4] = *MEMORY[0x1E4F143B8];
  __int16 v96 = *a1;
  v95[0] = (uint64_t *)&v96;
  uint64_t Value = (void *)*((void *)v96 + 2 * (((unint64_t)*((unsigned int *)v96 + 11) >> 23) & 1) + 8);
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  BOOL v4 = !mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value)
    && foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(v95, 1) != 0;
  unint64_t v5 = (char *)v96 + 16 * (((unint64_t)*((unsigned int *)v96 + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)v96 + 11))) {
    unint64_t v5 = 0;
  }
  uint64_t Value = (void *)*((void *)v5 + 2);
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value)
    && foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(v95, 0))
  {
    BOOL v4 = 1;
  }
  unint64_t v6 = *a1;
  uint64_t v93 = v6;
  unint64_t v7 = v6[11];
  uint64_t v8 = (char *)(v6 + 16);
  unint64_t v9 = (v7 >> 23) & 1;
  uint64_t v10 = (uint64_t)&v6[4 * v9 + 16];
  if (!HIBYTE(v6[11])) {
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(unsigned int *)(v10 + 24);
  if ((v7 & 0x800000) != 0) {
    uint64_t v12 = *((void *)v6 + 9);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t Value = v101;
  uint64_t v100 = 0x400000000;
  if (v11 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v101, v11, 8);
    uint64_t v13 = (char *)Value + 8 * v100;
    if (v11 >= 0xD)
    {
      BOOL v14 = (unint64_t)v13 >= v12 + 32 * v11
         || v12 + 24 >= (unint64_t)Value + 8 * v100 + 8 * v11;
      if (v14)
      {
        uint64_t v15 = v11 & 3;
        if ((v11 & 3) == 0) {
          uint64_t v15 = 4;
        }
        unint64_t v16 = v11 - v15;
        v13 += v16;
        uint64_t v17 = (const double *)(v12 + 88);
        uint64_t v18 = (unsigned long long *)((char *)Value + 8 * v100 + 16);
        unint64_t v19 = v16;
        do
        {
          unint64_t v20 = v17 - 8;
          unsigned long long v21 = (unsigned __int128)vld4q_f64(v20);
          unsigned long long v22 = (unsigned __int128)vld4q_f64(v17);
          *(v18 - 1) = v21;
          *uint64_t v18 = v22;
          v17 += 16;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
        goto LABEL_29;
      }
    }
LABEL_28:
    unint64_t v16 = 0;
LABEL_29:
    unint64_t v23 = v11 - v16;
    uint64_t v24 = (uint64_t *)(v12 + 32 * v16 + 24);
    do
    {
      uint64_t v25 = *v24;
      v24 += 4;
      *v13++ = v25;
      --v23;
    }
    while (v23);
    int v26 = v100;
    unint64_t v7 = v6[11];
    unint64_t v9 = (v7 >> 23) & 1;
    int v27 = v7 & 0x800000;
    goto LABEL_32;
  }
  if (v11)
  {
    uint64_t v13 = v101;
    goto LABEL_28;
  }
  int v26 = 0;
  int v27 = v7 & 0x800000;
LABEL_32:
  LODWORD(v100) = v26 + v11;
  if (BYTE3(v7)) {
    uint64_t v28 = &v8[16 * v9];
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v30 = *((unsigned int *)v28 + 6);
  int v29 = *((_DWORD *)v28 + 7);
  if (v27) {
    uint64_t v31 = *((void *)v6 + 9);
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = (v29 + v30);
  unint64_t v33 = v32 - v30;
  __int16 v96 = v98;
  uint64_t v97 = 0x400000000;
  if ((unint64_t)(v32 - v30) >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v98, v32 - v30, 8);
    uint64_t v34 = v97;
    long long v35 = v96;
    unint64_t v36 = (char *)v96 + 8 * v97;
    if (v33 < 0x13) {
      goto LABEL_52;
    }
LABEL_42:
    uint64_t v37 = v31 + 32 * v30;
    if ((unint64_t)v36 >= v31 + 32 * v32 || v37 + 24 >= (unint64_t)&v35[8 * (v34 + v32 - v30)])
    {
      uint64_t v39 = 4;
      if ((v33 & 3) != 0) {
        uint64_t v39 = v33 & 3;
      }
      unint64_t v40 = v33 - v39;
      v36 += 8 * (v33 - v39);
      long long v41 = (const double *)(v37 + 88);
      uint64_t v42 = (unsigned long long *)&v35[8 * v34 + 16];
      uint64_t v43 = v39 + v30 - v32;
      do
      {
        uint64_t v44 = v41 - 8;
        unsigned long long v45 = (unsigned __int128)vld4q_f64(v44);
        unsigned long long v46 = (unsigned __int128)vld4q_f64(v41);
        *(v42 - 1) = v45;
        *uint64_t v42 = v46;
        v41 += 16;
        v42 += 2;
        v43 += 4;
      }
      while (v43);
      goto LABEL_53;
    }
LABEL_52:
    unint64_t v40 = 0;
LABEL_53:
    uint64_t v47 = v40 + v30 - v32;
    BOOL v48 = (uint64_t *)(32 * v40 + 32 * v30 + v31 + 24);
    do
    {
      uint64_t v49 = *v48;
      v48 += 4;
      *(void *)unint64_t v36 = v49;
      v36 += 8;
      BOOL v14 = __CFADD__(v47++, 1);
    }
    while (!v14);
    int v29 = v97;
    unint64_t v9 = ((unint64_t)v6[11] >> 23) & 1;
    goto LABEL_57;
  }
  if (v29)
  {
    uint64_t v34 = 0;
    long long v35 = v98;
    unint64_t v36 = v98;
    if (v33 < 0x13) {
      goto LABEL_52;
    }
    goto LABEL_42;
  }
LABEL_57:
  LODWORD(v97) = v29 + v33;
  v95[0] = *(uint64_t **)&v8[16 * v9];
  uint64_t v50 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v95);
  uint64_t v92 = v50;
  if (HIBYTE(v6[11])) {
    unint64_t v51 = &v8[16 * (((unint64_t)v6[11] >> 23) & 1)];
  }
  else {
    unint64_t v51 = 0;
  }
  v95[0] = *((uint64_t **)v51 + 2);
  uint64_t v52 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v95);
  unint64_t v91 = v52;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v92, (uint64_t)&Value);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v92, (uint64_t)&Value);
  simplifyMinOrMaxExprWithOperands((mlir::AffineExpr *)&v92, (uint64_t *)Value, v100, 1);
  simplifyMinOrMaxExprWithOperands((mlir::AffineExpr *)&v91, (uint64_t *)v96, v97, 0);
  uint64_t v92 = mlir::removeDuplicateExprs(v92);
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v91, (uint64_t)&v96);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v91, (uint64_t)&v96);
  uint64_t v53 = mlir::removeDuplicateExprs(v91);
  unint64_t v91 = v53;
  BOOL v54 = v92 == v50 && v53 == v52;
  int v55 = !v54;
  if (!v54)
  {
    if (v92 != v50)
    {
      mlir::ValueRange::ValueRange((unint64_t *)v95, (uint64_t)Value, v100);
      mlir::affine::AffineForOp::setLowerBound((uint64_t *)&v93, (uint64_t)v95[0], (uint64_t)v95[1], v92);
      uint64_t v53 = v91;
    }
    if (v53 != v52)
    {
      mlir::ValueRange::ValueRange(v94, (uint64_t)v96, v97);
      mlir::affine::AffineForOp::setUpperBound((uint64_t *)&v93, v94[0], v94[1], v91);
    }
  }
  if (v96 != v98) {
    free(v96);
  }
  if (Value != v101) {
    free(Value);
  }
  uint64_t v56 = v4 | v55;
  if (v58)
  {
    if (!TrivialConstantTripCount)
    {
      int v59 = *a1;
      if (*((_DWORD *)*a1 + 9))
      {
        unint64_t v60 = v59[11];
        uint64_t v61 = &v59[4 * ((v60 >> 23) & 1) + 16];
        if (!HIBYTE(v59[11])) {
          uint64_t v61 = 0;
        }
        int v62 = v61[6];
        int v63 = v61[7];
        int v64 = v61[8];
        if ((v60 & 0x800000) != 0)
        {
          uint64_t v65 = *((void *)v59 + 9);
          uint64_t v66 = (v63 + v62);
          uint64_t v67 = (v64 + v66);
          uint64_t v68 = v65 + 32 * v66;
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = (v63 + v62);
          uint64_t v67 = (v64 + v66);
          uint64_t v68 = 32 * v66;
        }
        unint64_t v69 = v67 - v66;
        unsigned int v70 = 0;
        uint64_t v71 = v65 + 32 * v66;
        *(_DWORD *)(a3 + 8) = 0;
        if (v69 > *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v69, 8);
          unsigned int v70 = *(_DWORD *)(a3 + 8);
        }
        if (v69 || v68 != v71)
        {
          uint64_t v72 = *(void *)a3;
          uint64_t v73 = (uint64_t *)(*(void *)a3 + 8 * v70);
          if (v68 != v71)
          {
            for (uint64_t i = (uint64_t *)(v68 + 24); ; i += 4)
            {
              uint64_t v75 = *i;
              *v73++ = v75 | 4;
            }
          }
          if (v69 > 0xA && ((uint64_t v76 = v70, (unint64_t)v73 >= v68 + 32 * v69) || v68 + 24 >= v72 + 8 * (v69 + v70)))
          {
            uint64_t v78 = v69 & 3;
            if ((v69 & 3) == 0) {
              uint64_t v78 = 4;
            }
            unint64_t v77 = v69 - v78;
            v73 += v77;
            uint64_t v79 = (const double *)(v68 + 88);
            int v80 = (int8x16_t *)(v72 + 8 * v76 + 16);
            unint64_t v81 = v77;
            do
            {
              uint64_t v82 = v79 - 8;
              unsigned long long v83 = (unsigned __int128)vld4q_f64(v82);
              unsigned long long v84 = (unsigned __int128)vld4q_f64(v79);
              int8x16_t v85 = (int8x16_t)vdupq_n_s64(4uLL);
              v80[-1] = vorrq_s8((int8x16_t)v83, v85);
              *int v80 = vorrq_s8((int8x16_t)v84, v85);
              v79 += 16;
              v80 += 2;
              v81 -= 4;
            }
            while (v81);
          }
          else
          {
            unint64_t v77 = 0;
          }
          unint64_t v86 = v69 - v77;
          uint64_t v87 = (uint64_t *)(v68 + 32 * v77 + 24);
          do
          {
            uint64_t v88 = *v87;
            v87 += 4;
            *v73++ = v88 | 4;
            --v86;
          }
          while (v86);
          unsigned int v70 = *(_DWORD *)(a3 + 8);
        }
        *(_DWORD *)(a3 + 8) = v70 + v69;
        return 1;
      }
    }
  }
  return v56;
}

void mlir::affine::AffineForOp::setLowerBound(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (HIBYTE(*(_DWORD *)(*a1 + 44))) {
    unint64_t v9 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)(v9 + 24);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(v8 + 48) + 96) + 8 * *(void *)(*(void *)(v8 + 48) + 104) - 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v8 + 24));
  unint64_t v13 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*a1 + 44))) {
    unint64_t v13 = 0;
  }
  uint64_t v14 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v13 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v18, v11, v14);
  int v19 = 0;
  long long v20 = v18;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v21, v8, 0, v10, &v19, 1);
  mlir::MutableOperandRange::assign((uint64_t)v21, a2, a3);
  if (v22 != v23) {
    free(v22);
  }
  uint64_t v15 = *a1;
  uint64_t v16 = **(void **)(*(void *)(v15 + 48) + 96);
  uint64_t v17 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(v15, v16, v17);
}

void mlir::affine::AffineForOp::setUpperBound(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (HIBYTE(*(_DWORD *)(*a1 + 44))) {
    unint64_t v9 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)(v9 + 24);
  int v11 = *(_DWORD *)(v9 + 28);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v8 + 48) + 96) + 8 * *(void *)(*(void *)(v8 + 48) + 104) - 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v8 + 24));
  unint64_t v14 = *a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*a1 + 44))) {
    unint64_t v14 = 0;
  }
  uint64_t v15 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v19, v12, v15);
  int v20 = 1;
  long long v21 = v19;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v22, v8, v10, v11, &v20, 1);
  mlir::MutableOperandRange::assign((uint64_t)v22, a2, a3);
  if (v23 != v24) {
    free(v23);
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(*(void *)(*(void *)(v16 + 48) + 96) + 16);
  uint64_t v18 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(v16, v17, v18);
}

unint64_t mlir::affine::AffineForOp::getSingleLowerBound(mlir::affine::AffineForOp *this)
{
  v4[0] = *(void *)(*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + 64);
  v4[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v4);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)v4)) {
    return 0;
  }
  v4[0] = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  memset(&v4[1], 0, 24);
  uint64_t Value = *(void *)(*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  SingleConstantuint64_t Result = (void *)mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
  return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v4, SingleConstantResult) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::affine::AffineForOp::getSingleUpperBound(mlir::affine::AffineForOp *this)
{
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  v7[0] = *(void *)(v2 + 16);
  v7[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v7);
  BOOL isSingleConstant = mlir::AffineMap::isSingleConstant((mlir::AffineMap *)v7);
  unint64_t result = 0;
  if (isSingleConstant)
  {
    v7[0] = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
    memset(&v7[1], 0, 24);
    unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v5 = 0;
    }
    uint64_t Value = *(void *)(v5 + 16);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    SingleConstantuint64_t Result = (void *)mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
    return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v7, SingleConstantResult) & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

void mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::GenericProgramPoint **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v138[3] = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (void *)(a2 + 24);
  long long v120 = *(_OWORD *)(a2 + 24);
  uint64_t v15 = *a1;
  uint64_t v16 = *((void *)v15 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v15);
  *unint64_t v14 = v16;
  v14[1] = v17;
  unint64_t v18 = *((unsigned int *)*a1 + 11);
  long long v19 = (_DWORD *)((char *)*a1 + 16 * ((v18 >> 23) & 1) + 64);
  if (!HIBYTE(*((_DWORD *)*a1 + 11))) {
    long long v19 = 0;
  }
  int v20 = v19[6];
  int v21 = v19[7];
  int v22 = v19[8];
  uint64_t v119 = a7;
  int v118 = a5;
  uint64_t v121 = a6;
  if ((v18 & 0x800000) != 0) {
    uint64_t v23 = *((void *)*a1 + 9);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (v21 + v20);
  uint64_t v25 = (v22 + v24);
  unint64_t v26 = v25 - v24;
  unint64_t v130 = v132;
  uint64_t v131 = 0x600000000;
  if ((unint64_t)(v25 - v24) >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v25 - v24, 8);
    uint64_t v27 = v131;
    uint64_t v28 = v130;
    int v29 = (char *)v130 + 8 * v131;
    if (v26 < 0x13) {
      goto LABEL_20;
    }
LABEL_10:
    uint64_t v30 = v23 + 32 * v24;
    BOOL v31 = (unint64_t)v29 >= v23 + 32 * v25 || v30 + 24 >= (unint64_t)&v28[8 * (v27 + v25 - v24)];
    if (v31)
    {
      uint64_t v32 = 4;
      if ((v26 & 3) != 0) {
        uint64_t v32 = v26 & 3;
      }
      unint64_t v33 = v26 - v32;
      v29 += 8 * (v26 - v32);
      uint64_t v34 = (const double *)(v30 + 88);
      long long v35 = (unsigned long long *)&v28[8 * v27 + 16];
      uint64_t v36 = v32 + v24 - v25;
      do
      {
        uint64_t v37 = v34 - 8;
        unsigned long long v38 = (unsigned __int128)vld4q_f64(v37);
        unsigned long long v39 = (unsigned __int128)vld4q_f64(v34);
        *(v35 - 1) = v38;
        *long long v35 = v39;
        v34 += 16;
        v35 += 2;
        v36 += 4;
      }
      while (v36);
LABEL_21:
      uint64_t v40 = v33 + v24 - v25;
      long long v41 = (uint64_t *)(32 * v33 + 32 * v24 + v23 + 24);
      do
      {
        uint64_t v42 = *v41;
        v41 += 4;
        *(void *)int v29 = v42;
        v29 += 8;
        BOOL v31 = __CFADD__(v40++, 1);
      }
      while (!v31);
      LODWORD(v131) = v131 + v26;
      uint64_t v43 = v131;
      unint64_t v44 = a4 + v131;
      if (v44 > HIDWORD(v131)) {
        goto LABEL_25;
      }
      goto LABEL_26;
    }
LABEL_20:
    unint64_t v33 = 0;
    goto LABEL_21;
  }
  if (v22)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v132;
    int v29 = v132;
    if (v26 < 0x13) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  uint64_t v43 = v26;
  LODWORD(v131) = v25 - v24;
  unint64_t v44 = a4 + v26;
  if (v44 > 6)
  {
LABEL_25:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v44, 8);
    uint64_t v43 = v131;
  }
LABEL_26:
  std::string __p = a3;
  uint64_t v128 = 0;
  if (a4)
  {
    uint64_t v45 = 0;
    unsigned long long v46 = (uint64_t *)((char *)v130 + 8 * v43);
    do
    {
      *v46++ = mlir::ValueRange::dereference_iterator(&__p, v45);
      uint64_t v45 = ++v128;
    }
    while (__p != a3 || v45 != a4);
    LODWORD(v43) = v131;
  }
  LODWORD(v131) = v43 + a4;
  BOOL v48 = *a1;
  unint64_t v49 = *((unsigned int *)*a1 + 11);
  uint64_t v50 = (void **)((char *)*a1 + 16 * ((v49 >> 23) & 1) + 64);
  if (HIBYTE(*((_DWORD *)*a1 + 11))) {
    uint64_t v51 = (uint64_t)*a1 + 16 * ((v49 >> 23) & 1) + 64;
  }
  else {
    uint64_t v51 = 0;
  }
  unint64_t v52 = *(unsigned int *)(v51 + 24);
  if ((v49 & 0x800000) != 0) {
    uint64_t v53 = (mlir::GenericProgramPoint **)*((void *)v48 + 9);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v116 = v14;
  BOOL v54 = (mlir::OpBuilder *)(v14 - 2);
  uint64_t v55 = *((void *)v48 + 3);
  unint64_t v135 = v53;
  unint64_t v136 = v52;
  std::string __p = *v50;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  unint64_t v56 = *((unsigned int *)*a1 + 11);
  uint64_t v57 = (uint64_t)*a1 + 16 * ((v56 >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*a1 + 11))) {
    uint64_t v57 = 0;
  }
  uint64_t v58 = *(unsigned int *)(v57 + 24);
  int v59 = *(_DWORD *)(v57 + 28);
  if ((v56 & 0x800000) != 0) {
    uint64_t v60 = *((void *)*a1 + 9);
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v133 = v60 + 32 * v58;
  uint64_t v134 = (v59 + v58) - v58;
  std::string __p = *(void **)(v57 + 16);
  uint64_t v122 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  unint64_t v61 = (unint64_t)*a1 + 16 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*a1 + 11))) {
    unint64_t v61 = 0;
  }
  uint64_t v124 = *(mlir::GenericProgramPoint **)(v61 + 8);
  mlir::IntegerAttr::getValue(&v124, (llvm::APInt *)&__p);
  if (v128 > 0x40)
  {
    uint64_t v62 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    uint64_t v62 = (uint64_t)((void)__p << -(uint64_t)v128) >> -(uint64_t)v128;
  }
  std::string __p = (void *)v62;
  int v63 = mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(v54, v55, (uint64_t)&v135, (unint64_t *)&Value, (uint64_t)&v133, (unint64_t *)&v122, (uint64_t *)&__p, (uint64_t)&v130);
  uint64_t v65 = *((unsigned int *)*a1 + 10);
  unint64_t v64 = *((unsigned int *)*a1 + 11);
  uint64_t v66 = (uint64_t)*a1 + 16 * ((v64 >> 23) & 1);
  uint64_t v124 = v63;
  uint64_t v67 = *(void *)(((v66 + ((v64 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v65 + 8);
  if (v67) {
    uint64_t v68 = (mlir::GenericProgramPoint **)(v67 - 8);
  }
  else {
    uint64_t v68 = 0;
  }
  mlir::Block::getTerminator(v68);
  uint64_t v70 = (uint64_t)v69;
  uint64_t v71 = *(void *)((((unint64_t)v63
                    + 16 * (((unint64_t)*((unsigned int *)v63 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v63 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v63 + 10)
                  + 8);
  if (v71) {
    uint64_t v72 = v71 - 8;
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v73 = *(mlir::GenericProgramPoint ***)(v72 + 48);
  unint64_t v74 = (uint64_t)(*(void *)(v72 + 56) - (void)v73) >> 3;
  uint64_t v75 = a1;
  if (v74 <= a4) {
    uint64_t v76 = v73;
  }
  else {
    uint64_t v76 = &v73[v74 - a4];
  }
  if (v74 >= a4) {
    unint64_t v77 = a4;
  }
  else {
    unint64_t v77 = v74;
  }
  long long v117 = *(_OWORD *)(a2 + 24);
  uint64_t v78 = *((void *)v69 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v69);
  *(void *)(a2 + 24) = v78;
  *(void *)(a2 + 32) = v79;
  uint64_t v133 = *((void *)*v75 + 3);
  unint64_t v135 = v76;
  unint64_t v136 = v77;
  uint64_t v80 = *(void *)(v121 + 24);
  if (!v80)
  {
    uint64_t v108 = (mlir::OpBuilder *)std::__throw_bad_function_call[abi:nn180100]();
    mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(v108, v109, v110, v111, v112, v113, v114, v115);
    return;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v80 + 48))(&__p);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v70);
  if ((*(unsigned char *)(v70 + 46) & 0x80) != 0) {
    int v81 = *(_DWORD *)(v70 + 68);
  }
  else {
    int v81 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v135, v70, 0, v81, 0, 0);
  mlir::ValueRange::ValueRange((unint64_t *)&v133, (uint64_t)__p, v128);
  mlir::MutableOperandRange::append((uint64_t)&v135, v133, v134);
  if (v137 != v138) {
    free(v137);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v70);
  if (__p != &v129) {
    free(__p);
  }
  if ((void)v117)
  {
    *(_OWORD *)uint64_t v116 = v117;
  }
  else
  {
    void *v116 = 0;
    v116[1] = 0;
  }
  uint64_t v82 = *(void *)((((unint64_t)*v75
                    + 16 * (((unint64_t)*((unsigned int *)*v75 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*v75 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*v75 + 10)
                  + 8);
  if (v82) {
    uint64_t v83 = v82 - 8;
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v84 = *(void *)((((unint64_t)v63
                    + 16 * (((unint64_t)*((unsigned int *)v63 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v63 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v63 + 10)
                  + 8);
  if (v84) {
    uint64_t v85 = v84 - 8;
  }
  else {
    uint64_t v85 = 0;
  }
  uint64_t v86 = *(void *)(v85 + 48);
  uint64_t v87 = *(void *)(v83 + 48);
  if ((*(void *)(v85 + 56) - v86) >> 3 >= (unint64_t)((unint64_t)(*(void *)(v83 + 56)
                                                                                               - v87) >> 3))
    unint64_t v88 = ((unint64_t)(*(void *)(v83 + 56) - v87) >> 3);
  else {
    unint64_t v88 = (*(void *)(v85 + 56) - v86) >> 3;
  }
  mlir::ValueRange::ValueRange(v126, v86, v88);
  mlir::RewriterBase::mergeBlocks(a2, v83, v85, v126[0], v126[1]);
  if (v118)
  {
    std::string __p = a3;
    uint64_t v128 = 0;
    uint64_t v129 = (uint64_t **)v76;
    if (a4)
    {
      if (v77)
      {
        uint64_t v89 = 0;
        do
        {
          uint64_t v90 = (uint64_t **)mlir::ValueRange::dereference_iterator(&__p, v89);
          unint64_t v91 = *v129;
          unint64_t v135 = &v124;
          mlir::RewriterBase::replaceUsesWithIf(a2, v90, v91, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_1>, (uint64_t)&v135);
          uint64_t v89 = v128 + 1;
          uint64_t v92 = v129 + 1;
          uint64_t v128 = v89;
          ++v129;
        }
        while ((v89 != a4 || __p != a3) && v92 != (uint64_t **)&v76[v77]);
        int v63 = v124;
      }
    }
  }
  uint64_t v95 = *v75;
  unsigned int v96 = *((_DWORD *)v63 + 9);
  if (v96) {
    uint64_t v97 = (uint64_t)v63 - 16;
  }
  else {
    uint64_t v97 = 0;
  }
  unsigned int v98 = *((_DWORD *)v95 + 9);
  if (v96 >= v98) {
    unint64_t v99 = v98;
  }
  else {
    unint64_t v99 = v96;
  }
  mlir::ValueRange::ValueRange(v125, v97, v99);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(void *)a2 + 24))(a2, v95, v125[0], v125[1]);
  uint64_t v100 = v124;
  if (v124)
  {
    uint64_t v101 = *((void *)v124 + 6);
    unint64_t v102 = *(void **)(v101 + 16);
    BOOL v103 = v102 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v102 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v104 = 0;
    }
    else {
      uint64_t v104 = *((void *)v124 + 6);
    }
    if (v103)
    {
      std::string __p = *(void **)(v101 + 8);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&__p);
      if (Values)
      {
        uint64_t v107 = v101;
        goto LABEL_108;
      }
    }
    else
    {
      unint64_t v105 = v104 | v101 & 0xFFFFFFFFFFFFFF00;
      uint64_t Values = mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(v105 + 32);
      if (!Values)
      {
        uint64_t Values = *(void *)(v105 + 24);
        uint64_t v107 = *((void *)v100 + 6);
LABEL_108:
        uint64_t Values = mlir::Dialect::getRegisteredInterfaceForOp<mlir::LoopLikeOpInterface>(Values, v107);
      }
    }
  }
  else
  {
    uint64_t Values = 0;
  }
  *(void *)uint64_t v119 = v100;
  *(void *)(v119 + 8) = Values;
  *(unsigned char *)(v119 + 16) = 1;
  if (v130 != v132) {
    free(v130);
  }
  if ((void)v120)
  {
    *(_OWORD *)uint64_t v116 = v120;
  }
  else
  {
    void *v116 = 0;
    v116[1] = 0;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineForOp,mlir::OperandRange,mlir::AffineMap,mlir::OperandRange,mlir::AffineMap,long long,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t *a7, uint64_t a8)
{
  v34[38] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.for", (const unsigned __int8 *)0xA, Context);
  if (!v18)
  {
    __int16 v30 = 1283;
    void v29[2] = (uint64_t)"affine.for";
    v29[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v17);
  mlir::ValueRange::ValueRange(v33, *(void *)a3, *(void *)(a3 + 8));
  unint64_t v19 = *a4;
  mlir::ValueRange::ValueRange(v32, *(void *)a5, *(void *)(a5 + 8));
  unint64_t v20 = *a6;
  uint64_t v21 = *a7;
  mlir::ValueRange::ValueRange((unint64_t *)v31, *(void *)a8, *(unsigned int *)(a8 + 8));
  mlir::affine::AffineForOp::build((uint64_t)a1, (uint64_t)v34, v33[0], v33[1], v19, v32[0], v32[1], v20, v21, v31[0], (uint64_t)v31[1], 0, v25);
  int v22 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((void *)v22 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v23;
}

__n128 mlir::affine::AffineIfOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void v38[2] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v5 = *(unsigned int *)(*a1 + 36);
    uint64_t v6 = *a1 - 16;
    goto LABEL_3;
  }
  if (*(_DWORD *)(a3 + 12) <= 1u) {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 24);
  }
  int v11 = (void *)(((*a1
                   + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*a1 + 40));
  if ((void *)*v11 == v11)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    uint64_t v12 = v11[1];
    if (v12) {
      uint64_t v13 = v12 - 8;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    unint64_t v15 = (*(void *)(v13 + 56) - v14) >> 3;
  }
  unint64_t v37 = ((*a1
        + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *(unsigned int *)(*a1 + 40);
  uint64_t v16 = &v37;
  mlir::ValueRange::ValueRange(v38, v14, v15);
  uint64_t v17 = *(unsigned int *)(a3 + 8);
  unint64_t v18 = *(void *)a3;
  if (v17 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v33 = v17 + 1;
    BOOL v34 = v18 + 24 * v17 > (unint64_t)&v37;
    if (v18 <= (unint64_t)&v37 && v34)
    {
      uint64_t v36 = (char *)&v38[-1] - v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v33, 24);
      unint64_t v18 = *(void *)a3;
      uint64_t v16 = (unint64_t *)&v36[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v33, 24);
      unint64_t v18 = *(void *)a3;
      uint64_t v16 = &v37;
    }
  }
  uint64_t v19 = v18 + 24 * *(unsigned int *)(a3 + 8);
  long long v20 = *(_OWORD *)v16;
  *(void *)(v19 + 16) = v16[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v21 = *a1;
  unint64_t v22 = *(unsigned int *)(*a1 + 44);
  if ((v22 & 0x7FFFFF) != 0)
  {
    unint64_t v23 = ((v21 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v21 + 40);
    uint64_t v24 = v23 + 24;
    if (*(void *)(v23 + 24) != v23 + 24) {
      goto LABEL_19;
    }
  }
  else if (MEMORY[0x18] != 24)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 24;
LABEL_19:
    uint64_t v25 = *(void *)(v23 + 32);
    if (v25) {
      uint64_t v26 = v25 - 8;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(void *)(v26 + 48);
    unint64_t v28 = (*(void *)(v26 + 56) - v27) >> 3;
    unint64_t v37 = v24;
    uint64_t v8 = (__n128 *)&v37;
    mlir::ValueRange::ValueRange(v38, v27, v28);
    uint64_t v9 = *(unsigned int *)(a3 + 8);
    unint64_t v10 = *(void *)a3;
    if (v9 >= *(_DWORD *)(a3 + 12)) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  unint64_t v5 = *(unsigned int *)(v21 + 36);
  uint64_t v6 = v21 - 16;
LABEL_3:
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v37 = 0;
  uint64_t v8 = (__n128 *)&v37;
  mlir::ValueRange::ValueRange(v38, v7, v5);
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  unint64_t v10 = *(void *)a3;
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
LABEL_28:
    unint64_t v31 = v9 + 1;
    BOOL v32 = v10 + 24 * v9 > (unint64_t)&v37;
    if (v10 <= (unint64_t)&v37 && v32)
    {
      long long v35 = (char *)&v38[-1] - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31, 24);
      unint64_t v10 = *(void *)a3;
      uint64_t v8 = (__n128 *)&v35[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31, 24);
      unint64_t v10 = *(void *)a3;
      uint64_t v8 = (__n128 *)&v37;
    }
  }
LABEL_26:
  int v29 = (__n128 *)(v10 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v8;
  v29[1].n128_u64[0] = v8[1].n128_u64[0];
  *int v29 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::affine::AffineIfOp::verify(mlir::affine::AffineIfOp *this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"condition", 9);
    if (v4)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_15:
      uint64_t v73 = 0;
      goto LABEL_16;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "condition", 9uLL);
  if (!InherentAttr) {
    goto LABEL_15;
  }
LABEL_4:
  unint64_t v5 = *(void **)(*(void *)InherentAttr + 136);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
    uint64_t v7 = InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v73 = v7;
  if (!v6)
  {
LABEL_16:
    v74[0] = (const void **)"requires an integer set attribute named 'condition'";
    __int16 v75 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v74, (uint64_t)&v76);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
    if (v76) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
    }
    if (v84)
    {
      uint64_t v16 = (void **)__p;
      if (__p)
      {
        uint64_t v17 = v83;
        unint64_t v18 = __p;
        if (v83 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          unint64_t v18 = __p;
        }
        uint64_t v83 = v16;
        operator delete(v18);
      }
      uint64_t v19 = v80;
      if (!v80) {
        goto LABEL_122;
      }
      long long v20 = v81;
      uint64_t v21 = v80;
      if (v81 == v80)
      {
LABEL_121:
        int v81 = v19;
        operator delete(v21);
LABEL_122:
        if (v78 != v79) {
          free(v78);
        }
        return v15;
      }
      do
      {
        unint64_t v23 = (void *)*--v20;
        unint64_t v22 = v23;
        *long long v20 = 0;
        if (v23) {
          operator delete[](v22);
        }
      }
      while (v20 != v19);
LABEL_120:
      uint64_t v21 = v80;
      goto LABEL_121;
    }
    return v15;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    int v8 = *(_DWORD *)(*(void *)this + 68);
    if (v8 == mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value)) {
      goto LABEL_11;
    }
  }
  else if (!mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value))
  {
LABEL_11:
    uint64_t v9 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v10 = *(void *)(v9 + 72);
      uint64_t v11 = *(unsigned int *)(v9 + 68);
      unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v11)
      {
        unint64_t v13 = 0;
        unint64_t v14 = NumDims;
        while (2)
        {
          uint64_t v24 = *(void **)(v10 + 32 * v13 + 24);
          uint64_t v25 = *(void *)this;
          if (v13 < v14)
          {
            do
            {
              uint64_t v26 = *(mlir::Block **)(v25 + 16);
              if (!v26) {
                goto LABEL_30;
              }
              uint64_t v27 = v25;
              uint64_t ParentOp = mlir::Block::getParentOp(v26);
              if (!ParentOp) {
                goto LABEL_30;
              }
              uint64_t v25 = ParentOp;
              {
                uint64_t v76 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
                unint64_t v77 = 83;
                unint64_t v29 = llvm::StringRef::find((uint64_t *)&v76, "DesiredTypeName = ", 0x12uLL, 0);
                if (v77 >= v29) {
                  unint64_t v30 = v29;
                }
                else {
                  unint64_t v30 = v77;
                }
                unint64_t v31 = &v76[v30];
                unint64_t v32 = v77 - v30;
                uint64_t v33 = 18;
                if (v32 < 0x12) {
                  uint64_t v33 = v32;
                }
                unint64_t v34 = v32 - v33;
                if (v34 >= v34 - 1) {
                  uint64_t v35 = v34 - 1;
                }
                else {
                  uint64_t v35 = v34;
                }
                mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
              }
            }
            while (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v25 + 48) + 32))(*(void *)(v25 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
            unsigned long long v46 = *(mlir::Block **)(v27 + 16);
            if (!v46)
            {
LABEL_30:
              if (mlir::affine::isValidDim(v24, 0)) {
                goto LABEL_31;
              }
              goto LABEL_84;
            }
            Parent = (mlir::Block *)mlir::Block::getParent(v46);
            if (mlir::affine::isValidDim(v24, Parent)) {
              goto LABEL_31;
            }
LABEL_84:
            v74[0] = (const void **)"operand cannot be used as a dimension id";
            __int16 v75 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, v74, (uint64_t)&v76);
            char v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
            if (v76) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
            }
            if (!v84) {
              return v50 != 0;
            }
            int v59 = (void **)__p;
            if (__p)
            {
              uint64_t v60 = v83;
              unint64_t v61 = __p;
              if (v83 != __p)
              {
                do
                  uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                unint64_t v61 = __p;
              }
              uint64_t v83 = v59;
              operator delete(v61);
            }
            BOOL v54 = v80;
            if (!v80)
            {
LABEL_100:
              if (v78 != v79) {
                free(v78);
              }
              return v50 != 0;
            }
            uint64_t v62 = v81;
            unint64_t v56 = v80;
            if (v81 == v80)
            {
LABEL_99:
              int v81 = v54;
              operator delete(v56);
              goto LABEL_100;
            }
            do
            {
              unint64_t v64 = (void *)*--v62;
              int v63 = v64;
              *uint64_t v62 = 0;
              if (v64) {
                operator delete[](v63);
              }
            }
            while (v62 != v54);
LABEL_98:
            unint64_t v56 = v80;
            goto LABEL_99;
          }
          do
          {
            uint64_t v36 = *(mlir::Block **)(v25 + 16);
            if (!v36) {
              goto LABEL_69;
            }
            uint64_t v37 = v25;
            uint64_t v38 = mlir::Block::getParentOp(v36);
            if (!v38) {
              goto LABEL_69;
            }
            uint64_t v25 = v38;
            {
              uint64_t v76 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
              unint64_t v77 = 83;
              unint64_t v39 = llvm::StringRef::find((uint64_t *)&v76, "DesiredTypeName = ", 0x12uLL, 0);
              if (v77 >= v39) {
                unint64_t v40 = v39;
              }
              else {
                unint64_t v40 = v77;
              }
              long long v41 = &v76[v40];
              unint64_t v42 = v77 - v40;
              uint64_t v43 = 18;
              if (v42 < 0x12) {
                uint64_t v43 = v42;
              }
              unint64_t v44 = v42 - v43;
              if (v44 >= v44 - 1) {
                uint64_t v45 = v44 - 1;
              }
              else {
                uint64_t v45 = v44;
              }
              mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
            }
          }
          while (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v25 + 48) + 32))(*(void *)(v25 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id));
          BOOL v48 = *(mlir::Block **)(v37 + 16);
          if (v48)
          {
            unint64_t v49 = (mlir::Block *)mlir::Block::getParent(v48);
            if ((mlir::affine::isValidSymbol(v24, v49) & 1) == 0) {
              goto LABEL_70;
            }
          }
          else
          {
LABEL_69:
            if ((mlir::affine::isValidSymbol(v24, 0) & 1) == 0)
            {
LABEL_70:
              v74[0] = (const void **)"operand cannot be used as a symbol";
              __int16 v75 = 259;
              mlir::OpState::emitOpError((uint64_t **)this, v74, (uint64_t)&v76);
              char v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
              if (v76) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
              }
              if (!v84) {
                return v50 != 0;
              }
              uint64_t v51 = (void **)__p;
              if (__p)
              {
                unint64_t v52 = v83;
                uint64_t v53 = __p;
                if (v83 != __p)
                {
                  do
                    unint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                  while (v52 != v51);
                  uint64_t v53 = __p;
                }
                uint64_t v83 = v51;
                operator delete(v53);
              }
              BOOL v54 = v80;
              if (!v80) {
                goto LABEL_100;
              }
              uint64_t v55 = v81;
              unint64_t v56 = v80;
              if (v81 == v80) {
                goto LABEL_99;
              }
              do
              {
                uint64_t v58 = (void *)*--v55;
                uint64_t v57 = v58;
                *uint64_t v55 = 0;
                if (v58) {
                  operator delete[](v57);
                }
              }
              while (v55 != v54);
              goto LABEL_98;
            }
          }
LABEL_31:
          if (++v13 == v11) {
            return 1;
          }
          continue;
        }
      }
    }
    else
    {
      mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    }
    return 1;
  }
  v74[0] = (const void **)"operand count and condition integer set dimension and symbol count must match";
  __int16 v75 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v74, (uint64_t)&v76);
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
  if (v76) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
  }
  if (v84)
  {
    uint64_t v65 = (void **)__p;
    if (__p)
    {
      uint64_t v66 = v83;
      uint64_t v67 = __p;
      if (v83 != __p)
      {
        do
          uint64_t v66 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v66 - 1);
        while (v66 != v65);
        uint64_t v67 = __p;
      }
      uint64_t v83 = v65;
      operator delete(v67);
    }
    uint64_t v19 = v80;
    if (!v80) {
      goto LABEL_122;
    }
    uint64_t v68 = v81;
    uint64_t v21 = v80;
    if (v81 == v80) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v70 = (void *)*--v68;
      unint64_t v69 = v70;
      *uint64_t v68 = 0;
      if (v70) {
        operator delete[](v69);
      }
    }
    while (v68 != v19);
    goto LABEL_120;
  }
  return v15;
}

BOOL mlir::affine::AffineIfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = 0;
  char v4 = (_DWORD *)((char *)a2 + 112);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerSetAttr>(a1, &v32, 0, (uint64_t)"condition", 9, (uint64_t)a2 + 112))return 0; {
  int v31 = 0;
  }
  if (!mlir::affine::parseDimAndSymbolList(a1, (uint64_t)a2 + 16, &v31)) {
    return 0;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (NumDims == v31)
  {
    if (*((_DWORD *)a2 + 6) == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value) + NumDims)
    {
      if ((*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(void *)a1 + 536))(a1, (_DWORD *)a2 + 16))
      {
        llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
        BOOL v6 = (void *)mlir::OperationState::addRegion(a2);
        uint64_t v7 = (void *)mlir::OperationState::addRegion(a2);
        if ((*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v6, 0, 0, 0))
        {
          int v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
          mlir::impl::ensureRegionTerminator(v6, v8, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator);
          if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "else", 4))return (*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(void *)a1 + 456))(a1, v4) != 0; {
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v7, 0, 0, 0))
          }
          {
            uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
            mlir::impl::ensureRegionTerminator(v7, v9, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator);
            return (*(unsigned __int8 (**)(uint64_t, _DWORD *))(*(void *)a1 + 456))(a1, v4) != 0;
          }
        }
      }
      return 0;
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v28[0] = "symbol operand count and integer set symbol count must match";
    __int16 v29 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v33, a1, v21, v28);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    }
    if (v40)
    {
      unint64_t v22 = (void **)__p;
      if (__p)
      {
        unint64_t v23 = v39;
        uint64_t v24 = __p;
        if (v39 != __p)
        {
          do
            unint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          uint64_t v24 = __p;
        }
        unint64_t v39 = v22;
        operator delete(v24);
      }
      uint64_t v16 = v36;
      if (!v36) {
        goto LABEL_43;
      }
      uint64_t v25 = v37;
      unint64_t v18 = v36;
      if (v37 == v36)
      {
LABEL_42:
        uint64_t v37 = v16;
        operator delete(v18);
LABEL_43:
        if (v34 != &v35) {
          free(v34);
        }
        return v10;
      }
      do
      {
        uint64_t v27 = (void *)*--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          operator delete[](v26);
        }
      }
      while (v25 != v16);
LABEL_41:
      unint64_t v18 = v36;
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v28[0] = "dim operand count and integer set dim count must match";
    __int16 v29 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v33, a1, v12, v28);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    }
    if (v40)
    {
      unint64_t v13 = (void **)__p;
      if (__p)
      {
        unint64_t v14 = v39;
        uint64_t v15 = __p;
        if (v39 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        unint64_t v39 = v13;
        operator delete(v15);
      }
      uint64_t v16 = v36;
      if (!v36) {
        goto LABEL_43;
      }
      uint64_t v17 = v37;
      unint64_t v18 = v36;
      if (v37 == v36) {
        goto LABEL_42;
      }
      do
      {
        long long v20 = (void *)*--v17;
        uint64_t v19 = v20;
        *uint64_t v17 = 0;
        if (v20) {
          operator delete[](v19);
        }
      }
      while (v17 != v16);
      goto LABEL_41;
    }
  }
  return v10;
}

uint64_t mlir::affine::AffineIfOp::print(mlir::affine::AffineIfOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"condition", 9), v6))
  {
    if (InherentAttr) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(v4 + 56, "condition", 9uLL);
    if (InherentAttr)
    {
LABEL_4:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
        uint64_t v7 = InherentAttr;
      }
      else {
        uint64_t v7 = 0;
      }
      goto LABEL_9;
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v36 = v7;
  int v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, " ", 1uLL);
  }
  else
  {
    unsigned char *v9 = 32;
    ++*((void *)v8 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 40))(a2, v7);
  uint64_t v10 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    uint64_t v11 = *(void *)(v10 + 72);
    uint64_t v12 = *(unsigned int *)(v10 + 68);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  uint64_t Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  printDimAndSymbolList(v11, 0, v11, v12, NumDims, (uint64_t)a2);
  uint64_t v14 = *(unsigned int *)(*(void *)this + 36);
  uint64_t v15 = *(void *)this - 16;
  if (!v14) {
    uint64_t v15 = 0;
  }
  v37[0] = v15;
  v37[1] = v14;
  mlir::OperandRange::getTypes(v37, (uint64_t *)&Value);
  if (Value != v34 || v33 != v35) {
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, (uint64_t *)&Value);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
    uint64_t v18 = *(void *)this;
    unint64_t v19 = *(unsigned int *)(*(void *)this + 44);
    if ((v19 & 0x7FFFFF) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 32;
    uint64_t v18 = *(void *)this;
    unint64_t v19 = *(unsigned int *)(*(void *)this + 44);
    if ((v19 & 0x7FFFFF) != 0)
    {
LABEL_21:
      unint64_t v20 = ((v18 + 16 * ((v19 >> 23) & 1) + ((v19 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v18 + 40);
      goto LABEL_24;
    }
  }
  unint64_t v20 = 0;
LABEL_24:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v20, 0, *(_DWORD *)(v18 + 36) != 0, 0);
  uint64_t v21 = *(unsigned int **)this;
  unint64_t v22 = *(unsigned int *)(*(void *)this + 44);
  if ((v22 & 0x7FFFFF) != 0)
  {
    unint64_t v23 = (((unint64_t)&v21[4 * ((v22 >> 23) & 1) + 17] + ((v22 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v21[10];
    uint64_t v25 = *(void *)(v23 + 24);
    uint64_t v24 = v23 + 24;
    if (v25 == v24) {
      goto LABEL_26;
    }
LABEL_29:
    uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v28 = *((void *)v27 + 4);
    if ((unint64_t)(*((void *)v27 + 3) - v28) > 5)
    {
      *(_WORD *)(v28 + 4) = 8293;
      *(_DWORD *)uint64_t v28 = 1936483616;
      *((void *)v27 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v27, " else ", 6uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v24, 0, *(_DWORD *)(*(void *)this + 36) != 0, 0);
    uint64_t v21 = *(unsigned int **)this;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      goto LABEL_27;
    }
LABEL_33:
    uint64_t Value = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v21);
    p_uint64_t Value = (mlir::ArrayAttr *)&Value;
    goto LABEL_34;
  }
  uint64_t v24 = 24;
  if (MEMORY[0x18] != 24) {
    goto LABEL_29;
  }
LABEL_26:
  if (BYTE3(v22)) {
    goto LABEL_33;
  }
LABEL_27:
  p_uint64_t Value = (mlir::ArrayAttr *)(v21 + 14);
LABEL_34:
  uint64_t v29 = mlir::ArrayAttr::getValue(p_Value);
  uint64_t Value = "condition";
  uint64_t v33 = 9;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, v29, v30, &Value, 1);
}

uint64_t mlir::affine::AffineIfOp::fold(uint64_t *a1)
{
  v69[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (*(unsigned char *)(*a1 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"condition", 9);
    if (v4)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_8:
      unint64_t v5 = 0;
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "condition", 9uLL);
  if (!InherentAttr) {
    goto LABEL_8;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
    unint64_t v5 = (void *)InherentAttr;
  }
  else {
    unint64_t v5 = 0;
  }
LABEL_9:
  uint64_t v67 = v5;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
  uint64_t v6 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) == 0)
  {
    LODWORD(v8) = 0;
    int v22 = 0;
    uint64_t v67 = v69;
    HIDWORD(v68) = 4;
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = *(unsigned int *)(v6 + 68);
  uint64_t v67 = v69;
  uint64_t v68 = 0x400000000;
  if (v8 < 5)
  {
    if (!v8)
    {
      int v22 = 0;
      goto LABEL_29;
    }
    uint64_t v9 = v69;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v8, 8);
    uint64_t v9 = (char *)v67 + 8 * v68;
    if (v8 >= 0xD
      && ((unint64_t)v9 >= v7 + 32 * v8 || v7 + 24 >= (unint64_t)v67 + 8 * v68 + 8 * v8))
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      v9 += v12;
      unint64_t v13 = (const double *)(v7 + 88);
      uint64_t v14 = (unsigned long long *)((char *)v67 + 8 * v68 + 16);
      unint64_t v15 = v12;
      do
      {
        uint64_t v16 = v13 - 8;
        unsigned long long v17 = (unsigned __int128)vld4q_f64(v16);
        unsigned long long v18 = (unsigned __int128)vld4q_f64(v13);
        *(v14 - 1) = v17;
        *uint64_t v14 = v18;
        v13 += 16;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      goto LABEL_26;
    }
  }
  unint64_t v12 = 0;
LABEL_26:
  unint64_t v19 = v8 - v12;
  unint64_t v20 = (uint64_t *)(v7 + 32 * v12 + 24);
  do
  {
    uint64_t v21 = *v20;
    v20 += 4;
    *v9++ = v21;
    --v19;
  }
  while (v19);
  int v22 = v68;
LABEL_29:
  LODWORD(v68) = v22 + v8;
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  uint64_t v25 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  uint64_t v27 = v26;
  uint64_t Context = (void *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&Value);
  uint64_t v62 = mlir::AffineMap::get(NumDims, NumSymbols, v25, v27, Context);
  if (v68)
  {
    uint64_t v29 = v67;
    uint64_t v30 = 8 * v68;
    while (1)
    {
      v63[0] = *v29;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v63);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id) {
          break;
        }
      }
      ++v29;
      v30 -= 8;
      if (!v30) {
        goto LABEL_35;
      }
    }
    composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v62, (uint64_t)&v67);
    int v32 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v62);
    int v33 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v62);
    Results = (mlir::BytecodeWriterConfig *)mlir::AffineMap::getResults((mlir::AffineMap *)&v62);
    uint64_t v36 = v35;
    uint64_t RawData = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)&Value);
    uint64_t Value = mlir::IntegerSet::get(v32, v33, Results, v36, RawData, v38);
  }
LABEL_35:
  mlir::affine::canonicalizeSetAndOperands((mlir::IntegerSet *)&Value, (uint64_t)&v67);
  uint64_t v39 = *a1;
  if (*(unsigned char *)(*a1 + 47) && (uint64_t v40 = mlir::Operation::getInherentAttr(*a1, (uint64_t)"condition", 9), v41))
  {
    if (v40) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v40 = mlir::DictionaryAttr::get(v39 + 56, "condition", 9uLL);
    if (v40)
    {
LABEL_38:
      if (*(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
        uint64_t v42 = v40;
      }
      else {
        uint64_t v42 = 0;
      }
      v63[0] = v42;
      uint64_t v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
      unint64_t v44 = Value;
      if (Value != v43) {
        goto LABEL_42;
      }
      goto LABEL_45;
    }
  }
  v63[0] = 0;
  uint64_t v47 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
  unint64_t v44 = Value;
  if (Value != v47)
  {
LABEL_42:
    uint64_t v45 = v67;
    unint64_t v46 = v68;
    goto LABEL_60;
  }
LABEL_45:
  uint64_t v48 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0)
  {
    uint64_t v49 = *(void *)(v48 + 72);
    uint64_t v50 = *(unsigned int *)(v48 + 68);
    uint64_t v45 = v67;
    unint64_t v46 = v68;
    if (v50 != v68) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v45 = v67;
    unint64_t v46 = v68;
    if (v68) {
      goto LABEL_60;
    }
  }
  if (v46)
  {
    uint64_t v51 = 0;
    unint64_t v52 = (void *)(v49 + 24);
    while (v50 != v51 && v45[v51] == *v52)
    {
      ++v51;
      v52 += 4;
      if (v46 == v51)
      {
        if (((v50 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1 == v50) {
          goto LABEL_56;
        }
        break;
      }
    }
  }
  else if (!v50)
  {
LABEL_56:
    uint64_t v53 = 0;
    if (v45 == v69) {
      return v53;
    }
    goto LABEL_61;
  }
LABEL_60:
  mlir::ValueRange::ValueRange((unint64_t *)&v65, (uint64_t)v45, v46);
  uint64_t v54 = v65;
  unsigned int v55 = v66;
  uint64_t v56 = *a1;
  uint64_t v57 = mlir::IntegerSetAttr::get(v44);
  uint64_t v58 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v56 + 24));
  __int16 v64 = 261;
  v63[0] = "condition";
  v63[1] = 9;
  uint64_t v59 = mlir::StringAttr::get(v58, (mlir::MLIRContext *)v63);
  mlir::Operation::setAttr(v56, v59, v57);
  mlir::Operation::setOperands((uint64_t *)*a1, v54, v55);
  uint64_t v53 = 1;
  uint64_t v45 = v67;
  if (v67 != v69) {
LABEL_61:
  }
    free(v45);
  return v53;
}

void mlir::affine::AffineIfOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  char v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.if", 9, (__int16)v72, a2, 0, 0);
  *(void *)char v4 = &unk_1EC998720;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyDeadElse]";
  unint64_t v73 = 89;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v73;
  }
  uint64_t v11 = &v72[v10];
  unint64_t v12 = v73 - v10;
  if (v73 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v73 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"affine.if", 9, (__int16)v72, a2, 0, 0);
  *(void *)uint64_t v38 = &unk_1EC9993A8;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    char v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  uint64_t v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::AlwaysTrueOrFalseIf]";
  unint64_t v73 = 92;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v73;
  }
  uint64_t v45 = &v72[v44];
  unint64_t v46 = v73 - v44;
  if (v73 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v73 - v44;
  }
  uint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  char v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)char v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    unsigned int v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unsigned int v55 = (char *)operator new(8 * v54);
  uint64_t v56 = &v55[8 * v51];
  uint64_t v57 = &v55[8 * v54];
  *(void *)uint64_t v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  uint64_t v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v62 = &v41[-v61];
    v56 -= v61;
    int v63 = &v55[8 * v51 - 16];
    __int16 v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)__int16 v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)int v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    char v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)char v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    char v41 = (char *)a1[1];
    unint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)unint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

void mlir::affine::AffineLoadOp::build(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  unint64_t v15 = *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = mlir::AffineMapAttr::get(a4);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v18 = 261;
  v17[0] = "map";
  v17[1] = 3;
  uint64_t v12 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v17);
  mlir::NamedAttribute::NamedAttribute(v19, v12, v10);
  mlir::NamedAttrList::push_back(a2 + 112, v19[0], v19[1]);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v15);
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v14) = RHS;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::affine::AffineLoadOp::parse(uint64_t a1, uint64_t a2)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  char v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v14, 0, 24);
  uint64_t v13 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v18;
  uint64_t v17 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v14, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v16, &v13, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v15)&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v14, v15, a2 + 16))
  {
    if (!v17)
    {
LABEL_10:
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v15);
      BOOL v10 = mlir::AsmParser::addTypeToList(a1, RHS, a2 + 64) != 0;
      uint64_t v11 = v16;
      if (v16 == v18) {
        return v10;
      }
      goto LABEL_13;
    }
    uint64_t v7 = (char *)v16;
    uint64_t v8 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8) {
        goto LABEL_10;
      }
    }
  }
  BOOL v10 = 0;
  uint64_t v11 = v16;
  if (v16 != v18) {
LABEL_13:
  }
    free(v11);
  return v10;
}

uint64_t mlir::affine::AffineLoadOp::print(mlir::affine::AffineLoadOp *this, mlir::OpAsmPrinter *a2)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  char v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47))
    {
LABEL_9:
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 91;
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v12 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(v12 + 72);
      unint64_t v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = -1;
    }
    mlir::ValueRange::ValueRange(v25, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v11, v25[0], v25[1]);
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
    uint64_t v17 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_17;
    }
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *uint64_t v16 = 93;
    uint64_t v17 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47))
    {
LABEL_17:
      v24[0] = mlir::Operation::getAttrDictionary(v17);
      __int16 v18 = (mlir::ArrayAttr *)v24;
      goto LABEL_20;
    }
  }
  __int16 v18 = (mlir::Operation *)((char *)v17 + 56);
LABEL_20:
  uint64_t Value = mlir::ArrayAttr::getValue(v18);
  v24[0] = "map";
  v24[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, Value, v20, v24, 1);
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) > 2)
  {
    *(unsigned char *)(v22 + 2) = 32;
    *(_WORD *)uint64_t v22 = 14880;
    *((void *)v21 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v21, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineLoadOp::verify(uint64_t **this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unint64_t v26 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = *(v2 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (v3 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26))
  {
    uint64_t v13 = *this;
    if (!*((unsigned char *)*this + 47)
      || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3), !v15))
    {
      uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v13 + 7), "map", 3uLL);
    }
    if (InherentAttr)
    {
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v16 = InherentAttr;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0)
      {
LABEL_24:
        uint64_t v18 = *(void *)(v17 + 72);
        uint64_t v19 = *(unsigned int *)(v17 + 68);
        uint64_t v20 = v19 - 1;
        uint64_t v21 = v18 + 32;
        int v22 = v19 - 1;
        return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
      }
    }
    uint64_t v20 = -1;
    int v22 = -1;
    uint64_t v21 = 32;
    return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
  }
  uint64_t v24 = (const void **)"result type must match element type of memref";
  __int16 v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v27);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      unint64_t v6 = v33;
      uint64_t v7 = __p;
      if (v33 != __p)
      {
        do
          unint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      long long v33 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v30;
    if (v30)
    {
      unint64_t v9 = v31;
      char v10 = v30;
      if (v31 != v30)
      {
        do
        {
          uint64_t v12 = (void *)*--v9;
          uint64_t v11 = v12;
          void *v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        char v10 = v30;
      }
      uint64_t v31 = v8;
      operator delete(v10);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
  return v4;
}

uint64_t verifyMemoryOpIndexing(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v50 = a5;
  uint64_t v51 = a2;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
  if (v11 == Kind)
  {
    if (mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) == a6)
    {
      Parent = (mlir::Block *)a1;
      while (1)
      {
        uint64_t v13 = (mlir::Block *)*((void *)Parent + 2);
        if (!v13) {
          break;
        }
        unint64_t v14 = Parent;
        uint64_t ParentOp = mlir::Block::getParentOp(v13);
        Parent = (mlir::Block *)ParentOp;
        if (!ParentOp) {
          goto LABEL_39;
        }
        if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48)))
        {
          uint64_t v16 = (mlir::Block *)*((void *)v14 + 2);
          if (v16)
          {
            Parent = (mlir::Block *)mlir::Block::getParent(v16);
            if (!a4) {
              return 1;
            }
LABEL_40:
            for (uint64_t i = a3 + 24; ; i += 32)
            {
              long long v33 = *(void **)i;
              v52[0] = *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!mlir::Type::isIndex((mlir::Type *)v52)) {
                break;
              }
              if ((mlir::affine::isValidDim(v33, Parent) & 1) == 0
                && (mlir::affine::isValidSymbol(v33, Parent) & 1) == 0)
              {
                v47[0] = (const void **)"index must be a dimension or symbol identifier";
                __int16 v48 = 259;
                mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
                uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
                if (v52[0]) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
                }
                if (!v59) {
                  return v17;
                }
                char v34 = (void **)__p;
                if (__p)
                {
                  uint64_t v35 = v58;
                  uint64_t v36 = __p;
                  if (v58 != __p)
                  {
                    do
                      uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
                    while (v35 != v34);
                    uint64_t v36 = __p;
                  }
                  uint64_t v58 = v34;
                  operator delete(v36);
                }
                uint64_t v21 = v55;
                if (!v55) {
                  goto LABEL_75;
                }
                uint64_t v37 = v56;
                unint64_t v23 = v55;
                if (v56 == v55) {
                  goto LABEL_74;
                }
                do
                {
                  unint64_t v39 = (void *)*--v37;
                  uint64_t v38 = v39;
                  *uint64_t v37 = 0;
                  if (v39) {
                    operator delete[](v38);
                  }
                }
                while (v37 != v21);
                goto LABEL_73;
              }
              if (!--a4) {
                return 1;
              }
            }
            v47[0] = (const void **)"index to load must have 'index' type";
            __int16 v48 = 259;
            mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
            uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
            if (v52[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
            }
            if (!v59) {
              return v17;
            }
            unint64_t v40 = (void **)__p;
            if (__p)
            {
              char v41 = v58;
              uint64_t v42 = __p;
              if (v58 != __p)
              {
                do
                  char v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
                while (v41 != v40);
                uint64_t v42 = __p;
              }
              uint64_t v58 = v40;
              operator delete(v42);
            }
            uint64_t v21 = v55;
            if (!v55) {
              goto LABEL_75;
            }
            unint64_t v43 = v56;
            unint64_t v23 = v55;
            if (v56 == v55) {
              goto LABEL_74;
            }
            do
            {
              uint64_t v45 = (void *)*--v43;
              unint64_t v44 = v45;
              void *v43 = 0;
              if (v45) {
                operator delete[](v44);
              }
            }
            while (v43 != v21);
LABEL_73:
            unint64_t v23 = v55;
            goto LABEL_74;
          }
          Parent = 0;
          if (a4) {
            goto LABEL_40;
          }
          return 1;
        }
      }
      Parent = 0;
LABEL_39:
      if (a4) {
        goto LABEL_40;
      }
      return 1;
    }
    v47[0] = (const void **)"expects as many subscripts as affine map inputs";
    __int16 v48 = 259;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
    if (v52[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
    }
    if (v59)
    {
      unint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v58;
        uint64_t v28 = __p;
        if (v58 != __p)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v58 = v26;
        operator delete(v28);
      }
      uint64_t v21 = v55;
      if (v55)
      {
        uint64_t v29 = v56;
        unint64_t v23 = v55;
        if (v56 != v55)
        {
          do
          {
            uint64_t v31 = (void *)*--v29;
            uint64_t v30 = v31;
            *uint64_t v29 = 0;
            if (v31) {
              operator delete[](v30);
            }
          }
          while (v29 != v21);
          goto LABEL_73;
        }
        goto LABEL_74;
      }
LABEL_75:
      if (v53 != &v54) {
        free(v53);
      }
    }
  }
  else
  {
    v47[0] = (const void **)"affine map num results must equal memref rank";
    __int16 v48 = 259;
    mlir::Operation::emitOpError(a1, v47, (uint64_t)v52);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
    if (v52[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
    }
    if (v59)
    {
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v58;
        uint64_t v20 = __p;
        if (v58 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v58 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v55;
      if (v55)
      {
        int v22 = v56;
        unint64_t v23 = v55;
        if (v56 != v55)
        {
          do
          {
            __int16 v25 = (void *)*--v22;
            uint64_t v24 = v25;
            *int v22 = 0;
            if (v25) {
              operator delete[](v24);
            }
          }
          while (v22 != v21);
          goto LABEL_73;
        }
LABEL_74:
        uint64_t v56 = v21;
        operator delete(v23);
      }
      goto LABEL_75;
    }
  }
  return v17;
}

void mlir::affine::AffineLoadOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.load", 11, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC998510;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineLoadOp>]";
  unint64_t v39 = 117;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  unint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::affine::AffineLoadOp::fold(uint64_t *a1)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  if (mlir::memref::foldMemRefCast(*a1, 0))
  {
    if (*(_DWORD *)(*a1 + 36)) {
      uint64_t v2 = *a1 - 16;
    }
    else {
      uint64_t v2 = 0;
    }
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) | 4;
  }
  uint64_t Value = *(void **)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Value);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v5 = DefiningOp;
  unint64_t v3 = 0;
  unint64_t v6 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id) {
    uint64_t v8 = DefiningOp;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v25 = v8;
  if (v7)
  {
    while (1)
    {
      unint64_t v10 = *(mlir::Block **)(v5 + 16);
      if (!v10) {
        break;
      }
      uint64_t ParentOp = mlir::Block::getParentOp(v10);
      if (!ParentOp) {
        break;
      }
      uint64_t v5 = ParentOp;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(ParentOp + 48)))
      {
        uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v25);
        uint64_t v13 = mlir::SymbolTable::lookupSymbolIn(v5, FastmathAttr);
        unint64_t v3 = 0;
        if (!v13) {
          return v3;
        }
        unint64_t v14 = *(void **)(*(void *)(v13 + 48) + 16);
        BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id;
        uint64_t v16 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id ? v13 : 0;
        uint64_t v24 = v16;
        if (!v15) {
          return v3;
        }
        ConstantInituint64_t Value = mlir::memref::GlobalOp::getConstantInitValue((mlir::memref::GlobalOp *)&v24);
        unint64_t v3 = (unint64_t)ConstantInitValue;
        if (!ConstantInitValue) {
          return v3;
        }
        if (!mlir::DenseElementsAttr::classof((uint64_t)ConstantInitValue)) {
          unint64_t v3 = 0;
        }
        unint64_t v23 = v3;
        if (!v3) {
          return v3;
        }
        if (mlir::DenseElementsAttr::classof(v3)) {
          unint64_t v18 = (void *)v3;
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t Value = v18;
        if (v18)
        {
          int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&Value);
          unint64_t v20 = isSplat ? (void *)v3 : 0;
          uint64_t v29 = v20;
          if (isSplat) {
            return mlir::DenseElementsAttr::getSplatValue<mlir::Attribute>((mlir::ArrayAttr *)&v29) & 0xFFFFFFFFFFFFFFFBLL;
          }
        }
        uint64_t Value = *(void **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
        uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
        if (mlir::AffineMap::isConstant((mlir::AffineMap *)&Value))
        {
          uint64_t Value = *(void **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
          uint64_t v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
          mlir::AffineMap::getConstantResults((mlir::AffineMap *)&v21, (uint64_t)&Value);
          v22[0] = (uint64_t)Value;
          v22[1] = 256;
          v22[2] = (uint64_t)Value + 8 * v27;
          void v22[3] = 256;
          llvm::to_vector<4u,llvm::iterator_range<llvm::mapped_iterator<long long *,mlir::affine::AffineLoadOp::fold(mlir::affine::AffineLoadOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0,unsigned long long>>>(&v29, v22);
          if (Value != &v28) {
            free(Value);
          }
          mlir::DenseElementsAttr::getValues<mlir::Attribute>((mlir::ArrayAttr *)&v23, (uint64_t)&Value);
          unint64_t v3 = mlir::detail::ElementsAttrRange<mlir::DenseElementsAttr::AttributeElementIterator>::operator[]((uint64_t)&Value, (uint64_t)v29) & 0xFFFFFFFFFFFFFFFBLL;
          if (v29 != v30) {
            free(v29);
          }
          return v3;
        }
        return 0;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t mlir::DenseElementsAttr::getSplatValue<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  mlir::ArrayAttr::getValue(a1);
  mlir::NamedAttribute::NamedAttribute(&v6, *(void *)a1, 0);
  uint64_t v2 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v5, v2, NumElements);
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v6);
}

void llvm::to_vector<4u,llvm::iterator_range<llvm::mapped_iterator<long long *,mlir::affine::AffineLoadOp::fold(mlir::affine::AffineLoadOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0,unsigned long long>>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)a2[2];
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  uint64_t v5 = (uint64_t)v4 - v3;
  if ((unint64_t)v4 - v3 < 0x21)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    if ((uint64_t *)v3 == v4) {
      goto LABEL_12;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5 >> 3, 8);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 2);
    if ((uint64_t *)v3 == v4) {
      goto LABEL_12;
    }
  }
  uint64_t v8 = (void *)(*a1 + 8 * v6);
  if ((unint64_t)(v5 - 8) < 0x38)
  {
    unint64_t v9 = (uint64_t *)v3;
    do
    {
LABEL_11:
      uint64_t v17 = *v9++;
      *v8++ = v17;
    }
    while (v9 != v4);
    goto LABEL_12;
  }
  uint64_t v10 = 8 * v6 + *a1;
  unint64_t v9 = (uint64_t *)v3;
  if ((unint64_t)(v10 - v3) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v11 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v8 = (void *)((char *)v8 + v12);
  unint64_t v9 = (uint64_t *)(v3 + v12);
  uint64_t v13 = (long long *)(v3 + 16);
  unint64_t v14 = (_OWORD *)(v10 + 16);
  uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *unint64_t v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v5 >> 3);
}

double mlir::DenseElementsAttr::getValues<mlir::Attribute>@<D0>(mlir::ArrayAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value = mlir::ArrayAttr::getValue(a1);
  uint64_t v6 = v5;
  mlir::NamedAttribute::NamedAttribute(&v12, *(void *)a1, 0);
  uint64_t v7 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  mlir::NamedAttribute::NamedAttribute(&v11, v7, NumElements);
  long long v10 = v11;
  double result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v10;
  *(void *)(a2 + 32) = Value;
  *(void *)(a2 + 40) = v6;
  return result;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::DenseElementsAttr::AttributeElementIterator>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8) + mlir::ElementsAttr::getFlattenedIndex(*(void **)(a1 + 32), a2);
  v5[0] = *(void *)a1;
  v5[1] = v3;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v5);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 115;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[241];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineStoreOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  memset(v18, 0, 24);
  memset(v17, 0, 24);
  uint64_t v16 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = v22;
  uint64_t v21 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v18, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v20, &v16, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v19)&& (RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v19), uint64_t v8 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, RHS, v8))&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17,
         v19,
         v8))
  {
    if (!v21)
    {
      BOOL v12 = 1;
      unint64_t v14 = v20;
      if (v20 == v22) {
        return v12;
      }
      goto LABEL_19;
    }
    unint64_t v9 = (char *)v20;
    uint64_t v10 = 32 * v21 - 32;
    do
    {
      int v11 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, v8);
      BOOL v12 = v11 != 0;
      v9 += 32;
      if (v11) {
        BOOL v13 = v10 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      v10 -= 32;
    }
    while (!v13);
  }
  else
  {
    BOOL v12 = 0;
  }
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_19:
  }
    free(v14);
  return v12;
}

uint64_t mlir::affine::AffineStoreOp::print(mlir::affine::AffineStoreOp *this, mlir::OpAsmPrinter *a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    *unint64_t v7 = 8236;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", ", 2uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 56));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 91);
    uint64_t v10 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47))
    {
LABEL_12:
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v10 + 56, "map", 3uLL);
      goto LABEL_13;
    }
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 91;
    uint64_t v10 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_12;
    }
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v10, (uint64_t)"map", 3);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v14 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v15 = *(void *)(v14 + 72);
      unint64_t v16 = *(unsigned int *)(v14 + 68) - 2;
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v16 = -2;
    }
    mlir::ValueRange::ValueRange(v27, v15 + 64, v16);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v13, v27[0], v27[1]);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 93);
    uint64_t v19 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_20;
    }
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    *unint64_t v18 = 93;
    uint64_t v19 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47))
    {
LABEL_20:
      v26[0] = mlir::Operation::getAttrDictionary(v19);
      unint64_t v20 = (mlir::ArrayAttr *)v26;
      goto LABEL_23;
    }
  }
  unint64_t v20 = (mlir::Operation *)((char *)v19 + 56);
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(v20);
  v26[0] = "map";
  v26[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, Value, v22, v26, 1);
  unint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = *((void *)v23 + 4);
  if ((unint64_t)(*((void *)v23 + 3) - v24) > 2)
  {
    *(unsigned char *)(v24 + 2) = 32;
    *(_WORD *)uint64_t v24 = 14880;
    *((void *)v23 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v23, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineStoreOp::verify(uint64_t **this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v26 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v3 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26))
  {
    uint64_t v13 = *this;
    if (!*((unsigned char *)*this + 47)
      || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3), !v15))
    {
      uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v13 + 7), "map", 3uLL);
    }
    if (InherentAttr)
    {
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v16 = InherentAttr;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0)
      {
LABEL_24:
        uint64_t v18 = *(void *)(v17 + 72);
        uint64_t v19 = *(unsigned int *)(v17 + 68);
        uint64_t v20 = v19 - 2;
        uint64_t v21 = v18 + 64;
        int v22 = v19 - 2;
        return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
      }
    }
    uint64_t v20 = -2;
    int v22 = -2;
    uint64_t v21 = 64;
    return verifyMemoryOpIndexing(v13, v16, v21, v20, v26, v22) != 0;
  }
  uint64_t v24 = (const void **)"value to store must have the same type as memref element type";
  __int16 v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v27);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      unint64_t v6 = v33;
      unint64_t v7 = __p;
      if (v33 != __p)
      {
        do
          unint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        unint64_t v7 = __p;
      }
      long long v33 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v30;
    if (v30)
    {
      unint64_t v9 = v31;
      uint64_t v10 = v30;
      if (v31 != v30)
      {
        do
        {
          char v12 = (void *)*--v9;
          int v11 = v12;
          void *v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v30;
      }
      uint64_t v31 = v8;
      operator delete(v10);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
  return v4;
}

void mlir::affine::AffineStoreOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.store", 12, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC9985C0;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    unint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineStoreOp>]";
  unint64_t v39 = 118;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  int v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  unint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)unint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    int v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      unint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)unint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      unint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::affine::AffineMinOp::fold(uint64_t *a1, uint64_t a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  unint64_t v25 = v27;
  uint64_t v26 = 0x200000000;
  v23[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
  v23[0] = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
  unint64_t v22 = mlir::AffineMap::partialConstantFold(v23, v4, v3, (uint64_t)&v25, 0);
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v22) == 1
    && mlir::AffineMap::isSymbolIdentity((mlir::AffineMap *)&v22))
  {
    unint64_t v5 = *(void *)(*(void *)(v2 + 72) + 24) | 4;
    unint64_t v6 = v25;
    if (v25 == v27) {
      return v5;
    }
    goto LABEL_13;
  }
  if (!v26)
  {
    v23[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v23);
    if (v22 != Value)
    {
      uint64_t v19 = mlir::AffineMapAttr::get(v22);
      uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
      __int16 v24 = 261;
      v23[0] = (int *)"map";
      v23[1] = (int *)3;
      uint64_t v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v23);
      mlir::Operation::setAttr(v2, v21, v19);
      unint64_t v5 = (v2 - 16) | 4;
      unint64_t v6 = v25;
      if (v25 == v27) {
        return v5;
      }
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  unint64_t v7 = (uint64_t *)v25;
  if (v26 != 1)
  {
    unint64_t v9 = (uint64_t *)((char *)v25 + 8);
    uint64_t v8 = *(void *)v25;
    uint64_t v10 = 8 * v26 - 8;
    int v11 = (uint64_t *)((char *)v25 + 8);
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 < v8)
      {
        uint64_t v8 = v12;
        unint64_t v7 = v9;
      }
      unint64_t v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v7 == (uint64_t *)((char *)v25 + 8 * v26))
  {
LABEL_18:
    unint64_t v5 = 0;
    unint64_t v6 = v25;
    if (v25 == v27) {
      return v5;
    }
    goto LABEL_13;
  }
  uint64_t v14 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
  uint64_t v16 = mlir::IndexType::get(v14, v15);
  unint64_t v5 = mlir::IntegerAttr::get(v16, *v7) & 0xFFFFFFFFFFFFFFFBLL;
  unint64_t v6 = v25;
  if (v25 != v27) {
LABEL_13:
  }
    free(v6);
  return v5;
}

void mlir::affine::AffineMinOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v38 = a2;
  mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  uint64_t v3 = v38;
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v39, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.min", 10, (__int16)v39, v3, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC9984B8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    unint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineMinOp>]";
  unint64_t v40 = 116;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  int v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  unint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)unint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unint64_t v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)unint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    __int16 v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    __int16 v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      unint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)unint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      unint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
}

uint64_t mlir::affine::AffineMinOp::verify(mlir::affine::AffineMinOp *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  uint64_t v17 = (uint64_t *)v1;
  unint64_t v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x800000) != 0) {
    int v3 = *(_DWORD *)(v1 + 68);
  }
  else {
    int v3 = 0;
  }
  v18[0] = *(void *)(v1 + 64 + 16 * ((v2 >> 23) & 1));
  v15[0] = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18);
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v15);
  v18[0] = *(void *)(v1 + 64 + 16 * (((unint64_t)*(unsigned int *)(v1 + 44) >> 23) & 1));
  v18[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18);
  if (v3 == mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v18) + NumDims) {
    return 1;
  }
  v15[0] = (const void **)"operand count and affine map dimension and symbol count must match";
  __int16 v16 = 259;
  mlir::OpState::emitOpError(&v17, v15, (uint64_t)v18);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
  if (v18[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
  }
  if (v25)
  {
    unint64_t v6 = (void **)__p;
    if (__p)
    {
      unint64_t v7 = v24;
      uint64_t v8 = __p;
      if (v24 != __p)
      {
        do
          unint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      __int16 v24 = v6;
      operator delete(v8);
    }
    unint64_t v9 = v21;
    if (v21)
    {
      unint64_t v10 = v22;
      int v11 = v21;
      if (v22 != v21)
      {
        do
        {
          uint64_t v13 = (void *)*--v10;
          unint64_t v12 = v13;
          void *v10 = 0;
          if (v13) {
            operator delete[](v12);
          }
        }
        while (v10 != v9);
        int v11 = v21;
      }
      unint64_t v22 = v9;
      operator delete(v11);
    }
    if (v19 != &v20) {
      free(v19);
    }
  }
  return v5;
}

uint64_t mlir::affine::AffineMinOp::parse(uint64_t a1, uint64_t a2)
{
  v21[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  uint64_t v15 = 0;
  __int16 v16 = v18;
  uint64_t v17 = 0x800000000;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v15, 0, (uint64_t)"map", 3, a2 + 112)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v19, 1, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    goto LABEL_17;
  }
  if (v20)
  {
    unint64_t v7 = (char *)v19;
    uint64_t v8 = 32 * v20;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8) {
        goto LABEL_9;
      }
    }
LABEL_17:
    uint64_t v12 = 0;
    uint64_t v13 = v16;
    if (v16 == v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_9:
  if (v17)
  {
    unint64_t v9 = (char *)v16;
    uint64_t v10 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_13;
      }
    }
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v12 = 1;
  uint64_t v13 = v16;
  if (v16 != v18) {
LABEL_18:
  }
    free(v13);
LABEL_19:
  if (v19 != v21) {
    free(v19);
  }
  return v12;
}

uint64_t mlir::affine::AffineMinOp::print(mlir::affine::AffineMinOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)this;
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 < *((void *)v4 + 3))
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
    if (!*(unsigned char *)(v3 + 47)) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(v3, (uint64_t)"map", 3);
    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  llvm::raw_ostream::write(v4, 32);
  if (*(unsigned char *)(v3 + 47)) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t InherentAttr = mlir::DictionaryAttr::get(v3 + 56, "map", 3uLL);
LABEL_7:
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 40))(a2, InherentAttr);
  unint64_t v8 = *(unsigned int *)(v3 + 44);
  if ((v8 & 0x800000) != 0)
  {
    unint64_t v9 = *(unsigned int *)(v3 + 68);
    uint64_t v10 = *(void *)(v3 + 72);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  uint64_t Value = *(const char **)(v3 + 16 * ((v8 >> 23) & 1) + 64);
  uint64_t Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  LODWORD(v11) = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 40);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 40;
  }
  uint64_t v14 = v11;
  if (v9 >= v11) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t Value = ", ";
  uint64_t v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10, 0, v10, v11, (uint64_t)a2, v15, (uint64_t)&Value);
  __int16 v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 41);
    uint64_t v18 = v9 - v14;
    if (v9 == v14) {
      goto LABEL_24;
    }
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 41;
    uint64_t v18 = v9 - v14;
    if (v9 == v14) {
      goto LABEL_24;
    }
  }
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 91);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *uint64_t v20 = 91;
  }
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t Value = ", ";
  uint64_t v29 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10 + 32 * v14, 0, v10 + 32 * v14, v18, (uint64_t)a2, v21, (uint64_t)&Value);
  unint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 93);
    if (!*(unsigned char *)(v3 + 47)) {
      goto LABEL_25;
    }
LABEL_27:
    uint64_t Value = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v3);
    p_uint64_t Value = (mlir::ArrayAttr *)&Value;
    goto LABEL_28;
  }
  *((void *)v22 + 4) = v23 + 1;
  *unint64_t v23 = 93;
LABEL_24:
  if (*(unsigned char *)(v3 + 47)) {
    goto LABEL_27;
  }
LABEL_25:
  p_uint64_t Value = (mlir::ArrayAttr *)(v3 + 56);
LABEL_28:
  uint64_t v25 = mlir::ArrayAttr::getValue(p_Value);
  uint64_t Value = "map";
  uint64_t v29 = 3;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, v25, v26, &Value, 1);
}

unint64_t mlir::affine::AffineMaxOp::fold(uint64_t *a1, uint64_t a2)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v26 = v28;
  uint64_t v27 = 0x200000000;
  v24[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
  v24[0] = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24);
  unint64_t v23 = mlir::AffineMap::partialConstantFold(v24, v4, v3, (uint64_t)&v26, 0);
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v23) == 1
    && mlir::AffineMap::isSymbolIdentity((mlir::AffineMap *)&v23))
  {
    unint64_t v5 = *(void *)(*(void *)(v2 + 72) + 24) | 4;
    unint64_t v6 = v26;
    if (v26 == v28) {
      return v5;
    }
    goto LABEL_15;
  }
  if (!v27)
  {
    v24[0] = *(int **)(v2 + 64 + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1));
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24);
    if (v23 != Value)
    {
      uint64_t v20 = mlir::AffineMapAttr::get(v23);
      uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
      __int16 v25 = 261;
      v24[0] = (int *)"map";
      v24[1] = (int *)3;
      uint64_t v22 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v24);
      mlir::Operation::setAttr(v2, v22, v20);
      unint64_t v5 = (v2 - 16) | 4;
      unint64_t v6 = v26;
      if (v26 == v28) {
        return v5;
      }
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  char v7 = (uint64_t *)v26;
  if (v27 != 1)
  {
    unint64_t v9 = (uint64_t *)((char *)v26 + 8);
    uint64_t v8 = *(void *)v26;
    uint64_t v10 = 8 * v27 - 8;
    uint64_t v11 = (uint64_t *)((char *)v26 + 8);
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v12 = v13;
      BOOL v14 = v8 < v13;
      if (v8 <= v13) {
        uint64_t v8 = v12;
      }
      if (v14) {
        char v7 = v9;
      }
      unint64_t v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v7 == (uint64_t *)((char *)v26 + 8 * v27))
  {
LABEL_20:
    unint64_t v5 = 0;
    unint64_t v6 = v26;
    if (v26 == v28) {
      return v5;
    }
    goto LABEL_15;
  }
  uint64_t v15 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 24));
  uint64_t v17 = mlir::IndexType::get(v15, v16);
  unint64_t v5 = mlir::IntegerAttr::get(v17, *v7) & 0xFFFFFFFFFFFFFFFBLL;
  unint64_t v6 = v26;
  if (v26 != v28) {
LABEL_15:
  }
    free(v6);
  return v5;
}

void mlir::affine::AffineMaxOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v38 = a2;
  mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  uint64_t v3 = v38;
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v39, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.max", 10, (__int16)v39, v3, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC998460;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    char v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineMaxOp>]";
  unint64_t v40 = 116;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v40;
  }
  uint64_t v11 = &v39[v10];
  unint64_t v12 = v40 - v10;
  if (v40 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v40 - v10;
  }
  BOOL v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  char v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)char v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  __int16 v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    __int16 v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    __int16 v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      char v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)char v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      char v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
}

uint64_t mlir::affine::AffineMaxOp::parse(uint64_t a1, uint64_t a2)
{
  v21[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  uint64_t v15 = 0;
  __int16 v16 = v18;
  uint64_t v17 = 0x800000000;
  if (!mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(a1, &v15, 0, (uint64_t)"map", 3, a2 + 112)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v19, 1, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 6, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    goto LABEL_17;
  }
  if (v20)
  {
    char v7 = (char *)v19;
    uint64_t v8 = 32 * v20;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8) {
        goto LABEL_9;
      }
    }
LABEL_17:
    uint64_t v12 = 0;
    uint64_t v13 = v16;
    if (v16 == v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_9:
  if (v17)
  {
    unint64_t v9 = (char *)v16;
    uint64_t v10 = 32 * v17;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_13;
      }
    }
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v12 = 1;
  uint64_t v13 = v16;
  if (v16 != v18) {
LABEL_18:
  }
    free(v13);
LABEL_19:
  if (v19 != v21) {
    free(v19);
  }
  return v12;
}

uint64_t mlir::affine::AffinePrefetchOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v52 = 0;
  memset(v51, 0, 24);
  uint64_t v50 = 0;
  char v7 = (mlir::Builder *)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v7, 0x20u);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  int v63 = (char *)v65;
  uint64_t v64 = 0x100000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void *, uint64_t))(*(void *)a1 + 672))(a1, v51, 1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, char **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v63, &v45, "map", 3, (uint64_t)a2 + 112, 2)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)|| !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v48)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)|| (__int16 v56 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, const char **))(*(void *)a1 + 368))(a1, "locality", 8, &v53))|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 152))(a1)|| !mlir::AsmParser::parseAttribute<mlir::IntegerAttr>((uint64_t)a1,
                           &v50,
                           IntegerType,
                           (uint64_t)"localityHint",
                           12,
                           (uint64_t)a2 + 112)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 168))(a1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)
    || !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v46)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112)
    || !mlir::AsmParser::parseColonType<mlir::MemRefType>((uint64_t)a1, &v52)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v51, v52, (uint64_t)a2 + 16))
  {
LABEL_33:
    uint64_t v12 = 0;
    goto LABEL_34;
  }
  if (v64)
  {
    unint64_t v9 = v63;
    uint64_t v10 = 32 * v64;
    while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, (uint64_t)a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_19;
      }
    }
    goto LABEL_33;
  }
LABEL_19:
  if (v49 == 5)
  {
    if (*(_DWORD *)v48 != 1953067639 || *(unsigned char *)(v48 + 4) != 101)
    {
LABEL_22:
      uint64_t v11 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
      uint64_t v42 = "rw specifier has to be 'read' or 'write'";
      __int16 v44 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v53, a1, v11, &v42);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
      if (v53) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
      }
      if (v62)
      {
        uint64_t v13 = (void **)__p;
        if (__p)
        {
          BOOL v14 = v61;
          uint64_t v15 = __p;
          if (v61 != __p)
          {
            do
              BOOL v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            uint64_t v15 = __p;
          }
          uint64_t v61 = v13;
          operator delete(v15);
        }
        __int16 v16 = v58;
        if (!v58) {
          goto LABEL_72;
        }
        uint64_t v17 = v59;
        unint64_t v18 = v58;
        if (v59 == v58)
        {
LABEL_71:
          char v59 = v16;
          operator delete(v18);
LABEL_72:
          if (v55 != &v57) {
            free(v55);
          }
          goto LABEL_34;
        }
        do
        {
          uint64_t v21 = (void *)*--v17;
          uint64_t v20 = v21;
          *uint64_t v17 = 0;
          if (v21) {
            operator delete[](v20);
          }
        }
        while (v17 != v16);
LABEL_70:
        unint64_t v18 = v58;
        goto LABEL_71;
      }
      goto LABEL_34;
    }
  }
  else if (v49 != 4 || *(_DWORD *)v48 != 1684104562)
  {
    goto LABEL_22;
  }
  unint64_t v23 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  unint64_t v25 = (mlir::MLIRContext *)(v49 == 5 && *(_DWORD *)v48 == 1953067639 && *(unsigned char *)(v48 + 4) == 101);
  uint64_t BoolAttr = mlir::Builder::getBoolAttr(v23, v25);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  __int16 v56 = 261;
  uint64_t v53 = "isWrite";
  uint64_t v54 = 7;
  uint64_t v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v53);
  mlir::NamedAttribute::NamedAttribute(&v42, v28, BoolAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
  if (v47 != 5)
  {
    if (v47 != 4 || *(_DWORD *)v46 != 1635017060) {
      goto LABEL_56;
    }
LABEL_79:
    uint64_t v37 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
    if (v47 == 4) {
      uint64_t v38 = (mlir::MLIRContext *)(*(_DWORD *)v46 == 1635017060);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = mlir::Builder::getBoolAttr(v37, v38);
    unint64_t v40 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    __int16 v56 = 261;
    uint64_t v53 = "isDataCache";
    uint64_t v54 = 11;
    uint64_t v41 = mlir::StringAttr::get(v40, (mlir::MLIRContext *)&v53);
    mlir::NamedAttribute::NamedAttribute(&v42, v41, v39);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
    uint64_t v12 = 1;
    goto LABEL_34;
  }
  if (*(_DWORD *)v46 == 1953721961 && *(unsigned char *)(v46 + 4) == 114) {
    goto LABEL_79;
  }
LABEL_56:
  uint64_t v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
  uint64_t v42 = "cache type has to be 'data' or 'instr'";
  __int16 v44 = 259;
  (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v53, a1, v29, &v42);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
  if (v53) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
  }
  if (v62)
  {
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v61;
      long long v32 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      uint64_t v61 = v30;
      operator delete(v32);
    }
    __int16 v16 = v58;
    if (!v58) {
      goto LABEL_72;
    }
    long long v33 = v59;
    unint64_t v18 = v58;
    if (v59 == v58) {
      goto LABEL_71;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v16);
    goto LABEL_70;
  }
LABEL_34:
  if (v63 != (char *)v65) {
    free(v63);
  }
  return v12;
}

uint64_t mlir::affine::AffinePrefetchOp::print(mlir::affine::AffinePrefetchOp *this, mlir::OpAsmPrinter *a2)
{
  void v59[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47))
    {
LABEL_9:
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *char v7 = 91;
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v12 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(v12 + 72);
      unint64_t v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = -1;
    }
    mlir::ValueRange::ValueRange(v59, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v11, v59[0], v59[1]);
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *__int16 v16 = 93;
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v18 = (_WORD *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v18 > 1uLL)
  {
    *unint64_t v18 = 8236;
    *((void *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, ", ", 2uLL);
  }
  unint64_t v19 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v19 = 0;
  }
  std::string __p = *(void **)(v19 + 8);
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  uint64_t v21 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = (llvm::raw_ostream *)v21;
  if (Value) {
    unint64_t v23 = "write";
  }
  else {
    unint64_t v23 = "read";
  }
  if (Value) {
    size_t v24 = 5;
  }
  else {
    size_t v24 = 4;
  }
  uint64_t v26 = *(void *)(v21 + 24);
  unint64_t v25 = *(void **)(v21 + 32);
  if (v24 <= v26 - (uint64_t)v25)
  {
    memcpy(v25, v23, v24);
    *((void *)v22 + 4) += v24;
  }
  else
  {
    llvm::raw_ostream::write(v22, v23, v24);
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 > 1uLL)
  {
    *uint64_t v28 = 8236;
    *((void *)v27 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v27, ", ", 2uLL);
  }
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = *((void *)v29 + 4);
  if ((unint64_t)(*((void *)v29 + 3) - v30) > 8)
  {
    *(unsigned char *)(v30 + 8) = 60;
    *(void *)uint64_t v30 = *(void *)"locality<";
    *((void *)v29 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v29, "locality<", 9uLL);
  }
  unint64_t v31 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v31 = 0;
  }
  uint64_t v50 = *(void *)(v31 + 16);
  mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
  if (v52 > 0x40)
  {
    unint64_t v32 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    unint64_t v32 = __p;
  }
  long long v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v33, v32);
  uint64_t v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v35 = *((void *)v34 + 4);
  if ((unint64_t)(*((void *)v34 + 3) - v35) > 2)
  {
    *(unsigned char *)(v35 + 2) = 32;
    *(_WORD *)uint64_t v35 = 11326;
    *((void *)v34 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v34, ">, ", 3uLL);
  }
  std::string __p = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  BOOL v36 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
  uint64_t v37 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v38 = (llvm::raw_ostream *)v37;
  if (v36) {
    uint64_t v39 = "data";
  }
  else {
    uint64_t v39 = "instr";
  }
  if (v36) {
    size_t v40 = 4;
  }
  else {
    size_t v40 = 5;
  }
  uint64_t v42 = *(void *)(v37 + 24);
  uint64_t v41 = *(void **)(v37 + 32);
  if (v40 <= v42 - (uint64_t)v41)
  {
    memcpy(v41, v39, v40);
    *((void *)v38 + 4) += v40;
    uint64_t v43 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_54;
    }
  }
  else
  {
    llvm::raw_ostream::write(v38, v39, v40);
    uint64_t v43 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47))
    {
LABEL_54:
      std::string __p = (void *)mlir::Operation::getAttrDictionary(v43);
      p_p = &__p;
      goto LABEL_57;
    }
  }
  p_p = (void **)((char *)v43 + 56);
LABEL_57:
  uint64_t v45 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_p);
  std::string __p = "map";
  uint64_t v52 = 3;
  uint64_t v53 = "localityHint";
  uint64_t v54 = 12;
  unsigned int v55 = "isDataCache";
  uint64_t v56 = 11;
  uint64_t v57 = "isWrite";
  uint64_t v58 = 7;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void **, uint64_t))(*(void *)a2 + 192))(a2, v45, v46, &__p, 4);
  uint64_t v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v48 = *((void *)v47 + 4);
  if ((unint64_t)(*((void *)v47 + 3) - v48) > 2)
  {
    *(unsigned char *)(v48 + 2) = 32;
    *(_WORD *)uint64_t v48 = 14880;
    *((void *)v47 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v47, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::affine::AffinePrefetchOp::verify(mlir::affine::AffinePrefetchOp *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"map", 3);
    if (v4)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_24:
      uint64_t v56 = 0;
      goto LABEL_25;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "map", 3uLL);
  if (!InherentAttr) {
    goto LABEL_24;
  }
LABEL_4:
  unint64_t v5 = *(void **)(*(void *)InherentAttr + 136);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v7 = InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v56 = v7;
  if (v6)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56);
    int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value);
    v57[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v57);
    if (v9 == Kind)
    {
      int v10 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value) + 1;
      unint64_t Parent = *(void *)this;
      if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
      {
        if (v10 == *(_DWORD *)(Parent + 68)) {
          goto LABEL_27;
        }
      }
      else if (!v10)
      {
        goto LABEL_27;
      }
      v53[0] = (const void **)"too few operands";
      __int16 v54 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
      if (v57[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
      }
      if (!v64) {
        return v12;
      }
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        unint64_t v14 = v63;
        uint64_t v15 = __p;
        if (v63 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        int v63 = v13;
        operator delete(v15);
      }
      __int16 v16 = v60;
      if (!v60) {
        goto LABEL_89;
      }
      uint64_t v17 = v61;
      unint64_t v18 = v60;
      if (v61 == v60) {
        goto LABEL_88;
      }
      do
      {
        uint64_t v27 = (void *)*--v17;
        uint64_t v26 = v27;
        *uint64_t v17 = 0;
        if (v27) {
          operator delete[](v26);
        }
      }
      while (v17 != v16);
    }
    else
    {
      v53[0] = (const void **)"affine.prefetch affine map num results must equal memref rank";
      __int16 v54 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
      if (v57[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
      }
      if (!v64) {
        return v12;
      }
      uint64_t v45 = (void **)__p;
      if (__p)
      {
        uint64_t v46 = v63;
        uint64_t v47 = __p;
        if (v63 != __p)
        {
          do
            uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          uint64_t v47 = __p;
        }
        int v63 = v45;
        operator delete(v47);
      }
      __int16 v16 = v60;
      if (!v60) {
        goto LABEL_89;
      }
      uint64_t v48 = v61;
      unint64_t v18 = v60;
      if (v61 == v60) {
        goto LABEL_88;
      }
      do
      {
        uint64_t v50 = (void *)*--v48;
        uint64_t v49 = v50;
        *uint64_t v48 = 0;
        if (v50) {
          operator delete[](v49);
        }
      }
      while (v48 != v16);
    }
    goto LABEL_87;
  }
LABEL_25:
  unint64_t Parent = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0 || *(_DWORD *)(Parent + 68) != 1)
  {
    v53[0] = (const void **)"too few operands";
    __int16 v54 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    }
    if (!v64) {
      return v12;
    }
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      uint64_t v29 = v63;
      uint64_t v30 = __p;
      if (v63 != __p)
      {
        do
          uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      int v63 = v28;
      operator delete(v30);
    }
    __int16 v16 = v60;
    if (!v60) {
      goto LABEL_89;
    }
    unint64_t v31 = v61;
    unint64_t v18 = v60;
    if (v61 == v60)
    {
LABEL_88:
      uint64_t v61 = v16;
      operator delete(v18);
LABEL_89:
      uint64_t v51 = v58;
      if (v58 == v59) {
        return v12;
      }
LABEL_90:
      free(v51);
      return v12;
    }
    do
    {
      long long v33 = (void *)*--v31;
      unint64_t v32 = v33;
      *unint64_t v31 = 0;
      if (v33) {
        operator delete[](v32);
      }
    }
    while (v31 != v16);
LABEL_87:
    unint64_t v18 = v60;
    goto LABEL_88;
  }
LABEL_27:
  while (1)
  {
    unint64_t v19 = *(mlir::Block **)(Parent + 16);
    if (!v19) {
      break;
    }
    unint64_t v20 = Parent;
    uint64_t ParentOp = mlir::Block::getParentOp(v19);
    unint64_t Parent = ParentOp;
    if (!ParentOp) {
      goto LABEL_51;
    }
    if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>((void *)(ParentOp + 48)))
    {
      uint64_t v22 = *(mlir::Block **)(v20 + 16);
      if (v22)
      {
        unint64_t Parent = mlir::Block::getParent(v22);
        uint64_t v23 = *(void *)this;
        if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t Parent = 0;
        uint64_t v23 = *(void *)this;
        if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0) {
          goto LABEL_32;
        }
      }
      goto LABEL_52;
    }
  }
  unint64_t Parent = 0;
LABEL_51:
  uint64_t v23 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
LABEL_32:
    uint64_t v24 = -1;
    uint64_t v25 = 32;
    goto LABEL_54;
  }
LABEL_52:
  uint64_t v34 = *(unsigned int *)(v23 + 68);
  uint64_t v24 = v34 - 1;
  if (v34 == 1) {
    return 1;
  }
  uint64_t v25 = *(void *)(v23 + 72) + 32;
LABEL_54:
  for (uint64_t i = (void **)(v25 + 24); ; i += 4)
  {
    BOOL v36 = *i;
    if ((mlir::affine::isValidDim(*i, (mlir::Block *)Parent) & 1) == 0
      && (mlir::affine::isValidSymbol(v36, (mlir::Block *)Parent) & 1) == 0)
    {
      break;
    }
    if (!--v24) {
      return 1;
    }
  }
  v53[0] = (const void **)"index must be a dimension or symbol identifier";
  __int16 v54 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v53, (uint64_t)v57);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  }
  if (v64)
  {
    uint64_t v37 = (void **)__p;
    if (__p)
    {
      uint64_t v38 = v63;
      uint64_t v39 = __p;
      if (v63 != __p)
      {
        do
          uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        uint64_t v39 = __p;
      }
      int v63 = v37;
      operator delete(v39);
    }
    size_t v40 = v60;
    if (v60)
    {
      uint64_t v41 = v61;
      uint64_t v42 = v60;
      if (v61 != v60)
      {
        do
        {
          __int16 v44 = (void *)*--v41;
          uint64_t v43 = v44;
          *uint64_t v41 = 0;
          if (v44) {
            operator delete[](v43);
          }
        }
        while (v41 != v40);
        uint64_t v42 = v60;
      }
      uint64_t v61 = v40;
      operator delete(v42);
    }
    uint64_t v51 = v58;
    if (v58 != v59) {
      goto LABEL_90;
    }
  }
  return v12;
}

void mlir::affine::AffinePrefetchOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  char v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.prefetch", 15, (__int16)v38, a2, 0, 0);
  *(void *)char v4 = &unk_1EC998618;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>]";
  unint64_t v39 = 121;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  unint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  __int16 v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

void mlir::affine::AffineParallelOp::getSteps(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = 0;
  }
  uint64_t v18 = *(void *)(v3 + 24);
  uint64_t Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  uint64_t v5 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  uint64_t v7 = (char *)(v5 + 8 * v6);
  uint64_t v8 = v22;
  unint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v9 = v7 - Value;
  if ((unint64_t)(v7 - Value) < 0x21)
  {
    uint64_t v10 = 0;
    int v12 = 0;
    uint64_t v11 = v22;
    if (v7 == Value) {
      goto LABEL_10;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v9 >> 3, 8);
    uint64_t v10 = v21;
    uint64_t v11 = v20;
    int v12 = v21;
    if (v7 == Value) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = &v11[v10];
  do
  {
    uint64_t v14 = *(void *)Value;
    Value += 8;
    uint64_t v19 = v14;
    *v13++ = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v19);
  }
  while (Value != v7);
  int v12 = v21;
  uint64_t v11 = v20;
LABEL_10:
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x800000000;
  unint64_t v15 = v12 + ((unint64_t)v9 >> 3);
  LODWORD(v21) = v15;
  if (v15 && &v20 != (void **)a2)
  {
    if (v11 == v22)
    {
      unsigned int v17 = v12 + ((unint64_t)v9 >> 3);
      if (v15 < 9
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v15, 8),
            unsigned int v17 = v21,
            uint64_t v8 = v20,
            v21))
      {
        memcpy(*(void **)a2, v8, 8 * v17);
        uint64_t v8 = v20;
      }
      *(_DWORD *)(a2 + 8) = v15;
    }
    else
    {
      *(void *)a2 = v11;
      int v16 = HIDWORD(v21);
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v16;
      unint64_t v20 = v22;
      HIDWORD(v21) = 0;
    }
    LODWORD(v21) = 0;
    uint64_t v11 = v8;
  }
  if (v11 != v22) {
    free(v11);
  }
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsOperands(mlir::affine::AffineParallelOp *this)
{
  uint64_t v1 = *(void *)this;
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if ((v2 & 0x800000) != 0) {
    uint64_t v3 = *(void *)(v1 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v1 + 16 * ((v2 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t Value = *(void *)(v5 + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return v3 + 32 * mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsMap(mlir::affine::AffineParallelOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 40);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::AffineParallelOp::getLowerBoundsValueMap@<X0>(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v4 = 0;
  }
  uint64_t v15 = *(void *)(v4 + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15);
  uint64_t v6 = *(void *)this;
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v8 = *(void *)(v6 + 72);
    unint64_t v9 = *(unsigned int *)(v6 + 68);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v10 = v6 + 16 * ((v7 >> 23) & 1) + 64;
  if (BYTE3(v7)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v15 = *(void *)(v11 + 8);
  uint64_t v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v15);
  if (v9 >= NumInputs) {
    unint64_t v13 = NumInputs;
  }
  else {
    unint64_t v13 = v9;
  }
  mlir::ValueRange::ValueRange(v17, v8, v13);
  mlir::ValueRange::ValueRange(v16, 0, 0);
  return mlir::affine::AffineValueMap::AffineValueMap(a2, Value, v17[0], v17[1], v16[0], v16[1]);
}

uint64_t mlir::affine::AffineParallelOp::getUpperBoundsValueMap@<X0>(mlir::affine::AffineParallelOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v16[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v4 = 0;
  }
  uint64_t v14 = *(void *)(v4 + 40);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  uint64_t v6 = *(void *)this;
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v8 = *(void *)(v6 + 72);
    uint64_t v9 = *(unsigned int *)(v6 + 68);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = v6 + 16 * ((v7 >> 23) & 1) + 64;
  if (BYTE3(v7)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = *(void *)(v11 + 8);
  uint64_t v14 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&v14);
  mlir::ValueRange::ValueRange(v16, v8 + 32 * NumInputs, v9 - NumInputs);
  mlir::ValueRange::ValueRange(v15, 0, 0);
  return mlir::affine::AffineValueMap::AffineValueMap(a2, Value, v16[0], v16[1], v15[0], v15[1]);
}

void mlir::affine::AffineParallelOp::setLowerBounds(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  unint64_t v9 = *(unsigned int *)(*a1 + 44);
  if ((v9 & 0x800000) != 0)
  {
    uint64_t v10 = *(void *)(v8 + 72);
    uint64_t v11 = *(unsigned int *)(v8 + 68);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = v8 + 16 * ((v9 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*a1 + 44))) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t Value = *(void **)(v13 + 8);
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  uint64_t v15 = NumInputs;
  unint64_t v16 = v11 - NumInputs;
  uint64_t Value = v46;
  uint64_t v45 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v46, a3, 8);
    uint64_t v17 = v45;
    uint64_t v18 = Value;
    uint64_t v47 = a2;
    uint64_t v48 = 0;
LABEL_9:
    uint64_t v19 = 0;
    unint64_t v20 = (uint64_t *)&v18[8 * v17];
    do
    {
      *v20++ = mlir::ValueRange::dereference_iterator(&v47, v19);
      uint64_t v19 = ++v48;
    }
    while (v47 != a2 || v19 != a3);
    LODWORD(v45) = v45 + a3;
    unsigned int v22 = v45;
    unint64_t v23 = v16 + v45;
    if (v23 > HIDWORD(v45)) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  uint64_t v47 = a2;
  uint64_t v48 = 0;
  uint64_t v18 = v46;
  if (a3) {
    goto LABEL_9;
  }
  unsigned int v22 = 0;
  LODWORD(v45) = 0;
  unint64_t v23 = v11 - NumInputs;
  if (v16 > 4)
  {
LABEL_16:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v46, v23, 8);
    unsigned int v22 = v45;
  }
LABEL_17:
  uint64_t v24 = Value;
  if (v11 != v15)
  {
    unint64_t v25 = (char *)Value + 8 * v22;
    if (v16 >= 0x13
      && ((uint64_t v26 = v22, v27 = v10 + 32 * v15, (unint64_t)v25 >= v10 + 32 * v11)
       || v27 + 24 >= (unint64_t)Value + 8 * (v11 + v22 - v15)))
    {
      uint64_t v29 = 4;
      if ((v16 & 3) != 0) {
        uint64_t v29 = v16 & 3;
      }
      unint64_t v28 = v16 - v29;
      v25 += v16 - v29;
      uint64_t v30 = (const double *)(v27 + 88);
      uint64_t v31 = (unsigned long long *)((char *)Value + 8 * v26 + 16);
      uint64_t v32 = v29 + v15 - v11;
      do
      {
        long long v33 = v30 - 8;
        unsigned long long v34 = (unsigned __int128)vld4q_f64(v33);
        unsigned long long v35 = (unsigned __int128)vld4q_f64(v30);
        *(v31 - 1) = v34;
        *uint64_t v31 = v35;
        v30 += 16;
        v31 += 2;
        v32 += 4;
      }
      while (v32);
    }
    else
    {
      unint64_t v28 = 0;
    }
    uint64_t v36 = v28 + v15 - v11;
    uint64_t v37 = (uint64_t *)(32 * v28 + 32 * v15 + v10 + 24);
    do
    {
      uint64_t v38 = *v37;
      v37 += 4;
      *v25++ = v38;
    }
    while (!__CFADD__(v36++, 1));
    unsigned int v22 = v45;
    uint64_t v24 = Value;
  }
  LODWORD(v45) = v22 + v16;
  size_t v40 = (uint64_t *)*a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v42, (uint64_t)v24, v22 + v16);
  mlir::Operation::setOperands(v40, v42, v43);
  uint64_t v41 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(*a1, *(void *)(*(void *)(*(void *)(*a1 + 48) + 96) + 8), v41);
  if (Value != v46) {
    free(Value);
  }
}

void mlir::affine::AffineParallelOp::setUpperBounds(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  unint64_t v9 = *(unsigned int *)(*a1 + 44);
  if ((v9 & 0x800000) != 0)
  {
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = *(unsigned int *)(v8 + 68);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  uint64_t v12 = v8 + 16 * ((v9 >> 23) & 1) + 64;
  if (HIBYTE(*(_DWORD *)(*a1 + 44))) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t Value = *(void **)(v13 + 8);
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  if (v11 >= NumInputs) {
    unint64_t v15 = NumInputs;
  }
  else {
    unint64_t v15 = v11;
  }
  uint64_t Value = v41;
  uint64_t v40 = 0x400000000;
  if (v15 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v41, v15, 8);
    unint64_t v16 = (char *)Value + 8 * v40;
    if (v15 >= 0xD
      && ((unint64_t)v16 >= v10 + 32 * v15
       || v10 + 24 >= (unint64_t)Value + 8 * v40 + 8 * v15))
    {
      uint64_t v18 = v15 & 3;
      if ((v15 & 3) == 0) {
        uint64_t v18 = 4;
      }
      unint64_t v17 = v15 - v18;
      v16 += 8 * v17;
      uint64_t v19 = (const double *)(v10 + 88);
      unint64_t v20 = (unsigned long long *)((char *)Value + 8 * v40 + 16);
      unint64_t v21 = v17;
      do
      {
        unsigned int v22 = v19 - 8;
        unsigned long long v23 = (unsigned __int128)vld4q_f64(v22);
        unsigned long long v24 = (unsigned __int128)vld4q_f64(v19);
        *(v20 - 1) = v23;
        *unint64_t v20 = v24;
        v19 += 16;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
LABEL_21:
      unint64_t v25 = v15 - v17;
      uint64_t v26 = (uint64_t *)(v10 + 32 * v17 + 24);
      do
      {
        uint64_t v27 = *v26;
        v26 += 4;
        *(void *)unint64_t v16 = v27;
        v16 += 8;
        --v25;
      }
      while (v25);
      LODWORD(v40) = v40 + v15;
      uint64_t v28 = v40;
      unint64_t v29 = a3 + v40;
      if (v29 > HIDWORD(v40)) {
        goto LABEL_24;
      }
      goto LABEL_25;
    }
LABEL_16:
    unint64_t v17 = 0;
    goto LABEL_21;
  }
  if (v15)
  {
    unint64_t v16 = v41;
    goto LABEL_16;
  }
  uint64_t v28 = 0;
  LODWORD(v40) = 0;
  unint64_t v29 = a3;
  if (a3 > 4)
  {
LABEL_24:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v41, v29, 8);
    uint64_t v28 = v40;
  }
LABEL_25:
  uint64_t v30 = Value;
  uint64_t v42 = a2;
  uint64_t v43 = 0;
  if (a3)
  {
    uint64_t v31 = 0;
    uint64_t v32 = (uint64_t *)((char *)Value + 8 * v28);
    do
    {
      *v32++ = mlir::ValueRange::dereference_iterator(&v42, v31);
      uint64_t v31 = ++v43;
    }
    while (v42 != a2 || v31 != a3);
    LODWORD(v28) = v40;
    uint64_t v30 = Value;
  }
  unint64_t v34 = (v28 + a3);
  LODWORD(v40) = v28 + a3;
  unsigned long long v35 = (uint64_t *)*a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v37, (uint64_t)v30, v34);
  mlir::Operation::setOperands(v35, v37, v38);
  uint64_t v36 = mlir::AffineMapAttr::get(a4);
  mlir::Operation::setAttr(*a1, *(void *)(*(void *)(*(void *)(*a1 + 48) + 96) + 40), v36);
  if (Value != v41) {
    free(Value);
  }
}

BOOL mlir::affine::AffineParallelOp::verify(mlir::affine::AffineParallelOp *this)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&Value);
  uint64_t v2 = v231;
  if (Value != &v232) {
    free(Value);
  }
  unint64_t v226 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v226);
  if (NumElements != v2) {
    goto LABEL_16;
  }
  unint64_t v4 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v4 = 0;
  }
  uint64_t v219 = *(void **)(v4 + 32);
  if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v219) != NumElements) {
    goto LABEL_16;
  }
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&Value);
  if (v231 != v2)
  {
    BOOL v7 = 1;
    uint64_t v8 = Value;
    if (Value == &v232) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = v2 != (*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 3;
  uint64_t v8 = Value;
  if (Value != &v232) {
LABEL_14:
  }
    free(v8);
LABEL_15:
  if (!v7)
  {
    uint64_t v223 = *(void *)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&Value, v223, 0);
    uint64_t v65 = v223;
    uint64_t v66 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v223);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v226, v65, v66);
    unsigned int v67 = 0;
    while (1)
    {
      BOOL v69 = Value == v226 && v231 == v227;
      if (v69 && v232 == v228) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&Value, (llvm::APInt *)&v219);
      if (v220 > 0x40)
      {
        uint64_t v68 = *(void *)v219;
        operator delete[](v219);
      }
      else
      {
        LODWORD(v68) = v219;
      }
      v67 += v68;
      ++v232;
    }
    unint64_t v70 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v70 = 0;
    }
    uint64_t Value = *(void **)(v70 + 8);
    uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    if (v67 != mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
    {
      __int16 v229 = 257;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      if (Value)
      {
        LODWORD(v219) = 3;
        unint64_t v220 = "expected lower bounds map to have ";
        uint64_t v221 = 34;
        unint64_t v77 = &v219;
        uint64_t v78 = (char *)v233;
        if (v234 >= v235)
        {
          unint64_t v192 = v234 + 1;
          if (v233 <= &v219 && (char *)v233 + 24 * v234 > (char *)&v219)
          {
            int64_t v211 = (char *)&v219 - (unsigned char *)v233;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v192, 24);
            uint64_t v78 = (char *)v233;
            unint64_t v77 = (void **)((char *)v233 + v211);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v192, 24);
            unint64_t v77 = &v219;
            uint64_t v78 = (char *)v233;
          }
        }
        uint64_t v79 = &v78[24 * v234];
        long long v80 = *(_OWORD *)v77;
        *((void *)v79 + 2) = v77[2];
        *(_OWORD *)uint64_t v79 = v80;
        uint64_t v81 = ++v234;
        if (Value)
        {
          LODWORD(v219) = 5;
          unint64_t v220 = (const char *)v67;
          uint64_t v82 = &v219;
          uint64_t v83 = (char *)v233;
          if (v81 >= v235)
          {
            unint64_t v193 = v81 + 1;
            BOOL v194 = (char *)v233 + 24 * v81 > (char *)&v219;
            if (v233 <= &v219 && v194)
            {
              int64_t v212 = (char *)&v219 - (unsigned char *)v233;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v193, 24);
              uint64_t v83 = (char *)v233;
              uint64_t v82 = (void **)((char *)v233 + v212);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v193, 24);
              uint64_t v82 = &v219;
              uint64_t v83 = (char *)v233;
            }
          }
          char v84 = &v83[24 * v234];
          long long v85 = *(_OWORD *)v82;
          *((void *)v84 + 2) = v82[2];
          *(_OWORD *)char v84 = v85;
          uint64_t v86 = ++v234;
          if (Value)
          {
            LODWORD(v219) = 3;
            unint64_t v220 = " results";
            uint64_t v221 = 8;
            uint64_t v87 = &v219;
            unint64_t v88 = (char *)v233;
            if (v86 >= v235)
            {
              unint64_t v196 = v86 + 1;
              BOOL v197 = (char *)v233 + 24 * v86 > (char *)&v219;
              if (v233 <= &v219 && v197)
              {
                int64_t v214 = (char *)&v219 - (unsigned char *)v233;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v196, 24);
                unint64_t v88 = (char *)v233;
                uint64_t v87 = (void **)((char *)v233 + v214);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v196, 24);
                uint64_t v87 = &v219;
                unint64_t v88 = (char *)v233;
              }
            }
            uint64_t v89 = &v88[24 * v234];
            long long v90 = *(_OWORD *)v87;
            *((void *)v89 + 2) = v87[2];
            *(_OWORD *)uint64_t v89 = v90;
            ++v234;
          }
        }
      }
      uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v241)
      {
        unint64_t v91 = (void **)__p;
        if (__p)
        {
          uint64_t v92 = v240;
          uint64_t v93 = __p;
          if (v240 != __p)
          {
            do
              uint64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
            while (v92 != v91);
            uint64_t v93 = __p;
          }
          uint64_t v240 = v91;
          operator delete(v93);
        }
        uint64_t v60 = v237;
        if (!v237) {
          goto LABEL_248;
        }
        uint64_t v94 = v238;
        char v62 = v237;
        if (v238 == v237) {
          goto LABEL_247;
        }
        do
        {
          unsigned int v96 = (void *)*--v94;
          uint64_t v95 = v96;
          *uint64_t v94 = 0;
          if (v96) {
            operator delete[](v95);
          }
        }
        while (v94 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    unint64_t v71 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v71 = 0;
    }
    uint64_t v223 = *(void *)(v71 + 32);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&Value, v223, 0);
    uint64_t v72 = v223;
    uint64_t v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v223);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v226, v72, v73);
    unsigned int v74 = 0;
    while (1)
    {
      BOOL v76 = Value == v226 && v231 == v227;
      if (v76 && v232 == v228) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&Value, (llvm::APInt *)&v219);
      if (v220 > 0x40)
      {
        uint64_t v75 = *(void *)v219;
        operator delete[](v219);
      }
      else
      {
        LODWORD(v75) = v219;
      }
      v74 += v75;
      ++v232;
    }
    unint64_t v97 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v97 = 0;
    }
    uint64_t Value = *(void **)(v97 + 40);
    uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    if (v74 != mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
    {
      __int16 v229 = 257;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      if (Value)
      {
        LODWORD(v219) = 3;
        unint64_t v220 = "expected upper bounds map to have ";
        uint64_t v221 = 34;
        uint64_t v107 = &v219;
        uint64_t v108 = (char *)v233;
        if (v234 >= v235)
        {
          unint64_t v195 = v234 + 1;
          if (v233 <= &v219 && (char *)v233 + 24 * v234 > (char *)&v219)
          {
            int64_t v213 = (char *)&v219 - (unsigned char *)v233;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v195, 24);
            uint64_t v108 = (char *)v233;
            uint64_t v107 = (void **)((char *)v233 + v213);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v195, 24);
            uint64_t v107 = &v219;
            uint64_t v108 = (char *)v233;
          }
        }
        uint64_t v109 = &v108[24 * v234];
        long long v110 = *(_OWORD *)v107;
        *((void *)v109 + 2) = v107[2];
        *(_OWORD *)uint64_t v109 = v110;
        uint64_t v111 = ++v234;
        if (Value)
        {
          LODWORD(v219) = 5;
          unint64_t v220 = (const char *)v74;
          uint64_t v112 = &v219;
          uint64_t v113 = (char *)v233;
          if (v111 >= v235)
          {
            unint64_t v198 = v111 + 1;
            BOOL v199 = (char *)v233 + 24 * v111 > (char *)&v219;
            if (v233 <= &v219 && v199)
            {
              int64_t v215 = (char *)&v219 - (unsigned char *)v233;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v198, 24);
              uint64_t v113 = (char *)v233;
              uint64_t v112 = (void **)((char *)v233 + v215);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v198, 24);
              uint64_t v112 = &v219;
              uint64_t v113 = (char *)v233;
            }
          }
          uint64_t v114 = &v113[24 * v234];
          long long v115 = *(_OWORD *)v112;
          *((void *)v114 + 2) = v112[2];
          *(_OWORD *)uint64_t v114 = v115;
          uint64_t v116 = ++v234;
          if (Value)
          {
            LODWORD(v219) = 3;
            unint64_t v220 = " results";
            uint64_t v221 = 8;
            long long v117 = &v219;
            int v118 = (char *)v233;
            if (v116 >= v235)
            {
              unint64_t v200 = v116 + 1;
              BOOL v201 = (char *)v233 + 24 * v116 > (char *)&v219;
              if (v233 <= &v219 && v201)
              {
                int64_t v216 = (char *)&v219 - (unsigned char *)v233;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v200, 24);
                int v118 = (char *)v233;
                long long v117 = (void **)((char *)v233 + v216);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v200, 24);
                long long v117 = &v219;
                int v118 = (char *)v233;
              }
            }
            uint64_t v119 = &v118[24 * v234];
            long long v120 = *(_OWORD *)v117;
            *((void *)v119 + 2) = v117[2];
            *(_OWORD *)uint64_t v119 = v120;
            ++v234;
          }
        }
      }
      uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v241)
      {
        uint64_t v121 = (void **)__p;
        if (__p)
        {
          uint64_t v122 = v240;
          uint64_t v123 = __p;
          if (v240 != __p)
          {
            do
              uint64_t v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
            while (v122 != v121);
            uint64_t v123 = __p;
          }
          uint64_t v240 = v121;
          operator delete(v123);
        }
        uint64_t v60 = v237;
        if (!v237) {
          goto LABEL_248;
        }
        uint64_t v124 = v238;
        char v62 = v237;
        if (v238 == v237) {
          goto LABEL_247;
        }
        do
        {
          uint64_t v126 = (void *)*--v124;
          uint64_t v125 = v126;
          void *v124 = 0;
          if (v126) {
            operator delete[](v125);
          }
        }
        while (v124 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    unint64_t v98 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v98 = 0;
    }
    uint64_t Value = *(void **)(v98 + 16);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
    uint64_t v99 = *(void *)this;
    if (v100 != *(_DWORD *)(*(void *)this + 36))
    {
      unint64_t v226 = "a reduction must be specified for each output";
      __int16 v229 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
      uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v241)
      {
        uint64_t v153 = (void **)__p;
        if (__p)
        {
          uint64_t v154 = v240;
          unint64_t v155 = __p;
          if (v240 != __p)
          {
            do
              uint64_t v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
            while (v154 != v153);
            unint64_t v155 = __p;
          }
          uint64_t v240 = v153;
          operator delete(v155);
        }
        uint64_t v60 = v237;
        if (!v237) {
          goto LABEL_248;
        }
        unint64_t v156 = v238;
        char v62 = v237;
        if (v238 == v237) {
          goto LABEL_247;
        }
        do
        {
          unint64_t v158 = (void *)*--v156;
          uint64_t v157 = v158;
          *unint64_t v156 = 0;
          if (v158) {
            operator delete[](v157);
          }
        }
        while (v156 != v60);
        goto LABEL_246;
      }
      return v56;
    }
    unint64_t v101 = *(unsigned int *)(v99 + 44);
    uint64_t v102 = v99 + 16 * ((v101 >> 23) & 1) + 64;
    if (!BYTE3(v101)) {
      uint64_t v102 = 0;
    }
    uint64_t v219 = *(void **)(v102 + 16);
    unint64_t v9 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v219);
    uint64_t v103 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v219);
    unint64_t v105 = (void **)(v103 + 8 * v104);
    if (v105 == v9)
    {
LABEL_221:
      uint64_t v159 = *(void *)this;
      unint64_t v160 = *(unsigned int *)(*(void *)this + 44);
      if ((v160 & 0x800000) != 0)
      {
        uint64_t v161 = *(void *)(v159 + 72);
        unint64_t v162 = *(unsigned int *)(v159 + 68);
      }
      else
      {
        uint64_t v161 = 0;
        unint64_t v162 = 0;
      }
      uint64_t v163 = v159 + 16 * ((v160 >> 23) & 1) + 64;
      if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
        uint64_t v164 = v163;
      }
      else {
        uint64_t v164 = 0;
      }
      uint64_t Value = *(void **)(v164 + 8);
      uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
      unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
      if (v162 >= NumInputs) {
        unint64_t v162 = NumInputs;
      }
      unint64_t v166 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
      if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
        unint64_t v166 = 0;
      }
      uint64_t Value = *(void **)(v166 + 8);
      uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
      unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (!verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>((uint64_t **)this, v161, v162, NumDims))return 0; {
      uint64_t UpperBoundsOperands = mlir::affine::AffineParallelOp::getUpperBoundsOperands(this);
      }
      uint64_t v170 = v169;
      uint64_t Value = (void *)mlir::affine::AffineParallelOp::getUpperBoundsMap(this);
      unsigned int v171 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      return verifyDimAndSymbolIdentifiers<mlir::affine::AffineForOp>((uint64_t **)this, UpperBoundsOperands, v170, v171) != 0;
    }
    unsigned int v106 = 0;
    while (2)
    {
      uint64_t v139 = (uint64_t)*v9;
      if (*(_UNKNOWN **)(*(void *)*v9 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v139 = 0;
      }
      uint64_t v223 = v139;
      if (!v139
        || (unint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v223), mlir::arith::symbolizeAtomicRMWKind(Int), !v141))
      {
        unint64_t v226 = "invalid reduction attribute";
        __int16 v229 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
        uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v241)
        {
          uint64_t v172 = (void **)__p;
          if (__p)
          {
            uint64_t v173 = v240;
            unint64_t v174 = __p;
            if (v240 != __p)
            {
              do
                uint64_t v173 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v173 - 1);
              while (v173 != v172);
              unint64_t v174 = __p;
            }
            uint64_t v240 = v172;
            operator delete(v174);
          }
          uint64_t v60 = v237;
          if (!v237) {
            goto LABEL_248;
          }
          uint64_t v175 = v238;
          char v62 = v237;
          if (v238 == v237) {
            goto LABEL_247;
          }
          do
          {
            uint64_t v177 = (void *)*--v175;
            uint64_t v176 = v177;
            *uint64_t v175 = 0;
            if (v177) {
              operator delete[](v176);
            }
          }
          while (v175 != v60);
          goto LABEL_246;
        }
        return v56;
      }
      unint64_t v142 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v223);
      unint64_t v143 = mlir::arith::symbolizeAtomicRMWKind(v142);
      if (v144)
      {
        uint64_t v145 = *(void *)this - 16 * (v106 + 1);
        if (v106 > 5) {
          uint64_t v145 = *(void *)this - 24 * (v106 - 5) - 96;
        }
        unint64_t v146 = (void *)(*(void *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8);
        switch(v143)
        {
          case 0uLL:
          case 3uLL:
          case 6uLL:
          case 9uLL:
            uint64_t v127 = *(void **)(*(void *)v146 + 136);
            if (v127 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
              || v127 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
            {
              goto LABEL_173;
            }
            goto LABEL_193;
          case 1uLL:
          case 0xAuLL:
          case 0xBuLL:
          case 0xCuLL:
            if (*(_UNKNOWN **)(*(void *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
              goto LABEL_193;
            }
            goto LABEL_173;
          case 2uLL:
            goto LABEL_173;
          case 4uLL:
          case 7uLL:
            if (*(_UNKNOWN **)(*(void *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
              unint64_t v146 = 0;
            }
            uint64_t Value = v146;
            if (!v146 || mlir::IntegerType::getSignedness((mlir::IntegerType *)&Value) != 1) {
              goto LABEL_193;
            }
            goto LABEL_173;
          case 5uLL:
          case 8uLL:
            if (*(_UNKNOWN **)(*(void *)v146 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
              unint64_t v146 = 0;
            }
            uint64_t Value = v146;
            if (!v146 || mlir::IntegerType::getSignedness((mlir::IntegerType *)&Value) != 2) {
              goto LABEL_193;
            }
LABEL_173:
            ++v106;
            if (++v9 != v105) {
              continue;
            }
            goto LABEL_221;
          default:
LABEL_193:
            unint64_t v226 = "result type cannot match reduction attribute";
            __int16 v229 = 259;
            mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v226, (uint64_t)&Value);
            uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            if (Value) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
            }
            if (!v241) {
              return v56;
            }
            unint64_t v147 = (void **)__p;
            if (__p)
            {
              uint64_t v148 = v240;
              unint64_t v149 = __p;
              if (v240 != __p)
              {
                do
                  uint64_t v148 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v148 - 1);
                while (v148 != v147);
                unint64_t v149 = __p;
              }
              uint64_t v240 = v147;
              operator delete(v149);
            }
            uint64_t v60 = v237;
            if (!v237) {
              goto LABEL_248;
            }
            uint64_t v150 = v238;
            char v62 = v237;
            if (v238 == v237) {
              goto LABEL_247;
            }
            do
            {
              unint64_t v152 = (void *)*--v150;
              uint64_t v151 = v152;
              *uint64_t v150 = 0;
              if (v152) {
                operator delete[](v151);
              }
            }
            while (v150 != v60);
            break;
        }
        goto LABEL_246;
      }
      break;
    }
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_307;
  }
LABEL_16:
  __int16 v222 = 257;
  mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v219, (uint64_t)&Value);
  if (Value)
  {
    unint64_t v9 = &v233;
    LODWORD(v226) = 3;
    unint64_t v227 = "the number of region arguments (";
    uint64_t v228 = 32;
    uint64_t v10 = &v226;
    unint64_t v11 = (char *)v233;
    if (v234 >= v235)
    {
      unint64_t v179 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        int64_t v202 = (char *)&v226 - (unsigned char *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v179, 24);
        unint64_t v11 = (char *)v233;
        uint64_t v10 = (void **)((char *)v233 + v202);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v179, 24);
        uint64_t v10 = &v226;
        unint64_t v11 = (char *)v233;
      }
    }
    uint64_t v12 = &v11[24 * v234];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)uint64_t v12 = v13;
    ++v234;
    if (Value)
    {
      uint64_t v14 = *(void *)(((*(void *)this
                        + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                        + ((*(_DWORD *)(*(void *)this + 44) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(*(void *)this + 40)
                      + 8);
      if (v14) {
        uint64_t v15 = v14 - 8;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = *(void *)(v15 + 56) - *(void *)(v15 + 48);
      LODWORD(v226) = 5;
      unint64_t v227 = (const char *)(v16 >> 3);
      unint64_t v17 = &v226;
      uint64_t v18 = (char *)v233;
      if (v234 >= v235)
      {
        unint64_t v183 = v234 + 1;
        if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
        {
          int64_t v206 = (char *)&v226 - (unsigned char *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v183, 24);
          uint64_t v18 = (char *)v233;
          unint64_t v17 = (void **)((char *)v233 + v206);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v183, 24);
          unint64_t v17 = &v226;
          uint64_t v18 = (char *)v233;
        }
      }
      uint64_t v19 = &v18[24 * v234];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      uint64_t v21 = ++v234;
      if (Value)
      {
        LODWORD(v226) = 3;
        unint64_t v227 = ") and the number of map groups for lower (";
        uint64_t v228 = 42;
        unsigned int v22 = &v226;
        unsigned long long v23 = v233;
        if (v21 < v235)
        {
LABEL_25:
          unsigned long long v24 = &v23[24 * v234];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = v22[2];
          *(_OWORD *)unsigned long long v24 = v25;
          ++v234;
          goto LABEL_26;
        }
        unint64_t v190 = v21 + 1;
        BOOL v191 = (char *)v233 + 24 * v21 > (char *)&v226;
        if (v233 > &v226 || !v191)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v190, 24);
          unsigned int v22 = &v226;
          unsigned long long v23 = v233;
          goto LABEL_25;
        }
LABEL_307:
        v210 = (char *)((char *)&v226 - v23);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v236, v190, 24);
        unsigned long long v23 = v233;
        unsigned int v22 = (void **)&v210[(void)v233];
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  uint64_t v218 = *(void *)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  uint64_t v26 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v218);
  if (Value)
  {
    LODWORD(v226) = 2;
    unint64_t v227 = (const char *)v26;
    uint64_t v27 = &v226;
    uint64_t v28 = (char *)v233;
    if (v234 >= v235)
    {
      unint64_t v180 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        int64_t v203 = (char *)&v226 - (unsigned char *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v180, 24);
        uint64_t v28 = (char *)v233;
        uint64_t v27 = (void **)((char *)v233 + v203);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v180, 24);
        uint64_t v27 = &v226;
        uint64_t v28 = (char *)v233;
      }
    }
    unint64_t v29 = &v28[24 * v234];
    long long v30 = *(_OWORD *)v27;
    *((void *)v29 + 2) = v27[2];
    *(_OWORD *)unint64_t v29 = v30;
    uint64_t v31 = ++v234;
    if (Value)
    {
      LODWORD(v226) = 3;
      unint64_t v227 = ") and upper bound (";
      uint64_t v228 = 19;
      uint64_t v32 = &v226;
      long long v33 = (char *)v233;
      if (v31 >= v235)
      {
        unint64_t v184 = v31 + 1;
        BOOL v185 = (char *)v233 + 24 * v31 > (char *)&v226;
        if (v233 <= &v226 && v185)
        {
          int64_t v207 = (char *)&v226 - (unsigned char *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v184, 24);
          long long v33 = (char *)v233;
          uint64_t v32 = (void **)((char *)v233 + v207);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v184, 24);
          uint64_t v32 = &v226;
          long long v33 = (char *)v233;
        }
      }
      unint64_t v34 = &v33[24 * v234];
      long long v35 = *(_OWORD *)v32;
      *((void *)v34 + 2) = v32[2];
      *(_OWORD *)unint64_t v34 = v35;
      ++v234;
    }
  }
  unint64_t v36 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v36 = 0;
  }
  uint64_t v217 = *(void *)(v36 + 32);
  uint64_t v37 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v217);
  if (Value)
  {
    LODWORD(v226) = 2;
    unint64_t v227 = (const char *)v37;
    uint64_t v38 = &v226;
    unint64_t v39 = (char *)v233;
    if (v234 >= v235)
    {
      unint64_t v181 = v234 + 1;
      if (v233 <= &v226 && (char *)v233 + 24 * v234 > (char *)&v226)
      {
        int64_t v204 = (char *)&v226 - (unsigned char *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v181, 24);
        unint64_t v39 = (char *)v233;
        uint64_t v38 = (void **)((char *)v233 + v204);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v181, 24);
        uint64_t v38 = &v226;
        unint64_t v39 = (char *)v233;
      }
    }
    uint64_t v40 = &v39[24 * v234];
    long long v41 = *(_OWORD *)v38;
    *((void *)v40 + 2) = v38[2];
    *(_OWORD *)uint64_t v40 = v41;
    uint64_t v42 = ++v234;
    if (Value)
    {
      LODWORD(v226) = 3;
      unint64_t v227 = "), and the number of steps (";
      uint64_t v228 = 28;
      uint64_t v43 = &v226;
      uint64_t v44 = (char *)v233;
      if (v42 >= v235)
      {
        unint64_t v186 = v42 + 1;
        BOOL v187 = (char *)v233 + 24 * v42 > (char *)&v226;
        if (v233 <= &v226 && v187)
        {
          int64_t v208 = (char *)&v226 - (unsigned char *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v186, 24);
          uint64_t v44 = (char *)v233;
          uint64_t v43 = (void **)((char *)v233 + v208);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v186, 24);
          uint64_t v43 = &v226;
          uint64_t v44 = (char *)v233;
        }
      }
      uint64_t v45 = &v44[24 * v234];
      long long v46 = *(_OWORD *)v43;
      *((void *)v45 + 2) = v43[2];
      *(_OWORD *)uint64_t v45 = v46;
      ++v234;
    }
  }
  mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v226);
  if (Value)
  {
    LODWORD(v223) = 5;
    unint64_t v224 = v227;
    uint64_t v47 = &v223;
    uint64_t v48 = (char *)v233;
    if (v234 >= v235)
    {
      unint64_t v182 = v234 + 1;
      if (v233 <= &v223 && (char *)v233 + 24 * v234 > (char *)&v223)
      {
        int64_t v205 = (char *)&v223 - (unsigned char *)v233;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v182, 24);
        uint64_t v48 = (char *)v233;
        uint64_t v47 = (uint64_t *)((char *)v233 + v205);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v182, 24);
        uint64_t v47 = &v223;
        uint64_t v48 = (char *)v233;
      }
    }
    uint64_t v49 = &v48[24 * v234];
    long long v50 = *(_OWORD *)v47;
    *((void *)v49 + 2) = v47[2];
    *(_OWORD *)uint64_t v49 = v50;
    uint64_t v51 = ++v234;
    if (Value)
    {
      LODWORD(v223) = 3;
      unint64_t v224 = (unint64_t)") must all match";
      uint64_t v225 = 16;
      uint64_t v52 = &v223;
      uint64_t v53 = (char *)v233;
      if (v51 >= v235)
      {
        unint64_t v188 = v51 + 1;
        BOOL v189 = (char *)v233 + 24 * v51 > (char *)&v223;
        if (v233 <= &v223 && v189)
        {
          int64_t v209 = (char *)&v223 - (unsigned char *)v233;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v188, 24);
          uint64_t v53 = (char *)v233;
          uint64_t v52 = (uint64_t *)((char *)v233 + v209);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, v236, v188, 24);
          uint64_t v52 = &v223;
          uint64_t v53 = (char *)v233;
        }
      }
      __int16 v54 = &v53[24 * v234];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = v52[2];
      *(_OWORD *)__int16 v54 = v55;
      ++v234;
    }
  }
  uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (v226 != &v228) {
    free(v226);
  }
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v241)
  {
    uint64_t v57 = (void **)__p;
    if (__p)
    {
      uint64_t v58 = v240;
      char v59 = __p;
      if (v240 != __p)
      {
        do
          uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
        while (v58 != v57);
        char v59 = __p;
      }
      uint64_t v240 = v57;
      operator delete(v59);
    }
    uint64_t v60 = v237;
    if (!v237) {
      goto LABEL_248;
    }
    uint64_t v61 = v238;
    char v62 = v237;
    if (v238 == v237)
    {
LABEL_247:
      unint64_t v238 = v60;
      operator delete(v62);
LABEL_248:
      if (v233 != v236) {
        free(v233);
      }
      return v56;
    }
    do
    {
      char v64 = (void *)*--v61;
      int v63 = v64;
      void *v61 = 0;
      if (v64) {
        operator delete[](v63);
      }
    }
    while (v61 != v60);
LABEL_246:
    char v62 = v237;
    goto LABEL_247;
  }
  return v56;
}

uint64_t mlir::affine::AffineValueMap::canonicalize(mlir::affine::AffineValueMap *this)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void **)((char *)this + 96);
  unint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  if (&v16 != (void **)((char *)this + 96))
  {
    unsigned int v3 = *((_DWORD *)this + 26);
    if (v3)
    {
      if (v3 < 5)
      {
        uint64_t v5 = v18;
        unsigned int v4 = *((_DWORD *)this + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, *((unsigned int *)this + 26), 8);
        unsigned int v4 = *((_DWORD *)this + 26);
        if (!v4)
        {
LABEL_8:
          LODWORD(v17) = v3;
          goto LABEL_9;
        }
        uint64_t v5 = v16;
      }
      memcpy(v5, *v2, 8 * v4);
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t AffineMap = mlir::affine::AffineValueMap::getAffineMap(this);
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&AffineMap, (uint64_t)&v16);
  uint64_t v6 = mlir::affine::AffineValueMap::getAffineMap(this);
  uint64_t v7 = AffineMap;
  if (AffineMap == v6)
  {
    unsigned int v9 = v17;
    uint64_t v8 = v16;
    if (v17 == *((_DWORD *)this + 26))
    {
      if (!v17)
      {
LABEL_16:
        uint64_t v11 = 0;
        if (v16 == v18) {
          return v11;
        }
        goto LABEL_19;
      }
      uint64_t v10 = 0;
      while (*(void *)((char *)v16 + v10) == *(void *)((char *)*v2 + v10))
      {
        v10 += 8;
        if (8 * v17 == v10) {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = v16;
    unsigned int v9 = v17;
  }
  mlir::ValueRange::ValueRange(v15, (uint64_t)v8, v9);
  mlir::ValueRange::ValueRange(v14, 0, 0);
  mlir::affine::AffineValueMap::reset((uint64_t)this, v7, v15[0], v15[1], v14[0], v14[1]);
  uint64_t v11 = 1;
  uint64_t v8 = v16;
  if (v16 != v18) {
LABEL_19:
  }
    free(v8);
  return v11;
}

uint64_t mlir::affine::AffineParallelOp::fold(uint64_t *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a1;
  mlir::affine::AffineParallelOp::getLowerBoundsValueMap((mlir::affine::AffineParallelOp *)&v12, (uint64_t)v16);
  unsigned __int8 v1 = mlir::affine::AffineValueMap::canonicalize((mlir::affine::AffineValueMap *)v16);
  mlir::affine::AffineParallelOp::getUpperBoundsValueMap((mlir::affine::AffineParallelOp *)&v12, (uint64_t)v15);
  unsigned __int8 v2 = mlir::affine::AffineValueMap::canonicalize((mlir::affine::AffineValueMap *)v15);
  if (v1 | v2)
  {
    unsigned __int8 v3 = v2;
    if (v1)
    {
      uint64_t Operands = mlir::affine::AffineValueMap::getOperands((mlir::affine::AffineValueMap *)v16);
      mlir::ValueRange::ValueRange(v14, Operands, v5);
      unint64_t AffineMap = mlir::affine::AffineValueMap::getAffineMap((mlir::affine::AffineValueMap *)v16);
      mlir::affine::AffineParallelOp::setLowerBounds(&v12, v14[0], v14[1], AffineMap);
    }
    if (v3)
    {
      uint64_t v7 = mlir::affine::AffineValueMap::getOperands((mlir::affine::AffineValueMap *)v15);
      mlir::ValueRange::ValueRange(v13, v7, v8);
      unint64_t v9 = mlir::affine::AffineValueMap::getAffineMap((mlir::affine::AffineValueMap *)v15);
      mlir::affine::AffineParallelOp::setUpperBounds(&v12, v13[0], v13[1], v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  mlir::affine::AffineValueMap::~AffineValueMap((mlir::affine::AffineValueMap *)v15);
  mlir::affine::AffineValueMap::~AffineValueMap((mlir::affine::AffineValueMap *)v16);
  return v10;
}

void mlir::affine::AffineParallelOp::print(mlir::affine::AffineParallelOp *this, mlir::OpAsmPrinter *a2)
{
  v105[2] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 1uLL)
  {
    _WORD *v5 = 10272;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, " (", 2uLL);
  }
  uint64_t v6 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = v9 - (void)v8;
  if (v11)
  {
    uint64_t v12 = (llvm::raw_ostream *)v10;
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *v8);
    if (v11 != 8)
    {
      uint64_t v44 = v11 >> 3;
      uint64_t v45 = v8 + 1;
      uint64_t v46 = 8 * v44 - 8;
      do
      {
        uint64_t v48 = (_WORD *)*((void *)v12 + 4);
        if (*((void *)v12 + 3) - (void)v48 > 1uLL)
        {
          *uint64_t v48 = 8236;
          *((void *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
        uint64_t v47 = *v45++;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v47);
        v46 -= 8;
      }
      while (v46);
    }
  }
  long long v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 4)
  {
    *(unsigned char *)(v14 + 4) = 40;
    *(_DWORD *)uint64_t v14 = 540876841;
    *((void *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, ") = (", 5uLL);
  }
  uint64_t v15 = *(void *)this;
  unint64_t v16 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v17 = *(void *)this + 16 * ((v16 >> 23) & 1);
  uint64_t v20 = *(void *)(v17 + 64);
  uint64_t v18 = v17 + 64;
  uint64_t v19 = v20;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v18 = 0;
  }
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v16 & 0x800000) != 0)
  {
    uint64_t v22 = *(void *)(v15 + 72);
    unint64_t v23 = *(unsigned int *)(v15 + 68);
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
  }
  uint64_t Value = *(const char **)(v18 + 8);
  uint64_t Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  unsigned int NumInputs = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  if (v23 >= NumInputs) {
    unint64_t v25 = NumInputs;
  }
  else {
    unint64_t v25 = v23;
  }
  mlir::ValueRange::ValueRange(v105, v22, v25);
  printMinMaxBound((uint64_t)a2, v21, v19, v105[0], v105[1], "max", 3uLL);
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = *((void *)v26 + 4);
  if ((unint64_t)(*((void *)v26 + 3) - v27) > 5)
  {
    *(_WORD *)(v27 + 4) = 10272;
    *(_DWORD *)uint64_t v27 = 1869881385;
    *((void *)v26 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v26, ") to (", 6uLL);
  }
  uint64_t v28 = *(void *)this;
  unint64_t v29 = *(unsigned int *)(*(void *)this + 44);
  long long v30 = (void *)(*(void *)this + 16 * ((v29 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    long long v30 = 0;
  }
  uint64_t v32 = v30[4];
  uint64_t v31 = v30[5];
  if ((v29 & 0x800000) != 0)
  {
    uint64_t v33 = *(void *)(v28 + 72);
    uint64_t v34 = *(unsigned int *)(v28 + 68);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  uint64_t Value = (const char *)v30[1];
  uint64_t Value = (const char *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  unsigned int v35 = mlir::AffineMap::getNumInputs((mlir::AffineMap *)&Value);
  mlir::ValueRange::ValueRange(v104, v33 + 32 * v35, v34 - v35);
  printMinMaxBound((uint64_t)a2, v31, v32, v104[0], v104[1], "min", 3uLL);
  unint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v37 = (unsigned char *)*((void *)v36 + 4);
  if ((unint64_t)v37 >= *((void *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, 41);
    mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v101);
    uint64_t v38 = v102;
    if (!v102) {
      goto LABEL_46;
    }
  }
  else
  {
    *((void *)v36 + 4) = v37 + 1;
    *uint64_t v37 = 41;
    mlir::affine::AffineParallelOp::getSteps(this, (uint64_t)&v101);
    uint64_t v38 = v102;
    if (!v102) {
      goto LABEL_46;
    }
  }
  unint64_t v39 = v101;
  uint64_t v40 = 8 * v38;
  while (*v39 == 1)
  {
    ++v39;
    v40 -= 8;
    if (!v40) {
      goto LABEL_46;
    }
  }
  long long v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v42 = (_DWORD *)*((void *)v41 + 4);
  if (*((void *)v41 + 3) - (void)v42 <= 6uLL)
  {
    llvm::raw_ostream::write(v41, " step (", 7uLL);
    uint64_t v43 = v102;
    if (!v102) {
      goto LABEL_44;
    }
LABEL_43:
    uint64_t v49 = (unint64_t *)v101;
    long long v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    llvm::raw_ostream::operator<<(v50, *v49);
    if (v43 != 1)
    {
      uint64_t v81 = v49 + 1;
      uint64_t v82 = 8 * v43 - 8;
      do
      {
        long long v85 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v86 = (_WORD *)*((void *)v85 + 4);
        if (*((void *)v85 + 3) - (void)v86 > 1uLL)
        {
          _WORD *v86 = 8236;
          *((void *)v85 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v85, ", ", 2uLL);
        }
        uint64_t v83 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        unint64_t v84 = *v81++;
        llvm::raw_ostream::operator<<(v83, v84);
        v82 -= 8;
      }
      while (v82);
    }
    goto LABEL_44;
  }
  *(_DWORD *)((char *)v42 + 3) = 673214565;
  *uint64_t v42 = 1702130464;
  *((void *)v41 + 4) += 7;
  uint64_t v43 = v102;
  if (v102) {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v52 = (unsigned char *)*((void *)v51 + 4);
  if ((unint64_t)v52 >= *((void *)v51 + 3))
  {
    llvm::raw_ostream::write(v51, 41);
    if (!*(_DWORD *)(*(void *)this + 36)) {
      goto LABEL_67;
    }
    goto LABEL_47;
  }
  *((void *)v51 + 4) = v52 + 1;
  *uint64_t v52 = 41;
LABEL_46:
  if (!*(_DWORD *)(*(void *)this + 36)) {
    goto LABEL_67;
  }
LABEL_47:
  uint64_t v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v54 = *((void *)v53 + 4);
  if ((unint64_t)(*((void *)v53 + 3) - v54) > 8)
  {
    *(unsigned char *)(v54 + 8) = 40;
    *(void *)uint64_t v54 = *(void *)" reduce (";
    *((void *)v53 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v53, " reduce (", 9uLL);
  }
  unint64_t v55 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v55 = 0;
  }
  uint64_t v87 = *(const char **)(v55 + 16);
  uint64_t v56 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v87);
  uint64_t v57 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v87);
  char v59 = (uint64_t *)(v57 + 8 * v58);
  uint64_t Value = (const char *)a2;
  if (v59 != v56)
  {
    uint64_t v61 = *v56;
    uint64_t v60 = v56 + 1;
    mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v61);
    while (v60 != v59)
    {
      while (1)
      {
        int v63 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        char v64 = (_WORD *)*((void *)v63 + 4);
        if (*((void *)v63 + 3) - (void)v64 <= 1uLL) {
          break;
        }
        *char v64 = 8236;
        *((void *)v63 + 4) += 2;
        uint64_t v62 = *v60++;
        mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v62);
        if (v60 == v59) {
          goto LABEL_58;
        }
      }
      llvm::raw_ostream::write(v63, ", ", 2uLL);
      uint64_t v65 = *v60++;
      mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>((uint64_t *)&Value, v65);
    }
  }
LABEL_58:
  uint64_t v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v67 = *((void *)v66 + 4);
  if ((unint64_t)(*((void *)v66 + 3) - v67) > 5)
  {
    *(_WORD *)(v67 + 4) = 10272;
    *(_DWORD *)uint64_t v67 = 1043144745;
    *((void *)v66 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v66, ") -> (", 6uLL);
  }
  uint64_t v68 = *(unsigned int *)(*(void *)this + 36);
  BOOL v69 = (const char *)(*(void *)this - 16);
  if (!v68) {
    BOOL v69 = 0;
  }
  uint64_t v87 = v69;
  uint64_t v88 = v68;
  mlir::OperandRange::getTypes((uint64_t *)&v87, (uint64_t *)&Value);
  uint64_t v87 = ", ";
  uint64_t v88 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)Value, v90, (uint64_t)v91, v92, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v87);
  unint64_t v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v71 = (unsigned char *)*((void *)v70 + 4);
  if (*((unsigned char **)v70 + 3) == v71)
  {
    llvm::raw_ostream::write(v70, ")", 1uLL);
  }
  else
  {
    unsigned char *v71 = 41;
    ++*((void *)v70 + 4);
  }
LABEL_67:
  uint64_t v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v73 = (unsigned char *)*((void *)v72 + 4);
  if ((unint64_t)v73 >= *((void *)v72 + 3))
  {
    llvm::raw_ostream::write(v72, 32);
    uint64_t v74 = *(void *)this;
    unint64_t v75 = *(unsigned int *)(*(void *)this + 44);
    if ((v75 & 0x7FFFFF) != 0) {
      goto LABEL_69;
    }
  }
  else
  {
    *((void *)v72 + 4) = v73 + 1;
    *uint64_t v73 = 32;
    uint64_t v74 = *(void *)this;
    unint64_t v75 = *(unsigned int *)(*(void *)this + 44);
    if ((v75 & 0x7FFFFF) != 0)
    {
LABEL_69:
      unint64_t v76 = ((v74 + 16 * ((v75 >> 23) & 1) + ((v75 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v74 + 40);
      goto LABEL_72;
    }
  }
  unint64_t v76 = 0;
LABEL_72:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v76, 0, *(_DWORD *)(v74 + 36) != 0, 0);
  unint64_t v77 = *(mlir::Operation **)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    uint64_t Value = (const char *)mlir::Operation::getAttrDictionary(v77);
    p_uint64_t Value = (mlir::ArrayAttr *)&Value;
  }
  else
  {
    p_uint64_t Value = (mlir::Operation *)((char *)v77 + 56);
  }
  uint64_t v79 = mlir::ArrayAttr::getValue(p_Value);
  uint64_t Value = "reductions";
  uint64_t v90 = 10;
  unint64_t v91 = "lowerBoundsMap";
  uint64_t v92 = 14;
  uint64_t v93 = "lowerBoundsGroups";
  uint64_t v94 = 17;
  uint64_t v95 = "upperBoundsMap";
  uint64_t v96 = 14;
  unint64_t v97 = "upperBoundsGroups";
  uint64_t v98 = 17;
  uint64_t v99 = "steps";
  uint64_t v100 = 5;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, v79, v80, &Value, 6);
  if (v101 != &v103) {
    free(v101);
  }
}

void printMinMaxBound(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, const void *a6, size_t a7)
{
  unint64_t v8 = a5;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  unint64_t v43 = a4;
  unint64_t v44 = a5;
  uint64_t Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v42);
  unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  unint64_t v13 = v8 - NumDims;
  if (v8 >= NumDims) {
    unint64_t v8 = NumDims;
  }
  if (NumDims) {
    unint64_t v14 = mlir::ValueRange::offset_base(&v43, NumDims);
  }
  else {
    unint64_t v14 = a4;
  }
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v37, a3, 0);
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v41);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v34, a3, NumElements);
  unsigned int v16 = 0;
  while (1)
  {
    BOOL v17 = v37 == v34 && v38 == v35;
    if (v17 && v39 == v36) {
      break;
    }
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v37, (llvm::APInt *)&__p);
    if (v16)
    {
      uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v19 = (_WORD *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 > 1uLL)
      {
        *uint64_t v19 = 8236;
        *((void *)v18 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v18, ", ", 2uLL);
      }
    }
    if (v33 >= 0x41) {
      p_p = (unsigned int *)__p;
    }
    else {
      p_p = (unsigned int *)&__p;
    }
    unsigned int v21 = *p_p;
    if (*p_p == 1)
    {
      uint64_t Result = mlir::AffineMap::getResult((mlir::AffineMap *)&Value, v16);
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(void *)a1 + 248))(a1, Result, a4, v8, v14, v13);
      if (v33 < 0x41) {
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      unsigned long long v24 = (void *)*((void *)v23 + 4);
      if (a7 <= *((void *)v23 + 3) - (void)v24)
      {
        if (a7)
        {
          memcpy(v24, a6, a7);
          *((void *)v23 + 4) += a7;
        }
      }
      else
      {
        llvm::raw_ostream::write(v23, (const char *)a6, a7);
      }
      unint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
      if ((unint64_t)v26 >= *((void *)v25 + 3))
      {
        llvm::raw_ostream::write(v25, 40);
      }
      else
      {
        *((void *)v25 + 4) = v26 + 1;
        *uint64_t v26 = 40;
      }
      unint64_t SliceMap = mlir::AffineMap::getSliceMap(&Value, v16, v21);
      uint64_t v28 = mlir::AffineMapAttr::get(SliceMap);
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a1 + 240))(a1, v28, v43, v44);
      unint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      long long v30 = (unsigned char *)*((void *)v29 + 4);
      if ((unint64_t)v30 >= *((void *)v29 + 3))
      {
        llvm::raw_ostream::write(v29, 41);
        if (v33 < 0x41) {
          goto LABEL_7;
        }
      }
      else
      {
        *((void *)v29 + 4) = v30 + 1;
        unsigned char *v30 = 41;
        if (v33 < 0x41) {
          goto LABEL_7;
        }
      }
    }
    if (__p) {
      operator delete[](__p);
    }
LABEL_7:
    v16 += v21;
    ++v39;
  }
}

uint64_t mlir::affine::AffineParallelOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  v64[32] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v62 = v64;
  uint64_t v63 = 0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t, void, void))(*(void *)a1 + 736))(a1, &v62, 1, 0, 0)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 136))(a1)|| !parseAffineMapWithMinMax(a1, a2, 1)|| (__int16 v48 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v44))|| !parseAffineMapWithMinMax(a1, a2, 0))
  {
    uint64_t v16 = 0;
    goto LABEL_19;
  }
  uint64_t v43 = 0;
  v60[0] = v61;
  v60[1] = (void *)0x400000000;
  v61[8] = 4;
  v58[0] = v59;
  v58[1] = (void *)0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "step", 4))
  {
    uint64_t v55 = 1;
    llvm::SmallVector<long long,4u>::SmallVector((uint64_t)&v44, v63, (unint64_t *)&v55);
    uint64_t I64ArrayAttr = mlir::Builder::getI64ArrayAttr((uint64_t *)v4, (void **)v44, v45);
    mlir::OperationState::addAttribute(a2, (uint64_t)"steps", 5, I64ArrayAttr);
    uint64_t v19 = (void **)v44;
    if (v44 == &v46) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t *, const char *, uint64_t, void **, uint64_t))(*(void *)a1 + 704))(a1, v58, &v43, "steps", 5, v60, 1))
  {
    uint64_t v16 = 0;
    goto LABEL_42;
  }
  uint64_t v55 = (uint64_t)v57;
  uint64_t v56 = 0x400000000;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v43);
  uint64_t Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (!v8)
  {
    unsigned int v15 = v56;
LABEL_61:
    uint64_t v38 = mlir::Builder::getI64ArrayAttr((uint64_t *)v4, (void **)v55, v15);
    mlir::OperationState::addAttribute(a2, (uint64_t)"steps", 5, v38);
    uint64_t v19 = (void **)v55;
    if ((void *)v55 == v57)
    {
LABEL_24:
      unint64_t v44 = &v46;
      uint64_t v45 = 0x400000000;
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "reduce", 6))
      {
        if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 264))(a1)) {
          goto LABEL_38;
        }
        uint64_t v55 = (uint64_t)a1;
        uint64_t v56 = (uint64_t)v4;
        v57[0] = &v44;
        if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void, uint64_t (*)(uint64_t *), uint64_t *, void, void))(*(void *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::affine::AffineParallelOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, &v55, 0, 0)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 280))(a1))
        {
          goto LABEL_38;
        }
      }
      uint64_t ArrayAttr = mlir::Builder::getArrayAttr(v4, (uint64_t)v44, v45);
      mlir::OperationState::addAttribute(a2, (uint64_t)"reductions", 10, ArrayAttr);
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64))goto LABEL_38; {
      unsigned int v21 = (void *)mlir::OperationState::addRegion(a2);
      }
      uint64_t v22 = (char *)v62;
      uint64_t v23 = v63;
      if (v63)
      {
        unsigned long long v24 = (char *)v62;
        if (((v63 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_71;
        }
        uint64_t v25 = ((v63 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
        unsigned long long v24 = (char *)v62 + 64 * (v25 & 0x7FFFFFFFFFFFFFELL);
        uint64_t v26 = (uint64_t *)((char *)v62 + 96);
        uint64_t v27 = v25 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          *(v26 - 8) = IndexType;
          *uint64_t v26 = IndexType;
          v26 += 16;
          v27 -= 2;
        }
        while (v27);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_71:
          do
          {
            *((void *)v24 + 4) = IndexType;
            v24 += 64;
          }
          while (v24 != &v22[64 * v23]);
        }
      }
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, void *, char *))(*(void *)a1 + 744))(a1, v21, v22)&& (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112))
      {
        mlir::impl::ensureRegionTerminator(v21, v4, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineParallelOp>::buildTerminator);
        uint64_t v16 = 1;
      }
      else
      {
LABEL_38:
        uint64_t v16 = 0;
      }
      uint64_t v28 = (void **)v44;
      if (v44 == &v46) {
        goto LABEL_42;
      }
      goto LABEL_40;
    }
LABEL_23:
    free(v19);
    goto LABEL_24;
  }
  uint64_t v9 = (void **)Results;
  uint64_t v10 = 8 * v8;
  while (1)
  {
    uint64_t v11 = *v9;
    unint64_t v44 = *v9;
    uint64_t v12 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v44) == 5 ? (uint64_t)v11 : 0;
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v44, v12);
    uint64_t v41 = v44;
    if (!v44) {
      break;
    }
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v41);
    uint64_t v14 = v56;
    if (v56 >= (unint64_t)HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
      uint64_t v14 = v56;
    }
    *(void *)(v55 + 8 * v14) = LHS;
    unsigned int v15 = v56 + 1;
    LODWORD(v56) = v56 + 1;
    ++v9;
    v10 -= 8;
    if (!v10) {
      goto LABEL_61;
    }
  }
  uint64_t v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
  uint64_t v39 = "steps must be constant integers";
  __int16 v40 = 259;
  (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v44, a1, v29, &v39);
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    long long v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v53;
      uint64_t v32 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v53 = v30;
      operator delete(v32);
    }
    unsigned int v33 = v50;
    if (v50)
    {
      uint64_t v34 = v51;
      char v35 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v37 = (void *)*--v34;
          uint64_t v36 = v37;
          void *v34 = 0;
          if (v37) {
            operator delete[](v36);
          }
        }
        while (v34 != v33);
        char v35 = v50;
      }
      uint64_t v51 = v33;
      operator delete(v35);
    }
    if (v47 != &v49) {
      free(v47);
    }
  }
  uint64_t v28 = (void **)v55;
  if ((void *)v55 == v57) {
    goto LABEL_42;
  }
LABEL_40:
  free(v28);
LABEL_42:
  if (v58[0] != v59) {
    free(v58[0]);
  }
  if (v60[0] != v61) {
    free(v60[0]);
  }
LABEL_19:
  if (v62 != v64) {
    free(v62);
  }
  return v16;
}

uint64_t parseAffineMapWithMinMax(mlir::AsmParser *a1, mlir::Attribute *a2, int a3)
{
  v78[6] = *MEMORY[0x1E4F143B8];
  int v52 = a3;
  v51[0] = "__pseudo_bound_map";
  v51[1] = 18;
  if (a3) {
    unint64_t v5 = "lowerBoundsMap";
  }
  else {
    unint64_t v5 = "upperBoundsMap";
  }
  if (a3) {
    uint64_t v6 = "lowerBoundsGroups";
  }
  else {
    uint64_t v6 = "upperBoundsGroups";
  }
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 264))(a1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 288))(a1))
  {
    uint64_t v7 = (mlir::AffineMap **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
    Emptyunint64_t AffineMap = mlir::Builder::getEmptyAffineMap(v7, v8);
    uint64_t v10 = mlir::AffineMapAttr::get(EmptyAffineMap);
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    LOWORD(v46) = 261;
    uint64_t v42 = (void *)v5;
    uint64_t v43 = 14;
    uint64_t v12 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v42);
    mlir::NamedAttribute::NamedAttribute(&v76, v12, v10);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v76, v77);
    unint64_t v13 = (uint64_t *)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
    uint64_t I32TensorAttr = mlir::Builder::getI32TensorAttr(v13, 0, 0);
    unsigned int v15 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    LOWORD(v46) = 261;
    uint64_t v42 = (void *)v6;
    uint64_t v43 = 17;
    uint64_t v16 = mlir::StringAttr::get(v15, (mlir::MLIRContext *)&v42);
    mlir::NamedAttribute::NamedAttribute(&v76, v16, I32TensorAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v76, v77);
    return 1;
  }
  unint64_t v76 = (char *)v78;
  uint64_t v77 = 0x600000000;
  uint64_t v73 = (uint64_t *)v75;
  uint64_t v74 = 0x100000000;
  unint64_t v70 = v72;
  uint64_t v71 = 0x100000000;
  uint64_t v67 = v69;
  uint64_t v68 = 0xC00000000;
  v65[0] = v66;
  v65[1] = (void *)0x100000000;
  uint64_t v42 = a1;
  uint64_t v43 = (uint64_t)&v52;
  unint64_t v44 = v65;
  uint64_t v45 = v51;
  uint64_t v46 = a2;
  uint64_t v47 = (void **)&v76;
  __int16 v48 = &v73;
  uint64_t v49 = &v70;
  long long v50 = &v67;
  {
    uint64_t v40 = (uint64_t)v6;
    if (v77)
    {
      uint64_t v18 = 0;
      int v19 = 0;
      int v20 = 0;
      uint64_t v21 = 8 * v77;
      uint64_t v22 = 1;
      do
      {
        unsigned int v23 = v73[v22];
        unsigned int v24 = *(_DWORD *)((char *)v70 + v22 * 8);
        __src = (void *)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v76[v18], v23, v19, 0);
        uint64_t v25 = mlir::AffineExpr::shiftSymbols((mlir::MLIRContext ***)&__src, v24, v20, 0);
        *(void *)&v76[v18] = v25;
        v19 += v23;
        v20 += v24;
        v18 += 8;
        v22 += 6;
      }
      while (v21 != v18);
    }
    else
    {
      int v20 = 0;
      int v19 = 0;
    }
    __src = v64;
    uint64_t v63 = 0x600000000;
    char v59 = v61;
    uint64_t v60 = 0x600000000;
    uint64_t v56 = v58;
    uint64_t v57 = 0x600000000;
    uint64_t v53 = v55;
    uint64_t v54 = 0x600000000;
    if (deduplicateAndResolveOperands(a1, v73, v74, (uint64_t)&__src, (uint64_t)&v56, 6))
    {
      if (deduplicateAndResolveOperands(a1, (uint64_t *)v70, v71, (uint64_t)&v59, (uint64_t)&v53, 7))
      {
        llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>((uint64_t)a2 + 16, __src, (unsigned char *)__src + 8 * v63);
        llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>((uint64_t)a2 + 16, v59, (unsigned char *)v59 + 8 * v60);
        uint64_t v39 = (uint64_t *)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
        uint64_t v26 = (uint64_t)v76;
        uint64_t v27 = v77;
        uint64_t v28 = (void *)mlir::AsmParser::getContext(a1);
        unint64_t v41 = mlir::AffineMap::get(v19, v20, v26, v27, v28);
        unint64_t v41 = mlir::AffineMap::replaceDimsAndSymbols((uint64_t *)&v41, (uint64_t)v56, v57, (uint64_t)v53, v54, v63, v60);
        uint64_t v29 = mlir::AffineMapAttr::get(v41);
        mlir::OperationState::addAttribute(a2, (uint64_t)v5, 14, v29);
        uint64_t v30 = mlir::Builder::getI32TensorAttr(v39, (uint64_t)v67, v68);
        mlir::OperationState::addAttribute(a2, v40, 17, v30);
        uint64_t v17 = 1;
        uint64_t v31 = v53;
        if (v53 == v55)
        {
LABEL_23:
          if (v56 != v58) {
            free(v56);
          }
          if (v59 != v61) {
            free(v59);
          }
          if (__src != v64) {
            free(__src);
          }
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v31 = v53;
        if (v53 == v55) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v31 = v53;
      if (v53 == v55) {
        goto LABEL_23;
      }
    }
    free(v31);
    goto LABEL_23;
  }
  uint64_t v17 = 0;
LABEL_29:
  if (v65[0] != v66) {
    free(v65[0]);
  }
  if (v67 != v69) {
    free(v67);
  }
  uint64_t v32 = (char *)v70;
  if (v71)
  {
    uint64_t v33 = 48 * v71;
    do
    {
      uint64_t v34 = *(char **)&v32[v33 - 48];
      if (&v32[v33 - 32] != v34) {
        free(v34);
      }
      v33 -= 48;
    }
    while (v33);
    uint64_t v32 = (char *)v70;
  }
  if (v32 != v72) {
    free(v32);
  }
  char v35 = v73;
  if (v74)
  {
    uint64_t v36 = 6 * v74;
    do
    {
      uint64_t v37 = (uint64_t *)v35[v36 - 6];
      if (&v35[v36 - 4] != v37) {
        free(v37);
      }
      v36 -= 6;
    }
    while (v36 * 8);
    char v35 = v73;
  }
  if (v35 != (uint64_t *)v75) {
    free(v35);
  }
  if (v76 != (char *)v78) {
    free(v76);
  }
  return v17;
}

uint64_t llvm::SmallVector<long long,4u>::SmallVector(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unsigned int v4 = (_DWORD *)result;
  unint64_t v5 = (unint64_t *)(result + 16);
  *(void *)uint64_t result = result + 16;
  *(_DWORD *)(result + 12) = 4;
  unint64_t v6 = *a3;
  if (a2 >= 5)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, v5, a2, 8);
    uint64_t v7 = (unint64_t *)(*(void *)v4 + 8 * (a2 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v8 = a2 & 3;
    int64x2_t v9 = vdupq_n_s64(v6);
    uint64_t v10 = (int64x2_t *)(*(void *)v4 + 16);
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10[-1] = v9;
      int64x2_t *v10 = v9;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      do
      {
        *v7++ = v6;
        --v8;
      }
      while (v8);
    }
    goto LABEL_6;
  }
  if (!a2
    || (unint64_t *v5 = v6, a2 == 1)
    || (*(void *)(result + 24) = v6, a2 == 2)
    || (*(void *)(result + 32) = v6, a2 == 3))
  {
LABEL_6:
    uint64_t v4[2] = a2;
    return (uint64_t)v4;
  }
  *(void *)(result + 40) = v6;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t mlir::affine::AffineYieldOp::verify(uint64_t **this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = *this;
  uint64_t ParentOp = (*this)[2];
  if (ParentOp)
  {
    uint64_t ParentOp = mlir::Block::getParentOp((mlir::Block *)ParentOp);
    unsigned __int8 v2 = *this;
  }
  uint64_t v4 = *(unsigned int *)(ParentOp + 36);
  if (v4) {
    uint64_t v5 = ParentOp - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *((_DWORD *)v2 + 11);
  if ((v6 & 0x800000) != 0)
  {
    uint64_t v7 = *((unsigned int *)v2 + 17);
    uint64_t v8 = v2[9];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  int64x2_t v9 = *(void **)(*(void *)(ParentOp + 48) + 16);
  if (v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
  {
    __int16 v58 = 257;
    mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
    if (v62[0])
    {
      int v59 = 3;
      uint64_t v60 = "only terminates affine.if/for/parallel regions";
      uint64_t v61 = 46;
      unsigned int v15 = &v59;
      uint64_t v16 = (char *)v63;
      if (v64 >= v65)
      {
        unint64_t v52 = v64 + 1;
        if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
        {
          int64_t v55 = (char *)&v59 - (unsigned char *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v52, 24);
          uint64_t v16 = (char *)v63;
          unsigned int v15 = (int *)((char *)v63 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v52, 24);
          unsigned int v15 = &v59;
          uint64_t v16 = (char *)v63;
        }
      }
      uint64_t v17 = &v16[24 * v64];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      ++v64;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
    if (v62[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
    }
    if (!v71) {
      return v14;
    }
    int v19 = (void **)__p;
    if (__p)
    {
      int v20 = v70;
      uint64_t v21 = __p;
      if (v70 != __p)
      {
        do
          int v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      unint64_t v70 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v67;
    if (!v67) {
      goto LABEL_83;
    }
    unsigned int v23 = v68;
    unsigned int v24 = v67;
    if (v68 == v67)
    {
LABEL_82:
      uint64_t v68 = v22;
      operator delete(v24);
LABEL_83:
      uint64_t v39 = v63;
      if (v63 != v66) {
LABEL_84:
      }
        free(v39);
      return v14;
    }
    do
    {
      uint64_t v26 = (void *)*--v23;
      uint64_t v25 = v26;
      *unsigned int v23 = 0;
      if (v26) {
        operator delete[](v25);
      }
    }
    while (v23 != v22);
LABEL_81:
    unsigned int v24 = v67;
    goto LABEL_82;
  }
  if ((v6 & 0x800000) == 0)
  {
    if (!v4) {
      goto LABEL_18;
    }
LABEL_64:
    __int16 v58 = 257;
    mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
    if (v62[0])
    {
      int v59 = 3;
      uint64_t v60 = "parent of yield must have same number of results as the yield operands";
      uint64_t v61 = 70;
      uint64_t v40 = &v59;
      unint64_t v41 = (char *)v63;
      if (v64 >= v65)
      {
        unint64_t v51 = v64 + 1;
        if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
        {
          int64_t v54 = (char *)&v59 - (unsigned char *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v51, 24);
          unint64_t v41 = (char *)v63;
          uint64_t v40 = (int *)((char *)v63 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v51, 24);
          uint64_t v40 = &v59;
          unint64_t v41 = (char *)v63;
        }
      }
      uint64_t v42 = &v41[24 * v64];
      long long v43 = *(_OWORD *)v40;
      *((void *)v42 + 2) = *((void *)v40 + 2);
      *(_OWORD *)uint64_t v42 = v43;
      ++v64;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
    if (v62[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
    }
    if (!v71) {
      return v14;
    }
    unint64_t v44 = (void **)__p;
    if (__p)
    {
      uint64_t v45 = v70;
      uint64_t v46 = __p;
      if (v70 != __p)
      {
        do
          uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        uint64_t v46 = __p;
      }
      unint64_t v70 = v44;
      operator delete(v46);
    }
    uint64_t v22 = v67;
    if (!v67) {
      goto LABEL_83;
    }
    uint64_t v47 = v68;
    unsigned int v24 = v67;
    if (v68 == v67) {
      goto LABEL_82;
    }
    do
    {
      uint64_t v49 = (void *)*--v47;
      __int16 v48 = v49;
      *uint64_t v47 = 0;
      if (v49) {
        operator delete[](v48);
      }
    }
    while (v47 != v22);
    goto LABEL_81;
  }
  if (v4 != *((_DWORD *)v2 + 17)) {
    goto LABEL_64;
  }
LABEL_18:
  if (v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v8 + 24;
    while (v7 != v12)
    {
      if ((*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v12) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        __int16 v58 = 257;
        mlir::OpState::emitOpError(this, v57, (uint64_t)v62);
        if (v62[0])
        {
          int v59 = 3;
          uint64_t v60 = "types mismatch between yield op and its parent";
          uint64_t v61 = 46;
          uint64_t v27 = &v59;
          uint64_t v28 = (char *)v63;
          if (v64 >= v65)
          {
            unint64_t v53 = v64 + 1;
            if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
            {
              int64_t v56 = (char *)&v59 - (unsigned char *)v63;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v53, 24);
              uint64_t v28 = (char *)v63;
              uint64_t v27 = (int *)((char *)v63 + v56);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v53, 24);
              uint64_t v27 = &v59;
              uint64_t v28 = (char *)v63;
            }
          }
          uint64_t v29 = &v28[24 * v64];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          ++v64;
        }
        uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
        if (v62[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
        }
        if (v71)
        {
          uint64_t v31 = (void **)__p;
          if (__p)
          {
            uint64_t v32 = v70;
            uint64_t v33 = __p;
            if (v70 != __p)
            {
              do
                uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
              while (v32 != v31);
              uint64_t v33 = __p;
            }
            unint64_t v70 = v31;
            operator delete(v33);
          }
          uint64_t v34 = v67;
          if (v67)
          {
            char v35 = v68;
            uint64_t v36 = v67;
            if (v68 != v67)
            {
              do
              {
                uint64_t v38 = (void *)*--v35;
                uint64_t v37 = v38;
                *char v35 = 0;
                if (v38) {
                  operator delete[](v37);
                }
              }
              while (v35 != v34);
              uint64_t v36 = v67;
            }
            uint64_t v68 = v34;
            operator delete(v36);
          }
          uint64_t v39 = v63;
          if (v63 != v66) {
            goto LABEL_84;
          }
        }
        return v14;
      }
      ++v12;
      v13 += 32;
      if (v4 == v12) {
        return 1;
      }
    }
  }
  return 1;
}

void mlir::affine::AffineVectorLoadOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v12 = mlir::AffineMapAttr::get(a5);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v18 = 261;
  v17[0] = "map";
  v17[1] = 3;
  uint64_t v14 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v17);
  mlir::NamedAttribute::NamedAttribute(v19, v14, v12);
  mlir::NamedAttrList::push_back(a2 + 112, v19[0], v19[1]);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::affine::AffineVectorLoadOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.vector_load", 18, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC998670;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>]";
  unint64_t v39 = 123;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  unint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    unsigned int v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    unsigned int v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      long long v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)long long v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      char v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)char v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

BOOL mlir::affine::AffineVectorLoadOp::parse(uint64_t a1, uint64_t a2)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  memset(v12, 0, 24);
  uint64_t v11 = 0;
  unint64_t v15 = v17;
  uint64_t v16 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v15, &v11, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v14)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)&& mlir::AsmParser::parseType<mlir::VectorType>(a1, &v13)&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v12, v14, a2 + 16))
  {
    if (!v16)
    {
LABEL_12:
      BOOL v9 = mlir::AsmParser::addTypeToList(a1, v13, a2 + 64) != 0;
      goto LABEL_14;
    }
    uint64_t v7 = (char *)v15;
    uint64_t v8 = 32 * v16;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, IndexType, a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8) {
        goto LABEL_12;
      }
    }
  }
  BOOL v9 = 0;
LABEL_14:
  if (v15 != v17) {
    free(v15);
  }
  return v9;
}

uint64_t mlir::AsmParser::parseType<mlir::VectorType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      BOOL v9 = v25;
      unint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          BOOL v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        unint64_t v10 = __p;
      }
      unint64_t v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      unint64_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          unint64_t v15 = (void *)*--v12;
          uint64_t v14 = v15;
          void *v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      unsigned int v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::affine::AffineVectorLoadOp::print(mlir::affine::AffineVectorLoadOp *this, mlir::OpAsmPrinter *a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47))
    {
LABEL_9:
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v8 + 56, "map", 3uLL);
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 91;
    uint64_t v8 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v8, (uint64_t)"map", 3);
  if (!v10) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v11 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v12 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(v12 + 72);
      unint64_t v14 = *(unsigned int *)(v12 + 68) - 1;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = -1;
    }
    mlir::ValueRange::ValueRange(v27, v13 + 32, v14);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v11, v27[0], v27[1]);
  }
  unint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 93);
    __int16 v17 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_17;
    }
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *uint64_t v16 = 93;
    __int16 v17 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47))
    {
LABEL_17:
      v26[0] = mlir::Operation::getAttrDictionary(v17);
      uint64_t v18 = (mlir::ArrayAttr *)v26;
      goto LABEL_20;
    }
  }
  uint64_t v18 = (mlir::Operation *)((char *)v17 + 56);
LABEL_20:
  uint64_t Value = mlir::ArrayAttr::getValue(v18);
  v26[0] = "map";
  v26[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, Value, v20, v26, 1);
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) > 2)
  {
    *(unsigned char *)(v22 + 2) = 32;
    *(_WORD *)uint64_t v22 = 14880;
    *((void *)v21 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v21, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v24 = (_WORD *)*((void *)v23 + 4);
  if (*((void *)v23 + 3) - (void)v24 > 1uLL)
  {
    _WORD *v24 = 8236;
    *((void *)v23 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v23, ", ", 2uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineVectorLoadOp::verify(uint64_t **this)
{
  unsigned __int8 v2 = *this;
  uint64_t v3 = *(void *)(*(void *)((*this)[9] + 24) + 8);
  if (*((unsigned char *)*this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3);
    if (v5)
    {
      unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
        goto LABEL_8;
      }
LABEL_15:
      if (verifyMemoryOpIndexing(v2, v7, 32, -1, v6, -1)) {
        goto LABEL_9;
      }
      return 0;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v2 + 7), "map", 3uLL);
  unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (!InherentAttr) {
    goto LABEL_14;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v7 = InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)*this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  if (!verifyMemoryOpIndexing(v2, v7, *(void *)(v8 + 72) + 32, *(unsigned int *)(v8 + 68) - 1, v6, *(_DWORD *)(v8 + 68) - 1))return 0; {
LABEL_9:
  }
  uint64_t v9 = (uint64_t)*this;
  if (*(_DWORD *)(v9 + 36)) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  return verifyVectorMemoryOp((uint64_t *)v9, v6, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
}

uint64_t verifyVectorMemoryOp(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a3;
  uint64_t v18 = a2;
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18);
  if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v17)) {
    return 1;
  }
  unint64_t v15 = (const void **)"requires memref and vector types of the same elemental type";
  __int16 v16 = 259;
  mlir::Operation::emitOpError(a1, &v15, (uint64_t)v19);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    unint64_t v6 = (void **)__p;
    if (__p)
    {
      uint64_t v7 = v25;
      uint64_t v8 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      unint64_t v25 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v22;
    if (v22)
    {
      uint64_t v10 = v23;
      uint64_t v11 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v13 = (void *)*--v10;
          uint64_t v12 = v13;
          void *v10 = 0;
          if (v13) {
            operator delete[](v12);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v22;
      }
      unsigned int v23 = v9;
      operator delete(v11);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v5;
}

void mlir::affine::AffineVectorStoreOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"affine.vector_store", 19, (__int16)v38, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC9986C8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>]";
  unint64_t v39 = 124;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v39;
  }
  uint64_t v11 = &v38[v10];
  unint64_t v12 = v39 - v10;
  if (v39 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v39 - v10;
  }
  unint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  __int16 v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    unsigned int v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    unsigned int v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      long long v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)long long v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      char v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)char v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
}

BOOL mlir::affine::AffineVectorStoreOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  memset(v17, 0, 24);
  memset(v16, 0, 24);
  uint64_t v15 = 0;
  unint64_t v20 = v22;
  uint64_t v21 = 0x100000000;
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v16, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 704))(a1, &v20, &v15, "map", 3, a2 + 112, 2)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v19)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)&& mlir::AsmParser::parseType<mlir::VectorType>(a1, &v18)&& (uint64_t v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, v18, v7))&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1,
         v16,
         v19,
         v7))
  {
    if (!v21)
    {
      BOOL v11 = 1;
      uint64_t v13 = v20;
      if (v20 == v22) {
        return v11;
      }
      goto LABEL_21;
    }
    uint64_t v8 = (char *)v20;
    uint64_t v9 = 32 * v21 - 32;
    do
    {
      int v10 = (*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, IndexType, v7);
      BOOL v11 = v10 != 0;
      v8 += 32;
      if (v10) {
        BOOL v12 = v9 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      v9 -= 32;
    }
    while (!v12);
  }
  else
  {
    BOOL v11 = 0;
  }
  uint64_t v13 = v20;
  if (v20 != v22) {
LABEL_21:
  }
    free(v13);
  return v11;
}

uint64_t mlir::affine::AffineVectorStoreOp::print(mlir::affine::AffineVectorStoreOp *this, mlir::OpAsmPrinter *a2)
{
  void v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    *uint64_t v7 = 8236;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", ", 2uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 56));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 91);
    uint64_t v10 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47))
    {
LABEL_12:
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v10 + 56, "map", 3uLL);
      goto LABEL_13;
    }
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 91;
    uint64_t v10 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_12;
    }
  }
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(v10, (uint64_t)"map", 3);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = InherentAttr;
  if (InherentAttr
    && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v14 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
    {
      uint64_t v15 = *(void *)(v14 + 72);
      unint64_t v16 = *(unsigned int *)(v14 + 68) - 2;
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v16 = -2;
    }
    mlir::ValueRange::ValueRange(v29, v15 + 64, v16);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 240))(a2, v13, v29[0], v29[1]);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 93);
    uint64_t v19 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_20;
    }
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    *uint64_t v18 = 93;
    uint64_t v19 = *(mlir::Operation **)this;
    if (*(unsigned char *)(*(void *)this + 47))
    {
LABEL_20:
      v28[0] = mlir::Operation::getAttrDictionary(v19);
      unint64_t v20 = (mlir::ArrayAttr *)v28;
      goto LABEL_23;
    }
  }
  unint64_t v20 = (mlir::Operation *)((char *)v19 + 56);
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(v20);
  v28[0] = "map";
  v28[1] = 3;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, Value, v22, v28, 1);
  unsigned int v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = *((void *)v23 + 4);
  if ((unint64_t)(*((void *)v23 + 3) - v24) > 2)
  {
    *(unsigned char *)(v24 + 2) = 32;
    *(_WORD *)uint64_t v24 = 14880;
    *((void *)v23 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v23, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (_WORD *)*((void *)v25 + 4);
  if (*((void *)v25 + 3) - (void)v26 > 1uLL)
  {
    *uint64_t v26 = 8236;
    *((void *)v25 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v25, ", ", 2uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

BOOL mlir::affine::AffineVectorStoreOp::verify(uint64_t **this)
{
  unsigned __int8 v2 = *this;
  uint64_t v3 = *(void *)(*(void *)((*this)[9] + 56) + 8);
  if (*((unsigned char *)*this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)*this, (uint64_t)"map", 3);
    if (v5)
    {
      unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t)*this;
      if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
        goto LABEL_8;
      }
LABEL_12:
      if (verifyMemoryOpIndexing(v2, v7, 64, -2, v6, -2)) {
        return verifyVectorMemoryOp(*this, v6, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
      }
      return 0;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v2 + 7), "map", 3uLL);
  unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (!InherentAttr) {
    goto LABEL_11;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v7 = InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)*this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  if (verifyMemoryOpIndexing(v2, v7, *(void *)(v8 + 72) + 64, *(unsigned int *)(v8 + 68) - 2, v6, *(_DWORD *)(v8 + 68) - 2))return verifyVectorMemoryOp(*this, v6, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0; {
  return 0;
  }
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::verify(uint64_t **this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v2 = *((unsigned int *)v1 + 17);
    if (v2 == 1)
    {
      v19[0] = (const void **)"basis should not be empty";
      __int16 v20 = 259;
      mlir::OpState::emitOpError(this, v19, (uint64_t)v21);
      uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
      if (v21[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
      }
      if (v28)
      {
        uint64_t v4 = (void **)__p;
        if (__p)
        {
          char v5 = v27;
          unint64_t v6 = __p;
          if (v27 != __p)
          {
            do
              char v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            unint64_t v6 = __p;
          }
          uint64_t v27 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v24;
        if (!v24) {
          goto LABEL_35;
        }
        uint64_t v8 = v25;
        uint64_t v9 = v24;
        if (v25 == v24)
        {
LABEL_34:
          unint64_t v25 = v7;
          operator delete(v9);
LABEL_35:
          if (v22 != &v23) {
            free(v22);
          }
          return v3;
        }
        do
        {
          BOOL v11 = (void *)*--v8;
          uint64_t v10 = v11;
          *uint64_t v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
LABEL_33:
        uint64_t v9 = v24;
        goto LABEL_34;
      }
      return v3;
    }
    if (v2 - 1 == *((_DWORD *)v1 + 9)) {
      return 1;
    }
  }
  v19[0] = (const void **)"should return an index for each basis element";
  __int16 v20 = 259;
  mlir::OpState::emitOpError(this, v19, (uint64_t)v21);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    char v12 = (void **)__p;
    if (__p)
    {
      uint64_t v13 = v27;
      uint64_t v14 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      uint64_t v27 = v12;
      operator delete(v14);
    }
    uint64_t v7 = v24;
    if (!v24) {
      goto LABEL_35;
    }
    uint64_t v15 = v25;
    uint64_t v9 = v24;
    if (v25 == v24) {
      goto LABEL_34;
    }
    do
    {
      uint64_t v17 = (void *)*--v15;
      unint64_t v16 = v17;
      *uint64_t v15 = 0;
      if (v17) {
        operator delete[](v16);
      }
    }
    while (v15 != v7);
    goto LABEL_33;
  }
  return v3;
}

uint64_t mlir::affine::AffineApplyOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      char v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)char v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    long long v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      long long v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      char v35 = (void *)*--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "map", 3uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for map in DictionaryAttr to set Properties.";
      uint64_t v58 = 63;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      unint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 48;
    uint64_t v10 = &v56;
    BOOL v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        BOOL v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        BOOL v11 = (char *)v60;
      }
    }
    char v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)char v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      unint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)unint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      __int16 v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        __int16 v20 = __p;
      }
      uint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      unsigned int v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::affine::AffineApplyOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  char v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"map", 3, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 115;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[243];
    return a1[32];
  }
  return result;
}

void mlir::affine::AffineApplyOp::build(mlir::IndexType **a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, mlir::BytecodeWriterConfig *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15[4] = *MEMORY[0x1E4F143B8];
  v13[0] = a3;
  v13[1] = a4;
  uint64_t IndexType = mlir::Builder::getIndexType(a1, (mlir::MLIRContext *)a2);
  mlir::AffineMap::inferFromExprList(v13, 1uLL, (uint64_t)&v14);
  unint64_t v10 = *(void *)v14;
  mlir::OperationState::addOperands(a2, a5, a6);
  uint64_t v11 = mlir::AffineMapAttr::get(v10);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>((void *)a2) = v11;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  if (v14 != v15) {
    free(v14);
  }
}

BOOL mlir::affine::AffineApplyOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v24[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))return 0; {
    uint64_t v4 = *this;
    }
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v5 = *((unsigned int *)v4 + 17);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = v4[9] + 24;
        while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            uint64_t v4 = *this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    int v8 = *((_DWORD *)v4 + 9);
    uint64_t v9 = (uint64_t)(v4 - 2);
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
    return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    uint64_t v22 = (const void **)"requires attribute 'map'";
    __int16 v23 = 259;
    mlir::OpState::emitOpError(this, &v22, (uint64_t)v24);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      long long v13 = (void **)__p;
      if (__p)
      {
        unint64_t v14 = v30;
        uint64_t v15 = __p;
        if (v30 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        long long v30 = v13;
        operator delete(v15);
      }
      unint64_t v16 = v27;
      if (v27)
      {
        long long v17 = v28;
        uint64_t v18 = v27;
        if (v28 != v27)
        {
          do
          {
            __int16 v20 = (void *)*--v17;
            uint64_t v19 = v20;
            *long long v17 = 0;
            if (v20) {
              operator delete[](v19);
            }
          }
          while (v17 != v16);
          uint64_t v18 = v27;
        }
        char v28 = v16;
        operator delete(v18);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
  return v12;
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::verifyInvariantsImpl(uint64_t **this)
{
  if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    uint64_t v2 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) == 0)
    {
      uint64_t v4 = -1;
      uint64_t v5 = 32;
LABEL_5:
      uint64_t v6 = 0;
      uint64_t v7 = v5 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 1))
      {
        ++v6;
        v7 += 32;
        if (v4 == v6)
        {
          uint64_t v2 = *this;
          goto LABEL_9;
        }
      }
      return 0;
    }
    uint64_t v3 = *((unsigned int *)v2 + 17);
    uint64_t v4 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v5 = v2[9] + 32;
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v8 = *((unsigned int *)v2 + 9);
    uint64_t v9 = v2 - 2;
    if (v8) {
      uint64_t v10 = (uint64_t)v9;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!v8) {
      return 1;
    }
    uint64_t v11 = 0;
    while (1)
    {
      NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
      if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v11))break; {
      if (v8 == ++v11)
      }
        return 1;
    }
  }
  return 0;
}

uint64_t mlir::affine::AffineDelinearizeIndexOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v21[4] = *MEMORY[0x1E4F143B8];
  memset(v21, 0, 24);
  uint64_t v18 = v20;
  uint64_t v19 = 0x400000000;
  __src = &v17;
  uint64_t v16 = 0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    goto LABEL_15;
  }
  __int16 v14 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, char *))(*(void *)a1 + 368))(a1, "into", 4, v13))goto LABEL_15; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
  }
    goto LABEL_15;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL))goto LABEL_15; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  }
    goto LABEL_15;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_15;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_15;
  }
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)) {
    goto LABEL_15;
  }
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  mlir::OperationState::addTypes(a2, __src, v16);
  uint64_t v7 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, IndexType, v7))goto LABEL_15; {
  if (v19)
  }
  {
    uint64_t v8 = (char *)v18;
    uint64_t v9 = 32 * v19;
    uint64_t v10 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, IndexType, v7))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9) {
        goto LABEL_16;
      }
    }
LABEL_15:
    uint64_t v10 = 0;
LABEL_16:
    uint64_t v11 = __src;
    if (__src != &v17) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v10 = 1;
  uint64_t v11 = __src;
  if (__src != &v17) {
LABEL_17:
  }
    free(v11);
LABEL_18:
  if (v18 != v20) {
    free(v18);
  }
  return v10;
}

void mlir::affine::AffineDelinearizeIndexOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 3uLL)
  {
    _DWORD *v9 = 1869901417;
    *((void *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "into", 4uLL);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "(", 1uLL);
    __int16 v14 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned char *v13 = 40;
    ++*((void *)v12 + 4);
    __int16 v14 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_15:
      uint64_t v15 = *((unsigned int *)v14 + 17);
      uint64_t v16 = *((void *)v14 + 9);
      uint64_t v17 = v15 - 1;
      goto LABEL_16;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = -1;
LABEL_16:
  uint64_t v18 = v16 + 32;
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v37 = ", ";
  uint64_t v38 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&v37);
  __int16 v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if (*((unsigned char **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    *uint64_t v21 = 41;
    ++*((void *)v20 + 4);
  }
  uint64_t v37 = v39;
  uint64_t v38 = 0x200000000;
  uint64_t v22 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v35[0] = mlir::Operation::getAttrDictionary(v22);
    __int16 v23 = (mlir::ArrayAttr *)v35;
  }
  else
  {
    __int16 v23 = (mlir::Operation *)((char *)v22 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v23);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v25, v37, v38);
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *uint64_t v27 = 32;
  }
  char v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v29 = (unsigned char *)*((void *)v28 + 4);
  if (*((unsigned char **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *long long v29 = 58;
    ++*((void *)v28 + 4);
  }
  long long v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *char v31 = 32;
  }
  uint64_t v32 = *((unsigned int *)*this + 9);
  uint64_t v33 = (uint64_t)*this - 16;
  if (!v32) {
    uint64_t v33 = 0;
  }
  v34[0] = v33;
  v34[1] = v32;
  mlir::OperandRange::getTypes(v34, v35);
  v36[0] = ", ";
  v36[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v35[0], v35[1], v35[2], v35[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v36);
  if (v37 != v39) {
    free(v37);
  }
}

BOOL mlir::affine::AffineForOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v103 = v6;
  if (!v6)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected DictionaryAttr to set properties";
      uint64_t v106 = 41;
      uint64_t v26 = &v104;
      uint64_t v27 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v86 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v94 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          uint64_t v27 = (char *)v108;
          uint64_t v26 = (int *)((char *)v108 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          uint64_t v26 = &v104;
          uint64_t v27 = (char *)v108;
        }
      }
      char v28 = &v27[24 * v109];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)char v28 = v29;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    long long v30 = (void **)__p;
    if (__p)
    {
      char v31 = v115;
      uint64_t v32 = __p;
      if (v115 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v115 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    uint64_t v33 = v113;
    __int16 v23 = v112;
    if (v113 == v112)
    {
LABEL_114:
      uint64_t v113 = v21;
      operator delete(v23);
LABEL_115:
      if (v108 != v111) {
        free(v108);
      }
      return 0;
    }
    do
    {
      char v35 = (void *)*--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_113:
    __int16 v23 = v112;
    goto LABEL_114;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v103, "lowerBoundMap", 0xDuLL);
  if (!v8)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for lowerBoundMap in DictionaryAttr to set Properties.";
      uint64_t v106 = 73;
      uint64_t v36 = &v104;
      uint64_t v37 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v88 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v96 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          uint64_t v37 = (char *)v108;
          uint64_t v36 = (int *)((char *)v108 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          uint64_t v36 = &v104;
          uint64_t v37 = (char *)v108;
        }
      }
      uint64_t v38 = &v37[24 * v109];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v115;
      uint64_t v42 = __p;
      if (v115 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      long long v115 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    long long v43 = v113;
    __int16 v23 = v112;
    if (v113 == v112) {
      goto LABEL_114;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      unint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_113;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      uint64_t v106 = 58;
      uint64_t v10 = &v104;
      uint64_t v11 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v87 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v95 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          uint64_t v11 = (char *)v108;
          uint64_t v10 = (int *)((char *)v108 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          uint64_t v10 = &v104;
          uint64_t v11 = (char *)v108;
        }
      }
      uint64_t v12 = &v11[24 * v109];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v109;
      if (v107[0])
      {
        __int16 v14 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v9);
        uint64_t v15 = (char *)v108;
        if (v109 >= v110)
        {
          unint64_t v89 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            int64_t v97 = (char *)&v104 - (unsigned char *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            uint64_t v15 = (char *)v108;
            __int16 v14 = (int *)((char *)v108 + v97);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            __int16 v14 = &v104;
            uint64_t v15 = (char *)v108;
          }
        }
        uint64_t v16 = &v15[24 * v109];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v109;
        if (v107[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
        }
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v115;
      __int16 v20 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        __int16 v20 = __p;
      }
      long long v115 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    uint64_t v22 = v113;
    __int16 v23 = v112;
    if (v113 == v112) {
      goto LABEL_114;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_113;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v103, "step", 4uLL);
  if (!v46)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for step in DictionaryAttr to set Properties.";
      uint64_t v106 = 64;
      unsigned int v62 = &v104;
      uint64_t v63 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v91 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v99 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          uint64_t v63 = (char *)v108;
          unsigned int v62 = (int *)((char *)v108 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          unsigned int v62 = &v104;
          uint64_t v63 = (char *)v108;
        }
      }
      unsigned int v64 = &v63[24 * v109];
      long long v65 = *(_OWORD *)v62;
      *((void *)v64 + 2) = *((void *)v62 + 2);
      *(_OWORD *)unsigned int v64 = v65;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v66 = (void **)__p;
    if (__p)
    {
      uint64_t v67 = v115;
      char v68 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        char v68 = __p;
      }
      long long v115 = v66;
      operator delete(v68);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    uint64_t v69 = v113;
    __int16 v23 = v112;
    if (v113 == v112) {
      goto LABEL_114;
    }
    do
    {
      char v71 = (void *)*--v69;
      unint64_t v70 = v71;
      void *v69 = 0;
      if (v71) {
        operator delete[](v70);
      }
    }
    while (v69 != v21);
    goto LABEL_113;
  }
  uint64_t v47 = v46;
  if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      uint64_t v106 = 49;
      unint64_t v48 = &v104;
      unint64_t v49 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v90 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v98 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          unint64_t v49 = (char *)v108;
          unint64_t v48 = (int *)((char *)v108 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          unint64_t v48 = &v104;
          unint64_t v49 = (char *)v108;
        }
      }
      unint64_t v50 = &v49[24 * v109];
      long long v51 = *(_OWORD *)v48;
      *((void *)v50 + 2) = *((void *)v48 + 2);
      *(_OWORD *)unint64_t v50 = v51;
      ++v109;
      if (v107[0])
      {
        int64_t v52 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v47);
        int64_t v53 = (char *)v108;
        if (v109 >= v110)
        {
          unint64_t v92 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            int64_t v100 = (char *)&v104 - (unsigned char *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            int64_t v53 = (char *)v108;
            int64_t v52 = (int *)((char *)v108 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            int64_t v52 = &v104;
            int64_t v53 = (char *)v108;
          }
        }
        int64_t v54 = &v53[24 * v109];
        long long v55 = *(_OWORD *)v52;
        *((void *)v54 + 2) = *((void *)v52 + 2);
        *(_OWORD *)int64_t v54 = v55;
        ++v109;
        if (v107[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
        }
      }
    }
    if (!v116) {
      return 0;
    }
    int v56 = (void **)__p;
    if (__p)
    {
      uint64_t v57 = v115;
      uint64_t v58 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      long long v115 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    int v59 = v113;
    __int16 v23 = v112;
    if (v113 == v112) {
      goto LABEL_114;
    }
    do
    {
      unsigned int v61 = (void *)*--v59;
      uint64_t v60 = v61;
      *int v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
    goto LABEL_113;
  }
  a1[1] = v46;
  uint64_t v72 = mlir::DictionaryAttr::get((uint64_t)&v103, "upperBoundMap", 0xDuLL);
  uint64_t v102 = v72;
  if (!v72)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for upperBoundMap in DictionaryAttr to set Properties.";
      uint64_t v106 = 73;
      uint64_t v74 = &v104;
      unint64_t v75 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v93 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v101 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          unint64_t v75 = (char *)v108;
          uint64_t v74 = (int *)((char *)v108 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          uint64_t v74 = &v104;
          unint64_t v75 = (char *)v108;
        }
      }
      unint64_t v76 = &v75[24 * v109];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = *((void *)v74 + 2);
      *(_OWORD *)unint64_t v76 = v77;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v78 = (void **)__p;
    if (__p)
    {
      uint64_t v79 = v115;
      uint64_t v80 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        uint64_t v80 = __p;
      }
      long long v115 = v78;
      operator delete(v80);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_115;
    }
    uint64_t v81 = v113;
    __int16 v23 = v112;
    if (v113 == v112) {
      goto LABEL_114;
    }
    do
    {
      uint64_t v83 = (void *)*--v81;
      uint64_t v82 = v83;
      void *v81 = 0;
      if (v83) {
        operator delete[](v82);
      }
    }
    while (v81 != v21);
    goto LABEL_113;
  }
  if (*(_UNKNOWN **)(*(void *)v72 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v107, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v73, &v102);
LABEL_96:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v107);
    return 0;
  }
  a1[2] = v72;
  long long v85 = (void *)mlir::DictionaryAttr::get((uint64_t)&v103, "operandSegmentSizes", 0x13uLL);
  if (!v85)
  {
    long long v85 = (void *)mlir::DictionaryAttr::get((uint64_t)&v103, "operand_segment_sizes", 0x15uLL);
    if (!v85)
    {
      a3(v107, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v107, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_96;
    }
  }
  return mlir::convertFromAttribute(a1 + 3, (const char *)3, v85, a3, a4) != 0;
}

uint64_t mlir::affine::AffineForOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  _OWORD v35[6] = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a1;
  uint64_t v33 = v35;
  uint64_t v34 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"lowerBoundMap", 13, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v7 = v34;
    }
    uint64_t v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *uint64_t v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"step", 4, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v13 = v34;
    }
    __int16 v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *__int16 v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"upperBoundMap", 13, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v19 = v34;
    }
    __int16 v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *__int16 v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
  uint64_t v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  uint64_t v24 = v23;
  unsigned int v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    unsigned int v25 = v34;
  }
  uint64_t v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *uint64_t v26 = v22;
  v26[1] = v24;
  BOOL v27 = __CFADD__(v34, 1);
  uint64_t v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    uint64_t DictionaryAttr = 0;
    long long v30 = v33;
    if (v33 == v35) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (uint64_t *)v33, v28);
  long long v30 = v33;
  if (v33 != v35) {
LABEL_20:
  }
    free(v30);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffineForOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "step", __n)) {
        goto LABEL_11;
      }
      return a2[1];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xDuLL:
      if (*(void *)__s1 == 0x756F427265776F6CLL && *(void *)(__s1 + 5) == 0x70614D646E756F42)
      {
        uint64_t result = *a2;
      }
      else if (!memcmp(__s1, "upperBoundMap", __n))
      {
        uint64_t result = a2[2];
      }
      else
      {
LABEL_11:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_11;
      }
LABEL_13:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::affine::AffineForOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 4uLL:
      uint64_t result = memcmp(__s1, "step", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xDuLL:
      if (*(void *)__s1 == 0x756F427265776F6CLL && *(void *)(__s1 + 5) == 0x70614D646E756F42)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          *(void *)uint64_t result = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "upperBoundMap", a3);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
              unsigned int v7 = a4;
            }
            else {
              unsigned int v7 = 0;
            }
            void v5[2] = v7;
          }
          else
          {
            void v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_17;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_17:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          uint64_t v8 = result ? a4 : 0;
          uint64_t v12 = v8;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 3)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9) {
                uint64_t result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::affine::AffineForOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v8, (const void **)"lowerBoundMap", (const char *)0xD, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(v9, (const void **)"step", (const char *)4, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v10, (const void **)"upperBoundMap", (const char *)0xD, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v35 = a1;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35) + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
      return 1;
    }
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v9 = &v31;
    uint64_t v10 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v10 = (char *)v37;
        uint64_t v9 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v9 = &v31;
        uint64_t v10 = (char *)v37;
      }
    }
    uint64_t v11 = &v10[24 * v38];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      char v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: index attribute";
        uint64_t v33 = 47;
        unsigned int v13 = &v31;
        __int16 v14 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            __int16 v14 = (char *)v37;
            unsigned int v13 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            unsigned int v13 = &v31;
            __int16 v14 = (char *)v37;
          }
        }
        uint64_t v15 = &v14[24 * v38];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v38;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v44;
      __int16 v20 = __p;
      if (v44 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        __int16 v20 = __p;
      }
      unint64_t v44 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v41;
    if (v41)
    {
      uint64_t v22 = v42;
      uint64_t v23 = v41;
      if (v42 != v41)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v41;
      }
      uint64_t v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v17;
}

BOOL mlir::affine::AffineForOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        unsigned int v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = (void *)*--v8;
              uint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    long long v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 3, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 2)
      && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
       || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)3));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[245];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineForOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 3);
  }
  return result;
}

BOOL mlir::affine::AffineForOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (!*v3)
  {
    v43[0] = (const void **)"requires attribute 'lowerBoundMap'";
    __int16 v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    }
    if (!v52) {
      return v21;
    }
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v51;
      uint64_t v24 = __p;
      if (v51 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      long long v51 = v22;
      operator delete(v24);
    }
    char v25 = v48;
    if (v48)
    {
      uint64_t v26 = v49;
      unint64_t v27 = v48;
      if (v49 == v48) {
        goto LABEL_73;
      }
      do
      {
        int64_t v29 = (void *)*--v26;
        unint64_t v28 = v29;
        *uint64_t v26 = 0;
        if (v29) {
          operator delete[](v28);
        }
      }
      while (v26 != v25);
LABEL_72:
      unint64_t v27 = v48;
LABEL_73:
      unint64_t v49 = v25;
      operator delete(v27);
    }
LABEL_74:
    if (v46 != &v47) {
      free(v46);
    }
    return v21;
  }
  uint64_t v5 = v3[1];
  if (!v5)
  {
    v43[0] = (const void **)"requires attribute 'step'";
    __int16 v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    }
    if (!v52) {
      return v21;
    }
    int64_t v30 = (void **)__p;
    if (__p)
    {
      char v31 = v51;
      uint64_t v32 = __p;
      if (v51 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v51 = v30;
      operator delete(v32);
    }
    char v25 = v48;
    if (v48)
    {
      uint64_t v33 = v49;
      unint64_t v27 = v48;
      if (v49 == v48) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v35 = (void *)*--v33;
        __int16 v34 = v35;
        void *v33 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v33 != v25);
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  uint64_t v6 = v3[2];
  if (!v6)
  {
    v43[0] = (const void **)"requires attribute 'upperBoundMap'";
    __int16 v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)v45);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v45);
    if (v45[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v45);
    }
    if (!v52) {
      return v21;
    }
    uint64_t v36 = (void **)__p;
    if (__p)
    {
      uint64_t v37 = v51;
      unsigned int v38 = __p;
      if (v51 != __p)
      {
        do
          uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        unsigned int v38 = __p;
      }
      long long v51 = v36;
      operator delete(v38);
    }
    char v25 = v48;
    if (v48)
    {
      unsigned int v39 = v49;
      unint64_t v27 = v48;
      if (v49 == v48) {
        goto LABEL_73;
      }
      do
      {
        unint64_t v41 = (void *)*--v39;
        uint64_t v40 = v41;
        *unsigned int v39 = 0;
        if (v41) {
          operator delete[](v40);
        }
      }
      while (v39 != v25);
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  v45[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v4, (const void **)"lowerBoundMap", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0; {
  v45[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v6, (const void **)"upperBoundMap", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0; {
  v45[0] = *this;
  }
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(v5, (const void **)"step", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v45))return 0; {
  unint64_t v7 = *((unsigned int *)*this + 11);
  }
  uint64_t v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v10 = (*this)[9];
    if (v9) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v9)
    {
LABEL_14:
      uint64_t v11 = 0;
      uint64_t v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11) {
          goto LABEL_17;
        }
      }
      return 0;
    }
  }
LABEL_17:
  ODSuint64_t Operands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  uint64_t v17 = *this;
  uint64_t v18 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v19 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v19 = 0;
  }
  if (v18)
  {
    for (uint64_t i = 0; i != v18; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
    uint64_t v17 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v17, (((unint64_t)&v17[2 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v17 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::affine::detail::AffineIfOpGenericAdaptorBase::AffineIfOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "affine.if", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[247];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineLoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    uint64_t v4 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) == 0)
    {
      uint64_t v6 = -1;
      uint64_t v7 = 32;
LABEL_7:
      uint64_t v8 = 0;
      uint64_t v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          uint64_t v4 = *this;
          goto LABEL_11;
        }
      }
      return 0;
    }
    uint64_t v5 = *((unsigned int *)v4 + 17);
    uint64_t v6 = v5 - 1;
    if (v5 != 1)
    {
      uint64_t v7 = v4[9] + 32;
      goto LABEL_7;
    }
LABEL_11:
    int v10 = *((_DWORD *)v4 + 9);
    unint64_t v11 = v4 - 2;
    if (v10) {
      uint64_t v12 = (uint64_t)v11;
    }
    else {
      uint64_t v12 = 0;
    }
    mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return 1;
  }
  else
  {
    uint64_t v23 = (const void **)"requires attribute 'map'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      unint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        char v31 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v28;
      if (v28)
      {
        uint64_t v18 = v29;
        uint64_t v19 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            uint64_t v20 = v21;
            *uint64_t v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          uint64_t v19 = v28;
        }
        int64_t v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[249];
    return a1[32];
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[251];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineParallelOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v107 = v6;
  if (!v6)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      unsigned int v109 = "expected DictionaryAttr to set properties";
      uint64_t v110 = 41;
      unint64_t v28 = &v108;
      int64_t v29 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v90 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v98 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          int64_t v29 = (char *)v112;
          unint64_t v28 = (uint64_t *)((char *)v112 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          unint64_t v28 = &v108;
          int64_t v29 = (char *)v112;
        }
      }
      int64_t v30 = &v29[24 * v113];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = v28[2];
      *(_OWORD *)int64_t v30 = v31;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    char v32 = (void **)__p;
    if (__p)
    {
      uint64_t v33 = v119;
      __int16 v34 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        __int16 v34 = __p;
      }
      uint64_t v119 = v32;
      operator delete(v34);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    uint64_t v35 = v117;
    char v25 = v116;
    if (v117 == v116)
    {
LABEL_113:
      uint64_t v117 = v23;
      operator delete(v25);
LABEL_114:
      if (v112 != v115) {
        free(v112);
      }
      return 0;
    }
    do
    {
      uint64_t v37 = (void *)*--v35;
      uint64_t v36 = v37;
      *uint64_t v35 = 0;
      if (v37) {
        operator delete[](v36);
      }
    }
    while (v35 != v23);
LABEL_112:
    char v25 = v116;
    goto LABEL_113;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v107, "lowerBoundsGroups", 0x11uLL);
  if (!v8)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      unsigned int v109 = "expected key entry for lowerBoundsGroups in DictionaryAttr to set Properties.";
      uint64_t v110 = 77;
      unsigned int v38 = &v108;
      unsigned int v39 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v91 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v99 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          unsigned int v39 = (char *)v112;
          unsigned int v38 = (uint64_t *)((char *)v112 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          unsigned int v38 = &v108;
          unsigned int v39 = (char *)v112;
        }
      }
      uint64_t v40 = &v39[24 * v113];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = v38[2];
      *(_OWORD *)uint64_t v40 = v41;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v42 = (void **)__p;
    if (__p)
    {
      long long v43 = v119;
      __int16 v44 = __p;
      if (v119 != __p)
      {
        do
          long long v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        __int16 v44 = __p;
      }
      uint64_t v119 = v42;
      operator delete(v44);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    char v45 = v117;
    char v25 = v116;
    if (v117 == v116) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v47 = (void *)*--v45;
      uint64_t v46 = v47;
      *char v45 = 0;
      if (v47) {
        operator delete[](v46);
      }
    }
    while (v45 != v23);
    goto LABEL_112;
  }
  uint64_t v9 = v8;
  if ((mlir::DenseIntElementsAttr::classof(v8) & 1) == 0)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      uint64_t v110 = 62;
      unint64_t v48 = &v108;
      unint64_t v49 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v92 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v100 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
          unint64_t v49 = (char *)v112;
          unint64_t v48 = (uint64_t *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
          unint64_t v48 = &v108;
          unint64_t v49 = (char *)v112;
        }
      }
      unint64_t v50 = &v49[24 * v113];
      long long v51 = *(_OWORD *)v48;
      *((void *)v50 + 2) = v48[2];
      *(_OWORD *)unint64_t v50 = v51;
      ++v113;
      if (v111[0])
      {
        char v52 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v9);
        uint64_t v53 = (char *)v112;
        if (v113 >= v114)
        {
          unint64_t v93 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            int64_t v101 = (char *)&v108 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            uint64_t v53 = (char *)v112;
            char v52 = (uint64_t *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            char v52 = &v108;
            uint64_t v53 = (char *)v112;
          }
        }
        int64_t v54 = &v53[24 * v113];
        long long v55 = *(_OWORD *)v52;
        *((void *)v54 + 2) = v52[2];
        *(_OWORD *)int64_t v54 = v55;
        ++v113;
        if (v111[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
        }
      }
    }
    if (!v120) {
      return 0;
    }
    int v56 = (void **)__p;
    if (__p)
    {
      uint64_t v57 = v119;
      uint64_t v58 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      uint64_t v119 = v56;
      operator delete(v58);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    int v59 = v117;
    char v25 = v116;
    if (v117 == v116) {
      goto LABEL_113;
    }
    do
    {
      unsigned int v61 = (void *)*--v59;
      uint64_t v60 = v61;
      *int v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v23);
    goto LABEL_112;
  }
  *a1 = v9;
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v107, "lowerBoundsMap", 0xEuLL);
  if (!v10)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      unsigned int v109 = "expected key entry for lowerBoundsMap in DictionaryAttr to set Properties.";
      uint64_t v110 = 74;
      unsigned int v62 = &v108;
      uint64_t v63 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v95 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v103 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
          uint64_t v63 = (char *)v112;
          unsigned int v62 = (uint64_t *)((char *)v112 + v103);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
          unsigned int v62 = &v108;
          uint64_t v63 = (char *)v112;
        }
      }
      unsigned int v64 = &v63[24 * v113];
      long long v65 = *(_OWORD *)v62;
      *((void *)v64 + 2) = v62[2];
      *(_OWORD *)unsigned int v64 = v65;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v66 = (void **)__p;
    if (__p)
    {
      uint64_t v67 = v119;
      char v68 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        char v68 = __p;
      }
      uint64_t v119 = v66;
      operator delete(v68);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    uint64_t v69 = v117;
    char v25 = v116;
    if (v117 == v116) {
      goto LABEL_113;
    }
    do
    {
      char v71 = (void *)*--v69;
      unint64_t v70 = v71;
      void *v69 = 0;
      if (v71) {
        operator delete[](v70);
      }
    }
    while (v69 != v23);
    goto LABEL_112;
  }
  uint64_t v11 = v10;
  if (*(_UNKNOWN **)(*(void *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      uint64_t v110 = 59;
      uint64_t v12 = &v108;
      uint64_t v13 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v94 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v102 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          uint64_t v13 = (char *)v112;
          uint64_t v12 = (uint64_t *)((char *)v112 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          uint64_t v12 = &v108;
          uint64_t v13 = (char *)v112;
        }
      }
      unint64_t v14 = &v13[24 * v113];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = v12[2];
      *(_OWORD *)unint64_t v14 = v15;
      ++v113;
      if (v111[0])
      {
        uint64_t v16 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v11);
        uint64_t v17 = (char *)v112;
        if (v113 >= v114)
        {
          unint64_t v96 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            int64_t v104 = (char *)&v108 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
            uint64_t v17 = (char *)v112;
            uint64_t v16 = (uint64_t *)((char *)v112 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
            uint64_t v16 = &v108;
            uint64_t v17 = (char *)v112;
          }
        }
        uint64_t v18 = &v17[24 * v113];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)uint64_t v18 = v19;
        ++v113;
        if (v111[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
        }
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v20 = (void **)__p;
    if (__p)
    {
      uint64_t v21 = v119;
      uint64_t v22 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v119 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    __int16 v24 = v117;
    char v25 = v116;
    if (v117 == v116) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v27 = (void *)*--v24;
      uint64_t v26 = v27;
      void *v24 = 0;
      if (v27) {
        operator delete[](v26);
      }
    }
    while (v24 != v23);
    goto LABEL_112;
  }
  a1[1] = v10;
  uint64_t v72 = mlir::DictionaryAttr::get((uint64_t)&v107, "reductions", 0xAuLL);
  uint64_t v106 = v72;
  if (!v72)
  {
    a3(v111, a4);
    if (v111[0])
    {
      LODWORD(v108) = 3;
      unsigned int v109 = "expected key entry for reductions in DictionaryAttr to set Properties.";
      uint64_t v110 = 70;
      uint64_t v74 = &v108;
      unint64_t v75 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v97 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v105 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          unint64_t v75 = (char *)v112;
          uint64_t v74 = (uint64_t *)((char *)v112 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          uint64_t v74 = &v108;
          unint64_t v75 = (char *)v112;
        }
      }
      unint64_t v76 = &v75[24 * v113];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = v74[2];
      *(_OWORD *)unint64_t v76 = v77;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v78 = (void **)__p;
    if (__p)
    {
      uint64_t v79 = v119;
      uint64_t v80 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        uint64_t v80 = __p;
      }
      uint64_t v119 = v78;
      operator delete(v80);
    }
    uint64_t v23 = v116;
    if (!v116) {
      goto LABEL_114;
    }
    uint64_t v81 = v117;
    char v25 = v116;
    if (v117 == v116) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v83 = (void *)*--v81;
      uint64_t v82 = v83;
      void *v81 = 0;
      if (v83) {
        operator delete[](v82);
      }
    }
    while (v81 != v23);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(void *)v72 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a1[2] = v72;
    uint64_t v85 = mlir::DictionaryAttr::get((uint64_t)&v107, "steps", 5uLL);
    uint64_t v108 = v85;
    if (v85)
    {
      if (*(_UNKNOWN **)(*(void *)v85 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        a1[3] = v85;
        uint64_t v87 = mlir::DictionaryAttr::get((uint64_t)&v107, "upperBoundsGroups", 0x11uLL);
        uint64_t v108 = v87;
        if (!v87)
        {
          a3(v111, a4);
          mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for upperBoundsGroups in DictionaryAttr to set Properties.");
          goto LABEL_123;
        }
        uint64_t v88 = v87;
        if (mlir::DenseIntElementsAttr::classof(v87))
        {
          a1[4] = v88;
          uint64_t v89 = mlir::DictionaryAttr::get((uint64_t)&v107, "upperBoundsMap", 0xEuLL);
          uint64_t v108 = v89;
          if (!v89)
          {
            a3(v111, a4);
            mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for upperBoundsMap in DictionaryAttr to set Properties.");
            goto LABEL_123;
          }
          if (*(_UNKNOWN **)(*(void *)v89 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
          {
            a1[5] = v89;
            return 1;
          }
          a3(v111, a4);
        }
        else
        {
          a3(v111, a4);
        }
      }
      else
      {
        a3(v111, a4);
      }
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, &v108);
    }
    else
    {
      a3(v111, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v111, "expected key entry for steps in DictionaryAttr to set Properties.");
    }
  }
  else
  {
    a3(v111, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v73, &v106);
  }
LABEL_123:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v111);
  return 0;
}

uint64_t mlir::affine::AffineParallelOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v45[6] = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a1;
  long long v43 = v45;
  uint64_t v44 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v42, (uint64_t)"lowerBoundsGroups", 17, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
    unsigned int v6 = v44;
  }
  unint64_t v7 = (uint64_t *)((char *)v43 + 16 * v6);
  *unint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"lowerBoundsMap", 14, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v13 = v44;
    }
    unint64_t v14 = (uint64_t *)((char *)v43 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"reductions", 10, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v19 = v44;
    }
    uint64_t v20 = (uint64_t *)((char *)v43 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"steps", 5, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v25 = v44;
    }
    uint64_t v26 = (uint64_t *)((char *)v43 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"upperBoundsGroups", 17, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v31 = v44;
    }
    char v32 = (uint64_t *)((char *)v43 + 16 * v31);
    *char v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"upperBoundsMap", 14, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v37 = v44;
    }
    unsigned int v38 = (uint64_t *)((char *)v43 + 16 * v37);
    *unsigned int v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  unsigned int v39 = v43;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v43 == v45) {
      return DictionaryAttr;
    }
    goto LABEL_28;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v42, (uint64_t *)v43, v8);
  unsigned int v39 = v43;
  if (v43 != v45) {
LABEL_28:
  }
    free(v39);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffineParallelOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 5uLL:
      if (memcmp(__s1, "steps", __n)) {
        return 0;
      }
      return a2[3];
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
      return 0;
    case 0xAuLL:
      if (memcmp(__s1, "reductions", __n)) {
        return 0;
      }
      return a2[2];
    case 0xEuLL:
      if (!memcmp(__s1, "lowerBoundsMap", __n)) {
        return a2[1];
      }
      if (memcmp(__s1, "upperBoundsMap", __n)) {
        return 0;
      }
      return a2[5];
    case 0x11uLL:
      if (*__s1 == 0x756F427265776F6CLL && __s1[1] == 0x70756F724773646ELL && *((unsigned char *)__s1 + 16) == 115) {
        return *a2;
      }
      if (memcmp(__s1, "upperBoundsGroups", __n)) {
        return 0;
      }
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::affine::AffineParallelOp::setInherentAttr(uint64_t result, void *__s1, size_t __n, uint64_t a4)
{
  unint64_t v7 = (uint64_t *)result;
  switch(__n)
  {
    case 5uLL:
      uint64_t result = memcmp(__s1, "steps", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v13 = a4;
          }
          else {
            uint64_t v13 = 0;
          }
          v7[3] = v13;
        }
        else
        {
          v7[3] = 0;
        }
      }
      break;
    case 0xAuLL:
      uint64_t result = memcmp(__s1, "reductions", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v7[2] = v8;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "lowerBoundsMap", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "upperBoundsMap", __n);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
              uint64_t v9 = a4;
            }
            else {
              uint64_t v9 = 0;
            }
            v7[5] = v9;
          }
          else
          {
            v7[5] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
          uint64_t v14 = a4;
        }
        else {
          uint64_t v14 = 0;
        }
        v7[1] = v14;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x11uLL:
      if (*__s1 == 0x756F427265776F6CLL && __s1[1] == 0x70756F724773646ELL && *((unsigned char *)__s1 + 16) == 115)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v15 = a4;
          }
          else {
            uint64_t v15 = 0;
          }
          *unint64_t v7 = v15;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "upperBoundsGroups", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
            if (result) {
              uint64_t v12 = a4;
            }
            else {
              uint64_t v12 = 0;
            }
            void v7[4] = v12;
          }
          else
          {
            void v7[4] = 0;
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::affine::AffineParallelOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundsGroups", 17, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundsMap", 14, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"reductions", 10, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"steps", 5, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundsGroups", 17, v8);
  }
  uint64_t v9 = a2[5];
  if (v9)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundsMap", 14, v9);
  }
}

BOOL mlir::affine::AffineParallelOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v8, (const void **)"lowerBoundsGroups", (const char *)0x11, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v9, (const void **)"lowerBoundsMap", (const char *)0xE, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(v10, (const void **)"reductions", (const char *)0xA, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(v11, (const void **)"steps", (const char *)5, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v12, (const void **)"upperBoundsGroups", (const char *)0x11, a3, a4))
          {
            uint64_t v13 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v13, (const void **)"upperBoundsMap", (const char *)0xE, a3, a4))
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v29 = (uint64_t *)(v27 + 8 * v28);
    if (v29 != Value)
    {
      while (*Value && (mlir::arith::AtomicRMWKindAttr::classof(*Value) & 1) != 0)
      {
        if (++Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    uint64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    uint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v10 = (char *)v41;
        uint64_t v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        uint64_t v10 = (char *)v41;
      }
    }
    uint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      uint64_t v35 = a2;
      uint64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        uint64_t v36 = "' failed to satisfy constraint: Reduction ops";
        uint64_t v37 = 45;
        uint64_t v13 = &v35;
        uint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            uint64_t v14 = (char *)v41;
            uint64_t v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            uint64_t v13 = &v35;
            uint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

uint64_t mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v35 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value)
      {
        if (*(_UNKNOWN **)(**(void **)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          break;
        }
        uint64_t v36 = *(const void ***)Value;
        uint64_t v40 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
        if (!mlir::Type::isSignlessInteger((mlir::Type *)&v40, 64)) {
          break;
        }
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v40, a5);
  if (v40)
  {
    LODWORD(v36) = 3;
    uint64_t v37 = "attribute '";
    uint64_t v38 = 11;
    uint64_t v9 = &v36;
    uint64_t v10 = (char *)v42;
    if (v43 >= v44)
    {
      unint64_t v31 = v43 + 1;
      if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
      {
        int64_t v33 = (char *)&v36 - (unsigned char *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
        uint64_t v10 = (char *)v42;
        uint64_t v9 = (const void ***)((char *)v42 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
        uint64_t v9 = &v36;
        uint64_t v10 = (char *)v42;
      }
    }
    uint64_t v11 = &v10[24 * v43];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v43;
    if (v40)
    {
      __int16 v39 = 261;
      uint64_t v36 = a2;
      uint64_t v37 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v41, &v36);
      if (v40)
      {
        LODWORD(v36) = 3;
        uint64_t v37 = "' failed to satisfy constraint: 64-bit integer array attribute";
        uint64_t v38 = 62;
        uint64_t v13 = &v36;
        uint64_t v14 = (char *)v42;
        if (v43 >= v44)
        {
          unint64_t v32 = v43 + 1;
          if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
          {
            int64_t v34 = (char *)&v36 - (unsigned char *)v42;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v32, 24);
            uint64_t v14 = (char *)v42;
            uint64_t v13 = (const void ***)((char *)v42 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v32, 24);
            uint64_t v13 = &v36;
            uint64_t v14 = (char *)v42;
          }
        }
        uint64_t v15 = &v14[24 * v43];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v43;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  if (v50)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v49;
      uint64_t v20 = __p;
      if (v49 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      char v49 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v46;
    if (v46)
    {
      uint64_t v22 = v47;
      uint64_t v23 = v46;
      if (v47 != v46)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v46;
      }
      uint64_t v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45) {
      free(v42);
    }
  }
  return v17;
}

BOOL mlir::affine::AffineParallelOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 5) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x30uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    void v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 118;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[253];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineParallelOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (!*v3)
  {
    v51[0] = (const void **)"requires attribute 'lowerBoundsGroups'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return v17;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v59;
      uint64_t v20 = __p;
      if (v59 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int v59 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v56;
    if (v56)
    {
      uint64_t v22 = v57;
      uint64_t v23 = v56;
      if (v57 == v56) {
        goto LABEL_101;
      }
      do
      {
        unsigned int v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
LABEL_100:
      uint64_t v23 = v56;
LABEL_101:
      uint64_t v57 = v21;
      operator delete(v23);
    }
LABEL_102:
    if (v54 != &v55) {
      free(v54);
    }
    return v17;
  }
  uint64_t v5 = v3[1];
  if (!v5)
  {
    v51[0] = (const void **)"requires attribute 'lowerBoundsMap'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return v17;
    }
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v59;
      uint64_t v28 = __p;
      if (v59 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      int v59 = v26;
      operator delete(v28);
    }
    uint64_t v21 = v56;
    if (v56)
    {
      uint64_t v29 = v57;
      uint64_t v23 = v56;
      if (v57 == v56) {
        goto LABEL_101;
      }
      do
      {
        unint64_t v31 = (void *)*--v29;
        uint64_t v30 = v31;
        *uint64_t v29 = 0;
        if (v31) {
          operator delete[](v30);
        }
      }
      while (v29 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  uint64_t v6 = v3[2];
  if (!v6)
  {
    v51[0] = (const void **)"requires attribute 'reductions'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return v17;
    }
    unint64_t v32 = (void **)__p;
    if (__p)
    {
      int64_t v33 = v59;
      int64_t v34 = __p;
      if (v59 != __p)
      {
        do
          int64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        int64_t v34 = __p;
      }
      int v59 = v32;
      operator delete(v34);
    }
    uint64_t v21 = v56;
    if (v56)
    {
      uint64_t v35 = v57;
      uint64_t v23 = v56;
      if (v57 == v56) {
        goto LABEL_101;
      }
      do
      {
        uint64_t v37 = (void *)*--v35;
        uint64_t v36 = v37;
        *uint64_t v35 = 0;
        if (v37) {
          operator delete[](v36);
        }
      }
      while (v35 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  uint64_t v7 = v3[3];
  if (!v7)
  {
    v51[0] = (const void **)"requires attribute 'steps'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return v17;
    }
    uint64_t v38 = (void **)__p;
    if (__p)
    {
      __int16 v39 = v59;
      uint64_t v40 = __p;
      if (v59 != __p)
      {
        do
          __int16 v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        uint64_t v40 = __p;
      }
      int v59 = v38;
      operator delete(v40);
    }
    uint64_t v21 = v56;
    if (v56)
    {
      uint64_t v41 = v57;
      uint64_t v23 = v56;
      if (v57 == v56) {
        goto LABEL_101;
      }
      do
      {
        unsigned int v43 = (void *)*--v41;
        unsigned int v42 = v43;
        *uint64_t v41 = 0;
        if (v43) {
          operator delete[](v42);
        }
      }
      while (v41 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  uint64_t v8 = v3[4];
  if (!v8)
  {
    v51[0] = (const void **)"requires attribute 'upperBoundsGroups'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (!v60) {
      return v17;
    }
    unsigned int v44 = (void **)__p;
    if (__p)
    {
      char v45 = v59;
      uint64_t v46 = __p;
      if (v59 != __p)
      {
        do
          char v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        uint64_t v46 = __p;
      }
      int v59 = v44;
      operator delete(v46);
    }
    uint64_t v21 = v56;
    if (v56)
    {
      uint64_t v47 = v57;
      uint64_t v23 = v56;
      if (v57 == v56) {
        goto LABEL_101;
      }
      do
      {
        char v49 = (void *)*--v47;
        unint64_t v48 = v49;
        *uint64_t v47 = 0;
        if (v49) {
          operator delete[](v48);
        }
      }
      while (v47 != v21);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  uint64_t v9 = v3[5];
  if (!v9)
  {
    v51[0] = (const void **)"requires attribute 'upperBoundsMap'";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, v51, (uint64_t)v53);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v53);
    return v17;
  }
  v53[0] = v2;
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(v6, (const void **)"reductions", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  v53[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v5, (const void **)"lowerBoundsMap", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  v53[0] = *this;
  }
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v4, (const void **)"lowerBoundsGroups", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  v53[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v9, (const void **)"upperBoundsMap", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  v53[0] = *this;
  }
  if (!mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v8, (const void **)"upperBoundsGroups", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  v53[0] = *this;
  }
  if (!mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(v7, (const void **)"steps", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v53))return 0; {
  uint64_t v10 = *this;
  }
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v11 = *((unsigned int *)v10 + 17);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v10[9] + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v12))
      {
        ++v12;
        v13 += 32;
        if (v11 == v12)
        {
          uint64_t v10 = *this;
          goto LABEL_22;
        }
      }
      return 0;
    }
  }
LABEL_22:
  uint64_t v14 = *((unsigned int *)v10 + 9);
  if (*((_DWORD *)v10 + 9)) {
    uint64_t v15 = (uint64_t)(v10 - 2);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v15, i);
    uint64_t v10 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v10, (((unint64_t)&v10[2 * (((unint64_t)*((unsigned int *)v10 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v10 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v10 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::affine::AffinePrefetchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v104 = v6;
  if (!v6)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v106 = "expected DictionaryAttr to set properties";
      uint64_t v107 = 41;
      uint64_t v14 = &v105;
      uint64_t v15 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v87 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v95 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          uint64_t v15 = (char *)v109;
          uint64_t v14 = (uint64_t *)((char *)v109 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          uint64_t v14 = &v105;
          uint64_t v15 = (char *)v109;
        }
      }
      long long v16 = &v15[24 * v110];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)long long v16 = v17;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v116;
      uint64_t v20 = __p;
      if (v116 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      char v116 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    uint64_t v22 = v114;
    uint64_t v23 = v113;
    if (v114 == v113)
    {
LABEL_113:
      unsigned int v114 = v21;
      operator delete(v23);
LABEL_114:
      if (v109 != v112) {
        free(v109);
      }
      return 0;
    }
    do
    {
      unsigned int v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_112:
    uint64_t v23 = v113;
    goto LABEL_113;
  }
  uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "isDataCache", 0xBuLL);
  if (!v8)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v106 = "expected key entry for isDataCache in DictionaryAttr to set Properties.";
      uint64_t v107 = 71;
      uint64_t v26 = &v105;
      uint64_t v27 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v88 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v96 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          uint64_t v27 = (char *)v109;
          uint64_t v26 = (uint64_t *)((char *)v109 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          uint64_t v26 = &v105;
          uint64_t v27 = (char *)v109;
        }
      }
      uint64_t v28 = &v27[24 * v110];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      unint64_t v31 = v116;
      unint64_t v32 = __p;
      if (v116 != __p)
      {
        do
          unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      char v116 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    int64_t v33 = v114;
    uint64_t v23 = v113;
    if (v114 == v113) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      int64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_112;
  }
  uint64_t v9 = (uint64_t)v8;
  if (!mlir::BoolAttr::classof(v8))
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v107 = 56;
      uint64_t v36 = &v105;
      uint64_t v37 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v89 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v97 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          uint64_t v37 = (char *)v109;
          uint64_t v36 = (uint64_t *)((char *)v109 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          uint64_t v36 = &v105;
          uint64_t v37 = (char *)v109;
        }
      }
      uint64_t v38 = &v37[24 * v110];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)uint64_t v38 = v39;
      ++v110;
      if (v108[0])
      {
        uint64_t v40 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v9);
        uint64_t v41 = (char *)v109;
        if (v110 >= v111)
        {
          unint64_t v90 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            int64_t v98 = (char *)&v105 - (unsigned char *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            uint64_t v41 = (char *)v109;
            uint64_t v40 = (uint64_t *)((char *)v109 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            uint64_t v40 = &v105;
            uint64_t v41 = (char *)v109;
          }
        }
        unsigned int v42 = &v41[24 * v110];
        long long v43 = *(_OWORD *)v40;
        *((void *)v42 + 2) = v40[2];
        *(_OWORD *)unsigned int v42 = v43;
        ++v110;
        if (v108[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
        }
      }
    }
    if (!v117) {
      return 0;
    }
    unsigned int v44 = (void **)__p;
    if (__p)
    {
      char v45 = v116;
      uint64_t v46 = __p;
      if (v116 != __p)
      {
        do
          char v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        uint64_t v46 = __p;
      }
      char v116 = v44;
      operator delete(v46);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    uint64_t v47 = v114;
    uint64_t v23 = v113;
    if (v114 == v113) {
      goto LABEL_113;
    }
    do
    {
      char v49 = (void *)*--v47;
      unint64_t v48 = v49;
      *uint64_t v47 = 0;
      if (v49) {
        operator delete[](v48);
      }
    }
    while (v47 != v21);
    goto LABEL_112;
  }
  *a1 = v9;
  uint64_t v10 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "isWrite", 7uLL);
  if (!v10)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v106 = "expected key entry for isWrite in DictionaryAttr to set Properties.";
      uint64_t v107 = 67;
      char v50 = &v105;
      uint64_t v51 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v91 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v99 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          uint64_t v51 = (char *)v109;
          char v50 = (uint64_t *)((char *)v109 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          char v50 = &v105;
          uint64_t v51 = (char *)v109;
        }
      }
      __int16 v52 = &v51[24 * v110];
      long long v53 = *(_OWORD *)v50;
      *((void *)v52 + 2) = v50[2];
      *(_OWORD *)__int16 v52 = v53;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    int64_t v54 = (void **)__p;
    if (__p)
    {
      uint64_t v55 = v116;
      int v56 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        int v56 = __p;
      }
      char v116 = v54;
      operator delete(v56);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    uint64_t v57 = v114;
    uint64_t v23 = v113;
    if (v114 == v113) {
      goto LABEL_113;
    }
    do
    {
      int v59 = (void *)*--v57;
      uint64_t v58 = v59;
      *uint64_t v57 = 0;
      if (v59) {
        operator delete[](v58);
      }
    }
    while (v57 != v21);
    goto LABEL_112;
  }
  uint64_t v11 = (uint64_t)v10;
  if (!mlir::BoolAttr::classof(v10))
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v107 = 52;
      char v60 = &v105;
      uint64_t v61 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v92 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v100 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          uint64_t v61 = (char *)v109;
          char v60 = (uint64_t *)((char *)v109 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          char v60 = &v105;
          uint64_t v61 = (char *)v109;
        }
      }
      unsigned int v62 = &v61[24 * v110];
      long long v63 = *(_OWORD *)v60;
      *((void *)v62 + 2) = v60[2];
      *(_OWORD *)unsigned int v62 = v63;
      ++v110;
      if (v108[0])
      {
        unsigned int v64 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v11);
        long long v65 = (char *)v109;
        if (v110 >= v111)
        {
          unint64_t v93 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            int64_t v101 = (char *)&v105 - (unsigned char *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            long long v65 = (char *)v109;
            unsigned int v64 = (uint64_t *)((char *)v109 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            unsigned int v64 = &v105;
            long long v65 = (char *)v109;
          }
        }
        uint64_t v66 = &v65[24 * v110];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = v64[2];
        *(_OWORD *)uint64_t v66 = v67;
        ++v110;
        if (v108[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
        }
      }
    }
    if (!v117) {
      return 0;
    }
    char v68 = (void **)__p;
    if (__p)
    {
      uint64_t v69 = v116;
      unint64_t v70 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        unint64_t v70 = __p;
      }
      char v116 = v68;
      operator delete(v70);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    char v71 = v114;
    uint64_t v23 = v113;
    if (v114 == v113) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v73 = (void *)*--v71;
      uint64_t v72 = v73;
      void *v71 = 0;
      if (v73) {
        operator delete[](v72);
      }
    }
    while (v71 != v21);
    goto LABEL_112;
  }
  a1[1] = v11;
  uint64_t v12 = mlir::DictionaryAttr::get((uint64_t)&v104, "localityHint", 0xCuLL);
  uint64_t v103 = v12;
  if (!v12)
  {
    a3(v108, a4);
    if (v108[0])
    {
      LODWORD(v105) = 3;
      uint64_t v106 = "expected key entry for localityHint in DictionaryAttr to set Properties.";
      uint64_t v107 = 72;
      uint64_t v74 = &v105;
      unint64_t v75 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v94 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v102 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          unint64_t v75 = (char *)v109;
          uint64_t v74 = (uint64_t *)((char *)v109 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          uint64_t v74 = &v105;
          unint64_t v75 = (char *)v109;
        }
      }
      unint64_t v76 = &v75[24 * v110];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = v74[2];
      *(_OWORD *)unint64_t v76 = v77;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v78 = (void **)__p;
    if (__p)
    {
      uint64_t v79 = v116;
      uint64_t v80 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        uint64_t v80 = __p;
      }
      char v116 = v78;
      operator delete(v80);
    }
    uint64_t v21 = v113;
    if (!v113) {
      goto LABEL_114;
    }
    uint64_t v81 = v114;
    uint64_t v23 = v113;
    if (v114 == v113) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v83 = (void *)*--v81;
      uint64_t v82 = v83;
      void *v81 = 0;
      if (v83) {
        operator delete[](v82);
      }
    }
    while (v81 != v21);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[2] = v12;
    uint64_t v85 = mlir::DictionaryAttr::get((uint64_t)&v104, "map", 3uLL);
    uint64_t v105 = v85;
    if (v85)
    {
      if (*(_UNKNOWN **)(*(void *)v85 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
      {
        a1[3] = v85;
        return 1;
      }
      a3(v108, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, &v105);
    }
    else
    {
      a3(v108, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v108, "expected key entry for map in DictionaryAttr to set Properties.");
    }
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
    return 0;
  }
  a3(v108, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v13, &v103);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
  return 0;
}

uint64_t mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v33[6] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a1;
  unint64_t v31 = v33;
  uint64_t v32 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isDataCache", 11, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    unsigned int v6 = v32;
  }
  uint64_t v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isWrite", 7, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v13 = v32;
    }
    uint64_t v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"localityHint", 12, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v19 = v32;
    }
    uint64_t v20 = (uint64_t *)((char *)v31 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"map", 3, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v25 = v32;
    }
    uint64_t v26 = (uint64_t *)((char *)v31 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v27 = v31;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v31 == v33) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (uint64_t *)v31, v8);
  uint64_t v27 = v31;
  if (v31 != v33) {
LABEL_20:
  }
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffinePrefetchOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (memcmp(__s1, "map", __n)) {
        return 0;
      }
      return a2[3];
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      return 0;
    case 7uLL:
      if (memcmp(__s1, "isWrite", __n)) {
        return 0;
      }
      return a2[1];
    case 0xBuLL:
      if (*(void *)__s1 != 0x6143617461447369 || *(void *)(__s1 + 3) != 0x6568636143617461) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "localityHint", __n)) {
        return 0;
      }
      return a2[2];
    default:
      return 0;
  }
}

uint64_t mlir::affine::AffinePrefetchOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 3uLL:
      uint64_t result = memcmp(__s1, "map", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[3] = v10;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 7uLL:
      uint64_t result = memcmp(__s1, "isWrite", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::BoolAttr::classof(a4);
          if (result) {
            unsigned int v6 = a4;
          }
          else {
            unsigned int v6 = 0;
          }
          v5[1] = v6;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xBuLL:
      if (*(void *)__s1 == 0x6143617461447369 && *(void *)(__s1 + 3) == 0x6568636143617461)
      {
        if (a4)
        {
          uint64_t result = mlir::BoolAttr::classof(a4);
          if (result) {
            unsigned int v8 = a4;
          }
          else {
            unsigned int v8 = 0;
          }
          void *v5 = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "localityHint", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          void v5[2] = v9;
        }
        else
        {
          void v5[2] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::affine::AffinePrefetchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  unsigned int v8 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isDataCache", (const char *)0xB, a3, a4))
  {
    uint64_t v9 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isWrite", (const char *)7, a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v10, (const void **)"localityHint", (const char *)0xC, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v11, (const void **)"map", (const char *)3, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 118;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unsigned int v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[255];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffinePrefetchOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void **)v3;
  if (!*(void *)v3)
  {
    v41[0] = (const void **)"requires attribute 'isDataCache'";
    __int16 v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (!v50) {
      return v8;
    }
    unint64_t v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v49;
      uint64_t v16 = __p;
      if (v49 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      char v49 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v46;
    if (v46)
    {
      uint64_t v18 = v47;
      unsigned int v19 = v46;
      if (v47 == v46) {
        goto LABEL_76;
      }
      do
      {
        uint64_t v21 = (void *)*--v18;
        uint64_t v20 = v21;
        *uint64_t v18 = 0;
        if (v21) {
          operator delete[](v20);
        }
      }
      while (v18 != v17);
LABEL_75:
      unsigned int v19 = v46;
LABEL_76:
      uint64_t v47 = v17;
      operator delete(v19);
    }
LABEL_77:
    if (v44 != &v45) {
      free(v44);
    }
    return v8;
  }
  int v5 = *(void **)(v3 + 8);
  if (!v5)
  {
    v41[0] = (const void **)"requires attribute 'isWrite'";
    __int16 v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (!v50) {
      return v8;
    }
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v49;
      uint64_t v24 = __p;
      if (v49 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      char v49 = v22;
      operator delete(v24);
    }
    uint64_t v17 = v46;
    if (v46)
    {
      unsigned int v25 = v47;
      unsigned int v19 = v46;
      if (v47 == v46) {
        goto LABEL_76;
      }
      do
      {
        uint64_t v27 = (void *)*--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          operator delete[](v26);
        }
      }
      while (v25 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  unint64_t v6 = *(const void ***)(v3 + 16);
  if (!v6)
  {
    v41[0] = (const void **)"requires attribute 'localityHint'";
    __int16 v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (!v50) {
      return v8;
    }
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      long long v29 = v49;
      uint64_t v30 = __p;
      if (v49 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      char v49 = v28;
      operator delete(v30);
    }
    uint64_t v17 = v46;
    if (v46)
    {
      unint64_t v31 = v47;
      unsigned int v19 = v46;
      if (v47 == v46) {
        goto LABEL_76;
      }
      do
      {
        int64_t v33 = (void *)*--v31;
        uint64_t v32 = v33;
        *unint64_t v31 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v31 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7)
  {
    v41[0] = (const void **)"requires attribute 'map'";
    __int16 v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (!v50) {
      return v8;
    }
    int64_t v34 = (void **)__p;
    if (__p)
    {
      uint64_t v35 = v49;
      uint64_t v36 = __p;
      if (v49 != __p)
      {
        do
          uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = __p;
      }
      char v49 = v34;
      operator delete(v36);
    }
    uint64_t v17 = v46;
    if (v46)
    {
      uint64_t v37 = v47;
      unsigned int v19 = v46;
      if (v47 == v46) {
        goto LABEL_76;
      }
      do
      {
        long long v39 = (void *)*--v37;
        uint64_t v38 = v39;
        *uint64_t v37 = 0;
        if (v39) {
          operator delete[](v38);
        }
      }
      while (v37 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v43[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isWrite", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0; {
  v43[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v6, (const void **)"localityHint", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0; {
  v43[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (const void **)"isDataCache", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0; {
  v43[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  uint64_t v8 = 1;
  ODSuint64_t Operands = mlir::memref::PrefetchOp::getODSOperands((mlir::memref::PrefetchOp *)this, 1u);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    for (uint64_t i = ODSOperands + 24;
          mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v12 + 1);
          i += 32)
    {
      if (v11 == ++v12) {
        return v8;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t mlir::affine::AffineStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    uint64_t v4 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) == 0)
    {
      uint64_t v6 = -2;
      uint64_t v7 = 64;
LABEL_7:
      uint64_t v8 = 0;
      for (uint64_t i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8) {
          return 1;
        }
      }
      return 0;
    }
    uint64_t v5 = *((unsigned int *)v4 + 17);
    uint64_t v6 = v5 - 2;
    if (v5 != 2)
    {
      uint64_t v7 = v4[9] + 64;
      goto LABEL_7;
    }
    return 1;
  }
  else
  {
    uint64_t v20 = (const void **)"requires attribute 'map'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v28;
        unsigned int v13 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unsigned int v13 = __p;
        }
        uint64_t v28 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v25;
      if (v25)
      {
        uint64_t v15 = v26;
        uint64_t v16 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v18 = (void *)*--v15;
            uint64_t v17 = v18;
            *uint64_t v15 = 0;
            if (v18) {
              operator delete[](v17);
            }
          }
          while (v15 != v14);
          uint64_t v16 = v25;
        }
        uint64_t v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 120;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[257];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    uint64_t v4 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) == 0)
    {
      uint64_t v6 = -1;
      uint64_t v7 = 32;
LABEL_7:
      uint64_t v8 = 0;
      uint64_t v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          uint64_t v4 = *this;
          goto LABEL_11;
        }
      }
      return 0;
    }
    uint64_t v5 = *((unsigned int *)v4 + 17);
    uint64_t v6 = v5 - 1;
    if (v5 != 1)
    {
      uint64_t v7 = v4[9] + 32;
      goto LABEL_7;
    }
LABEL_11:
    int v10 = *((_DWORD *)v4 + 9);
    unint64_t v11 = v4 - 2;
    if (v10) {
      uint64_t v12 = (uint64_t)v11;
    }
    else {
      uint64_t v12 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    uint64_t v24 = (const void **)"requires attribute 'map'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v15 = (void **)__p;
      if (__p)
      {
        uint64_t v16 = v32;
        uint64_t v17 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          uint64_t v17 = __p;
        }
        uint64_t v32 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v29;
      if (v29)
      {
        unsigned int v19 = v30;
        uint64_t v20 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v22 = (void *)*--v19;
            __int16 v21 = v22;
            *unsigned int v19 = 0;
            if (v22) {
              operator delete[](v21);
            }
          }
          while (v19 != v18);
          uint64_t v20 = v29;
        }
        uint64_t v30 = v18;
        operator delete(v20);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
  return v14;
}

uint64_t mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    && (v50[0] = a2, mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v50), v37 >= 1))
  {
    uint64_t v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v55[0] = a2;
    v55[1] = v38;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
    return 1;
  }
  else
  {
    __int16 v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      int v52 = 3;
      long long v53 = " #";
      uint64_t v54 = 2;
      int v10 = &v52;
      unint64_t v11 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v46 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          unint64_t v11 = (char *)v56;
          int v10 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          int v10 = &v52;
          unint64_t v11 = (char *)v56;
        }
      }
      uint64_t v12 = &v11[24 * v57];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        long long v53 = (const char *)a5;
        uint64_t v15 = &v52;
        uint64_t v16 = (char *)v56;
        if (v14 >= v58)
        {
          unint64_t v41 = v14 + 1;
          BOOL v42 = (char *)v56 + 24 * v14 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            int64_t v47 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v16 = (char *)v56;
            uint64_t v15 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            uint64_t v15 = &v52;
            uint64_t v16 = (char *)v56;
          }
        }
        uint64_t v17 = &v16[24 * v57];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v17 = v18;
        uint64_t v19 = ++v57;
        if (v55[0])
        {
          int v52 = 3;
          long long v53 = " must be vector of any type values, but got ";
          uint64_t v54 = 44;
          uint64_t v20 = &v52;
          __int16 v21 = (char *)v56;
          if (v19 >= v58)
          {
            unint64_t v43 = v19 + 1;
            BOOL v44 = (char *)v56 + 24 * v19 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              int64_t v48 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              __int16 v21 = (char *)v56;
              uint64_t v20 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              uint64_t v20 = &v52;
              __int16 v21 = (char *)v56;
            }
          }
          uint64_t v22 = &v21[24 * v57];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          ++v57;
          if (v55[0])
          {
            uint64_t v24 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)a2);
            __int16 v25 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v49 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                __int16 v25 = (char *)v56;
                uint64_t v24 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                uint64_t v24 = &v52;
                __int16 v25 = (char *)v56;
              }
            }
            uint64_t v26 = &v25[24 * v57];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = *((void *)v24 + 2);
            *(_OWORD *)uint64_t v26 = v27;
            ++v57;
          }
        }
      }
    }
    uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      char v29 = (void **)__p;
      if (__p)
      {
        uint64_t v30 = v63;
        unint64_t v31 = __p;
        if (v63 != __p)
        {
          do
            uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          unint64_t v31 = __p;
        }
        long long v63 = v29;
        operator delete(v31);
      }
      uint64_t v32 = v60;
      if (v60)
      {
        char v33 = v61;
        uint64_t v34 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v36 = (void *)*--v33;
            uint64_t v35 = v36;
            void *v33 = 0;
            if (v36) {
              operator delete[](v35);
            }
          }
          while (v33 != v32);
          uint64_t v34 = v60;
        }
        uint64_t v61 = v32;
        operator delete(v34);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
  }
  return v28;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 121;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[259];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    uint64_t v4 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) == 0)
    {
      uint64_t v6 = -2;
      uint64_t v7 = 64;
LABEL_8:
      uint64_t v8 = 0;
      for (uint64_t i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8) {
          return 1;
        }
      }
      return 0;
    }
    uint64_t v5 = *((unsigned int *)v4 + 17);
    uint64_t v6 = v5 - 2;
    if (v5 != 2)
    {
      uint64_t v7 = v4[9] + 64;
      goto LABEL_8;
    }
    return 1;
  }
  else
  {
    uint64_t v20 = (const void **)"requires attribute 'map'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v28;
        long long v13 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          long long v13 = __p;
        }
        uint64_t v28 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v25;
      if (v25)
      {
        uint64_t v15 = v26;
        uint64_t v16 = v25;
        if (v26 != v25)
        {
          do
          {
            long long v18 = (void *)*--v15;
            uint64_t v17 = v18;
            *uint64_t v15 = 0;
            if (v18) {
              operator delete[](v17);
            }
          }
          while (v15 != v14);
          uint64_t v16 = v25;
        }
        uint64_t v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

BOOL mlir::affine::AffineYieldOp::parse(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v12;
  uint64_t v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    BOOL v5 = 0;
    uint64_t v6 = v8[0];
    if (v8[0] == &v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  uint64_t v6 = v8[0];
  if (v8[0] != &v9) {
LABEL_9:
  }
    free(v6);
LABEL_10:
  if (v10 != v12) {
    free(v10);
  }
  return v5;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::ShapedDimOpInterface,mlir::Operation *,llvm::CastInfo<mlir::ShapedDimOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ShapedDimOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ShapedDimOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::ShapedDimOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::ShapedDimOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      unint64_t v17 = 76;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2760), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      __int16 v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2760);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::ViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(unsigned char *a1, unsigned int **a2)
{
  if (!a1[9])
  {
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1
      && *(void *)(*(void *)(*(void *)a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
    {
      unint64_t v5 = **a2;
      uint64_t v6 = *(void *)a2[1];
      uint64_t v32 = *(void *)a1;
      unint64_t v31 = *(void *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v7 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31) + 8 * v5);
      char isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        a1[8] = isValidSymbol;
        a1[9] = 1;
        return a1;
      }
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
      if (v10 >= v5) {
        unint64_t v11 = v5;
      }
      else {
        unint64_t v11 = v10;
      }
      if (!v11)
      {
        uint64_t v15 = 0;
LABEL_23:
        uint64_t Sizes = mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        char isValidSymbol = mlir::affine::isValidSymbol(*(void *)(Sizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        unint64_t v16 = v12 + 1;
        uint64_t v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        unint64_t v14 = (uint64_t *)(Value + 8 * v17);
        unint64_t v18 = (int64x2_t *)(Value + 32);
        int32x4_t v19 = 0uLL;
        int64x2_t v20 = vdupq_n_s64(0x8000000000000000);
        uint64_t v21 = v17;
        int32x4_t v22 = 0uLL;
        do
        {
          int64x2_t v23 = v18[-2];
          int64x2_t v24 = v18[-1];
          int64x2_t v25 = *v18;
          int64x2_t v26 = v18[1];
          v18 += 4;
          int32x4_t v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          int32x4_t v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        unsigned int v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          uint64_t v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v13 = 0;
        unint64_t v14 = (uint64_t *)Value;
      }
      long long v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        uint64_t v28 = *v14++;
        if (v28 == 0x8000000000000000) {
          ++v13;
        }
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::SubViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(unsigned char *result, unsigned int **a2)
{
  unint64_t v2 = result;
  if (!result[9]
    && *(void *)result
    && *(void *)(*(void *)(*(void *)result + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
  {
    unint64_t v4 = **a2;
    uint64_t v5 = *(void *)a2[1];
    uint64_t v30 = *(void *)result;
    unint64_t v29 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v30) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29) + 8 * v4);
    char isValidSymbol = 1;
    if (v6 != 0x8000000000000000)
    {
LABEL_24:
      v2[8] = isValidSymbol;
      v2[9] = 1;
      return v2;
    }
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    if (v9 >= v4) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v9;
    }
    if (!v10)
    {
      uint64_t v14 = 0;
LABEL_23:
      uint64_t Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v30);
      char isValidSymbol = mlir::affine::isValidSymbol(*(void *)(Sizes + 32 * v14 + 24), v5);
      goto LABEL_24;
    }
    unint64_t v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >= 7)
    {
      unint64_t v15 = v11 + 1;
      uint64_t v16 = (v11 + 1) & 0x3FFFFFFFFFFFFFF8;
      unsigned int v13 = (uint64_t *)(Value + 8 * v16);
      uint64_t v17 = (int64x2_t *)(Value + 32);
      int32x4_t v18 = 0uLL;
      int64x2_t v19 = vdupq_n_s64(0x8000000000000000);
      uint64_t v20 = v16;
      int32x4_t v21 = 0uLL;
      do
      {
        int64x2_t v22 = v17[-2];
        int64x2_t v23 = v17[-1];
        int64x2_t v24 = *v17;
        int64x2_t v25 = v17[1];
        v17 += 4;
        int32x4_t v18 = vsubq_s32(v18, vuzp1q_s32((int32x4_t)vceqq_s64(v22, v19), (int32x4_t)vceqq_s64(v23, v19)));
        int32x4_t v21 = vsubq_s32(v21, vuzp1q_s32((int32x4_t)vceqq_s64(v24, v19), (int32x4_t)vceqq_s64(v25, v19)));
        v20 -= 8;
      }
      while (v20);
      unsigned int v12 = vaddvq_s32(vaddq_s32(v21, v18));
      if (v15 == v16)
      {
LABEL_22:
        uint64_t v14 = v12;
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v12 = 0;
      unsigned int v13 = (uint64_t *)Value;
    }
    int64x2_t v26 = (uint64_t *)(Value + 8 * v10);
    do
    {
      uint64_t v27 = *v13++;
      if (v27 == 0x8000000000000000) {
        ++v12;
      }
    }
    while (v13 != v26);
    goto LABEL_22;
  }
  return result;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::AllocOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(unsigned char *result, unsigned int **a2)
{
  unint64_t v2 = result;
  if (!result[9])
  {
    uint64_t v3 = *(void *)result;
    if (*(void *)result
      && *(void *)(*(void *)(*(void *)result + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
    {
      unint64_t v5 = **a2;
      uint64_t v6 = *(void *)a2[1];
      uint64_t v31 = *(void *)result;
      unint64_t v30 = *(void *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v7 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30) + 8 * v5);
      char isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        v2[8] = isValidSymbol;
        v2[9] = 1;
        return v2;
      }
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
      if (v10 >= v5) {
        unint64_t v11 = v5;
      }
      else {
        unint64_t v11 = v10;
      }
      if (!v11)
      {
        uint64_t v15 = 0;
LABEL_23:
        Dynamicuint64_t Sizes = mlir::memref::AllocOp::getDynamicSizes((mlir::memref::AllocOp *)&v31);
        char isValidSymbol = mlir::affine::isValidSymbol(*(void *)(DynamicSizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        unint64_t v16 = v12 + 1;
        uint64_t v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        uint64_t v14 = (uint64_t *)(Value + 8 * v17);
        int32x4_t v18 = (int64x2_t *)(Value + 32);
        int32x4_t v19 = 0uLL;
        int64x2_t v20 = vdupq_n_s64(0x8000000000000000);
        uint64_t v21 = v17;
        int32x4_t v22 = 0uLL;
        do
        {
          int64x2_t v23 = v18[-2];
          int64x2_t v24 = v18[-1];
          int64x2_t v25 = *v18;
          int64x2_t v26 = v18[1];
          v18 += 4;
          int32x4_t v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          int32x4_t v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        unsigned int v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          uint64_t v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v13 = 0;
        uint64_t v14 = (uint64_t *)Value;
      }
      uint64_t v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        uint64_t v28 = *v14++;
        if (v28 == 0x8000000000000000) {
          ++v13;
        }
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>(uint64_t a1, unsigned char *__src, unsigned char *a3)
{
  size_t v6 = a3 - __src;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (__src != a3)
  {
    memcpy((void *)(*(void *)a1 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 3);
}

uint64_t mlir::AffineMap::shiftDims(mlir::AffineMap *this, int a2, unsigned int a3)
{
  void v25[4] = *MEMORY[0x1E4F143B8];
  int v6 = mlir::AffineMap::getNumDims(this) + a2;
  int NumSymbols = mlir::AffineMap::getNumSymbols(this);
  uint64_t Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  unint64_t v10 = v8;
  int64x2_t v23 = v25;
  uint64_t v24 = 0x400000000;
  uint64_t v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    uint64_t v12 = 0;
    int v14 = 0;
    unsigned int v13 = v25;
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    uint64_t v12 = v24;
    unsigned int v13 = v23;
    int v14 = v24;
    if (!v10) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = &v13[v12];
  do
  {
    unint64_t v16 = *Results++;
    int32x4_t v22 = v16;
    unsigned int NumDims = mlir::AffineMap::getNumDims(this);
    *v15++ = mlir::AffineExpr::shiftDims(&v22, NumDims, a2, a3);
    v11 -= 8;
  }
  while (v11);
  int v14 = v24;
  unsigned int v13 = v23;
LABEL_8:
  uint64_t v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  uint64_t LHS = (void *)mlir::AffineBinaryOpExpr::getLHS(this);
  uint64_t v20 = mlir::AffineMap::get(v6, NumSymbols, (uint64_t)v13, v18, LHS);
  if (v23 != v25) {
    free(v23);
  }
  return v20;
}

uint64_t mlir::AffineMap::shiftSymbols(mlir::AffineMap *this, int a2, unsigned int a3)
{
  void v25[4] = *MEMORY[0x1E4F143B8];
  int NumDims = mlir::AffineMap::getNumDims(this);
  int v7 = mlir::AffineMap::getNumSymbols(this) + a2;
  uint64_t Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  unint64_t v10 = v8;
  int64x2_t v23 = v25;
  uint64_t v24 = 0x400000000;
  uint64_t v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    uint64_t v12 = 0;
    int v14 = 0;
    unsigned int v13 = v25;
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    uint64_t v12 = v24;
    unsigned int v13 = v23;
    int v14 = v24;
    if (!v10) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = &v13[v12];
  do
  {
    unint64_t v16 = *Results++;
    int32x4_t v22 = v16;
    unsigned int NumSymbols = mlir::AffineMap::getNumSymbols(this);
    *v15++ = mlir::AffineExpr::shiftSymbols(&v22, NumSymbols, a2, a3);
    v11 -= 8;
  }
  while (v11);
  int v14 = v24;
  unsigned int v13 = v23;
LABEL_8:
  uint64_t v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  uint64_t LHS = (void *)mlir::AffineBinaryOpExpr::getLHS(this);
  uint64_t v20 = mlir::AffineMap::get(NumDims, v7, (uint64_t)v13, v18, LHS);
  if (v23 != v25) {
    free(v23);
  }
  return v20;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::Attribute>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v26, a3)) {
    return 0;
  }
  uint64_t v13 = v26;
  *a2 = v26;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    uint64_t v24 = "invalid kind of attribute specified";
    __int16 v25 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v27, a1, v12, &v24);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      unint64_t v16 = (void **)__p;
      if (__p)
      {
        uint64_t v17 = v33;
        uint64_t v18 = __p;
        if (v33 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          uint64_t v18 = __p;
        }
        char v33 = v16;
        operator delete(v18);
      }
      int32x4_t v19 = v30;
      if (v30)
      {
        uint64_t v20 = v31;
        uint64_t v21 = v30;
        if (v31 != v30)
        {
          do
          {
            int64x2_t v23 = (void *)*--v20;
            int32x4_t v22 = v23;
            *uint64_t v20 = 0;
            if (v23) {
              operator delete[](v22);
            }
          }
          while (v20 != v19);
          uint64_t v21 = v30;
        }
        uint64_t v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29) {
        free(v28);
      }
    }
  }
  return v14;
}

uint64_t foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(uint64_t **a1, int a2)
{
  char v2 = a2;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int64_t v47 = v49;
  uint64_t v48 = 0x800000000;
  uint64_t v4 = **a1;
  unint64_t v5 = *(unsigned int *)(v4 + 44);
  uint64_t v6 = v4 + 16 * ((v5 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v4 + 44))) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v6 + 24);
  if (a2)
  {
    if ((v5 & 0x800000) != 0)
    {
      uint64_t v8 = *(void *)(v4 + 72);
      if (!*(_DWORD *)(v6 + 24)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (!*(_DWORD *)(v6 + 24)) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v6 + 28);
    if ((v5 & 0x800000) != 0)
    {
      uint64_t v8 = *(void *)(v4 + 72) + 32 * v7;
      uint64_t v7 = (v9 + v7) - v7;
      if (!v7) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = 32 * v7;
      uint64_t v7 = (v9 + v7) - v7;
      if (!v7) {
        goto LABEL_23;
      }
    }
  }
  unint64_t v10 = (void **)(v8 + 24);
  do
  {
    char v50 = *v10;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v50);
    unint64_t v12 = DefiningOp;
    if (DefiningOp)
    {
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
      {
        BOOL v44 = v46;
        uint64_t v45 = 0x100000000;
        mlir::Operation::fold(v12, 0, 0, (uint64_t)&v44);
        unint64_t v13 = *(void *)v44;
        if (v44 != v46) {
          free(v44);
        }
        unint64_t v12 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unint64_t v12 = 0;
      }
    }
    uint64_t v14 = v48;
    if (v48 >= (unint64_t)HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
      uint64_t v14 = v48;
    }
    *((void *)v47 + v14) = v12;
    LODWORD(v48) = v48 + 1;
    v10 += 4;
    --v7;
  }
  while (v7);
LABEL_23:
  uint64_t v15 = *a1;
  if (v2)
  {
    unint64_t v16 = *(void **)(*v15 + 16 * (((unint64_t)*(unsigned int *)(*v15 + 44) >> 23) & 1) + 64);
  }
  else
  {
    uint64_t v17 = *v15;
    unint64_t v18 = *(unsigned int *)(v17 + 44);
    uint64_t v19 = v17 + 16 * ((v18 >> 23) & 1) + 64;
    if (!BYTE3(v18)) {
      uint64_t v19 = 0;
    }
    unint64_t v16 = *(void **)(v19 + 16);
  }
  BOOL v44 = v16;
  uint64_t Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
  BOOL v44 = v46;
  uint64_t v45 = 0x400000000;
  if (mlir::AffineMap::constantFold(&Value, (uint64_t)v47, v48, (uint64_t)&v44, 0))
  {
    char v50 = *(void **)v44;
    mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&__p);
    if (v45 >= 2)
    {
      uint64_t v20 = 8 * v45;
      uint64_t v21 = 8;
      if ((v2 & 1) == 0)
      {
        while (1)
        {
          uint64_t v40 = *(void *)((char *)v44 + v21);
          mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
          int v25 = llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v50);
          if (v25 >= 0) {
            p_p = &v50;
          }
          else {
            p_p = &__p;
          }
          unsigned int v27 = v42;
          if (v42 > 0x40) {
            goto LABEL_55;
          }
          if (v25 >= 0) {
            unsigned int v27 = v51;
          }
          if (v27 > 0x40)
          {
LABEL_55:
            llvm::APInt::assignSlowCase((llvm::APInt *)&__p, (const llvm::APInt *)p_p);
            if (v51 >= 0x41)
            {
LABEL_56:
              if (v50) {
                operator delete[](v50);
              }
            }
          }
          else
          {
            std::string __p = *p_p;
            unsigned int v42 = v27;
            if (v51 >= 0x41) {
              goto LABEL_56;
            }
          }
          v21 += 8;
          if (v20 == v21) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        uint64_t v40 = *(void *)((char *)v44 + v21);
        mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
        int v22 = llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v50);
        if (v22 <= 0) {
          int64x2_t v23 = &v50;
        }
        else {
          int64x2_t v23 = &__p;
        }
        unsigned int v24 = v42;
        if (v42 > 0x40) {
          goto LABEL_42;
        }
        if (v22 <= 0) {
          unsigned int v24 = v51;
        }
        if (v24 >= 0x41)
        {
LABEL_42:
          llvm::APInt::assignSlowCase((llvm::APInt *)&__p, (const llvm::APInt *)v23);
          if (v51 >= 0x41)
          {
LABEL_43:
            if (v50) {
              operator delete[](v50);
            }
          }
        }
        else
        {
          std::string __p = *v23;
          unsigned int v42 = v24;
          if (v51 >= 0x41) {
            goto LABEL_43;
          }
        }
        v21 += 8;
      }
      while (v20 != v21);
    }
LABEL_58:
    uint64_t v28 = *a1;
    if (v2)
    {
      if (v42 > 0x40) {
        uint64_t v29 = *(void *)__p;
      }
      else {
        uint64_t v29 = (uint64_t)((void)__p << -(uint64_t)v42) >> -(uint64_t)v42;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      unint64_t ConstantMap = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v29, Context, v34);
      mlir::affine::AffineForOp::setLowerBound(v28, (uint64_t)v50, v51, ConstantMap);
      if (v42 < 0x41) {
        goto LABEL_72;
      }
    }
    else
    {
      if (v42 > 0x40) {
        uint64_t v32 = *(void *)__p;
      }
      else {
        uint64_t v32 = (uint64_t)((void)__p << -(uint64_t)v42) >> -(uint64_t)v42;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      uint64_t v36 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      unint64_t v38 = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v32, v36, v37);
      mlir::affine::AffineForOp::setUpperBound(v28, (uint64_t)v50, v51, v38);
      if (v42 < 0x41) {
        goto LABEL_72;
      }
    }
    if (__p) {
      operator delete[](__p);
    }
LABEL_72:
    uint64_t v30 = 1;
    uint64_t v31 = v44;
    if (v44 == v46) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  uint64_t v30 = 0;
  uint64_t v31 = v44;
  if (v44 != v46) {
LABEL_73:
  }
    free(v31);
LABEL_74:
  if (v47 != v49) {
    free(v47);
  }
  return v30;
}

void simplifyMinOrMaxExprWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3, char a4)
{
  v95[6] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return;
  }
  unint64_t v93 = (char *)v95;
  uint64_t v94 = 0x300000000;
  unint64_t v90 = v92;
  uint64_t v91 = 0x300000000;
  if (a3 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, a3, 16);
    if (a3 > HIDWORD(v91)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, a3, 16);
    }
  }
  uint64_t v8 = 8 * a3;
  do
  {
    uint64_t v9 = *a2;
    unint64_t LowerBound = getLowerBound(*a2);
    unint64_t v12 = v11;
    uint64_t v13 = v94;
    if (v94 >= (unint64_t)HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 16);
      uint64_t v13 = v94;
    }
    uint64_t v14 = (unint64_t *)&v93[16 * v13];
    *uint64_t v14 = LowerBound;
    v14[1] = v12;
    LODWORD(v94) = v94 + 1;
    unint64_t UpperBound = getUpperBound(v9);
    unint64_t v17 = v16;
    uint64_t v18 = v91;
    if (v91 >= (unint64_t)HIDWORD(v91))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, v91 + 1, 16);
      uint64_t v18 = v91;
    }
    uint64_t v19 = (unint64_t *)((char *)v90 + 16 * v18);
    *uint64_t v19 = UpperBound;
    v19[1] = v17;
    LODWORD(v91) = v91 + 1;
    ++a2;
    v8 -= 8;
  }
  while (v8);
  unint64_t v87 = v89;
  uint64_t v88 = 0x400000000;
  unint64_t v84 = v86;
  uint64_t v85 = 0x400000000;
  unsigned int Kind = mlir::AffineExpr::getKind(a1);
  if (HIDWORD(v88) < Kind)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, Kind, 16);
    unsigned int v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21)
    {
LABEL_15:
      uint64_t Results = mlir::AffineMap::getResults(a1);
      if (!v23) {
        goto LABEL_34;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21) {
      goto LABEL_15;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v21, 16);
  uint64_t Results = mlir::AffineMap::getResults(a1);
  if (v23)
  {
LABEL_19:
    unsigned int v24 = (void **)Results;
    for (uint64_t i = 8 * v23; i; i -= 8)
    {
      uint64_t v28 = *v24;
      uint64_t v81 = *v24;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v81) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v81, (uint64_t)v28);
        if (!v81) {
          goto LABEL_29;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v81, 0);
        if (!v81)
        {
LABEL_29:
          uint64_t NumDims = mlir::AffineMap::getNumDims(a1);
          uint64_t NumSymbols = mlir::AffineMap::getNumSymbols(a1);
          unint64_t BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v28, NumDims, NumSymbols, (uint64_t)v93, v94, (uint64_t)v90, v91, 0);
          unint64_t v38 = v37;
          uint64_t v39 = v88;
          if (v88 >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
            uint64_t v39 = v88;
          }
          uint64_t v40 = (unint64_t *)((char *)v87 + 16 * v39);
          *uint64_t v40 = BoundForAffineExpr;
          v40[1] = v38;
          LODWORD(v88) = v88 + 1;
          uint64_t v41 = mlir::AffineMap::getNumDims(a1);
          uint64_t v42 = mlir::AffineMap::getNumSymbols(a1);
          unint64_t v43 = mlir::getBoundForAffineExpr((uint64_t)v28, v41, v42, (uint64_t)v93, v94, (uint64_t)v90, v91, 1);
          uint64_t v27 = v44;
          uint64_t v45 = v85;
          if (v85 >= (unint64_t)HIDWORD(v85))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
            uint64_t v45 = v85;
          }
          uint64_t v26 = (char *)v84 + 16 * v45;
          *(void *)uint64_t v26 = v43;
          goto LABEL_21;
        }
      }
      uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      uint64_t v30 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
        uint64_t v30 = v88;
      }
      uint64_t v31 = (uint64_t *)((char *)v87 + 16 * v30);
      *uint64_t v31 = LHS;
      v31[1] = 1;
      LODWORD(v88) = v88 + 1;
      uint64_t v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      uint64_t v33 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
        uint64_t v33 = v85;
      }
      uint64_t v26 = (char *)v84 + 16 * v33;
      *(void *)uint64_t v26 = v32;
      uint64_t v27 = 1;
LABEL_21:
      *((void *)v26 + 1) = v27;
      LODWORD(v85) = v85 + 1;
      ++v24;
    }
  }
LABEL_34:
  uint64_t v81 = v83;
  uint64_t v82 = 0x400000000;
  uint64_t v46 = mlir::AffineMap::getResults(a1);
  if (v47)
  {
    uint64_t v48 = (uint64_t *)v46;
    int64_t v49 = (uint64_t *)(v46 + 8 * v47);
    unsigned int v50 = 0;
    if (a4)
    {
      do
      {
        uint64_t AffineConstantExpr = *v48;
        uint64_t v80 = *v48;
        long long v53 = (char *)v84;
        if (*((unsigned char *)v87 + 16 * v50 + 8))
        {
          uint64_t v54 = (mlir **)((char *)v84 + 16 * v50);
          if (*((unsigned char *)v54 + 8))
          {
            uint64_t v55 = (mlir *)*((void *)v87 + 2 * v50);
            if (v55 == *v54)
            {
              DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v80);
              uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(v55, DesiredBytecodeVersion, v57);
              uint64_t v80 = AffineConstantExpr;
              long long v53 = (char *)v84;
            }
          }
        }
        unsigned int v58 = &v53[16 * v50];
        if (v58[8] && v88)
        {
          unint64_t v59 = 0;
          char v60 = v87;
          uint64_t v61 = (char *)v87 + 16 * v50;
          unsigned int v62 = v53 + 8;
          while (v50 == v59
               || !v60[8]
               || *(void *)v60 <= *(void *)v58
               && (*(void *)v60 < *(void *)v58
                || *v62
                && v61[8]
                && *(void *)v61 == *(void *)v58
                && v59 > v50
                && *(void *)v60 == *((void *)v62 - 1)))
          {
            ++v59;
            v62 += 16;
            v60 += 16;
            if (v60 == (char *)v87 + 16 * v88) {
              goto LABEL_37;
            }
          }
        }
        else
        {
LABEL_37:
          uint64_t v51 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            uint64_t v51 = v82;
          }
          *((void *)v81 + v51) = AffineConstantExpr;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
    else
    {
      do
      {
        uint64_t v64 = *v48;
        uint64_t v80 = *v48;
        uint64_t v65 = (char *)v87;
        if (*((unsigned char *)v87 + 16 * v50 + 8))
        {
          uint64_t v66 = (mlir **)((char *)v84 + 16 * v50);
          if (*((unsigned char *)v66 + 8))
          {
            long long v67 = (mlir *)*((void *)v87 + 2 * v50);
            if (v67 == *v66)
            {
              char v68 = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v80);
              uint64_t v64 = mlir::getAffineConstantExpr(v67, v68, v69);
              uint64_t v80 = v64;
              uint64_t v65 = (char *)v87;
            }
          }
        }
        unint64_t v70 = &v65[16 * v50];
        if (v70[8] && v85)
        {
          unint64_t v71 = 0;
          uint64_t v72 = v84;
          uint64_t v73 = (char *)v84 + 16 * v50;
          uint64_t v74 = v65 + 8;
          while (v50 == v71
               || !v72[8]
               || *(void *)v72 >= *(void *)v70
               && (*(void *)v72 > *(void *)v70
                || *v74
                && v73[8]
                && *(void *)v70 == *(void *)v73
                && v71 > v50
                && *(void *)v72 == *((void *)v74 - 1)))
          {
            ++v71;
            v74 += 16;
            v72 += 16;
            if (v72 == (char *)v84 + 16 * v85) {
              goto LABEL_59;
            }
          }
        }
        else
        {
LABEL_59:
          uint64_t v63 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            uint64_t v63 = v82;
          }
          *((void *)v81 + v63) = v64;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
  }
  int v75 = mlir::AffineMap::getNumDims(a1);
  int v76 = mlir::AffineMap::getNumSymbols(a1);
  long long v77 = v81;
  uint64_t v78 = v82;
  uint64_t v79 = (void *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(void *)a1 = mlir::AffineMap::get(v75, v76, (uint64_t)v77, v78, v79);
  if (v81 != v83) {
    free(v81);
  }
  if (v84 != v86) {
    free(v84);
  }
  if (v87 != v89) {
    free(v87);
  }
  if (v90 != v92) {
    free(v90);
  }
  if (v93 != (char *)v95) {
    free(v93);
  }
}

unint64_t getLowerBound(uint64_t a1)
{
  uint64_t v1 = 0;
  if (!a1) {
    return 0;
  }
  unint64_t v3 = 0;
  if ((*(void *)(a1 + 8) & 7) == 7)
  {
    uint64_t v4 = *(mlir::Block **)(a1 + 16);
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = *(void *)(mlir::Block::getParent(v4) + 16);
    BOOL v6 = v5
      && *(void *)(*(void *)(v5 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id;
    if (!v6) {
      goto LABEL_8;
    }
    uint64_t v1 = 0;
    unint64_t v3 = 0;
    unint64_t v8 = *(unsigned int *)(v5 + 44);
    uint64_t v9 = (uint64_t *)(v5 + 64 + 16 * ((v8 >> 23) & 1));
    uint64_t v10 = *(void *)((((unint64_t)v9 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v5 + 40)
                    + 8);
    BOOL v6 = v10 == 0;
    uint64_t v11 = v10 - 8;
    if (v6) {
      uint64_t v11 = 0;
    }
    if (**(void **)(v11 + 48) != a1) {
      return v3 | v1;
    }
    uint64_t Value = *v9;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
    {
      uint64_t Value = *(void *)(v5 + 64 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
      SingleConstantuint64_t Result = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
      unint64_t v3 = SingleConstantResult & 0xFFFFFFFFFFFFFF00;
      uint64_t v1 = SingleConstantResult;
    }
    else
    {
LABEL_8:
      uint64_t v1 = 0;
      unint64_t v3 = 0;
    }
  }
  return v3 | v1;
}

unint64_t getUpperBound(uint64_t a1)
{
  LOBYTE(v1) = 0;
  if (!a1) {
    return 0;
  }
  unint64_t v3 = 0;
  if ((*(void *)(a1 + 8) & 7) == 7)
  {
    uint64_t v4 = *(mlir::Block **)(a1 + 16);
    if (v4
      && ((uint64_t v5 = *(void *)(mlir::Block::getParent(v4) + 16)) != 0
        ? (BOOL v6 = *(void *)(*(void *)(v5 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
        : (BOOL v6 = 0),
          v6))
    {
      LOBYTE(v1) = 0;
      unint64_t v3 = 0;
      uint64_t v8 = v5 + 64;
      unint64_t v9 = *(unsigned int *)(v5 + 44);
      uint64_t v10 = *(void *)(((v5 + 64 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(v5 + 40)
                      + 8);
      BOOL v6 = v10 == 0;
      uint64_t v11 = v10 - 8;
      if (v6) {
        uint64_t v11 = 0;
      }
      if (**(void **)(v11 + 48) == a1)
      {
        uint64_t v12 = BYTE3(v9) ? v5 + 64 + 16 * ((v9 >> 23) & 1) : 0;
        std::string __p = *(void **)(v12 + 16);
        std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
        BOOL isSingleConstant = mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p);
        LOBYTE(v1) = 0;
        unint64_t v3 = 0;
        if (isSingleConstant)
        {
          std::string __p = *(void **)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
          std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
          if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p))
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44))) {
              uint64_t v14 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            }
            else {
              uint64_t v14 = 0;
            }
            std::string __p = *(void **)(v14 + 16);
            std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            SingleConstantuint64_t Result = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            if (HIBYTE(*(_DWORD *)(v5 + 44))) {
              uint64_t v16 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            }
            else {
              uint64_t v16 = 0;
            }
            std::string __p = *(void **)(v16 + 16);
            std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            uint64_t v17 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            std::string __p = *(void **)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
            std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            uint64_t v18 = v17 + ~mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p);
            if (HIBYTE(*(_DWORD *)(v5 + 44))) {
              uint64_t v19 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v24 = *(void *)(v19 + 8);
            mlir::IntegerAttr::getValue(&v24, (llvm::APInt *)&__p);
            if (v23 > 0x40)
            {
              uint64_t v20 = *(void *)__p;
              operator delete[](__p);
            }
            else
            {
              uint64_t v20 = (uint64_t)((void)__p << -(uint64_t)v23) >> -(uint64_t)v23;
            }
            uint64_t v1 = SingleConstantResult + ~(v18 % v20);
          }
          else
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44))) {
              uint64_t v21 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            }
            else {
              uint64_t v21 = 0;
            }
            std::string __p = *(void **)(v21 + 16);
            std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
            uint64_t v1 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p) - 1;
          }
          unint64_t v3 = v1 & 0xFFFFFFFFFFFFFF00;
        }
      }
    }
    else
    {
      LOBYTE(v1) = 0;
      unint64_t v3 = 0;
    }
  }
  return v3 | v1;
}

uint64_t deduplicateAndResolveOperands(mlir::AsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v38[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v12, v13);
  if (!a3) {
    return 1;
  }
  uint64_t v15 = IndexType;
  uint64_t v16 = &a2[6 * a3];
  uint64_t v35 = v16;
  while (2)
  {
    uint64_t v36 = v38;
    uint64_t v37 = 0x600000000;
    uint64_t v17 = *((unsigned int *)a2 + 2);
    if (!v17)
    {
LABEL_23:
      int v32 = 0;
      uint64_t v33 = v36;
      if (v36 == v38) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    uint64_t v18 = *a2;
    uint64_t v19 = 32 * v17;
    do
    {
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, uint64_t, void **))(*(void *)a1 + 696))(a1, v18, v15, &v36))
      {
        int v32 = 1;
        uint64_t v33 = v36;
        if (v36 == v38) {
          goto LABEL_25;
        }
LABEL_24:
        free(v33);
        goto LABEL_25;
      }
      v18 += 32;
      v19 -= 32;
    }
    while (v19);
    if (!v37) {
      goto LABEL_23;
    }
    uint64_t v20 = (uint64_t *)v36;
    uint64_t v21 = (char *)v36 + 8 * v37;
    while (2)
    {
      uint64_t v24 = *v20;
      int v25 = *(char **)a4;
      uint64_t v26 = *(unsigned int *)(a4 + 8);
      uint64_t v27 = *(char **)a4;
      if (v26)
      {
        uint64_t v28 = 8 * v26;
        uint64_t v27 = *(char **)a4;
        while (*(void *)v27 != v24)
        {
          v27 += 8;
          v28 -= 8;
          if (!v28)
          {
            uint64_t v27 = &v25[8 * v26];
            break;
          }
        }
      }
      uint64_t v29 = (mlir *)((unint64_t)(v27 - v25) >> 3);
      if (v26 == v29)
      {
        if (v26 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v26 + 1, 8);
          uint64_t v26 = *(unsigned int *)(a4 + 8);
          int v25 = *(char **)a4;
        }
        *(void *)&v25[8 * v26] = v24;
        ++*(_DWORD *)(a4 + 8);
      }
      uint64_t Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      if (a6 == 6)
      {
        uint64_t AffineDimExpr = mlir::getAffineDimExpr(v29, Context, v31);
        unint64_t v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
        {
LABEL_22:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v23 + 1, 8);
          unint64_t v23 = *(unsigned int *)(a5 + 8);
        }
      }
      else
      {
        uint64_t AffineDimExpr = mlir::getAffineSymbolExpr(v29, Context, v31);
        unint64_t v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12)) {
          goto LABEL_22;
        }
      }
      *(void *)(*(void *)a5 + 8 * v23) = AffineDimExpr;
      ++*(_DWORD *)(a5 + 8);
      if (++v20 != (uint64_t *)v21) {
        continue;
      }
      break;
    }
    int v32 = 0;
    uint64_t v16 = v35;
    uint64_t v33 = v36;
    if (v36 != v38) {
      goto LABEL_24;
    }
LABEL_25:
    if (!v32)
    {
      a2 += 6;
      if (a2 == v16) {
        return 1;
      }
      continue;
    }
    return 0;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseAffineMapWithMinMax(mlir::OpAsmParser &,mlir::OperationState &,anonymous namespace'::MinMaxKind)::$_0>(void *a1)
{
  v50[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (*(_DWORD *)a1[1]) {
    unint64_t v3 = "max";
  }
  else {
    unint64_t v3 = "min";
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)v2 + 376))(v2, v3, 3))
  {
    *(_DWORD *)(a1[2] + 8) = 0;
    uint64_t v44 = 0;
    if ((*(unsigned __int8 (**)(void))(*(void *)*a1 + 704))(*a1))
    {
      mlir::NamedAttrList::erase(a1[4] + 112, *(const void **)a1[3], *(void *)(a1[3] + 8));
      uint64_t v4 = a1[5];
      uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      uint64_t Results = (char *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
      llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(v4, *(void *)v4 + 8 * *(unsigned int *)(v4 + 8), Results, &Results[8 * v6]);
      uint64_t v7 = (char **)a1[2];
      uint64_t v8 = *v7;
      uint64_t v9 = *((unsigned int *)v7 + 2);
      uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v9 >= NumDims) {
        unint64_t v11 = NumDims;
      }
      else {
        unint64_t v11 = v9;
      }
      uint64_t Value = v50;
      uint64_t v49 = 0x100000000;
      if (v11 < 2)
      {
        if (!v11)
        {
          int v30 = 0;
LABEL_23:
          LODWORD(v49) = v30 + v11;
          uint64_t v45 = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
          unsigned int v31 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v45);
          unsigned int v32 = v31;
          uint64_t v33 = &v8[32 * v31];
          uint64_t v45 = v47;
          uint64_t v46 = 0x100000000;
          size_t v34 = 32 * v9 - 32 * v31;
          if (v34 < 0x21)
          {
            unsigned int v35 = 0;
            if (v31 == v9)
            {
LABEL_28:
              LODWORD(v46) = v35 + (v34 >> 5);
              uint64_t v36 = a1[6];
              uint64_t v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v36, Kind, (unint64_t)&Value);
              uint64_t v38 = a1[7];
              uint64_t v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              unsigned int v39 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v38, v39, (unint64_t)&v45);
              uint64_t v40 = a1[8];
              uint64_t v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              int v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              uint64_t v42 = *(unsigned int *)(v40 + 8);
              if (v42 >= *(_DWORD *)(v40 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v40, (void *)(v40 + 16), v42 + 1, 4);
                LODWORD(v42) = *(_DWORD *)(v40 + 8);
              }
              *(_DWORD *)(*(void *)v40 + 4 * v42) = v41;
              ++*(_DWORD *)(v40 + 8);
              if (v45 != v47) {
                free(v45);
              }
              if (Value != v50) {
                free(Value);
              }
              return 1;
            }
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, (uint64_t)v34 >> 5, 32);
            unsigned int v35 = v46;
            if (v32 == v9) {
              goto LABEL_28;
            }
          }
          memcpy((char *)v45 + 32 * v35, v33, v34);
          unsigned int v35 = v46;
          goto LABEL_28;
        }
        uint64_t v12 = 0;
        uint64_t v13 = v50;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v50, v11, 32);
        uint64_t v12 = v49;
        uint64_t v13 = Value;
      }
      memcpy(&v13[4 * v12], v8, 32 * v11);
      int v30 = v49;
      goto LABEL_23;
    }
    return 0;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = a1[6];
  unsigned int v16 = *(_DWORD *)(v15 + 8);
  if (v16 < *(_DWORD *)(v15 + 12))
  {
    uint64_t v17 = (void *)(*(void *)v15 + 48 * v16);
    *uint64_t v17 = v17 + 2;
    v17[1] = 0x100000000;
    LODWORD(v17) = *(_DWORD *)(v15 + 8) + 1;
    *(_DWORD *)(v15 + 8) = v17;
    uint64_t v18 = *(void *)v15 + 48 * v17 - 48;
    uint64_t v19 = a1[7];
    unsigned int v20 = *(_DWORD *)(v19 + 8);
    if (v20 < *(_DWORD *)(v19 + 12)) {
      goto LABEL_13;
    }
LABEL_37:
    uint64_t v22 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v19);
    uint64_t v23 = a1[5];
    uint64_t v24 = *(unsigned int *)(v23 + 8);
    if (v24 < *(_DWORD *)(v23 + 12)) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
  uint64_t v18 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v15);
  uint64_t v19 = a1[7];
  unsigned int v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12)) {
    goto LABEL_37;
  }
LABEL_13:
  uint64_t v21 = (void *)(*(void *)v19 + 48 * v20);
  *uint64_t v21 = v21 + 2;
  v21[1] = 0x100000000;
  LODWORD(v21) = *(_DWORD *)(v19 + 8) + 1;
  *(_DWORD *)(v19 + 8) = v21;
  uint64_t v22 = *(void *)v19 + 48 * v21 - 48;
  uint64_t v23 = a1[5];
  uint64_t v24 = *(unsigned int *)(v23 + 8);
  if (v24 < *(_DWORD *)(v23 + 12))
  {
LABEL_14:
    uint64_t v25 = *(void *)v23;
    *(void *)(*(void *)v23 + 8 * v24) = 0;
    goto LABEL_15;
  }
LABEL_38:
  llvm::SmallVectorBase<unsigned int>::grow_pod(v23, (void *)(v23 + 16), v24 + 1, 8);
  *(void *)(*(void *)v23 + 8 * *(unsigned int *)(v23 + 8)) = 0;
  LODWORD(v24) = *(_DWORD *)(v23 + 8);
  uint64_t v25 = *(void *)v23;
LABEL_15:
  unsigned int v26 = v24 + 1;
  *(_DWORD *)(v23 + 8) = v26;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 712))(v14, v18, v22, v25 + 8 * v26 - 8))return 0; {
  uint64_t v27 = a1[8];
  }
  uint64_t v28 = *(unsigned int *)(v27 + 8);
  if (v28 >= *(_DWORD *)(v27 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v27 + 16), v28 + 1, 4);
    LODWORD(v28) = *(_DWORD *)(v27 + 8);
  }
  uint64_t result = 1;
  *(_DWORD *)(*(void *)v27 + 4 * v28) = 1;
  ++*(_DWORD *)(v27 + 8);
  return result;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v15 = *(void *)a1 + 48 * v6;
    if (*(void *)a1 <= a3 && v15 > a3)
    {
      unint64_t v17 = a3 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
      unint64_t v3 = *(void *)a1 + v17;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
    }
  }
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    uint64_t v9 = (void *)(*(void *)a1 + 48 * v8);
    uint64_t v10 = a2;
    while (1)
    {
      uint64_t v12 = v9 + 2;
      void *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v9 == (void *)v3) {
        goto LABEL_7;
      }
      unsigned int v13 = *(_DWORD *)(v3 + 8);
      if (!v13) {
        goto LABEL_7;
      }
      if (v13 < 2)
      {
        size_t v11 = 32;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 32);
        uint64_t v14 = *(unsigned int *)(v3 + 8);
        if (!v14) {
          goto LABEL_6;
        }
        uint64_t v12 = (void *)*v9;
        size_t v11 = 32 * v14;
      }
      memcpy(v12, *(const void **)v3, v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 6;
      if (!--v10)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  unint64_t v3 = (_DWORD *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 48 * v7;
    uint64_t v9 = v4;
    do
    {
      void *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      do
      {
        uint64_t v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12) {
          free(v12);
        }
        v11 -= 12;
      }
      while (v11 * 4);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(uint64_t a1)
{
  unint64_t v16 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 16);
  unint64_t v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 48, &v16);
  uint64_t v4 = v3;
  uint64_t v5 = &v3[6 * *(unsigned int *)(a1 + 8)];
  void *v5 = v5 + 2;
  v5[1] = 0x100000000;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 48 * v7;
    uint64_t v9 = v3;
    do
    {
      void *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      do
      {
        uint64_t v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12) {
          free(v12);
        }
        v11 -= 12;
      }
      while (v11 * 4);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v16;
  if (v6 != v2) {
    free(v6);
  }
  *(void *)a1 = v4;
  unsigned int v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)&v4[6 * v14 - 6];
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(void *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, *v1);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineDelinearizeIndexOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.delinearize_index", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDelinearizeIndexOp,void>::id, (uint64_t)&v9);
  int v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C2350;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineIfOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.if", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id, (uint64_t)&v9);
  int v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C1860;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffinePrefetchOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.prefetch", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffinePrefetchOp,void>::id, (uint64_t)&v9);
  int v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C20F8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::affine::AffinePrefetchOp::getAttributeNames(void)::attrNames, 4);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::Model(void *a1, uint64_t a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  {
    unint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaStartOp]";
    unint64_t v18 = 80;
    unint64_t v10 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
    if (v18 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v18;
    }
    uint64_t v12 = &v17[v11];
    unint64_t v13 = v18 - v11;
    if (v18 - v11 >= 0x12) {
      uint64_t v14 = 18;
    }
    else {
      uint64_t v14 = v18 - v11;
    }
    unint64_t v15 = v13 - v14;
    if (v15 >= v15 - 1) {
      uint64_t v16 = v15 - 1;
    }
    else {
      uint64_t v16 = v15;
    }
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v19);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v19);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_start", 16, a2, v4, (uint64_t)&v19);
  unint64_t v5 = v19;
  if (v20)
  {
    uint64_t v6 = 16 * v20;
    uint64_t v7 = (void **)((char *)v19 + 8);
    do
    {
      unint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v19;
  }
  if (v5 != v21) {
    free(v5);
  }
  *a1 = &unk_1EC9C1F68;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  char v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0) {
        uint64_t v7 = v9;
      }
      else {
        uint64_t v7 = (llvm **)v9[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v9[0], v9[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unsigned int v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(&v4, a3);
}

uint64_t mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*(void *)(*(void *)(v3 + 72) + 24) == a2)
  {
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v3 + 24));
    __int16 v12 = 261;
    uint64_t v7 = "src_map";
  }
  else
  {
    v11[0] = mlir::Operation::getInherentAttr(v3, (uint64_t)"src_map", 7);
    v11[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
    uint64_t v5 = *(void *)(*(void *)(*a1 + 72)
                   + 32 * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v11) + 1)
                   + 24);
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    __int16 v12 = 261;
    if (v5 == a2) {
      uint64_t v7 = "dst_map";
    }
    else {
      uint64_t v7 = "tag_map";
    }
  }
  v11[0] = v7;
  v11[1] = 7;
  uint64_t v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v11);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)v7, 7);
  mlir::NamedAttribute::NamedAttribute(&v13, v8, InherentAttr);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    __int16 v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::affine::AffineDmaStartOp::getEffects(&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v87 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v94 = 91;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      uint64_t v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[18];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v94 = 88;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      unsigned int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[14];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      uint64_t v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[5];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      uint64_t v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[9];
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v94 = 102;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      unsigned int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  __guard v10 = v9[187];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    __guard v72 = v10;
    uint64_t v74 = v8;
    unint64_t v11 = 0x1E8EB8000;
    __guard v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v94 = 93;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      long long v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v11 = 0x1E8EB8000;
      __guard v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || *(void *)(v11 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineDmaStartOp::print((mlir::affine::AffineDmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2)) {
    return 0;
  }
  uint64_t v4 = a1;
  return mlir::affine::AffineDmaStartOp::verifyInvariantsImpl((mlir::affine::AffineDmaStartOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::Model(void *a1, uint64_t a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  {
    unint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaWaitOp]";
    unint64_t v18 = 79;
    unint64_t v10 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
    if (v18 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v18;
    }
    __int16 v12 = &v17[v11];
    unint64_t v13 = v18 - v11;
    if (v18 - v11 >= 0x12) {
      uint64_t v14 = 18;
    }
    else {
      uint64_t v14 = v18 - v11;
    }
    unint64_t v15 = v13 - v14;
    if (v15 >= v15 - 1) {
      uint64_t v16 = v15 - 1;
    }
    else {
      uint64_t v16 = v15;
    }
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id;
  int v19 = v21;
  uint64_t v20 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>((uint64_t)&v19);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_wait", 15, a2, v4, (uint64_t)&v19);
  unint64_t v5 = v19;
  if (v20)
  {
    uint64_t v6 = 16 * v20;
    uint64_t v7 = (void **)((char *)v19 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v19;
  }
  if (v5 != v21) {
    free(v5);
  }
  *a1 = &unk_1EC9C1EA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  char v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0) {
        uint64_t v7 = v9;
      }
      else {
        uint64_t v7 = (llvm **)v9[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v9[0], v9[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaWaitOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    unint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "tag_map";
  v7[1] = 7;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"tag_map", 7);
  mlir::NamedAttribute::NamedAttribute(&v9, v4, InherentAttr);
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v70 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v16 = v15;
    a1 = v70;
    if (v16)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v76 = 91;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v76;
      }
      unint64_t v19 = &v75[v18];
      unint64_t v20 = v76 - v18;
      if (v76 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v76 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v70;
    }
  }
  uint64_t v2 = v1[18];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v66 = v2;
    uint64_t v71 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v25 = v24;
    uint64_t v2 = v66;
    a1 = v71;
    if (v25)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v76 = 88;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v76;
      }
      int v28 = &v75[v27];
      unint64_t v29 = v76 - v27;
      if (v76 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v76 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v66;
      a1 = v71;
    }
  }
  uint64_t v4 = v3[14];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v67 = v2;
    uint64_t v72 = a1;
    uint64_t v63 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v63;
    uint64_t v2 = v67;
    int v34 = v33;
    a1 = v72;
    if (v34)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v76 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v76;
      }
      int v37 = &v75[v36];
      unint64_t v38 = v76 - v36;
      if (v76 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v76 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v63;
      uint64_t v2 = v67;
      a1 = v72;
    }
  }
  uint64_t v6 = v5[5];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v68 = v2;
    uint64_t v73 = a1;
    uint64_t v61 = v6;
    uint64_t v64 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v61;
    uint64_t v4 = v64;
    int v43 = v42;
    uint64_t v2 = v68;
    a1 = v73;
    if (v43)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v76 = 84;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v76;
      }
      int v46 = &v75[v45];
      unint64_t v47 = v76 - v45;
      if (v76 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v76 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v61;
      uint64_t v4 = v64;
      uint64_t v2 = v68;
      a1 = v73;
    }
  }
  uint64_t v8 = v7[9];
  {
    uint64_t v69 = v2;
    uint64_t v74 = a1;
    uint64_t v62 = v6;
    uint64_t v65 = v4;
    uint64_t v60 = v8;
    uint64_t v8 = v60;
    uint64_t v6 = v62;
    uint64_t v4 = v65;
    uint64_t v2 = v69;
    int v52 = v51;
    a1 = v74;
    if (v52)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v76 = 102;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v76;
      }
      int v55 = &v75[v54];
      unint64_t v56 = v76 - v54;
      if (v76 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v76 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v8 = v60;
      uint64_t v6 = v62;
      uint64_t v4 = v65;
      uint64_t v2 = v69;
      a1 = v74;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v9[187] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::affine::AffineDmaWaitOp::print((mlir::affine::AffineDmaWaitOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2)) {
    return 0;
  }
  uint64_t v4 = a1;
  return mlir::affine::AffineDmaWaitOp::verifyInvariantsImpl((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.apply", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1C48;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineApplyOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "affine.apply", 12, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  unint64_t v14 = mlir::affine::AffineApplyOp::fold((uint64_t)&v18, (uint64_t)&v19);
  unint64_t v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v14 > 7;
  }
  uint64_t v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v176 = 109;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[455];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      uint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      uint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[14];
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      uint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      int64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2776);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2912);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      long long v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineApplyOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::affine::AffineApplyOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDelinearizeIndexOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v124 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      int v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v133 = 87;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      unint64_t v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[449];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v133 = 86;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      unint64_t v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v133 = 97;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      unint64_t v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[13];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      unint64_t v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v133 = 95;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      unint64_t v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = *(void *)(v11 + 2776);
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v133 = 99;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      unint64_t v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2912);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v133 = 93;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      unint64_t v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || *(void *)(v15 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::affine::AffineDelinearizeIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  unint64_t v5 = a1;
  if (!mlir::affine::AffineDelinearizeIndexOp::verifyInvariantsImpl((uint64_t **)&v5)) {
    return 0;
  }
  unint64_t v5 = a1;
  return mlir::affine::AffineDelinearizeIndexOp::verify((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.for", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1928;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineForOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::affine::AffineForOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineForOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }
  if (*v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundMap", 13, *v6);
  }
  uint64_t v7 = v6[1];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"step", 4, v7);
  }
  uint64_t v8 = v6[2];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundMap", 13, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 3), 3);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineForOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineForOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::affine::AffineForOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 != *(void *)a2) {
    return 0;
  }
  if (*(void *)(a3 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  if (*(void *)(a3 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  return *(void *)(a3 + 24) == *(void *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::affine::AffineForOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v7 = *(void *)(v2 + 8);
  mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
  if (v6 > 0x40)
  {
    uint64_t v3 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    uint64_t v3 = (uint64_t)((void)__p << -(uint64_t)v6) >> -(uint64_t)v6;
  }
  return 2 * (v3 == 1);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  unint64_t v2 = malloc(0x68uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    unint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3824), v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  *(void *)&double result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return **(void **)(v3 + 48);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::affine::AffineForOp::getSingleLowerBound((mlir::affine::AffineForOp *)&v3);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  v6[0] = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  memset(&v6[1], 0, 24);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v3 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v9 = *(void *)(v3 + 8);
  mlir::IntegerAttr::getValue(&v9, (llvm::APInt *)&__p);
  if (v8 > 0x40)
  {
    uint64_t v4 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    uint64_t v4 = (uint64_t)((void)__p << -(uint64_t)v8) >> -(uint64_t)v8;
  }
  return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v6, (void *)v4) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::affine::AffineForOp::getSingleUpperBound((mlir::affine::AffineForOp *)&v3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  void v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 64;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v4 = (_DWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = v4[7] + v4[6];
  int v6 = v4[8];
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 8 * *(void *)(*(void *)(a2 + 48) + 104) - 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v9 = v3 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v9 + 24, 3);
  mlir::NamedAttribute::NamedAttribute(&v13, v7, v10);
  int v14 = 2;
  long long v15 = v13;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v16, a2, v5, v6, &v14, 1);
  uint64_t v11 = mlir::MutableOperandRange::operator mlir::OperandRange(v16);
  if (v17 != v18) {
    free(v17);
  }
  return v11;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = v2 - 8;
  }
  else {
    uint64_t v3 = 0;
  }
  return *(void *)(v3 + 48) + 8;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  unint64_t v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = (mlir::GenericProgramPoint **)(v2 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  mlir::Block::getTerminator(v3);
  if ((*(unsigned char *)(v4 + 46) & 0x80) != 0) {
    int v5 = *(_DWORD *)(v4 + 68);
  }
  else {
    int v5 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  uint64_t v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10) {
    free(v9);
  }
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields(mlir::GenericProgramPoint *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7 = a1;
  mlir::affine::AffineForOp::replaceWithAdditionalYields(&v7, a2, a3, a4, a5, a6, a7);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3920), v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v3 = a2 + 16 * ((v2 >> 23) & 1) + 64;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (*(_DWORD *)(v3 + 28) + *(_DWORD *)(v3 + 24));
  if ((v2 & 0x800000) != 0) {
    return *(void *)(a2 + 72) + 32 * v4;
  }
  else {
    return 32 * v4;
  }
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v5, 0, a5);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v4, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (void *)a1;
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v9 = a1 + 16 * ((v8 >> 23) & 1) + 64;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    uint64_t v11 = ((a1 + 16 * ((v8 >> 23) & 1) + 64 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v11, v10);
  uint64_t v17 = v7;
  v18[0] = 0;
  char v19 = 0;
  long long v13 = *(_OWORD *)(v9 + 16);
  long long v20 = *(_OWORD *)v9;
  long long v21 = v13;
  uint64_t v22 = *(void *)(v9 + 32);
  long long v23 = *(_OWORD *)v26;
  if (v7)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    if (v19) {
      char v19 = 0;
    }
    mlir::OperationName::OperationName(v18, "affine.for", 10, Context);
    char v19 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  return mlir::affine::AffineForOp::fold(&v16, v12, a4);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v259 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v274 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[26];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v274 = 87;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[449];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v274 = 88;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &unk_1E8EBA000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    uint64_t v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v274 = 96;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[61];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v274 = 83;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[1];
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      unint64_t v274 = 136;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      uint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[191];
  long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      uint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[9];
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      uint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2744);
  char v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    char v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v274 = 96;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      uint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      char v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[19];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      uint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = *(void *)(v21 + 2776);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v274 = 97;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = *(void *)(v23 + 2352);
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[61];
  uint64_t v27 = &unk_1E8EBA000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    uint64_t v27 = (void *)&unk_1E8EBA000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      uint64_t v27 = (void *)&unk_1E8EBA000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[167] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineForOp::print((mlir::affine::AffineForOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::affine::AffineForOp::verifyInvariantsImpl((uint64_t **)&v5);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
    || !mlir::detail::verifyLoopLikeOpInterface(a1, v2)
    || !mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3))
  {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::affine::AffineForOp::verifyRegions((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!v1) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 24 * v1;
  while (1)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0) {
      break;
    }
    uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (void *)*v7) {
      goto LABEL_8;
    }
LABEL_3:
    v3 += 3;
    if ((void *)v5 == v3) {
      return 1;
    }
  }
  uint64_t v7 = v3;
  if (v3 == (void *)*v3) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v8 = v7[1];
  if (v8) {
    uint64_t v9 = v8 - 8;
  }
  else {
    uint64_t v9 = 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  uint64_t v11 = *(void *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id) {
    goto LABEL_3;
  }
  __int16 v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "affine.yield";
  v39[3] = 12;
  v41[0] = v39;
  v41[2] = "', found '";
  __int16 v42 = 770;
  uint64_t v47 = *(void *)(v11 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  void v43[2] = AttrData;
  void v43[3] = v13;
  __int16 v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  __int16 v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  uint64_t v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  uint64_t v15 = v14 + 16;
  unint64_t v16 = *(void *)(v14 + 16);
  LODWORD(v35) = 3;
  uint64_t v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  uint64_t v37 = 61;
  uint64_t v17 = *(unsigned int *)(v14 + 24);
  uint64_t v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    unint64_t v32 = v17 + 1;
    BOOL v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      int v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = &v35;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  __int16 v38 = 262;
  unint64_t v35 = (const void **)"affine.yield";
  uint64_t v36 = 12;
  uint64_t v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  uint64_t v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  }
  if (v55)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v54;
      uint64_t v25 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      unint64_t v54 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v51;
    if (v51)
    {
      uint64_t v27 = v52;
      int v28 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          unint64_t v29 = v30;
          *uint64_t v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int v28 = v51;
      }
      int v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50) {
      free(v49);
    }
  }
  return v22;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::affine::AffineIfOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          unint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3920), v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::affine::AffineIfOp::getSuccessorRegions(&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::affine::AffineIfOp::getSuccessorRegions(&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  mlir::affine::detail::AffineIfOpGenericAdaptorBase::AffineIfOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::affine::AffineIfOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      unint64_t v223 = 89;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      __int16 v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[459];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v223 = 87;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[449];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v223 = 83;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[1];
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      unint64_t v223 = 136;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[191];
  unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[15];
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[9];
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2776);
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      unint64_t v223 = 104;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[201];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v223 = 97;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 2352);
  uint64_t v23 = &unk_1E8EBA000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_1E8EBA000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_1E8EBA000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[167] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineIfOp::print((mlir::affine::AffineIfOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(unsigned int *a1)
{
  if (!mlir::OpTrait::impl::verifyNRegions((mlir::OpTrait::impl *)a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v2)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments((mlir::OpTrait::impl *)a1, v3))
  {
    return 0;
  }
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[9] ? (uint64_t)(a1 - 4) : 0;
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)a1, (((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]+ (((unint64_t)a1[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * a1[10], (uint64_t)"thenRegion", 10, 0))return 0; {
  uint64_t v8 = a1;
  }
  return mlir::affine::AffineIfOp::verify((mlir::affine::AffineIfOp *)&v8) != 0;
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1B80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v8 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2872), v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32;
  }
  else {
    return 32;
  }
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      __int16 v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "affine.load", 11, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  unint64_t v14 = mlir::affine::AffineLoadOp::fold(&v18);
  unint64_t v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v14 > 7;
  }
  uint64_t v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v187 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v199 = 104;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v199 = 97;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[13];
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  __guard v16 = v15[203];
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    __guard v135 = v16;
    uint64_t v139 = v14;
    __guard v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v199 = 102;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      __guard v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  __guard v18 = v17[187];
  uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    __guard v136 = v16;
    uint64_t v140 = v14;
    __guard v133 = v18;
    uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v18 = v133;
    __guard v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v199 = 91;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v18 = v133;
      __guard v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[18];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    __guard v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    __guard v134 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v132;
    __guard v18 = v134;
    __guard v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v132;
      __guard v18 = v134;
      __guard v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || *(void *)(v21 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineLoadOp::print((mlir::affine::AffineLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::affine::AffineLoadOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::affine::AffineLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.max", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      __int16 v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C19F0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMaxOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "affine.max", 10, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  unint64_t v14 = mlir::affine::AffineMaxOp::fold(&v18, (uint64_t)&v19);
  unint64_t v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v14 > 7;
  }
  uint64_t v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  unint64_t v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.min", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1AB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMinOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "affine.min", 10, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  unint64_t v14 = mlir::affine::AffineMinOp::fold(&v18, (uint64_t)&v19);
  unint64_t v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v14 > 7;
  }
  uint64_t v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  unint64_t v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.parallel", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C2030;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffineParallelOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::affine::AffineParallelOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineParallelOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::affine::AffineParallelOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineParallelOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(void *)&long long v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineParallelOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::affine::AffineParallelOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  if (a3[3] != a2[3]) {
    return 0;
  }
  if (a3[4] == a2[4]) {
    return a3[5] == a2[5];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::GlobalOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[2]);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[3]);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[4]);
  uint64_t v5 = v4[5];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x68uLL);
  void *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3824), v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  int v4 = (Operation *)*((void *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2) {
    return 0;
  }
  else {
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
  }
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(a1 + 40);
  else {
    unint64_t v3 = 0;
  }
  a2[2] = v3;
  *a2 = a2 + 2;
  *(void *)&double result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a1;
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    size_t v7 = (long long *)(a1 + 16 * ((v6 >> 23) & 1) + 64);
  }
  else {
    size_t v7 = 0;
  }
  unint64_t v8 = v6 & 0x7FFFFF;
  if ((v6 & 0x7FFFFF) != 0)
  {
    uint64_t v9 = ((a1 + 16 * ((v6 >> 23) & 1) + 64 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  mlir::ValueRange::ValueRange(v23, v9, v8);
  uint64_t v14 = v5;
  v15[0] = 0;
  char v16 = 0;
  long long v10 = v7[1];
  long long v17 = *v7;
  long long v18 = v10;
  long long v19 = v7[2];
  long long v20 = *(_OWORD *)v23;
  if (v5)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16) {
      char v16 = 0;
    }
    mlir::OperationName::OperationName(v15, "affine.parallel", 15, Context);
    char v16 = 1;
  }
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  return mlir::affine::AffineParallelOp::fold(&v13);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v259 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v274 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      int v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[26];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v274 = 87;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      int v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[449];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      int v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[12];
  size_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    size_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v274 = 88;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      int v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      size_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v274 = 83;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      int v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[1];
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      unint64_t v274 = 136;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      int v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  __guard v12 = v11[191];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    __guard v196 = v12;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      int v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[9];
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    __guard v197 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v189;
    __guard v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      int v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v189;
      __guard v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2744);
  long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    __guard v198 = v12;
    uint64_t v183 = v16;
    long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    __guard v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v274 = 96;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      int v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      __guard v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[19];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    __guard v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    __guard v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      int v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      __guard v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = *(void *)(v19 + 2776);
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    __guard v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    __guard v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      unint64_t v274 = 104;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      __guard v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      __guard v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  __guard v22 = v21[201];
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    __guard v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    __guard v171 = v22;
    uint64_t v175 = v20;
    unint64_t v23 = 0x1E8EB8000;
    __guard v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    __guard v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v274 = 97;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      unint64_t v23 = 0x1E8EB8000;
      __guard v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      __guard v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = *(void *)(v23 + 2352);
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    __guard v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    __guard v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    uint64_t v24 = v169;
    __guard v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    __guard v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v24 = v169;
      __guard v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      __guard v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  __guard v26 = v25[61];
  uint64_t v27 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    __guard v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    __guard v173 = v22;
    uint64_t v177 = v20;
    __guard v168 = v26;
    uint64_t v170 = v24;
    uint64_t v27 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v26 = v168;
    uint64_t v24 = v170;
    __guard v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    __guard v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      unint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v274 = 91;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      uint64_t v27 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v26 = v168;
      uint64_t v24 = v170;
      __guard v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      __guard v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[18] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::affine::AffineParallelOp::print((mlir::affine::AffineParallelOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)) {
    return 0;
  }
  uint64_t v5 = a1;
  if (!mlir::affine::AffineParallelOp::verifyInvariantsImpl((uint64_t **)&v5)) {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::affine::AffineParallelOp::verify((mlir::affine::AffineParallelOp *)&v5);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffinePrefetchOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::affine::AffinePrefetchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffinePrefetchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isDataCache", 11, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isWrite", 7, v6);
  }
  uint64_t v7 = v5[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"localityHint", 12, v7);
  }
  uint64_t v8 = v5[3];
  if (v8)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v8);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffinePrefetchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::initProperties(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(void *)&long long v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffinePrefetchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::copyProperties(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] == a2[2]) {
    return a3[3] == a2[3];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::FuncOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    __guard v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[2]);
  uint64_t v5 = v4[3];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    __guard v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "map";
  v7[1] = 3;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v5 = 0;
  }
  mlir::NamedAttribute::NamedAttribute(&v9, v4, *(void *)(v5 + 24));
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    __int16 v8 = (long long *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  }
  else {
    __int16 v8 = 0;
  }
  unint64_t v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    uint64_t v10 = ((a1 + 16 * ((v7 >> 23) & 1) + 64 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  mlir::ValueRange::ValueRange(v22, v10, v9);
  uint64_t v14 = v6;
  v15[0] = 0;
  char v16 = 0;
  long long v11 = v8[1];
  long long v17 = *v8;
  long long v18 = v11;
  long long v19 = *(_OWORD *)v22;
  if (v6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16) {
      char v16 = 0;
    }
    mlir::OperationName::OperationName(v15, "affine.prefetch", 15, Context);
    char v16 = 1;
  }
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  return mlir::memref::foldMemRefCast(a1, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[12];
  unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v113 = 97;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      int v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[13];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      int v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      int v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = *(void *)(v11 + 2744);
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v113 = 102;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      int v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[187] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffinePrefetchOp::print((mlir::affine::AffinePrefetchOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::affine::AffinePrefetchOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::affine::AffinePrefetchOp::verify((mlir::affine::AffinePrefetchOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.store", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1D10;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2, a3, a4);
  char v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0) {
        unint64_t v7 = v9;
      }
      else {
        unint64_t v7 = (llvm **)v9[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v4);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v9[0], v9[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2880), v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 64;
  }
  else {
    return 64;
  }
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      __int16 v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(unsigned int *)(a1 + 44);
  unint64_t v8 = (uint64_t *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  unint64_t v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    uint64_t v10 = (((unint64_t)v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  mlir::ValueRange::ValueRange(v20, v10, v9);
  uint64_t v13 = v6;
  v14[0] = 0;
  char v15 = 0;
  uint64_t v16 = *v8;
  long long v17 = *(_OWORD *)v20;
  if (v6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v13);
    if (v15) {
      char v15 = 0;
    }
    mlir::OperationName::OperationName(v14, "affine.store", 12, Context);
    char v15 = 1;
  }
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  return mlir::memref::foldMemRefCast(a1, *(void *)(*(void *)(a1 + 72) + 24));
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[12];
  unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v176 = 97;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[453];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = *(void *)(v11 + 2744);
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface::Trait<Empty>]";
      unint64_t v176 = 100;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineWriteOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  __guard v14 = v13[231];
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    __guard v123 = v14;
    uint64_t v127 = v12;
    __guard v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v176 = 102;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      __guard v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  __guard v16 = v15[187];
  long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    __guard v124 = v14;
    uint64_t v128 = v12;
    __guard v121 = v16;
    long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v16 = v121;
    __guard v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v176 = 91;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v16 = v121;
      __guard v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[18];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    __guard v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    __guard v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    __guard v16 = v122;
    __guard v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      int v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      __guard v16 = v122;
      __guard v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineStoreOp::print((mlir::affine::AffineStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::affine::AffineStoreOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::affine::AffineStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_load", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C21C0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      unint64_t v14 = 85;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2872), v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32;
  }
  else {
    return 32;
  }
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      __int16 v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v187 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[27];
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<Empty>]";
      unint64_t v199 = 110;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  __guard v6 = v5[235];
  __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    __guard v160 = v6;
    __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      __int16 v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    __guard v161 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v153;
    __guard v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v199 = 97;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v153;
      __guard v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[13];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    __guard v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    __guard v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      __guard v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    __guard v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    __guard v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      __guard v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    __guard v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    __guard v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      __guard v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  __guard v16 = v15[203];
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    __guard v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    __guard v135 = v16;
    uint64_t v139 = v14;
    __guard v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    __guard v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      unint64_t v199 = 102;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      __guard v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      __guard v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  __guard v18 = v17[187];
  unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    __guard v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    __guard v136 = v16;
    uint64_t v140 = v14;
    __guard v133 = v18;
    unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v18 = v133;
    __guard v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    __guard v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v199 = 91;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v18 = v133;
      __guard v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      __guard v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[18];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    __guard v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    __guard v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    __guard v134 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v132;
    __guard v18 = v134;
    __guard v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    __guard v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      __guard v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v132;
      __guard v18 = v134;
      __guard v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      __guard v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || *(void *)(v21 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineVectorLoadOp::print((mlir::affine::AffineVectorLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  __guard v6 = a1;
  if (!mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  __guard v6 = a1;
  return mlir::affine::AffineVectorLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_store", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    __guard v6 = (void **)((char *)v9 + 8);
    do
    {
      __int16 v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C2288;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      __guard v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      __guard v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (BOOL v7 = *(unsigned char *)(a3 + 2) == 112) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(unsigned char *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  void *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2880), v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 64;
  }
  else {
    return 64;
  }
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      unint64_t v14 = 88;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2888), v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  uint64_t v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  mlir::NamedAttribute::NamedAttribute(&v8, v4, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      __int16 v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::affine::AffineVectorStoreOp::print((mlir::affine::AffineVectorStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  unint64_t v6 = a1;
  if (!mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::affine::AffineVectorStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.yield", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      __int16 v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C1DD8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::foldHook()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0) {
        uint64_t v2 = v4;
      }
      else {
        uint64_t v2 = (llvm **)v4[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      char v15 = v29;
      if (v30 != v29)
      {
        do
        {
          long long v17 = (void *)*--v14;
          __guard v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        char v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 4016), v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::detail::RegionBranchTerminatorOpInterfaceTrait<mlir::func::ReturnOp>::getSuccessorRegions(&v6, a3, a4, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v223 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = *(void *)(v11 + 2776);
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2912);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3904);
  long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v223 = 84;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      long long v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[7];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = *(void *)(v19 + 1936);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      unint64_t v223 = 82;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 4088);
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v223 = 91;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[18] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::affine::AffineYieldOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants()
{
  return 1;
}

void anonymous namespace'::AffineInlinerInterface::~AffineInlinerInterface(_anonymous_namespace_::AffineInlinerInterface *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Region *a2, mlir::Region **a3, BOOL a4, mlir::IRMapping *a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void **)(*(void *)(*((void *)a2 + 2) + 48) + 16);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id)
  {
    return 0;
  }
  uint64_t v9 = (mlir::Region **)a3[1];
  if (v9 == a3 || v9[1] != (mlir::Region *)a3) {
    return 0;
  }
  unint64_t v11 = (mlir::GenericProgramPoint *)(v9 + 3);
  uint64_t v12 = v9[4];
  if (v12 != (mlir::GenericProgramPoint *)(v9 + 3))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v12);
      uint64_t v20 = v19;
      uint64_t v59 = llvm::DefaultDoCastIfPossible<mlir::MemoryEffectOpInterface,mlir::Operation *,llvm::CastInfo<mlir::MemoryEffectOpInterface,mlir::Operation *,void>>::doCastIfPossible(v19);
      uint64_t v60 = v21;
      if (!v59) {
        goto LABEL_24;
      }
      int v54 = v56;
      uint64_t v55 = 0x400000000;
      mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v59, (uint64_t)&v54);
      int v22 = v55;
      if (v54 != v56) {
        free(v54);
      }
      if (v22)
      {
LABEL_24:
        if (*(_UNKNOWN **)(*(void *)(v20 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
        {
          int isValidDim = mlir::affine::isValidDim((void *)(v20 - 16), (mlir::Block *)a3);
          int v37 = *(_DWORD *)(v20 + 44);
          if (isValidDim)
          {
            if ((v37 & 0x800000) != 0)
            {
              unint64_t v15 = *(unsigned int *)(v20 + 68);
              uint64_t v16 = *(void *)(v20 + 72);
            }
            else
            {
              uint64_t v16 = 0;
              unint64_t v15 = 0;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v54, v16, v15);
            unint64_t v57 = mlir::affine::isValidDim;
            uint64_t v17 = (uint64_t)v54;
            uint64_t v18 = v55;
          }
          else
          {
            if ((v37 & 0x800000) != 0)
            {
              unint64_t v38 = *(unsigned int *)(v20 + 68);
              uint64_t v39 = *(void *)(v20 + 72);
            }
            else
            {
              uint64_t v39 = 0;
              unint64_t v38 = 0;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v59, v39, v38);
            unint64_t v57 = mlir::affine::isValidSymbol;
            uint64_t v17 = v59;
            uint64_t v18 = v60;
          }
          if ((remainsLegalAfterInline(v17, v18, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v57) & 1) == 0)return 0; {
        }
          }
        else
        {
          uint64_t v23 = (void *)llvm::DefaultDoCastIfPossible<mlir::affine::AffineReadOpInterface,mlir::Operation *,llvm::CastInfo<mlir::affine::AffineReadOpInterface,mlir::Operation *,void>>::doCastIfPossible(v20);
          if (v23)
          {
            int v54 = v23;
            uint64_t v55 = v24;
            uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
            Arguint64_t Operands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54);
            unint64_t v27 = v26;
            unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&ArgAttrsAttr);
            if (v27 >= NumDims) {
              unint64_t v29 = NumDims;
            }
            else {
              unint64_t v29 = v27;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v59, ArgOperands, v29);
            uint64_t v30 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54);
            unint64_t v32 = v31;
            unsigned int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&ArgAttrsAttr);
            if (v32 <= NumSymbols) {
              uint64_t v34 = v30;
            }
            else {
              uint64_t v34 = v30 + 32 * (v32 - NumSymbols);
            }
            if (v32 >= NumSymbols) {
              unint64_t v35 = NumSymbols;
            }
            else {
              unint64_t v35 = v32;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v57, v34, v35);
            unint64_t v52 = mlir::affine::isValidDim;
            if ((remainsLegalAfterInline(v59, v60, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v52) & 1) == 0)return 0; {
            unint64_t v52 = mlir::affine::isValidSymbol;
            }
            uint64_t result = remainsLegalAfterInline((uint64_t)v57, v58, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v52);
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t result = llvm::DefaultDoCastIfPossible<mlir::affine::AffineWriteOpInterface,mlir::Operation *,llvm::CastInfo<mlir::affine::AffineWriteOpInterface,mlir::Operation *,void>>::doCastIfPossible(v20);
            if (!result) {
              return result;
            }
            int v54 = (void *)result;
            uint64_t v55 = v40;
            uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
            uint64_t v41 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54);
            unint64_t v43 = v42;
            unsigned int v44 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&ArgAttrsAttr);
            if (v43 >= v44) {
              unint64_t v45 = v44;
            }
            else {
              unint64_t v45 = v43;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v59, v41, v45);
            uint64_t v46 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54);
            unint64_t v48 = v47;
            unsigned int v49 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&ArgAttrsAttr);
            if (v48 <= v49) {
              uint64_t v50 = v46;
            }
            else {
              uint64_t v50 = v46 + 32 * (v48 - v49);
            }
            if (v48 >= v49) {
              unint64_t v51 = v49;
            }
            else {
              unint64_t v51 = v48;
            }
            mlir::ValueRange::ValueRange((unint64_t *)&v57, v50, v51);
            unint64_t v52 = mlir::affine::isValidDim;
            if ((remainsLegalAfterInline(v59, v60, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v52) & 1) == 0)return 0; {
            unint64_t v52 = mlir::affine::isValidSymbol;
            }
            if ((remainsLegalAfterInline((uint64_t)v57, v58, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v52) & 1) == 0)return 0; {
          }
            }
        }
      }
      uint64_t v12 = (mlir::GenericProgramPoint *)*((void *)v12 + 1);
    }
    while (v12 != v11);
  }
  return 1;
}

BOOL anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2, mlir::Region *a3, BOOL a4, mlir::IRMapping *a5)
{
  unint64_t v5 = (void *)(*((void *)a3 + 2) + 48);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(v5)) {
    return 1;
  }
  uint64_t v6 = *(void **)(*v5 + 16);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id) {
    return 1;
  }
  return v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id;
}

uint64_t anonymous namespace'::AffineInlinerInterface::shouldAnalyzeRecursively(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t remainsLegalAfterInline(uint64_t a1, uint64_t a2, mlir::Block *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = a1;
  uint64_t v37 = 0;
  if (!a2) {
    return 1;
  }
  uint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = (_DWORD *)mlir::ValueRange::dereference_iterator(&v36, v14);
    unint64_t v16 = (unint64_t)v15;
    v38[0] = v15;
    if ((~v15[2] & 7) != 0) {
      unint64_t v17 = 0;
    }
    else {
      unint64_t v17 = (unint64_t)v15;
    }
    uint64_t v34 = v15;
    unint64_t v35 = v17;
    if (v17)
    {
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v35);
    }
    else
    {
      ParentRegion = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)v38) + 16);
      if (ParentRegion) {
        ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
      }
    }
    if (ParentRegion != a3) {
      goto LABEL_34;
    }
    if ((~*(_DWORD *)(v16 + 8) & 7) == 0) {
      break;
    }
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v34);
    uint64_t v22 = *(void *)(DefiningOp + 48);
    uint64_t v23 = *(void **)(v22 + 16);
    BOOL v24 = v23 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v23 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *(void *)(DefiningOp + 48);
    }
    if (!v24)
    {
      uint64_t v26 = DefiningOp;
      unint64_t v27 = v25 | v22 & 0xFFFFFFFFFFFFFF00;
      uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(v27 + 32);
      if (v28)
      {
        uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v34);
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v29 + 48))) {
          goto LABEL_30;
        }
        goto LABEL_33;
      }
      uint64_t Values = *(void *)(v27 + 24);
      uint64_t v31 = *(void *)(v26 + 48);
      goto LABEL_27;
    }
    v38[0] = *(void **)(v22 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v38);
    if (Values)
    {
      uint64_t v31 = v22;
LABEL_27:
      uint64_t v28 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::ShapedDimOpInterface>(Values, v31);
      uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v34);
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v29 + 48))) {
        goto LABEL_30;
      }
      goto LABEL_33;
    }
    uint64_t v28 = 0;
    uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v34);
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v29 + 48)))
    {
LABEL_30:
      v38[0] = v39;
      v38[1] = (void *)0x100000000;
      mlir::Operation::fold(v29, 0, 0, (uint64_t)v38);
      unint64_t v32 = *(void *)v38[0];
      if (v38[0] != v39) {
        free(v38[0]);
      }
      if (v32 > 7) {
        goto LABEL_34;
      }
    }
LABEL_33:
    if (!v28) {
      return 0;
    }
LABEL_34:
    uint64_t v14 = ++v37;
    if (v36 == a1 && v14 == a2) {
      return 1;
    }
  }
  unint64_t v35 = v16;
  v38[0] = 0;
  int v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, &v35, v38);
  uint64_t v20 = 0;
  if (v19 && v38[0] != (void *)(*(void *)a5 + 16 * *(unsigned int *)(a5 + 16))) {
    uint64_t v20 = *((void *)v38[0] + 1);
  }
  if (a6(a7, v20, a4)) {
    goto LABEL_34;
  }
  return 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::affine::AffineReadOpInterface,mlir::Operation *,llvm::CastInfo<mlir::affine::AffineReadOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineReadOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineReadOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineReadOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineReadOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      unint64_t v17 = 85;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2872), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      unint64_t v22 = 85;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2872);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::affine::AffineWriteOpInterface,mlir::Operation *,llvm::CastInfo<mlir::affine::AffineWriteOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineWriteOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineWriteOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  unint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineWriteOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::affine::AffineWriteOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      unint64_t v17 = 86;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2880), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      unint64_t v22 = 86;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2880);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v26, a3)) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = 0;
  }
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    BOOL v24 = "invalid kind of attribute specified";
    __int16 v25 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v27, a1, v12, &v24);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      unint64_t v16 = (void **)__p;
      if (__p)
      {
        uint64_t v17 = v33;
        unint64_t v18 = __p;
        if (v33 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          unint64_t v18 = __p;
        }
        char v33 = v16;
        operator delete(v18);
      }
      uint64_t v19 = v30;
      if (v30)
      {
        uint64_t v20 = v31;
        uint64_t v21 = v30;
        if (v31 != v30)
        {
          do
          {
            uint64_t v23 = (void *)*--v20;
            unint64_t v22 = v23;
            *uint64_t v20 = 0;
            if (v23) {
              operator delete[](v22);
            }
          }
          while (v20 != v19);
          uint64_t v21 = v30;
        }
        uint64_t v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29) {
        free(v28);
      }
    }
  }
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::AffineMap>(mlir::AffineMap *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  uint64_t v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
    uint64_t v7 = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    uint64_t v7 = v8;
    if (v8)
    {
LABEL_3:
      BOOL v4 = *a1;
      uint64_t result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      unint64_t v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(void *)(*(void *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *BOOL v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  uint64_t v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    if (!v8) {
      return result;
    }
LABEL_11:
    BOOL v4 = a1[1];
    uint64_t result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    unint64_t v6 = *v4;
    if ((*v4 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
  if (v8) {
    goto LABEL_11;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v5 = *a2;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v23 = a3;
    uint64_t v21 = a2;
    uint64_t v24 = v3;
    int v22 = v4;
    unint64_t v25 = v5;
    unint64_t v6 = 0x1E8EB8000uLL;
    uint64_t v3 = v24;
    unint64_t v5 = v25;
    int v4 = v22;
    a2 = v21;
    a3 = v23;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v3 = v24;
      unint64_t v5 = v25;
      int v4 = v22;
      a2 = v21;
      a3 = v23;
    }
  }
  uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
  int v9 = -348639895 * ((v8 >> 47) ^ v8);
  int v10 = v4 - 1;
  unsigned int v11 = v9 & (v4 - 1);
  uint64_t v12 = (void *)(v3 + 16 * v11);
  uint64_t v13 = *v12;
  if (*a2 == *v12)
  {
    uint64_t result = 1;
LABEL_8:
    *a3 = v12;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 1;
    uint64_t result = 1;
    while (v13 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v13 == -8192;
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      unsigned int v18 = v11 + v16++;
      unsigned int v11 = v18 & v10;
      uint64_t v12 = (void *)(v3 + 16 * (v18 & v10));
      uint64_t v13 = *v12;
      if (*a2 == *v12) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v15) {
      uint64_t v12 = v15;
    }
    *a3 = v12;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow((uint64_t)a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3) {
    goto LABEL_10;
  }
  *a1 += 2;
  if (*a4 != -4096) {
LABEL_7:
  }
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  v46[14] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    unsigned int v7 = (void *)(result + 8);
    int v6 = *(llvm **)(result + 8);
    uint64_t v8 = *(unsigned int *)(result + 16);
    if (a2 > 8)
    {
      uint64_t v29 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(v2 + 8) = buffer;
      *(void *)(v2 + 16) = v29;
      int v31 = *(_DWORD *)v2;
      int v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
      if (v31)
      {
        int v10 = (void *)(v2 + 136);
        unint64_t v11 = 112;
      }
      else
      {
        int v10 = &buffer[2 * v29];
        unsigned int v7 = buffer;
        unint64_t v11 = 16 * v29 - 16;
        if (v11 < 0x10)
        {
          char v33 = buffer;
          goto LABEL_49;
        }
      }
    }
    else
    {
      int v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(void *)uint64_t result = 1;
      int v10 = (void *)(result + 136);
      unint64_t v11 = 112;
    }
    uint64_t v32 = (v11 >> 4) + 1;
    char v33 = &v7[2 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
    char v34 = v7 + 2;
    uint64_t v35 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v34 - 2) = -4096;
      void *v34 = -4096;
      v34 += 4;
      v35 -= 2;
    }
    while (v35);
    if (v32 == (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_50:
      if (v8)
      {
        unint64_t v42 = (unint64_t *)v6;
        do
        {
          if ((*v42 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v45[0] = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v42, v45);
            uint64_t v43 = v45[0];
            *(void *)v45[0] = *v42;
            *(void *)(v43 + 8) = v42[1];
            *(_DWORD *)v2 += 2;
          }
          v42 += 2;
        }
        while (v42 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
    {
LABEL_49:
      void *v33 = -4096;
      v33 += 2;
    }
    while (v33 != v10);
    goto LABEL_50;
  }
  uint64_t v12 = result + 8;
  uint64_t v13 = v45;
  if ((*(void *)(result + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    unint64_t v14 = *(void *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(result + 16);
    v45[0] = *(void *)(result + 8);
    v45[1] = v36;
    uint64_t v13 = v46;
    unint64_t v14 = *(void *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      unint64_t v15 = *(void *)(result + 40);
      if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_32;
    }
  }
  unint64_t v37 = *(void *)(result + 32);
  unint64_t *v13 = v14;
  v13[1] = v37;
  v13 += 2;
  unint64_t v15 = *(void *)(result + 40);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    unint64_t v16 = *(void *)(result + 56);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  unint64_t *v13 = v15;
  v13[1] = *(void *)(result + 48);
  v13 += 2;
  unint64_t v16 = *(void *)(result + 56);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    unint64_t v17 = *(void *)(result + 72);
    if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  unint64_t *v13 = v16;
  v13[1] = *(void *)(result + 64);
  v13 += 2;
  unint64_t v17 = *(void *)(result + 72);
  if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    unint64_t v18 = *(void *)(result + 88);
    if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  unint64_t *v13 = v17;
  v13[1] = *(void *)(result + 80);
  v13 += 2;
  unint64_t v18 = *(void *)(result + 88);
  if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_14:
    unint64_t v19 = *(void *)(result + 104);
    if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  unint64_t *v13 = v18;
  v13[1] = *(void *)(result + 96);
  v13 += 2;
  unint64_t v19 = *(void *)(result + 104);
  if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_15:
    unint64_t v20 = *(void *)(result + 120);
    if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  unint64_t *v13 = v19;
  v13[1] = *(void *)(result + 112);
  v13 += 2;
  unint64_t v20 = *(void *)(result + 120);
  if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_16:
    int v21 = *(_DWORD *)result;
    if (a2 < 9) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  unint64_t *v13 = v20;
  v13[1] = *(void *)(result + 128);
  v13 += 2;
  int v21 = *(_DWORD *)result;
  if (a2 < 9)
  {
LABEL_17:
    *(void *)uint64_t result = v21 & 1;
    if ((v21 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_39:
    uint64_t v23 = (void *)(v2 + 136);
    unint64_t v24 = 112;
    goto LABEL_20;
  }
LABEL_38:
  *(_DWORD *)uint64_t result = v21 & 0xFFFFFFFE;
  uint64_t v38 = a2;
  uint64_t result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(void *)(v2 + 8) = result;
  *(void *)(v2 + 16) = v38;
  int v39 = *(_DWORD *)v2;
  *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
  if (v39) {
    goto LABEL_39;
  }
LABEL_18:
  uint64_t v22 = *(unsigned int *)(v2 + 16);
  if (!v22) {
    goto LABEL_42;
  }
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t v23 = (void *)(v12 + 16 * v22);
  unint64_t v24 = (unint64_t)v23 - v12 - 16;
  if (v24 < 0x10)
  {
    uint64_t v26 = *(void **)(v2 + 8);
    do
    {
LABEL_41:
      *uint64_t v26 = -4096;
      v26 += 2;
    }
    while (v26 != v23);
    goto LABEL_42;
  }
LABEL_20:
  uint64_t v25 = (v24 >> 4) + 1;
  uint64_t v26 = (void *)(v12 + 16 * (v25 & 0x1FFFFFFFFFFFFFFELL));
  unint64_t v27 = (void *)(v12 + 16);
  uint64_t v28 = v25 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v27 - 2) = -4096;
    *unint64_t v27 = -4096;
    v27 += 4;
    v28 -= 2;
  }
  while (v28);
  if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_41;
  }
LABEL_42:
  if (v45 != v13)
  {
    uint64_t v40 = v45;
    do
    {
      if ((*v40 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v44 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v40, &v44);
        uint64_t v41 = v44;
        *unsigned int v44 = *v40;
        v41[1] = v40[1];
        *(_DWORD *)v2 += 2;
      }
      v40 += 2;
    }
    while (v40 != v13);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::IntegerSet>(mlir::IntegerSet *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  uint64_t v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
    uint64_t v7 = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    uint64_t v7 = v8;
    if (v8)
    {
LABEL_3:
      unint64_t v4 = *a1;
      uint64_t result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      unint64_t v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(void *)(*(void *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *unint64_t v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  uint64_t v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, 0);
    if (!v8) {
      return result;
    }
LABEL_11:
    unint64_t v4 = a1[1];
    uint64_t result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    unint64_t v6 = *v4;
    if ((*v4 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v8, a2);
  if (v8) {
    goto LABEL_11;
  }
  return result;
}

void *anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  uint64_t v32 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  unint64_t v29 = Value;
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0)
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0;
    int v20 = 0;
    uint64_t v32 = v34;
    HIDWORD(v33) = 8;
    goto LABEL_17;
  }
  unint64_t v6 = *(unsigned int *)(a2 + 68);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v32 = v34;
  uint64_t v33 = 0x800000000;
  if (v6 < 9)
  {
    unint64_t v9 = 0;
    if (!v6)
    {
      int v20 = 0;
      goto LABEL_17;
    }
    uint64_t v8 = v34;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    uint64_t v8 = (char *)v32 + 8 * v33;
    if (v6 >= 0xD
      && ((unint64_t)v8 >= v7 + 32 * v6 || v7 + 24 >= (unint64_t)v32 + 8 * v33 + 8 * v6))
    {
      uint64_t v11 = v6 & 3;
      if ((v6 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v10 = v6 - v11;
      v8 += v10;
      uint64_t v12 = (const double *)(v7 + 88);
      uint64_t v13 = (unsigned long long *)((char *)v32 + 8 * v33 + 16);
      unint64_t v14 = v10;
      do
      {
        unint64_t v15 = v12 - 8;
        unsigned long long v16 = (unsigned __int128)vld4q_f64(v15);
        unsigned long long v17 = (unsigned __int128)vld4q_f64(v12);
        *(v13 - 1) = v16;
        unsigned long long *v13 = v17;
        v12 += 16;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_14;
    }
  }
  unint64_t v10 = 0;
LABEL_14:
  unint64_t v18 = v6 - v10;
  uint64_t v19 = (32 * v10) | 0x18;
  do
  {
    *v8++ = *(void *)(v7 + v19);
    v19 += 32;
    --v18;
  }
  while (v18);
  int v20 = v33;
  unint64_t v9 = v6;
LABEL_17:
  LODWORD(v33) = v20 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  simplifyMapWithOperands((mlir::AffineExpr *)&v29, (uint64_t *)v32, v33);
  if (v29 != Value)
  {
    int v21 = v32;
    goto LABEL_19;
  }
  int v21 = v32;
  if (!v9)
  {
LABEL_29:
    uint64_t v23 = 0;
    if (v32 == v34) {
      return v23;
    }
    goto LABEL_20;
  }
  if (*(void *)(v7 + 24) == *(void *)v32)
  {
    uint64_t v25 = (uint64_t *)(v7 + 56);
    uint64_t v26 = 8;
    while (8 * v9 != v26)
    {
      uint64_t v27 = *v25;
      v25 += 4;
      uint64_t v28 = *(void *)((char *)v32 + v26);
      v26 += 8;
      if (v27 != v28) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  v30[1] = v33;
  unint64_t v31 = v29;
  v30[0] = v21;
  uint64_t v22 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(void *)(a2 + 24), &v31, (uint64_t)v30);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v22);
  uint64_t v23 = 1;
  int v21 = v32;
  if (v32 != v34) {
LABEL_20:
  }
    free(v21);
  return v23;
}

void simplifyMapWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  int v21 = v23;
  uint64_t v22 = 0x600000000;
  unsigned int Kind = mlir::AffineExpr::getKind(a1);
  if (Kind > 6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, Kind, 8);
  }
  uint64_t Results = mlir::AffineMap::getResults(a1);
  if (v8)
  {
    unint64_t v9 = (void **)Results;
    uint64_t v10 = 8 * v8;
    do
    {
      int v20 = *v9;
      uint64_t NumDims = mlir::AffineMap::getNumDims(a1);
      uint64_t NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      simplifyExprAndOperands(&v20, NumDims, NumSymbols, a2, a3);
      uint64_t v13 = v20;
      uint64_t v14 = v22;
      if (v22 >= (unint64_t)HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
        uint64_t v14 = v22;
      }
      *((void *)v21 + v14) = v13;
      LODWORD(v22) = v22 + 1;
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  int v15 = mlir::AffineMap::getNumDims(a1);
  int v16 = mlir::AffineMap::getNumSymbols(a1);
  unsigned long long v17 = v21;
  uint64_t v18 = v22;
  uint64_t LHS = (void *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(void *)a1 = mlir::AffineMap::get(v15, v16, (uint64_t)v17, v18, LHS);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t simplifyExprAndOperands(void **a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  v79[6] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a1;
  unint64_t v77 = *a1;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    uint64_t v71 = v77;
    if (!v77) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v10);
    uint64_t v71 = v77;
    if (!v77) {
      return result;
    }
  }
  uint64_t LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  simplifyExprAndOperands(&LHS, a2, a3, a4, a5);
  simplifyExprAndOperands(&RHS, a2, a3, a4, a5);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  AffineBinaryOpExpr = (void *)mlir::getAffineBinaryOpExpr(Kind, LHS, RHS);
  *a1 = AffineBinaryOpExpr;
  unint64_t v77 = AffineBinaryOpExpr;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    uint64_t v71 = v77;
    if (!v77) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)AffineBinaryOpExpr);
    uint64_t v71 = v77;
    if (!v77) {
      return result;
    }
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 3
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 4)
  {
    uint64_t result = mlir::AffineExpr::getKind((mlir::AffineExpr *)a1);
    if (result != 2) {
      return result;
    }
  }
  uint64_t LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  uint64_t v14 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  uint64_t RHS = (uint64_t)v14;
  unint64_t v77 = v14;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) == 5)
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v14);
    unint64_t v68 = v77;
    if (!v77) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    unint64_t v68 = v77;
    if (!v77) {
      return result;
    }
  }
  uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v68);
  if (result < 1) {
    return result;
  }
  uint64_t v65 = result;
  unint64_t v67 = a4;
  DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
  int v63 = LHS;
  unint64_t v77 = v79;
  uint64_t v78 = 0x300000000;
  unint64_t v74 = v76;
  uint64_t v75 = 0x300000000;
  uint64_t v15 = 8 * a5;
  if (a5 < 4)
  {
    if (!a5) {
      goto LABEL_27;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
    }
  }
  uint64_t v16 = 8 * a5;
  do
  {
    uint64_t v17 = *a4;
    unint64_t LowerBound = getLowerBound(*a4);
    unint64_t v20 = v19;
    uint64_t v21 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      uint64_t v21 = v78;
    }
    uint64_t v22 = (unint64_t *)((char *)v77 + 16 * v21);
    *uint64_t v22 = LowerBound;
    v22[1] = v20;
    LODWORD(v78) = v78 + 1;
    unint64_t UpperBound = getUpperBound(v17);
    unint64_t v25 = v24;
    uint64_t v26 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      uint64_t v26 = v75;
    }
    uint64_t v27 = (unint64_t *)((char *)v74 + 16 * v26);
    *uint64_t v27 = UpperBound;
    v27[1] = v25;
    LODWORD(v75) = v75 + 1;
    ++a4;
    v16 -= 8;
  }
  while (v16);
LABEL_27:
  int v73 = v63;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, (uint64_t)v63);
    if (v73) {
      goto LABEL_29;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, 0);
    if (v73)
    {
LABEL_29:
      unint64_t BoundForAffineExpr = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73);
      uint64_t v64 = 1;
      unint64_t v29 = v74;
      if (v74 == v76) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  unint64_t BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v63, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 0);
  uint64_t v64 = v30;
  unint64_t v29 = v74;
  if (v74 != v76) {
LABEL_30:
  }
    free(v29);
LABEL_31:
  if (v77 != v79) {
    free(v77);
  }
  uint64_t v62 = LHS;
  unint64_t v77 = v79;
  uint64_t v78 = 0x300000000;
  unint64_t v66 = BoundForAffineExpr;
  unint64_t v74 = v76;
  uint64_t v75 = 0x300000000;
  if (a5 < 4)
  {
    if (!a5) {
      goto LABEL_46;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
    }
  }
  unint64_t v31 = v67;
  do
  {
    uint64_t v32 = *v31;
    unint64_t v33 = getLowerBound(*v31);
    unint64_t v35 = v34;
    uint64_t v36 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      uint64_t v36 = v78;
    }
    unint64_t v37 = (unint64_t *)((char *)v77 + 16 * v36);
    *unint64_t v37 = v33;
    v37[1] = v35;
    LODWORD(v78) = v78 + 1;
    unint64_t v38 = getUpperBound(v32);
    unint64_t v40 = v39;
    uint64_t v41 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      uint64_t v41 = v75;
    }
    unint64_t v42 = (unint64_t *)((char *)v74 + 16 * v41);
    *unint64_t v42 = v38;
    v42[1] = v40;
    LODWORD(v75) = v75 + 1;
    ++v31;
    v15 -= 8;
  }
  while (v15);
LABEL_46:
  int v73 = v62;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, (uint64_t)v62);
    uint64_t v44 = v65;
    uint64_t v43 = v66;
    int v72 = v73;
    if (v73) {
      goto LABEL_48;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v73, 0);
    uint64_t v44 = v65;
    uint64_t v43 = v66;
    int v72 = v73;
    if (v73)
    {
LABEL_48:
      int64_t v45 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v72);
      uint64_t v46 = 1;
      unint64_t v47 = v74;
      if (v74 == v76) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
  }
  int64_t v45 = mlir::getBoundForAffineExpr((uint64_t)v62, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 1);
  uint64_t v46 = v51;
  unint64_t v47 = v74;
  if (v74 != v76) {
LABEL_49:
  }
    free(v47);
LABEL_50:
  if (v77 != v79) {
    free(v77);
  }
  if (!v64 || !v46) {
    goto LABEL_84;
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3)
  {
    unint64_t v49 = (unint64_t)v44 >> 63;
    if (v43 && (unint64_t)v43 >> 63 != v49)
    {
      uint64_t v50 = ~(~v43 / v44);
      if (!v45) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v50 = v43 / v44;
      if (!v45)
      {
LABEL_64:
        if (v50 == v45 / v44)
        {
LABEL_65:
          if (v43 && (unint64_t)v43 >> 63 != v49)
          {
            uint64_t v52 = ~(~v43 / v44);
LABEL_101:
            unint64_t v57 = DesiredBytecodeVersion;
            goto LABEL_102;
          }
          goto LABEL_100;
        }
        goto LABEL_69;
      }
    }
    if ((unint64_t)v45 >> 63 == v49) {
      goto LABEL_64;
    }
    if (v50 == ~(~v45 / v44)) {
      goto LABEL_65;
    }
  }
LABEL_69:
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 4)
  {
    uint64_t v53 = v43 < 1 ? v43 / v44 : (v43 - 1) / v44 + 1;
    uint64_t v54 = v45 < 1 ? v45 / v44 : (v45 - 1) / v44 + 1;
    if (v53 == v54)
    {
      if (v43 >= 1)
      {
        uint64_t v52 = (v43 - 1) / v44 + 1;
        goto LABEL_101;
      }
LABEL_100:
      uint64_t v52 = v43 / v44;
      goto LABEL_101;
    }
  }
  uint64_t result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  if (result == 2 && (v43 & 0x8000000000000000) == 0 && v43 < v44 && v45 < v44)
  {
    *a1 = LHS;
    return result;
  }
LABEL_84:
  int v72 = 0;
  int v73 = 0;
  uint64_t v55 = LHS;
  unint64_t v77 = LHS;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, 0);
    uint64_t v56 = (uint64_t)v67;
    unint64_t v74 = v77;
    if (!v77) {
      goto LABEL_89;
    }
LABEL_88:
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v74)) {
      goto LABEL_89;
    }
    uint64_t v58 = (void *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v74);
    uint64_t v59 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v74);
    uint64_t LargestKnownDivisor = getLargestKnownDivisor(v58, v56);
    uint64_t result = isNonNegativeBoundedBy((uint64_t)v59, v56, a5, LargestKnownDivisor);
    if ((result & 1) == 0)
    {
      uint64_t LargestKnownDivisor = getLargestKnownDivisor(v59, v56);
      if (!isNonNegativeBoundedBy((uint64_t)v58, v56, a5, LargestKnownDivisor)) {
        goto LABEL_89;
      }
      uint64_t result = (uint64_t)v58;
      uint64_t v58 = v59;
      uint64_t v59 = (void *)result;
    }
    int v72 = (mlir::MLIRContext **)v59;
    int v73 = (mlir::MLIRContext **)v58;
    if (!(v44 % LargestKnownDivisor))
    {
      uint64_t result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if (result == 3)
      {
        uint64_t result = mlir::AffineExpr::floorDiv(&v73, (uint64_t)v68);
LABEL_103:
        *a1 = (void *)result;
        return result;
      }
    }
    if (!(LargestKnownDivisor % v44))
    {
      uint64_t result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if (result == 2)
      {
        uint64_t result = mlir::AffineExpr::operator%((unint64_t *)&v72, (uint64_t)v68);
        goto LABEL_103;
      }
    }
    return result;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v77, (uint64_t)v55);
  uint64_t v56 = (uint64_t)v67;
  unint64_t v74 = v77;
  if (v77) {
    goto LABEL_88;
  }
LABEL_89:
  if (isNonNegativeBoundedBy((uint64_t)LHS, v56, a5, v44)
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3
    || (uint64_t result = getLargestKnownDivisor(LHS, v56), !(result % v44))
    && (uint64_t result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71), result == 2))
  {
    unint64_t v57 = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    uint64_t v52 = 0;
LABEL_102:
    uint64_t result = mlir::getAffineConstantExpr((mlir *)v52, v57, v48);
    goto LABEL_103;
  }
  return result;
}

BOOL isNonNegativeBoundedBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Value = a1;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) != 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, 0);
    uint64_t v21 = Value;
    if (Value) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t Value = a1;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 6)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, a1);
      uint64_t v21 = Value;
      if (!Value) {
        return 0;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, 0);
      uint64_t v21 = Value;
      if (!Value) {
        return 0;
      }
    }
    uint64_t v10 = *(void *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v21));
    if (v10)
    {
      if ((*(void *)(v10 + 8) & 7) == 7)
      {
        uint64_t v11 = *(mlir::Block **)(v10 + 16);
        if (v11)
        {
          uint64_t v12 = *(void *)(mlir::Block::getParent(v11) + 16);
          if (v12
            && *(void *)(*(void *)(v12 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
          {
            uint64_t v14 = v12 + 64;
            unint64_t v15 = *(unsigned int *)(v12 + 44);
            uint64_t v16 = (uint64_t *)(v12 + 64 + 16 * ((v15 >> 23) & 1));
            uint64_t v17 = *(void *)((((unint64_t)v16 + ((v15 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(v12 + 40)
                            + 8);
            uint64_t v18 = v17 ? v17 - 8 : 0;
            if (**(void **)(v18 + 48) == v10)
            {
              uint64_t Value = *v16;
              uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
              if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
              {
                uint64_t Value = *(void *)(v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1));
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                if ((mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) & 0x8000000000000000) == 0)
                {
                  unint64_t v19 = HIBYTE(*(_DWORD *)(v12 + 44))
                      ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                      : 0;
                  uint64_t Value = *(void *)(v19 + 16);
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
                  {
                    unint64_t v20 = HIBYTE(*(_DWORD *)(v12 + 44))
                        ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                        : 0;
                    uint64_t Value = *(void *)(v20 + 16);
                    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                    if (mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) <= a4) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&Value, a1);
  uint64_t v21 = Value;
  if (!Value) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
  return LHS >= 0 && LHS < a4;
}

uint64_t getLargestKnownDivisor(void *a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t LargestKnownDivisor = mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v23);
  uint64_t v4 = (uint64_t)v23;
  std::string __p = v23;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&__p) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&__p, v4);
    uint64_t v22 = __p;
    if (!__p) {
      return LargestKnownDivisor;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&__p, 0);
    uint64_t v22 = __p;
    if (!__p) {
      return LargestKnownDivisor;
    }
  }
  uint64_t v5 = *(void *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v22));
  if (v5) {
    BOOL v6 = (*(void *)(v5 + 8) & 7) == 7;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(mlir::Block **)(v5 + 16);
  if (!v7) {
    return 1;
  }
  uint64_t v8 = *(void *)(mlir::Block::getParent(v7) + 16);
  if (!v8
    || *(void *)(*(void *)(v8 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
  {
    return 1;
  }
  uint64_t v10 = v8 + 64;
  unint64_t v11 = *(unsigned int *)(v8 + 44);
  uint64_t v12 = (void **)(v8 + 64 + 16 * ((v11 >> 23) & 1));
  uint64_t v13 = *(void *)((((unint64_t)v12 + ((v11 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v8 + 40)
                  + 8);
  uint64_t v14 = v13 ? v13 - 8 : 0;
  if (**(void **)(v14 + 48) != v5) {
    return 1;
  }
  std::string __p = *v12;
  std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&__p)
    && (std::string __p = *(void **)(v10 + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1)),
        std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p),
        !mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&__p)))
  {
    if (HIBYTE(*(_DWORD *)(v8 + 44))) {
      uint64_t v20 = v10 + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v26 = *(void *)(v20 + 8);
    mlir::IntegerAttr::getValue(&v26, (llvm::APInt *)&__p);
    if (v25 > 0x40)
    {
      uint64_t v21 = *(void *)__p;
      operator delete[](__p);
      return v21;
    }
    else
    {
      return (uint64_t)((void)__p << -(uint64_t)v25) >> -(uint64_t)v25;
    }
  }
  else
  {
    std::string __p = *(void **)(v10 + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1));
    std::string __p = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
    unint64_t LargestKnownDivisorOfMapExprs = mlir::AffineMap::getLargestKnownDivisorOfMapExprs((mlir::AffineMap *)&__p);
    if (HIBYTE(*(_DWORD *)(v8 + 44))) {
      uint64_t v17 = v10 + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v26 = *(void *)(v17 + 8);
    mlir::IntegerAttr::getValue(&v26, (llvm::APInt *)&__p);
    if (v25 > 0x40)
    {
      uint64_t v18 = *(void *)__p;
      operator delete[](__p);
    }
    else
    {
      uint64_t v18 = (uint64_t)((void)__p << -(uint64_t)v25) >> -(uint64_t)v25;
    }
    if (v18)
    {
      if (v18 >= 0) {
        unint64_t v19 = v18;
      }
      else {
        unint64_t v19 = -v18;
      }
      do
      {
        uint64_t LargestKnownDivisor = v19;
        unint64_t v19 = LargestKnownDivisorOfMapExprs % v19;
        unint64_t LargestKnownDivisorOfMapExprs = LargestKnownDivisor;
      }
      while (v19);
      return LargestKnownDivisor;
    }
    return LargestKnownDivisorOfMapExprs;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v31[28] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    void v24[2] = (uint64_t)"affine.apply";
    void v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  unint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(void *)a4, *(void *)(a4 + 8));
  uint64_t v12 = v26[0];
  uint64_t v13 = v26[1];
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  uint64_t v16 = mlir::AffineMapAttr::get(v11);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  unsigned int v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    unsigned int v17 = v29;
  }
  *(void *)(v28 + 8 * v17) = IndexType;
  ++v29;
  uint64_t v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void anonymous namespace'::AffineForEmptyLoopFolder::~AffineForEmptyLoopFolder(_anonymous_namespace_::AffineForEmptyLoopFolder *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::AffineForEmptyLoopFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 64;
  uint64_t v4 = *(void *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  uint64_t v5 = v4 - 8;
  if (!v4) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(void *)(v5 + 40);
  if (v7 != v6 && *(void *)(v7 + 8) == v6)
  {
    if (!*(_DWORD *)(a2 + 36)) {
      return 1;
    }
    unint64_t v13 = TrivialConstantTripCount;
    uint64_t v15 = v14;
    if (v14 && !TrivialConstantTripCount)
    {
      unint64_t v16 = *(unsigned int *)(a2 + 44);
      if (HIBYTE(*(_DWORD *)(a2 + 44))) {
        unsigned int v17 = (_DWORD *)(v3 + 16 * ((v16 >> 23) & 1));
      }
      else {
        unsigned int v17 = 0;
      }
      int v18 = v17[6];
      int v19 = v17[7];
      int v20 = v17[8];
      if ((v16 & 0x800000) != 0) {
        uint64_t v21 = *(void *)(a2 + 72);
      }
      else {
        uint64_t v21 = 0;
      }
      mlir::ValueRange::ValueRange(v58, v21 + 32 * (v19 + v18), (v20 + v19 + v18) - (unint64_t)(v19 + v18));
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v58[0], v58[1]);
      return 1;
    }
    uint64_t v22 = *(unsigned int *)(a2 + 40);
    unint64_t v23 = v3
        + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8);
    uint64_t v55 = v57;
    uint64_t v56 = 0x400000000;
    uint64_t v24 = *(void *)(((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v22 + 8);
    if (v24) {
      __int16 v25 = (mlir::GenericProgramPoint **)(v24 - 8);
    }
    else {
      __int16 v25 = 0;
    }
    mlir::Block::getTerminator(v25);
    uint64_t v27 = *(void *)(((v3
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v27) {
      uint64_t v28 = v27 - 8;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v51 = a3;
    unint64_t v52 = v13;
    uint64_t v53 = v15;
    if ((*(unsigned char *)(v26 + 46) & 0x80) == 0 || (uint64_t v29 = v26, v30 = *(unsigned int *)(v26 + 68), !v30))
    {
      int v33 = 0;
      int v32 = 0;
LABEL_40:
      if (!v53 && ((v33 | v32) & 1) != 0
        || (v53 ? (BOOL v46 = v52 > 1) : (BOOL v46 = 0), !v46 ? (v47 = 0) : (v47 = 1), (v47 & v32 & 1) != 0))
      {
        uint64_t v8 = 0;
        unint64_t v48 = v55;
        if (v55 == v57) {
          return v8;
        }
      }
      else
      {
        mlir::ValueRange::ValueRange(v54, (uint64_t)v55, v56);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)v51 + 24))(v51, a2, v54[0], v54[1]);
        uint64_t v8 = 1;
        unint64_t v48 = v55;
        if (v55 == v57) {
          return v8;
        }
      }
      free(v48);
      return v8;
    }
    uint64_t v31 = 0;
    int v32 = 0;
    int v33 = 0;
    uint64_t v34 = *(void *)(v28 + 48);
    uint64_t v35 = *(void *)(v28 + 56) - v34;
    uint64_t v36 = (char *)(v34 + 8);
    uint64_t v37 = 8 * (v35 >> 3);
    unint64_t v38 = (char *)(v34 + v37);
    uint64_t v39 = v37 - 8;
    while (1)
    {
      uint64_t v41 = *(void *)(*(void *)(v29 + 72) + 32 * v31 + 24);
      unint64_t v42 = v36;
      if (v35 != 8)
      {
        uint64_t v43 = v39;
        unint64_t v42 = v36;
        while (*(void *)v42 != v41)
        {
          v42 += 8;
          v43 -= 8;
          if (!v43)
          {
            unint64_t v42 = v38;
            break;
          }
        }
      }
      if (v42 != v38) {
        break;
      }
      uint64_t v40 = v56;
      int v33 = 1;
      if (v56 >= (unint64_t)HIDWORD(v56)) {
        goto LABEL_38;
      }
LABEL_27:
      *((void *)v55 + v40) = v41;
      LODWORD(v56) = v56 + 1;
      if (++v31 == v30) {
        goto LABEL_40;
      }
    }
    uint64_t v44 = ((unint64_t)(v42 - v36) >> 3);
    v32 |= v31 != v44;
    if (*(unsigned char *)(a2 + 47)) {
      uint64_t v45 = a2 + 80;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v41 = *(void *)(*(void *)(a2 + 72)
                    + 32 * (*(_DWORD *)(v45 + 28) + *(_DWORD *)(v45 + 24))
                    + 32 * v44
                    + 24);
    uint64_t v40 = v56;
    if (v56 < (unint64_t)HIDWORD(v56)) {
      goto LABEL_27;
    }
LABEL_38:
    int v50 = v33;
    uint64_t v49 = v39;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v40 + 1, 8);
    uint64_t v39 = v49;
    int v33 = v50;
    uint64_t v40 = v56;
    goto LABEL_27;
  }
  return 0;
}

mlir::Block *llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_1>(mlir::Operation ***a1, uint64_t a2)
{
  return mlir::Operation::isProperAncestor(**a1, *(Operation **)(a2 + 16));
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerSetAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v26, a3)) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = 0;
  }
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    uint64_t v24 = "invalid kind of attribute specified";
    __int16 v25 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v27, a1, v12, &v24);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      unint64_t v16 = (void **)__p;
      if (__p)
      {
        unsigned int v17 = v33;
        int v18 = __p;
        if (v33 != __p)
        {
          do
            unsigned int v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          int v18 = __p;
        }
        int v33 = v16;
        operator delete(v18);
      }
      int v19 = v30;
      if (v30)
      {
        int v20 = v31;
        uint64_t v21 = v30;
        if (v31 != v30)
        {
          do
          {
            unint64_t v23 = (void *)*--v20;
            uint64_t v22 = v23;
            *int v20 = 0;
            if (v23) {
              operator delete[](v22);
            }
          }
          while (v20 != v19);
          uint64_t v21 = v30;
        }
        uint64_t v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29) {
        free(v28);
      }
    }
  }
  return v14;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void anonymous namespace'::SimplifyDeadElse::~SimplifyDeadElse(_anonymous_namespace_::SimplifyDeadElse *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyDeadElse::matchAndRewrite(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5 = a2[11];
  if ((v5 & 0x7FFFFF) != 0)
  {
    unint64_t v6 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
    if (*(void *)(v6 + 24) == v6 + 24) {
      return 0;
    }
  }
  else if (MEMORY[0x18] == 24)
  {
    return 0;
  }
  uint64_t v7 = *(void *)((((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17]
                   + ((v5 >> 21) & 0x7F8)
                   + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a2[10]
                 + 32);
  uint64_t v8 = v7 - 8;
  if (!v7) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(void *)(v8 + 40);
  if (v10 == v9 || *(void *)(v10 + 8) != v9 || a2[9]) {
    return 0;
  }
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a3 + 72))(a3, a2);
  uint64_t v12 = *(void *)((((unint64_t)&a2[4 * (((unint64_t)a2[11] >> 23) & 1) + 17]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 32);
  if (v12) {
    uint64_t v13 = v12 - 8;
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v13);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a3 + 80))(a3, a2);
  return 1;
}

void anonymous namespace'::AlwaysTrueOrFalseIf::~AlwaysTrueOrFalseIf(_anonymous_namespace_::AlwaysTrueOrFalseIf *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t anonymous namespace'::AlwaysTrueOrFalseIf::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"condition", 9);
    if (v6)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v7 = 0;
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "condition", 9uLL);
  if (!InherentAttr) {
    goto LABEL_8;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
    uint64_t v7 = (int *)InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
LABEL_9:
  uint64_t v21 = v7;
  uint64_t Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v21);
  uint64_t v21 = Value;
  if (mlir::IntegerSet::isEmptyIntegerSet(&v21))
  {
    unint64_t v9 = *(unsigned int *)(a2 + 44);
    if (!*(_DWORD *)(a2 + 36))
    {
      if ((v9 & 0x7FFFFF) != 0)
      {
        unint64_t v10 = ((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40);
        if (*(void *)(v10 + 24) != v10 + 24) {
          goto LABEL_13;
        }
      }
      else if (MEMORY[0x18] != 24)
      {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
      return 1;
    }
LABEL_13:
    unint64_t v11 = (uint64_t *)(((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
LABEL_14:
    uint64_t v12 = *v11;
    if (v12) {
      uint64_t v13 = (mlir::GenericProgramPoint **)(v12 - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    mlir::Block::getTerminator(v13);
    uint64_t v15 = v14;
    mlir::ValueRange::ValueRange(v23, 0, 0);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v13, a2, v23[0], v23[1]);
    if ((*(unsigned char *)(v15 + 46) & 0x80) != 0)
    {
      uint64_t v16 = *(void *)(v15 + 72);
      unint64_t v17 = *(unsigned int *)(v15 + 68);
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
    }
    mlir::ValueRange::ValueRange(v22, v16, v17);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v22[0], v22[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v15);
    return 1;
  }
  uint64_t v21 = Value;
  if (mlir::IntegerSet::getNumEqualities((mlir::IntegerSet *)&v21) != 1
    || mlir::IntegerSet::getNumInequalities((mlir::IntegerSet *)&v21))
  {
    return 0;
  }
  Constraint = (mlir::MLIRContext **)mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v21, 0);
  BOOL v19 = mlir::AffineExpr::operator==(&Constraint, 0);
  uint64_t result = 0;
  if (v19)
  {
    unint64_t v11 = (uint64_t *)(((a2
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    goto LABEL_14;
  }
  return result;
}

void *anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[8] = *MEMORY[0x1E4F143B8];
  char v34 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
  unint64_t v30 = Value;
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0)
  {
    char v34 = v36;
    uint64_t v35 = 0x800000000;
    unint64_t v7 = -1;
    uint64_t v8 = 32;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v7, 8);
    unint64_t v9 = v35;
    unint64_t v10 = v34;
    unint64_t v11 = (char *)v34 + 8 * v35;
    if (v7 < 0xD) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 68);
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(a2 + 72) + 32;
  char v34 = v36;
  uint64_t v35 = 0x800000000;
  if ((unint64_t)(v6 - 1) >= 9) {
    goto LABEL_3;
  }
  unint64_t v9 = 0;
  if (v6 == 1)
  {
    int v21 = 0;
    goto LABEL_17;
  }
  unint64_t v10 = v36;
  unint64_t v11 = v36;
  if (v7 < 0xD) {
    goto LABEL_9;
  }
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    uint64_t v13 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v13 = 4;
    }
    unint64_t v12 = v7 - v13;
    v11 += v12;
    uint64_t v14 = (const double *)(v8 + 88);
    uint64_t v15 = (unsigned long long *)&v10[v9 + 2];
    unint64_t v16 = v12;
    do
    {
      unint64_t v17 = v14 - 8;
      unsigned long long v18 = (unsigned __int128)vld4q_f64(v17);
      unsigned long long v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *uint64_t v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v12 = 0;
LABEL_14:
  uint64_t v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(void *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  int v21 = v35;
  unint64_t v9 = v7;
LABEL_17:
  LODWORD(v35) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  simplifyMapWithOperands((mlir::AffineExpr *)&v30, (uint64_t *)v34, v35);
  if (v30 != Value)
  {
    uint64_t v22 = v34;
    goto LABEL_19;
  }
  uint64_t v22 = v34;
  if (!v9)
  {
LABEL_29:
    uint64_t v24 = 0;
    if (v34 == v36) {
      return v24;
    }
    goto LABEL_20;
  }
  if (*(void *)(v8 + 24) == *(void *)v34)
  {
    uint64_t v26 = (uint64_t *)(v8 + 56);
    uint64_t v27 = 1;
    while (v9 != v27)
    {
      uint64_t v28 = *v26;
      v26 += 4;
      uint64_t v29 = *((void *)v34 + v27++);
      if (v28 != v29) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  v32[1] = v35;
  unint64_t v33 = v30;
  uint64_t v31 = *(void *)(*(void *)(a2 + 72) + 24);
  v32[0] = v22;
  unint64_t v23 = mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), &v31, &v33, (uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, a2, v23);
  uint64_t v24 = 1;
  uint64_t v22 = v34;
  if (v34 != v36) {
LABEL_20:
  }
    free(v22);
  return v24;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.load", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v23 = 1283;
    unint64_t v22[2] = (uint64_t)"affine.load";
    unint64_t v22[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  uint64_t v13 = *a3;
  unint64_t v14 = *a4;
  uint64_t v15 = mlir::ValueRange::ValueRange(v24, *(void *)a5, *(void *)(a5 + 8));
  mlir::affine::AffineLoadOp::build((uint64_t)v15, (uint64_t)v25, v13, v14, v24[0], v24[1]);
  unint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v38[8] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  unint64_t v31 = Value;
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0)
  {
    uint64_t v36 = v38;
    uint64_t v37 = 0x800000000;
    unint64_t v7 = -2;
    uint64_t v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    unint64_t v9 = v37;
    unint64_t v10 = v36;
    uint64_t v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 68);
  unint64_t v7 = v6 - 2;
  uint64_t v8 = *(void *)(a2 + 72) + 64;
  uint64_t v36 = v38;
  uint64_t v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9) {
    goto LABEL_3;
  }
  unint64_t v9 = 0;
  if (v6 == 2)
  {
    int v21 = 0;
    goto LABEL_17;
  }
  unint64_t v10 = v38;
  uint64_t v11 = v38;
  if (v7 < 0xD) {
    goto LABEL_9;
  }
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    uint64_t v13 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v13 = 4;
    }
    unint64_t v12 = v7 - v13;
    v11 += v12;
    unint64_t v14 = (const double *)(v8 + 88);
    uint64_t v15 = (unsigned long long *)&v10[v9 + 2];
    unint64_t v16 = v12;
    do
    {
      unint64_t v17 = v14 - 8;
      unsigned long long v18 = (unsigned __int128)vld4q_f64(v17);
      unsigned long long v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *uint64_t v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v12 = 0;
LABEL_14:
  uint64_t v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(void *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  int v21 = v37;
  unint64_t v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    uint64_t v22 = v36;
    goto LABEL_19;
  }
  uint64_t v22 = v36;
  if (!v9)
  {
LABEL_29:
    uint64_t v25 = 0;
    if (v36 == v38) {
      return v25;
    }
    goto LABEL_20;
  }
  if (*(void *)(v8 + 24) == *(void *)v36)
  {
    uint64_t v27 = (uint64_t *)(v8 + 56);
    uint64_t v28 = 1;
    while (v9 != v28)
    {
      uint64_t v29 = *v27;
      v27 += 4;
      uint64_t v30 = *((void *)v36 + v28++);
      if (v29 != v30) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  unint64_t v35 = v31;
  uint64_t v23 = *(void *)(a2 + 72);
  uint64_t v33 = *(void *)(v23 + 24);
  v34[0] = v22;
  uint64_t v32 = *(void *)(v23 + 56);
  uint64_t v24 = mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(void *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, a2, v24);
  uint64_t v25 = 1;
  uint64_t v22 = v36;
  if (v36 != v38) {
LABEL_20:
  }
    free(v22);
  return v25;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  v30[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.store", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    __int16 v28 = 1283;
    v27[2] = (uint64_t)"affine.store";
    void v27[3] = 12;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  unint64_t v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(void *)a6, *(void *)(a6 + 8));
  uint64_t v18 = v29[0];
  uint64_t v19 = v29[1];
  v27[0] = v15;
  v25[0] = v16;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  uint64_t v20 = mlir::AffineMapAttr::get(v17);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(v30) = v20;
  int v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = operator new(0x60uLL);
  uint64_t v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *uint64_t v8 = &unk_1EC996228;
  uint64_t v23 = (uint64_t)v8;
  if (v8[9])
  {
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    unint64_t v25 = 115;
    unint64_t v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v25;
    }
    uint64_t v18 = &v24[v17];
    unint64_t v19 = v25 - v17;
    if (v25 - v17 >= 0x12) {
      uint64_t v20 = 18;
    }
    else {
      uint64_t v20 = v25 - v17;
    }
    int v21 = &v18[v20];
    unint64_t v22 = v19 - v20;
    if (v22 >= v22 - 1) {
      --v22;
    }
    v8[8] = v21;
    v8[9] = v22;
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    char v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    uint64_t v15 = v23;
    a1[2] = v14;
    uint64_t v23 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = operator new(0x60uLL);
  uint64_t v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *uint64_t v8 = &unk_1EC996178;
  uint64_t v23 = (uint64_t)v8;
  if (v8[9])
  {
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = "StringRef llvm::getTypeName() [DesiredTypeName = DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>]";
    unint64_t v25 = 111;
    unint64_t v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v25;
    }
    uint64_t v18 = &v24[v17];
    unint64_t v19 = v25 - v17;
    if (v25 - v17 >= 0x12) {
      uint64_t v20 = 18;
    }
    else {
      uint64_t v20 = v25 - v17;
    }
    int v21 = &v18[v20];
    unint64_t v22 = v19 - v20;
    if (v22 >= v22 - 1) {
      --v22;
    }
    v8[8] = v21;
    v8[9] = v22;
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    char v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    uint64_t v15 = v23;
    a1[2] = v14;
    uint64_t v23 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = operator new(0x60uLL);
  uint64_t v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *uint64_t v8 = &unk_1EC995A30;
  uint64_t v23 = (uint64_t)v8;
  if (v8[9])
  {
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    unint64_t v25 = 96;
    unint64_t v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v25;
    }
    uint64_t v18 = &v24[v17];
    unint64_t v19 = v25 - v17;
    if (v25 - v17 >= 0x12) {
      uint64_t v20 = 18;
    }
    else {
      uint64_t v20 = v25 - v17;
    }
    int v21 = &v18[v20];
    unint64_t v22 = v19 - v20;
    if (v22 >= v22 - 1) {
      --v22;
    }
    v8[8] = v21;
    v8[9] = v22;
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    char v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    uint64_t v15 = v23;
    a1[2] = v14;
    uint64_t v23 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = operator new(0x60uLL);
  uint64_t v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *uint64_t v8 = &unk_1EC9962D8;
  uint64_t v23 = (uint64_t)v8;
  if (v8[9])
  {
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>]";
    unint64_t v25 = 119;
    unint64_t v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v25;
    }
    uint64_t v18 = &v24[v17];
    unint64_t v19 = v25 - v17;
    if (v25 - v17 >= 0x12) {
      uint64_t v20 = 18;
    }
    else {
      uint64_t v20 = v25 - v17;
    }
    int v21 = &v18[v20];
    unint64_t v22 = v19 - v20;
    if (v22 >= v22 - 1) {
      --v22;
    }
    v8[8] = v21;
    v8[9] = v22;
    size_t v10 = 16 * a3;
    uint64_t v11 = *((unsigned int *)v8 + 22);
    unint64_t v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    char v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    uint64_t v15 = v23;
    a1[2] = v14;
    uint64_t v23 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void *CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v5 = a2 + 64;
  v10[0] = *(void *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v10[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v10) != 1) {
    return 0;
  }
  v10[0] = *(void *)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 68);
    uint64_t v7 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  v10[0] = v7;
  v10[1] = v6;
  uint64_t v8 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(a3 + 1, *(void *)(a2 + 24), (unint64_t *)&Value, (uint64_t)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v8);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v31[28] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    unint64_t v24[2] = (uint64_t)"affine.apply";
    void v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  unint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(void *)a4, *(void *)(a4 + 8));
  uint64_t v12 = v26[0];
  uint64_t v13 = v26[1];
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  uint64_t v16 = mlir::AffineMapAttr::get(v11);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  unsigned int v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    unsigned int v17 = v29;
  }
  *(void *)(v28 + 8 * v17) = IndexType;
  ++v29;
  uint64_t v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

void *DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  __int16 v25 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
  __int16 v25 = v27;
  uint64_t v26 = 0x400000000;
  uint64_t Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  unsigned int v7 = v26;
  if (v6)
  {
    uint64_t v8 = (uint64_t *)Results;
    uint64_t v9 = (uint64_t *)(Results + 8 * v6);
    do
    {
      uint64_t v10 = *v8;
      unint64_t v11 = v25;
      uint64_t v12 = v7;
      uint64_t v13 = (char *)v25;
      if (v7)
      {
        uint64_t v14 = 8 * v7;
        uint64_t v13 = (char *)v25;
        while (*(void *)v13 != v10)
        {
          v13 += 8;
          v14 -= 8;
          if (!v14)
          {
            uint64_t v13 = (char *)v25 + 8 * v7;
            break;
          }
        }
      }
      if (v7 == (v13 - (unsigned char *)v25) >> 3)
      {
        if (v7 >= HIDWORD(v26))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v7 + 1, 8);
          uint64_t v12 = v26;
          unint64_t v11 = v25;
        }
        v11[v12] = v10;
        unsigned int v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (v7 == mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
  {
    uint64_t v15 = 0;
    uint64_t v16 = v25;
    if (v25 == v27) {
      return v15;
    }
    goto LABEL_19;
  }
  int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  uint64_t v23 = mlir::AffineMap::get(NumDims, NumSymbols, (uint64_t)v25, v26, a3[1]);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    unint64_t v19 = *(unsigned int *)(a2 + 68);
    uint64_t v20 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v19 = 0;
  }
  mlir::ValueRange::ValueRange(v28, v20, v19);
  uint64_t v21 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(void *)(a2 + 24), (unint64_t *)&v23, (uint64_t *)v28);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v21);
  uint64_t v15 = 1;
  uint64_t v16 = v25;
  if (v25 != v27) {
LABEL_19:
  }
    free(v16);
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  v30[28] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    unint64_t v24[2] = (uint64_t)"affine.min";
    void v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  unint64_t v11 = *a3;
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v26, v12, v13);
  uint64_t v16 = mlir::AffineMapAttr::get(v11);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v26) = v16;
  unsigned int v17 = v28;
  if (v28 >= v29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v28 + 1, 8);
    unsigned int v17 = v28;
  }
  *(void *)(v27 + 8 * v17) = IndexType;
  ++v28;
  uint64_t v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

void *MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unint64_t v94 = *(char **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    unint64_t v5 = *(unsigned int *)(a2 + 68);
    uint64_t v6 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v6, v5);
  unsigned int v7 = v94;
  unint64_t v8 = v95;
  unint64_t NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v8 < NumDims) {
    unint64_t NumDims = v8;
  }
  int v99 = v7;
  unint64_t v100 = NumDims;
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    unint64_t v10 = *(unsigned int *)(a2 + 68);
    uint64_t v11 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v11, v10);
  unint64_t NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  if (v95 <= NumSymbols)
  {
    uint64_t v13 = v94;
    unint64_t NumSymbols = v95;
  }
  else
  {
    uint64_t v13 = (void *)mlir::ValueRange::offset_base(&v94, v95 - NumSymbols);
  }
  unint64_t v97 = v13;
  unint64_t v98 = NumSymbols;
  uint64_t v14 = v99;
  unint64_t v15 = v100;
  unint64_t v94 = v96;
  unint64_t v95 = 0x800000000;
  if (v100 < 9)
  {
    uint64_t v16 = 0;
    int v91 = v99;
    uint64_t v92 = 0;
    unsigned int v17 = v96;
    if (!v100)
    {
      int v21 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v100, 8);
    uint64_t v16 = v95;
    unsigned int v17 = v94;
    int v91 = v14;
    uint64_t v92 = 0;
  }
  uint64_t v18 = 0;
  unint64_t v19 = (uint64_t *)&v17[8 * v16];
  do
  {
    *v19++ = mlir::ValueRange::dereference_iterator(&v91, v18);
    uint64_t v18 = ++v92;
  }
  while (v91 != v14 || v18 != v15);
  int v21 = v95;
  uint64_t v13 = v97;
  unint64_t NumSymbols = v98;
LABEL_20:
  LODWORD(v95) = v21 + v15;
  int v91 = v93;
  uint64_t v92 = 0x800000000;
  if (NumSymbols < 9)
  {
    uint64_t v22 = 0;
    int v82 = v13;
    unint64_t v83 = 0;
    __int16 v23 = v93;
    if (!NumSymbols)
    {
      int v27 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, NumSymbols, 8);
    uint64_t v22 = v92;
    __int16 v23 = v91;
    int v82 = v13;
    unint64_t v83 = 0;
  }
  uint64_t v24 = 0;
  __int16 v25 = (uint64_t *)&v23[8 * v22];
  do
  {
    *v25++ = mlir::ValueRange::dereference_iterator(&v82, v24);
    uint64_t v24 = ++v83;
  }
  while (v82 != v13 || v24 != NumSymbols);
  int v27 = v92;
LABEL_30:
  LODWORD(v92) = v27 + NumSymbols;
  unint64_t v88 = v90;
  uint64_t v89 = 0x400000000;
  unint64_t v85 = v87;
  uint64_t v86 = 0x400000000;
  uint64_t Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (v29)
  {
    unsigned int v30 = (void **)Results;
    uint64_t v31 = 8 * v29;
    while (1)
    {
      uint64_t v33 = *v30;
      int v82 = *v30;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 7)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
        v79[0] = v82;
        if (v82) {
          goto LABEL_37;
        }
LABEL_40:
        int v82 = v33;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 6)
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, (uint64_t)v33);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82) {
            goto LABEL_32;
          }
        }
        else
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82) {
            goto LABEL_32;
          }
        }
        unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v78);
        int v82 = (void *)mlir::ValueRange::dereference_iterator(&v99, Position);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (DefiningOp) {
          goto LABEL_45;
        }
LABEL_32:
        uint64_t v32 = v89;
        if (v89 >= (unint64_t)HIDWORD(v89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
          uint64_t v32 = v89;
        }
        *((void *)v88 + v32) = v33;
        LODWORD(v89) = v89 + 1;
        ++v30;
        v31 -= 8;
        if (!v31) {
          break;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v82, 0);
        v79[0] = v82;
        if (!v82) {
          goto LABEL_40;
        }
LABEL_37:
        unsigned int v34 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v79);
        int v82 = (void *)mlir::ValueRange::dereference_iterator(&v97, v34);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (!DefiningOp) {
          goto LABEL_32;
        }
LABEL_45:
        uint64_t v37 = DefiningOp;
        if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id) {
          goto LABEL_32;
        }
        uint64_t v38 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
          uint64_t v38 = v86;
        }
        *((void *)v85 + v38) = v37;
        LODWORD(v86) = v86 + 1;
        ++v30;
        v31 -= 8;
        if (!v31) {
          break;
        }
      }
    }
  }
  if (v86)
  {
    uint64_t v74 = a2;
    int v73 = a3;
    int v39 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    int v40 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
    if (v86)
    {
      uint64_t v41 = (char *)v85;
      uint64_t v75 = (char *)v85 + 8 * v86;
      while (1)
      {
        uint64_t v42 = *(void *)v41;
        int v82 = *(void **)(*(void *)v41
                       + 16 * (((unint64_t)*(unsigned int *)(*(void *)v41 + 44) >> 23) & 1)
                       + 64);
        v79[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
        unsigned int v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v79);
        unsigned int v44 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
        if ((*(unsigned char *)(v42 + 46) & 0x80) != 0)
        {
          unint64_t v45 = *(unsigned int *)(v42 + 68);
          uint64_t v46 = *(void *)(v42 + 72);
        }
        else
        {
          uint64_t v46 = 0;
          unint64_t v45 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v46, v45);
        int v47 = v82;
        unint64_t v48 = v83 >= v43 ? v43 : v83;
        if ((*(unsigned char *)(v42 + 46) & 0x80) != 0)
        {
          unint64_t v49 = *(unsigned int *)(v42 + 68);
          uint64_t v50 = *(void *)(v42 + 72);
        }
        else
        {
          uint64_t v50 = 0;
          unint64_t v49 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v50, v49);
        uint64_t v51 = v82;
        unint64_t v52 = v44;
        if (v83 > v44) {
          break;
        }
        unint64_t v52 = v83;
        uint64_t v53 = v95;
        unint64_t v54 = v48 + v95;
        if (v54 > HIDWORD(v95)) {
          goto LABEL_64;
        }
LABEL_65:
        int v82 = v47;
        unint64_t v83 = 0;
        if (v48)
        {
          uint64_t v55 = 0;
          uint64_t v56 = (uint64_t *)&v94[8 * v53];
          do
          {
            *v56++ = mlir::ValueRange::dereference_iterator(&v82, v55);
            uint64_t v55 = ++v83;
          }
          while (v82 != v47 || v55 != v48);
          LODWORD(v53) = v95;
        }
        LODWORD(v95) = v53 + v48;
        uint64_t v58 = v92;
        unint64_t v59 = v52 + v92;
        if (v59 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v59, 8);
          uint64_t v58 = v92;
        }
        int v82 = v51;
        unint64_t v83 = 0;
        if (v52)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (uint64_t *)((char *)v91 + 8 * v58);
          do
          {
            *v61++ = mlir::ValueRange::dereference_iterator(&v82, v60);
            uint64_t v60 = ++v83;
          }
          while (v82 != v51 || v60 != v52);
          LODWORD(v58) = v92;
        }
        LODWORD(v92) = v58 + v52;
        uint64_t v63 = mlir::AffineMap::getResults((mlir::AffineMap *)v79);
        if (v64)
        {
          uint64_t v65 = (void **)v63;
          uint64_t v66 = 8 * v64;
          do
          {
            int v82 = *v65;
            v78[0] = (mlir::MLIRContext **)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v82, v43, v39, 0);
            uint64_t v67 = mlir::AffineExpr::shiftSymbols(v78, v44, v40, 0);
            uint64_t v68 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
              uint64_t v68 = v89;
            }
            *((void *)v88 + v68) = v67;
            LODWORD(v89) = v89 + 1;
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v39 += v43;
        v40 += v44;
        v41 += 8;
        if (v41 == v75) {
          goto LABEL_91;
        }
      }
      uint64_t v51 = (void *)mlir::ValueRange::offset_base(&v82, v83 - v44);
      uint64_t v53 = v95;
      unint64_t v54 = v48 + v95;
      if (v54 <= HIDWORD(v95)) {
        goto LABEL_65;
      }
LABEL_64:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v54, 8);
      uint64_t v53 = v95;
      goto LABEL_65;
    }
LABEL_91:
    uint64_t v76 = mlir::AffineMap::get(v39, v40, (uint64_t)v88, v89, v73[1]);
    int v81 = (mlir::MLIRContext **)((char *)v91 + 8 * v92);
    int v82 = v84;
    unint64_t v83 = 0x800000000;
    v79[0] = v94;
    v79[1] = v91;
    uint64_t v80 = (mlir::MLIRContext **)&v94[8 * v95];
    v78[0] = v80;
    v78[1] = v81;
    v78[2] = v80;
    v78[3] = v81;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&v82, v79, v78);
    uint64_t v69 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(v73 + 1, *(void *)(v74 + 24), (unint64_t *)&v76, (uint64_t)&v82);
    (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*v73 + 4))(v73, v74, v69);
    if (v82 != v84) {
      free(v82);
    }
    uint64_t v70 = 1;
    uint64_t v71 = v85;
    if (v85 != v87) {
      goto LABEL_94;
    }
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v71 = v85;
    if (v85 != v87) {
LABEL_94:
    }
      free(v71);
  }
  if (v88 != v90) {
    free(v88);
  }
  if (v91 != v93) {
    free(v91);
  }
  if (v94 != v96) {
    free(v94);
  }
  return v70;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v31[28] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    unint64_t v24[2] = (uint64_t)"affine.min";
    void v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  unint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(void *)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = v26[0];
  uint64_t v13 = v26[1];
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  uint64_t v16 = mlir::AffineMapAttr::get(v11);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  unsigned int v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    unsigned int v17 = v29;
  }
  *(void *)(v28 + 8 * v17) = IndexType;
  ++v29;
  uint64_t v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

void *anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  unint64_t v24 = Value;
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    unint64_t v6 = *(unsigned int *)(a2 + 68);
    uint64_t v7 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v26, v7, v6);
  uint64_t v9 = v26;
  unint64_t v8 = v27;
  uint64_t v26 = v28;
  uint64_t v27 = 0x800000000;
  if (v8 < 9)
  {
    uint64_t v10 = 0;
    unsigned int v29 = v9;
    uint64_t v30 = 0;
    unint64_t v11 = v28;
    if (!v8)
    {
      int v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v8, 8);
    uint64_t v10 = v27;
    unint64_t v11 = v26;
    unsigned int v29 = v9;
    uint64_t v30 = 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(&v29, v12);
    uint64_t v12 = ++v30;
  }
  while (v29 != v9 || v12 != v8);
  int v15 = v27;
LABEL_13:
  LODWORD(v27) = v15 + v8;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  simplifyMapWithOperands((mlir::AffineExpr *)&v24, (uint64_t *)v26, v27);
  unint64_t v16 = v24;
  if (v24 == Value)
  {
    uint64_t v21 = v26;
    unsigned int v29 = v9;
    uint64_t v30 = 0;
    if (!v8)
    {
LABEL_25:
      uint64_t v18 = 0;
      unint64_t v19 = v26;
      if (v26 == v28) {
        return v18;
      }
      goto LABEL_15;
    }
    uint64_t v22 = 0;
    while (*v21 == mlir::ValueRange::dereference_iterator(&v29, v22))
    {
      uint64_t v22 = ++v30;
      ++v21;
      if (v29 == v9 && v22 == v8) {
        goto LABEL_25;
      }
    }
    unint64_t v16 = v24;
  }
  unint64_t v25 = v16;
  unsigned int v29 = v26;
  uint64_t v30 = v27;
  unsigned int v17 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(void *)(a2 + 24), &v25, (uint64_t)&v29);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v17);
  uint64_t v18 = 1;
  unint64_t v19 = v26;
  if (v26 != v28) {
LABEL_15:
  }
    free(v19);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v31[28] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v25 = 1283;
    unint64_t v24[2] = (uint64_t)"affine.min";
    void v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  unint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(void *)a4, *(void *)(a4 + 8));
  uint64_t v12 = v26[0];
  uint64_t v13 = v26[1];
  uint64_t IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  uint64_t v16 = mlir::AffineMapAttr::get(v11);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  unsigned int v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    unsigned int v17 = v29;
  }
  *(void *)(v28 + 8 * v17) = IndexType;
  ++v29;
  uint64_t v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

void *CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v10[0] = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (!canonicalizeMapExprAndTermOrder((mlir::AffineMap *)&Value)) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    unint64_t v5 = *(unsigned int *)(a2 + 68);
    uint64_t v6 = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v5);
  uint64_t v7 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(void *)(a2 + 24), (unint64_t *)&Value, (uint64_t *)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v7);
  return 1;
}

uint64_t canonicalizeMapExprAndTermOrder(mlir::AffineMap *a1)
{
  v74[8] = *MEMORY[0x1E4F143B8];
  int v72 = v74;
  uint64_t v73 = 0x100000000;
  uint64_t Results = mlir::AffineMap::getResults(a1);
  if (v3)
  {
    uint64_t v4 = (mlir::AffineExpr *)Results;
    unint64_t v5 = (mlir::AffineExpr *)(Results + 8 * v3);
    while (1)
    {
      if (!mlir::AffineExpr::isPureAffine(v4)) {
        goto LABEL_49;
      }
      int NumDims = mlir::AffineMap::getNumDims(a1);
      int NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      mlir::SimpleAffineExprFlattener::SimpleAffineExprFlattener((mlir::SimpleAffineExprFlattener *)&v67, NumDims, NumSymbols);
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v67, *(void *)v4)|| (int v8 = *(_DWORD *)(v69[0] - 72), v9 = mlir::AffineMap::getNumDims(a1), v8 != v9 + mlir::AffineMap::getNumSymbols(a1) + 1))
      {
        int v15 = 0;
        uint64_t v67 = &unk_1EC9C6D18;
        uint64_t v16 = v70;
        if (v70 == v71) {
          goto LABEL_14;
        }
LABEL_13:
        free(v16);
        goto LABEL_14;
      }
      char v10 = *(void **)(v69[0] - 80);
      uint64_t v64 = v10;
      uint64_t v11 = (const void *)(*(void *)(v69[0] - 80) + 8 * *(unsigned int *)(v69[0] - 72));
      uint64_t v63 = v11;
      if (v73 < HIDWORD(v73)) {
        break;
      }
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,6u>,false>::growAndEmplaceBack<long long const*,long long const*>((uint64_t)&v72, (const void **)&v64, &v63);
      int v15 = 1;
      uint64_t v67 = &unk_1EC9C6D18;
      uint64_t v16 = v70;
      if (v70 != v71) {
        goto LABEL_13;
      }
LABEL_14:
      unsigned int v17 = (char *)__p;
      if (__p)
      {
        uint64_t v18 = (char *)v69[0];
        if ((void *)v69[0] == __p)
        {
          v69[0] = __p;
          operator delete(__p);
          if ((v15 & 1) == 0) {
            goto LABEL_49;
          }
        }
        else
        {
          do
          {
            uint64_t v20 = (char *)*((void *)v18 - 10);
            v18 -= 80;
            unint64_t v19 = v20;
            if (v18 + 16 != v20) {
              free(v19);
            }
          }
          while (v18 != v17);
          v69[0] = v17;
          operator delete(__p);
          if ((v15 & 1) == 0) {
            goto LABEL_49;
          }
        }
      }
      else if (!v15)
      {
        uint64_t v59 = 0;
LABEL_72:
        unsigned int v22 = v73;
        uint64_t v21 = v72;
        if (!v73) {
          goto LABEL_78;
        }
        goto LABEL_73;
      }
      uint64_t v4 = (mlir::AffineExpr *)((char *)v4 + 8);
      if (v4 == v5) {
        goto LABEL_29;
      }
    }
    uint64_t v12 = (char *)v72 + 64 * (unint64_t)v73;
    void *v12 = v12 + 2;
    v12[1] = 0x600000000;
    uint64_t v13 = (unsigned char *)v11 - (unsigned char *)v10;
    if ((unint64_t)((unsigned char *)v11 - (unsigned char *)v10) < 0x31)
    {
      unsigned int v14 = 0;
      if (v10 == v11) {
        goto LABEL_25;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, v12 + 2, v13 >> 3, 8);
      unsigned int v14 = *((_DWORD *)v12 + 2);
      if (v10 == v11)
      {
LABEL_25:
        *((_DWORD *)v12 + 2) = v14 + ((unint64_t)v13 >> 3);
        LODWORD(v73) = v73 + 1;
        int v15 = 1;
        uint64_t v67 = &unk_1EC9C6D18;
        uint64_t v16 = v70;
        if (v70 != v71) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
    memcpy((void *)(*v12 + 8 * v14), v10, (unsigned char *)v11 - (unsigned char *)v10);
    unsigned int v14 = *((_DWORD *)v12 + 2);
    goto LABEL_25;
  }
LABEL_29:
  uint64_t v21 = v72;
  unsigned int v22 = v73;
  __int16 v23 = (char *)v72 + 64 * (unint64_t)v73;
  if (v73)
  {
    if (v73 == 1)
    {
      uint64_t v59 = 0;
LABEL_73:
      unint64_t v60 = (unint64_t)v22 << 6;
      do
      {
        uint64_t v61 = *(char **)((char *)v21 + v60 - 64);
        if ((char *)v21 + v60 - 48 != v61) {
          free(v61);
        }
        v60 -= 64;
      }
      while (v60);
      uint64_t v21 = v72;
      goto LABEL_78;
    }
    __int16 v25 = (char *)v72 + 64;
    unint64_t v24 = *(uint64_t **)v72;
    while (1)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *((unsigned int *)v21 + 2);
      if (v27) {
        break;
      }
LABEL_33:
      uint64_t v59 = 0;
      __int16 v25 = v26 + 64;
      unint64_t v24 = (uint64_t *)v21[8];
      uint64_t v21 = v26;
      if (v26 + 64 == v23) {
        goto LABEL_72;
      }
    }
    uint64_t v28 = 8 * *((unsigned int *)v21 + 18);
    uint64_t v29 = 8 * v27 - 8;
    unsigned int v30 = (uint64_t *)v21[8];
    while (v28)
    {
      uint64_t v31 = *v30;
      uint64_t v32 = *v24;
      if (*v30 < *v24) {
        break;
      }
      ++v30;
      ++v24;
      v28 -= 8;
      BOOL v33 = v32 < v31 || v29 == 0;
      v29 -= 8;
      if (v33) {
        goto LABEL_33;
      }
    }
    uint64_t v21 = v26;
  }
  if (v21 == (void *)v23)
  {
LABEL_49:
    uint64_t v59 = 0;
    unsigned int v22 = v73;
    uint64_t v21 = v72;
    if (!v73) {
      goto LABEL_78;
    }
    goto LABEL_73;
  }
  unsigned int Kind = mlir::AffineExpr::getKind(a1);
  uint64_t v35 = Kind;
  uint64_t v67 = v69;
  std::string __p = (void *)0xC00000000;
  if (Kind >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, Kind, 4);
    uint64_t v36 = v67;
    uint64_t v37 = (int32x4_t *)((char *)v67 + 4 * __p);
    if (v35 < 8)
    {
LABEL_48:
      uint64_t v38 = 0;
      int v39 = (char *)v37;
      do
      {
LABEL_56:
        *(_DWORD *)int v39 = v38;
        v39 += 4;
        ++v38;
      }
      while (v35 != v38);
LABEL_57:
      int v45 = (int)__p;
      goto LABEL_58;
    }
LABEL_53:
    uint64_t v38 = v35 & 0xFFFFFFF8;
    int v39 = &v37->i8[4 * v38];
    int v40 = v37 + 1;
    int32x4_t v41 = (int32x4_t)xmmword_1810FFF10;
    v42.i64[0] = 0x400000004;
    v42.i64[1] = 0x400000004;
    v43.i64[0] = 0x800000008;
    v43.i64[1] = 0x800000008;
    uint64_t v44 = v38;
    do
    {
      v40[-1] = v41;
      *int v40 = vaddq_s32(v41, v42);
      int32x4_t v41 = vaddq_s32(v41, v43);
      v40 += 2;
      v44 -= 8;
    }
    while (v44);
    if (v38 == v35) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (Kind)
  {
    uint64_t v36 = v69;
    uint64_t v37 = (int32x4_t *)v69;
    if (v35 < 8) {
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  int v45 = 0;
  uint64_t v36 = v69;
LABEL_58:
  unint64_t v46 = (v45 + v35);
  BOOL v33 = v46 == 0;
  LODWORD(__p) = v46;
  int v47 = (unsigned int *)v36 + v46;
  uint64_t v64 = &v72;
  unint64_t v48 = 126 - 2 * __clz(v46);
  if (v33) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = v48;
  }
  std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>((int64_t)v36, v47, (uint64_t **)&v64, v49, 1);
  uint64_t v64 = v66;
  uint64_t v65 = 0x600000000;
  if (__p)
  {
    uint64_t v50 = (unsigned int *)v67;
    uint64_t v51 = 4 * __p;
    do
    {
      uint64_t v52 = mlir::AffineMap::getResult(a1, *v50);
      uint64_t v53 = v65;
      if (v65 >= (unint64_t)HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
        uint64_t v53 = v65;
      }
      *((void *)v64 + v53) = v52;
      LODWORD(v65) = v65 + 1;
      ++v50;
      v51 -= 4;
    }
    while (v51);
  }
  int v54 = mlir::AffineMap::getNumDims(a1);
  int v55 = mlir::AffineMap::getNumSymbols(a1);
  uint64_t v56 = v64;
  uint64_t v57 = v65;
  uint64_t LHS = (void *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(void *)a1 = mlir::AffineMap::get(v54, v55, (uint64_t)v56, v57, LHS);
  if (v64 != v66) {
    free(v64);
  }
  if (v67 != v69) {
    free(v67);
  }
  uint64_t v59 = 1;
  unsigned int v22 = v73;
  uint64_t v21 = v72;
  if (v73) {
    goto LABEL_73;
  }
LABEL_78:
  if (v21 != v74) {
    free(v21);
  }
  return v59;
}

int64_t std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(int64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  uint64_t v13 = (char *)v11;
  while (1)
  {
    uint64_t v11 = (unsigned int *)v13;
    uint64_t v14 = (char *)a2 - v13;
    unint64_t v15 = ((char *)a2 - v13) >> 2;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v148 = *(unsigned int *)v13;
          uint64_t v149 = **a3;
          uint64_t v150 = v149 + (v148 << 6);
          uint64_t v151 = *(unsigned int *)(v150 + 8);
          if (!v151) {
            return result;
          }
          uint64_t v152 = *(a2 - 1);
          uint64_t v153 = v149 + (v152 << 6);
          uint64_t v154 = *(uint64_t **)v153;
          uint64_t v155 = *(uint64_t **)v150;
          uint64_t v156 = 8 * *(unsigned int *)(v153 + 8);
          uint64_t v157 = 8 * v151 - 8;
          break;
        case 3uLL:
          uint64_t v161 = **a3;
          return (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v13, (_DWORD *)v13 + 1, v12, v161);
        case 4uLL:
          return (int64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v13, (_DWORD *)v13 + 1, (_DWORD *)v13 + 2, v12, a3);
        case 5uLL:
          return (int64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(v13, (_DWORD *)v13 + 1, (_DWORD *)v13 + 2, (_DWORD *)v13 + 3, v12, a3);
        default:
          JUMPOUT(0);
      }
      while (v156)
      {
        uint64_t v158 = *v154;
        uint64_t v159 = *v155;
        if (*v154 < *v155) {
          break;
        }
        ++v154;
        ++v155;
        v156 -= 8;
        BOOL v160 = v159 < v158 || v157 == 0;
        v157 -= 8;
        if (v160) {
          return result;
        }
      }
      *(_DWORD *)uint64_t v13 = v152;
      *(a2 - 1) = v148;
      return result;
    }
    if (v14 <= 95)
    {
      uint64_t v162 = *a3;
      if (a5)
      {
        if (v13 == (char *)a2) {
          return result;
        }
        uint64_t v163 = (unsigned int *)(v13 + 4);
        if (v13 + 4 == (char *)a2) {
          return result;
        }
        uint64_t v164 = *v162;
        uint64_t v165 = (unsigned int *)v13;
        while (1)
        {
          uint64_t v167 = v165;
          uint64_t v165 = v163;
          uint64_t v168 = *v167;
          uint64_t v169 = v164 + (v168 << 6);
          uint64_t v170 = *(unsigned int *)(v169 + 8);
          if (v170)
          {
            uint64_t v171 = v167[1];
            uint64_t v172 = v164 + (v171 << 6);
            uint64_t v173 = *(uint64_t **)v172;
            uint64_t v174 = *(int64_t **)v169;
            uint64_t v175 = 8 * *(unsigned int *)(v172 + 8);
            uint64_t v176 = 8 * v170 - 8;
            uint64_t result = *(void *)v172;
            while (v175)
            {
              int64_t v177 = *(void *)result;
              int64_t v178 = *v174;
              if (*(void *)result < *v174) {
                break;
              }
              result += 8;
              ++v174;
              v175 -= 8;
              BOOL v179 = v178 < v177 || v176 == 0;
              v176 -= 8;
              if (v179) {
                goto LABEL_190;
              }
            }
            v167[1] = v168;
            uint64_t v166 = v13;
            if (v167 != (unsigned int *)v13)
            {
              uint64_t v180 = v167;
              do
              {
                unsigned int v182 = *--v180;
                unsigned int v181 = v182;
                unint64_t v183 = v164 + ((unint64_t)v182 << 6);
                uint64_t result = *(unsigned int *)(v183 + 8);
                if (!result)
                {
LABEL_188:
                  uint64_t v166 = (char *)v167;
                  goto LABEL_189;
                }
                uint64_t v184 = *(uint64_t **)v183;
                uint64_t v185 = 8 * *(unsigned int *)(v172 + 8);
                uint64_t result = 8 * result - 8;
                uint64_t v186 = v173;
                while (v185)
                {
                  uint64_t v187 = *v186;
                  uint64_t v188 = *v184;
                  if (*v186 < *v184) {
                    break;
                  }
                  ++v186;
                  ++v184;
                  v185 -= 8;
                  BOOL v189 = v188 < v187 || result == 0;
                  result -= 8;
                  if (v189) {
                    goto LABEL_188;
                  }
                }
                *uint64_t v167 = v181;
                uint64_t v167 = v180;
              }
              while (v180 != (unsigned int *)v13);
              uint64_t v166 = v13;
            }
LABEL_189:
            *(_DWORD *)uint64_t v166 = v171;
          }
LABEL_190:
          uint64_t v163 = v165 + 1;
          if (v165 + 1 == a2) {
            return result;
          }
        }
      }
      if (v13 == (char *)a2) {
        return result;
      }
      uint64_t v287 = (unsigned int *)(v13 + 4);
      if (v13 + 4 == (char *)a2) {
        return result;
      }
      uint64_t v288 = *v162;
LABEL_315:
      unint64_t v289 = v11;
      uint64_t v11 = v287;
      uint64_t v290 = *v289;
      uint64_t v291 = v288 + (v290 << 6);
      uint64_t v292 = *(unsigned int *)(v291 + 8);
      if (!v292) {
        goto LABEL_314;
      }
      uint64_t v293 = v289[1];
      uint64_t v294 = v288 + (v293 << 6);
      unint64_t v295 = *(int64_t **)v294;
      uint64_t v296 = *(int64_t **)v291;
      uint64_t v297 = 8 * *(unsigned int *)(v294 + 8);
      uint64_t v298 = 8 * v292 - 8;
      long long v299 = *(int64_t **)v294;
      while (v297)
      {
        uint64_t result = *v299;
        int64_t v300 = *v296;
        if (*v299 < *v296) {
          break;
        }
        ++v299;
        ++v296;
        v297 -= 8;
        BOOL v301 = v300 < result || v298 == 0;
        v298 -= 8;
        if (v301) {
          goto LABEL_314;
        }
      }
      *uint64_t v11 = v290;
      v303 = v289 - 1;
      uint64_t v302 = *(v289 - 1);
      uint64_t v304 = v288 + (v302 << 6);
      uint64_t v305 = *(unsigned int *)(v304 + 8);
      if (!v305) {
        goto LABEL_313;
      }
      uint64_t v306 = *(void *)v304;
      uint64_t v307 = *(void *)v304 + 8 * v305;
      while (1)
      {
        uint64_t v310 = v289;
        unint64_t v289 = v303;
        uint64_t v311 = 8 * *(unsigned int *)(v294 + 8);
        uint64_t v312 = v306 + 8;
        uint64_t result = (int64_t)v295;
        while (v311)
        {
          int64_t v313 = *(void *)result;
          int64_t v314 = *(void *)(v312 - 8);
          if (*(void *)result < v314) {
            break;
          }
          result += 8;
          v311 -= 8;
          BOOL v315 = v314 < v313 || v312 == v307;
          v312 += 8;
          if (v315)
          {
            unint64_t v289 = v310;
LABEL_313:
            *unint64_t v289 = v293;
LABEL_314:
            uint64_t v287 = v11 + 1;
            if (v11 + 1 == a2) {
              return result;
            }
            goto LABEL_315;
          }
        }
        *uint64_t v310 = v302;
        v303 = v289 - 1;
        uint64_t v302 = *(v289 - 1);
        uint64_t v308 = v288 + (v302 << 6);
        uint64_t v306 = *(void *)v308;
        uint64_t v309 = *(unsigned int *)(v308 + 8);
        uint64_t v307 = *(void *)v308 + 8 * v309;
        if (!v309) {
          goto LABEL_313;
        }
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    unsigned int v17 = (unsigned int *)&v13[4 * (v15 >> 1)];
    uint64_t v18 = **a3;
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, &v11[v15 >> 1], v12, v18);
      unint64_t v19 = &v11[v16];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11 + 1, v19 - 1, a2 - 2, **a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
      uint64_t result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v19 - 1, v17, &v11[v16 + 1], **a3);
      unsigned int v20 = *v11;
      *uint64_t v11 = *v19;
      *unint64_t v19 = v20;
      uint64_t v12 = a2 - 1;
      --a4;
      uint64_t v21 = *v11;
      uint64_t v22 = **a3;
      if (a5) {
        goto LABEL_46;
      }
LABEL_10:
      uint64_t v23 = v22 + (v21 << 6);
      unint64_t v24 = *(uint64_t **)v23;
      uint64_t v25 = *(unsigned int *)(v23 + 8);
      uint64_t v26 = 8 * v25;
      if (v25)
      {
        unint64_t v27 = 0;
        unint64_t v28 = v22 + ((unint64_t)*(v11 - 1) << 6);
        uint64_t v29 = *(void *)v28;
        unsigned int v30 = &v24[v25];
        uint64_t v31 = 8 * *(unsigned int *)(v28 + 8);
        while (v31 != v27)
        {
          uint64_t result = *(void *)(v29 + v27);
          int64_t v32 = v24[v27 / 8];
          if (result < v32) {
            break;
          }
          BOOL v33 = v32 < result || v26 - 8 == v27;
          v27 += 8;
          if (v33) {
            goto LABEL_19;
          }
        }
        int v54 = (unsigned int *)(v22 + (v21 << 6) + 8);
        uint64_t v57 = v11 + 1;
        uint64_t v58 = v11[1];
LABEL_49:
        uint64_t v59 = v11;
LABEL_51:
        unint64_t v61 = 0;
        uint64_t v62 = v22 + (v58 << 6);
        uint64_t v63 = *(void *)v62;
        uint64_t v64 = 8 * *(unsigned int *)(v62 + 8);
        do
        {
          if (v64 == v61 || (uint64_t v65 = *(void *)(v63 + v61), v66 = v24[v61 / 8], v65 < v66))
          {
            uint64_t v59 = v57;
            unsigned int v60 = v57[1];
            ++v57;
            uint64_t v58 = v60;
            goto LABEL_51;
          }
          v61 += 8;
        }
        while (v66 >= v65 && &v24[v61 / 8] != v30);
        uint64_t v68 = a2;
        if (v59 == v11)
        {
          uint64_t v68 = a2;
          if (v57 >= a2)
          {
            uint64_t v68 = a2;
          }
          else
          {
LABEL_70:
            unint64_t v77 = 0;
            unsigned int v78 = *--v68;
            unint64_t v79 = v22 + ((unint64_t)v78 << 6);
            uint64_t v80 = *(void *)v79;
            uint64_t v81 = 8 * *(unsigned int *)(v79 + 8);
            while (v81 != v77)
            {
              uint64_t v82 = *(void *)(v80 + v77);
              uint64_t v83 = v24[v77 / 8];
              if (v82 < v83) {
                break;
              }
              v77 += 8;
              if (v83 < v82 || &v24[v77 / 8] == v30)
              {
                if (v57 < v68) {
                  goto LABEL_70;
                }
                break;
              }
            }
          }
        }
        else
        {
LABEL_60:
          unint64_t v69 = 0;
          unsigned int v70 = *--v68;
          unint64_t v71 = v22 + ((unint64_t)v70 << 6);
          uint64_t v72 = *(void *)v71;
          uint64_t v73 = 8 * *(unsigned int *)(v71 + 8);
          while (v73 != v69)
          {
            uint64_t v74 = *(void *)(v72 + v69);
            uint64_t v75 = v24[v69 / 8];
            if (v74 < v75) {
              break;
            }
            v69 += 8;
            if (v75 < v74 || &v24[v69 / 8] == v30) {
              goto LABEL_60;
            }
          }
        }
        uint64_t v13 = (char *)v57;
        if (v57 < v68) {
          goto LABEL_123;
        }
        goto LABEL_144;
      }
LABEL_19:
      unint64_t v34 = v22 + ((unint64_t)*v12 << 6);
      int64_t v35 = *(void *)v34;
      uint64_t v36 = *(unsigned int *)(v34 + 8);
      if (v36)
      {
        uint64_t v37 = 8 * v36 - 8;
        uint64_t v38 = v26;
        int v39 = *(int64_t **)v23;
        uint64_t result = v35;
        while (v38)
        {
          int64_t v40 = *v39;
          int64_t v41 = *(void *)result;
          if (*v39 < *(void *)result) {
            break;
          }
          ++v39;
          result += 8;
          v38 -= 8;
          BOOL v42 = v41 < v40 || v37 == 0;
          v37 -= 8;
          if (v42) {
            goto LABEL_28;
          }
        }
        uint64_t v13 = (char *)v11;
        do
        {
LABEL_151:
          unsigned int v139 = *((_DWORD *)v13 + 1);
          v13 += 4;
          unint64_t v140 = v22 + ((unint64_t)v139 << 6);
          uint64_t v141 = *(unsigned int *)(v140 + 8);
        }
        while (!v141);
        unint64_t v142 = *(int64_t **)v140;
        uint64_t v143 = 8 * v141 - 8;
        uint64_t v144 = v26;
        uint64_t result = *(void *)v23;
        while (v144)
        {
          int64_t v145 = *(void *)result;
          int64_t v146 = *v142;
          if (*(void *)result < *v142) {
            break;
          }
          result += 8;
          ++v142;
          v144 -= 8;
          BOOL v147 = v146 < v145 || v143 == 0;
          v143 -= 8;
          if (v147) {
            goto LABEL_151;
          }
        }
      }
      else
      {
LABEL_28:
        uint64_t v13 = (char *)(v11 + 1);
        if (v11 + 1 < a2)
        {
          while (1)
          {
            unint64_t v43 = v22 + ((unint64_t)*(unsigned int *)v13 << 6);
            uint64_t v44 = *(unsigned int *)(v43 + 8);
            if (v44) {
              break;
            }
LABEL_38:
            v13 += 4;
            if (v13 >= (char *)a2) {
              goto LABEL_39;
            }
          }
          int v45 = *(int64_t **)v43;
          uint64_t v46 = 8 * v44 - 8;
          uint64_t v47 = v26;
          uint64_t result = *(void *)v23;
          while (v47)
          {
            int64_t v48 = *(void *)result;
            int64_t v49 = *v45;
            if (*(void *)result < *v45) {
              break;
            }
            result += 8;
            ++v45;
            v47 -= 8;
            BOOL v50 = v49 < v48 || v46 == 0;
            v46 -= 8;
            if (v50) {
              goto LABEL_38;
            }
          }
        }
      }
LABEL_39:
      if (v13 < (char *)a2) {
        uint64_t v51 = v12;
      }
      else {
        uint64_t v51 = a2;
      }
      if (v36 && v13 < (char *)a2)
      {
        uint64_t v52 = v35 + 8 * v36;
        uint64_t v51 = v12;
        do
        {
          int64_t v88 = v35 + 8;
          uint64_t v89 = v26;
          int v90 = *(int64_t **)v23;
          while (v89)
          {
            uint64_t result = *v90;
            int64_t v91 = *(void *)(v88 - 8);
            if (*v90 < v91) {
              break;
            }
            ++v90;
            v89 -= 8;
            BOOL v92 = v91 < result || v88 == v52;
            v88 += 8;
            if (v92) {
              goto LABEL_92;
            }
          }
          unsigned int v85 = *--v51;
          unint64_t v86 = v22 + ((unint64_t)v85 << 6);
          int64_t v35 = *(void *)v86;
          uint64_t v87 = *(unsigned int *)(v86 + 8);
          uint64_t v52 = *(void *)v86 + 8 * v87;
        }
        while (v87);
      }
LABEL_92:
      if (v13 < (char *)v51)
      {
        unsigned int v93 = *(_DWORD *)v13;
        unsigned int v94 = *v51;
        do
        {
          *(_DWORD *)uint64_t v13 = v94;
          *uint64_t v51 = v93;
          do
          {
LABEL_96:
            unsigned int v95 = *((_DWORD *)v13 + 1);
            v13 += 4;
            unsigned int v93 = v95;
            unint64_t v96 = v22 + ((unint64_t)v95 << 6);
            uint64_t v97 = *(unsigned int *)(v96 + 8);
          }
          while (!v97);
          unint64_t v98 = *(int64_t **)v96;
          uint64_t v99 = 8 * v97 - 8;
          uint64_t v100 = 8 * *(unsigned int *)(v23 + 8);
          uint64_t result = (int64_t)v24;
          while (v100)
          {
            int64_t v101 = *(void *)result;
            int64_t v102 = *v98;
            if (*(void *)result < *v98) {
              break;
            }
            result += 8;
            ++v98;
            v100 -= 8;
            BOOL v103 = v102 < v101 || v99 == 0;
            v99 -= 8;
            if (v103) {
              goto LABEL_96;
            }
          }
          unsigned int v104 = *--v51;
          unsigned int v94 = v104;
          unint64_t v105 = v22 + ((unint64_t)v104 << 6);
          uint64_t v106 = *(unsigned int *)(v105 + 8);
          if (v106)
          {
            uint64_t v107 = *(void *)v105;
            uint64_t v108 = v107 + 8 * v106;
            do
            {
              uint64_t v111 = v107 + 8;
              uint64_t result = 8 * *(unsigned int *)(v23 + 8);
              unint64_t v112 = v24;
              while (result)
              {
                uint64_t v113 = *v112;
                uint64_t v114 = *(void *)(v111 - 8);
                if (*v112 < v114) {
                  break;
                }
                ++v112;
                result -= 8;
                BOOL v115 = v114 < v113 || v111 == v108;
                v111 += 8;
                if (v115) {
                  goto LABEL_94;
                }
              }
              unsigned int v109 = *--v51;
              unsigned int v94 = v109;
              unint64_t v110 = v22 + ((unint64_t)v109 << 6);
              uint64_t v107 = *(void *)v110;
              uint64_t result = *(unsigned int *)(v110 + 8);
              uint64_t v108 = *(void *)v110 + 8 * result;
            }
            while (result);
          }
LABEL_94:
          ;
        }
        while (v13 < (char *)v51);
      }
      uint64_t v116 = (unsigned int *)(v13 - 4);
      BOOL v5 = v13 - 4 >= (char *)v11;
      BOOL v6 = v13 - 4 == (char *)v11;
      if (v13 - 4 != (char *)v11) {
        *uint64_t v11 = *v116;
      }
      a5 = 0;
      unsigned int *v116 = v21;
    }
    else
    {
      uint64_t result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(&v11[v15 >> 1], v11, v12, v18);
      --a4;
      uint64_t v21 = *v11;
      uint64_t v22 = **a3;
      if ((a5 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_46:
      unint64_t v24 = *(uint64_t **)(v22 + (v21 << 6));
      uint64_t v53 = v22 + (v21 << 6);
      unsigned int v56 = *(_DWORD *)(v53 + 8);
      int v54 = (unsigned int *)(v53 + 8);
      uint64_t v55 = v56;
      uint64_t v57 = v11 + 1;
      uint64_t v58 = v11[1];
      if (v56)
      {
        unsigned int v30 = &v24[v55];
        goto LABEL_49;
      }
      if (v57 >= a2)
      {
        uint64_t v68 = a2;
        uint64_t v13 = (char *)(v11 + 1);
        goto LABEL_144;
      }
      uint64_t v68 = (unsigned int *)((char *)a2 + (((char *)v57 - (char *)a2) & 0xFFFFFFFFFFFFFFFCLL));
      uint64_t v13 = (char *)(v11 + 1);
      if (v57 < v68)
      {
LABEL_123:
        unsigned int v117 = *v68;
        uint64_t v13 = (char *)v57;
        int v118 = v68;
        do
        {
          *(_DWORD *)uint64_t v13 = v117;
          *int v118 = v58;
LABEL_126:
          unsigned int v119 = *((_DWORD *)v13 + 1);
          v13 += 4;
          LODWORD(v58) = v119;
          unint64_t v120 = v22 + ((unint64_t)v119 << 6);
          unint64_t v121 = *(uint64_t **)v120;
          uint64_t v122 = 8 * *(unsigned int *)(v120 + 8);
          uint64_t v123 = 8 * *v54 - 8;
          unint64_t v124 = v24;
          do
          {
            if (!v122) {
              goto LABEL_126;
            }
            uint64_t v125 = *v121;
            uint64_t v126 = *v124;
            if (*v121 < *v124) {
              goto LABEL_126;
            }
            ++v121;
            ++v124;
            v122 -= 8;
            BOOL v127 = v126 < v125 || v123 == 0;
            v123 -= 8;
          }
          while (!v127);
LABEL_134:
          unsigned int v128 = *--v118;
          unsigned int v117 = v128;
          unint64_t v129 = v22 + ((unint64_t)v128 << 6);
          unint64_t v130 = *(uint64_t **)v129;
          uint64_t v131 = 8 * *(unsigned int *)(v129 + 8);
          uint64_t v132 = 8 * *v54 - 8;
          unint64_t v133 = v24;
          while (v131)
          {
            uint64_t v134 = *v130;
            uint64_t v135 = *v133;
            if (*v130 < *v133) {
              break;
            }
            ++v130;
            ++v133;
            v131 -= 8;
            BOOL v136 = v135 < v134 || v132 == 0;
            v132 -= 8;
            if (v136) {
              goto LABEL_134;
            }
          }
        }
        while (v13 < (char *)v118);
      }
LABEL_144:
      unint64_t v137 = (unsigned int *)(v13 - 4);
      if (v13 - 4 != (char *)v11) {
        *uint64_t v11 = *v137;
      }
      *unint64_t v137 = v21;
      if (v57 < v68) {
        goto LABEL_149;
      }
      BOOL v138 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, (unsigned int *)v13 - 1, a3);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>((unsigned int *)v13, a2, a3);
      if (result)
      {
        a2 = (unsigned int *)(v13 - 4);
        if (v138) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v138)
      {
LABEL_149:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(v11, v13 - 4, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
  }
  if (v13 == (char *)a2) {
    return result;
  }
  int64_t v190 = (v15 - 2) >> 1;
  int64_t v191 = v190;
  while (2)
  {
    int64_t v192 = v191;
    if (v190 >= v191)
    {
      uint64_t v193 = (2 * v191) | 1;
      uint64_t v194 = (unsigned int *)&v13[4 * v193];
      uint64_t v195 = **a3;
      if (2 * v192 + 2 < (uint64_t)v15
        && (uint64_t v196 = v194 + 1,
            unint64_t v197 = v195 + ((unint64_t)v194[1] << 6),
            uint64_t v198 = *(unsigned int *)(v197 + 8),
            v198))
      {
        unint64_t v199 = v195 + ((unint64_t)*v194 << 6);
        uint64_t v200 = *(uint64_t **)v199;
        uint64_t v201 = *(uint64_t **)v197;
        uint64_t v202 = 8 * *(unsigned int *)(v199 + 8);
        uint64_t v203 = 8 * v198 - 8;
        while (v202)
        {
          uint64_t v204 = *v200;
          uint64_t v205 = *v201;
          if (*v200 < *v201) {
            break;
          }
          ++v200;
          ++v201;
          v202 -= 8;
          BOOL v206 = v205 < v204 || v203 == 0;
          v203 -= 8;
          if (v206) {
            goto LABEL_231;
          }
        }
        ++v194;
        uint64_t v193 = 2 * v192 + 2;
        uint64_t result = *v196;
        uint64_t v207 = *(unsigned int *)&v13[4 * v192];
        uint64_t v208 = v195 + (v207 << 6);
        uint64_t v209 = *(uint64_t **)v208;
        uint64_t v210 = *(unsigned int *)(v208 + 8);
        if (!v210)
        {
LABEL_242:
          *(_DWORD *)&v13[4 * v192] = result;
          if (v190 >= v193)
          {
            while (1)
            {
              uint64_t v219 = 2 * v193;
              uint64_t v193 = (2 * v193) | 1;
              uint64_t result = (int64_t)&v13[4 * v193];
              uint64_t v220 = v219 + 2;
              if (v220 < (uint64_t)v15)
              {
                unint64_t v221 = v195 + ((unint64_t)*(unsigned int *)(result + 4) << 6);
                uint64_t v222 = *(unsigned int *)(v221 + 8);
                if (v222)
                {
                  unint64_t v223 = v195 + ((unint64_t)*(unsigned int *)result << 6);
                  uint64_t v224 = *(uint64_t **)v223;
                  uint64_t v225 = *(uint64_t **)v221;
                  uint64_t v226 = 8 * *(unsigned int *)(v223 + 8);
                  uint64_t v227 = 8 * v222 - 8;
                  while (v226)
                  {
                    uint64_t v228 = *v224;
                    uint64_t v229 = *v225;
                    if (*v224 < *v225) {
                      break;
                    }
                    ++v224;
                    ++v225;
                    v226 -= 8;
                    BOOL v230 = v229 < v228 || v227 == 0;
                    v227 -= 8;
                    if (v230) {
                      goto LABEL_257;
                    }
                  }
                  result += 4;
                  uint64_t v193 = v220;
                }
              }
LABEL_257:
              uint64_t v231 = *(unsigned int *)result;
              uint64_t v232 = *(unsigned int *)(v208 + 8);
              if (v232) {
                break;
              }
LABEL_244:
              *uint64_t v194 = v231;
              uint64_t v194 = (unsigned int *)result;
              if (v190 < v193) {
                goto LABEL_218;
              }
            }
            uint64_t v233 = v195 + (v231 << 6);
            uint64_t v234 = *(uint64_t **)v233;
            uint64_t v235 = 8 * *(unsigned int *)(v233 + 8);
            uint64_t v236 = 8 * v232 - 8;
            uint64_t v237 = v209;
            while (v235)
            {
              uint64_t v238 = *v234;
              uint64_t v239 = *v237;
              if (*v234 < *v237) {
                break;
              }
              ++v234;
              ++v237;
              v235 -= 8;
              BOOL v240 = v239 < v238 || v236 == 0;
              v236 -= 8;
              if (v240) {
                goto LABEL_244;
              }
            }
          }
          uint64_t result = (int64_t)v194;
LABEL_218:
          *(_DWORD *)uint64_t result = v207;
          goto LABEL_219;
        }
      }
      else
      {
LABEL_231:
        uint64_t result = *v194;
        uint64_t v207 = *(unsigned int *)&v13[4 * v192];
        uint64_t v208 = v195 + (v207 << 6);
        uint64_t v209 = *(uint64_t **)v208;
        uint64_t v210 = *(unsigned int *)(v208 + 8);
        if (!v210) {
          goto LABEL_242;
        }
      }
      uint64_t v211 = v195 + (result << 6);
      uint64_t v212 = *(uint64_t **)v211;
      uint64_t v213 = 8 * *(unsigned int *)(v211 + 8);
      uint64_t v214 = 8 * v210 - 8;
      uint64_t v215 = v209;
      while (v213)
      {
        uint64_t v216 = *v212;
        uint64_t v217 = *v215;
        if (*v212 < *v215) {
          break;
        }
        ++v212;
        ++v215;
        v213 -= 8;
        BOOL v218 = v217 < v216 || v214 == 0;
        v214 -= 8;
        if (v218) {
          goto LABEL_242;
        }
      }
    }
LABEL_219:
    int64_t v191 = v192 - 1;
    if (v192) {
      continue;
    }
    break;
  }
  uint64_t v241 = (unint64_t)v14 >> 2;
  do
  {
    uint64_t v243 = 0;
    unsigned int v244 = *(_DWORD *)v13;
    uint64_t v245 = *a3;
    uint64_t v246 = (unsigned int *)v13;
    do
    {
      uint64_t v247 = v246;
      v246 += v243 + 1;
      uint64_t v248 = 2 * v243;
      uint64_t v243 = (2 * v243) | 1;
      uint64_t v249 = v248 + 2;
      if (v249 < v241)
      {
        uint64_t result = *v245 + ((unint64_t)v246[1] << 6);
        uint64_t v250 = *(unsigned int *)(result + 8);
        if (v250)
        {
          unint64_t v251 = *v245 + ((unint64_t)*v246 << 6);
          uint64_t v252 = *(int64_t **)v251;
          uint64_t result = *(void *)result;
          uint64_t v253 = 8 * *(unsigned int *)(v251 + 8);
          uint64_t v254 = 8 * v250 - 8;
          while (v253)
          {
            int64_t v255 = *v252;
            int64_t v256 = *(void *)result;
            if (*v252 < *(void *)result) {
              break;
            }
            ++v252;
            result += 8;
            v253 -= 8;
            BOOL v257 = v256 < v255 || v254 == 0;
            v254 -= 8;
            if (v257) {
              goto LABEL_272;
            }
          }
          ++v246;
          uint64_t v243 = v249;
        }
      }
LABEL_272:
      unsigned int *v247 = *v246;
    }
    while (v243 <= (uint64_t)((unint64_t)(v241 - 2) >> 1));
    if (v246 == --a2)
    {
      unsigned int *v246 = v244;
    }
    else
    {
      unsigned int *v246 = *a2;
      *a2 = v244;
      uint64_t v258 = (char *)v246 - v13 + 4;
      if (v258 >= 5)
      {
        uint64_t v259 = *v246;
        uint64_t v260 = **a3;
        uint64_t v261 = v260 + (v259 << 6);
        uint64_t v262 = *(unsigned int *)(v261 + 8);
        if (v262)
        {
          unint64_t v263 = ((unint64_t)v258 >> 2) - 2;
          unint64_t v264 = v263 >> 1;
          uint64_t v265 = (unsigned int *)&v13[4 * (v263 >> 1)];
          uint64_t v266 = *v265;
          uint64_t v267 = v260 + (v266 << 6);
          uint64_t result = *(void *)v267;
          uint64_t v268 = *(unsigned int *)(v267 + 8);
          uint64_t v269 = *(int64_t **)v261;
          uint64_t v270 = 8 * v268;
          uint64_t v271 = 8 * v262 - 8;
          uint64_t v272 = *(int64_t **)v261;
          while (v270)
          {
            int64_t v273 = *(void *)result;
            int64_t v274 = *v272;
            if (*(void *)result < *v272) {
              break;
            }
            result += 8;
            ++v272;
            v270 -= 8;
            BOOL v275 = v274 < v273 || v271 == 0;
            v271 -= 8;
            if (v275) {
              goto LABEL_269;
            }
          }
          unsigned int *v246 = v266;
          if (v263 >= 2)
          {
            while (1)
            {
              uint64_t v276 = *(unsigned int *)(v261 + 8);
              if (!v276) {
                break;
              }
              unint64_t v277 = v264 - 1;
              unint64_t v264 = (v264 - 1) >> 1;
              long long v278 = (unsigned int *)&v13[4 * v264];
              uint64_t v279 = *v278;
              uint64_t v280 = v260 + (v279 << 6);
              uint64_t result = *(void *)v280;
              uint64_t v281 = 8 * *(unsigned int *)(v280 + 8);
              uint64_t v282 = 8 * v276 - 8;
              uint64_t v283 = v269;
              while (v281)
              {
                int64_t v284 = *(void *)result;
                int64_t v285 = *v283;
                if (*(void *)result < *v283) {
                  break;
                }
                result += 8;
                ++v283;
                v281 -= 8;
                BOOL v286 = v285 < v284 || v282 == 0;
                v282 -= 8;
                if (v286) {
                  goto LABEL_308;
                }
              }
              unsigned int *v265 = v279;
              uint64_t v265 = (unsigned int *)&v13[4 * v264];
              if (v277 <= 1) {
                goto LABEL_309;
              }
            }
          }
LABEL_308:
          long long v278 = v265;
LABEL_309:
          *long long v278 = v259;
        }
      }
    }
LABEL_269:
    ;
  }
  while (v241-- > 2);
  return result;
}

_DWORD *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = **a6;
  uint64_t v15 = v14 + (v13 << 6);
  uint64_t v16 = *(unsigned int *)(v15 + 8);
  if (v16)
  {
    uint64_t v17 = *a5;
    uint64_t v18 = v14 + (v17 << 6);
    unint64_t v19 = *(uint64_t **)v18;
    unsigned int v20 = *(uint64_t **)v15;
    uint64_t v21 = 8 * *(unsigned int *)(v18 + 8);
    uint64_t v22 = 8 * v16 - 8;
    while (v21)
    {
      uint64_t v23 = *v19;
      uint64_t v24 = *v20;
      if (*v19 < *v20) {
        break;
      }
      ++v19;
      ++v20;
      v21 -= 8;
      BOOL v25 = v24 < v23 || v22 == 0;
      v22 -= 8;
      if (v25) {
        return result;
      }
    }
    *a4 = v17;
    *a5 = v13;
    uint64_t v26 = *a3;
    uint64_t v27 = v14 + (v26 << 6);
    uint64_t v28 = *(unsigned int *)(v27 + 8);
    if (v28)
    {
      uint64_t v29 = *a4;
      uint64_t v30 = v14 + (v29 << 6);
      uint64_t v31 = *(uint64_t **)v30;
      int64_t v32 = *(uint64_t **)v27;
      uint64_t v33 = 8 * *(unsigned int *)(v30 + 8);
      uint64_t v34 = 8 * v28 - 8;
      while (v33)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v32;
        if (*v31 < *v32) {
          break;
        }
        ++v31;
        ++v32;
        v33 -= 8;
        BOOL v37 = v36 < v35 || v34 == 0;
        v34 -= 8;
        if (v37) {
          return result;
        }
      }
      *a3 = v29;
      *a4 = v26;
      uint64_t v38 = *a2;
      uint64_t v39 = v14 + (v38 << 6);
      uint64_t v40 = *(unsigned int *)(v39 + 8);
      if (v40)
      {
        uint64_t v41 = *a3;
        uint64_t v42 = v14 + (v41 << 6);
        unint64_t v43 = *(uint64_t **)v42;
        uint64_t v44 = *(uint64_t **)v39;
        uint64_t v45 = 8 * *(unsigned int *)(v42 + 8);
        uint64_t v46 = 8 * v40 - 8;
        while (v45)
        {
          uint64_t v47 = *v43;
          uint64_t v48 = *v44;
          if (*v43 < *v44) {
            break;
          }
          ++v43;
          ++v44;
          v45 -= 8;
          BOOL v49 = v48 < v47 || v46 == 0;
          v46 -= 8;
          if (v49) {
            return result;
          }
        }
        *a2 = v41;
        *a3 = v38;
        uint64_t v50 = *a1;
        uint64_t v51 = v14 + (v50 << 6);
        uint64_t v52 = *(unsigned int *)(v51 + 8);
        if (v52)
        {
          uint64_t v53 = *a2;
          uint64_t v54 = v14 + (v53 << 6);
          uint64_t v55 = *(uint64_t **)v54;
          unsigned int v56 = *(uint64_t **)v51;
          uint64_t v57 = 8 * *(unsigned int *)(v54 + 8);
          uint64_t v58 = 8 * v52 - 8;
          while (v57)
          {
            uint64_t v59 = *v55;
            uint64_t v60 = *v56;
            if (*v55 < *v56) {
              break;
            }
            ++v55;
            ++v56;
            v57 -= 8;
            BOOL v61 = v60 < v59 || v58 == 0;
            v58 -= 8;
            if (v61) {
              return result;
            }
          }
          *a1 = v53;
          *a2 = v50;
        }
      }
    }
  }
  return result;
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = a4 + (v4 << 6);
  uint64_t v7 = a4 + (v5 << 6);
  int v8 = *(uint64_t **)v6;
  uint64_t v9 = *(unsigned int *)(v6 + 8);
  uint64_t v10 = *(unsigned int *)(v7 + 8);
  if (v10)
  {
    uint64_t v11 = 8 * v9;
    uint64_t v12 = 8 * v10;
    uint64_t v13 = *(uint64_t **)v7;
    uint64_t v14 = v12 - 8;
    uint64_t v15 = 8 * v9;
    uint64_t v16 = v8;
    uint64_t v17 = *(uint64_t **)v7;
    while (v15)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *v17;
      if (*v16 < *v17) {
        break;
      }
      ++v16;
      ++v17;
      v15 -= 8;
      BOOL v20 = v19 < v18 || v14 == 0;
      v14 -= 8;
      if (v20) {
        goto LABEL_10;
      }
    }
    if (v9)
    {
      uint64_t v29 = *a3;
      uint64_t v30 = a4 + (v29 << 6);
      uint64_t v31 = *(uint64_t **)v30;
      uint64_t v32 = 8 * *(unsigned int *)(v30 + 8);
      uint64_t v33 = v11 - 8;
      while (v32)
      {
        uint64_t v34 = *v31;
        uint64_t v35 = *v8;
        if (*v31 < *v8) {
          break;
        }
        ++v31;
        ++v8;
        v32 -= 8;
        BOOL v36 = v35 < v34 || v33 == 0;
        v33 -= 8;
        if (v36) {
          goto LABEL_29;
        }
      }
      *uint64_t result = v29;
      *a3 = v5;
    }
    else
    {
LABEL_29:
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v37 = *(unsigned int *)(v7 + 8);
      if (v37)
      {
        uint64_t v38 = *a3;
        uint64_t v39 = a4 + (v38 << 6);
        uint64_t v40 = *(uint64_t **)v39;
        uint64_t v41 = 8 * *(unsigned int *)(v39 + 8);
        uint64_t v42 = 8 * v37 - 8;
        while (v41)
        {
          uint64_t v43 = *v40;
          uint64_t v44 = *v13;
          if (*v40 < *v13) {
            break;
          }
          ++v40;
          ++v13;
          v41 -= 8;
          BOOL v45 = v44 < v43 || v42 == 0;
          v42 -= 8;
          if (v45) {
            return result;
          }
        }
        *a2 = v38;
        *a3 = v5;
      }
    }
  }
  else
  {
LABEL_10:
    if (v9)
    {
      uint64_t v21 = *a3;
      uint64_t v22 = a4 + (v21 << 6);
      uint64_t v23 = *(uint64_t **)v22;
      uint64_t v24 = 8 * *(unsigned int *)(v22 + 8);
      uint64_t v25 = 8 * v9 - 8;
      while (v24)
      {
        uint64_t v26 = *v23;
        uint64_t v27 = *v8;
        if (*v23 < *v8) {
          break;
        }
        ++v23;
        ++v8;
        v24 -= 8;
        BOOL v28 = v27 < v26 || v25 == 0;
        v25 -= 8;
        if (v28) {
          return result;
        }
      }
      *a2 = v21;
      *a3 = v4;
      uint64_t v46 = *result;
      uint64_t v47 = a4 + (v46 << 6);
      uint64_t v48 = *(unsigned int *)(v47 + 8);
      if (v48)
      {
        uint64_t v49 = *a2;
        uint64_t v50 = a4 + (v49 << 6);
        uint64_t v51 = *(uint64_t **)v50;
        uint64_t v52 = *(uint64_t **)v47;
        uint64_t v53 = 8 * *(unsigned int *)(v50 + 8);
        uint64_t v54 = 8 * v48 - 8;
        while (v53)
        {
          uint64_t v55 = *v51;
          uint64_t v56 = *v52;
          if (*v51 < *v52) {
            break;
          }
          ++v51;
          ++v52;
          v53 -= 8;
          BOOL v57 = v56 < v55 || v54 == 0;
          v54 -= 8;
          if (v57) {
            return result;
          }
        }
        *uint64_t result = v49;
        *a2 = v46;
      }
    }
  }
  return result;
}