uint64_t mlir::SimpleAffineExprFlattener::visitDimExpr(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  size_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  void *v10;
  unsigned int v11;
  void *__src;
  unsigned int v14;
  int v15;
  void v16[33];

  v16[32] = *MEMORY[0x1E4F143B8];
  v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  v15 = 32;
  if (v4 < 0x21)
  {
    if (!v4) {
      goto LABEL_6;
    }
    v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  v14 = v4;
  v7 = *(void *)(a1 + 16);
  if (v7 >= *(void *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(void *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *(void *)v7 = v7 + 16;
  *(void *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(void *)v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        v15 = 0;
      }
      v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(void *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(void *)(*((void *)v9 - 10) + 8 * *(unsigned int *)(a2 + 16)) = 1;
  return 1;
}

uint64_t mlir::SimpleAffineExprFlattener::visitSymbolExpr(uint64_t a1, uint64_t a2)
{
  v16[32] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  int v15 = 32;
  if (v4 < 0x21)
  {
    if (!v4) {
      goto LABEL_6;
    }
    size_t v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    unsigned int v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    size_t v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  unsigned int v14 = v4;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7 >= *(void *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(void *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *(void *)unint64_t v7 = v7 + 16;
  *(void *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    unsigned int v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        unsigned int v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (unsigned int v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(void *)unint64_t v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        int v15 = 0;
      }
      unsigned int v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(void *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(void *)(*((void *)v9 - 10) + 8 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 32))) = 1;
  return 1;
}

uint64_t mlir::SimpleAffineExprFlattener::visitConstantExpr(uint64_t a1, uint64_t a2)
{
  v16[32] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40) + 1);
  __src = v16;
  int v15 = 32;
  if (v4 < 0x21)
  {
    if (!v4) {
      goto LABEL_6;
    }
    size_t v6 = 8 * v4;
    v5 = v16;
  }
  else
  {
    unsigned int v14 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v16, v4, 8);
    v5 = __src;
    size_t v6 = 8 * v4;
  }
  bzero(v5, v6);
LABEL_6:
  unsigned int v14 = v4;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7 >= *(void *)(a1 + 24))
  {
    v9 = std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>((char **)(a1 + 8), (uint64_t)&__src);
    *(void *)(a1 + 16) = v9;
    v10 = __src;
    if (__src == v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *(void *)unint64_t v7 = v7 + 16;
  *(void *)(v7 + 8) = 0x800000000;
  if ((void **)v7 != &__src)
  {
    unsigned int v8 = v14;
    if (v14)
    {
      if (__src == v16)
      {
        unsigned int v11 = v14;
        if (v14 < 9
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v14, 8), (unsigned int v11 = v14) != 0))
        {
          memcpy(*(void **)v7, __src, 8 * v11);
        }
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
        *(void *)unint64_t v7 = __src;
        *(_DWORD *)(v7 + 8) = v8;
        *(_DWORD *)(v7 + 12) = v15;
        __src = v16;
        int v15 = 0;
      }
      unsigned int v14 = 0;
    }
  }
  v9 = (char *)(v7 + 80);
  *(void *)(a1 + 16) = v7 + 80;
  v10 = __src;
  if (__src != v16)
  {
LABEL_19:
    free(v10);
    v9 = *(char **)(a1 + 16);
  }
LABEL_20:
  *(void *)(*((void *)v9 - 10)
            + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) = *(void *)(a2 + 16);
  return 1;
}

void mlir::SimpleAffineExprFlattener::addLocalFloorDivId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v7 != i; v7 += 80)
  {
    while (1)
    {
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)v7
          + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))
          + 8 * *(unsigned int *)(a1 + 40);
      uint64_t v12 = *(unsigned int *)(v7 + 8);
      if (*(void *)v7 + 8 * v12 == v11) {
        break;
      }
      if (v12 >= *(_DWORD *)(v7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12 + 1, 8);
        uint64_t v13 = *(void *)v7;
        uint64_t v12 = *(unsigned int *)(v7 + 8);
      }
      else
      {
        uint64_t v13 = *(void *)v7;
      }
      unsigned int v14 = (void *)(v13 + 8 * ((v11 - v10) >> 3));
      int v15 = (void *)(v13 + 8 * v12);
      *int v15 = *(v15 - 1);
      if (v15 - 1 != v14)
      {
        memmove(v14 + 1, v14, (char *)(v15 - 1) - (char *)v14);
        LODWORD(v12) = *(_DWORD *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 8) = v12 + 1;
      *unsigned int v14 = 0;
      v7 += 80;
      if (v7 == i) {
        goto LABEL_2;
      }
    }
    if (v12 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v12 + 1, 8);
      uint64_t v12 = *(unsigned int *)(v7 + 8);
      uint64_t v10 = *(void *)v7;
    }
    *(void *)(v10 + 8 * v12) = 0;
    ++*(_DWORD *)(v7 + 8);
  }
LABEL_2:
  uint64_t v9 = *(unsigned int *)(a1 + 56);
  if (v9 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, (void *)(a1 + 64), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 56);
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v9) = a5;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a1 + 40);
}

void mlir::SimpleAffineExprFlattener::addLocalIdSemiAffine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v4 != i; v4 += 80)
  {
    while (1)
    {
      uint64_t v7 = *(void *)v4;
      uint64_t v8 = *(void *)v4
         + 8 * (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))
         + 8 * *(unsigned int *)(a1 + 40);
      uint64_t v9 = *(unsigned int *)(v4 + 8);
      if (*(void *)v4 + 8 * v9 == v8) {
        break;
      }
      if (v9 >= *(_DWORD *)(v4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v9 + 1, 8);
        uint64_t v10 = *(void *)v4;
        uint64_t v9 = *(unsigned int *)(v4 + 8);
      }
      else
      {
        uint64_t v10 = *(void *)v4;
      }
      uint64_t v11 = (void *)(v10 + 8 * ((v8 - v7) >> 3));
      uint64_t v12 = (void *)(v10 + 8 * v9);
      *uint64_t v12 = *(v12 - 1);
      if (v12 - 1 != v11)
      {
        memmove(v11 + 1, v11, (char *)(v12 - 1) - (char *)v11);
        LODWORD(v9) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(v4 + 8) = v9 + 1;
      *uint64_t v11 = 0;
      v4 += 80;
      if (v4 == i) {
        goto LABEL_2;
      }
    }
    if (v9 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v4 + 16), v9 + 1, 8);
      uint64_t v9 = *(unsigned int *)(v4 + 8);
      uint64_t v7 = *(void *)v4;
    }
    *(void *)(v7 + 8 * v9) = 0;
    ++*(_DWORD *)(v4 + 8);
  }
LABEL_2:
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, (void *)(a1 + 64), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
  }
  *(void *)(*(void *)(a1 + 48) + 8 * v6) = a2;
  ++*(_DWORD *)(a1 + 56);
  ++*(_DWORD *)(a1 + 40);
}

mlir::MLIRContext **mlir::simplifyAffineExpr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  AffineExprFromFlatForm = a1;
  v146[8] = *MEMORY[0x1E4F143B8];
  v119 = a1;
  if ((mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v119) & 1) == 0)
  {
    AffineExprFromFlatForm = (mlir::MLIRContext **)simplifySemiAffine((uint64_t)AffineExprFromFlatForm, a2, a3);
    v119 = AffineExprFromFlatForm;
  }
  v134 = &unk_1EC9C6D18;
  int v138 = a2;
  int v139 = a3;
  int v140 = 0;
  v141 = v143;
  *(void *)v142 = 0x400000000;
  __p = operator new(0x280uLL);
  v136 = (char *)__p;
  v137 = (char *)__p + 640;
  if (mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v134, (uint64_t)AffineExprFromFlatForm))
  {
    uint64_t v6 = *((void *)v136 - 10);
    uint64_t v7 = *((unsigned int *)v136 - 18);
    if ((mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v119) & 1) != 0
      || AffineExprFromFlatForm != mlir::getAffineExprFromFlatForm(v6, v7, a2, a3, (unint64_t *)v141, v142[0], *AffineExprFromFlatForm))
    {
      if (mlir::AffineExpr::isPureAffine((mlir::AffineExpr *)&v119))
      {
        AffineExprFromFlatForm = mlir::getAffineExprFromFlatForm(v6, v7, a2, a3, (unint64_t *)v141, v142[0], *AffineExprFromFlatForm);
        uint64_t v9 = v136 - 80;
        uint64_t v8 = (char *)*((void *)v136 - 10);
        if (v8 != v136 - 64) {
          free(v8);
        }
        v136 = v9;
        goto LABEL_108;
      }
      uint64_t v10 = (unint64_t *)v141;
      uint64_t v107 = v142[0];
      uint64_t v11 = *AffineExprFromFlatForm;
      v144 = 0;
      v121 = v11;
      v118 = v11;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v11);
      v129 = (mlir::MLIRContext **)mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v121, &v144);
      v127[0] = 0;
      v127[1] = 0;
      int v128 = 0;
      v125[0] = 0;
      v125[1] = 0;
      unsigned int v126 = 0;
      v144 = v146;
      uint64_t v145 = 0x800000000;
      unsigned int v13 = a3 + a2;
      uint64_t v117 = v6;
      uint64_t v110 = v7;
      int v108 = a2;
      unsigned int v109 = a3 + a2;
      if ((int)a3 + (int)a2 <= a2)
      {
        int v15 = 0;
        uint64_t v24 = a2;
      }
      else
      {
        uint64_t v14 = 0;
        int v15 = 0;
        if (a2 <= a3) {
          int v16 = a3;
        }
        else {
          int v16 = a2;
        }
        int v111 = a3;
        int v113 = v16;
        uint64_t v115 = a2;
        int v17 = a3;
        uint64_t v18 = v6 + 8 * a2;
        do
        {
          uint64_t v20 = *(void *)(v18 + 8 * v14);
          if (v20)
          {
            LODWORD(v130) = v14;
            v121 = v118;
            v21 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v118);
            LODWORD(v132) = 7;
            uint64_t v22 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v21, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v121, (unsigned int *)&v132, (unsigned int *)&v130);
            uint64_t v23 = v145;
            if (v145 >= (unint64_t)HIDWORD(v145))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v145 + 1, 8);
              uint64_t v23 = v145;
            }
            unint64_t v19 = v14 | ((unint64_t)(v15 + v113) << 32);
            v144[v23] = v19;
            ++v15;
            LODWORD(v145) = v145 + 1;
            unint64_t v130 = v19;
            v131[0] = v20;
            llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v125, (int *)&v130, v131, (uint64_t)&v121);
            unint64_t v130 = v19;
            v131[0] = v22;
            llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v127, (int *)&v130, v131, (uint64_t)&v121);
          }
          ++v14;
        }
        while (v17 != v14);
        uint64_t v24 = v115;
        uint64_t v6 = v117;
        LODWORD(a2) = v108;
        unsigned int v13 = v109;
        LODWORD(a3) = v111;
      }
      uint64_t v116 = v24;
      unint64_t v25 = ~(v24 + a3) + v7;
      v121 = &v124;
      uint64_t v123 = 4;
      if (v25 < 5)
      {
        if (!v25)
        {
LABEL_26:
          unint64_t v122 = v25;
          uint64_t v27 = v6 + 8 * v13;
          if (v107)
          {
            uint64_t v28 = 0;
            if (a2 <= a3) {
              int v29 = a3;
            }
            else {
              int v29 = a2;
            }
            int v112 = v29;
            uint64_t v30 = 8 * v107;
            uint64_t v114 = 0xFFFFFFFFLL;
            while (1)
            {
              uint64_t v32 = *(void *)(v27 + 8 * v28);
              if (!v32) {
                goto LABEL_34;
              }
              unint64_t v33 = v10[v28];
              uint64_t v34 = *(void *)(v33 + 16);
              int v35 = *(_DWORD *)(v34 + 8);
              if ((v35 & 0xFFFFFFFE) != 6) {
                goto LABEL_34;
              }
              uint64_t v36 = *(void *)(v33 + 24);
              int v37 = *(_DWORD *)(v36 + 8);
              if ((v37 - 6) >= 2) {
                break;
              }
              uint64_t v38 = *(unsigned int *)(v34 + 16);
              uint64_t v39 = v145;
              if (v35 == 6)
              {
                uint64_t v40 = *(unsigned int *)(v36 + 16);
                if (v145 >= (unint64_t)HIDWORD(v145))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v145 + 1, 8);
                  uint64_t v39 = v145;
                }
                unint64_t v41 = v38 | (v40 << 32);
                v144[v39] = v41;
                LODWORD(v145) = v145 + 1;
                unint64_t v132 = v41;
                uint64_t v133 = v32;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v125, (int *)&v132, &v133, (uint64_t)&v130);
                unint64_t v132 = v41;
                uint64_t v133 = v33;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v127, (int *)&v132, &v133, (uint64_t)&v130);
                uint64_t v6 = v117;
                goto LABEL_33;
              }
              if (v145 >= (unint64_t)HIDWORD(v145)) {
                goto LABEL_48;
              }
LABEL_32:
              unint64_t v31 = v38 | ((unint64_t)(v15 + v112) << 32);
              v144[v39] = v31;
              ++v15;
              LODWORD(v145) = v145 + 1;
              unint64_t v132 = v31;
              uint64_t v133 = v32;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v125, (int *)&v132, &v133, (uint64_t)&v130);
              unint64_t v132 = v31;
              uint64_t v133 = v33;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v127, (int *)&v132, &v133, (uint64_t)&v130);
LABEL_33:
              *((unsigned char *)v121 + v28) = 1;
LABEL_34:
              ++v28;
              v30 -= 8;
              if (!v30) {
                goto LABEL_50;
              }
            }
            if (v37 != 5) {
              goto LABEL_34;
            }
            uint64_t v38 = *(unsigned int *)(v34 + 16);
            if (v35 == 6)
            {
              uint64_t v42 = v145;
              if (v145 >= (unint64_t)HIDWORD(v145))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v145 + 1, 8);
                uint64_t v42 = v145;
              }
              uint64_t v43 = v38 | (v114 << 32);
              v144[v42] = v43;
              LODWORD(v145) = v145 + 1;
              unint64_t v132 = v43;
              uint64_t v133 = v32;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v125, (int *)&v132, &v133, (uint64_t)&v130);
              unint64_t v132 = v43;
              uint64_t v133 = v33;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v127, (int *)&v132, &v133, (uint64_t)&v130);
              uint64_t v114 = (v114 - 1);
              uint64_t v6 = v117;
              goto LABEL_33;
            }
            uint64_t v39 = v145;
            if (v145 < (unint64_t)HIDWORD(v145)) {
              goto LABEL_32;
            }
LABEL_48:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v39 + 1, 8);
            uint64_t v39 = v145;
            goto LABEL_32;
          }
          uint64_t v114 = 0xFFFFFFFFLL;
LABEL_50:
          if (v108)
          {
            uint64_t v44 = 0;
            uint64_t v46 = v114;
            uint64_t v45 = v116;
            do
            {
              uint64_t v48 = *(void *)(v6 + 8 * v44);
              if (v48)
              {
                LODWORD(v132) = v44;
                unint64_t v130 = (unint64_t)v118;
                v49 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v118);
                LODWORD(v120) = 6;
                uint64_t v50 = mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(v49, (const char *)llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>, (unint64_t)&v130, (unsigned int *)&v120, (unsigned int *)&v132);
                uint64_t v51 = v145;
                if (v145 >= (unint64_t)HIDWORD(v145))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v145 + 1, 8);
                  uint64_t v51 = v145;
                }
                unint64_t v47 = v44 | (v46 << 32);
                v144[v51] = v47;
                uint64_t v46 = (v46 - 1);
                LODWORD(v145) = v145 + 1;
                unint64_t v132 = v47;
                uint64_t v133 = v48;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v125, (int *)&v132, &v133, (uint64_t)&v130);
                unint64_t v132 = v47;
                uint64_t v133 = v50;
                llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>((uint64_t)v127, (int *)&v132, &v133, (uint64_t)&v130);
                uint64_t v45 = v116;
                uint64_t v6 = v117;
              }
              ++v44;
            }
            while (v45 != v44);
          }
          unint64_t v52 = 126 - 2 * __clz(v145);
          if (v145) {
            uint64_t v53 = v52;
          }
          else {
            uint64_t v53 = 0;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>((uint64_t)v144, (unsigned int *)&v144[v145], (uint64_t)&v130, v53, 1);
          if (!v145)
          {
LABEL_93:
            uint64_t v91 = (v110 - 1);
            if (v109 < v91)
            {
              uint64_t v92 = 0;
              uint64_t v93 = v91 - v109;
              do
              {
                if (*(void *)(v27 + 8 * v92) && !*((unsigned char *)v121 + v92))
                {
                  v94 = *(mlir::MLIRContext **)*v10;
                  unint64_t v130 = *(void *)(v27 + 8 * v92);
                  unint64_t v132 = (unint64_t)v94;
                  v95 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v94);
                  uint64_t v96 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v95, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v132, &v130);
                  uint64_t v97 = mlir::AffineExpr::operator*(v10, v96);
                  v129 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v129, v97);
                }
                ++v92;
                ++v10;
              }
              while (v93 != v92);
            }
            if (*(void *)(v117 + 8 * v110 - 8))
            {
              v98 = *v129;
              unint64_t v130 = *(void *)(v117 + 8 * v110 - 8);
              unint64_t v132 = (unint64_t)v98;
              v99 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v98);
              uint64_t v100 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v99, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v132, &v130);
              v129 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v129, v100);
            }
            if (v121 != &v124) {
              free(v121);
            }
            if (v144 != v146) {
              free(v144);
            }
            llvm::deallocate_buffer(v125[0], (void *)(16 * v126));
          }
          v54 = (char *)v144;
          v55 = (char *)&v144[v145];
          while (1)
          {
            int v68 = *(_DWORD *)v54;
            int v69 = *((_DWORD *)v54 + 1);
            if (!v128) {
              goto LABEL_86;
            }
            unint64_t v70 = ((37 * v69) | ((unint64_t)(37 * v68) << 32))
                + ~((unint64_t)(37 * v69) << 32);
            unint64_t v71 = (v70 ^ (v70 >> 22)) + ~((v70 ^ (v70 >> 22)) << 13);
            unint64_t v72 = (9 * (v71 ^ (v71 >> 8))) ^ ((9 * (v71 ^ (v71 >> 8))) >> 15);
            uint64_t v73 = (v128 - 1) & (((v72 + ~(v72 << 27)) >> 31) ^ (v72 + ~(v72 << 27)));
            v74 = (int *)((char *)v127[0] + 16 * v73);
            int v76 = *v74;
            int v75 = v74[1];
            if (v68 != v76 || v69 != v75) {
              break;
            }
LABEL_77:
            v78 = (mlir::MLIRContext **)*((void *)v127[0] + 2 * v73 + 1);
            v120 = v78;
            unsigned int v79 = v126;
            if (!v126) {
              goto LABEL_69;
            }
LABEL_87:
            unint64_t v84 = ((37 * v69) | ((unint64_t)(37 * v68) << 32))
                + ~((unint64_t)(37 * v69) << 32);
            unint64_t v85 = (v84 ^ (v84 >> 22)) + ~((v84 ^ (v84 >> 22)) << 13);
            unint64_t v86 = (9 * (v85 ^ (v85 >> 8))) ^ ((9 * (v85 ^ (v85 >> 8))) >> 15);
            unsigned int v87 = ((v86 + ~(v86 << 27)) >> 31) ^ (v86 + ~(v86 << 27));
            unsigned int v88 = v79 - 1;
            uint64_t v58 = (v79 - 1) & v87;
            v89 = (int *)((char *)v125[0] + 16 * v58);
            int v61 = *v89;
            int v60 = v89[1];
            if (v68 == v61 && v69 == v60)
            {
LABEL_92:
              unint64_t v63 = *((void *)v125[0] + 2 * v58 + 1);
              goto LABEL_70;
            }
            int v57 = 1;
            while (v61 != -1 || v60 != 0x7FFFFFFF)
            {
              int v56 = v58 + v57++;
              uint64_t v58 = v56 & v88;
              v59 = (int *)((char *)v125[0] + 16 * v58);
              int v61 = *v59;
              int v60 = v59[1];
              if (v68 == v61 && v69 == v60) {
                goto LABEL_92;
              }
            }
LABEL_69:
            unint64_t v63 = 0;
LABEL_70:
            v64 = *v78;
            unint64_t v130 = v63;
            unint64_t v132 = (unint64_t)v64;
            v65 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v64);
            uint64_t v66 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v65, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v132, &v130);
            uint64_t v67 = mlir::AffineExpr::operator*((unint64_t *)&v120, v66);
            v129 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v129, v67);
            v54 += 8;
            if (v54 == v55) {
              goto LABEL_93;
            }
          }
          int v80 = 1;
          while (v76 != -1 || v75 != 0x7FFFFFFF)
          {
            int v81 = v73 + v80++;
            uint64_t v73 = v81 & (v128 - 1);
            v82 = (int *)((char *)v127[0] + 16 * v73);
            int v76 = *v82;
            int v75 = v82[1];
            if (v68 == v76 && v69 == v75) {
              goto LABEL_77;
            }
          }
LABEL_86:
          v78 = 0;
          v120 = 0;
          unsigned int v79 = v126;
          if (!v126) {
            goto LABEL_69;
          }
          goto LABEL_87;
        }
        v26 = &v124;
      }
      else
      {
        unint64_t v122 = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v121, &v124, v25, 1);
        v26 = (uint64_t *)v121;
      }
      bzero(v26, v25);
      goto LABEL_26;
    }
  }
LABEL_108:
  v134 = &unk_1EC9C6D18;
  if (v141 != v143) {
    free(v141);
  }
  v101 = (char *)__p;
  if (__p)
  {
    v102 = v136;
    v103 = __p;
    if (v136 != __p)
    {
      do
      {
        v105 = (char *)*((void *)v102 - 10);
        v102 -= 80;
        v104 = v105;
        if (v102 + 16 != v105) {
          free(v104);
        }
      }
      while (v102 != v101);
      v103 = __p;
    }
    v136 = v101;
    operator delete(v103);
  }
  return AffineExprFromFlatForm;
}

uint64_t simplifySemiAffine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v42[6] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1;
  if (((1 << v3) & 0x1C) != 0)
  {
    uint64_t v10 = simplifySemiAffine(*(void *)(a1 + 16), a2, a3);
    uint64_t v11 = simplifySemiAffine(*(void *)(v6 + 24), a2, a3);
    uint64_t v40 = v42;
    uint64_t v41 = 0x600000000;
    int v35 = (mlir::MLIRContext **)v10;
    getSummandExprs(v10, (uint64_t)&v40);
    unint64_t v12 = v41;
    if (!v41)
    {
LABEL_41:
      BOOL v14 = 0;
LABEL_42:
      if (v40 != v42) {
        free(v40);
      }
      if (v14) {
        goto LABEL_45;
      }
      uint64_t v30 = simplifySemiAffine(*(void *)(v6 + 24), a2, a3);
      if (!v30 || *(_DWORD *)(v30 + 8) != 7)
      {
        int v33 = *(_DWORD *)(v6 + 8);
        uint64_t v40 = v35;
        switch(v33)
        {
          case 0:
LABEL_53:
            uint64_t v9 = mlir::AffineExpr::operator+((unint64_t *)&v40, v11);
            break;
          case 1:
LABEL_54:
            uint64_t v8 = v11;
            return mlir::AffineExpr::operator*((unint64_t *)&v40, v8);
          case 3:
LABEL_58:
            uint64_t v9 = mlir::AffineExpr::floorDiv((mlir::MLIRContext ***)&v40, v11);
            break;
          case 4:
LABEL_59:
            uint64_t v9 = mlir::AffineExpr::ceilDiv((unint64_t *)&v40, v11);
            break;
          default:
LABEL_56:
            uint64_t v8 = v11;
            return mlir::AffineExpr::operator%((unint64_t *)&v40, v8);
        }
        return v9;
      }
      uint64_t v31 = *(unsigned int *)(v30 + 16);
      uint64_t v32 = *(unsigned int *)(v6 + 8);
      if ((isDivisibleBySymbol(*(void *)(v6 + 16), v31, v32) & 1) == 0)
      {
        uint64_t v40 = v35;
        switch((int)v32)
        {
          case 0:
            goto LABEL_53;
          case 1:
            goto LABEL_54;
          case 3:
            goto LABEL_58;
          case 4:
            goto LABEL_59;
          default:
            goto LABEL_56;
        }
      }
      if (v32 != 2) {
        return symbolicDivide((uint64_t)v35, v31, v32);
      }
LABEL_45:
      uint64_t v39 = *(void *)v6;
      uint64_t v40 = 0;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer((mlir::MLIRContext *)v39);
      return mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v39, &v40);
    }
    uint64_t v13 = 0;
    BOOL v14 = 1;
    while (1)
    {
      uint64_t v15 = *((void *)v40 + v13);
      if (v15) {
        BOOL v16 = *(_DWORD *)(v15 + 8) == 1;
      }
      else {
        BOOL v16 = 0;
      }
      if (!v16) {
        goto LABEL_8;
      }
      uint64_t v17 = *(void *)(v15 + 16);
      int v18 = *(_DWORD *)(v17 + 8);
      if (v17) {
        BOOL v19 = v18 == 5;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19 && *(void *)(v17 + 16) == -1)
      {
        uint64_t v17 = *(void *)(v15 + 24);
        if (*(_DWORD *)(v17 + 8) != 2) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(v15 + 24);
        if (v20) {
          BOOL v21 = *(_DWORD *)(v20 + 8) == 5;
        }
        else {
          BOOL v21 = 0;
        }
        if (!v21 || *(void *)(v20 + 16) != -1 || v18 != 2) {
          goto LABEL_8;
        }
      }
      if (*(void *)(v17 + 24) == v11)
      {
        uint64_t v38 = *v35;
        uint64_t v39 = 0;
        uint64_t v22 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v38);
        uint64_t v23 = 0;
        uint64_t v36 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v22, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v38, &v39);
        do
        {
          if (v13 != v23) {
            uint64_t v36 = mlir::AffineExpr::operator+((unint64_t *)&v36, *((void *)v40 + v23));
          }
          ++v23;
        }
        while (v12 != v23);
        int v37 = *(mlir::MLIRContext ***)(v17 + 16);
        uint64_t v38 = *v37;
        uint64_t v39 = -1;
        uint64_t v24 = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v38);
        uint64_t v25 = mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(v24, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v38, &v39);
        uint64_t v26 = mlir::AffineExpr::operator*((unint64_t *)&v37, v25);
        uint64_t v36 = mlir::AffineExpr::operator+((unint64_t *)&v36, v26);
        uint64_t v27 = mlir::simplifyAffineExpr(v36, a2, a3);
        BOOL v28 = v27 && *(_DWORD *)(v27 + 8) == 5;
        if (v28 && !*(void *)(v27 + 16)) {
          goto LABEL_42;
        }
      }
LABEL_8:
      BOOL v14 = ++v13 < v12;
      if (v13 == v12) {
        goto LABEL_41;
      }
    }
  }
  if (((1 << v3) & 0xE0) == 0)
  {
    uint64_t v7 = (void *)simplifySemiAffine(*(void *)(a1 + 16), a2, a3);
    uint64_t v8 = simplifySemiAffine(*(void *)(v6 + 24), a2, a3);
    uint64_t v40 = v7;
    if (v3 == 1) {
      return mlir::AffineExpr::operator*((unint64_t *)&v40, v8);
    }
    if (v3) {
      return mlir::AffineExpr::operator%((unint64_t *)&v40, v8);
    }
    return mlir::AffineExpr::operator+((unint64_t *)&v40, v8);
  }
  return v6;
}

uint64_t mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 8))
  {
    case 1:
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(a1, a2)) {
        return 0;
      }
      return mlir::SimpleAffineExprFlattener::visitMulExpr(a1, a2);
    case 2:
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(a1, a2)) {
        return 0;
      }
      return mlir::SimpleAffineExprFlattener::visitModExpr((_DWORD *)a1, a2);
    case 3:
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(a1, a2)) {
        return 0;
      }
      BOOL v16 = (_DWORD *)a1;
      uint64_t v17 = a2;
      int v18 = 0;
      return mlir::SimpleAffineExprFlattener::visitDivExpr(v16, v17, v18);
    case 4:
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(a1, a2)) {
        return 0;
      }
      BOOL v16 = (_DWORD *)a1;
      uint64_t v17 = a2;
      int v18 = 1;
      return mlir::SimpleAffineExprFlattener::visitDivExpr(v16, v17, v18);
    case 5:
      return mlir::SimpleAffineExprFlattener::visitConstantExpr(a1, a2);
    case 6:
      return mlir::SimpleAffineExprFlattener::visitDimExpr(a1, a2);
    case 7:
      return mlir::SimpleAffineExprFlattener::visitSymbolExpr(a1, a2);
    default:
      if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(a1, a2)) {
        return 0;
      }
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v6 = v4 - 80;
      v5 = *(int64x2_t **)(v4 - 80);
      uint64_t v7 = *(unsigned int *)(v4 - 72);
      if (!v7) {
        goto LABEL_43;
      }
      unint64_t v8 = *(void *)(v4 - 160);
      if (v7 < 6
        || (v8 < (unint64_t)v5 + 8 * v7 ? (BOOL v9 = (unint64_t)v5 >= v8 + 8 * v7) : (BOOL v9 = 1), !v9))
      {
        uint64_t v10 = 0;
LABEL_41:
        uint64_t v19 = v7 - v10;
        uint64_t v20 = v10;
        BOOL v21 = (void *)(v8 + v20 * 8);
        uint64_t v22 = &v5->i64[v20];
        do
        {
          uint64_t v23 = *v22++;
          *v21++ += v23;
          --v19;
        }
        while (v19);
        goto LABEL_43;
      }
      uint64_t v10 = v7 & 0xFFFFFFFC;
      uint64_t v11 = v5 + 1;
      unint64_t v12 = (int64x2_t *)(v8 + 16);
      uint64_t v13 = v10;
      do
      {
        int64x2_t v14 = vaddq_s64(*v12, *v11);
        v12[-1] = vaddq_s64(v12[-1], v11[-1]);
        *unint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != v7) {
        goto LABEL_41;
      }
LABEL_43:
      if (v5 != (int64x2_t *)(v4 - 64)) {
        free(v5);
      }
      *(void *)(a1 + 16) = v6;
      return 1;
  }
}

void mlir::SimpleAffineExprFlattener::~SimpleAffineExprFlattener(mlir::SimpleAffineExprFlattener *this)
{
  *(void *)this = &unk_1EC9C6D18;
  v2 = (char *)*((void *)this + 6);
  if (v2 != (char *)this + 64) {
    free(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *(void **)(v4 - 80);
        v4 -= 80;
        uint64_t v6 = v7;
        if ((void *)(v4 + 16) != v7) {
          free(v6);
        }
      }
      while (v4 != v3);
      v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EC9C6D18;
  v2 = (char *)*((void *)this + 6);
  if (v2 != (char *)this + 64) {
    free(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *(void **)(v4 - 80);
        v4 -= 80;
        uint64_t v6 = v7;
        if ((void *)(v4 + 16) != v7) {
          free(v6);
        }
      }
      while (v4 != v3);
      v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }

  operator delete(this);
}

unint64_t mlir::getBoundForAffineExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  if (!a1 || (int v14 = *(_DWORD *)(a1 + 8), v14 > 4))
  {
LABEL_32:
    int v56 = &unk_1EC9C6D18;
    int v60 = a2;
    int v61 = a3;
    int v62 = 0;
    unint64_t v63 = v65;
    uint64_t v64 = 0x400000000;
    __p = operator new(0x280uLL);
    uint64_t v58 = (char *)__p;
    v59 = (char *)__p + 640;
    if (!mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v56, a1)|| v62)
    {
LABEL_34:
      LOBYTE(v17) = 0;
      unint64_t v19 = 0;
      int v56 = &unk_1EC9C6D18;
      int v37 = v63;
      if (v63 == v65) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    uint64_t v44 = (a3 + a2);
    if (!(a3 + a2))
    {
      uint64_t v46 = 0;
LABEL_64:
      uint64_t v17 = *(void *)(*((void *)v58 - 10) + 8 * *((unsigned int *)v58 - 18) - 8) + v46;
      unint64_t v19 = v17 & 0xFFFFFFFFFFFFFF00;
      int v56 = &unk_1EC9C6D18;
      int v37 = v63;
      if (v63 == v65) {
        goto LABEL_36;
      }
LABEL_35:
      free(v37);
LABEL_36:
      uint64_t v38 = (char *)__p;
      if (__p)
      {
        uint64_t v39 = v58;
        uint64_t v40 = __p;
        if (v58 != __p)
        {
          do
          {
            uint64_t v42 = (char *)*((void *)v39 - 10);
            v39 -= 80;
            uint64_t v41 = v42;
            if (v39 + 16 != v42) {
              free(v41);
            }
          }
          while (v39 != v38);
          uint64_t v40 = __p;
        }
        uint64_t v58 = v38;
        operator delete(v40);
      }
      return v19 & 0xFFFFFFFFFFFFFF00 | v17;
    }
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    if (a8) {
      uint64_t v47 = a4;
    }
    else {
      uint64_t v47 = a6;
    }
    if (a8) {
      uint64_t v48 = a6;
    }
    else {
      uint64_t v48 = a4;
    }
    v49 = (unsigned char *)(v48 + 8);
    uint64_t v50 = (uint64_t *)*((void *)v58 - 10);
    while (1)
    {
      uint64_t v52 = *v50++;
      uint64_t v51 = v52;
      if (v52 < 1)
      {
        if ((v51 & 0x8000000000000000) == 0) {
          goto LABEL_54;
        }
        uint64_t v53 = (void *)v47;
        if (!*(unsigned char *)(v47 + 8)) {
          goto LABEL_34;
        }
      }
      else
      {
        if (!*v49) {
          goto LABEL_34;
        }
        uint64_t v53 = (void *)(v48 + 16 * v45);
      }
      v46 += *v53 * v51;
LABEL_54:
      ++v45;
      v47 += 16;
      v49 += 16;
      if (!--v44) {
        goto LABEL_64;
      }
    }
  }
  if (v14 == 2)
  {
    uint64_t v27 = *(void *)(a1 + 24);
    if (v27)
    {
      if (*(_DWORD *)(v27 + 8) == 5)
      {
        uint64_t v28 = *(void *)(v27 + 16);
        if (v28 >= 1)
        {
          uint64_t BoundForAffineExpr = mlir::getBoundForAffineExpr(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, 0);
          uint64_t v30 = a6;
          char v32 = v31;
          uint64_t v33 = mlir::getBoundForAffineExpr(*(void *)(a1 + 16), a2, a3, a4, a5, v30, a7, a8);
          if (v34
            && v32
            && ((unint64_t v35 = (unint64_t)v28 >> 63, BoundForAffineExpr)
             && (unint64_t)BoundForAffineExpr >> 63 != v35
              ? (uint64_t v36 = ~(~BoundForAffineExpr / v28))
              : (uint64_t v36 = BoundForAffineExpr / v28),
                v33 && (unint64_t)v33 >> 63 != v35 ? (uint64_t v54 = ~(~v33 / v28)) : (uint64_t v54 = v33 / v28),
                v36 == v54))
          {
            if (a8) {
              uint64_t v55 = v33;
            }
            else {
              uint64_t v55 = BoundForAffineExpr;
            }
            uint64_t v17 = (v28 & ((v55 % v28) >> 63)) + v55 % v28;
          }
          else if (a8)
          {
            uint64_t v17 = v28 - 1;
          }
          else
          {
            uint64_t v17 = 0;
          }
          goto LABEL_80;
        }
      }
    }
    goto LABEL_32;
  }
  if (v14 != 4)
  {
    if (v14 == 3)
    {
      LOBYTE(v17) = 0;
      uint64_t v18 = *(void *)(a1 + 24);
      if (v18)
      {
        unint64_t v19 = 0;
        if (*(_DWORD *)(v18 + 8) == 5)
        {
          if (*(uint64_t *)(v18 + 16) >= 1)
          {
            uint64_t v20 = mlir::getBoundForAffineExpr(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
            if (v21)
            {
              uint64_t v22 = *(void *)(v18 + 16);
              uint64_t v23 = -1;
              if (v22 < 0) {
                uint64_t v23 = 1;
              }
              if (v20 && (unint64_t)v20 >> 63 != (unint64_t)v22 >> 63)
              {
                uint64_t v17 = ~((v23 - v20) / v22);
LABEL_80:
                unint64_t v19 = v17 & 0xFFFFFFFFFFFFFF00;
                return v19 & 0xFFFFFFFFFFFFFF00 | v17;
              }
LABEL_66:
              uint64_t v17 = v20 / v22;
              goto LABEL_80;
            }
          }
LABEL_61:
          LOBYTE(v17) = 0;
          unint64_t v19 = 0;
          return v19 & 0xFFFFFFFFFFFFFF00 | v17;
        }
        return v19 & 0xFFFFFFFFFFFFFF00 | v17;
      }
LABEL_62:
      unint64_t v19 = 0;
      return v19 & 0xFFFFFFFFFFFFFF00 | v17;
    }
    goto LABEL_32;
  }
  LOBYTE(v17) = 0;
  uint64_t v24 = *(void *)(a1 + 24);
  if (!v24) {
    goto LABEL_62;
  }
  unint64_t v19 = 0;
  if (*(_DWORD *)(v24 + 8) == 5)
  {
    if (*(uint64_t *)(v24 + 16) >= 1)
    {
      uint64_t v20 = mlir::getBoundForAffineExpr(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
      if (v25)
      {
        uint64_t v22 = *(void *)(v24 + 16);
        uint64_t v26 = v20 - 1;
        if (v20 && v20 < 1 != v22 > 0)
        {
          if (v22 <= 0) {
            uint64_t v26 = v20 + 1;
          }
          uint64_t v17 = v26 / v22 + 1;
          goto LABEL_80;
        }
        goto LABEL_66;
      }
    }
    goto LABEL_61;
  }
  return v19 & 0xFFFFFFFFFFFFFF00 | v17;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, unsigned int *a4, unsigned int *a5)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    char v25 = a5;
    uint64_t v26 = a1;
    unint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v22 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v22;
    a3 = v23;
    a4 = v24;
    a5 = v25;
    int v14 = v13;
    a1 = v26;
    if (v14)
    {
      uint64_t v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineDimExprStorage]";
      unint64_t v31 = 84;
      unint64_t v15 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
      if (v31 >= v15) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = v31;
      }
      uint64_t v17 = &v30[v16];
      unint64_t v18 = v31 - v16;
      if (v31 - v16 >= 0x12) {
        uint64_t v19 = 18;
      }
      else {
        uint64_t v19 = v31 - v16;
      }
      unint64_t v20 = v18 - v19;
      if (v20 >= v20 - 1) {
        uint64_t v21 = v20 - 1;
      }
      else {
        uint64_t v21 = v20;
      }
      mlir::detail::TypeIDResolver<mlir::detail::AffineDimExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v22;
      a3 = v23;
      a4 = v24;
      a5 = v25;
      a1 = v26;
    }
  }
  uint64_t v6 = *(void *)(v5 + 3696);
  uint64_t v30 = a2;
  unint64_t v31 = a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *a5;
  uint64_t v29 = v7 | (v8 << 32);
  unint64_t v9 = ((37 * v8) | ((unint64_t)(37 * v7) << 32))
     + ~((unint64_t)(37 * v8) << 32);
  unint64_t v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  unint64_t v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  uint64_t v28 = &v29;
  v27[0] = &v29;
  v27[1] = &v30;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~(v11 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v28, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v27);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **(_DWORD **)a1 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(*(void *)a1 + 4);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineDimExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineDimExprStorage,unsigned int,unsigned int &>(llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>,mlir::TypeID,unsigned int,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  int v11 = v4[1];
  *(_DWORD *)(v10 + 8) = *v4;
  *(_DWORD *)(v10 + 16) = v11;
  uint64_t v12 = *(void *)(a1 + 8);
  if (*(void *)v12) {
    (*(void (**)(void, unint64_t))v12)(*(void *)(v12 + 8), v10);
  }
  return v10;
}

void *llvm::function_ref<void ()(mlir::detail::AffineDimExprStorage *)>::callback_fn<getAffineDimOrSymbol(mlir::AffineExprKind,unsigned int,mlir::MLIRContext *)::$_0>(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t isDivisibleBySymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (2)
  {
    uint64_t result = 0;
    switch(*(_DWORD *)(a1 + 8))
    {
      case 1:
        if ((isDivisibleBySymbol(*(void *)(a1 + 16), a2, a3) & 1) == 0) {
          goto LABEL_3;
        }
        return 1;
      case 2:
        uint64_t result = isDivisibleBySymbol(*(void *)(a1 + 16), a2, 2);
        if (result)
        {
          a3 = 2;
          a1 = *(void *)(a1 + 24);
          continue;
        }
        return result;
      case 3:
      case 4:
        if (*(_DWORD *)(a1 + 8) == a3)
        {
          a1 = *(void *)(a1 + 16);
          continue;
        }
        return 0;
      case 5:
        return *(void *)(a1 + 16) == 0;
      case 6:
        return result;
      case 7:
        return *(_DWORD *)(a1 + 16) == a2;
      default:
        uint64_t result = isDivisibleBySymbol(*(void *)(a1 + 16), a2, a3);
        if (result)
        {
LABEL_3:
          a1 = *(void *)(a1 + 24);
          continue;
        }
        return result;
    }
  }
}

uint64_t symbolicDivide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t result = 0;
  switch(v4)
  {
    case 1:
      uint64_t v12 = *(mlir::MLIRContext ***)(a1 + 16);
      if (isDivisibleBySymbol((uint64_t)v12, a2, a3))
      {
        uint64_t v18 = symbolicDivide(v12, a2, a3);
        uint64_t v13 = *(void *)(a1 + 24);
      }
      else
      {
        uint64_t v18 = (uint64_t)v12;
        uint64_t v13 = symbolicDivide(*(void *)(a1 + 24), a2, a3);
      }
      return mlir::AffineExpr::operator*((unint64_t *)&v18, v13);
    case 2:
      int v14 = (mlir::MLIRContext **)symbolicDivide(*(void *)(a1 + 16), a2, 2);
      uint64_t v9 = symbolicDivide(*(void *)(a1 + 24), a2, *(unsigned int *)(a1 + 8));
      uint64_t v18 = (uint64_t)v14;
      return mlir::AffineExpr::operator%((unint64_t *)&v18, v9);
    case 3:
    case 4:
      uint64_t v8 = (mlir::MLIRContext **)symbolicDivide(*(void *)(a1 + 16), a2, v4);
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v18 = (uint64_t)v8;
      if (v4 == 4) {
        return mlir::AffineExpr::ceilDiv((unint64_t *)&v18, v9);
      }
      if (v4 == 3) {
        return mlir::AffineExpr::floorDiv((mlir::MLIRContext ***)&v18, v9);
      }
      return mlir::AffineExpr::operator%((unint64_t *)&v18, v9);
    case 5:
      if (*(void *)(a1 + 16)) {
        return 0;
      }
      unint64_t v15 = *(mlir::MLIRContext **)a1;
      uint64_t v18 = 0;
LABEL_17:
      uint64_t v17 = v15;
      AffineUniquer = (unsigned __int8 **)mlir::MLIRContext::getAffineUniquer(v15);
      return mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(AffineUniquer, (const char *)llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>, (unint64_t)&v17, &v18);
    case 6:
      return result;
    case 7:
      unint64_t v15 = *(mlir::MLIRContext **)a1;
      uint64_t v18 = 1;
      goto LABEL_17;
    default:
      unint64_t v10 = (mlir::MLIRContext **)symbolicDivide(*(void *)(a1 + 16), a2, a3);
      uint64_t v11 = symbolicDivide(*(void *)(a1 + 24), a2, a3);
      uint64_t v18 = (uint64_t)v10;
      return mlir::AffineExpr::operator+((unint64_t *)&v18, v11);
  }
}

void getSummandExprs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 && !*(_DWORD *)(a1 + 8))
  {
    do
    {
      getSummandExprs(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 24);
      if (v3) {
        BOOL v4 = *(_DWORD *)(v3 + 8) == 0;
      }
      else {
        BOOL v4 = 0;
      }
    }
    while (v4);
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  *(void *)(*(void *)a2 + 8 * v5) = v3;
  ++*(_DWORD *)(a2 + 8);
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::try_emplace<long long>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a1;
    int v10 = *a2;
    int v11 = a2[1];
    unint64_t v12 = ((37 * v11) | ((unint64_t)(37 * *a2) << 32))
        + ~((unint64_t)(37 * v11) << 32);
    unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
    unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
    unsigned int v15 = (v8 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
    uint64_t result = (char *)(*(void *)a1 + 16 * v15);
    int v18 = *(_DWORD *)result;
    int v17 = *((_DWORD *)result + 1);
    if (v10 == *(_DWORD *)result && v11 == v17)
    {
LABEL_7:
      *(void *)a4 = result;
      *(void *)(a4 + 8) = v9 + 16 * v8;
      *(unsigned char *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v22 = 0;
    int v23 = 1;
    while (v18 != -1 || v17 != 0x7FFFFFFF)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v17 == 0x80000000;
      }
      if (v24 && v18 == -2) {
        uint64_t v22 = result;
      }
      unsigned int v26 = v15 + v23++;
      unsigned int v15 = v26 & (v8 - 1);
      uint64_t result = (char *)(v9 + 16 * v15);
      int v18 = *(_DWORD *)result;
      int v17 = *((_DWORD *)result + 1);
      if (v10 == *(_DWORD *)result && v11 == v17) {
        goto LABEL_7;
      }
    }
    if (v22) {
      unint64_t v20 = v22;
    }
    else {
      unint64_t v20 = result;
    }
  }
  else
  {
    unint64_t v20 = 0;
  }
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::InsertIntoBucket<std::pair<unsigned int,int>,long long>(a1, v20, a2, a3);
  uint64_t v21 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v21;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::InsertIntoBucket<std::pair<unsigned int,int>,long long>(uint64_t a1, char *a2, _DWORD *a3, void *a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v11 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3) {
      goto LABEL_3;
    }
    int v11 = *(_DWORD *)(a1 + 16);
  }
  unint64_t v12 = *(int **)a1;
  unint64_t v13 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  unint64_t v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
  int v15 = ((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8);
  if ((v15 + 1) > 0x40) {
    unsigned int v16 = v15 + 1;
  }
  else {
    unsigned int v16 = 64;
  }
  *(_DWORD *)(a1 + 16) = v16;
  buffer = llvm::allocate_buffer(16 * v16, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v12)
  {
    int v18 = (char *)(16 * v8);
    llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::moveFromOldBuckets(a1, v12, (int *)&v18[(void)v12]);
    llvm::deallocate_buffer((llvm *)v12, v18);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    unint64_t v20 = buffer;
    if (((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_48;
    }
    uint64_t v21 = ((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unint64_t v20 = &buffer[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v22 = buffer + 2;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = 0x7FFFFFFFFFFFFFFFLL;
      *uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_48:
      do
      {
        *unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        v20 += 2;
      }
      while (v20 != &buffer[2 * v19]);
    }
    int v24 = a3[1];
    unint64_t v25 = ((37 * v24) | ((unint64_t)(37 * *a3) << 32))
        + ~((unint64_t)(37 * v24) << 32);
    unint64_t v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
    unint64_t v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
    int v28 = v19 - 1;
    unsigned int v29 = v28 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~(v27 << 27)));
    a2 = (char *)&buffer[2 * v29];
    int v30 = *(_DWORD *)a2;
    int v31 = *((_DWORD *)a2 + 1);
    if (*a3 != *(_DWORD *)a2 || v24 != v31)
    {
      uint64_t v33 = 0;
      int v34 = 1;
      while (v30 != -1 || v31 != 0x7FFFFFFF)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v31 == 0x80000000;
        }
        if (v35 && v30 == -2) {
          uint64_t v33 = a2;
        }
        unsigned int v37 = v29 + v34++;
        unsigned int v29 = v37 & v28;
        a2 = (char *)&buffer[2 * v29];
        int v30 = *(_DWORD *)a2;
        int v31 = *((_DWORD *)a2 + 1);
        if (*a3 == *(_DWORD *)a2 && v24 == v31) {
          goto LABEL_3;
        }
      }
      if (v33) {
        a2 = v33;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1 || *((_DWORD *)a2 + 1) != 0x7FFFFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)a2 = *a3;
  *((_DWORD *)a2 + 1) = a3[1];
  *((void *)a2 + 1) = *a4;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>,std::pair<unsigned int,int>,long long,llvm::DenseMapInfo<std::pair<unsigned int,int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,int>,long long>>::moveFromOldBuckets(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    BOOL v4 = *(void **)result;
    uint64_t v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v8 = &v4[2 * v7];
      uint64_t v9 = v4 + 2;
      uint64_t v10 = v7;
      do
      {
        *(v9 - 2) = 0x7FFFFFFFFFFFFFFFLL;
        void *v9 = 0x7FFFFFFFFFFFFFFFLL;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v8 = *(void **)result;
    }
    int v11 = &v4[2 * v3];
    do
    {
      *uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_10:
  while (a2 != a3)
  {
    int v22 = *a2;
    int v23 = a2[1];
    if ((*a2 != -1 || v23 != 0x7FFFFFFF) && (v22 != -2 || v23 != 0x80000000))
    {
      unint64_t v26 = ((37 * v23) | ((unint64_t)(37 * v22) << 32))
          + ~((unint64_t)(37 * v23) << 32);
      unint64_t v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
      unint64_t v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
      int v29 = ((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~(v28 << 27));
      int v30 = *(_DWORD *)(result + 16) - 1;
      unsigned int v17 = v30 & v29;
      uint64_t v18 = *(void *)result + 16 * v17;
      int v19 = *(_DWORD *)v18;
      int v20 = *(_DWORD *)(v18 + 4);
      if (v22 != *(_DWORD *)v18 || v23 != v20)
      {
        uint64_t v14 = 0;
        int v16 = 1;
        while (v19 != -1 || v20 != 0x7FFFFFFF)
        {
          if (v14) {
            BOOL v12 = 0;
          }
          else {
            BOOL v12 = v20 == 0x80000000;
          }
          if (v12 && v19 == -2) {
            uint64_t v14 = v18;
          }
          unsigned int v15 = v17 + v16++;
          unsigned int v17 = v15 & v30;
          uint64_t v18 = *(void *)result + 16 * (v15 & v30);
          int v19 = *(_DWORD *)v18;
          int v20 = *(_DWORD *)(v18 + 4);
          if (v22 == *(_DWORD *)v18 && v23 == v20) {
            goto LABEL_29;
          }
        }
        if (v14) {
          uint64_t v18 = v14;
        }
      }
LABEL_29:
      *(_DWORD *)uint64_t v18 = v22;
      *(_DWORD *)(v18 + 4) = a2[1];
      *(void *)(v18 + 8) = *((void *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  int v11 = a2 - 2;
  BOOL v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v67 = a5;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v26 = *(a2 - 2);
          unsigned int v27 = *v10;
          if (v26 < *v10 || v27 >= v26 && (int)*(a2 - 1) < (int)v10[1])
          {
            unsigned int *v10 = v26;
            *(a2 - 2) = v27;
            unsigned int v28 = v10[1];
            v10[1] = *(a2 - 1);
            *(a2 - 1) = v28;
          }
          return result;
        case 3uLL:
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10, v10 + 2, v11);
        case 4uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10, v10 + 2, v10 + 4);
          unsigned int v29 = *(a2 - 2);
          unsigned int v30 = v10[4];
          if (v29 >= v30 && (v30 < v29 || (int)*(a2 - 1) >= (int)v10[5])) {
            return result;
          }
          v10[4] = v29;
          *(a2 - 2) = v30;
          unsigned int v31 = v10[5];
          v10[5] = *(a2 - 1);
          *(a2 - 1) = v31;
          unsigned int v32 = v10[4];
          unsigned int v33 = v10[2];
          if (v32 >= v33)
          {
            if (v33 < v32) {
              return result;
            }
            signed int v35 = v10[5];
            signed int v34 = v10[3];
            if (v35 >= v34) {
              return result;
            }
          }
          else
          {
            signed int v34 = v10[3];
            signed int v35 = v10[5];
          }
          v10[2] = v32;
          v10[3] = v35;
          v10[4] = v33;
          v10[5] = v34;
          unsigned int v36 = *v10;
          if (v32 >= *v10)
          {
            if (v36 < v32) {
              return result;
            }
            signed int v37 = v10[1];
            if (v35 >= v37) {
              return result;
            }
          }
          else
          {
            signed int v37 = v10[1];
          }
          unsigned int *v10 = v32;
          v10[1] = v35;
          v10[2] = v36;
          v10[3] = v37;
          return result;
        case 5uLL:
          return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10, v10 + 2, v10 + 4, v10 + 6, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v54 = (v15 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        int v56 = &v10[2 * v54];
        do
        {
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>((uint64_t)v10, a3, v14 >> 3, v56);
          v56 -= 2;
          --v55;
        }
        while (v55);
        unint64_t v57 = (unint64_t)v14 >> 3;
        do
        {
          uint64_t result = (uint64_t)std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<unsigned int,int> *>(v10, (uint64_t)a2, a3, v57);
          a2 -= 2;
        }
        while (v57-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    uint64_t v18 = &v10[2 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10, v18, v11);
      int v19 = v11;
      int v20 = &v10[2 * v17];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10 + 2, v20 - 2, a2 - 4);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10 + 4, &v10[2 * v17 + 2], a2 - 6);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v20 - 2, v18, &v10[2 * v17 + 2]);
      uint64_t v21 = *(void *)v10;
      *(void *)uint64_t v10 = *(void *)v20;
      *(void *)int v20 = v21;
      int v11 = v19;
      a5 = v67;
      if (v67) {
        goto LABEL_15;
      }
    }
    unsigned int v22 = *(v10 - 2);
    if (v22 >= *v10 && (*v10 < v22 || (int)*(v10 - 1) >= (int)v10[1]))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(v10, a2);
      BOOL v12 = (unsigned int *)result;
      goto LABEL_20;
    }
LABEL_15:
    int v23 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(v10, a2);
    if ((v24 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v10, v23);
    BOOL v12 = v23 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(v23 + 2, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v25)
    {
LABEL_18:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *,false>(v10, v23, a3, -v16, a5 & 1);
      BOOL v12 = v23 + 2;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  uint64_t v38 = v10 + 2;
  BOOL v40 = v10 == a2 || v38 == a2;
  if ((a5 & 1) == 0)
  {
    if (!v40)
    {
      v59 = v10 + 1;
      do
      {
        int v60 = v10;
        uint64_t v10 = v38;
        unsigned int v61 = v60[2];
        unsigned int v62 = *v60;
        if (v61 < *v60 || v62 >= v61 && (int)v60[3] < (int)v60[1])
        {
          unsigned int v63 = *v10;
          signed int v64 = v10[1];
          for (uint64_t i = (int *)v59; ; i -= 2)
          {
            int v66 = *i;
            i[1] = v62;
            i[2] = v66;
            unsigned int v62 = *(i - 3);
            if (v62 <= v63 && (v62 < v63 || *(i - 2) <= v64)) {
              break;
            }
          }
          *(i - 1) = v63;
          *uint64_t i = v64;
        }
        uint64_t v38 = v10 + 2;
        v59 += 2;
      }
      while (v10 + 2 != a2);
    }
    return result;
  }
  if (v40) {
    return result;
  }
  uint64_t v41 = 0;
  uint64_t v42 = v10;
  while (2)
  {
    uint64_t v43 = v42;
    uint64_t v42 = v38;
    unsigned int v44 = v43[2];
    unsigned int v45 = *v43;
    if (v44 >= *v43 && (v45 < v44 || (int)v43[3] >= (int)v43[1])) {
      goto LABEL_47;
    }
    unsigned int v47 = v43[2];
    signed int v46 = v43[3];
    unsigned int v48 = v43[1];
    v43[2] = v45;
    v42[1] = v48;
    v49 = v10;
    if (v43 == v10) {
      goto LABEL_46;
    }
    uint64_t v50 = v41;
    while (2)
    {
      unsigned int v53 = *(unsigned int *)((char *)v10 + v50 - 8);
      if (v53 > v47)
      {
        signed int v51 = *(unsigned int *)((char *)v10 + v50 - 4);
LABEL_53:
        v43 -= 2;
        uint64_t v52 = (unsigned int *)((char *)v10 + v50);
        *uint64_t v52 = v53;
        v52[1] = v51;
        v50 -= 8;
        if (!v50)
        {
          v49 = v10;
          goto LABEL_46;
        }
        continue;
      }
      break;
    }
    if (v53 < v47)
    {
      v49 = (unsigned int *)((char *)v10 + v50);
      goto LABEL_46;
    }
    signed int v51 = *(unsigned int *)((char *)v10 + v50 - 4);
    if (v51 > v46) {
      goto LABEL_53;
    }
    v49 = v43;
LABEL_46:
    unsigned int *v49 = v47;
    v49[1] = v46;
LABEL_47:
    uint64_t v38 = v42 + 2;
    v41 += 8;
    if (v42 + 2 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || (int)a2[1] >= (int)a1[1]))
  {
    unsigned int v9 = *a3;
    if (*a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < v9) {
      return 0;
    }
    if ((int)a3[1] < (int)a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      int v11 = (int *)(a2 + 1);
      unsigned int v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      unsigned int v12 = *a2;
      unsigned int v13 = *a1;
      if (*a2 < *a1) {
        goto LABEL_8;
      }
      if (v13 < v12) {
        return 1;
      }
      if (*v11 < (int)a1[1])
      {
LABEL_8:
        *a1 = v12;
        uint64_t v14 = (int *)(a1 + 1);
        *a2 = v13;
        int v15 = *v14;
        *uint64_t v14 = *v11;
        *int v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unsigned int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && (int)a3[1] < (int)a2[1])
    {
      *a1 = v5;
      char v6 = (int *)(a1 + 1);
      *a3 = v4;
      uint64_t v7 = (int *)(a3 + 1);
      uint64_t v8 = 1;
LABEL_13:
      int v20 = *v6;
      *char v6 = *v7;
      *uint64_t v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    int v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    unsigned int v18 = *a3;
    unsigned int v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      uint64_t v7 = (int *)(a3 + 1);
      uint64_t v8 = 2;
      char v6 = (int *)(a2 + 1);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if ((int)a3[1] < v17) {
        goto LABEL_12;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  int v2 = a1[1];
  unsigned int v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || (int)*(a2 - 1) <= v2))
  {
    for (uint64_t i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || (int)i[1] <= v2); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unsigned int v7 = i[2];
      i += 2;
      unsigned int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || (int)i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && (int)a2[1] > v2; a2 -= 2)
    {
      unsigned int v8 = *(a2 - 2);
      unsigned int v4 = v8;
    }
  }
  if (i < a2)
  {
    unsigned int v9 = *i;
    unsigned int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unsigned int v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unsigned int v12 = i[2];
        i += 2;
        unsigned int v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || (int)i[1] <= v2));
      do
      {
        do
        {
          unsigned int v13 = *(a2 - 2);
          a2 -= 2;
          unsigned int v10 = v13;
          BOOL v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && (int)a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  int v4 = a1[1];
  while (1)
  {
    unsigned int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || (int)a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      unsigned int v8 = *(a2 - 2);
      a2 -= 2;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || (int)a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unsigned int v10 = *(a2 - 2);
        a2 -= 2;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while ((int)a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unsigned int v13 = (unsigned int *)v6;
  }
  else
  {
    unsigned int v12 = *a2;
    unsigned int v13 = (unsigned int *)v6;
    BOOL v14 = a2;
    do
    {
      *unsigned int v13 = v12;
      *BOOL v14 = v5;
      unsigned int v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unsigned int v16 = v13[2];
          v13 += 2;
          unsigned int v5 = v16;
          BOOL v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && (int)v13[1] < v4);
      do
      {
        unsigned int v18 = *(v14 - 2);
        v14 -= 2;
        unsigned int v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || (int)v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v18 = *(a2 - 2);
      unsigned int v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && (int)*(a2 - 1) < (int)a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        unsigned int v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v21 = *(a2 - 2);
      unsigned int v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || (int)*(a2 - 1) >= (int)a1[5])) {
        return 1;
      }
      a1[4] = v21;
      *(a2 - 2) = v22;
      unsigned int v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      unsigned int v24 = a1[4];
      unsigned int v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24) {
          return 1;
        }
        signed int v27 = a1[5];
        signed int v26 = a1[3];
        if (v27 >= v26) {
          return 1;
        }
      }
      else
      {
        signed int v26 = a1[3];
        signed int v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      unsigned int v28 = *a1;
      if (v24 < *a1)
      {
        signed int v29 = a1[1];
LABEL_43:
        *a1 = v24;
        a1[1] = v27;
        BOOL result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        signed int v29 = a1[1];
        if (v27 < v29) {
          goto LABEL_43;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v6 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v7 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        unsigned int v11 = *v6;
        if (*v7 >= *v6 && (v11 < *v7 || (int)v7[1] >= (int)v6[1])) {
          goto LABEL_7;
        }
        unsigned int v12 = *v7;
        signed int v13 = v7[1];
        *unsigned int v7 = v11;
        v7[1] = v6[1];
        unsigned int v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v14 = v8;
        while (2)
        {
          unsigned int v16 = (char *)a1 + v14;
          unsigned int v17 = *(unsigned int *)((char *)a1 + v14 + 8);
          if (v17 > v12)
          {
            signed int v15 = *((_DWORD *)v16 + 3);
LABEL_12:
            v6 -= 2;
            *((_DWORD *)v16 + 4) = v17;
            *(unsigned int *)((char *)a1 + v14 + 20) = v15;
            v14 -= 8;
            if (v14 == -16)
            {
              unsigned int v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 < v12)
        {
          unsigned int v10 = v6;
          goto LABEL_6;
        }
        signed int v15 = *(unsigned int *)((char *)a1 + v14 + 12);
        if (v15 > v13) {
          goto LABEL_12;
        }
        unsigned int v10 = (unsigned int *)((char *)a1 + v14 + 16);
LABEL_6:
        unsigned int *v10 = v12;
        v10[1] = v13;
        if (++v9 == 8) {
          return v7 + 2 == a2;
        }
LABEL_7:
        unint64_t v6 = v7;
        v8 += 8;
        v7 += 2;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(a1, a2, a3);
  unsigned int v11 = *a4;
  unsigned int v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && (int)a4[1] < (int)a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    unsigned int v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    unsigned int v14 = *a3;
    unsigned int v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && (int)a3[1] < (int)a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      unsigned int v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      unsigned int v17 = *a2;
      unsigned int v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && (int)a2[1] < (int)a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        unsigned int v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  unsigned int v20 = *a5;
  unsigned int v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && (int)a5[1] < (int)a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    unsigned int v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    unsigned int v23 = *a4;
    unsigned int v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && (int)a4[1] < (int)a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      unsigned int v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      unsigned int v26 = *a3;
      unsigned int v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && (int)a3[1] < (int)a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        unsigned int v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        unsigned int v29 = *a2;
        unsigned int v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && (int)a2[1] < (int)a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          unsigned int v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < (signed int)v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unsigned int v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || (int)v8[1] >= (int)a4[1]))
      {
        unsigned int v12 = *a4;
        int v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v14 = (unsigned int *)(result + 8 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < (signed int)v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unsigned int v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && (int)v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_13;
            }
          }
        }
        unsigned int v14 = v8;
LABEL_13:
        *unsigned int v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<unsigned int,int> *>(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = v4 + 1;
      v6 += 2 * v4 + 2;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < a4)
      {
        unsigned int v11 = v6[2];
        if (*v6 < v11 || v11 >= *v6 && (int)v7[2 * v8 + 1] < (int)v6[3])
        {
          v6 += 2;
          uint64_t v4 = v10;
        }
      }
      *uint64_t v7 = *v6;
      v7[1] = v6[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v6 == (unsigned int *)(a2 - 8))
    {
      *(void *)uint64_t v6 = v5;
    }
    else
    {
      *uint64_t v6 = *(_DWORD *)(a2 - 8);
      v6[1] = *(_DWORD *)(a2 - 4);
      *(void *)(a2 - 8) = v5;
      uint64_t v12 = (char *)v6 - (char *)result + 8;
      if (v12 >= 9)
      {
        unint64_t v13 = ((unint64_t)v12 >> 3) - 2;
        unint64_t v14 = v13 >> 1;
        uint64_t v15 = &result[2 * (v13 >> 1)];
        unsigned int v16 = *v15;
        if (*v15 < *v6 || *v6 >= v16 && (int)result[2 * v14 + 1] < (int)v6[1])
        {
          unsigned int v17 = *v6;
          int v18 = v6[1];
          *uint64_t v6 = v16;
          v6[1] = v15[1];
          if (v13 >= 2)
          {
            while (1)
            {
              unint64_t v21 = v14 - 1;
              unint64_t v14 = (v14 - 1) >> 1;
              unsigned int v19 = &result[2 * v14];
              unsigned int v22 = *v19;
              if (*v19 < v17)
              {
                int v20 = v19[1];
              }
              else
              {
                if (v22 > v17) {
                  break;
                }
                int v20 = result[2 * v14 + 1];
                if (v20 >= v18) {
                  break;
                }
              }
              *uint64_t v15 = v22;
              v15[1] = v20;
              uint64_t v15 = &result[2 * v14];
              if (v21 <= 1) {
                goto LABEL_17;
              }
            }
          }
          unsigned int v19 = v15;
LABEL_17:
          *unsigned int v19 = v17;
          v19[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineConstantExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineConstantExprStorage,long long &>(llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>,mlir::TypeID,long long &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  *(_DWORD *)(v10 + 8) = 5;
  *(void *)(v10 + 16) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

void *llvm::function_ref<void ()(mlir::detail::AffineConstantExprStorage *)>::callback_fn<mlir::getAffineConstantExpr(long long,mlir::MLIRContext *)::$_0>(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t llvm::DenseMapInfo<std::tuple<unsigned int,mlir::AffineExpr,mlir::AffineExpr>,void>::getHashValueImpl<1u>(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    uint64_t v23 = a1;
    unint64_t v25 = v1;
    unint64_t v1 = v25;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v18 = v17;
    a1 = v23;
    if (v18)
    {
      unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v19 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      unint64_t v1 = v25;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v23;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  unint64_t v4 = *(void *)(a1 + 16);
  {
    unint64_t v26 = v1;
    uint64_t v22 = v3;
    unint64_t v24 = v4;
    uint64_t v3 = v22;
    unint64_t v4 = v24;
    unint64_t v1 = v26;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v20)
    {
      unint64_t v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v21 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      uint64_t v3 = v22;
      unint64_t v4 = v24;
      unint64_t v1 = v26;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v5 = HIDWORD(v1);
  uint64_t v6 = (v3 + 8 * v1) ^ HIDWORD(v1);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  unint64_t v8 = HIDWORD(v4);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v4) ^ HIDWORD(v4));
  unint64_t v10 = 0xEB382D6900000000
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47))
      - 1;
  unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  unint64_t v13 = (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)) | (0xEB382D6900000000
                                                                                            * (v7 ^ (v7 >> 47))))
      + ~((unint64_t)(((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27))) << 32);
  unint64_t v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  unint64_t v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  return ((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~(v15 << 27));
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  unint64_t v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *(_DWORD *)(a2 + 8)
      && *((void *)v2 + 1) == *(void *)(a2 + 16)
      && *((void *)v2 + 2) == *(void *)(a2 + 24);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineBinaryOpExprStorage * mlir::StorageUniquer::get<mlir::detail::AffineBinaryOpExprStorage,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&>(llvm::function_ref<void ()(mlir::detail::AffineBinaryOpExprStorage *)>,mlir::TypeID,unsigned int,mlir::AffineExpr const&,mlir::AffineExpr&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::AffineBinaryOpExprStorage::construct(a2, *a1);
  uint64_t v4 = a1[1];
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::AffineBinaryOpExprStorage::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(_DWORD *)(result + 8) = *(_DWORD *)a2;
  unint64_t v10 = *(void **)(a2 + 8);
  *(void *)(result + 16) = v10;
  *(void *)(result + 24) = *(void *)(a2 + 16);
  *(void *)unint64_t result = *v10;
  return result;
}

char *std::vector<llvm::SmallVector<long long,8u>>::__emplace_back_slow_path<llvm::SmallVector<long long,32u>>(char **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - v2) >> 4) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 4) >= 0x199999999999999) {
    unint64_t v8 = 0x333333333333333;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = (char *)operator new(80 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[80 * v4];
  *(void *)unint64_t v10 = v10 + 16;
  *((void *)v10 + 1) = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
  {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v10, a2);
    unint64_t v2 = *a1;
    unint64_t v3 = a1[1];
  }
  unint64_t v11 = &v9[80 * v8];
  unint64_t v12 = v10 + 80;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      *(void *)&v10[v13 - 80] = &v10[v13 - 64];
      *(void *)&v10[v13 - 72] = 0x800000000;
      if (*(_DWORD *)&v3[v13 - 72]) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v10[v13 - 80], (uint64_t)&v3[v13 - 80]);
      }
      v13 -= 80;
    }
    while (&v3[v13] != v2);
    unint64_t v2 = *a1;
    unint64_t v14 = a1[1];
    *a1 = &v10[v13];
    a1[1] = v12;
    a1[2] = v11;
    while (v14 != v2)
    {
      unsigned int v16 = (char *)*((void *)v14 - 10);
      v14 -= 80;
      unint64_t v15 = v16;
      if (v14 + 16 != v16) {
        free(v15);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v10 + 80;
}

BOOL mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkOperandsPostOrder(uint64_t a1, uint64_t a2)
{
  return mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(a1, *(void *)(a2 + 16))&& mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder(a1, *(void *)(a2 + 24)) != 0;
}

uint64_t mlir::AffineMap::getConstantMap(mlir::AffineMap *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(this, a2, a3);

  return mlir::AffineMap::get(0, 0, AffineConstantExpr);
}

uint64_t mlir::AffineMap::getMultiDimIdentityMap(mlir::AffineMap *this, mlir::MLIRContext *a2, mlir::MLIRContext *a3)
{
  int v4 = (int)this;
  v13[4] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = v13;
  uint64_t v12 = 0x400000000;
  if (this < 5)
  {
    if (!this)
    {
      unsigned int v8 = v12;
      goto LABEL_10;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, this, 8);
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t AffineDimExpr = mlir::getAffineDimExpr(v5, a2, a3);
    uint64_t v7 = v12;
    if (v12 >= (unint64_t)HIDWORD(v12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
      uint64_t v7 = v12;
    }
    *((void *)v11 + v7) = AffineDimExpr;
    unsigned int v8 = v12 + 1;
    LODWORD(v12) = v12 + 1;
    unint64_t v5 = (mlir *)(v5 + 1);
  }
  while (v4 != v5);
LABEL_10:
  uint64_t v9 = mlir::AffineMap::get(v4, 0, (uint64_t)v11, v8, a2);
  if (v11 != v13) {
    free(v11);
  }
  return v9;
}

uint64_t mlir::AffineMap::getResults(mlir::AffineMap *this)
{
  return *(void *)this + 24;
}

uint64_t mlir::AffineMap::getNumDims(mlir::AffineMap *this)
{
  return **(unsigned int **)this;
}

uint64_t mlir::AffineMap::getNumInputs(mlir::AffineMap *this)
{
  return (*(_DWORD *)(*(void *)this + 4) + **(_DWORD **)this);
}

double mlir::AffineMap::inferFromExprList@<D0>(mlir::BytecodeWriterConfig **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (uint64_t *)a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(*a1);
  uint64_t v17 = -1;
  uint64_t v18 = -1;
  if (a2)
  {
    unint64_t v15 = a2;
    unsigned int v16 = (void *)DesiredBytecodeVersion;
    uint64_t v7 = v4;
    unsigned int v8 = &v4[2 * a2];
    do
    {
      uint64_t v9 = v7[1];
      if (v9)
      {
        unint64_t v10 = (uint64_t *)*v7;
        uint64_t v11 = 8 * v9;
        do
        {
          uint64_t v19 = *v10;
          v20[0] = &unk_1EC9CFAF0;
          v20[1] = &v18;
          v20[2] = &v17;
          unint64_t v21 = v20;
          mlir::AffineExpr::walk(&v19, v20);
          if (v21 == v20)
          {
            (*(void (**)(void *))(v20[0] + 32))(v20);
          }
          else if (v21)
          {
            (*(void (**)(void))(*v21 + 40))();
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v7 += 2;
    }
    while (v7 != v8);
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x400000000;
    if (v15 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15, 8);
    }
    do
    {
      uint64_t v12 = mlir::AffineMap::get((int)v18 + 1, (int)v17 + 1, *v4, v4[1], v16);
      unint64_t v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v14 + 1, 8);
        unint64_t v14 = *(unsigned int *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v14) = v12;
      ++*(_DWORD *)(a3 + 8);
      v4 += 2;
    }
    while (v4 != v8);
  }
  else
  {
    *(void *)a3 = a3 + 16;
    *(void *)&double result = 0x400000000;
    *(void *)(a3 + 8) = 0x400000000;
  }
  return result;
}

unint64_t mlir::AffineMap::getLargestKnownDivisorOfMapExprs(mlir::AffineMap *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(unsigned int *)(*(void *)this + 8);
  if (!v2) {
    return -1;
  }
  unint64_t v3 = 0;
  int v4 = (uint64_t *)(v1 + 24);
  uint64_t v5 = v1 + 24 + 8 * v2;
  do
  {
    uint64_t v9 = *v4;
    unint64_t LargestKnownDivisor = mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v9);
    if (LargestKnownDivisor)
    {
      do
      {
        unint64_t v6 = LargestKnownDivisor;
        unint64_t LargestKnownDivisor = v3 % LargestKnownDivisor;
        unint64_t v3 = v6;
      }
      while (LargestKnownDivisor);
    }
    else
    {
      unint64_t v6 = v3;
    }
    unint64_t v3 = v6;
    ++v4;
  }
  while (v4 != (uint64_t *)v5);
  if (v6) {
    return v6;
  }
  else {
    return -1;
  }
}

uint64_t mlir::AffineMap::isIdentity(mlir::AffineMap *this)
{
  uint64_t v1 = **(unsigned int **)this;
  if (v1 == *(_DWORD *)(*(void *)this + 8))
  {
    if (!v1) {
      return 1;
    }
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)this + 24;
    while (1)
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v7 = v4;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 6)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v7, v4);
        uint64_t v6 = v7;
        if (!v7) {
          return 0;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v7, 0);
        uint64_t v6 = v7;
        if (!v7) {
          return 0;
        }
      }
      if (v2 != mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v6)) {
        break;
      }
      if (v1 == ++v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t mlir::AffineMap::isSymbolIdentity(mlir::AffineMap *this)
{
  uint64_t v1 = *(unsigned int *)(*(void *)this + 4);
  if (v1 == *(_DWORD *)(*(void *)this + 8))
  {
    if (!v1) {
      return 1;
    }
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)this + 24;
    while (1)
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v7 = v4;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 6)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v7, v4);
        uint64_t v6 = v7;
        if (!v7) {
          return 0;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v7, 0);
        uint64_t v6 = v7;
        if (!v7) {
          return 0;
        }
      }
      if (v2 != mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v6)) {
        break;
      }
      if (v1 == ++v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t mlir::AffineMap::getNumSymbols(mlir::AffineMap *this)
{
  return *(unsigned int *)(*(void *)this + 4);
}

BOOL mlir::AffineMap::isSingleConstant(mlir::AffineMap *this)
{
  if (*(_DWORD *)(*(void *)this + 8) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)this + 24);
  return mlir::AffineExpr::getKind((mlir::AffineExpr *)&v2) == 5;
}

uint64_t mlir::AffineMap::getResult(mlir::AffineMap *this, unsigned int a2)
{
  return *(void *)(*(void *)this + 8 * a2 + 24);
}

BOOL mlir::AffineMap::isConstant(mlir::AffineMap *this)
{
  uint64_t v1 = *(unsigned int *)(*(void *)this + 8);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = (uint64_t *)(*(void *)this + 24);
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t v7 = v4;
    BOOL v6 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) == 5;
    BOOL result = v6;
    BOOL v6 = !v6 || v3 == 0;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t mlir::AffineMap::getSingleConstantResult(mlir::AffineMap *this)
{
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v2, *(void *)(*(void *)this + 24));
  return mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v2);
}

void mlir::AffineMap::getConstantResults(mlir::AffineMap *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)(a2 + 16);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  uint64_t v4 = *(unsigned int *)(*(void *)this + 8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)this + 24);
    uint64_t v6 = 8 * v4;
    do
    {
      while (1)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v10, *v5);
        uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
        uint64_t v8 = LHS;
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(_DWORD *)(a2 + 12)) {
          break;
        }
        *(void *)(*(void *)a2 + 8 * v9) = LHS;
        *(_DWORD *)(a2 + 8) = v9 + 1;
        ++v5;
        v6 -= 8;
        if (!v6) {
          return;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v9 + 1, 8);
      *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t mlir::AffineMap::constantFold(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x200000000;
  mlir::AffineMap::partialConstantFold(a1, a2, a3, (uint64_t)&v17, a5);
  uint64_t v8 = v18;
  uint64_t v9 = (uint64_t *)v17;
  if (!v18)
  {
    uint64_t v15 = 0;
    if (v17 == v19) {
      return v15;
    }
    goto LABEL_7;
  }
  uint64_t v10 = *(unsigned int *)(a4 + 8);
  if (v10 + (unint64_t)v18 > *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + v18, 8);
    uint64_t v10 = *(unsigned int *)(a4 + 8);
  }
  uint64_t v11 = (uint64_t *)(*(void *)a4 + 8 * v10);
  uint64_t v12 = 8 * v8;
  do
  {
    uint64_t v13 = *v9++;
    uint64_t v14 = mlir::IndexType::get(*((mlir::IndexType **)*a1 + 2), v7);
    *v11++ = mlir::IntegerAttr::get(v14, v13);
    v12 -= 8;
  }
  while (v12);
  *(_DWORD *)(a4 + 8) += v8;
  uint64_t v15 = 1;
  uint64_t v9 = (uint64_t *)v17;
  if (v17 != v19) {
LABEL_7:
  }
    free(v9);
  return v15;
}

uint64_t mlir::AffineMap::partialConstantFold(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  int v31 = **a1;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  char v34 = 0;
  unsigned int v36 = v38;
  uint64_t v37 = 0x400000000;
  unint64_t v9 = v8[2];
  if (v9 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v9, 8);
    uint64_t v8 = *a1;
    LODWORD(v9) = (*a1)[2];
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v8 + 6);
    uint64_t v11 = 8 * v9;
    while (1)
    {
      uint64_t v12 = *v10;
      uint64_t v35 = v12;
      if (v14)
      {
        uint64_t v15 = v13;
        uint64_t DesiredBytecodeVersion = (mlir::IndexType *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v35);
        uint64_t v18 = mlir::IndexType::get(DesiredBytecodeVersion, v17);
        uint64_t v19 = mlir::IntegerAttr::get(v18, v15);
        uint64_t v30 = v19;
        if (a5 && v34) {
          goto LABEL_24;
        }
        if (v19)
        {
          Int = (mlir *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30);
          Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v30);
          uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(Int, Context, v22);
          uint64_t v24 = AffineConstantExpr;
          if (v37 >= (unint64_t)HIDWORD(v37))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
            *((void *)v36 + v37) = v24;
            LODWORD(v37) = v37 + 1;
            if (a4)
            {
LABEL_13:
              uint64_t v25 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30);
              unint64_t v26 = *(unsigned int *)(a4 + 8);
              if (v26 >= *(unsigned int *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v26 + 1, 8);
                unint64_t v26 = *(unsigned int *)(a4 + 8);
              }
              *(void *)(*(void *)a4 + 8 * v26) = v25;
              ++*(_DWORD *)(a4 + 8);
              goto LABEL_6;
            }
          }
          else
          {
            *((void *)v36 + v37) = AffineConstantExpr;
            LODWORD(v37) = v37 + 1;
            if (a4) {
              goto LABEL_13;
            }
          }
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v30 = 0;
        if (a5 && v34)
        {
LABEL_24:
          uint64_t v27 = 0;
          *a5 = 1;
          unsigned int v28 = v36;
          if (v36 != v38) {
            goto LABEL_28;
          }
          return v27;
        }
      }
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v37 + 1, 8);
        *((void *)v36 + v37) = v12;
        LODWORD(v37) = v37 + 1;
        if (!a4) {
          goto LABEL_6;
        }
LABEL_19:
        *(_DWORD *)(a4 + 8) = 0;
        a4 = 0;
        goto LABEL_6;
      }
      *((void *)v36 + v37) = v12;
      LODWORD(v37) = v37 + 1;
      if (a4) {
        goto LABEL_19;
      }
LABEL_6:
      ++v10;
      v11 -= 8;
      if (!v11)
      {
        uint64_t v8 = *a1;
        break;
      }
    }
  }
  uint64_t v27 = mlir::AffineMap::get(*v8, v8[1], (uint64_t)v36, v37, *((void **)v8 + 2));
  unsigned int v28 = v36;
  if (v36 != v38) {
LABEL_28:
  }
    free(v28);
  return v27;
}

uint64_t mlir::AffineMap::walkExprs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)(*(void *)result + 24);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6;
      v9[0] = &unk_1EC9CE398;
      v9[1] = a2;
      v9[2] = a3;
      uint64_t v10 = v9;
      mlir::AffineExpr::walk(&v8, v9);
      BOOL result = (uint64_t)v10;
      if (v10 == v9)
      {
        BOOL result = (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        BOOL result = (*(uint64_t (**)(void))(*v10 + 40))();
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t mlir::AffineMap::replaceDimsAndSymbols(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  unint64_t v26 = v28;
  uint64_t v27 = 0x800000000;
  uint64_t v14 = *a1;
  unint64_t v15 = *(unsigned int *)(*a1 + 8);
  if (v15 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v15, 8);
    uint64_t v14 = *a1;
    LODWORD(v15) = *(_DWORD *)(*a1 + 8);
  }
  if (v15)
  {
    int v24 = a6;
    int v16 = a7;
    uint64_t v17 = (uint64_t *)(v14 + 24);
    uint64_t v18 = 8 * v15;
    do
    {
      uint64_t v25 = *v17;
      uint64_t v19 = mlir::AffineExpr::replaceDimsAndSymbols(&v25, a2, a3, a4, a5);
      uint64_t v20 = v27;
      if (v27 >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v27 + 1, 8);
        uint64_t v20 = v27;
      }
      *((void *)v26 + v20) = v19;
      unsigned int v21 = v27 + 1;
      LODWORD(v27) = v27 + 1;
      ++v17;
      v18 -= 8;
    }
    while (v18);
    uint64_t v14 = *a1;
    a7 = v16;
    a6 = v24;
  }
  else
  {
    unsigned int v21 = v27;
  }
  uint64_t v22 = mlir::AffineMap::get(a6, a7, (uint64_t)v26, v21, *(void **)(v14 + 16));
  if (v26 != v28) {
    free(v26);
  }
  return v22;
}

uint64_t mlir::AffineMap::replace(uint64_t *a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  unint64_t v15 = v17;
  uint64_t v16 = 0x400000000;
  uint64_t v10 = *a1;
  unint64_t v11 = *(unsigned int *)(*a1 + 8);
  if (v11 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v11, 8);
    uint64_t v10 = *a1;
    LODWORD(v11) = *(_DWORD *)(*a1 + 8);
  }
  if (v11)
  {
    unint64_t v14 = *(void *)(v10 + 24);
    mlir::AffineExpr::replace(&v14, a2, a3);
  }
  uint64_t v12 = mlir::AffineMap::get(a4, a5, (uint64_t)v15, v16, *(void **)(v10 + 16));
  if (v15 != v17) {
    free(v15);
  }
  return v12;
}

uint64_t mlir::AffineMap::isProjectedPermutation(mlir::AffineMap *this, int a2)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int **)this;
  if (*(_DWORD *)(*(void *)this + 4)) {
    return 0;
  }
  unsigned int v3 = v2[2];
  size_t v4 = *v2;
  if (v3 > v4) {
    return 0;
  }
  uint64_t v19 = v22;
  uint64_t v21 = 8;
  if (v4 < 9)
  {
    if (v4) {
      bzero(v22, v4);
    }
  }
  else
  {
    size_t v20 = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v19, v22, v4, 1);
    bzero(v19, v4);
    uint64_t v2 = *(unsigned int **)this;
    unsigned int v3 = *(_DWORD *)(*(void *)this + 8);
  }
  size_t v20 = v4;
  uint64_t v5 = 1;
  if (!v3)
  {
LABEL_24:
    unint64_t v15 = v19;
    if (v19 != v22) {
      goto LABEL_27;
    }
    return v5;
  }
  unint64_t v9 = (uint64_t *)(v2 + 6);
  uint64_t v10 = 8 * v3;
  do
  {
    uint64_t v13 = *v9;
    uint64_t v18 = *v9;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v18) == 6)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v18, v13);
      uint64_t v17 = v18;
      if (!v18)
      {
LABEL_17:
        uint64_t v18 = v13;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v18) == 5) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v18, v14);
        uint64_t v16 = v18;
        if (!a2 || !v18 || mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v16))
        {
LABEL_23:
          uint64_t v5 = 0;
          goto LABEL_24;
        }
        goto LABEL_14;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v18, 0);
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_17;
      }
    }
    unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v17);
    if (*((unsigned char *)v19 + Position)) {
      goto LABEL_23;
    }
    unsigned int v12 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v17);
    *((unsigned char *)v19 + v12) = 1;
LABEL_14:
    ++v9;
    v10 -= 8;
  }
  while (v10);
  uint64_t v5 = 1;
  unint64_t v15 = v19;
  if (v19 != v22) {
LABEL_27:
  }
    free(v15);
  return v5;
}

uint64_t mlir::AffineMap::isPermutation(mlir::AffineMap *this)
{
  if (**(_DWORD **)this == *(_DWORD *)(*(void *)this + 8)) {
    return mlir::AffineMap::isProjectedPermutation(this, 0);
  }
  else {
    return 0;
  }
}

uint64_t mlir::AffineMap::getSliceMap(int **this, int a2, unsigned int a3)
{
  return mlir::AffineMap::get(**this, (*this)[1], (uint64_t)&(*this)[2 * a2 + 6], a3, *((void **)*this + 2));
}

uint64_t mlir::simplifyAffineMap(int *a1)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = v13;
  uint64_t v12 = 0x800000000;
  uint64_t v2 = a1[2];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = mlir::simplifyAffineExpr(*(mlir::MLIRContext ***)&a1[v3 / 4 + 6], *a1, a1[1]);
      uint64_t v6 = v12;
      if (v12 >= (unint64_t)HIDWORD(v12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
        uint64_t v6 = v12;
      }
      *((void *)v11 + v6) = v5;
      uint64_t v7 = (v12 + 1);
      LODWORD(v12) = v12 + 1;
      v3 += 8;
    }
    while (v4 != v3);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
  }
  uint64_t v9 = mlir::AffineMap::get(*a1, a1[1], (uint64_t)v8, v7, *((void **)a1 + 2));
  if (v11 != v13) {
    free(v11);
  }
  return v9;
}

uint64_t mlir::removeDuplicateExprs(uint64_t a1)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (v2 < 5)
  {
    if (!v2)
    {
      uint64_t v5 = (char *)v19;
      uint64_t v6 = (char *)v19;
      LODWORD(v18) = 0;
      goto LABEL_15;
    }
    uint64_t v3 = 0;
    uint64_t v4 = v19;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v2, 8);
    uint64_t v3 = v18;
    uint64_t v4 = v17;
  }
  memcpy(&v4[v3], (const void *)(a1 + 24), 8 * v2);
  uint64_t v5 = (char *)v17;
  uint64_t v6 = (char *)v17;
  uint64_t v7 = (v18 + v2);
  LODWORD(v18) = v18 + v2;
  if (v18)
  {
    uint64_t v6 = (char *)v17 + 8 * v7;
    uint64_t v8 = 8 * v7 - 16;
    uint64_t v9 = (char *)v17;
    while (1)
    {
      uint64_t v10 = v9;
      v9 += 8;
      if (v9 == v6) {
        break;
      }
      uint64_t v11 = v8;
      uint64_t v12 = v10[1];
      v8 -= 8;
      if (*v10 == v12)
      {
        if (v10 + 2 != (void *)v6)
        {
          uint64_t v13 = 8;
          do
          {
            uint64_t v14 = v12;
            uint64_t v12 = *(void *)&v9[v13];
            if (v14 != v12)
            {
              v10[1] = v12;
              ++v10;
            }
            v13 += 8;
            v11 -= 8;
          }
          while (v11);
        }
        uint64_t v6 = (char *)(v10 + 1);
        break;
      }
    }
  }
LABEL_15:
  LODWORD(v18) = (unint64_t)(v6 - v5) >> 3;
  uint64_t v15 = mlir::AffineMap::get(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), (uint64_t)v5, v18, *(void **)(a1 + 16));
  if (v17 != v19) {
    free(v17);
  }
  return v15;
}

void *mlir::MutableAffineMap::MutableAffineMap(void *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  uint64_t v5 = (char *)(a1 + 2);
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (v4 < 9)
  {
    if (!v4)
    {
      int v7 = 0;
      goto LABEL_7;
    }
    uint64_t v6 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, v5, v4, 8);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    uint64_t v5 = (char *)*a1;
  }
  memcpy(&v5[8 * v6], (const void *)(a2 + 24), 8 * v4);
  int v7 = *((_DWORD *)a1 + 2);
LABEL_7:
  *((_DWORD *)a1 + 2) = v7 + v4;
  a1[10] = *(void *)a2;
  a1[11] = *(void *)(a2 + 16);
  return a1;
}

uint64_t mlir::MutableAffineMap::reset(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 80) = *(void *)a2;
  *(void *)(a1 + 88) = *(void *)(a2 + 16);
  return llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a1, *(void *)a1, (char *)(a2 + 24), (char *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 8)));
}

uint64_t mlir::MutableAffineMap::getAffineMap(mlir::MutableAffineMap *this)
{
  return mlir::AffineMap::get(*((_DWORD *)this + 20), *((_DWORD *)this + 21), *(void *)this, *((unsigned int *)this + 2), *((void **)this + 11));
}

unint64_t anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  switch(mlir::AffineExpr::getKind((mlir::AffineExpr *)&v13))
  {
    case 1u:
      uint64_t v3 = v13;
      goto LABEL_7;
    case 2u:
      uint64_t v3 = v13;
      uint64_t v12 = a1;
      goto LABEL_7;
    case 3u:
      uint64_t v3 = v13;
      uint64_t v12 = a1;
      goto LABEL_7;
    case 4u:
      uint64_t v3 = v13;
      uint64_t v12 = a1;
      goto LABEL_7;
    case 5u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v12, v13);
      unint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
      goto LABEL_17;
    case 6u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v11, v13);
      uint64_t v7 = *(void *)(*(void *)(a1 + 8)
                     + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v11));
      if (!v7) {
        goto LABEL_15;
      }
      goto LABEL_12;
    case 7u:
      int v8 = *(_DWORD *)a1;
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v11, v13);
      uint64_t v7 = *(void *)(*(void *)(a1 + 8)
                     + 8 * (mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v11) + v8));
      if (!v7) {
        goto LABEL_15;
      }
LABEL_12:
      uint64_t v9 = *(void **)(*(void *)v7 + 136);
      if (v9 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v7 = 0;
      }
      uint64_t v12 = v7;
      if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        unint64_t LHS = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12);
LABEL_17:
        unint64_t v6 = LHS & 0xFFFFFFFFFFFFFF00;
      }
      else
      {
LABEL_15:
        LOBYTE(LHS) = 0;
        unint64_t v6 = 0;
      }
      return v6 | LHS;
    default:
      uint64_t v3 = v13;
LABEL_7:
      unint64_t v6 = LHS & 0xFFFFFFFFFFFFFF00;
      return v6 | LHS;
  }
}

unint64_t anonymous namespace'::AffineExprConstantFolder::constantFoldBinExpr(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v18, a2);
  uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18);
  if (v9
    && (uint64_t v10 = v8,
        uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18),
        v13))
  {
    uint64_t v14 = a3(a4, v10, v12);
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFF00;
    uint64_t v16 = v14;
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0;
  }
  return v15 | v16;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 + a2;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 * a2;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#3}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 > 0) {
    return (a3 & ((a2 % a3) >> 63)) + a2 % a3;
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)a1 + 24) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#4}>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = -1;
    if (a3 < 0) {
      uint64_t v3 = 1;
    }
    if (a2 && a2 >> 63 != (unint64_t)a3 >> 63) {
      return ~((uint64_t)(v3 - a2) / a3);
    }
    else {
      return (uint64_t)a2 / a3;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)a1 + 24) = 1;
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<long long> ()(long long,long long)>::callback_fn<anonymous namespace'::AffineExprConstantFolder::constantFoldImpl(mlir::AffineExpr)::{lambda(long long,long long)#5}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a2 && a2 < 1 != a3 > 0)
    {
      if (a3 <= 0) {
        uint64_t v3 = a2 + 1;
      }
      else {
        uint64_t v3 = a2 - 1;
      }
      return v3 / a3 + 1;
    }
    else
    {
      return a2 / a3;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)a1 + 24) = 1;
  }
  return result;
}

__n128 std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EC9CFAF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CFAF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v9 = *a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v9) == 6)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v9, v3);
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v9, 0);
    if (!v9) {
      goto LABEL_8;
    }
  }
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v9);
  if (*v4 > Position) {
    uint64_t Position = *v4;
  }
  **(void **)(a1 + 8) = Position;
LABEL_8:
  uint64_t v9 = v3;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v9) == 7)
  {
    __n128 result = mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v9, v3);
    if (!v9) {
      return result;
    }
  }
  else
  {
    __n128 result = mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v9, 0);
    if (!v9) {
      return result;
    }
  }
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  __n128 result = (void *)mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v9);
  uint64_t v8 = result;
  if (*v7 > result) {
    uint64_t v8 = *v7;
  }
  **(void **)(a1 + 16) = v8;
  return result;
}

uint64_t std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlirL18getMaxDimAndSymbolIN4llvm8ArrayRefINS_10AffineExprEEEEEvNS2_IT_EERxS7_EUlS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1},std::allocator<void mlir::getMaxDimAndSymbol<llvm::ArrayRef<mlir::AffineExpr>>(llvm::ArrayRef<llvm::ArrayRef<mlir::AffineExpr>>,long long &,long long &)::{lambda(mlir::AffineExpr)#1}>,void ()(mlir::AffineExpr)>::target_type()
{
}

__n128 std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EC9CE398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CE398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *a2);
}

uint64_t std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811019BFLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811019BFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811019BFLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811019BFLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<llvm::function_ref<void ()(mlir::AffineExpr)>,std::allocator<llvm::function_ref<void ()(mlir::AffineExpr)>>,void ()(mlir::AffineExpr)>::target_type()
{
}

llvm::raw_ostream *mlir::OperationName::print(mlir::OperationName *this, llvm::raw_ostream *a2)
{
  uint64_t v7 = *(void *)(*(void *)this + 8);
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v7);
  size_t v5 = v3;
  __n128 result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v3 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, AttrData, v3);
  }
  if (v3)
  {
    __n128 result = (llvm::raw_ostream *)memcpy(result, AttrData, v3);
    *((void *)a2 + 4) += v5;
  }
  return result;
}

uint64_t mlir::AsmParser::getContext(mlir::AsmParser *this)
{
  return *(void *)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)this + 32))(this);
}

uint64_t mlir::AsmParser::parseTypeList(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(uint64_t *), void *, void, void))(*(void *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::AsmParser::parseTypeList(llvm::SmallVectorImpl<mlir::Type> &)::$_0>, v3, 0, 0);
}

llvm::raw_ostream *mlir::OpAsmPrinter::printFunctionalType(mlir::OpAsmPrinter *this, mlir::Operation *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)this + 16))(this);
  size_t v5 = v4;
  unint64_t v6 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v6 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((void *)v4 + 4) = v6 + 1;
    *unint64_t v6 = 40;
  }
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v7 = *((unsigned int *)a2 + 17);
    if (v7)
    {
      uint64_t v8 = *((void *)a2 + 9);
      uint64_t v9 = *(void *)(v8 + 24);
      unint64_t v10 = v9 ? *(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8 : 0;
      (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)this + 32))(this, v10);
      if (v7 != 1)
      {
        uint64_t v18 = v7 - 1;
        uint64_t v19 = (uint64_t *)(v8 + 56);
        do
        {
          uint64_t v21 = (_WORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v21 > 1uLL)
          {
            *uint64_t v21 = 8236;
            *((void *)v5 + 4) += 2;
            uint64_t v22 = *v19;
            if (!*v19)
            {
LABEL_31:
              unint64_t v20 = 0;
              goto LABEL_26;
            }
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
            uint64_t v22 = *v19;
            if (!*v19) {
              goto LABEL_31;
            }
          }
          unint64_t v20 = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
LABEL_26:
          (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)this + 32))(this, v20);
          v19 += 4;
          --v18;
        }
        while (v18);
      }
    }
  }
  uint64_t v11 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v11) > 4)
  {
    *(unsigned char *)(v11 + 4) = 32;
    *(_DWORD *)uint64_t v11 = 1043144745;
    *((void *)v5 + 4) += 5;
    if (*((_DWORD *)a2 + 9) != 1)
    {
LABEL_18:
      uint64_t v14 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v14 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 40);
        uint64_t v15 = *((unsigned int *)a2 + 9);
        __n128 result = (mlir::Operation *)((char *)a2 - 16);
        if (v15) {
          uint64_t v17 = (char *)a2 - 16;
        }
        else {
          uint64_t v17 = 0;
        }
        if (!v15) {
          goto LABEL_44;
        }
      }
      else
      {
        *((void *)v5 + 4) = v14 + 1;
        *uint64_t v14 = 40;
        uint64_t v15 = *((unsigned int *)a2 + 9);
        __n128 result = (mlir::Operation *)((char *)a2 - 16);
        if (v15) {
          uint64_t v17 = (char *)a2 - 16;
        }
        else {
          uint64_t v17 = 0;
        }
        if (!v15) {
          goto LABEL_44;
        }
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, 0);
      if (NextResultAtOffset) {
        unint64_t v24 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v24 = 0;
      }
      __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)this + 32))(this, v24);
      if (v15 == 1)
      {
LABEL_44:
        unint64_t v26 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v26 >= *((void *)v5 + 3))
        {
          return llvm::raw_ostream::write(v5, 41);
        }
        else
        {
          *((void *)v5 + 4) = v26 + 1;
          unsigned char *v26 = 41;
        }
        return result;
      }
      uint64_t v27 = 1;
      while (1)
      {
        unsigned int v29 = (_WORD *)*((void *)v5 + 4);
        if (*((void *)v5 + 3) - (void)v29 > 1uLL)
        {
          *unsigned int v29 = 8236;
          *((void *)v5 + 4) += 2;
          uint64_t v30 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v17, v27);
          if (!v30)
          {
LABEL_56:
            unint64_t v28 = 0;
            goto LABEL_51;
          }
        }
        else
        {
          llvm::raw_ostream::write(v5, ", ", 2uLL);
          uint64_t v30 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v17, v27);
          if (!v30) {
            goto LABEL_56;
          }
        }
        unint64_t v28 = *(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8;
LABEL_51:
        __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)this + 32))(this, v28);
        if (v15 == ++v27) {
          goto LABEL_44;
        }
      }
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, ") -> ", 5uLL);
    if (*((_DWORD *)a2 + 9) != 1) {
      goto LABEL_18;
    }
  }
  if ((*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0
    && *(_UNKNOWN **)(*(void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    goto LABEL_18;
  }
  uint64_t v12 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0);
  if (v12) {
    unint64_t v13 = *(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)this + 32);

  return (llvm::raw_ostream *)v25(this, v13);
}

void mlir::registerAsmPrinterCLOptions(mlir *this)
{
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
}
  }

mlir::OpPrintingFlags *mlir::OpPrintingFlags::OpPrintingFlags(mlir::OpPrintingFlags *this)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 32) &= 0x80u;
  if (!atomic_load((unint64_t *)clOptions)) {
    return this;
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  if (*(_WORD *)(clOptions[0] + 208))
  }
  {
    if (atomic_load_explicit(clOptions, memory_order_acquire))
    {
      uint64_t v3 = *(unsigned int *)(clOptions[0] + 328);
      if (*((unsigned char *)this + 8))
      {
LABEL_7:
        *(void *)this = v3;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v3 = *(unsigned int *)(clOptions[0] + 328);
      if (*((unsigned char *)this + 8)) {
        goto LABEL_7;
      }
    }
    *((unsigned char *)this + 8) = 1;
    goto LABEL_7;
  }
LABEL_8:
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  if (!*(_WORD *)(clOptions[0] + 400))
  }
    goto LABEL_14;
  if (!atomic_load_explicit(clOptions, memory_order_acquire))
  {
    uint64_t v4 = *(unsigned int *)(clOptions[0] + 520);
    if (*((unsigned char *)this + 24)) {
      goto LABEL_13;
    }
LABEL_31:
    *((unsigned char *)this + 24) = 1;
    goto LABEL_13;
  }
  uint64_t v4 = *(unsigned int *)(clOptions[0] + 520);
  if (!*((unsigned char *)this + 24)) {
    goto LABEL_31;
  }
LABEL_13:
  *((void *)this + 2) = v4;
LABEL_14:
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xFE | *(unsigned char *)(clOptions[0] + 712);
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xFD | (2 * *(unsigned char *)(clOptions[0] + 904));
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xFB | (4 * *(unsigned char *)(clOptions[0] + 1096));
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xEF | (16 * *(unsigned char *)(clOptions[0] + 1288));
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xDF | (32 * *(unsigned char *)(clOptions[0] + 1480));
  }
  if (!atomic_load_explicit(clOptions, memory_order_acquire)) {
  *((unsigned char *)this + 32) = *((unsigned char *)this + 32) & 0xBF | (*(unsigned char *)(clOptions[0] + 1672) << 6);
  }
  return this;
}

uint64_t mlir::OpPrintingFlags::elideLargeElementsAttrs(uint64_t this, uint64_t a2)
{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 1;
  return this;
}

uint64_t mlir::OpPrintingFlags::elideLargeResourceString(uint64_t this, uint64_t a2)
{
  if (!*(unsigned char *)(this + 24)) {
    *(unsigned char *)(this + 24) = 1;
  }
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t mlir::OpPrintingFlags::enableDebugInfo(uint64_t this, char a2, int a3)
{
  if (a3) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(this + 32) = v3 | a2 | *(unsigned char *)(this + 32) & 0xFC;
  return this;
}

uint64_t mlir::OpPrintingFlags::printGenericOpForm(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 32) = *(unsigned char *)(this + 32) & 0xFB | v2;
  return this;
}

uint64_t mlir::OpPrintingFlags::useLocalScope(uint64_t this)
{
  *(unsigned char *)(this + 32) |= 0x20u;
  return this;
}

uint64_t mlir::OpPrintingFlags::shouldElideElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)a1;
  if (v4 >= mlir::ElementsAttr::getNumElements(a2, a3)) {
    return 0;
  }
  if (mlir::DenseElementsAttr::classof(a2)) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v5;
  if (v5) {
    return mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v7) ^ 1;
  }
  else {
    return 1;
  }
}

uint64_t mlir::OpPrintingFlags::getLargeElementsAttrLimit(mlir::OpPrintingFlags *this)
{
  return *(void *)this;
}

void mlir::AsmResourcePrinter::~AsmResourcePrinter(void **this)
{
  *this = &unk_1EC9AABF0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

char *mlir::toString(int a1)
{
  return (&off_1E4FBF828)[a1];
}

void *mlir::FallbackAsmResourceMap::getParserFor(uint64_t a1, const void *a2, size_t a3)
{
  if (!a2)
  {
    __dst = 0;
    size_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v7 = llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](a1, (uint64_t)&__dst);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_15:
    operator delete(__dst);
    unint64_t v10 = *(void **)v7;
    if (*(void *)v7) {
      return v10;
    }
    goto LABEL_16;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_30;
  }
  if (a3 >= 0x17)
  {
    uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v8 = a3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v18 = a3;
    unint64_t v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_11:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  uint64_t v7 = llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](a1, (uint64_t)&__dst);
  if (SHIBYTE(v19) < 0) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v10 = *(void **)v7;
  if (*(void *)v7) {
    return v10;
  }
LABEL_16:
  uint64_t v11 = operator new(0x90uLL);
  unint64_t v10 = v11;
  *uint64_t v11 = &unk_1EC9AA808;
  uint64_t v12 = v11 + 1;
  if (!a2)
  {
    unint64_t v13 = 0;
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    goto LABEL_27;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7) {
LABEL_30:
  }
    abort();
  if (a3 >= 0x17)
  {
    uint64_t v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v14 = a3 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v12 = operator new(v14 + 1);
    v10[2] = a3;
    v10[3] = v15 | 0x8000000000000000;
    v10[1] = v12;
  }
  else
  {
    *((unsigned char *)v11 + 31) = a3;
    if (!a3) {
      goto LABEL_26;
    }
  }
  memmove(v12, a2, a3);
LABEL_26:
  *((unsigned char *)v12 + a3) = 0;
  unint64_t v13 = *(void **)v7;
LABEL_27:
  void *v10 = &unk_1EC9AAE30;
  v10[4] = v10 + 6;
  v10[5] = 0x100000000;
  *(void *)uint64_t v7 = v10;
  if (v13)
  {
    (*(void (**)(void *))(*v13 + 8))(v13);
    return *(void **)v7;
  }
  return v10;
}

uint64_t llvm::MapVector<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>,llvm::StringMap<unsigned int,llvm::MallocAllocator>,llvm::SmallVector<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,0u>>::operator[](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  std::string __p = v23;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (int8x16_t *)&__p;
  }
  else {
    p_p = (int8x16_t *)v23.__r_.__value_.__r.__words[0];
  }
  int v26 = 0;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  int v22 = 0;
  uint64_t v6 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1, p_p, (const unsigned __int8 *)size, &v22);
  if (v7)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      uint64_t v24 = 0;
      uint64_t v8 = *(unsigned int *)(a1 + 32);
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = &v23;
      if (v8 < *(_DWORD *)(a1 + 36)) {
        goto LABEL_17;
      }
    }
    else
    {
      std::string v23 = *(std::string *)a2;
      uint64_t v24 = 0;
      uint64_t v8 = *(unsigned int *)(a1 + 32);
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v10 = &v23;
      if (v8 < *(_DWORD *)(a1 + 36)) {
        goto LABEL_17;
      }
    }
    size_t v18 = (unint64_t *)(a1 + 24);
    unint64_t v19 = v8 + 1;
    BOOL v20 = v9 + 32 * v8 > (unint64_t)&v23;
    if (v9 <= (unint64_t)&v23 && v20)
    {
      uint64_t v21 = (char *)&v23 - v9;
      llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(a1 + 24, v19);
      unint64_t v9 = *v18;
      unint64_t v10 = (std::string *)&v21[*v18];
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(a1 + 24, v19);
      unint64_t v9 = *v18;
      unint64_t v10 = &v23;
    }
LABEL_17:
    uint64_t v13 = v9 + 32 * *(unsigned int *)(a1 + 32);
    long long v14 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)(v13 + 16) = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v13 = v14;
    v10->__r_.__value_.__r.__words[0] = 0;
    v10->__r_.__value_.__l.__size_ = 0;
    std::string::pointer data = v10[1].__r_.__value_.__l.__data_;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10[1].__r_.__value_.__r.__words[0] = 0;
    *(void *)(v13 + 24) = data;
    ++*(_DWORD *)(a1 + 32);
    uint64_t v16 = v24;
    uint64_t v24 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    unsigned int v11 = *(_DWORD *)(a1 + 32) - 1;
    *(_DWORD *)(v6 + 8) = v11;
    uint64_t v12 = *(void *)(a1 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_22;
    }
    return v12 + 32 * v11 + 24;
  }
  unsigned int v11 = *(_DWORD *)(v6 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_22:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12 + 32 * v11 + 24;
}

void *mlir::FallbackAsmResourceMap::getPrinters@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    uint64_t v5 = this[3] + 24;
    do
    {
      uint64_t v6 = *(void *)v5;
      int v7 = *(char *)(*(void *)v5 + 31);
      if (v7 >= 0) {
        uint64_t v8 = (const void *)(*(void *)v5 + 8);
      }
      else {
        uint64_t v8 = *(const void **)(*(void *)v5 + 8);
      }
      if (v7 >= 0) {
        size_t v9 = *(unsigned __int8 *)(*(void *)v5 + 31);
      }
      else {
        size_t v9 = *(void *)(v6 + 16);
      }
      unint64_t v10 = operator new(0x28uLL);
      unsigned int v11 = v10;
      void *v10 = &unk_1EC9AABF0;
      uint64_t v12 = v10 + 1;
      if (!v8)
      {
        *uint64_t v12 = 0;
        v10[2] = 0;
        v10[3] = 0;
        goto LABEL_21;
      }
      if (v9 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v9 >= 0x17)
      {
        uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v13 = v9 | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v12 = operator new(v13 + 1);
        v11[2] = v9;
        v11[3] = v14 | 0x8000000000000000;
        v11[1] = v12;
      }
      else
      {
        *((unsigned char *)v10 + 31) = v9;
        if (!v9) {
          goto LABEL_20;
        }
      }
      memmove(v12, v8, v9);
LABEL_20:
      *((unsigned char *)v12 + v9) = 0;
LABEL_21:
      *unsigned int v11 = &unk_1EC9D0D90;
      v11[4] = v6;
      uint64_t v16 = v11;
      uint64_t v15 = (void *)a2[1];
      if ((unint64_t)v15 < a2[2])
      {
        uint64_t v16 = 0;
        *uint64_t v15 = v11;
        a2[1] = v15 + 1;
        this = v16;
        uint64_t v16 = 0;
        if (!this) {
          goto LABEL_3;
        }
LABEL_25:
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        goto LABEL_3;
      }
      a2[1] = std::vector<std::unique_ptr<mlir::AsmResourcePrinter>>::__emplace_back_slow_path<std::unique_ptr<mlir::AsmResourcePrinter>>(a2, (uint64_t *)&v16);
      this = v16;
      uint64_t v16 = 0;
      if (this) {
        goto LABEL_25;
      }
LABEL_3:
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  return this;
}

uint64_t mlir::FallbackAsmResourceMap::ResourceCollection::parseResource(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  switch(v4)
  {
    case 2:
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 48))(&__p, a2);
      if (LOBYTE(v17[0]))
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        uint64_t v13 = v9;
        llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,std::string>(a1 + 32, (const void **)&v12, (uint64_t)&__p);
        if (LOBYTE(v17[0]) && SHIBYTE(v16) < 0) {
          operator delete(__p);
        }
        return 1;
      }
      return 0;
    case 1:
      LOWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
      if ((unsigned __int16)v12 <= 0xFFu) {
        return 0;
      }
      std::string __p = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      uint64_t v15 = v11;
      llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,BOOL &>(a1 + 32, (const void **)&__p, &v12);
      break;
    case 0:
      (*(void (**)(void **__return_ptr, uint64_t, void *(*)@<X0>(size_t@<X1>, std::align_val_t@<X2>, uint64_t@<X8>), uint64_t *))(*(void *)a2 + 56))(&__p, a2, llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>, &v12);
      if (v19)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        uint64_t v13 = v5;
        llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,mlir::AsmResourceBlob>(a1 + 32, (const void **)&v12, (uint64_t)&__p);
        if (v19 && v18 >= 8)
        {
          uint64_t v6 = (v18 & 2) != 0 ? v17 : (llvm **)v17[0];
          (*(void (**)(llvm **, void *, uint64_t, uint64_t))(v18 & 0xFFFFFFFFFFFFFFF8))(v6, __p, v15, v16);
          char v7 = v18;
          if (v18 >= 8)
          {
            if ((v18 & 4) != 0)
            {
              if ((v18 & 2) != 0) {
                uint64_t v8 = v17;
              }
              else {
                uint64_t v8 = (llvm **)v17[0];
              }
              (*(void (**)(llvm **))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
            }
            if ((v7 & 2) == 0) {
              llvm::deallocate_buffer(v17[0], v17[1]);
            }
          }
        }
        return 1;
      }
      return 0;
  }
  return 1;
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,mlir::AsmResourceBlob>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 < *(_DWORD *)(a1 + 12))
  {
    uint64_t v6 = *(void *)a1;
    char v7 = (void *)(*(void *)a1 + 96 * v5);
    uint64_t v9 = *a2;
    size_t v8 = (size_t)a2[1];
    long long v23 = *(_OWORD *)a3;
    unint64_t v10 = *(void *)(a3 + 48);
    uint64_t v24 = *(void *)(a3 + 16);
    unint64_t v27 = v10;
    if (v10 >= 8)
    {
      uint64_t v11 = (long long *)(a3 + 24);
      if ((v10 & 2) != 0 && (v10 & 4) != 0)
      {
        (*(void (**)(long long *, long long *))((v10 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v11);
      }
      else
      {
        long long v25 = *v11;
        uint64_t v26 = *(void *)(a3 + 40);
      }
      *(void *)(a3 + 48) = 0;
    }
    char v28 = *(unsigned char *)(a3 + 56);
    int v29 = 0;
    if (!v9)
    {
      int v12 = 0;
      uint64_t v13 = v6 + 96 * v5;
      *(_DWORD *)(v13 + 88) = -1;
      uint64_t v14 = (_DWORD *)(v13 + 88);
      *char v7 = 0;
      v7[1] = 0;
      uint64_t v15 = v14 - 16;
      *((unsigned char *)v7 + 24) = 0;
      v7[2] = 0;
      goto LABEL_19;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v8 >= 0x17)
    {
      uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v16 = v8 | 7;
      }
      uint64_t v17 = v16 + 1;
      unint64_t v18 = operator new(v16 + 1);
      v7[1] = v8;
      v7[2] = v17 | 0x8000000000000000;
      *char v7 = v18;
      char v7 = v18;
    }
    else
    {
      *((unsigned char *)v7 + 23) = v8;
      if (!v8)
      {
LABEL_18:
        *((unsigned char *)v7 + v8) = 0;
        int v12 = v29;
        uint64_t v19 = v6 + 96 * v5;
        *(unsigned char *)(v19 + 24) = 0;
        uint64_t v15 = (_DWORD *)(v19 + 24);
        v15[16] = -1;
        uint64_t v14 = v15 + 16;
        if (v12 == -1)
        {
LABEL_21:
          unsigned int v20 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v20;
          return *(void *)a1 + 96 * v20 - 96;
        }
LABEL_19:
        ((void (*)(char *, _DWORD *, long long *))off_1EC9D0F90[v12])(&v22, v15, &v23);
        *uint64_t v14 = v12;
        if (v29 != -1) {
          ((void (*)(char *, long long *))off_1EC9D0F78[v29])(&v22, &v23);
        }
        goto LABEL_21;
      }
    }
    memmove(v7, v9, v8);
    goto LABEL_18;
  }

  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,mlir::AsmResourceBlob>(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,BOOL &>(uint64_t a1, const void **a2, unsigned char *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 < *(_DWORD *)(a1 + 12))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = (void *)(*(void *)a1 + 96 * v4);
    size_t v8 = *a2;
    size_t v7 = (size_t)a2[1];
    v20[0] = *a3;
    int v21 = 1;
    if (!v8)
    {
      uint64_t v9 = v5 + 96 * v4;
      *(_DWORD *)(v9 + 88) = -1;
      unint64_t v10 = (int *)(v9 + 88);
      uint64_t v11 = v10 - 16;
      *uint64_t v6 = 0;
      v6[1] = 0;
      *((unsigned char *)v6 + 24) = 0;
      v6[2] = 0;
      int v12 = 1;
      goto LABEL_13;
    }
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v7 >= 0x17)
    {
      uint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v13 = v7 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v15 = operator new(v13 + 1);
      v6[1] = v7;
      v6[2] = v14 | 0x8000000000000000;
      *uint64_t v6 = v15;
      uint64_t v6 = v15;
    }
    else
    {
      *((unsigned char *)v6 + 23) = v7;
      if (!v7)
      {
LABEL_12:
        *((unsigned char *)v6 + v7) = 0;
        int v12 = v21;
        uint64_t v16 = v5 + 96 * v4;
        *(unsigned char *)(v16 + 24) = 0;
        uint64_t v11 = (int *)(v16 + 24);
        v11[16] = -1;
        unint64_t v10 = v11 + 16;
        if (v12 == -1)
        {
LABEL_15:
          unsigned int v17 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v17;
          return *(void *)a1 + 96 * v17 - 96;
        }
LABEL_13:
        ((void (*)(char *, int *, unsigned char *))off_1EC9D0F90[v12])(&v19, v11, v20);
        int *v10 = v12;
        if (v21 != -1) {
          ((void (*)(char *, unsigned char *))off_1EC9D0F78[v21])(&v19, v20);
        }
        goto LABEL_15;
      }
    }
    memmove(v6, v8, v7);
    goto LABEL_12;
  }

  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,BOOL &>(a1, (uint64_t)a2, a3);
}

uint64_t llvm::SmallVectorImpl<mlir::FallbackAsmResourceMap::OpaqueAsmResource>::emplace_back<llvm::StringRef,std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 < *(_DWORD *)(a1 + 12))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = (void *)(*(void *)a1 + 96 * v4);
    size_t v8 = *a2;
    size_t v7 = (size_t)a2[1];
    long long v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    int v22 = 2;
    if (!v8)
    {
      uint64_t v9 = v5 + 96 * v4;
      *(_DWORD *)(v9 + 88) = -1;
      unint64_t v10 = (int *)(v9 + 88);
      uint64_t v11 = v10 - 16;
      *uint64_t v6 = 0;
      v6[1] = 0;
      *((unsigned char *)v6 + 24) = 0;
      v6[2] = 0;
      int v12 = 2;
      goto LABEL_13;
    }
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v7 >= 0x17)
    {
      uint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v13 = v7 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v15 = operator new(v13 + 1);
      v6[1] = v7;
      v6[2] = v14 | 0x8000000000000000;
      *uint64_t v6 = v15;
      uint64_t v6 = v15;
    }
    else
    {
      *((unsigned char *)v6 + 23) = v7;
      if (!v7)
      {
LABEL_12:
        *((unsigned char *)v6 + v7) = 0;
        int v12 = v22;
        uint64_t v16 = v5 + 96 * v4;
        *(unsigned char *)(v16 + 24) = 0;
        uint64_t v11 = (int *)(v16 + 24);
        v11[16] = -1;
        unint64_t v10 = v11 + 16;
        if (v12 == -1)
        {
LABEL_15:
          unsigned int v17 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 8) = v17;
          return *(void *)a1 + 96 * v17 - 96;
        }
LABEL_13:
        ((void (*)(char *, int *, long long *))off_1EC9D0F90[v12])(&v19, v11, &v20);
        int *v10 = v12;
        if (v22 != -1) {
          ((void (*)(char *, long long *))off_1EC9D0F78[v22])(&v19, &v20);
        }
        goto LABEL_15;
      }
    }
    memmove(v6, v8, v7);
    goto LABEL_12;
  }

  return llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,std::string>(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t mlir::FallbackAsmResourceMap::ResourceCollection::buildResources(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 40);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(result + 32);
    uint64_t v7 = 96 * v3;
    do
    {
      uint64_t v15 = (uint64_t *)(v6 + v5);
      uint64_t v16 = (uint64_t *)(v6 + v5 + 24);
      int v17 = *(_DWORD *)(v6 + v5 + 88);
      if (v17 == 1)
      {
        int v21 = *((char *)v15 + 23);
        if (v21 >= 0) {
          uint64_t v22 = v6 + v5;
        }
        else {
          uint64_t v22 = *v15;
        }
        if (v21 >= 0) {
          uint64_t v23 = *((unsigned __int8 *)v15 + 23);
        }
        else {
          uint64_t v23 = v15[1];
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 16))(a3, v22, v23, *(unsigned __int8 *)v16);
      }
      else if (v17)
      {
        uint64_t v8 = v6 + v5;
        int v9 = *(char *)(v6 + v5 + 23);
        if (v9 >= 0) {
          uint64_t v10 = v6 + v5;
        }
        else {
          uint64_t v10 = *(void *)(v6 + v5);
        }
        if (v9 >= 0) {
          uint64_t v11 = *(unsigned __int8 *)(v6 + v5 + 23);
        }
        else {
          uint64_t v11 = *(void *)(v6 + v5 + 8);
        }
        int v12 = *(char *)(v8 + 47);
        if (v12 >= 0) {
          uint64_t v13 = v6 + v5 + 24;
        }
        else {
          uint64_t v13 = *v16;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v8 + 47);
        }
        else {
          uint64_t v14 = *(void *)(v8 + 32);
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 24))(a3, v10, v11, v13, v14);
      }
      else
      {
        int v18 = *(char *)(v6 + v5 + 23);
        if (v18 >= 0) {
          uint64_t v19 = v6 + v5;
        }
        else {
          uint64_t v19 = *(void *)(v6 + v5);
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v6 + v5 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v6 + v5 + 8);
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)a3 + 32))(a3, v19, v20, *v16, *(void *)(v6 + v5 + 32), *(unsigned int *)(v6 + v5 + 40));
      }
      v5 += 96;
    }
    while (v7 != v5);
  }
  return result;
}

llvm *mlir::AsmState::AsmState(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, mlir::FallbackAsmResourceMap *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v9 = *(unsigned char *)(a3 + 32);
  if ((v9 & 0x14) == 0)
  {
    uint64_t threadid = llvm::get_threadid(a1);
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(Context);
    *(void *)&long long v19 = &threadid;
    v20[1] = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0,verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0,void>::Callbacks
           + 2;
    mlir::DiagnosticEngine::registerHandler(DiagEngine, &v19);
    char v13 = v20[1];
    if (v20[1] >= 8)
    {
      if ((v20[1] & 4) != 0)
      {
        if ((v20[1] & 2) != 0) {
          uint64_t v14 = (mlir::SourceMgrDiagnosticHandler **)&v19;
        }
        else {
          uint64_t v14 = (mlir::SourceMgrDiagnosticHandler **)v19;
        }
        (*(void (**)(mlir::SourceMgrDiagnosticHandler **, mlir::Diagnostic *))((v20[1] & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 16))(v14, v12);
      }
      if ((v13 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v19, *((void **)&v19 + 1));
      }
    }
    mlir::verify((mlir *)a2, (mlir::Operation *)1);
  }
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v19 = *(_OWORD *)a3;
  *(_OWORD *)uint64_t v20 = v10;
  char v21 = v9;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)(a3 + 33);
  *(_DWORD *)&v22[3] = *(_DWORD *)(a3 + 36);
  uint64_t v15 = operator new(0x2C0uLL);
  *(void *)a1 = mlir::detail::AsmStateImpl::AsmStateImpl((uint64_t)v15, (unsigned int *)a2, &v19, a4);
  if (a5) {
    mlir::AsmState::attachFallbackResourcePrinter(a1, a5);
  }
  return a1;
}

void mlir::AsmState::attachFallbackResourcePrinter(mlir::AsmState *this, mlir::FallbackAsmResourceMap *a2)
{
  mlir::FallbackAsmResourceMap::getPrinters(a2, &__p);
  uint64_t v3 = (uint64_t *)__p;
  unsigned int v4 = v13;
  if (__p == v13)
  {
    if (!__p) {
      return;
    }
    goto LABEL_8;
  }
  do
  {
    uint64_t v5 = *v3;
    *uint64_t v3 = 0;
    uint64_t v11 = v5;
    mlir::AsmState::attachResourcePrinter((uint64_t *)this, &v11);
    uint64_t v6 = v11;
    uint64_t v11 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)__p;
  if (__p)
  {
LABEL_8:
    uint64_t v7 = v13;
    uint64_t v8 = v3;
    if (v13 != v3)
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        *uint64_t v7 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      while (v7 != v3);
      uint64_t v8 = __p;
    }
    char v13 = v3;
    operator delete(v8);
  }
}

mlir::AsmState *mlir::AsmState::AsmState(mlir::AsmState *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, mlir::FallbackAsmResourceMap *a5)
{
  uint64_t v10 = (char *)operator new(0x2C0uLL);
  uint64_t v11 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(v10, a2);
  *(void *)(v11 + 56) = v11 + 72;
  *(void *)(v11 + 64) = 0x600000000;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_DWORD *)(v11 + 136) = 0;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_DWORD *)(v11 + 160) = 0;
  *(_OWORD *)(v11 + 184) = 0u;
  *(void *)(v11 + 168) = v11 + 184;
  *(void *)(v11 + 176) = 0;
  *(void *)(v11 + 200) = v11 + 216;
  *(void *)(v11 + 208) = 0x400000000;
  *(void *)(v11 + 248) = v11 + 264;
  *(_OWORD *)(v11 + 256) = 0u;
  *(void *)(v11 + 272) = 1;
  *(_OWORD *)(v11 + 280) = 0u;
  *(_DWORD *)(v11 + 296) = 0;
  *(_DWORD *)(v11 + 320) = 0;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_DWORD *)(v11 + 344) = 0;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_DWORD *)(v11 + 368) = 0;
  *(_OWORD *)(v11 + 352) = 0u;
  *(_DWORD *)(v11 + 392) = 0;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_DWORD *)(v11 + 416) = 0;
  *(_OWORD *)(v11 + 400) = 0u;
  *(_OWORD *)(v11 + 424) = 0u;
  *(void *)(v11 + 440) = 0;
  *(void *)(v11 + 448) = v11 + 464;
  *(void *)(v11 + 456) = 0x400000000;
  *(void *)(v11 + 496) = v11 + 512;
  *(_OWORD *)(v11 + 504) = 0u;
  *(void *)(v11 + 520) = 1;
  *(void *)(v11 + 528) = 0;
  *((_DWORD *)v10 + 134) = 0;
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v11 + 544));
  *((_DWORD *)v10 + 152) = 0;
  *((void *)v10 + 75) = 0;
  *(_OWORD *)(v10 + 584) = 0u;
  long long v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 616) = *(_OWORD *)a3;
  *(_OWORD *)(v10 + 632) = v12;
  *((void *)v10 + 81) = *(void *)(a3 + 32);
  *((void *)v10 + 82) = a4;
  *(_OWORD *)(v10 + 664) = 0u;
  *((_DWORD *)v10 + 170) = 0;
  *((void *)v10 + 86) = v10 + 704;
  *((void *)v10 + 87) = 0;
  *(void *)a1 = v10;
  if (a5) {
    mlir::AsmState::attachFallbackResourcePrinter(a1, a5);
  }
  return a1;
}

void mlir::AsmState::~AsmState(mlir::detail::AsmStateImpl **this)
{
  char v2 = *this;
  *this = 0;
  if (v2) {
    mlir::detail::AsmStateImpl::~AsmStateImpl(v2);
  }
}

void mlir::AsmState::attachResourcePrinter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 64);
  if (v4 < *(_DWORD *)(*a1 + 68))
  {
    uint64_t v5 = *(void *)(v3 + 56);
    uint64_t v6 = *a2;
    *a2 = 0;
    *(void *)(v5 + 8 * v4) = v6;
    int v7 = v4 + 1;
    goto LABEL_3;
  }
  uint64_t v8 = (char **)(v3 + 56);
  unint64_t v29 = 0;
  uint64_t v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v3 + 56, (void *)(v3 + 72), 0, 8, &v29);
  uint64_t v10 = *(unsigned int *)(v3 + 64);
  uint64_t v11 = 8 * v10;
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)&v9[8 * v10] = v12;
  char v13 = *(char **)(v3 + 56);
  if (v10)
  {
    unint64_t v14 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v14 >= 0xB)
    {
      BOOL v17 = v13 >= &v9[v11] || v9 >= &v13[v11];
      uint64_t v15 = v9;
      uint64_t v16 = *(char **)(v3 + 56);
      if (v17)
      {
        unint64_t v18 = v14 + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v15 = &v9[v19];
        uint64_t v16 = &v13[v19];
        uint64_t v20 = (long long *)(v13 + 16);
        char v21 = v9 + 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(v20 - 1);
          long long v24 = *v20;
          *(v20 - 1) = 0uLL;
          *uint64_t v20 = 0uLL;
          *(v21 - 1) = v23;
          *char v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          uint64_t v26 = (uint64_t)(*v8 - 8);
          do
          {
            uint64_t v27 = *(void *)(v26 + v11);
            *(void *)(v26 + v11) = 0;
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            v11 -= 8;
          }
          while (v11);
          char v13 = *v8;
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v15 = v9;
      uint64_t v16 = *(char **)(v3 + 56);
    }
    do
    {
      uint64_t v25 = *(void *)v16;
      *(void *)uint64_t v16 = 0;
      v16 += 8;
      *(void *)uint64_t v15 = v25;
      v15 += 8;
    }
    while (v16 != &v13[v11]);
    goto LABEL_16;
  }
LABEL_21:
  int v28 = v29;
  if (v13 != (char *)(v3 + 72)) {
    free(v13);
  }
  *(void *)(v3 + 56) = v9;
  int v7 = *(_DWORD *)(v3 + 64) + 1;
  *(_DWORD *)(v3 + 68) = v28;
LABEL_3:
  *(_DWORD *)(v3 + 64) = v7;
}

uint64_t mlir::AsmState::getDialectResources(mlir::AsmState *this)
{
  return *(void *)this + 120;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printLocation(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  if (((_BYTE)a1[6] & 2) == 0)
  {
    uint64_t v6 = *a1;
    int v7 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v7 > 3uLL)
    {
      *int v7 = 677605228;
      *((void *)v6 + 4) += 4;
      if (!a3) {
        goto LABEL_12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, "loc(", 4uLL);
      if (!a3) {
        goto LABEL_12;
      }
    }
    {
      __n128 result = *a1;
      uint64_t v9 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v9 >= *((void *)*a1 + 3))
      {
LABEL_13:
        return llvm::raw_ostream::write(result, 41);
      }
LABEL_11:
      *((void *)result + 4) = v9 + 1;
      unsigned char *v9 = 41;
      return result;
    }
LABEL_12:
    mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)a1, a2, 0, 1);
    __n128 result = *a1;
    uint64_t v9 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v9 >= *((void *)*a1 + 3)) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)a1, a2, 1, 1);
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printLocationInternal(llvm::raw_ostream *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = result;
  if ((a4 & 1) == 0)
  {
    if ((_BYTE)result) {
      return result;
    }
  }
  int v7 = *(void **)(*(void *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id && a2 != 0)
  {
    uint64_t v80 = a2;
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
    uint64_t v15 = v6;
    return (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printLocationInternal(v15, RHS, a3, 0);
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
    __n128 result = *(llvm::raw_ostream **)v6;
    uint64_t v16 = *(void *)(*(void *)v6 + 32);
    unint64_t v17 = *(void *)(*(void *)v6 + 24) - v16;
    if (a3)
    {
      if (v17 > 8)
      {
        *(unsigned char *)(v16 + 8) = 93;
        *(void *)uint64_t v16 = *(void *)"[unknown]";
        *((void *)result + 4) += 9;
        return result;
      }
      unint64_t v18 = "[unknown]";
      size_t v19 = 9;
    }
    else
    {
      if (v17 > 6)
      {
        *(_DWORD *)(v16 + 3) = 1853321070;
        *(_DWORD *)uint64_t v16 = 1852534389;
        *((void *)result + 4) += 7;
        return result;
      }
      unint64_t v18 = "unknown";
      size_t v19 = 7;
    }
    return llvm::raw_ostream::write(result, v18, v19);
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    uint64_t v80 = a2;
    if (a3)
    {
      uint64_t v20 = *(llvm::raw_ostream **)v6;
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
      size_t v23 = v21;
      long long v24 = (void *)*((void *)v20 + 4);
      if (v21 > *((void *)v20 + 3) - (void)v24)
      {
        llvm::raw_ostream::write(v20, AttrData, v21);
        uint64_t v25 = *(llvm::raw_ostream **)v6;
        uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
        if ((unint64_t)v26 >= *((void *)v25 + 3)) {
          goto LABEL_72;
        }
LABEL_70:
        *((void *)v25 + 4) = v26 + 1;
        unsigned char *v26 = 58;
LABEL_73:
        unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v80);
        unsigned int v53 = llvm::raw_ostream::operator<<(v25, Position);
        unint64_t v54 = v53;
        unint64_t v55 = (unsigned char *)*((void *)v53 + 4);
        if ((unint64_t)v55 >= *((void *)v53 + 3))
        {
          unint64_t v54 = llvm::raw_ostream::write(v53, 58);
        }
        else
        {
          *((void *)v53 + 4) = v55 + 1;
          unsigned char *v55 = 58;
        }
        unsigned int Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v80);
        return llvm::raw_ostream::operator<<(v54, Column);
      }
      if (v21)
      {
        memcpy(v24, AttrData, v21);
        *((void *)v20 + 4) += v23;
        uint64_t v25 = *(llvm::raw_ostream **)v6;
        uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
        if ((unint64_t)v26 >= *((void *)v25 + 3)) {
          goto LABEL_72;
        }
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
      uint64_t v32 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
      uint64_t v34 = v33;
      uint64_t v35 = *(llvm::raw_ostream **)v6;
      unsigned int v36 = *(unsigned char **)(*(void *)v6 + 32);
      if (*(unsigned char **)(*(void *)v6 + 24) == v36)
      {
        llvm::raw_ostream::write(v35, "\"", 1uLL);
      }
      else
      {
        *unsigned int v36 = 34;
        ++*((void *)v35 + 4);
      }
      llvm::printEscapedString(v32, v34, *(llvm::raw_ostream **)v6);
      uint64_t v50 = *(llvm::raw_ostream **)v6;
      signed int v51 = *(unsigned char **)(*(void *)v6 + 32);
      if (*(unsigned char **)(*(void *)v6 + 24) == v51)
      {
        llvm::raw_ostream::write(v50, "\"", 1uLL);
        uint64_t v25 = *(llvm::raw_ostream **)v6;
        uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
        if ((unint64_t)v26 < *((void *)v25 + 3)) {
          goto LABEL_70;
        }
        goto LABEL_72;
      }
      *signed int v51 = 34;
      ++*((void *)v50 + 4);
    }
    uint64_t v25 = *(llvm::raw_ostream **)v6;
    uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
    if ((unint64_t)v26 < *((void *)v25 + 3)) {
      goto LABEL_70;
    }
LABEL_72:
    uint64_t v25 = llvm::raw_ostream::write(v25, 58);
    goto LABEL_73;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id && a2 != 0)
  {
    uint64_t v80 = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    uint64_t v27 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    uint64_t v29 = v28;
    uint64_t v30 = *(llvm::raw_ostream **)v6;
    int v31 = *(unsigned char **)(*(void *)v6 + 32);
    if (*(unsigned char **)(*(void *)v6 + 24) == v31)
    {
      llvm::raw_ostream::write(v30, "\"", 1uLL);
    }
    else
    {
      *int v31 = 34;
      ++*((void *)v30 + 4);
    }
    llvm::printEscapedString(v27, v29, *(llvm::raw_ostream **)v6);
    uint64_t v41 = *(llvm::raw_ostream **)v6;
    uint64_t v42 = *(unsigned char **)(*(void *)v6 + 32);
    if (*(unsigned char **)(*(void *)v6 + 24) == v42)
    {
      llvm::raw_ostream::write(v41, "\"", 1uLL);
      __n128 result = (llvm::raw_ostream *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
      if (*(_UNKNOWN **)(*(void *)result + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
        return result;
      }
    }
    else
    {
      *uint64_t v42 = 34;
      ++*((void *)v41 + 4);
      __n128 result = (llvm::raw_ostream *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
      if (*(_UNKNOWN **)(*(void *)result + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
        return result;
      }
    }
    uint64_t v43 = result;
    unsigned int v44 = *(llvm::raw_ostream **)v6;
    unsigned int v45 = *(unsigned char **)(*(void *)v6 + 32);
    if ((unint64_t)v45 >= *(void *)(*(void *)v6 + 24))
    {
      llvm::raw_ostream::write(v44, 40);
    }
    else
    {
      *((void *)v44 + 4) = v45 + 1;
      *unsigned int v45 = 40;
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, v43, a3, 0);
    __n128 result = *(llvm::raw_ostream **)v6;
    signed int v46 = *(char **)(*(void *)v6 + 32);
    if ((unint64_t)v46 >= *(void *)(*(void *)v6 + 24)) {
      return llvm::raw_ostream::write(result, 41);
    }
    *((void *)result + 4) = v46 + 1;
    char v47 = 41;
LABEL_109:
    *signed int v46 = v47;
    return result;
  }
  if (v7 != &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id || a2 == 0)
  {
    if (v7 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id && a2 != 0)
    {
      uint64_t v80 = a2;
      if ((a3 & 1) == 0)
      {
        uint64_t v12 = *(llvm::raw_ostream **)v6;
        uint64_t v13 = *(void *)(*(void *)v6 + 32);
        if ((unint64_t)(*(void *)(*(void *)v6 + 24) - v13) > 4)
        {
          *(unsigned char *)(v13 + 4) = 100;
          *(_DWORD *)uint64_t v13 = 1702065510;
          *((void *)v12 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v12, "fused", 5uLL);
        }
      }
      uint64_t v62 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
      if (v62)
      {
        uint64_t v63 = v62;
        signed int v64 = *(llvm::raw_ostream **)v6;
        v65 = *(unsigned char **)(*(void *)v6 + 32);
        if ((unint64_t)v65 >= *(void *)(*(void *)v6 + 24))
        {
          llvm::raw_ostream::write(v64, 60);
        }
        else
        {
          *((void *)v64 + 4) = v65 + 1;
          unsigned char *v65 = 60;
        }
        int v66 = *(llvm::raw_ostream **)v6;
        int v67 = *(unsigned char **)(*(void *)v6 + 32);
        if ((unint64_t)v67 >= *(void *)(*(void *)v6 + 24))
        {
          llvm::raw_ostream::write(v66, 62);
        }
        else
        {
          *((void *)v66 + 4) = v67 + 1;
          *int v67 = 62;
        }
      }
      int v68 = *(llvm::raw_ostream **)v6;
      int v69 = *(unsigned char **)(*(void *)v6 + 32);
      if ((unint64_t)v69 >= *(void *)(*(void *)v6 + 24))
      {
        llvm::raw_ostream::write(v68, 91);
      }
      else
      {
        *((void *)v68 + 4) = v69 + 1;
        *int v69 = 91;
      }
      unint64_t v70 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
      if (v71)
      {
        unint64_t v72 = v70;
        uint64_t v73 = v71;
        mlir::AsmPrinter::Impl::printLocationInternal(v6, *v70, a3, 0);
        if (v73 != 1)
        {
          v74 = v72 + 1;
          uint64_t v75 = 8 * v73 - 8;
          do
          {
            v77 = *(llvm::raw_ostream **)v6;
            v78 = *(_WORD **)(*(void *)v6 + 32);
            if (*(void *)(*(void *)v6 + 24) - (void)v78 > 1uLL)
            {
              _WORD *v78 = 8236;
              *((void *)v77 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v77, ", ", 2uLL);
            }
            uint64_t v76 = *v74++;
            mlir::AsmPrinter::Impl::printLocationInternal(v6, v76, a3, 0);
            v75 -= 8;
          }
          while (v75);
        }
      }
      __n128 result = *(llvm::raw_ostream **)v6;
      signed int v46 = *(char **)(*(void *)v6 + 32);
      if ((unint64_t)v46 >= *(void *)(*(void *)v6 + 24)) {
        return llvm::raw_ostream::write(result, 93);
      }
      *((void *)result + 4) = v46 + 1;
      char v47 = 93;
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v80 = a2;
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
    uint64_t v38 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    uint64_t v39 = v38;
    if (a3)
    {
      mlir::AsmPrinter::Impl::printLocationInternal(v6, v38, a3, 0);
      if (*(_UNKNOWN **)(*(void *)v39 + 136) == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
      {
        BOOL v40 = *(llvm::raw_ostream **)v6;
        if (*(_UNKNOWN **)(*(void *)LHS + 136) == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id) {
          goto LABEL_87;
        }
      }
      else
      {
        BOOL v40 = *(llvm::raw_ostream **)v6;
      }
      ++*((_DWORD *)v6 + 14);
      int v60 = (unsigned char *)*((void *)v40 + 4);
      if ((unint64_t)v60 >= *((void *)v40 + 3))
      {
        BOOL v40 = llvm::raw_ostream::write(v40, 10);
      }
      else
      {
        *((void *)v40 + 4) = v60 + 1;
        *int v60 = 10;
      }
LABEL_87:
      unsigned int v61 = (_DWORD *)*((void *)v40 + 4);
      if (*((void *)v40 + 3) - (void)v61 > 3uLL)
      {
        *unsigned int v61 = 544497952;
        *((void *)v40 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v40, " at ", 4uLL);
      }
      uint64_t v15 = v6;
      uint64_t RHS = LHS;
      return (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printLocationInternal(v15, RHS, a3, 0);
    }
    unsigned int v48 = *(llvm::raw_ostream **)v6;
    uint64_t v49 = *(void *)(*(void *)v6 + 32);
    if ((unint64_t)(*(void *)(*(void *)v6 + 24) - v49) > 8)
    {
      *(unsigned char *)(v49 + 8) = 40;
      *(void *)uint64_t v49 = *(void *)"callsite(";
      *((void *)v48 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v48, "callsite(", 9uLL);
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, v39, a3, 0);
    unint64_t v57 = *(llvm::raw_ostream **)v6;
    uint64_t v58 = *(_DWORD **)(*(void *)v6 + 32);
    if (*(void *)(*(void *)v6 + 24) - (void)v58 > 3uLL)
    {
      *uint64_t v58 = 544497952;
      *((void *)v57 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v57, " at ", 4uLL);
    }
    mlir::AsmPrinter::Impl::printLocationInternal(v6, LHS, a3, 0);
    __n128 result = *(llvm::raw_ostream **)v6;
    v59 = *(unsigned char **)(*(void *)v6 + 32);
    if (*(unsigned char **)(*(void *)v6 + 24) == v59)
    {
      return llvm::raw_ostream::write(result, ")", 1uLL);
    }
    else
    {
      unsigned char *v59 = 41;
      ++*((void *)result + 4);
    }
  }
  return result;
}

uint64_t anonymous namespace'::AliasState::getAlias(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 4);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v7 = (void *)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        int v7 = (void *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  int v7 = (void *)(v4 + 16 * v5);
LABEL_8:
  BOOL v11 = v7 == (void *)(v4 + 16 * v5);
  uint64_t v12 = (unsigned int *)(a1 + 4);
  if (!v11) {
    uint64_t v12 = (unsigned int *)(v7 + 1);
  }
  uint64_t v13 = *v12;
  if (v13 == *((_DWORD *)a1 + 8)) {
    return 0;
  }
  uint64_t v15 = a1[3] + 32 * v13;
  uint64_t v16 = v15 + 8;
  if ((*(unsigned char *)(v15 + 27) & 0x40) != 0) {
    unint64_t v17 = "!";
  }
  else {
    unint64_t v17 = "#";
  }
  unint64_t v18 = (char *)*((void *)a3 + 4);
  if (*((char **)a3 + 3) == v18)
  {
    uint64_t v20 = llvm::raw_ostream::write(a3, v17, 1uLL);
    size_t v19 = (void *)*((void *)v20 + 4);
    size_t v21 = (_DWORD *)(v15 + 24);
    uint64_t v22 = *(const void **)v16;
    size_t v23 = *(void *)(v16 + 8);
    if (v23 > *((void *)v20 + 3) - (void)v19) {
      goto LABEL_17;
    }
LABEL_19:
    if (v23)
    {
      memcpy(v19, v22, v23);
      *((void *)v20 + 4) += v23;
    }
    goto LABEL_21;
  }
  *unint64_t v18 = *v17;
  size_t v19 = (void *)(*((void *)a3 + 4) + 1);
  *((void *)a3 + 4) = v19;
  uint64_t v20 = a3;
  size_t v21 = (_DWORD *)(v15 + 24);
  uint64_t v22 = *(const void **)v16;
  size_t v23 = *(void *)(v16 + 8);
  if (v23 <= *((void *)a3 + 3) - (void)v19) {
    goto LABEL_19;
  }
LABEL_17:
  llvm::raw_ostream::write(v20, (const char *)v22, v23);
LABEL_21:
  if ((*v21 & 0x3FFFFFFF) != 0) {
    llvm::raw_ostream::operator<<(a3, *v21 & 0x3FFFFFFF);
  }
  return 1;
}

uint64_t mlir::AsmPrinter::Impl::printResourceHandle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = mlir::Dialect::getRegisteredInterface<mlir::OpAsmDialectInterface>(a2[2]);
  uint64_t v5 = *(llvm::raw_ostream **)a1;
  (*(void (**)(void **__return_ptr))(*(void *)v4 + 40))(__p);
  if ((v27 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    size_t v7 = v27;
  }
  else {
    size_t v7 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v5, (const char *)v6, v7);
  if (((char)v27 & 0x80000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(v8 + 120);
    uint64_t v9 = v8 + 120;
    uint64_t v10 = v11;
    uint64_t v12 = (void *)a2[2];
    __p[0] = v12;
    int v13 = *(_DWORD *)(v9 + 16);
    if (v13) {
      goto LABEL_9;
    }
LABEL_20:
    long long v24 = 0;
LABEL_21:
    uint64_t v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::InsertIntoBucket<mlir::Dialect *>(v9, v24, (uint64_t *)__p);
    return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
  }
  operator delete(__p[0]);
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = *(void *)(v22 + 120);
  uint64_t v9 = v22 + 120;
  uint64_t v10 = v23;
  uint64_t v12 = (void *)a2[2];
  __p[0] = v12;
  int v13 = *(_DWORD *)(v9 + 16);
  if (!v13) {
    goto LABEL_20;
  }
LABEL_9:
  int v14 = v13 - 1;
  unsigned int v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v13 - 1);
  uint64_t v16 = (uint64_t *)(v10 + 48 * v15);
  uint64_t v17 = *v16;
  if (v12 != (void *)*v16)
  {
    unint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        unint64_t v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      uint64_t v16 = (uint64_t *)(v10 + 48 * (v21 & v14));
      uint64_t v17 = *v16;
      if (v12 == (void *)*v16) {
        return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
      }
    }
    if (v18) {
      long long v24 = v18;
    }
    else {
      long long v24 = v16;
    }
    goto LABEL_21;
  }
  return llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>::insert((uint64_t)(v16 + 1), a2);
}

uint64_t mlir::AsmPrinter::Impl::printAlias(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 144);
  uint64_t v4 = *(unsigned int *)(v2 + 160);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (void *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (void *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = (void *)(v3 + 16 * v4);
LABEL_8:
  BOOL v10 = v6 == (void *)(v3 + 16 * v4);
  uint64_t v11 = (unsigned int *)(v2 + 176);
  if (!v10) {
    uint64_t v11 = (unsigned int *)(v6 + 1);
  }
  uint64_t v12 = *v11;
  if (v12 == *(_DWORD *)(v2 + 176)) {
    return 0;
  }
  int v14 = *(llvm::raw_ostream **)a1;
  uint64_t v15 = *(void *)(v2 + 168) + 32 * v12;
  uint64_t v16 = v15 + 8;
  if ((*(unsigned char *)(v15 + 27) & 0x40) != 0) {
    uint64_t v17 = "!";
  }
  else {
    uint64_t v17 = "#";
  }
  unint64_t v18 = (char *)*((void *)v14 + 4);
  if (*((char **)v14 + 3) == v18)
  {
    BOOL v20 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v17, 1uLL);
    int v19 = (void *)*((void *)v20 + 4);
    unsigned int v21 = (_DWORD *)(v15 + 24);
    uint64_t v22 = *(const void **)v16;
    size_t v23 = *(void *)(v16 + 8);
    if (v23 > *((void *)v20 + 3) - (void)v19) {
      goto LABEL_17;
    }
LABEL_19:
    if (v23)
    {
      memcpy(v19, v22, v23);
      *((void *)v20 + 4) += v23;
    }
    goto LABEL_21;
  }
  *unint64_t v18 = *v17;
  int v19 = (void *)(*((void *)v14 + 4) + 1);
  *((void *)v14 + 4) = v19;
  BOOL v20 = v14;
  unsigned int v21 = (_DWORD *)(v15 + 24);
  uint64_t v22 = *(const void **)v16;
  size_t v23 = *(void *)(v16 + 8);
  if (v23 <= *((void *)v14 + 3) - (void)v19) {
    goto LABEL_19;
  }
LABEL_17:
  llvm::raw_ostream::write(v20, (const char *)v22, v23);
LABEL_21:
  if ((*v21 & 0x3FFFFFFF) != 0) {
    llvm::raw_ostream::operator<<(v14, *v21 & 0x3FFFFFFF);
  }
  return 1;
}

void mlir::AsmPrinter::Impl::printAttributeImpl(llvm::raw_ostream **a1, uint64_t **a2, int a3)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(**a2 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
  {
    mlir::AsmPrinter::Impl::printDialectAttribute((uint64_t)a1, a2);
LABEL_8:
    if (a3 != 2)
    {
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)(*a2 + 1)))
      {
        v144[0] = 0uLL;
        return;
      }
      uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)(*a2 + 1));
      v144[0].n128_u64[0] = (unint64_t)a2;
      v144[0].n128_u64[1] = v14;
      if (a2)
      {
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v144);
        if (*(_UNKNOWN **)(*(void *)canMapOperands + 136) != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
        {
          uint64_t v16 = canMapOperands;
          uint64_t v17 = *a1;
          uint64_t v18 = *((void *)*a1 + 4);
          if ((unint64_t)(*((void *)*a1 + 3) - v18) > 2)
          {
            *(unsigned char *)(v18 + 2) = 32;
            *(_WORD *)uint64_t v18 = 14880;
            *((void *)v17 + 4) += 3;
            if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)a1, v16))
            {
LABEL_37:
              mlir::AsmPrinter::Impl::printTypeImpl(a1, v16);
              return;
            }
          }
          else
          {
            llvm::raw_ostream::write(v17, " : ", 3uLL);
            if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)a1, v16)) {
              goto LABEL_37;
            }
          }
        }
      }
    }
    return;
  }
  uint64_t v6 = (void *)(*a2)[17];
  if (v6 == &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  v143 = v7;
  if (v7)
  {
    int v8 = *a1;
    v144[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v143);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v144);
    size_t v11 = v10;
    uint64_t v12 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v143);
    printDialectSymbol(v8, "#", 1uLL, AttrData, v11, v12, v13);
    goto LABEL_8;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    uint64_t v33 = *a1;
    uint64_t v34 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v34 > 3uLL)
    {
      *uint64_t v34 = 1953066613;
      *((void *)v33 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v33, "unit", 4uLL);
    }
    return;
  }
  {
    v144[0].n128_u64[0] = (unint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
    v144[0].n128_u64[1] = 68;
    unint64_t v116 = llvm::StringRef::find((uint64_t *)v144, "DesiredTypeName = ", 0x12uLL, 0);
    if (v144[0].n128_u64[1] >= v116) {
      unint64_t v117 = v116;
    }
    else {
      unint64_t v117 = v144[0].n128_u64[1];
    }
    unint64_t v118 = v144[0].n128_u64[0] + v117;
    unint64_t v119 = v144[0].n128_u64[1] - v117;
    if (v144[0].n128_u64[1] - v117 >= 0x12) {
      uint64_t v120 = 18;
    }
    else {
      uint64_t v120 = v144[0].n128_u64[1] - v117;
    }
    unint64_t v121 = v119 - v120;
    if (v121 >= v121 - 1) {
      uint64_t v122 = v121 - 1;
    }
    else {
      uint64_t v122 = v121;
    }
    mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v118 + v120, v122);
  }
  if (v6 == (void *)mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id) {
    int v19 = a2;
  }
  else {
    int v19 = 0;
  }
  v142 = v19;
  if (v19)
  {
    BOOL v20 = *a1;
    uint64_t v21 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v21) > 8)
    {
      *(unsigned char *)(v21 + 8) = 91;
      *(void *)uint64_t v21 = *(void *)"distinct[";
      *((void *)v20 + 4) += 9;
      uint64_t v22 = a1[1];
      unsigned int v23 = *((_DWORD *)v22 + 152);
      if (v23)
      {
LABEL_26:
        uint64_t v24 = *((void *)v22 + 74);
        unsigned int v25 = v23 - 1;
        unsigned int v26 = ((v19 >> 4) ^ (v19 >> 9)) & (v23 - 1);
        unsigned __int8 v27 = (uint64_t ***)(v24 + 16 * v26);
        uint64_t v28 = *v27;
        if (*v27 == v19) {
          goto LABEL_52;
        }
        uint64_t v29 = 0;
        int v30 = 1;
        while (v28 != (uint64_t **)-4096)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == (uint64_t **)-8192;
          }
          if (v31) {
            uint64_t v29 = v27;
          }
          unsigned int v32 = v26 + v30++;
          unsigned int v26 = v32 & v25;
          unsigned __int8 v27 = (uint64_t ***)(v24 + 16 * (v32 & v25));
          uint64_t v28 = *v27;
          if (*v27 == v19) {
            goto LABEL_52;
          }
        }
        if (v29) {
          unsigned __int8 v27 = v29;
        }
        int v40 = *((_DWORD *)v22 + 150);
        if (4 * v40 + 4 >= 3 * v23) {
          goto LABEL_143;
        }
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v20 = llvm::raw_ostream::write(*a1, "distinct[", 9uLL);
      uint64_t v22 = a1[1];
      unsigned int v23 = *((_DWORD *)v22 + 152);
      if (v23) {
        goto LABEL_26;
      }
    }
    unsigned __int8 v27 = 0;
    int v40 = *((_DWORD *)v22 + 150);
    if (4 * v40 + 4 >= 3 * v23)
    {
LABEL_143:
      v23 *= 2;
      goto LABEL_144;
    }
LABEL_48:
    if (v23 + ~v40 - *((_DWORD *)v22 + 151) > v23 >> 3)
    {
      uint64_t v41 = *v27;
      ++*((_DWORD *)v22 + 150);
      if (v41 == (uint64_t **)-4096)
      {
LABEL_51:
        *unsigned __int8 v27 = v19;
        v27[1] = (uint64_t **)(*((void *)v22 + 73))++;
LABEL_52:
        uint64_t v42 = llvm::raw_ostream::operator<<(v20, (unint64_t)v27[1]);
        uint64_t v43 = (_WORD *)*((void *)v42 + 4);
        if (*((void *)v42 + 3) - (void)v43 > 1uLL)
        {
          *uint64_t v43 = 15453;
          *((void *)v42 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v42, "]<", 2uLL);
        }
        if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v142) + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
        {
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v142);
          if (Value)
          {
            uint64_t v45 = Value;
              mlir::AsmPrinter::Impl::printAttributeImpl(a1, v45, 0);
          }
          else
          {
            signed int v46 = *a1;
            uint64_t v47 = *((void *)*a1 + 4);
            if ((unint64_t)(*((void *)*a1 + 3) - v47) > 0x11)
            {
              *(_WORD *)(v47 + 16) = 15934;
              *(_OWORD *)uint64_t v47 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              *((void *)v46 + 4) += 18;
            }
            else
            {
              llvm::raw_ostream::write(v46, "<<NULL ATTRIBUTE>>", 0x12uLL);
            }
          }
        }
        goto LABEL_81;
      }
LABEL_50:
      --*((_DWORD *)v22 + 151);
      goto LABEL_51;
    }
LABEL_144:
    llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)v22 + 592, v23);
    uint64_t v85 = *((void *)v22 + 74);
    int v86 = *((_DWORD *)v22 + 152) - 1;
    unsigned int v87 = v86 & ((v19 >> 4) ^ (v19 >> 9));
    unsigned __int8 v27 = (uint64_t ***)(v85 + 16 * v87);
    unsigned int v88 = *v27;
    if (*v27 == v19)
    {
LABEL_145:
      ++*((_DWORD *)v22 + 150);
      if (v19 == (uint64_t **)-4096) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v124 = 0;
      int v125 = 1;
      while (v88 != (uint64_t **)-4096)
      {
        if (v124) {
          BOOL v126 = 0;
        }
        else {
          BOOL v126 = v88 == (uint64_t **)-8192;
        }
        if (v126) {
          uint64_t v124 = v27;
        }
        unsigned int v127 = v87 + v125++;
        unsigned int v87 = v127 & v86;
        unsigned __int8 v27 = (uint64_t ***)(v85 + 16 * (v127 & v86));
        unsigned int v88 = *v27;
        if (*v27 == v19) {
          goto LABEL_145;
        }
      }
      if (v124) {
        unsigned __int8 v27 = v124;
      }
      int v128 = *v27;
      ++*((_DWORD *)v22 + 150);
      if (v128 == (uint64_t **)-4096) {
        goto LABEL_51;
      }
    }
    goto LABEL_50;
  }
  uint64_t v35 = *a2;
  unsigned int v36 = (void *)(*a2)[17];
  if (v36 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v37 = a2;
  }
  else {
    uint64_t v37 = 0;
  }
  v141 = v37;
  if (v37)
  {
    uint64_t v38 = *a1;
    uint64_t v39 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v39 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v38, 123);
    }
    else
    {
      *((void *)v38 + 4) = v39 + 1;
      *uint64_t v39 = 123;
    }
    uint64_t v52 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v141);
    if (v53)
    {
      unint64_t v54 = v52;
      uint64_t v55 = v53;
      int v56 = *a1;
      mlir::AsmPrinter::Impl::printNamedAttribute(a1, *v52, v52[1]);
      if (v55 != 1)
      {
        unint64_t v57 = &v54[2 * v55];
        uint64_t v58 = v54 + 2;
        do
        {
          while (1)
          {
            unsigned int v61 = (_WORD *)*((void *)v56 + 4);
            if (*((void *)v56 + 3) - (void)v61 <= 1uLL) {
              break;
            }
            *unsigned int v61 = 8236;
            *((void *)v56 + 4) += 2;
            uint64_t v59 = *v58;
            uint64_t v60 = v58[1];
            v58 += 2;
            mlir::AsmPrinter::Impl::printNamedAttribute(a1, v59, v60);
            if (v58 == v57) {
              goto LABEL_76;
            }
          }
          llvm::raw_ostream::write(v56, ", ", 2uLL);
          uint64_t v62 = *v58;
          uint64_t v63 = v58[1];
          v58 += 2;
          mlir::AsmPrinter::Impl::printNamedAttribute(a1, v62, v63);
        }
        while (v58 != v57);
      }
    }
LABEL_76:
    signed int v64 = *a1;
    v65 = (char *)*((void *)*a1 + 4);
    if ((unint64_t)v65 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v64, 125);
      goto LABEL_8;
    }
    *((void *)v64 + 4) = v65 + 1;
    char v66 = 125;
    goto LABEL_78;
  }
  if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    unsigned int v48 = a2;
  }
  else {
    unsigned int v48 = 0;
  }
  int v140 = v48;
  if (!v48)
  {
    if (v36 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
      int v69 = a2;
    }
    else {
      int v69 = 0;
    }
    uint64_t v139 = (uint64_t)v69;
    if (v69)
    {
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v139, (uint64_t)v144);
      printFloatValue((const llvm::APFloat *)v144, *a1);
      llvm::APFloat::~APFloat((llvm::APFloat *)v144);
      if (a3 == 1)
      {
        v144[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v139);
        if (mlir::Type::isF64((mlir::Type *)v144)) {
          return;
        }
      }
      goto LABEL_8;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
      uint64_t v73 = a2;
    }
    else {
      uint64_t v73 = 0;
    }
    int v138 = v73;
    if (v73)
    {
      v74 = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v138);
      mlir::AsmPrinter::Impl::printEscapedString(a1, v74, v75);
      goto LABEL_8;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
      uint64_t v76 = a2;
    }
    else {
      uint64_t v76 = 0;
    }
    v137 = v76;
    if (v76)
    {
      v77 = *a1;
      v78 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v78 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v77, 91);
      }
      else
      {
        *((void *)v77 + 4) = v78 + 1;
        unsigned char *v78 = 91;
      }
      v144[0].n128_u64[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v137);
      v144[0].n128_u64[1] = v80;
      llvm::interleaveComma<llvm::ArrayRef<mlir::Attribute>,mlir::AsmPrinter::Impl::printAttributeImpl(mlir::Attribute,mlir::AsmPrinter::Impl::AttrTypeElision)::$_1,llvm::raw_ostream,mlir::Attribute const>((llvm::raw_ostream *)v144, *a1, a1);
      int v81 = *a1;
      v65 = (char *)*((void *)*a1 + 4);
      if ((unint64_t)v65 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v81, 93);
        goto LABEL_8;
      }
      *((void *)v81 + 4) = v65 + 1;
      char v66 = 93;
      goto LABEL_78;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
      unsigned int v79 = a2;
    }
    else {
      unsigned int v79 = 0;
    }
    v136 = v79;
    if (v79)
    {
      llvm::raw_ostream::operator<<(*a1, "affine_map<");
      v144[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v136);
      mlir::AffineMap::print((mlir::AffineMap *)v144, *a1);
LABEL_81:
      int v67 = *a1;
      int v68 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v68 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v67, 62);
      }
      else
      {
        *((void *)v67 + 4) = v68 + 1;
        *int v68 = 62;
      }
      return;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id) {
      v82 = a2;
    }
    else {
      v82 = 0;
    }
    v135 = v82;
    if (v82)
    {
      llvm::raw_ostream::operator<<(*a1, "affine_set<");
      v144[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v135);
      mlir::IntegerSet::print((mlir::IntegerSet *)v144, *a1);
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
      v83 = a2;
    }
    else {
      v83 = 0;
    }
    v134 = v83;
    if (v83)
    {
      uint64_t v84 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v134);
      mlir::AsmPrinter::Impl::printType((uint64_t)a1, v84);
      goto LABEL_8;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
      v89 = a2;
    }
    else {
      v89 = 0;
    }
    uint64_t v133 = v89;
    if (v89)
    {
      v144[0].n128_u64[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v133);
      v90 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v144);
      printSymbolReference(v90, v91, *a1);
      uint64_t v92 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v133);
      if (v93)
      {
        v94 = (unint64_t *)v92;
        uint64_t v95 = 8 * v93;
        do
        {
          unint64_t v96 = *v94++;
          v144[0].n128_u64[0] = v96;
          llvm::raw_ostream::operator<<(*a1, "::");
          uint64_t v97 = (char *)mlir::FlatSymbolRefAttr::getValue((mlir::FlatSymbolRefAttr *)v144);
          printSymbolReference(v97, v98, *a1);
          v95 -= 8;
        }
        while (v95);
      }
      goto LABEL_8;
    }
    if (v36 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id && a2)
    {
      uint64_t v99 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)(v35 + 1));
      int shouldElideElementsAttr = mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), (uint64_t)a2, v99);
      v101 = *a1;
      if (!shouldElideElementsAttr)
      {
        llvm::raw_ostream::operator<<(v101, "dense<");
        mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, (uint64_t)a2, 1);
LABEL_170:
        int v108 = *a1;
        v65 = (char *)*((void *)*a1 + 4);
        if ((unint64_t)v65 >= *((void *)*a1 + 3))
        {
          llvm::raw_ostream::write(v108, 62);
          goto LABEL_8;
        }
        *((void *)v108 + 4) = v65 + 1;
        char v66 = 62;
LABEL_78:
        char *v65 = v66;
        goto LABEL_8;
      }
    }
    else
    {
      if (v36 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id || !a2)
      {
        if (v36 == &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id) {
          v104 = a2;
        }
        else {
          v104 = 0;
        }
        unint64_t v132 = v104;
        if (!v104)
        {
          if (v36 == &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id) {
            unsigned int v109 = a2;
          }
          else {
            unsigned int v109 = 0;
          }
          v131 = v109;
          if (v109)
          {
            mlir::StridedLayoutAttr::print((llvm::raw_ostream *)&v131, *a1);
          }
          else
          {
            if (v36 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id) {
              uint64_t v113 = (uint64_t)a2;
            }
            else {
              uint64_t v113 = 0;
            }
            uint64_t v130 = v113;
            if (v113)
            {
              llvm::raw_ostream::operator<<(*a1, "array<");
              uint64_t v114 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v130);
              mlir::AsmPrinter::Impl::printType((uint64_t)a1, v114);
              if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v130))
              {
                llvm::raw_ostream::operator<<(*a1, ": ");
                mlir::AsmPrinter::Impl::printDenseArrayAttr(a1, v130);
              }
              llvm::raw_ostream::operator<<(*a1, ">");
              return;
            }
            if (v36 == &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id) {
              uint64_t v123 = a2;
            }
            else {
              uint64_t v123 = 0;
            }
            v129 = v123;
            if (v123)
            {
              llvm::raw_ostream::operator<<(*a1, "dense_resource<");
              mlir::DenseResourceElementsAttr::getRawHandle((mlir::DenseResourceElementsAttr *)&v129, v144);
              mlir::AsmPrinter::Impl::printResourceHandle((uint64_t)a1, (uint64_t *)v144);
              llvm::raw_ostream::operator<<(*a1, ">");
            }
            else
            {
              if (!mlir::LocationAttr::classof((uint64_t)a2) || !a2) {
                llvm::report_fatal_error((llvm *)"Unknown builtin attribute", (const char *)1);
              }
              mlir::AsmPrinter::Impl::printLocation(a1, (uint64_t)a2, 0);
            }
          }
          goto LABEL_8;
        }
        uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v132);
        uint64_t v106 = (uint64_t)RHS;
        if (RHS) {
          uint64_t v107 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*RHS + 8);
        }
        else {
          uint64_t v107 = 0;
        }
        if ((mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), v106, v107) & 1) != 0
          || ((Values = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v132),
               (uint64_t v111 = (uint64_t)Values) == 0)
            ? (uint64_t v112 = 0)
            : (uint64_t v112 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*Values + 8)),
              mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), v111, v112)))
        {
          printElidedElementsAttr(*a1);
          goto LABEL_8;
        }
        llvm::raw_ostream::operator<<(*a1, "sparse<");
        v144[0].n128_u64[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v132);
        if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v144))
        {
          mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, v144[0].n128_i64[0], 0);
          llvm::raw_ostream::operator<<(*a1, ", ");
          uint64_t v115 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v132);
          mlir::AsmPrinter::Impl::printDenseElementsAttr(a1, v115, 1);
        }
        goto LABEL_170;
      }
      uint64_t v102 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)(v35 + 1));
      int v103 = mlir::OpPrintingFlags::shouldElideElementsAttr((uint64_t)(a1 + 2), (uint64_t)a2, v102);
      v101 = *a1;
      if (!v103)
      {
        llvm::raw_ostream::operator<<(v101, "dense<");
        mlir::AsmPrinter::Impl::printDenseStringElementsAttr(a1, (uint64_t)a2);
        goto LABEL_170;
      }
    }
    printElidedElementsAttr(v101);
    goto LABEL_8;
  }
  uint64_t v139 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v140);
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v139, 1))
  {
    uint64_t v49 = *a1;
    mlir::IntegerAttr::getValue(&v140, (llvm::APInt *)v144);
    unsigned __int32 v50 = v144[0].n128_u32[2];
    if (v144[0].n128_u32[2] > 0x40) {
      BOOL v51 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v144) == v50;
    }
    else {
      BOOL v51 = v144[0].n128_u64[0] == 0;
    }
    if (v51) {
      unint64_t v72 = "false";
    }
    else {
      unint64_t v72 = "true";
    }
    llvm::raw_ostream::operator<<(v49, v72);
    if (v144[0].n128_u32[2] >= 0x41 && v144[0].n128_u64[0]) {
      operator delete[]((void *)v144[0].n128_u64[0]);
    }
    return;
  }
  char v70 = !mlir::Type::isUnsignedInteger((mlir::Type *)&v139) && !mlir::Type::isSignlessInteger((mlir::Type *)&v139, 1);
  mlir::IntegerAttr::getValue(&v140, (llvm::APInt *)v144);
  llvm::APInt::print((llvm::APInt *)v144, *a1, v70);
  if (v144[0].n128_u32[2] >= 0x41 && v144[0].n128_u64[0]) {
    operator delete[]((void *)v144[0].n128_u64[0]);
  }
  if (a3 != 1 || !mlir::Type::isSignlessInteger((mlir::Type *)&v139, 64)) {
    goto LABEL_8;
  }
}

void mlir::AsmPrinter::Impl::printDialectAttribute(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = **a2;
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  int v16 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  int v22 = 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = &unk_1EC9A38B8;
  unsigned int v23 = (void **)&v24;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  uint64_t v5 = *(void *)(a1 + 8);
  v10[0] = &v15;
  v10[1] = v5;
  uint64_t v13 = *(void *)(v5 + 648);
  long long v6 = *(_OWORD *)(v5 + 632);
  long long v11 = *(_OWORD *)(v5 + 616);
  long long v12 = v6;
  int v14 = 1;
  v9[1] = v10;
  v9[0] = &unk_1EC9AA830;
  (*(void (**)(uint64_t, uint64_t **, void *))(*(void *)v4 + 40))(v4, a2, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (v26 >= 0) {
    uint64_t v7 = (char *)&v24;
  }
  else {
    uint64_t v7 = v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  printDialectSymbol(*(llvm::raw_ostream **)a1, "#", 1uLL, *(const char **)(v4 + 8), *(void *)(v4 + 16), v7, v8);
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
}

llvm::raw_ostream *printDialectSymbol(llvm::raw_ostream *a1, const char *a2, size_t a3, const char *a4, size_t a5, char *a6, size_t a7)
{
  long long v12 = a1;
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v13 = (void *)*((void *)a1 + 4);
  if (a3 > v14 - (uint64_t)v13)
  {
    uint64_t v15 = llvm::raw_ostream::write(v12, a2, a3);
    uint64_t v13 = (void *)*((void *)v15 + 4);
    if (a5 <= *((void *)v15 + 3) - (void)v13) {
      goto LABEL_3;
    }
LABEL_10:
    llvm::raw_ostream::write(v15, a4, a5);
    if (!a7) {
      goto LABEL_35;
    }
    goto LABEL_11;
  }
  if (a3)
  {
    memcpy(v13, a2, a3);
    uint64_t v13 = (void *)(*((void *)v12 + 4) + a3);
    *((void *)v12 + 4) = v13;
  }
  uint64_t v15 = v12;
  if (a5 > *((void *)v12 + 3) - (void)v13) {
    goto LABEL_10;
  }
LABEL_3:
  if (a5)
  {
    memcpy(v13, a4, a5);
    *((void *)v15 + 4) += a5;
  }
  if (!a7) {
    goto LABEL_35;
  }
LABEL_11:
  unsigned int v16 = *a6;
  if ((v16 & 0x80000000) != 0)
  {
    if (!__maskrune(v16, 0x100uLL)) {
      goto LABEL_35;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v16 + 60) & 0x100) == 0)
  {
    goto LABEL_35;
  }
  size_t v17 = 0;
  while (1)
  {
    int v18 = a6[v17];
    if (v18 != 95)
    {
      BOOL v19 = v18 != 46 && (v18 - 48) >= 0xA;
      if (v19 && (v18 & 0xFFFFFFDF) - 65 > 0x19) {
        break;
      }
    }
    if (a7 == ++v17) {
      goto LABEL_32;
    }
  }
  BOOL v21 = a7 > v17;
  if (a7 < v17) {
    size_t v17 = a7;
  }
  if (v21 && (a6[v17] != 60 || a6[v17 + a7 + ~v17] != 62))
  {
LABEL_35:
    size_t v25 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v25 >= *((void *)v12 + 3))
    {
      long long v12 = llvm::raw_ostream::write(v12, 60);
      __n128 result = (llvm::raw_ostream *)*((void *)v12 + 4);
      if (a7 <= *((void *)v12 + 3) - (void)result)
      {
LABEL_37:
        if (a7)
        {
          memcpy(result, a6, a7);
          __n128 result = (llvm::raw_ostream *)(*((void *)v12 + 4) + a7);
          *((void *)v12 + 4) = result;
        }
        if ((unint64_t)result < *((void *)v12 + 3)) {
          goto LABEL_40;
        }
LABEL_43:
        return llvm::raw_ostream::write(v12, 62);
      }
    }
    else
    {
      *((void *)v12 + 4) = v25 + 1;
      *size_t v25 = 60;
      __n128 result = (llvm::raw_ostream *)*((void *)v12 + 4);
      if (a7 <= *((void *)v12 + 3) - (void)result) {
        goto LABEL_37;
      }
    }
    long long v12 = llvm::raw_ostream::write(v12, a6, a7);
    __n128 result = (llvm::raw_ostream *)*((void *)v12 + 4);
    if ((unint64_t)result < *((void *)v12 + 3))
    {
LABEL_40:
      *((void *)v12 + 4) = (char *)result + 1;
      *(unsigned char *)__n128 result = 62;
      return result;
    }
    goto LABEL_43;
  }
LABEL_32:
  int v22 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v22 >= *((void *)v12 + 3))
  {
    long long v12 = llvm::raw_ostream::write(v12, 46);
    unsigned int v23 = (void *)*((void *)v12 + 4);
    if (a7 <= *((void *)v12 + 3) - (void)v23) {
      goto LABEL_34;
    }
  }
  else
  {
    *((void *)v12 + 4) = v22 + 1;
    *int v22 = 46;
    unsigned int v23 = (void *)*((void *)v12 + 4);
    if (a7 <= *((void *)v12 + 3) - (void)v23)
    {
LABEL_34:
      __n128 result = (llvm::raw_ostream *)memcpy(v23, a6, a7);
      *((void *)v12 + 4) += a7;
      return result;
    }
  }

  return llvm::raw_ostream::write(v12, a6, a7);
}

void printFloatValue(const llvm::APFloat *a1, llvm::raw_ostream *a2)
{
  v17[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const llvm::APFloat *)((char *)a1 + 8);
  uint64_t v5 = (void *)*((void *)a1 + 1);
  long long v6 = llvm::APFloatBase::PPCDoubleDouble(a1);
  uint64_t v7 = (const llvm::APFloat *)*((void *)a1 + 2);
  if (v6 != v5) {
    uint64_t v7 = a1;
  }
  if ((*((unsigned char *)v7 + 28) & 6) == 0)
  {
LABEL_28:
    uint64_t v15 = v17;
    long long v16 = xmmword_181101A00;
    if (v6 == v5) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v4, (llvm::APInt *)&__p);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt(v4, (uint64_t)&__p);
    }
    llvm::APInt::toString((uint64_t)&__p, &v15, 0x10u, 0, 1, 1);
    llvm::raw_ostream::write(a2, (const char *)v15, v16);
    if (LODWORD(v14[0]) >= 0x41)
    {
      if (__p) {
        operator delete[](__p);
      }
    }
    int v9 = v15;
    if (v15 != v17) {
      goto LABEL_35;
    }
    return;
  }
  uint64_t v15 = v17;
  long long v16 = xmmword_1811019F0;
  if (v6 == v5) {
    llvm::detail::DoubleAPFloat::toString(v4, (uint64_t *)&v15, 6, 0, 0);
  }
  else {
    llvm::detail::IEEEFloat::toString((uint64_t)v4, (uint64_t *)&v15, 6u, 0, 0);
  }
  llvm::APFloat::APFloat((llvm::APFloatBase *)&__p, *(void **)v4, (unsigned __int8 *)v15, v16);
  if (v14[0] == *(void *)v4)
  {
    if (v6 == (void *)v14[0])
    {
      int IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)v14, v4);
      if (v6 == (void *)v14[0]) {
        goto LABEL_16;
      }
    }
    else
    {
      int IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)v14, v4);
      if (v6 == (void *)v14[0]) {
        goto LABEL_16;
      }
    }
LABEL_9:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
    if (IsEqual) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  int IsEqual = 0;
  if (v6 != (void *)v14[0]) {
    goto LABEL_9;
  }
LABEL_16:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
  if (IsEqual)
  {
LABEL_10:
    llvm::raw_ostream::write(a2, (const char *)v15, v16);
    int v9 = v15;
    if (v15 == v17) {
      return;
    }
LABEL_35:
    free(v9);
    return;
  }
LABEL_17:
  *(void *)&long long v16 = 0;
  if (v6 == *(void **)v4)
  {
    llvm::detail::DoubleAPFloat::toString(v4, (uint64_t *)&v15, 0, 3, 1);
    size_t v10 = v15;
    size_t v11 = v16;
    if (!(void)v16)
    {
LABEL_25:
      if (v10 != v17) {
        free(v10);
      }
      uint64_t v5 = *(void **)v4;
      goto LABEL_28;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::toString((uint64_t)v4, (uint64_t *)&v15, 0, 3u, 1);
    size_t v10 = v15;
    size_t v11 = v16;
    if (!(void)v16) {
      goto LABEL_25;
    }
  }
  long long v12 = memchr(v10, 46, v11);
  if (!v12 || v12 - (unsigned char *)v10 == -1) {
    goto LABEL_25;
  }
  llvm::raw_ostream::write(a2, (const char *)v10, v11);
  int v9 = v15;
  if (v15 != v17) {
    goto LABEL_35;
  }
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printEscapedString(llvm::raw_ostream **a1, llvm::raw_ostream *a2, uint64_t a3)
{
  long long v6 = *a1;
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *uint64_t v7 = 34;
    ++*((void *)v6 + 4);
  }
  llvm::printEscapedString(a2, a3, *a1);
  __n128 result = *a1;
  int v9 = (unsigned char *)*((void *)*a1 + 4);
  if (*((unsigned char **)*a1 + 3) == v9)
  {
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  }
  else
  {
    unsigned char *v9 = 34;
    ++*((void *)result + 4);
  }
  return result;
}

double mlir::AffineMap::print(mlir::AffineMap *this, llvm::raw_ostream *a2)
{
  if (*(void *)this)
  {
    uint64_t LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS(this);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v11);
    uint64_t v5 = (char *)operator new(0x2C0uLL);
    uint64_t v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(v5, LHS);
    *(void *)(v6 + 56) = v6 + 72;
    *(void *)(v6 + 64) = 0x600000000;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_DWORD *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_DWORD *)(v6 + 160) = 0;
    *(_OWORD *)(v6 + 184) = 0u;
    *(void *)(v6 + 168) = v6 + 184;
    *(void *)(v6 + 176) = 0;
    *(void *)(v6 + 200) = v6 + 216;
    *(void *)(v6 + 208) = 0x400000000;
    *(void *)(v6 + 248) = v6 + 264;
    *(_OWORD *)(v6 + 256) = 0u;
    *(void *)(v6 + 272) = 1;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_DWORD *)(v6 + 296) = 0;
    *(_DWORD *)(v6 + 320) = 0;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_DWORD *)(v6 + 344) = 0;
    *(_OWORD *)(v6 + 328) = 0u;
    *(_DWORD *)(v6 + 368) = 0;
    *(_OWORD *)(v6 + 352) = 0u;
    *(_DWORD *)(v6 + 392) = 0;
    *(_OWORD *)(v6 + 376) = 0u;
    *(_DWORD *)(v6 + 416) = 0;
    *(_OWORD *)(v6 + 400) = 0u;
    *(_OWORD *)(v6 + 424) = 0u;
    *(void *)(v6 + 440) = 0;
    *(void *)(v6 + 448) = v6 + 464;
    *(void *)(v6 + 456) = 0x400000000;
    *(void *)(v6 + 496) = v6 + 512;
    *(_OWORD *)(v6 + 504) = 0u;
    *(void *)(v6 + 520) = 1;
    *(void *)(v6 + 528) = 0;
    *((_DWORD *)v5 + 134) = 0;
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
    *((_DWORD *)v5 + 152) = 0;
    *((void *)v5 + 75) = 0;
    *(_OWORD *)(v5 + 584) = 0u;
    long long v7 = v12;
    *(_OWORD *)(v5 + 616) = v11;
    *(_OWORD *)(v5 + 632) = v7;
    *((void *)v5 + 81) = v13;
    *((void *)v5 + 82) = 0;
    *(_OWORD *)(v5 + 664) = 0u;
    *((_DWORD *)v5 + 170) = 0;
    *((void *)v5 + 86) = v5 + 704;
    *((void *)v5 + 87) = 0;
    *(void *)&long long v11 = a2;
    *((void *)&v11 + 1) = v5;
    long long v8 = *(_OWORD *)(v5 + 632);
    long long v12 = *(_OWORD *)(v5 + 616);
    long long v13 = v8;
    uint64_t v14 = *((void *)v5 + 81);
    int v15 = 1;
    mlir::AsmPrinter::Impl::printAffineMap((llvm::raw_ostream **)&v11, *(void *)this);
    mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
  }
  uint64_t v9 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v9) > 0x12)
  {
    *(_DWORD *)(v9 + 15) = 1044271169;
    double result = *(double *)"<<NULL AFFINE MAP>>";
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"<<NULL AFFINE MAP>>";
    *((void *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "<<NULL AFFINE MAP>>", 0x13uLL);
  }
  return result;
}

void mlir::IntegerSet::print(mlir::IntegerSet *this, llvm::raw_ostream *a2)
{
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext(this);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v9);
  uint64_t v5 = (char *)operator new(0x2C0uLL);
  uint64_t v6 = mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(v5, Context);
  *(void *)(v6 + 56) = v6 + 72;
  *(void *)(v6 + 64) = 0x600000000;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_DWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(void *)(v6 + 168) = v6 + 184;
  *(void *)(v6 + 176) = 0;
  *(void *)(v6 + 200) = v6 + 216;
  *(void *)(v6 + 208) = 0x400000000;
  *(void *)(v6 + 248) = v6 + 264;
  *(_OWORD *)(v6 + 256) = 0u;
  *(void *)(v6 + 272) = 1;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_DWORD *)(v6 + 296) = 0;
  *(_DWORD *)(v6 + 320) = 0;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_DWORD *)(v6 + 344) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 392) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_DWORD *)(v6 + 416) = 0;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = v6 + 464;
  *(void *)(v6 + 456) = 0x400000000;
  *(void *)(v6 + 496) = v6 + 512;
  *(_OWORD *)(v6 + 504) = 0u;
  *(void *)(v6 + 520) = 1;
  *(void *)(v6 + 528) = 0;
  *((_DWORD *)v5 + 134) = 0;
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)(v6 + 544));
  *((_DWORD *)v5 + 152) = 0;
  *((void *)v5 + 75) = 0;
  *(_OWORD *)(v5 + 584) = 0u;
  long long v7 = v10;
  *(_OWORD *)(v5 + 616) = v9;
  *(_OWORD *)(v5 + 632) = v7;
  *((void *)v5 + 81) = v11;
  *((void *)v5 + 82) = 0;
  *(_OWORD *)(v5 + 664) = 0u;
  *((_DWORD *)v5 + 170) = 0;
  *((void *)v5 + 86) = v5 + 704;
  *((void *)v5 + 87) = 0;
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = v5;
  long long v8 = *(_OWORD *)(v5 + 632);
  long long v10 = *(_OWORD *)(v5 + 616);
  long long v11 = v8;
  uint64_t v12 = *((void *)v5 + 81);
  int v13 = 1;
  mlir::AsmPrinter::Impl::printIntegerSet((llvm::raw_ostream **)&v9, *(void *)this);
  mlir::detail::AsmStateImpl::~AsmStateImpl((mlir::detail::AsmStateImpl *)v5);
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printType(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAlias(a1, a2);
    if (!(_BYTE)result)
    {
      return (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printTypeImpl(a1, a2);
    }
  }
  else
  {
    double result = *(llvm::raw_ostream **)a1;
    uint64_t v5 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((void *)result + 4) += 13;
    }
    else
    {
      return llvm::raw_ostream::write(result, "<<NULL TYPE>>", 0xDuLL);
    }
  }
  return result;
}

double printSymbolReference(char *a1, size_t a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v6 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v6 >= *((void *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 64);
    }
    else
    {
      *((void *)a3 + 4) = v6 + 1;
      *uint64_t v6 = 64;
    }
    printKeywordOrString(a1, a2, a3);
  }
  else
  {
    long long v7 = (void *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      double result = *(double *)"D EMPTY SYMBOL>>";
      *((void *)a3 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(a3, "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::FlatSymbolRefAttr::getValue(mlir::FlatSymbolRefAttr *this)
{
  uint64_t Value = mlir::AffineMapAttr::getValue(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

double printElidedElementsAttr(llvm::raw_ostream *a1)
{
  uint64_t v1 = (void *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v1 > 0x19uLL)
  {
    qmemcpy(v1, "dense_resource<__elided__>", 26);
    double result = *(double *)"urce<__elided__>";
    *((void *)a1 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(a1, "dense_resource<__elided__>", 0x1AuLL);
  }
  return result;
}

void mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  uint64_t v26 = a2;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
  uint64_t v25 = v5;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
  uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v7);
  if ((mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v26) & 1) == 0 && a3)
  {
    if (atomic_load((unint64_t *)clOptions))
    {
      if (atomic_load_explicit(clOptions, memory_order_acquire))
      {
        if (*(_WORD *)(clOptions[0] + 8))
        {
LABEL_6:
          if (atomic_load_explicit(clOptions, memory_order_acquire))
          {
            if (*(void *)(clOptions[0] + 128) == -1) {
              goto LABEL_17;
            }
          }
          else
          {
            if (*(void *)(clOptions[0] + 128) == -1) {
              goto LABEL_17;
            }
          }
          if (atomic_load_explicit(clOptions, memory_order_acquire))
          {
            if (*(void *)(clOptions[0] + 128) >= NumElements) {
              goto LABEL_17;
            }
          }
          else
          {
            if (*(void *)(clOptions[0] + 128) >= NumElements) {
              goto LABEL_17;
            }
          }
LABEL_15:
          RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v26);
          mlir::AsmPrinter::Impl::printHexString(a1, RawStringData, v11);
          return;
        }
      }
      else
      {
        if (*(_WORD *)(clOptions[0] + 8)) {
          goto LABEL_6;
        }
      }
    }
    if (NumElements >= 101) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v12 = OperandRange;
  int v13 = *(void **)(*(void *)OperandRange + 136);
  if (v13 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v12 = 0;
  }
  uint64_t v22 = v12;
  if (v13 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v21 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
    if (*(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)&v26, (uint64_t)&v33);
      long long v28 = v34;
      int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v26);
      uint64_t v15 = Value;
      uint64_t v16 = v25;
      size_t v17 = *a1;
      *(void *)&long long v27 = &v33;
      *((void *)&v27 + 1) = a1;
      *(void *)&long long v28 = &v21;
      char v20 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>;
    }
    else
    {
      mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)&v26, (uint64_t)&v33);
      long long v27 = v33;
      long long v28 = v34;
      long long v29 = v35;
      long long v30 = v36;
      long long v31 = v37;
      long long v32 = v38;
      int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v26);
      uint64_t v15 = Value;
      uint64_t v16 = v25;
      size_t v17 = *a1;
      *(void *)&long long v27 = &v33;
      *((void *)&v27 + 1) = a1;
      char v20 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>;
    }
    goto LABEL_26;
  }
  if (!mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange))
  {
    mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)&v26, (uint64_t)&v33);
    long long v27 = v33;
    long long v28 = v34;
    long long v29 = v35;
    long long v30 = v36;
    long long v31 = v37;
    long long v32 = v38;
    int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v26);
    uint64_t v15 = Value;
    uint64_t v16 = v25;
    size_t v17 = *a1;
    *(void *)&long long v27 = &v33;
    *((void *)&v27 + 1) = a1;
    char v20 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>;
LABEL_26:
    int v18 = v20;
    BOOL v19 = &v27;
    goto LABEL_27;
  }
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v26, (uint64_t)&v33);
  long long v27 = v33;
  long long v28 = v34;
  int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v26);
  uint64_t v15 = Value;
  uint64_t v16 = v25;
  size_t v17 = *a1;
  *(void *)&long long v33 = &v27;
  *((void *)&v33 + 1) = a1;
  *(void *)&long long v34 = &OperandRange;
  int v18 = (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>;
  BOOL v19 = &v33;
LABEL_27:
  printDenseElementsAttrImpl(isSplat, v15, v16, v17, v18, (uint64_t)v19);
}

void mlir::AsmPrinter::Impl::printDenseStringElementsAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v9 = a2;
  v8[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v9);
  v8[1] = v3;
  v7[0] = a1;
  v7[1] = v8;
  int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v9);
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v9);
  printDenseElementsAttrImpl(isSplat, Value, v6, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v7);
}

void mlir::AsmPrinter::Impl::printDenseElementsAttr(llvm::raw_ostream **a1, uint64_t a2, int a3)
{
  if (a2
    && *(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    uint64_t v10 = a2;
    v9[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v10);
    v9[1] = v4;
    v8[0] = a1;
    v8[1] = v9;
    int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v10);
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
    printDenseElementsAttrImpl(isSplat, Value, v7, *a1, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>, (uint64_t)v8);
  }
  else
  {
    mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(a1, a2, a3);
  }
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v14 = a2;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  if (mlir::Type::isInteger((mlir::Type *)&Value, 1)) {
    unsigned int IntOrFloatBitWidth = 8;
  }
  else {
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  }
  unsigned int v11 = IntOrFloatBitWidth >> 3;
  unsigned int v12 = IntOrFloatBitWidth;
  v10[0] = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)&v14);
  v10[1] = v4;
  unsigned int LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
  uint64_t v6 = *a1;
  v15[0] = &v12;
  v15[1] = v10;
  v15[2] = &v11;
  v15[3] = &Value;
  v15[4] = a1;
  uint64_t v7 = LHS;
  if (LHS)
  {
    mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, 0);
    if (v7 != 1)
    {
      for (uint64_t i = 1; i != v7; ++i)
      {
        while (1)
        {
          uint64_t v9 = (_WORD *)*((void *)v6 + 4);
          if (*((void *)v6 + 3) - (void)v9 <= 1uLL) {
            break;
          }
          _WORD *v9 = 8236;
          *((void *)v6 + 4) += 2;
          mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i++);
          if (v7 == i) {
            return;
          }
        }
        llvm::raw_ostream::write(v6, ", ", 2uLL);
        mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()((uint64_t)v15, i);
      }
    }
  }
}

void printDenseElementsAttrImpl(int a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  v30[0] = a2;
  v30[1] = a3;
  if (a1)
  {
    a5(a6, 0);
    return;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  if (!NumElements) {
    return;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  uint64_t v10 = v9;
  long long v31 = v33;
  uint64_t v32 = 0x400000000;
  if (v9 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v9, 4);
    unsigned int v11 = v31;
    size_t v12 = 4 * v10;
LABEL_10:
    bzero(v11, v12);
    goto LABEL_11;
  }
  if (v9)
  {
    size_t v12 = 4 * v9;
    unsigned int v11 = v33;
    goto LABEL_10;
  }
LABEL_11:
  LODWORD(v32) = v10;
  uint64_t v13 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  if (!NumElements) {
    goto LABEL_38;
  }
  uint64_t v14 = v13;
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  do
  {
    if (!v15) {
      goto LABEL_18;
    }
    size_t v17 = (_WORD *)*((void *)a4 + 4);
    if (*((void *)a4 + 3) - (void)v17 <= 1uLL)
    {
      llvm::raw_ostream::write(a4, ", ", 2uLL);
LABEL_18:
      if (v10 <= v16) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
    *size_t v17 = 8236;
    *((void *)a4 + 4) += 2;
    if (v10 <= v16) {
      goto LABEL_26;
    }
LABEL_21:
    unsigned int v18 = v16 + 1;
    do
    {
      while (1)
      {
        char v20 = (unsigned char *)*((void *)a4 + 4);
        if ((unint64_t)v20 >= *((void *)a4 + 3)) {
          break;
        }
        *((void *)a4 + 4) = v20 + 1;
        *char v20 = 91;
        BOOL v19 = v10 <= v18++;
        if (v19) {
          goto LABEL_26;
        }
      }
      llvm::raw_ostream::write(a4, 91);
      BOOL v19 = v10 <= v18++;
    }
    while (!v19);
LABEL_26:
    a5(a6, v15);
    ++*((_DWORD *)v31 + v10 - 1);
    if (v10 == 1)
    {
      unsigned int v16 = 1;
    }
    else
    {
      unsigned int v16 = v10;
      uint64_t v21 = (v10 - 1);
      LODWORD(v22) = v10;
      do
      {
        int v23 = v22;
        uint64_t v22 = v21;
        uint64_t v24 = v31;
        if (*(void *)(v14 + 8 * v22) <= (uint64_t)*((unsigned int *)v31 + v22))
        {
          *((_DWORD *)v31 + v22) = 0;
          ++v24[v23 - 2];
          --v16;
          uint64_t v25 = (unsigned char *)*((void *)a4 + 4);
          if ((unint64_t)v25 < *((void *)a4 + 3))
          {
            *((void *)a4 + 4) = v25 + 1;
            *uint64_t v25 = 93;
          }
          else
          {
            llvm::raw_ostream::write(a4, 93);
          }
        }
        uint64_t v21 = v22 - 1;
      }
      while (v22 != 1);
    }
    uint64_t v15 = (v15 + 1);
  }
  while (v15 != NumElements);
  for (; v16; --v16)
  {
    while (1)
    {
      uint64_t v26 = (unsigned char *)*((void *)a4 + 4);
      if ((unint64_t)v26 >= *((void *)a4 + 3)) {
        break;
      }
      *((void *)a4 + 4) = v26 + 1;
      unsigned char *v26 = 93;
      if (!--v16) {
        goto LABEL_38;
      }
    }
    llvm::raw_ostream::write(a4, 93);
  }
LABEL_38:
  if (v31 != v33) {
    free(v31);
  }
}

void mlir::AsmPrinter::Impl::printTypeImpl(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (void *)(*a2)[17];
  if (v3 == &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id)
  {
    uint64_t v6 = *(llvm::raw_ostream **)a1;
    v162[0] = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    size_t v9 = v8;
    uint64_t v10 = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v162);
    printDialectSymbol(v6, "!", 1uLL, AttrData, v9, v10, v11);
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v13 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v13) <= 4)
    {
      uint64_t v14 = "index";
      size_t v15 = 5;
      goto LABEL_35;
    }
    *(unsigned char *)(v13 + 4) = 120;
    *(_DWORD *)uint64_t v13 = 1701080681;
    uint64_t v17 = *((void *)v12 + 4) + 5;
LABEL_43:
    *((void *)v12 + 4) = v17;
    return;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v16 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v16) <= 5)
    {
      uint64_t v14 = "f8E5M2";
      size_t v15 = 6;
      goto LABEL_35;
    }
    *(_WORD *)(v16 + 4) = 12877;
    *(_DWORD *)uint64_t v16 = 893728870;
    uint64_t v17 = *((void *)v12 + 4) + 6;
    goto LABEL_43;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    unsigned int v18 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v18 <= 7uLL)
    {
      uint64_t v14 = "f8E4M3FN";
      size_t v15 = 8;
      goto LABEL_35;
    }
    *unsigned int v18 = 0x4E46334D34453866;
    uint64_t v17 = *((void *)v12 + 4) + 8;
    goto LABEL_43;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v19) <= 9)
    {
      uint64_t v14 = "f8E5M2FNUZ";
LABEL_34:
      size_t v15 = 10;
      goto LABEL_35;
    }
    char v20 = "f8E5M2FNUZ";
LABEL_42:
    *(_WORD *)(v19 + 8) = 23125;
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v17 = *((void *)v12 + 4) + 10;
    goto LABEL_43;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v19) <= 9)
    {
      uint64_t v14 = "f8E4M3FNUZ";
      goto LABEL_34;
    }
    char v20 = "f8E4M3FNUZ";
    goto LABEL_42;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v21 <= 0xCuLL)
    {
      uint64_t v14 = "f8E4M3B11FNUZ";
      size_t v15 = 13;
      goto LABEL_35;
    }
    qmemcpy(v21, "f8E4M3B11FNUZ", 13);
    uint64_t v17 = *((void *)v12 + 4) + 13;
    goto LABEL_43;
  }
  if (v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v22 = *(int **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v22 > 3uLL)
    {
      int v24 = 909207138;
      goto LABEL_57;
    }
    uint64_t v14 = "bf16";
    size_t v15 = 4;
  }
  else if (v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v23 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v23) > 2)
    {
      *(unsigned char *)(v23 + 2) = 54;
      __int16 v25 = 12646;
      goto LABEL_67;
    }
    uint64_t v14 = "f16";
    size_t v15 = 3;
  }
  else if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v22 = *(int **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v22 > 3uLL)
    {
      int v24 = 842229364;
      goto LABEL_57;
    }
    uint64_t v14 = "tf32";
    size_t v15 = 4;
  }
  else if (v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
  {
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v23 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v23) > 2)
    {
      *(unsigned char *)(v23 + 2) = 50;
      __int16 v25 = 13158;
      goto LABEL_67;
    }
    uint64_t v14 = "f32";
    size_t v15 = 3;
  }
  else
  {
    if (v3 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    {
      if (v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
      {
        if (v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          {
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
            {
              v162[0] = a2;
              uint64_t v4 = *(llvm::raw_ostream **)a1;
              uint64_t v5 = *(unsigned char **)(*(void *)a1 + 32);
              if ((unint64_t)v5 >= *(void *)(*(void *)a1 + 24))
              {
                llvm::raw_ostream::write(v4, 40);
              }
              else
              {
                *((void *)v4 + 4) = v5 + 1;
                unsigned char *v5 = 40;
              }
              Inputs = (uint64_t *)mlir::FunctionType::getInputs((mlir::FunctionType *)v162);
              if (v35)
              {
                long long v36 = Inputs;
                uint64_t v37 = v35;
                long long v38 = *(llvm::raw_ostream **)a1;
                if (*Inputs)
                {
                  uint64_t v39 = *Inputs;
                  if (!mlir::AsmPrinter::Impl::printAlias(a1, *Inputs)) {
                    mlir::AsmPrinter::Impl::printTypeImpl(a1, v39);
                  }
                }
                else
                {
                  uint64_t v55 = (void *)*((void *)v38 + 4);
                  if (*((void *)v38 + 3) - (void)v55 > 0xCuLL)
                  {
                    qmemcpy(v55, "<<NULL TYPE>>", 13);
                    *((void *)v38 + 4) += 13;
                  }
                  else
                  {
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
                  }
                }
                if (v37 != 1)
                {
                  unsigned int v87 = v36 + 1;
                  uint64_t v88 = 8 * v37 - 8;
                  do
                  {
                    v89 = (_WORD *)*((void *)v38 + 4);
                    if (*((void *)v38 + 3) - (void)v89 > 1uLL)
                    {
                      _WORD *v89 = 8236;
                      *((void *)v38 + 4) += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v38, ", ", 2uLL);
                    }
                    uint64_t v90 = *v87;
                    if (*v87)
                    {
                      if (!mlir::AsmPrinter::Impl::printAlias(a1, *v87)) {
                        mlir::AsmPrinter::Impl::printTypeImpl(a1, v90);
                      }
                    }
                    else
                    {
                      size_t v91 = *(llvm::raw_ostream **)a1;
                      uint64_t v92 = *(void **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v92 > 0xCuLL)
                      {
                        qmemcpy(v92, "<<NULL TYPE>>", 13);
                        *((void *)v91 + 4) += 13;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v91, "<<NULL TYPE>>", 0xDuLL);
                      }
                    }
                    ++v87;
                    v88 -= 8;
                  }
                  while (v88);
                }
              }
              uint64_t v76 = *(llvm::raw_ostream **)a1;
              uint64_t v77 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v77) > 4)
              {
                *(unsigned char *)(v77 + 4) = 32;
                *(_DWORD *)uint64_t v77 = 1043144745;
                *((void *)v76 + 4) += 5;
              }
              else
              {
                llvm::raw_ostream::write(v76, ") -> ", 5uLL);
              }
              Results = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)v162);
              unsigned int v79 = Results;
              uint64_t v81 = v80;
              if (v80 != 1
                || (uint64_t v82 = *Results,
                    *(_UNKNOWN **)(*(void *)*Results + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
              {
                v83 = *(llvm::raw_ostream **)a1;
                uint64_t v84 = *(unsigned char **)(*(void *)a1 + 32);
                if ((unint64_t)v84 >= *(void *)(*(void *)a1 + 24))
                {
                  llvm::raw_ostream::write(v83, 40);
                }
                else
                {
                  *((void *)v83 + 4) = v84 + 1;
                  *uint64_t v84 = 40;
                }
                if (v81)
                {
                  uint64_t v85 = *(llvm::raw_ostream **)a1;
                  uint64_t v86 = *v79;
                  if (*v79)
                  {
                    if (!mlir::AsmPrinter::Impl::printAlias(a1, *v79)) {
                      mlir::AsmPrinter::Impl::printTypeImpl(a1, v86);
                    }
                  }
                  else
                  {
                    uint64_t v93 = (void *)*((void *)v85 + 4);
                    if (*((void *)v85 + 3) - (void)v93 > 0xCuLL)
                    {
                      qmemcpy(v93, "<<NULL TYPE>>", 13);
                      *((void *)v85 + 4) += 13;
                    }
                    else
                    {
                      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
                    }
                  }
                  if (v81 != 1)
                  {
                    size_t v98 = v79 + 1;
                    uint64_t v99 = 8 * v81 - 8;
                    do
                    {
                      uint64_t v100 = (_WORD *)*((void *)v85 + 4);
                      if (*((void *)v85 + 3) - (void)v100 > 1uLL)
                      {
                        *uint64_t v100 = 8236;
                        *((void *)v85 + 4) += 2;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v85, ", ", 2uLL);
                      }
                      uint64_t v101 = *v98;
                      if (*v98)
                      {
                        if (!mlir::AsmPrinter::Impl::printAlias(a1, *v98)) {
                          mlir::AsmPrinter::Impl::printTypeImpl(a1, v101);
                        }
                      }
                      else
                      {
                        uint64_t v102 = *(llvm::raw_ostream **)a1;
                        int v103 = *(void **)(*(void *)a1 + 32);
                        if (*(void *)(*(void *)a1 + 24) - (void)v103 > 0xCuLL)
                        {
                          qmemcpy(v103, "<<NULL TYPE>>", 13);
                          *((void *)v102 + 4) += 13;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v102, "<<NULL TYPE>>", 0xDuLL);
                        }
                      }
                      ++v98;
                      v99 -= 8;
                    }
                    while (v99);
                  }
                }
                unint64_t v96 = *(llvm::raw_ostream **)a1;
                uint64_t v97 = *(unsigned char **)(*(void *)a1 + 32);
                if ((unint64_t)v97 >= *(void *)(*(void *)a1 + 24))
                {
                  llvm::raw_ostream::write(v96, 41);
                }
                else
                {
                  *((void *)v96 + 4) = v97 + 1;
                  *uint64_t v97 = 41;
                }
              }
              else if (!mlir::AsmPrinter::Impl::printAlias(a1, *Results))
              {
                mlir::AsmPrinter::Impl::printTypeImpl(a1, v82);
              }
              return;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
            {
              v162[0] = a2;
              RawStringData = (unsigned char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v162);
              uint64_t v31 = v30;
              uint64_t v32 = *(llvm::raw_ostream **)a1;
              long long v33 = *(_DWORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v33 > 6uLL)
              {
                *(_DWORD *)((char *)v33 + 3) = 1014132596;
                *long long v33 = 1952671094;
                *((void *)v32 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(v32, "vector<", 7uLL);
              }
              uint64_t v43 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
              uint64_t v45 = v44;
              if (v44)
              {
                signed int v46 = (unint64_t *)v43;
                if (v31)
                {
                  do
                  {
                    while (1)
                    {
                      if (*RawStringData)
                      {
                        uint64_t v47 = *(llvm::raw_ostream **)a1;
                        unsigned int v48 = *(unsigned char **)(*(void *)a1 + 32);
                        if ((unint64_t)v48 >= *(void *)(*(void *)a1 + 24))
                        {
                          llvm::raw_ostream::write(v47, 91);
                        }
                        else
                        {
                          *((void *)v47 + 4) = v48 + 1;
                          *unsigned int v48 = 91;
                        }
                      }
                      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, *v46);
                      if (*RawStringData)
                      {
                        uint64_t v49 = *(llvm::raw_ostream **)a1;
                        unsigned __int32 v50 = *(unsigned char **)(*(void *)a1 + 32);
                        if ((unint64_t)v50 >= *(void *)(*(void *)a1 + 24))
                        {
                          llvm::raw_ostream::write(v49, 93);
                        }
                        else
                        {
                          *((void *)v49 + 4) = v50 + 1;
                          *unsigned __int32 v50 = 93;
                        }
                      }
                      BOOL v51 = *(llvm::raw_ostream **)a1;
                      uint64_t v52 = *(unsigned char **)(*(void *)a1 + 32);
                      if ((unint64_t)v52 >= *(void *)(*(void *)a1 + 24)) {
                        break;
                      }
                      *((void *)v51 + 4) = v52 + 1;
                      *uint64_t v52 = 120;
                      ++RawStringData;
                      ++v46;
                      if (!--v45) {
                        goto LABEL_140;
                      }
                    }
                    llvm::raw_ostream::write(v51, 120);
                    ++RawStringData;
                    ++v46;
                    --v45;
                  }
                  while (v45);
                }
                else
                {
                  do
                  {
                    while (1)
                    {
                      unint64_t v71 = *v46++;
                      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, v71);
                      unint64_t v72 = *(llvm::raw_ostream **)a1;
                      uint64_t v73 = *(unsigned char **)(*(void *)a1 + 32);
                      if ((unint64_t)v73 >= *(void *)(*(void *)a1 + 24)) {
                        break;
                      }
                      *((void *)v72 + 4) = v73 + 1;
                      *uint64_t v73 = 120;
                      if (!--v45) {
                        goto LABEL_140;
                      }
                    }
                    llvm::raw_ostream::write(v72, 120);
                    --v45;
                  }
                  while (v45);
                }
              }
LABEL_140:
              uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
              if (RHS) {
                goto LABEL_141;
              }
              goto LABEL_192;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
            {
              v162[0] = a2;
              int v40 = *(llvm::raw_ostream **)a1;
              uint64_t v41 = *(_DWORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v41 > 6uLL)
              {
                *(_DWORD *)((char *)v41 + 3) = 1014132595;
                *uint64_t v41 = 1936614772;
                *((void *)v40 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(v40, "tensor<", 7uLL);
              }
              uint64_t v59 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v162);
              if (v60)
              {
                unsigned int v61 = (unint64_t *)v59;
                uint64_t v62 = 8 * v60;
                do
                {
                  while (1)
                  {
                    uint64_t v63 = *(llvm::raw_ostream **)a1;
                    if (*v61 == 0x8000000000000000)
                    {
                      signed int v64 = (unsigned char *)*((void *)v63 + 4);
                      if ((unint64_t)v64 >= *((void *)v63 + 3))
                      {
                        llvm::raw_ostream::write(v63, 63);
                      }
                      else
                      {
                        *((void *)v63 + 4) = v64 + 1;
                        unsigned char *v64 = 63;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::operator<<(v63, *v61);
                    }
                    v65 = *(llvm::raw_ostream **)a1;
                    char v66 = *(unsigned char **)(*(void *)a1 + 32);
                    if ((unint64_t)v66 >= *(void *)(*(void *)a1 + 24)) {
                      break;
                    }
                    *((void *)v65 + 4) = v66 + 1;
                    *char v66 = 120;
                    ++v61;
                    v62 -= 8;
                    if (!v62) {
                      goto LABEL_129;
                    }
                  }
                  llvm::raw_ostream::write(v65, 120);
                  ++v61;
                  v62 -= 8;
                }
                while (v62);
              }
LABEL_129:
              uint64_t v67 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v162);
              if (v67)
              {
                uint64_t v68 = v67;
                if (!mlir::AsmPrinter::Impl::printAlias(a1, v67)) {
                  mlir::AsmPrinter::Impl::printTypeImpl(a1, v68);
                }
              }
              else
              {
                v94 = *(llvm::raw_ostream **)a1;
                uint64_t v95 = *(void **)(*(void *)a1 + 32);
                if (*(void *)(*(void *)a1 + 24) - (void)v95 > 0xCuLL)
                {
                  qmemcpy(v95, "<<NULL TYPE>>", 13);
                  *((void *)v94 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v94, "<<NULL TYPE>>", 0xDuLL);
                }
              }
              if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162)) {
                goto LABEL_273;
              }
              unsigned int v109 = *(llvm::raw_ostream **)a1;
              uint64_t v110 = *(_WORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v110 > 1uLL)
              {
                *uint64_t v110 = 8236;
                *((void *)v109 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v109, ", ", 2uLL);
              }
              uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v162);
              if (Values)
              {
                uint64_t v112 = (uint64_t **)Values;
                goto LABEL_273;
              }
              goto LABEL_269;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            {
              v162[0] = a2;
              uint64_t v53 = *(llvm::raw_ostream **)a1;
              uint64_t v54 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v54) > 8)
              {
                *(unsigned char *)(v54 + 8) = 120;
                *(void *)uint64_t v54 = *(void *)"tensor<*x";
                *((void *)v53 + 4) += 9;
              }
              else
              {
                llvm::raw_ostream::write(v53, "tensor<*x", 9uLL);
              }
              uint64_t RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
              if (!RHS)
              {
LABEL_192:
                v104 = *(llvm::raw_ostream **)a1;
                v105 = *(void **)(*(void *)a1 + 32);
                if (*(void *)(*(void *)a1 + 24) - (void)v105 <= 0xCuLL)
                {
                  llvm::raw_ostream::write(v104, "<<NULL TYPE>>", 0xDuLL);
                  goto LABEL_273;
                }
                qmemcpy(v105, "<<NULL TYPE>>", 13);
                uint64_t v106 = *((void *)v104 + 4) + 13;
                goto LABEL_272;
              }
LABEL_141:
              uint64_t v75 = RHS;
              if (!mlir::AsmPrinter::Impl::printAlias(a1, RHS)) {
                mlir::AsmPrinter::Impl::printTypeImpl(a1, v75);
              }
              goto LABEL_273;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
            {
              uint64_t Value = (uint64_t)a2;
              int v69 = *(llvm::raw_ostream **)a1;
              char v70 = *(_DWORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v70 > 6uLL)
              {
                *(_DWORD *)((char *)v70 + 3) = 1013343602;
                *char v70 = 1919772013;
                *((void *)v69 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(v69, "memref<", 7uLL);
              }
              uint64_t v113 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
              if (v114)
              {
                uint64_t v115 = (unint64_t *)v113;
                uint64_t v116 = 8 * v114;
                do
                {
                  while (1)
                  {
                    unint64_t v117 = *(llvm::raw_ostream **)a1;
                    if (*v115 == 0x8000000000000000)
                    {
                      unint64_t v118 = (unsigned char *)*((void *)v117 + 4);
                      if ((unint64_t)v118 >= *((void *)v117 + 3))
                      {
                        llvm::raw_ostream::write(v117, 63);
                      }
                      else
                      {
                        *((void *)v117 + 4) = v118 + 1;
                        unsigned char *v118 = 63;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::operator<<(v117, *v115);
                    }
                    unint64_t v119 = *(llvm::raw_ostream **)a1;
                    uint64_t v120 = *(unsigned char **)(*(void *)a1 + 32);
                    if ((unint64_t)v120 >= *(void *)(*(void *)a1 + 24)) {
                      break;
                    }
                    *((void *)v119 + 4) = v120 + 1;
                    *uint64_t v120 = 120;
                    ++v115;
                    v116 -= 8;
                    if (!v116) {
                      goto LABEL_218;
                    }
                  }
                  llvm::raw_ostream::write(v119, 120);
                  ++v115;
                  v116 -= 8;
                }
                while (v116);
              }
LABEL_218:
              uint64_t v121 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Value);
              if (v121)
              {
                uint64_t v122 = v121;
                if (!mlir::AsmPrinter::Impl::printAlias(a1, v121)) {
                  mlir::AsmPrinter::Impl::printTypeImpl(a1, v122);
                }
              }
              else
              {
                int v125 = *(llvm::raw_ostream **)a1;
                BOOL v126 = *(void **)(*(void *)a1 + 32);
                if (*(void *)(*(void *)a1 + 24) - (void)v126 > 0xCuLL)
                {
                  qmemcpy(v126, "<<NULL TYPE>>", 13);
                  *((void *)v125 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v125, "<<NULL TYPE>>", 0xDuLL);
                }
              }
              v162[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
              v162[1] = v131;
              if (*(_UNKNOWN **)(*(void *)v162[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
                || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v162) & 1) == 0)
              {
                unint64_t v132 = *(llvm::raw_ostream **)a1;
                uint64_t v133 = *(_WORD **)(*(void *)a1 + 32);
                if (*(void *)(*(void *)a1 + 24) - (void)v133 > 1uLL)
                {
                  *uint64_t v133 = 8236;
                  *((void *)v132 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v132, ", ", 2uLL);
                }
                uint64_t v134 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
                if (v134)
                {
                  v135 = (uint64_t **)v134;
                }
                else
                {
                  v136 = *(llvm::raw_ostream **)a1;
                  uint64_t v137 = *(void *)(*(void *)a1 + 32);
                  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v137) > 0x11)
                  {
                    *(_WORD *)(v137 + 16) = 15934;
                    *(_OWORD *)uint64_t v137 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
                    *((void *)v136 + 4) += 18;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v136, "<<NULL ATTRIBUTE>>", 0x12uLL);
                  }
                }
              }
              if (!mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&Value)) {
                goto LABEL_273;
              }
              int v140 = *(llvm::raw_ostream **)a1;
              v141 = *(_WORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v141 > 1uLL)
              {
                _WORD *v141 = 8236;
                *((void *)v140 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v140, ", ", 2uLL);
              }
              uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&Value);
              if (MemorySpace)
              {
LABEL_254:
                v143 = (uint64_t **)MemorySpace;
                goto LABEL_273;
              }
LABEL_269:
              v104 = *(llvm::raw_ostream **)a1;
              uint64_t v146 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v146) <= 0x11)
              {
                llvm::raw_ostream::write(v104, "<<NULL ATTRIBUTE>>", 0x12uLL);
                goto LABEL_273;
              }
              *(_WORD *)(v146 + 16) = 15934;
              *(_OWORD *)uint64_t v146 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              uint64_t v106 = *((void *)v104 + 4) + 18;
LABEL_272:
              *((void *)v104 + 4) = v106;
LABEL_273:
              v147 = *(llvm::raw_ostream **)a1;
              v148 = *(unsigned char **)(*(void *)a1 + 32);
              if ((unint64_t)v148 >= *(void *)(*(void *)a1 + 24))
              {
                llvm::raw_ostream::write(v147, 62);
              }
              else
              {
                *((void *)v147 + 4) = v148 + 1;
                unsigned char *v148 = 62;
              }
              return;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
            {
              v162[0] = a2;
              uint64_t v107 = *(llvm::raw_ostream **)a1;
              uint64_t v108 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v108) > 8)
              {
                *(unsigned char *)(v108 + 8) = 120;
                *(void *)uint64_t v108 = *(void *)"memref<*x";
                *((void *)v107 + 4) += 9;
              }
              else
              {
                llvm::raw_ostream::write(v107, "memref<*x", 9uLL);
              }
              uint64_t v127 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
              if (v127)
              {
                uint64_t v128 = v127;
                if (!mlir::AsmPrinter::Impl::printAlias(a1, v127)) {
                  mlir::AsmPrinter::Impl::printTypeImpl(a1, v128);
                }
              }
              else
              {
                int v138 = *(llvm::raw_ostream **)a1;
                uint64_t v139 = *(void **)(*(void *)a1 + 32);
                if (*(void *)(*(void *)a1 + 24) - (void)v139 > 0xCuLL)
                {
                  qmemcpy(v139, "<<NULL TYPE>>", 13);
                  *((void *)v138 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v138, "<<NULL TYPE>>", 0xDuLL);
                }
              }
              if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162)) {
                goto LABEL_273;
              }
              v144 = *(llvm::raw_ostream **)a1;
              uint64_t v145 = *(_WORD **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v145 > 1uLL)
              {
                *uint64_t v145 = 8236;
                *((void *)v144 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v144, ", ", 2uLL);
              }
              uint64_t MemorySpace = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v162);
              if (MemorySpace) {
                goto LABEL_254;
              }
              goto LABEL_269;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
            {
              v162[0] = a2;
              uint64_t v123 = *(llvm::raw_ostream **)a1;
              uint64_t v124 = *(void **)(*(void *)a1 + 32);
              if (*(void *)(*(void *)a1 + 24) - (void)v124 > 7uLL)
              {
                *uint64_t v124 = 0x3C78656C706D6F63;
                *((void *)v123 + 4) += 8;
              }
              else
              {
                llvm::raw_ostream::write(v123, "complex<", 8uLL);
              }
              uint64_t RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v162);
              if (!RHS) {
                goto LABEL_192;
              }
              goto LABEL_141;
            }
            if (a2 && v3 == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
            {
              v162[0] = a2;
              v129 = *(llvm::raw_ostream **)a1;
              uint64_t v130 = *(void *)(*(void *)a1 + 32);
              if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v130) > 5)
              {
                *(_WORD *)(v130 + 4) = 15461;
                *(_DWORD *)uint64_t v130 = 1819309428;
                *((void *)v129 + 4) += 6;
              }
              else
              {
                llvm::raw_ostream::write(v129, "tuple<", 6uLL);
              }
              Types = (uint64_t *)mlir::TupleType::getTypes((mlir::TupleType *)v162);
              if (v150)
              {
                v151 = Types;
                uint64_t v152 = v150;
                v153 = *(llvm::raw_ostream **)a1;
                uint64_t v154 = *Types;
                if (*Types)
                {
                  if (!mlir::AsmPrinter::Impl::printAlias(a1, v154)) {
                    mlir::AsmPrinter::Impl::printTypeImpl(a1, v154);
                  }
                }
                else
                {
                  v155 = (void *)*((void *)v153 + 4);
                  if (*((void *)v153 + 3) - (void)v155 > 0xCuLL)
                  {
                    qmemcpy(v155, "<<NULL TYPE>>", 13);
                    *((void *)v153 + 4) += 13;
                  }
                  else
                  {
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<NULL TYPE>>", 0xDuLL);
                  }
                }
                if (v152 != 1)
                {
                  v156 = v151 + 1;
                  uint64_t v157 = 8 * v152 - 8;
                  do
                  {
                    v158 = (_WORD *)*((void *)v153 + 4);
                    if (*((void *)v153 + 3) - (void)v158 > 1uLL)
                    {
                      _WORD *v158 = 8236;
                      *((void *)v153 + 4) += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v153, ", ", 2uLL);
                    }
                    uint64_t v159 = *v156;
                    if (*v156)
                    {
                      if (!mlir::AsmPrinter::Impl::printAlias(a1, *v156)) {
                        mlir::AsmPrinter::Impl::printTypeImpl(a1, v159);
                      }
                    }
                    else
                    {
                      v160 = *(llvm::raw_ostream **)a1;
                      v161 = *(void **)(*(void *)a1 + 32);
                      if (*(void *)(*(void *)a1 + 24) - (void)v161 > 0xCuLL)
                      {
                        qmemcpy(v161, "<<NULL TYPE>>", 13);
                        *((void *)v160 + 4) += 13;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v160, "<<NULL TYPE>>", 0xDuLL);
                      }
                    }
                    ++v156;
                    v157 -= 8;
                  }
                  while (v157);
                }
              }
              goto LABEL_273;
            }
            if (v3 != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
            {
              mlir::AsmPrinter::Impl::printDialectType(a1, a2);
              return;
            }
            size_t v12 = *(llvm::raw_ostream **)a1;
            uint64_t v22 = *(int **)(*(void *)a1 + 32);
            if (*(void *)(*(void *)a1 + 24) - (void)v22 <= 3uLL)
            {
              uint64_t v14 = "none";
              size_t v15 = 4;
              goto LABEL_35;
            }
            int v24 = 1701736302;
            goto LABEL_57;
          }
          v162[0] = a2;
          if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) == 1)
          {
            uint64_t v26 = *(llvm::raw_ostream **)a1;
            long long v27 = *(char **)(*(void *)a1 + 32);
            if ((unint64_t)v27 < *(void *)(*(void *)a1 + 24))
            {
              *((void *)v26 + 4) = v27 + 1;
              char v28 = 115;
LABEL_79:
              *long long v27 = v28;
              goto LABEL_114;
            }
            char v42 = 115;
          }
          else
          {
            if (mlir::IntegerType::getSignedness((mlir::IntegerType *)v162) != 2)
            {
LABEL_114:
              int v56 = *(llvm::raw_ostream **)a1;
              unint64_t v57 = (unsigned char *)*((void *)v56 + 4);
              if ((unint64_t)v57 >= *((void *)v56 + 3))
              {
                int v56 = llvm::raw_ostream::write(v56, 105);
              }
              else
              {
                *((void *)v56 + 4) = v57 + 1;
                *unint64_t v57 = 105;
              }
              unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v162);
              llvm::raw_ostream::operator<<(v56, Width);
              return;
            }
            uint64_t v26 = *(llvm::raw_ostream **)a1;
            long long v27 = *(char **)(*(void *)a1 + 32);
            if ((unint64_t)v27 < *(void *)(*(void *)a1 + 24))
            {
              *((void *)v26 + 4) = v27 + 1;
              char v28 = 117;
              goto LABEL_79;
            }
            char v42 = 117;
          }
          llvm::raw_ostream::write(v26, v42);
          goto LABEL_114;
        }
        size_t v12 = *(llvm::raw_ostream **)a1;
        uint64_t v22 = *(int **)(*(void *)a1 + 32);
        if (*(void *)(*(void *)a1 + 24) - (void)v22 <= 3uLL)
        {
          uint64_t v14 = "f128";
          size_t v15 = 4;
          goto LABEL_35;
        }
        int v24 = 942813542;
LABEL_57:
        *uint64_t v22 = v24;
        uint64_t v17 = *((void *)v12 + 4) + 4;
        goto LABEL_43;
      }
      size_t v12 = *(llvm::raw_ostream **)a1;
      uint64_t v23 = *(void *)(*(void *)a1 + 32);
      if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v23) <= 2)
      {
        uint64_t v14 = "f80";
        size_t v15 = 3;
        goto LABEL_35;
      }
      *(unsigned char *)(v23 + 2) = 48;
      __int16 v25 = 14438;
LABEL_67:
      *(_WORD *)uint64_t v23 = v25;
      uint64_t v17 = *((void *)v12 + 4) + 3;
      goto LABEL_43;
    }
    size_t v12 = *(llvm::raw_ostream **)a1;
    uint64_t v23 = *(void *)(*(void *)a1 + 32);
    if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v23) > 2)
    {
      *(unsigned char *)(v23 + 2) = 52;
      __int16 v25 = 13926;
      goto LABEL_67;
    }
    uint64_t v14 = "f64";
    size_t v15 = 3;
  }
LABEL_35:

  llvm::raw_ostream::write(v12, v14, v15);
}

uint64_t mlir::AsmPrinter::Impl::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return result;
  }
  size_t v9 = (llvm::raw_ostream **)result;
  if (!a5)
  {
    if (a6)
    {
      unsigned int v18 = *(llvm::raw_ostream **)result;
      uint64_t v19 = *((void *)*v9 + 4);
      if ((unint64_t)(*((void *)*v9 + 3) - v19) > 0xA)
      {
        *(_DWORD *)(v19 + 7) = 1936028789;
        *(void *)uint64_t v19 = *(void *)" attributes";
        *((void *)v18 + 4) += 11;
        char v20 = *v9;
        uint64_t v21 = (_WORD *)*((void *)*v9 + 4);
        if (*((void *)*v9 + 3) - (void)v21 <= 1uLL)
        {
LABEL_22:
          llvm::raw_ostream::write(v20, " {", 2uLL);
          uint64_t v22 = *v9;
          mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
          if (a3 == 1)
          {
LABEL_30:
            double result = (uint64_t)*v9;
            uint64_t v30 = (unsigned char *)*((void *)*v9 + 4);
            if ((unint64_t)v30 >= *((void *)*v9 + 3))
            {
              return (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
            }
            else
            {
              *(void *)(result + 32) = v30 + 1;
              *uint64_t v30 = 125;
            }
            return result;
          }
LABEL_26:
          uint64_t v23 = &a2[2 * a3];
          int v24 = a2 + 2;
          do
          {
            while (1)
            {
              long long v27 = (_WORD *)*((void *)v22 + 4);
              if (*((void *)v22 + 3) - (void)v27 <= 1uLL) {
                break;
              }
              *long long v27 = 8236;
              *((void *)v22 + 4) += 2;
              uint64_t v25 = *v24;
              uint64_t v26 = v24[1];
              v24 += 2;
              mlir::AsmPrinter::Impl::printNamedAttribute(v9, v25, v26);
              if (v24 == v23) {
                goto LABEL_30;
              }
            }
            llvm::raw_ostream::write(v22, ", ", 2uLL);
            uint64_t v28 = *v24;
            uint64_t v29 = v24[1];
            v24 += 2;
            mlir::AsmPrinter::Impl::printNamedAttribute(v9, v28, v29);
          }
          while (v24 != v23);
          goto LABEL_30;
        }
LABEL_25:
        *uint64_t v21 = 31520;
        *((void *)v20 + 4) += 2;
        uint64_t v22 = *v9;
        mlir::AsmPrinter::Impl::printNamedAttribute(v9, *a2, a2[1]);
        if (a3 == 1) {
          goto LABEL_30;
        }
        goto LABEL_26;
      }
      llvm::raw_ostream::write(v18, " attributes", 0xBuLL);
    }
    char v20 = *v9;
    uint64_t v21 = (_WORD *)*((void *)*v9 + 4);
    if (*((void *)*v9 + 3) - (void)v21 <= 1uLL) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  *(void *)&long long v43 = a4;
  uint64_t AttrData = a4 + 16 * a5;
  llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v45, &v43, &AttrData);
  unint64_t v10 = 0;
  uint64_t v11 = 16 * a3;
  size_t v12 = &a2[2 * a3];
  while (1)
  {
    long long v43 = *(_OWORD *)&a2[v10 / 8];
    uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
    uint64_t v42 = v13;
    unsigned int v44 = 0;
    double result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44);
    if ((result & 1) == 0) {
      break;
    }
    if (v45)
    {
      if (v44 == (char *)&v48) {
        break;
      }
    }
    else if (v44 == (char *)v46 + 16 * v47)
    {
      break;
    }
    v10 += 16;
    if (v11 == v10) {
      goto LABEL_64;
    }
  }
  if (v11 == v10)
  {
LABEL_64:
    if ((v45 & 1) == 0) {
      goto LABEL_65;
    }
    return result;
  }
  if (a6)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *((void *)*v9 + 4);
    if ((unint64_t)(*((void *)*v9 + 3) - v15) > 0xA)
    {
      *(_DWORD *)(v15 + 7) = 1936028789;
      *(void *)uint64_t v15 = *(void *)" attributes";
      *((void *)v14 + 4) += 11;
      uint64_t v16 = *v9;
      uint64_t v17 = (_WORD *)*((void *)*v9 + 4);
      if (*((void *)*v9 + 3) - (void)v17 <= 1uLL) {
        goto LABEL_17;
      }
      goto LABEL_36;
    }
    llvm::raw_ostream::write(v14, " attributes", 0xBuLL);
  }
  uint64_t v16 = *v9;
  uint64_t v17 = (_WORD *)*((void *)*v9 + 4);
  if (*((void *)*v9 + 3) - (void)v17 <= 1uLL)
  {
LABEL_17:
    llvm::raw_ostream::write(v16, " {", 2uLL);
    goto LABEL_37;
  }
LABEL_36:
  *uint64_t v17 = 31520;
  *((void *)v16 + 4) += 2;
LABEL_37:
  uint64_t v31 = *v9;
  uint64_t v32 = &a2[v10 / 8 + 2];
  mlir::AsmPrinter::Impl::printNamedAttribute(v9, a2[v10 / 8], a2[v10 / 8 + 1]);
  if (v11 - 16 != v10)
  {
    uint64_t v33 = v11 - v10 - 16;
    while (1)
    {
      long long v43 = *(_OWORD *)v32;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
      uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
      uint64_t v42 = v34;
      unsigned int v44 = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44) & 1) == 0)break; {
      if (v45)
      }
      {
        if (v44 == (char *)&v48) {
          break;
        }
      }
      else if (v44 == (char *)v46 + 16 * v47)
      {
        break;
      }
      v32 += 2;
      v33 -= 16;
      if (!v33) {
        goto LABEL_62;
      }
    }
    if (v33)
    {
LABEL_50:
      uint64_t v35 = (_WORD *)*((void *)v31 + 4);
      if (*((void *)v31 + 3) - (void)v35 > 1uLL)
      {
        *uint64_t v35 = 8236;
        *((void *)v31 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v31, ", ", 2uLL);
      }
      mlir::AsmPrinter::Impl::printNamedAttribute(v9, *v32, v32[1]);
      while (1)
      {
        v32 += 2;
        if (v32 == v12) {
          break;
        }
        long long v43 = *(_OWORD *)v32;
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v43);
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        uint64_t v42 = v37;
        unsigned int v44 = 0;
        if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v45, (uint64_t)&AttrData, &v44))
        {
          long long v38 = v44;
          if (v45) {
            long long v36 = (char *)&v48;
          }
          else {
            long long v36 = (char *)v46 + 16 * v47;
          }
        }
        else
        {
          if (v45)
          {
LABEL_49:
            if (v32 == v12) {
              break;
            }
            goto LABEL_50;
          }
          long long v36 = (char *)v46 + 16 * v47;
          long long v38 = v36;
        }
        if (v38 == v36) {
          goto LABEL_49;
        }
      }
    }
  }
LABEL_62:
  double result = (uint64_t)*v9;
  uint64_t v39 = (unsigned char *)*((void *)*v9 + 4);
  if ((unint64_t)v39 < *((void *)*v9 + 3))
  {
    *(void *)(result + 32) = v39 + 1;
    *uint64_t v39 = 125;
    goto LABEL_64;
  }
  double result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 125);
  if ((v45 & 1) == 0) {
LABEL_65:
  }
    llvm::deallocate_buffer(v46, (void *)(16 * v47));
  return result;
}

double mlir::AsmPrinter::Impl::printNamedAttribute(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v13);
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
  printKeywordOrString(AttrData, v5, *a1);
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v8) > 2)
    {
      *(unsigned char *)(v8 + 2) = 32;
      *(_WORD *)uint64_t v8 = 15648;
      *((void *)v7 + 4) += 3;
      uint64_t v9 = v14;
      if (v14)
      {
LABEL_4:
          mlir::AsmPrinter::Impl::printAttributeImpl(a1, v9, 0);
        return result;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, " = ", 3uLL);
      uint64_t v9 = v14;
      if (v14) {
        goto LABEL_4;
      }
    }
    unint64_t v10 = *a1;
    uint64_t v11 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v11) > 0x11)
    {
      *(_WORD *)(v11 + 16) = 15934;
      double result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)uint64_t v11 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((void *)v10 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v10, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *printKeywordOrString(char *a1, size_t a2, void *a3)
{
  if (!a2) {
    goto LABEL_21;
  }
  unsigned int v6 = *a1;
  uint64_t v7 = MEMORY[0x1E4F14390];
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x100uLL)) {
      goto LABEL_6;
    }
LABEL_7:
    if (a2 == 1)
    {
      uint64_t v9 = a3 + 4;
      uint64_t v8 = (void *)a3[4];
      if ((void *)a3[3] == v8) {
        goto LABEL_24;
      }
      goto LABEL_9;
    }
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = a1[v11];
      if (a1[v11] < 0)
      {
        if (!__maskrune(a1[v11], 0x500uLL))
        {
LABEL_16:
          if ((v12 - 36) > 0x3B || ((1 << (v12 - 36)) & 0x800000000000401) == 0) {
            goto LABEL_21;
          }
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v12 + 60) & 0x500) == 0)
      {
        goto LABEL_16;
      }
      if (a2 == ++v11)
      {
        uint64_t v9 = a3 + 4;
        uint64_t v8 = (void *)a3[4];
        if (a2 > a3[3] - (void)v8)
        {
LABEL_24:
          return llvm::raw_ostream::write((llvm::raw_ostream *)a3, a1, a2);
        }
LABEL_9:
        double result = (llvm::raw_ostream *)memcpy(v8, a1, a2);
        *v9 += a2;
        return result;
      }
    }
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v6 + 60) & 0x100) != 0) {
    goto LABEL_7;
  }
LABEL_6:
  if (*a1 == 95) {
    goto LABEL_7;
  }
LABEL_21:
  uint64_t v14 = (unsigned char *)a3[4];
  if ((unsigned char *)a3[3] == v14)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a3, "\"", 1uLL);
  }
  else
  {
    *uint64_t v14 = 34;
    ++a3[4];
  }
  double result = llvm::printEscapedString((llvm::raw_ostream *)a1, a2, (llvm::raw_ostream *)a3);
  uint64_t v15 = (unsigned char *)a3[4];
  if ((unint64_t)v15 >= a3[3])
  {
    return llvm::raw_ostream::write((llvm::raw_ostream *)a3, 34);
  }
  else
  {
    a3[4] = v15 + 1;
    *uint64_t v15 = 34;
  }
  return result;
}

void mlir::AsmPrinter::Impl::printDialectType(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = **a2;
  int v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  int v16 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  int v22 = 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = &unk_1EC9A38B8;
  uint64_t v23 = (void **)&v24;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v15, 0, 0, 0);
  uint64_t v5 = *(void *)(a1 + 8);
  v10[0] = &v15;
  v10[1] = v5;
  uint64_t v13 = *(void *)(v5 + 648);
  long long v6 = *(_OWORD *)(v5 + 632);
  long long v11 = *(_OWORD *)(v5 + 616);
  long long v12 = v6;
  int v14 = 1;
  v9[1] = v10;
  v9[0] = &unk_1EC9AA830;
  (*(void (**)(uint64_t, uint64_t **, void *))(*(void *)v4 + 56))(v4, a2, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
  if (v26 >= 0) {
    uint64_t v7 = (char *)&v24;
  }
  else {
    uint64_t v7 = v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  printDialectSymbol(*(llvm::raw_ostream **)a1, "!", 1uLL, *(const char **)(v4 + 8), *(void *)(v4 + 16), v7, v8);
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
}

void mlir::AsmPrinter::Impl::printHexString(llvm::raw_ostream **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v6) > 2)
  {
    *(unsigned char *)(v6 + 2) = 120;
    *(_WORD *)uint64_t v6 = 12322;
    *((void *)v5 + 4) += 3;
  }
  else
  {
    uint64_t v5 = llvm::raw_ostream::write(*a1, "\"0x", 3uLL);
  }
  llvm::toHex(a3, a2, 0, __p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v8 = v12;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  uint64_t v9 = llvm::raw_ostream::write(v5, (const char *)v7, v8);
  unint64_t v10 = (unsigned char *)*((void *)v9 + 4);
  if (*((unsigned char **)v9 + 3) != v10)
  {
    unsigned char *v10 = 34;
    ++*((void *)v9 + 4);
    if (((char)v12 & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(__p[0]);
    return;
  }
  llvm::raw_ostream::write(v9, "\"", 1uLL);
  if ((char)v12 < 0) {
    goto LABEL_14;
  }
}

uint64_t mlir::AsmPrinter::getStream(mlir::AsmPrinter *this)
{
  return **((void **)this + 1);
}

void mlir::AsmPrinter::printFloat(llvm::raw_ostream ***this, const llvm::APFloat *a2)
{
}

void mlir::AsmPrinter::printType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(*(void *)(a1 + 8), (uint64_t)a2))
    {
      mlir::AsmPrinter::Impl::printTypeImpl(v2, a2);
    }
  }
  else
  {
    uint64_t v4 = *(llvm::raw_ostream **)v2;
    uint64_t v5 = *(void **)(*(void *)v2 + 32);
    if (*(void *)(*(void *)v2 + 24) - (void)v5 > 0xCuLL)
    {
      qmemcpy(v5, "<<NULL TYPE>>", 13);
      *((void *)v4 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v4, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

double mlir::AsmPrinter::printAttribute(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2)
  {
    {
      mlir::AsmPrinter::Impl::printAttributeImpl((llvm::raw_ostream **)v2, a2, 0);
    }
  }
  else
  {
    uint64_t v5 = *(llvm::raw_ostream **)v2;
    uint64_t v6 = *(void *)(*(void *)v2 + 32);
    if ((unint64_t)(*(void *)(*(void *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      double result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)uint64_t v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((void *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printAlias(uint64_t a1, uint64_t a2)
{
}

{
  return mlir::AsmPrinter::Impl::printAlias(*(void *)(a1 + 8), a2);
}

double mlir::AsmPrinter::printAttributeWithoutType(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2)
  {
    {
      mlir::AsmPrinter::Impl::printAttributeImpl((llvm::raw_ostream **)v2, a2, 2);
    }
  }
  else
  {
    uint64_t v5 = *(llvm::raw_ostream **)v2;
    uint64_t v6 = *(void *)(*(void *)v2 + 32);
    if ((unint64_t)(*(void *)(*(void *)v2 + 24) - v6) > 0x11)
    {
      *(_WORD *)(v6 + 16) = 15934;
      double result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)uint64_t v6 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((void *)v5 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v5, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::printKeywordOrString(uint64_t a1, char *a2, size_t a3)
{
  return printKeywordOrString(a2, a3, **(void ***)(a1 + 8));
}

llvm::raw_ostream *mlir::AsmPrinter::printString(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 34);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 34;
  }
  size_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  llvm::printEscapedString(a2, a3, v8);
  double result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v10 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v10 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 34);
  }
  else
  {
    *((void *)result + 4) = v10 + 1;
    unsigned char *v10 = 34;
  }
  return result;
}

double mlir::AsmPrinter::printSymbolName(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v3 = **(void ***)(a1 + 8);
  if (a3)
  {
    uint64_t v6 = (unsigned char *)v3[4];
    if ((unint64_t)v6 >= v3[3])
    {
      llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), 64);
    }
    else
    {
      v3[4] = v6 + 1;
      *uint64_t v6 = 64;
    }
    printKeywordOrString(a2, a3, v3);
  }
  else
  {
    uint64_t v7 = (void *)v3[4];
    if (v3[3] - (void)v7 > 0x18uLL)
    {
      qmemcpy(v7, "@<<INVALID EMPTY SYMBOL>>", 25);
      double result = *(double *)"D EMPTY SYMBOL>>";
      v3[4] += 25;
    }
    else
    {
      size_t v8 = **(llvm::raw_ostream ***)(a1 + 8);
      llvm::raw_ostream::write(v8, "@<<INVALID EMPTY SYMBOL>>", 0x19uLL);
    }
  }
  return result;
}

uint64_t mlir::AsmPrinter::printResourceHandle(uint64_t a1, uint64_t *a2)
{
  return mlir::AsmPrinter::Impl::printResourceHandle(*(void *)(a1 + 8), a2);
}

uint64_t mlir::AsmPrinter::pushCyclicPrinting(mlir::AsmPrinter *this, uint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  uint64_t v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v2 + 664), &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = *(unsigned int *)(v2 + 696);
    if (v5 >= *(_DWORD *)(v2 + 700))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 688, (void *)(v2 + 704), v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 696);
    }
    *(void *)(*(void *)(v2 + 688) + 8 * v5) = v4;
    ++*(_DWORD *)(v2 + 696);
  }
  return v3;
}

uint64_t mlir::AsmPrinter::popCyclicPrinting(uint64_t this)
{
  uint64_t v1 = *(int32x2_t **)(*(void *)(this + 8) + 8);
  __int32 v2 = v1[85].i32[0];
  if (v2)
  {
    int32x2_t v3 = v1[83];
    uint64_t v4 = v1[87].u32[0];
    uint64_t v5 = *(void *)(*(void *)&v1[86] + 8 * v4 - 8);
    __int32 v6 = v2 - 1;
    LODWORD(v7) = ((v5 >> 4) ^ (v5 >> 9)) & (v2 - 1);
    size_t v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (v5 == *v8)
    {
LABEL_3:
      *size_t v8 = -8192;
      v1[84] = vadd_s32(v1[84], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v3 + 8 * v7);
        if (v5 == v9)
        {
          size_t v8 = (uint64_t *)(*(void *)&v3 + 8 * v7);
          goto LABEL_3;
        }
      }
    }
    v1[87].i32[0] = v4 - 1;
  }
  else
  {
    --v1[87].i32[0];
  }
  return this;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineExprInternal(llvm::raw_ostream **a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v46 = a2;
  switch(mlir::AffineExpr::getKind((mlir::AffineExpr *)&v46))
  {
    case 0u:
      char v9 = 0;
      int v10 = " + ";
      goto LABEL_8;
    case 1u:
      char v9 = 0;
      int v10 = " * ";
      goto LABEL_8;
    case 2u:
      char v9 = 0;
      int v10 = " mod ";
      goto LABEL_8;
    case 3u:
      char v9 = 0;
      int v10 = " floordiv ";
      goto LABEL_8;
    case 4u:
      char v9 = 0;
      int v10 = " ceildiv ";
      goto LABEL_8;
    case 5u:
      uint64_t v17 = *a1;
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      unint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47);
      return llvm::raw_ostream::operator<<(v17, LHS);
    case 6u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      uint64_t Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4) {
        return (llvm::raw_ostream *)a4(a5, Position, 0);
      }
      uint64_t v29 = *a1;
      uint64_t v30 = (char *)*((void *)*a1 + 4);
      if ((unint64_t)v30 < *((void *)*a1 + 3))
      {
        *((void *)v29 + 4) = v30 + 1;
        char v31 = 100;
        goto LABEL_50;
      }
      char v39 = 100;
      goto LABEL_73;
    case 7u:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      uint64_t Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v47);
      if (a4) {
        return (llvm::raw_ostream *)a4(a5, Position, 1);
      }
      uint64_t v29 = *a1;
      uint64_t v30 = (char *)*((void *)*a1 + 4);
      if ((unint64_t)v30 >= *((void *)*a1 + 3))
      {
        char v39 = 115;
LABEL_73:
        uint64_t v29 = llvm::raw_ostream::write(v29, v39);
      }
      else
      {
        *((void *)v29 + 4) = v30 + 1;
        char v31 = 115;
LABEL_50:
        *uint64_t v30 = v31;
      }
      return llvm::raw_ostream::operator<<(v29, Position);
    default:
      int v10 = 0;
      char v9 = 1;
LABEL_8:
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v46);
      uint64_t v45 = v47;
      uint64_t v11 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v45);
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v45);
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45))
      {
        if (a3 == 1)
        {
          uint64_t v13 = *a1;
          int v14 = (unsigned char *)*((void *)*a1 + 4);
          if ((unint64_t)v14 >= *((void *)*a1 + 3))
          {
            llvm::raw_ostream::write(v13, 40);
            uint64_t v47 = RHS;
            if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
            {
LABEL_13:
              mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
              if (!v47) {
                goto LABEL_30;
              }
LABEL_28:
              if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v45) == 1
                && mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v47) == -1)
              {
                long long v27 = *a1;
                uint64_t v28 = (unsigned char *)*((void *)*a1 + 4);
                if (*((unsigned char **)*a1 + 3) == v28)
                {
                  llvm::raw_ostream::write(v27, "-", 1uLL);
                }
                else
                {
                  *uint64_t v28 = 45;
                  ++*((void *)v27 + 4);
                }
                int v24 = a1;
                uint64_t v25 = v11;
                goto LABEL_36;
              }
LABEL_30:
              mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 1, a4, a5);
              if ((v9 & 1) == 0)
              {
                uint64_t v21 = *a1;
                size_t v22 = strlen(v10);
                uint64_t v23 = (void *)*((void *)*a1 + 4);
                if (v22 <= *((void *)*a1 + 3) - (void)v23)
                {
                  if (v22)
                  {
                    memcpy(v23, v10, v22);
                    *((void *)v21 + 4) += v22;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v21, v10, v22);
                }
              }
              int v24 = a1;
              uint64_t v25 = RHS;
LABEL_36:
              double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(v24, v25, 1, a4, a5);
              if (a3 != 1) {
                return result;
              }
              goto LABEL_78;
            }
LABEL_27:
            mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
            if (!v47) {
              goto LABEL_30;
            }
            goto LABEL_28;
          }
          *((void *)v13 + 4) = v14 + 1;
          *int v14 = 40;
        }
        uint64_t v47 = RHS;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5) {
          goto LABEL_13;
        }
        goto LABEL_27;
      }
      if (a3 != 1) {
        goto LABEL_18;
      }
      uint64_t v15 = *a1;
      int v16 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v16 >= *((void *)*a1 + 3))
      {
        llvm::raw_ostream::write(v15, 40);
        uint64_t v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5) {
          goto LABEL_19;
        }
      }
      else
      {
        *((void *)v15 + 4) = v16 + 1;
        *int v16 = 40;
LABEL_18:
        uint64_t v47 = RHS;
        if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) < 5)
        {
LABEL_19:
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
          uint64_t v44 = v47;
          if (!v47) {
            goto LABEL_55;
          }
          goto LABEL_40;
        }
      }
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
      uint64_t v44 = v47;
      if (!v47) {
        goto LABEL_55;
      }
LABEL_40:
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v44) != 1) {
        goto LABEL_55;
      }
      uint64_t v26 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v44);
      uint64_t v47 = v26;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, v26);
        uint64_t v43 = v47;
        if (!v47) {
          goto LABEL_55;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
        uint64_t v43 = v47;
        if (!v47) {
          goto LABEL_55;
        }
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) == -1)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        uint64_t v47 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        BOOL v40 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) == 0;
        uint64_t v41 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v41, v40, a4, a5);
        if (a3 != 1) {
          return result;
        }
        goto LABEL_78;
      }
      if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v43) <= -2)
      {
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        llvm::raw_ostream::operator<<(*a1, " - ");
        uint64_t v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v32, 1, a4, a5);
        uint64_t v33 = llvm::raw_ostream::operator<<(*a1, " * ");
        uint64_t v34 = (mlir::AffineBinaryOpExpr *)&v43;
        goto LABEL_69;
      }
LABEL_55:
      uint64_t v47 = RHS;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v47) != 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, 0);
        uint64_t v44 = v47;
        if (!v47) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&v47, RHS);
      uint64_t v44 = v47;
      if (v47)
      {
LABEL_59:
        if ((mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v44) & 0x8000000000000000) == 0) {
          goto LABEL_60;
        }
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
        uint64_t v33 = *a1;
        uint64_t v37 = *((void *)*a1 + 4);
        if ((unint64_t)(*((void *)*a1 + 3) - v37) > 2)
        {
          *(unsigned char *)(v37 + 2) = 32;
          *(_WORD *)uint64_t v37 = 11552;
          *((void *)v33 + 4) += 3;
        }
        else
        {
          uint64_t v33 = llvm::raw_ostream::write(*a1, " - ", 3uLL);
        }
        uint64_t v34 = (mlir::AffineBinaryOpExpr *)&v44;
LABEL_69:
        uint64_t v38 = mlir::AffineBinaryOpExpr::getLHS(v34);
        double result = llvm::raw_ostream::operator<<(v33, -v38);
        if (a3 != 1) {
          return result;
        }
        goto LABEL_78;
      }
LABEL_60:
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v11, 0, a4, a5);
      uint64_t v35 = *a1;
      uint64_t v36 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v36) > 2)
      {
        *(unsigned char *)(v36 + 2) = 32;
        *(_WORD *)uint64_t v36 = 11040;
        *((void *)v35 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v35, " + ", 3uLL);
      }
      double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAffineExprInternal(a1, RHS, 0, a4, a5);
      if (a3 == 1)
      {
LABEL_78:
        double result = *a1;
        uint64_t v42 = (unsigned char *)*((void *)*a1 + 4);
        if ((unint64_t)v42 >= *((void *)*a1 + 3))
        {
          return llvm::raw_ostream::write(result, 41);
        }
        else
        {
          *((void *)result + 4) = v42 + 1;
          *uint64_t v42 = 41;
        }
      }
      return result;
  }
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printAffineMap(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v44 = a2;
  int32x2_t v3 = *a1;
  uint64_t v4 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v4 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) < 2) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  *((void *)v3 + 4) = v4 + 1;
  *uint64_t v4 = 40;
  if ((int)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) >= 2)
  {
LABEL_5:
    unint64_t v5 = 0;
    while (1)
    {
      __int32 v6 = *a1;
      uint64_t v7 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v7 >= *((void *)*a1 + 3))
      {
        int v10 = llvm::raw_ostream::write(v6, 100);
        size_t v8 = llvm::raw_ostream::operator<<(v10, v5);
        char v9 = (_WORD *)*((void *)v8 + 4);
        if (*((void *)v8 + 3) - (void)v9 > 1uLL) {
          goto LABEL_6;
        }
LABEL_11:
        llvm::raw_ostream::write(v8, ", ", 2uLL);
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1)) {
          break;
        }
      }
      else
      {
        *((void *)v6 + 4) = v7 + 1;
        *uint64_t v7 = 100;
        size_t v8 = llvm::raw_ostream::operator<<(v6, v5);
        char v9 = (_WORD *)*((void *)v8 + 4);
        if (*((void *)v8 + 3) - (void)v9 <= 1uLL) {
          goto LABEL_11;
        }
LABEL_6:
        _WORD *v9 = 8236;
        *((void *)v8 + 4) += 2;
        if ((uint64_t)++v5 >= (int)(mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44) - 1)) {
          break;
        }
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44))
  {
    uint64_t v11 = *a1;
    unsigned __int8 v12 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v12 >= *((void *)*a1 + 3))
    {
      uint64_t v11 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((void *)v11 + 4) = v12 + 1;
      *unsigned __int8 v12 = 100;
    }
    int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v11, (NumDims - 1));
  }
  int v14 = *a1;
  uint64_t v15 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v15 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v14, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44)) {
      goto LABEL_39;
    }
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
    {
LABEL_39:
      uint64_t v29 = *a1;
      uint64_t v30 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v30) <= 4) {
        goto LABEL_40;
      }
      goto LABEL_43;
    }
  }
  int v16 = *a1;
  uint64_t v17 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v17 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v16, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) == 1) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  *((void *)v16 + 4) = v17 + 1;
  *uint64_t v17 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) != 1)
  {
LABEL_25:
    unint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *a1;
      char v20 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v20 >= *((void *)*a1 + 3))
      {
        uint64_t v23 = llvm::raw_ostream::write(v19, 115);
        uint64_t v21 = llvm::raw_ostream::operator<<(v23, v18);
        size_t v22 = (_WORD *)*((void *)v21 + 4);
        if (*((void *)v21 + 3) - (void)v22 > 1uLL) {
          goto LABEL_26;
        }
LABEL_31:
        llvm::raw_ostream::write(v21, ", ", 2uLL);
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1) {
          break;
        }
      }
      else
      {
        *((void *)v19 + 4) = v20 + 1;
        *char v20 = 115;
        uint64_t v21 = llvm::raw_ostream::operator<<(v19, v18);
        size_t v22 = (_WORD *)*((void *)v21 + 4);
        if (*((void *)v21 + 3) - (void)v22 <= 1uLL) {
          goto LABEL_31;
        }
LABEL_26:
        *size_t v22 = 8236;
        *((void *)v21 + 4) += 2;
        if (++v18 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44) - 1) {
          break;
        }
      }
    }
  }
LABEL_32:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44))
  {
    int v24 = *a1;
    uint64_t v25 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v25 >= *((void *)*a1 + 3))
    {
      int v24 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((void *)v24 + 4) = v25 + 1;
      *uint64_t v25 = 115;
    }
    int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v44);
    llvm::raw_ostream::operator<<(v24, (NumSymbols - 1));
  }
  long long v27 = *a1;
  uint64_t v28 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v28 < *((void *)*a1 + 3))
  {
    *((void *)v27 + 4) = v28 + 1;
    *uint64_t v28 = 93;
    goto LABEL_39;
  }
  llvm::raw_ostream::write(v27, 93);
  uint64_t v29 = *a1;
  uint64_t v30 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v30) <= 4)
  {
LABEL_40:
    llvm::raw_ostream::write(v29, " -> (", 5uLL);
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
    if (!v32) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_43:
  *(unsigned char *)(v30 + 4) = 40;
  *(_DWORD *)uint64_t v30 = 540945696;
  *((void *)v29 + 4) += 5;
  Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&v44);
  if (!v32) {
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v34 = Results;
  uint64_t v35 = v32;
  uint64_t v36 = *a1;
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, *Results, 0, 0, v33);
  if (v35 != 1)
  {
    BOOL v40 = v34 + 1;
    uint64_t v41 = 8 * v35 - 8;
    do
    {
      uint64_t v43 = (_WORD *)*((void *)v36 + 4);
      if (*((void *)v36 + 3) - (void)v43 > 1uLL)
      {
        *uint64_t v43 = 8236;
        *((void *)v36 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v36, ", ", 2uLL);
      }
      uint64_t v42 = *v40++;
      mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v42, 0, 0, v37);
      v41 -= 8;
    }
    while (v41);
  }
LABEL_45:
  double result = *a1;
  char v39 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v39 >= *((void *)*a1 + 3)) {
    return llvm::raw_ostream::write(result, 41);
  }
  *((void *)result + 4) = v39 + 1;
  *char v39 = 41;
  return result;
}

llvm::raw_ostream *mlir::AsmPrinter::Impl::printIntegerSet(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v60 = a2;
  int32x2_t v3 = *a1;
  uint64_t v4 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v4 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 40);
    if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) < 2) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  *((void *)v3 + 4) = v4 + 1;
  *uint64_t v4 = 40;
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60) >= 2)
  {
LABEL_5:
    unint64_t v5 = 0;
    while (1)
    {
      size_t v8 = *a1;
      char v9 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v9 >= *((void *)*a1 + 3))
      {
        unsigned __int8 v12 = llvm::raw_ostream::write(v8, 100);
        int v10 = llvm::raw_ostream::operator<<(v12, v5);
        uint64_t v11 = (_WORD *)*((void *)v10 + 4);
        if (*((void *)v10 + 3) - (void)v11 > 1uLL) {
          goto LABEL_6;
        }
LABEL_11:
        llvm::raw_ostream::write(v10, ", ", 2uLL);
        unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        unint64_t v14 = v5 + 2;
        ++v5;
        if (v14 >= NumDims) {
          break;
        }
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        unsigned char *v9 = 100;
        int v10 = llvm::raw_ostream::operator<<(v8, v5);
        uint64_t v11 = (_WORD *)*((void *)v10 + 4);
        if (*((void *)v10 + 3) - (void)v11 <= 1uLL) {
          goto LABEL_11;
        }
LABEL_6:
        *uint64_t v11 = 8236;
        *((void *)v10 + 4) += 2;
        unsigned int v6 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
        unint64_t v7 = v5 + 2;
        ++v5;
        if (v7 >= v6) {
          break;
        }
      }
    }
  }
LABEL_12:
  if (mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60))
  {
    uint64_t v15 = *a1;
    int v16 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v16 >= *((void *)*a1 + 3))
    {
      uint64_t v15 = llvm::raw_ostream::write(*a1, 100);
    }
    else
    {
      *((void *)v15 + 4) = v16 + 1;
      *int v16 = 100;
    }
    int v17 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v15, (v17 - 1));
  }
  unint64_t v18 = *a1;
  uint64_t v19 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v19 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
    {
LABEL_19:
      char v20 = *a1;
      uint64_t v21 = (_DWORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v21 <= 3uLL) {
        goto LABEL_20;
      }
LABEL_43:
      *uint64_t v21 = 673200672;
      *((void *)v20 + 4) += 4;
      int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
      int v23 = Position - 1;
      if (Position <= 1) {
        goto LABEL_57;
      }
      goto LABEL_44;
    }
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 41;
    if (!mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60)) {
      goto LABEL_19;
    }
  }
  int v24 = *a1;
  uint64_t v25 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v25 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v24, 91);
    if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) == 1) {
      goto LABEL_34;
    }
    goto LABEL_27;
  }
  *((void *)v24 + 4) = v25 + 1;
  *uint64_t v25 = 91;
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) != 1)
  {
LABEL_27:
    unint64_t v26 = 0;
    while (1)
    {
      long long v27 = *a1;
      uint64_t v28 = (unsigned char *)*((void *)*a1 + 4);
      if ((unint64_t)v28 >= *((void *)*a1 + 3))
      {
        char v31 = llvm::raw_ostream::write(v27, 115);
        uint64_t v29 = llvm::raw_ostream::operator<<(v31, v26);
        uint64_t v30 = (_WORD *)*((void *)v29 + 4);
        if (*((void *)v29 + 3) - (void)v30 > 1uLL) {
          goto LABEL_28;
        }
LABEL_33:
        llvm::raw_ostream::write(v29, ", ", 2uLL);
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1) {
          break;
        }
      }
      else
      {
        *((void *)v27 + 4) = v28 + 1;
        *uint64_t v28 = 115;
        uint64_t v29 = llvm::raw_ostream::operator<<(v27, v26);
        uint64_t v30 = (_WORD *)*((void *)v29 + 4);
        if (*((void *)v29 + 3) - (void)v30 <= 1uLL) {
          goto LABEL_33;
        }
LABEL_28:
        *uint64_t v30 = 8236;
        *((void *)v29 + 4) += 2;
        if (++v26 >= mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60) - 1) {
          break;
        }
      }
    }
  }
LABEL_34:
  if (mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60))
  {
    uint64_t v32 = *a1;
    uint64_t v33 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v33 >= *((void *)*a1 + 3))
    {
      uint64_t v32 = llvm::raw_ostream::write(*a1, 115);
    }
    else
    {
      *((void *)v32 + 4) = v33 + 1;
      *uint64_t v33 = 115;
    }
    int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&v60);
    llvm::raw_ostream::operator<<(v32, (NumSymbols - 1));
  }
  uint64_t v35 = *a1;
  uint64_t v36 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v36 >= *((void *)*a1 + 3))
  {
    llvm::raw_ostream::write(v35, 93);
    char v20 = *a1;
    uint64_t v21 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v21 > 3uLL) {
      goto LABEL_43;
    }
  }
  else
  {
    *((void *)v35 + 4) = v36 + 1;
    *uint64_t v36 = 93;
    char v20 = *a1;
    uint64_t v21 = (_DWORD *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v21 > 3uLL) {
      goto LABEL_43;
    }
  }
LABEL_20:
  llvm::raw_ostream::write(v20, " : (", 4uLL);
  int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v60);
  int v23 = Position - 1;
  if (Position > 1)
  {
LABEL_44:
    for (unsigned int i = 0; v23 != i; ++i)
    {
      while (1)
      {
        uint64_t Constraint = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, i);
        int isEq = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, i);
        mlir::AsmPrinter::Impl::printAffineExprInternal(a1, Constraint, 0, 0, v40);
        uint64_t v41 = *a1;
        uint64_t v42 = *((void *)*a1 + 4);
        unint64_t v43 = *((void *)*a1 + 3) - v42;
        if (!isEq) {
          break;
        }
        if (v43 <= 4)
        {
          uint64_t v44 = " == 0";
          goto LABEL_51;
        }
        *(unsigned char *)(v42 + 4) = 48;
        unsigned __int16 v47 = 15648;
LABEL_55:
        *(_DWORD *)uint64_t v42 = v47 | 0x203D0000;
        *((void *)v41 + 4) += 5;
        uint64_t v45 = *a1;
        uint64_t v46 = (_WORD *)*((void *)*a1 + 4);
        if (*((void *)*a1 + 3) - (void)v46 > 1uLL) {
          goto LABEL_45;
        }
LABEL_56:
        llvm::raw_ostream::write(v45, ", ", 2uLL);
        if (v23 == ++i) {
          goto LABEL_57;
        }
      }
      if (v43 > 4)
      {
        *(unsigned char *)(v42 + 4) = 48;
        unsigned __int16 v47 = 15904;
        goto LABEL_55;
      }
      uint64_t v44 = " >= 0";
LABEL_51:
      llvm::raw_ostream::write(v41, v44, 5uLL);
      uint64_t v45 = *a1;
      uint64_t v46 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v46 <= 1uLL) {
        goto LABEL_56;
      }
LABEL_45:
      *uint64_t v46 = 8236;
      *((void *)v45 + 4) += 2;
    }
  }
LABEL_57:
  BOOL v48 = __OFSUB__(Position, 1);
  signed int v49 = Position - 1;
  if (v49 < 0 != v48) {
    goto LABEL_64;
  }
  uint64_t v50 = mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v60, v49);
  int v51 = mlir::IntegerSet::isEq((mlir::IntegerSet *)&v60, v49);
  mlir::AsmPrinter::Impl::printAffineExprInternal(a1, v50, 0, 0, v52);
  uint64_t v53 = *a1;
  uint64_t v54 = *((void *)*a1 + 4);
  unint64_t v55 = *((void *)*a1 + 3) - v54;
  if (!v51)
  {
    if (v55 <= 4)
    {
      int v56 = " >= 0";
      goto LABEL_63;
    }
    *(unsigned char *)(v54 + 4) = 48;
    unsigned __int16 v59 = 15904;
LABEL_68:
    *(_DWORD *)uint64_t v54 = v59 | 0x203D0000;
    *((void *)v53 + 4) += 5;
    double result = *a1;
    uint64_t v58 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v58 < *((void *)*a1 + 3)) {
      goto LABEL_65;
    }
    return llvm::raw_ostream::write(result, 41);
  }
  if (v55 > 4)
  {
    *(unsigned char *)(v54 + 4) = 48;
    unsigned __int16 v59 = 15648;
    goto LABEL_68;
  }
  int v56 = " == 0";
LABEL_63:
  llvm::raw_ostream::write(v53, v56, 5uLL);
LABEL_64:
  double result = *a1;
  uint64_t v58 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v58 < *((void *)*a1 + 3))
  {
LABEL_65:
    *((void *)result + 4) = v58 + 1;
    *uint64_t v58 = 41;
    return result;
  }
  return llvm::raw_ostream::write(result, 41);
}

double mlir::Attribute::print(uint64_t ***this, llvm::raw_ostream *a2, mlir::AsmState *a3, int a4)
{
  uint64_t v4 = *(void *)a3;
  v10[0] = a2;
  v10[1] = (llvm::raw_ostream *)v4;
  uint64_t v13 = *(void *)(v4 + 648);
  long long v5 = *(_OWORD *)(v4 + 632);
  long long v11 = *(_OWORD *)(v4 + 616);
  long long v12 = v5;
  int v14 = 1;
  unsigned int v6 = *this;
  if (a4) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  if (v6)
  {
      mlir::AsmPrinter::Impl::printAttributeImpl(v10, v6, v7);
  }
  else
  {
    uint64_t v9 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v9) > 0x11)
    {
      *(_WORD *)(v9 + 16) = 15934;
      double result = *(double *)"<<NULL ATTRIBUTE>>";
      *(_OWORD *)uint64_t v9 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((void *)a2 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<<NULL ATTRIBUTE>>", 0x12uLL);
    }
  }
  return result;
}

void mlir::Type::print(uint64_t ***this, llvm::raw_ostream *a2, mlir::AsmState *a3)
{
  uint64_t v3 = *(void *)a3;
  v7[0] = a2;
  v7[1] = v3;
  uint64_t v10 = *(void *)(v3 + 648);
  long long v4 = *(_OWORD *)(v3 + 632);
  long long v8 = *(_OWORD *)(v3 + 616);
  long long v9 = v4;
  int v11 = 1;
  long long v5 = *this;
  if (*this)
  {
    if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)v7, (uint64_t)v5)) {
      mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)v7, v5);
    }
  }
  else
  {
    unsigned int v6 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v6 > 0xCuLL)
    {
      qmemcpy(v6, "<<NULL TYPE>>", 13);
      *((void *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<<NULL TYPE>>", 0xDuLL);
    }
  }
}

llvm::raw_ostream *mlir::Type::dump(mlir::Type *this)
{
  __int32 v2 = (llvm::raw_ostream *)llvm::errs(this);
  uint64_t v3 = mlir::Type::print(this, v2);
  double result = (llvm::raw_ostream *)llvm::errs(v3);
  long long v5 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v5)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    unsigned char *v5 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2)
{
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v5);
  return mlir::Value::print(this, a2, (const mlir::OpPrintingFlags *)v5);
}

mlir::Value *mlir::Value::print(mlir::Value *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  uint64_t v3 = a2;
  if (*(void *)this)
  {
    long long v5 = this;
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp(this);
    if (DefiningOp)
    {
      return mlir::Operation::print(DefiningOp, v3, a3);
    }
    else
    {
      uint64_t v8 = *(void *)v5;
      long long v9 = (void *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v9 > 0x19uLL)
      {
        qmemcpy(v9, "<block argument> of type '", 26);
        *((void *)v3 + 4) += 26;
      }
      else
      {
        uint64_t v3 = llvm::raw_ostream::write(v3, "<block argument> of type '", 0x1AuLL);
      }
      unint64_t v11 = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::Type::print((llvm::raw_ostream *)&v11, v3);
      uint64_t v10 = *((void *)v3 + 4);
      if ((unint64_t)(*((void *)v3 + 3) - v10) > 0xB)
      {
        *(_DWORD *)(v10 + 8) = 540702821;
        *(void *)uint64_t v10 = *(void *)"' at index: ";
        *((void *)v3 + 4) += 12;
      }
      else
      {
        uint64_t v3 = llvm::raw_ostream::write(v3, "' at index: ", 0xCuLL);
      }
      return llvm::raw_ostream::operator<<(v3, *(unsigned int *)(v8 + 24));
    }
  }
  else
  {
    int v7 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v7 > 0xDuLL)
    {
      qmemcpy(v7, "<<NULL VALUE>>", 14);
      *((void *)a2 + 4) += 14;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<NULL VALUE>>", 0xEuLL);
    }
  }
  return this;
}

mlir::detail::AsmStateImpl *mlir::Operation::print(mlir::Operation *this, llvm::raw_ostream *a2, const mlir::OpPrintingFlags *a3)
{
  long long v5 = (const char **)this;
  if ((*((unsigned char *)a3 + 32) & 0x20) != 0)
  {
    do
    {
      unsigned int v6 = this;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>((void *)this + 6)) {
        break;
      }
      uint64_t v8 = (mlir::Block *)*((void *)v6 + 2);
      if (!v8) {
        break;
      }
      this = (mlir::Operation *)mlir::Block::getParentOp(v8);
    }
    while (this);
  }
  else
  {
    do
    {
      unsigned int v6 = this;
      int v7 = (mlir::Block *)*((void *)this + 2);
      if (!v7) {
        break;
      }
      this = (mlir::Operation *)mlir::Block::getParentOp(v7);
    }
    while (this);
  }
  mlir::AsmState::AsmState((llvm *)&v10, (uint64_t)v6, (uint64_t)a3, 0, 0);
  mlir::Operation::print(v5, a2, (mlir::AsmState *)&v10);
  double result = v10;
  uint64_t v10 = 0;
  if (result) {
    mlir::detail::AsmStateImpl::~AsmStateImpl(result);
  }
  return result;
}

void mlir::Operation::print(const char **this, llvm::raw_ostream *a2, mlir::AsmState *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a3;
  v7[0] = a2;
  v7[1] = (llvm::raw_ostream *)v4;
  uint64_t v10 = *(void *)(v4 + 648);
  long long v5 = *(_OWORD *)(v4 + 632);
  long long v8 = *(_OWORD *)(v4 + 616);
  long long v9 = v5;
  int v11 = 1;
  v6[0] = &unk_1EC998280;
  v6[1] = v7;
  long long v12 = v14;
  v14[0] = "builtin";
  v14[1] = 7;
  uint64_t v13 = 0x300000001;
  int v15 = 0;
  if (!this[2] && (*(unsigned char *)(v4 + 648) & 0x20) == 0) {
    mlir::detail::AsmStateImpl::initializeAliases((mlir::detail::AsmStateImpl *)v4, this);
  }
  v6[0] = &unk_1EC998280;
  if (v12 != v14) {
    free(v12);
  }
}

llvm::raw_ostream *anonymous namespace'::SSANameState::printValueID(llvm::raw_ostream *result, unint64_t a2, int a3, llvm::raw_ostream *a4)
{
  uint64_t v4 = a4;
  if (a2)
  {
    unsigned int v6 = result;
    unint64_t v41 = a2;
    uint64_t v7 = *(void *)(a2 + 8) & 7;
    if (v7 == 7) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = a2;
    }
    if (v7 == 7
      || (uint64_t Owner = mlir::detail::OpResultImpl::getOwner((mlir::detail::OpResultImpl *)v8),
          int v10 = *(_DWORD *)(Owner + 36),
          v10 == 1))
    {
      int v11 = 0;
      BOOL v12 = 0;
      uint64_t v42 = 0;
      double result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
      if (!result) {
        goto LABEL_58;
      }
      goto LABEL_8;
    }
    uint64_t v19 = *(void *)(v8 + 8);
    if ((v19 & 7) == 6)
    {
      int v11 = *(_DWORD *)(v8 + 16) + 6;
      uint64_t v20 = *((void *)v6 + 9);
      uint64_t v21 = *((unsigned int *)v6 + 22);
      if (!v21) {
        goto LABEL_40;
      }
    }
    else
    {
      int v11 = v19 & 7;
      uint64_t v20 = *((void *)v6 + 9);
      uint64_t v21 = *((unsigned int *)v6 + 22);
      if (!v21) {
        goto LABEL_40;
      }
    }
    unsigned int v22 = v21 - 1;
    int v23 = (uint64_t *)(v20 + 32 * ((v21 - 1) & ((Owner >> 4) ^ (Owner >> 9))));
    uint64_t v24 = *v23;
    if (*v23 == Owner) {
      goto LABEL_41;
    }
    int v25 = 1;
    LODWORD(v26) = v22 & ((Owner >> 4) ^ (Owner >> 9));
    while (v24 != -4096)
    {
      int v27 = v26 + v25++;
      uint64_t v26 = v27 & v22;
      uint64_t v24 = *(void *)(v20 + 32 * v26);
      if (v24 == Owner)
      {
        int v23 = (uint64_t *)(v20 + 32 * v26);
        goto LABEL_41;
      }
    }
LABEL_40:
    int v23 = (uint64_t *)(v20 + 32 * v21);
LABEL_41:
    if (v23 == (uint64_t *)(v20 + 32 * v21))
    {
      uint64_t v39 = Owner - 16;
      BOOL v12 = 1;
    }
    else
    {
      uint64_t v30 = (int *)v23[1];
      unint64_t v31 = *((unsigned int *)v23 + 4);
      uint64_t v32 = &v30[v31];
      if (!v31) {
        goto LABEL_49;
      }
      do
      {
        unint64_t v33 = v31 >> 1;
        uint64_t v34 = &v30[v31 >> 1];
        int v36 = *v34;
        uint64_t v35 = v34 + 1;
        v31 += ~(v31 >> 1);
        if (v11 < v36) {
          unint64_t v31 = v33;
        }
        else {
          uint64_t v30 = v35;
        }
      }
      while (v31);
      if (v30 == v32)
      {
LABEL_49:
        unsigned int v37 = *(v32 - 1);
      }
      else
      {
        unsigned int v37 = *(v30 - 1);
        int v10 = *v30;
      }
      int v38 = v10 - v37;
      BOOL v12 = v38 != 1;
      if (v38 == 1) {
        int v11 = 0;
      }
      else {
        v11 -= v37;
      }
      if (v37 > 5) {
        uint64_t v39 = Owner - 24 * (v37 - 5) - 96;
      }
      else {
        uint64_t v39 = Owner - 16 * (v37 + 1);
      }
    }
    unint64_t v41 = v39;
    uint64_t v42 = 0;
    double result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, &v41, &v42);
    if (!result) {
      goto LABEL_58;
    }
LABEL_8:
    uint64_t v13 = v42;
    if (v42 != *(void *)v6 + 16 * *((unsigned int *)v6 + 4))
    {
      int v14 = (unsigned char *)*((void *)v4 + 4);
      if ((unint64_t)v14 >= *((void *)v4 + 3))
      {
        llvm::raw_ostream::write(v4, 37);
        unint64_t v15 = *(unsigned int *)(v13 + 8);
        if (v15 != -1) {
          goto LABEL_11;
        }
      }
      else
      {
        *((void *)v4 + 4) = v14 + 1;
        *int v14 = 37;
        unint64_t v15 = *(unsigned int *)(v13 + 8);
        if (v15 != -1)
        {
LABEL_11:
          double result = llvm::raw_ostream::operator<<(v4, v15);
LABEL_34:
          if (v12 && a3)
          {
            uint64_t v29 = (unsigned char *)*((void *)v4 + 4);
            if ((unint64_t)v29 >= *((void *)v4 + 3))
            {
              uint64_t v4 = llvm::raw_ostream::write(v4, 35);
            }
            else
            {
              *((void *)v4 + 4) = v29 + 1;
              *uint64_t v29 = 35;
            }
            return llvm::raw_ostream::operator<<(v4, v11);
          }
          return result;
        }
      }
      uint64_t v42 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)v6 + 3, &v41, &v42))
      {
        int v17 = *(const void **)(v42 + 8);
        size_t v18 = *(void *)(v42 + 16);
        double result = (llvm::raw_ostream *)*((void *)v4 + 4);
        if (v18 <= *((void *)v4 + 3) - (void)result) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v28 = *((void *)v6 + 3) + 24 * *((unsigned int *)v6 + 10);
        int v17 = *(const void **)(v28 + 8);
        size_t v18 = *(void *)(v28 + 16);
        double result = (llvm::raw_ostream *)*((void *)v4 + 4);
        if (v18 <= *((void *)v4 + 3) - (void)result)
        {
LABEL_19:
          if (v18)
          {
            double result = (llvm::raw_ostream *)memcpy(result, v17, v18);
            *((void *)v4 + 4) += v18;
          }
          goto LABEL_34;
        }
      }
      double result = llvm::raw_ostream::write(v4, (const char *)v17, v18);
      goto LABEL_34;
    }
LABEL_58:
    uint64_t v40 = (void *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v40 <= 0x14uLL) {
      return llvm::raw_ostream::write(v4, "<<UNKNOWN SSA VALUE>>", 0x15uLL);
    }
    qmemcpy(v40, "<<UNKNOWN SSA VALUE>>", 21);
    *((void *)v4 + 4) += 21;
    return result;
  }
  uint64_t v16 = (void *)*((void *)a4 + 4);
  if (*((void *)a4 + 3) - (void)v16 > 0xDuLL)
  {
    qmemcpy(v16, "<<NULL VALUE>>", 14);
    *((void *)a4 + 4) += 14;
  }
  else
  {
    return llvm::raw_ostream::write(a4, "<<NULL VALUE>>", 0xEuLL);
  }
  return result;
}

void mlir::detail::AsmStateImpl::initializeAliases(mlir::detail::AsmStateImpl *this, const char **a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 616;
  v118[0] = this;
  v118[1] = (char *)this + 184;
  uint64_t v99 = (char *)this + 184;
  unint64_t v119 = 0;
  uint64_t v120 = 0;
  unsigned int v121 = 0;
  uint64_t v122 = &v124;
  uint64_t v123 = 0;
  uint64_t v124 = v126;
  long long v125 = xmmword_1810FE500;
  int v128 = 0;
  char v132 = 0;
  uint64_t v133 = 0;
  int v134 = 1;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v129 = 0;
  uint64_t v127 = &unk_1EC9A3930;
  v135 = &v124;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v127, 0, 0, 0);
  v100[0] = &unk_1EC99B7D8;
  v100[1] = 0;
  uint64_t v101 = v4;
  uint64_t v102 = v118;
  int v104 = 0;
  char v108 = 0;
  uint64_t v109 = 0;
  int v110 = 1;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  int v103 = &unk_1EC9A3838;
  char v5 = *((unsigned char *)this + 648);
  if (v5)
  {
    char v5 = v101[32];
  }
  if ((v5 & 4) != 0)
  {
    (*(void (**)(void *, const char **, uint64_t))(v100[0] + 216))(v100, a2, 1);
    int v6 = v120;
    if (!v120) {
      goto LABEL_33;
    }
  }
  else
  {
    (*(void (**)(const char *, const char **, void *, const char *, void))(*(void *)a2[6] + 56))(a2[6], a2, v100, "", 0);
    int v6 = v120;
    if (!v120) {
      goto LABEL_33;
    }
  }
  uint64_t v7 = v121;
  if (v121 > 4 * v6 && v121 >= 0x41)
  {
    if (!v6 || ((int v8 = 1 << (33 - __clz(v6 - 1)), v8 <= 64) ? (v9 = 64) : (v9 = v8), v9 != v121)) {
      llvm::deallocate_buffer(v119, (void *)(16 * v121));
    }
    uint64_t v120 = 0;
    int v10 = v119;
    uint64_t v11 = (v121 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v11)
    {
      uint64_t v12 = v11 + 1;
      uint64_t v13 = (v11 + 1) & 0x1FFFFFFFFFFFFFFELL;
      int v14 = (llvm *)((char *)v119 + 16 * v13);
      unint64_t v15 = (void *)((char *)v119 + 16);
      uint64_t v16 = v13;
      do
      {
        *(v15 - 2) = -4096;
        *unint64_t v15 = -4096;
        v15 += 4;
        v16 -= 2;
      }
      while (v16);
      if (v12 == v13)
      {
LABEL_33:
        uint64_t v114 = v116;
        uint64_t v115 = 0;
        unint64_t v26 = v123;
        if (!v123) {
          goto LABEL_42;
        }
        int v27 = v122;
        if (v122 == &v124)
        {
          v116[0] = 0;
          uint64_t v80 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v114, v116, v123, 104, v116);
          int v27 = v80;
          uint64_t v81 = (unint64_t *)v114;
          if (v115)
          {
            uint64_t v82 = (char *)v114 + 104 * v115;
            v83 = v80 + 5;
            uint64_t v84 = (char *)v114 + 40;
            do
            {
              uint64_t v85 = v84 - 40;
              *(v83 - 5) = *((void *)v84 - 5);
              long long v86 = *((_OWORD *)v84 - 2);
              *(_OWORD *)((char *)v83 - 20) = *(_OWORD *)(v84 - 20);
              *((_OWORD *)v83 - 2) = v86;
              void *v83 = v83 + 2;
              v83[1] = 0x600000000;
              if (*((_DWORD *)v84 + 2)) {
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v83, (uint64_t)v84);
              }
              v83 += 13;
              v84 += 104;
            }
            while (v85 + 104 != v82);
            uint64_t v81 = (unint64_t *)v114;
            if (v115)
            {
              uint64_t v87 = 13 * v115;
              do
              {
                uint64_t v88 = (unint64_t *)v81[v87 - 8];
                if (&v81[v87 - 6] != v88) {
                  free(v88);
                }
                v87 -= 13;
              }
              while (v87 * 8);
              uint64_t v81 = (unint64_t *)v114;
            }
          }
          int v89 = v116[0];
          if (v81 != v116) {
            free(v81);
          }
          uint64_t v114 = v27;
          HIDWORD(v115) = v89;
          if (v123)
          {
            uint64_t v90 = (char *)v122 + 104 * v123;
            size_t v91 = v27 + 5;
            uint64_t v92 = (char *)v122 + 40;
            do
            {
              uint64_t v93 = v92 - 40;
              *(v91 - 5) = *((void *)v92 - 5);
              long long v94 = *((_OWORD *)v92 - 2);
              *(_OWORD *)((char *)v91 - 20) = *(_OWORD *)(v92 - 20);
              *((_OWORD *)v91 - 2) = v94;
              *size_t v91 = v91 + 2;
              v91[1] = 0x600000000;
              if (*((_DWORD *)v92 + 2)) {
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v91, (uint64_t)v92);
              }
              v91 += 13;
              v92 += 104;
            }
            while (v93 + 104 != v90);
            uint64_t v95 = (char *)v122;
            LODWORD(v115) = v26;
            if (v123)
            {
              uint64_t v96 = 104 * v123;
              do
              {
                uint64_t v97 = *(char **)&v95[v96 - 64];
                if (&v95[v96 - 48] != v97) {
                  free(v97);
                }
                v96 -= 104;
              }
              while (v96);
              unint64_t v26 = v115;
              LODWORD(v123) = 0;
              if (!v115)
              {
LABEL_42:
                uint64_t v111 = 0;
                uint64_t v112 = 0;
                uint64_t v113 = 0x1000000000;
                if (!v115) {
                  goto LABEL_98;
                }
                unint64_t v33 = (char *)v114;
                uint64_t v34 = (char *)v114 + 104 * v115;
                size_t v98 = (uint64_t *)((char *)this + 168);
                while (1)
                {
                  if (v33[24])
                  {
                    uint64_t v40 = (int8x16_t *)*((void *)v33 + 1);
                    uint64_t v39 = (const unsigned __int8 *)*((void *)v33 + 2);
                    unint64_t v41 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((uint64_t)&v111, v40, v39);
                    int v42 = *(_DWORD *)(*v41 + 8);
                    *(_DWORD *)(*v41 + 8) = v42 + 1;
                    int v43 = *((_DWORD *)v33 + 8);
                    unint64_t v44 = *(void *)v33;
                    unsigned int v45 = *((_DWORD *)this + 40);
                    if (!v45) {
                      goto LABEL_68;
                    }
                    uint64_t v35 = *((void *)this + 18);
                    unsigned int v36 = ((v44 >> 4) ^ (v44 >> 9)) & (v45 - 1);
                    unsigned int v37 = (unint64_t *)(v35 + 16 * v36);
                    unint64_t v38 = *v37;
                    if (v44 != *v37) {
                      break;
                    }
                  }
LABEL_45:
                  v33 += 104;
                  if (v33 == v34)
                  {
                    if (HIDWORD(v112) && v112)
                    {
                      uint64_t v71 = 0;
                      do
                      {
                        unint64_t v72 = *(llvm **)((char *)v111 + v71);
                        if (v72 != (llvm *)-8 && v72 != 0) {
                          llvm::deallocate_buffer(v72, (void *)(*(void *)v72 + 17));
                        }
                        v71 += 8;
                      }
                      while (8 * v112 != v71);
                    }
LABEL_98:
                    free(v111);
                    v74 = (unint64_t *)v114;
                    if (v115)
                    {
                      uint64_t v75 = 13 * v115;
                      do
                      {
                        uint64_t v76 = (unint64_t *)v74[v75 - 8];
                        if (&v74[v75 - 6] != v76) {
                          free(v76);
                        }
                        v75 -= 13;
                      }
                      while (v75 * 8);
                      v74 = (unint64_t *)v114;
                    }
                    if (v74 != v116) {
                      free(v74);
                    }
                    v100[0] = &unk_1EC99B7D8;
                    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v103);
                    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v127);
                    if (v124 != v126) {
                      free(v124);
                    }
                    uint64_t v77 = (void **)v122;
                    if (v123)
                    {
                      uint64_t v78 = 13 * v123;
                      do
                      {
                        unsigned int v79 = (void **)v77[v78 - 8];
                        if (&v77[v78 - 6] != v79) {
                          free(v79);
                        }
                        v78 -= 13;
                      }
                      while (v78 * 8);
                      uint64_t v77 = (void **)v122;
                    }
                    if (v77 != &v124) {
                      free(v77);
                    }
                    llvm::deallocate_buffer(v119, (void *)(16 * v121));
                  }
                }
                uint64_t v50 = 0;
                int v51 = 1;
                while (v38 != -4096)
                {
                  if (v50) {
                    BOOL v52 = 0;
                  }
                  else {
                    BOOL v52 = v38 == -8192;
                  }
                  if (v52) {
                    uint64_t v50 = v37;
                  }
                  unsigned int v53 = v36 + v51++;
                  unsigned int v36 = v53 & (v45 - 1);
                  unsigned int v37 = (unint64_t *)(v35 + 16 * v36);
                  unint64_t v38 = *v37;
                  if (v44 == *v37) {
                    goto LABEL_45;
                  }
                }
                if (v50) {
                  uint64_t v54 = v50;
                }
                else {
                  uint64_t v54 = v37;
                }
                int v55 = *((_DWORD *)this + 38);
                if (4 * v55 + 4 < 3 * v45)
                {
                  if (v45 + ~v55 - *((_DWORD *)this + 39) > v45 >> 3) {
                    goto LABEL_50;
                  }
                }
                else
                {
LABEL_68:
                  v45 *= 2;
                }
                llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 144, v45);
                uint64_t v56 = *((void *)this + 18);
                int v57 = *((_DWORD *)this + 40) - 1;
                unsigned int v58 = v57 & ((v44 >> 4) ^ (v44 >> 9));
                uint64_t v54 = (unint64_t *)(v56 + 16 * v58);
                unint64_t v59 = *v54;
                if (v44 == *v54)
                {
LABEL_70:
                  ++*((_DWORD *)this + 38);
                  if (v44 == -4096) {
                    goto LABEL_52;
                  }
                  goto LABEL_51;
                }
                char v66 = 0;
                int v67 = 1;
                while (v59 != -4096)
                {
                  if (v66) {
                    BOOL v68 = 0;
                  }
                  else {
                    BOOL v68 = v59 == -8192;
                  }
                  if (v68) {
                    char v66 = v54;
                  }
                  unsigned int v69 = v58 + v67++;
                  unsigned int v58 = v69 & v57;
                  uint64_t v54 = (unint64_t *)(v56 + 16 * (v69 & v57));
                  unint64_t v59 = *v54;
                  if (v44 == *v54) {
                    goto LABEL_70;
                  }
                }
                if (v66) {
                  uint64_t v54 = v66;
                }
LABEL_50:
                unint64_t v46 = *v54;
                ++*((_DWORD *)this + 38);
                if (v46 == -4096)
                {
LABEL_52:
                  unsigned int v47 = v43 & 0xC0000000 | v42 & 0x3FFFFFFF;
                  unint64_t *v54 = v44;
                  *((_DWORD *)v54 + 2) = 0;
                  uint64_t v48 = *((unsigned int *)this + 44);
                  *((_DWORD *)v54 + 2) = v48;
                  if (v48 >= *((_DWORD *)this + 45))
                  {
                    v116[0] = v44;
                    v116[1] = (unint64_t)v40;
                    v116[2] = (unint64_t)v39;
                    unsigned int v117 = v47;
                    unint64_t v60 = v48 + 1;
                    BOOL v61 = *v98 + 32 * v48 > (unint64_t)v116;
                    if (*v98 <= (unint64_t)v116 && v61)
                    {
                      char v70 = (char *)v116 - *v98;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      uint64_t v62 = *v98;
                      uint64_t v63 = (unint64_t *)&v70[*v98];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v98, v99, v60, 32);
                      uint64_t v62 = *v98;
                      uint64_t v63 = v116;
                    }
                    signed int v64 = (_OWORD *)(v62 + 32 * *((unsigned int *)this + 44));
                    long long v65 = *((_OWORD *)v63 + 1);
                    _OWORD *v64 = *(_OWORD *)v63;
                    v64[1] = v65;
                  }
                  else
                  {
                    uint64_t v49 = *((void *)this + 21) + 32 * v48;
                    *(void *)uint64_t v49 = v44;
                    *(void *)(v49 + 8) = v40;
                    *(void *)(v49 + 16) = v39;
                    *(_DWORD *)(v49 + 24) = v47;
                  }
                  ++*((_DWORD *)this + 44);
                  goto LABEL_45;
                }
LABEL_51:
                --*((_DWORD *)this + 39);
                goto LABEL_52;
              }
              int v27 = v114;
LABEL_37:
              uint64_t v28 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
              unint64_t v29 = v26;
              while (1)
              {
                uint64_t v30 = operator new(104 * v29, v28);
                if (v30) {
                  break;
                }
                BOOL v31 = v29 > 1;
                v29 >>= 1;
                if (!v31)
                {
                  goto LABEL_42;
                }
              }
              uint64_t v32 = v30;
              operator delete(v32);
              goto LABEL_42;
            }
            int v27 = v114;
          }
          else
          {
            LODWORD(v115) = v26;
          }
        }
        else
        {
          uint64_t v114 = v122;
          uint64_t v115 = v123;
          uint64_t v122 = &v124;
          HIDWORD(v123) = 0;
        }
        LODWORD(v123) = 0;
        goto LABEL_37;
      }
    }
    else
    {
      int v14 = v119;
    }
    int v25 = (llvm *)((char *)v10 + 16 * v7);
    do
    {
      *(void *)int v14 = -4096;
      int v14 = (llvm *)((char *)v14 + 16);
    }
    while (v14 != v25);
    goto LABEL_33;
  }
  if (v121)
  {
    int v17 = v119;
    uint64_t v18 = (v121 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v18)
    {
      uint64_t v19 = v18 + 1;
      uint64_t v20 = (v18 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v21 = (llvm *)((char *)v119 + 16 * v20);
      unsigned int v22 = (void *)((char *)v119 + 16);
      uint64_t v23 = v20;
      do
      {
        *(v22 - 2) = -4096;
        *unsigned int v22 = -4096;
        v22 += 4;
        v23 -= 2;
      }
      while (v23);
      if (v19 == v20) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v21 = v119;
    }
    uint64_t v24 = (llvm *)((char *)v17 + 16 * v7);
    do
    {
      *(void *)uint64_t v21 = -4096;
      uint64_t v21 = (llvm *)((char *)v21 + 16);
    }
    while (v21 != v24);
  }
LABEL_29:
  uint64_t v120 = 0;
  goto LABEL_33;
}

void anonymous namespace'::OperationPrinter::printFullOpWithIndentAndLoc(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  uint64_t v4 = (llvm::raw_ostream **)((char *)this + 16);
  uint64_t v5 = *((void *)this + 3);
  int v6 = *((_DWORD *)this + 18);
  unsigned int v7 = *((_DWORD *)this + 36);
  *(void *)&v123[0] = a2;
  uint64_t v8 = *(void *)(v5 + 656);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 16);
    if (v9)
    {
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v12 = (uint64_t *)(*(void *)v8 + 16 * v11);
      uint64_t v13 = (mlir::Operation *)*v12;
      if ((mlir::Operation *)*v12 == a2)
      {
LABEL_4:
        unsigned int v14 = v7;
LABEL_7:
        *((_DWORD *)v12 + 2) = v6;
        *((_DWORD *)v12 + 3) = v7;
        unsigned int v7 = v14;
        goto LABEL_8;
      }
      uint64_t v115 = 0;
      int v116 = 1;
      while (v13 != (mlir::Operation *)-4096)
      {
        if (v115) {
          BOOL v117 = 0;
        }
        else {
          BOOL v117 = v13 == (mlir::Operation *)-8192;
        }
        if (v117) {
          uint64_t v115 = v12;
        }
        unsigned int v118 = v11 + v116++;
        unsigned int v11 = v118 & v10;
        uint64_t v12 = (uint64_t *)(*(void *)v8 + 16 * (v118 & v10));
        uint64_t v13 = (mlir::Operation *)*v12;
        if ((mlir::Operation *)*v12 == a2) {
          goto LABEL_4;
        }
      }
      if (v115) {
        unint64_t v15 = v115;
      }
      else {
        unint64_t v15 = v12;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>,mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucket<mlir::Region * const&>(v8, v15, (uint64_t *)v123);
    unsigned int v14 = *((_DWORD *)this + 36);
    goto LABEL_7;
  }
LABEL_8:
  llvm::raw_ostream::indent(*v4, v7);
  unint64_t v16 = *((unsigned int *)a2 + 9);
  if (!v16) {
    goto LABEL_61;
  }
  uint64_t v17 = *((void *)this + 3);
  uint64_t v18 = (llvm::raw_ostream *)(v17 + 280);
  uint64_t v19 = *(void *)(v17 + 352);
  uint64_t v20 = *(unsigned int *)(v17 + 368);
  if (!v20) {
    goto LABEL_15;
  }
  unsigned int v21 = v20 - 1;
  uint64_t v22 = v19 + 32 * ((v20 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
  uint64_t v23 = *(mlir::Operation **)v22;
  if (*(mlir::Operation **)v22 != a2)
  {
    int v24 = 1;
    LODWORD(v25) = v21 & ((a2 >> 4) ^ (a2 >> 9));
    while (v23 != (mlir::Operation *)-4096)
    {
      int v26 = v25 + v24++;
      uint64_t v25 = v26 & v21;
      uint64_t v23 = *(mlir::Operation **)(v19 + 32 * v25);
      if (v23 == a2)
      {
        uint64_t v22 = v19 + 32 * v25;
        goto LABEL_16;
      }
    }
LABEL_15:
    uint64_t v22 = v19 + 32 * v20;
  }
LABEL_16:
  if (v22 == v19 + 32 * v20 || (uint64_t v27 = *(unsigned int *)(v22 + 16), !v27))
  {
    if (v16 < 2) {
      goto LABEL_58;
    }
    unsigned int v36 = *v4;
    unsigned int v37 = (unsigned char *)*((void *)*v4 + 4);
    if ((unint64_t)v37 >= *((void *)*v4 + 3))
    {
      unsigned int v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((void *)v36 + 4) = v37 + 1;
      *unsigned int v37 = 58;
    }
    unint64_t v38 = v16;
  }
  else
  {
    uint64_t v120 = *((unsigned int *)a2 + 9);
    unsigned int v121 = v4;
    uint64_t v28 = *(int **)(v22 + 8);
    uint64_t v119 = *(unsigned int *)(v22 + 16);
    uint64_t v29 = (v27 << 32) - 0x100000000;
    if (v27 << 32 != 0x100000000)
    {
      uint64_t v30 = *v4;
      uint64_t v31 = *v28;
      unint64_t v32 = v28[1] - v31;
      if (v31 <= 5) {
        unint64_t v33 = (char *)a2 - 16 * (*v28 + 1);
      }
      else {
        unint64_t v33 = (char *)a2 - 24 * (*v28 - 5) - 96;
      }
      if (v32 >= 2)
      {
        uint64_t v34 = *v4;
        uint64_t v35 = (unsigned char *)*((void *)*v4 + 4);
        if ((unint64_t)v35 >= *((void *)*v4 + 3))
        {
          uint64_t v34 = llvm::raw_ostream::write(v34, 58);
        }
        else
        {
          *((void *)v34 + 4) = v35 + 1;
          *uint64_t v35 = 58;
        }
        llvm::raw_ostream::operator<<(v34, v32);
      }
      if (v29 != 0x100000000)
      {
        uint64_t v45 = (v29 >> 32) - 1;
        uint64_t v46 = 0x200000000;
        uint64_t v47 = 0x100000000;
        do
        {
          uint64_t v48 = (_WORD *)*((void *)v30 + 4);
          if (*((void *)v30 + 3) - (void)v48 > 1uLL)
          {
            *uint64_t v48 = 8236;
            *((void *)v30 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v30, ", ", 2uLL);
          }
          uint64_t v49 = *(int *)((char *)v28 + (v47 >> 30));
          int v50 = *(int *)((char *)v28 + (v47 >> 30));
          unint64_t v51 = *(int *)((char *)v28 + (v46 >> 30)) - v49;
          BOOL v52 = (char *)a2 - 24 * (v50 - 5) - 96;
          unsigned int v53 = (char *)a2 - 16 * (v50 + 1);
          if (v49 <= 5) {
            unint64_t v54 = (unint64_t)v53;
          }
          else {
            unint64_t v54 = (unint64_t)v52;
          }
          if (v51 >= 2)
          {
            int v55 = *v121;
            uint64_t v56 = (unsigned char *)*((void *)*v121 + 4);
            if ((unint64_t)v56 < *((void *)*v121 + 3))
            {
              *((void *)v55 + 4) = v56 + 1;
              *uint64_t v56 = 58;
            }
            else
            {
              int v55 = llvm::raw_ostream::write(v55, 58);
            }
            llvm::raw_ostream::operator<<(v55, v51);
          }
          v46 += 0x100000000;
          v47 += 0x100000000;
          --v45;
        }
        while (v45);
      }
    }
    uint64_t v4 = v121;
    uint64_t v39 = *v121;
    uint64_t v40 = (_WORD *)*((void *)*v121 + 4);
    if (*((void *)*v121 + 3) - (void)v40 > 1uLL)
    {
      *uint64_t v40 = 8236;
      *((void *)v39 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v39, ", ", 2uLL);
    }
    uint64_t v41 = v28[v119 - 1];
    unint64_t v42 = v120 - v41;
    if (v41 <= 5) {
      int v43 = (char *)a2 - 16 * (v41 + 1);
    }
    else {
      int v43 = (char *)a2 - 24 * (v41 - 5) - 96;
    }
    if (v42 < 2) {
      goto LABEL_58;
    }
    unsigned int v36 = *v121;
    unint64_t v44 = (unsigned char *)*((void *)*v121 + 4);
    if ((unint64_t)v44 >= *((void *)*v121 + 3))
    {
      unsigned int v36 = llvm::raw_ostream::write(v36, 58);
    }
    else
    {
      *((void *)v36 + 4) = v44 + 1;
      *unint64_t v44 = 58;
    }
    unint64_t v38 = v42;
  }
  llvm::raw_ostream::operator<<(v36, v38);
LABEL_58:
  int v57 = *v4;
  uint64_t v58 = *((void *)*v4 + 4);
  if ((unint64_t)(*((void *)*v4 + 3) - v58) > 2)
  {
    *(unsigned char *)(v58 + 2) = 32;
    *(_WORD *)uint64_t v58 = 15648;
    *((void *)v57 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v57, " = ", 3uLL);
  }
LABEL_61:
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *))(*(void *)this + 208))(this, a2);
  char v59 = *((unsigned char *)this + 64);
  if (v59)
  {
    uint64_t v60 = *((void *)a2 + 3);
    BOOL v61 = *v4;
    uint64_t v62 = (unsigned char *)*((void *)*v4 + 4);
    if (*((unsigned char **)*v4 + 3) == v62)
    {
      llvm::raw_ostream::write(v61, " ", 1uLL);
    }
    else
    {
      *uint64_t v62 = 32;
      ++*((void *)v61 + 4);
    }
    mlir::AsmPrinter::Impl::printLocation(v4, v60, 1);
    char v59 = *((unsigned char *)this + 64);
  }
  if ((v59 & 0x40) == 0) {
    return;
  }
  uint64_t v63 = *((unsigned int *)a2 + 9);
  if (!v63)
  {
    if ((*((unsigned char *)a2 + 46) & 0x80) != 0 && *((_DWORD *)a2 + 17))
    {
      uint64_t v85 = *v4;
      long long v86 = (void *)*((void *)*v4 + 4);
      if (*((void *)*v4 + 3) - (void)v86 > 7uLL)
      {
        *long long v86 = 0x203A6469202F2F20;
        *((void *)v85 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v85, " // id: ", 8uLL);
      }
    }
    return;
  }
  signed int v64 = (char *)a2 - 16;
  if (*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
  {
LABEL_73:
    uint64_t v67 = *((unsigned int *)a2 + 9);
    if (v67) {
      BOOL v68 = (char *)a2 - 16;
    }
    else {
      BOOL v68 = 0;
    }
    if (!v67) {
      return;
    }
    if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, 0))
    {
      uint64_t v69 = 1;
      while (v67 != v69)
      {
        uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v68, v69++);
        if (*NextResultAtOffset) {
          goto LABEL_81;
        }
      }
      return;
    }
LABEL_81:
    uint64_t v122 = v4;
    uint64_t v127 = &v131;
    int v128 = &v131;
    uint64_t v129 = 1;
    int v130 = 0;
    uint64_t v71 = *((unsigned int *)a2 + 9);
    if (v71) {
      unint64_t v72 = (char *)a2 - 16;
    }
    else {
      unint64_t v72 = 0;
    }
    *(void *)&v123[0] = v72;
    *((void *)&v123[0] + 1) = v71;
    mlir::ResultRange::use_begin((uint64_t *)v123, (uint64_t *)v132);
    uint64_t v73 = *((unsigned int *)a2 + 9);
    if (v73) {
      v74 = (char *)a2 - 16;
    }
    else {
      v74 = 0;
    }
    v134[0] = (uint64_t)v74;
    v134[1] = v73;
    mlir::ResultRange::use_end(v134, v125);
    uint64_t v124 = v133;
    uint64_t v75 = v133;
    v123[0] = v132[0];
    v123[1] = v132[1];
    uint64_t v76 = v126;
    if (v133 != v126)
    {
      unsigned int v77 = 0;
      unsigned int v78 = 0;
      while (1)
      {
        unsigned int v79 = *(_DWORD **)(v75 + 16);
        if (v128 != v127) {
          goto LABEL_92;
        }
        uint64_t v81 = HIDWORD(v129);
        if (HIDWORD(v129))
        {
          uint64_t v82 = 0;
          uint64_t v83 = 8 * HIDWORD(v129);
          uint64_t v84 = v128;
          while ((_DWORD *)*v84 != v79)
          {
            if (*v84 == -2) {
              uint64_t v82 = v84;
            }
            ++v84;
            v83 -= 8;
            if (!v83)
            {
              if (!v82) {
                goto LABEL_102;
              }
              uint64_t *v82 = (uint64_t)v79;
              --v130;
              goto LABEL_89;
            }
          }
          goto LABEL_90;
        }
LABEL_102:
        if (HIDWORD(v129) < v129)
        {
          ++HIDWORD(v129);
          v128[v81] = (uint64_t)v79;
        }
        else
        {
LABEL_92:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v127, v79);
          if (!v80) {
            goto LABEL_90;
          }
        }
LABEL_89:
        ++v78;
        v77 += v79[9];
LABEL_90:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v132);
        uint64_t v75 = v133;
        if (v133 == v76) {
          goto LABEL_113;
        }
      }
    }
    unsigned int v78 = 0;
    unsigned int v77 = 0;
LABEL_113:
    BOOL v90 = v77 < 2 && v78 < 2;
    BOOL v91 = v63 == 1;
    BOOL v92 = v91 && v90;
    if (v91 && v90) {
      uint64_t v93 = "user";
    }
    else {
      uint64_t v93 = "users";
    }
    long long v94 = *v122;
    uint64_t v95 = (_DWORD *)*((void *)*v122 + 4);
    if (*((void *)*v122 + 3) - (void)v95 > 3uLL)
    {
      *uint64_t v95 = 539963168;
      uint64_t v96 = (void *)(*((void *)v94 + 4) + 4);
      *((void *)v94 + 4) = v96;
    }
    else
    {
      long long v94 = llvm::raw_ostream::write(*v122, " // ", 4uLL);
      uint64_t v96 = (void *)*((void *)v94 + 4);
    }
    if (v92) {
      size_t v97 = 4;
    }
    else {
      size_t v97 = 5;
    }
    if (v97 <= *((void *)v94 + 3) - (void)v96)
    {
      memcpy(v96, v93, v97);
      uint64_t v101 = *((void *)v94 + 3);
      size_t v98 = (_WORD *)(*((void *)v94 + 4) + v97);
      *((void *)v94 + 4) = v98;
      if ((unint64_t)(v101 - (void)v98) > 1)
      {
LABEL_130:
        _WORD *v98 = 8250;
        *((void *)v94 + 4) += 2;
        uint64_t v99 = *((unsigned int *)a2 + 9);
        if (v99) {
          uint64_t v100 = (char *)a2 - 16;
        }
        else {
          uint64_t v100 = 0;
        }
        if (!v99)
        {
LABEL_150:
          if (v128 != v127) {
            free(v128);
          }
          return;
        }
        goto LABEL_140;
      }
    }
    else
    {
      long long v94 = llvm::raw_ostream::write(v94, v93, v97);
      size_t v98 = (_WORD *)*((void *)v94 + 4);
      if (*((void *)v94 + 3) - (void)v98 > 1uLL) {
        goto LABEL_130;
      }
    }
    llvm::raw_ostream::write(v94, ": ", 2uLL);
    uint64_t v99 = *((unsigned int *)a2 + 9);
    if (v99) {
      uint64_t v100 = (char *)a2 - 16;
    }
    else {
      uint64_t v100 = 0;
    }
    if (!v99) {
      goto LABEL_150;
    }
LABEL_140:
    uint64_t v102 = *v122;
    int v103 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v64, 0);
    if (v63 >= 2)
    {
      int v104 = *v122;
      uint64_t v105 = (unsigned char *)*((void *)*v122 + 4);
      if (*((unsigned char **)*v122 + 3) == v105)
      {
        llvm::raw_ostream::write(v104, "(", 1uLL);
      }
      else
      {
        unsigned char *v105 = 40;
        ++*((void *)v104 + 4);
      }
      uint64_t v106 = (llvm::raw_ostream *)*((void *)this + 2);
      uint64_t v107 = (unsigned char *)*((void *)v106 + 4);
      if (*((unsigned char **)v106 + 3) == v107)
      {
        llvm::raw_ostream::write(v106, ")", 1uLL);
      }
      else
      {
        *uint64_t v107 = 41;
        ++*((void *)v106 + 4);
      }
    }
    else
    {
    }
    if (v99 == 1) {
      goto LABEL_150;
    }
    uint64_t v108 = 1;
    while (1)
    {
      uint64_t v109 = (_WORD *)*((void *)v102 + 4);
      if (*((void *)v102 + 3) - (void)v109 > 1uLL)
      {
        *uint64_t v109 = 8236;
        *((void *)v102 + 4) += 2;
        int v110 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2)
        {
LABEL_159:
          uint64_t v111 = *v122;
          uint64_t v112 = (unsigned char *)*((void *)*v122 + 4);
          if (*((unsigned char **)*v122 + 3) == v112)
          {
            llvm::raw_ostream::write(v111, "(", 1uLL);
          }
          else
          {
            *uint64_t v112 = 40;
            ++*((void *)v111 + 4);
          }
          uint64_t v113 = (llvm::raw_ostream *)*((void *)this + 2);
          uint64_t v114 = (unsigned char *)*((void *)v113 + 4);
          if (*((unsigned char **)v113 + 3) == v114)
          {
            llvm::raw_ostream::write(v113, ")", 1uLL);
          }
          else
          {
            *uint64_t v114 = 41;
            ++*((void *)v113 + 4);
          }
          goto LABEL_154;
        }
      }
      else
      {
        llvm::raw_ostream::write(v102, ", ", 2uLL);
        int v110 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v100, v108);
        if (v63 >= 2) {
          goto LABEL_159;
        }
      }
LABEL_154:
      if (v99 == ++v108) {
        goto LABEL_150;
      }
    }
  }
  uint64_t v65 = 1;
  while (v63 != v65)
  {
    char v66 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)a2 - 16, v65++);
    if (*v66) {
      goto LABEL_73;
    }
  }
  uint64_t v87 = *v4;
  uint64_t v88 = *((void *)*v4 + 4);
  if ((unint64_t)(*((void *)*v4 + 3) - v88) > 9)
  {
    *(_WORD *)(v88 + 8) = 25701;
    *(void *)uint64_t v88 = *(void *)" // unused";
    *((void *)v87 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v87, " // unused", 0xAuLL);
  }
}

void anonymous namespace'::OperationPrinter::~OperationPrinter(_anonymous_namespace_::OperationPrinter *this)
{
  *(void *)this = &unk_1EC998280;
  __int32 v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EC998280;
  __int32 v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }

  operator delete(this);
}

llvm::raw_ostream *mlir::Operation::dump(mlir::Operation *this)
{
  __int32 v2 = (llvm::raw_ostream *)llvm::errs(this);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v6);
  v7 |= 0x20u;
  uint64_t v3 = mlir::Operation::print(this, v2, (const mlir::OpPrintingFlags *)v6);
  double result = (llvm::raw_ostream *)llvm::errs(v3);
  uint64_t v5 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v5) {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  unsigned char *v5 = 10;
  ++*((void *)result + 4);
  return result;
}

llvm::raw_ostream *mlir::Block::print(mlir::Block *this, llvm::raw_ostream *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double result = (llvm::raw_ostream *)mlir::Block::getParentOp(this);
  if (result)
  {
    do
    {
      uint64_t v5 = (uint64_t)result;
      int v6 = (mlir::Block *)*((void *)result + 2);
      if (!v6) {
        break;
      }
      double result = (llvm::raw_ostream *)mlir::Block::getParentOp(v6);
    }
    while (result);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v10);
    mlir::AsmState::AsmState((llvm *)&v9, v5, (uint64_t)v10, 0, 0);
    v11[0] = a2;
    v11[1] = v9;
    long long v7 = *(_OWORD *)((char *)v9 + 632);
    long long v12 = *(_OWORD *)((char *)v9 + 616);
    long long v13 = v7;
    uint64_t v14 = *((void *)v9 + 81);
    int v15 = 1;
    v10[0] = &unk_1EC998280;
    v10[1] = v11;
    unint64_t v16 = v18;
    v18[0] = "builtin";
    v18[1] = 7;
    uint64_t v17 = 0x300000001;
    int v19 = 0;
    v10[0] = &unk_1EC998280;
    if (v16 != v18) {
      free(v16);
    }
    double result = v9;
    int v9 = 0;
    if (result) {
      mlir::detail::AsmStateImpl::~AsmStateImpl(result);
    }
  }
  else
  {
    uint64_t v8 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v8) > 0x12)
    {
      *(_DWORD *)(v8 + 15) = 171851339;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)"<<UNLINKED BLOCK>>\n";
      *((void *)a2 + 4) += 19;
    }
    else
    {
      return llvm::raw_ostream::write(a2, "<<UNLINKED BLOCK>>\n", 0x13uLL);
    }
  }
  return result;
}

mlir::GenericProgramPoint *anonymous namespace'::OperationPrinter::print(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2, int a3, char a4)
{
  v128[12] = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
LABEL_98:
    *((_DWORD *)this + 36) += 2;
    if ((*((unsigned char *)this + 64) & 0x40) == 0) {
      goto LABEL_117;
    }
    goto LABEL_99;
  }
  llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
  int v6 = (void *)*((void *)this + 2);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *(void *)(v7 + 376);
  uint64_t v9 = *(unsigned int *)(v7 + 392);
  if (v9)
  {
    unsigned int v10 = v9 - 1;
    uint64_t v11 = v8 + 32 * ((v9 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    long long v12 = *(mlir::Block **)v11;
    if (*(mlir::Block **)v11 == a2) {
      goto LABEL_9;
    }
    int v13 = 1;
    LODWORD(v14) = v10 & ((a2 >> 4) ^ (a2 >> 9));
    while (v12 != (mlir::Block *)-4096)
    {
      int v15 = v14 + v13++;
      uint64_t v14 = v15 & v10;
      long long v12 = *(mlir::Block **)(v8 + 32 * v14);
      if (v12 == a2)
      {
        uint64_t v11 = v8 + 32 * v14;
        goto LABEL_9;
      }
    }
  }
  uint64_t v11 = v8 + 32 * v9;
LABEL_9:
  if (v11 == v8 + 32 * v9)
  {
    int v19 = v6 + 4;
    uint64_t v18 = (void *)v6[4];
    unint64_t v16 = "INVALIDBLOCK";
    size_t v17 = 12;
    if (v6[3] - (void)v18 > 0xBuLL)
    {
LABEL_17:
      memcpy(v18, v16, v17);
      *v19 += v17;
      if (*((void *)a2 + 6) == *((void *)a2 + 7)) {
        goto LABEL_29;
      }
      goto LABEL_18;
    }
LABEL_14:
    llvm::raw_ostream::write((llvm::raw_ostream *)v6, v16, v17);
    goto LABEL_15;
  }
  unint64_t v16 = *(const char **)(v11 + 16);
  size_t v17 = *(void *)(v11 + 24);
  int v19 = v6 + 4;
  uint64_t v18 = (void *)v6[4];
  if (v17 > v6[3] - (void)v18) {
    goto LABEL_14;
  }
  if (v17) {
    goto LABEL_17;
  }
LABEL_15:
  if (*((void *)a2 + 6) == *((void *)a2 + 7))
  {
LABEL_29:
    uint64_t v34 = (llvm::raw_ostream *)*((void *)this + 2);
    uint64_t v35 = (unsigned char *)*((void *)v34 + 4);
    if ((unint64_t)v35 < *((void *)v34 + 3)) {
      goto LABEL_30;
    }
    goto LABEL_37;
  }
LABEL_18:
  uint64_t v20 = (llvm::raw_ostream *)*((void *)this + 2);
  unsigned int v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 40);
    uint64_t v23 = (unint64_t *)*((void *)a2 + 6);
    uint64_t v25 = (unint64_t *)*((void *)a2 + 7);
    uint64_t v24 = (char *)v25 - (char *)v23;
    if (v25 == v23) {
      goto LABEL_27;
    }
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    *unsigned int v21 = 40;
    uint64_t v23 = (unint64_t *)*((void *)a2 + 6);
    uint64_t v22 = (unint64_t *)*((void *)a2 + 7);
    uint64_t v24 = (char *)v22 - (char *)v23;
    if (v22 == v23) {
      goto LABEL_27;
    }
  }
  int v26 = (llvm::raw_ostream *)*((void *)this + 2);
  if (v24 != 8)
  {
    uint64_t v27 = v23 + 1;
    uint64_t v28 = 8 * (v24 >> 3) - 8;
    do
    {
      while (1)
      {
        uint64_t v30 = (_WORD *)*((void *)v26 + 4);
        if (*((void *)v26 + 3) - (void)v30 <= 1uLL) {
          break;
        }
        *uint64_t v30 = 8236;
        *((void *)v26 + 4) += 2;
        unint64_t v29 = *v27++;
        v28 -= 8;
        if (!v28) {
          goto LABEL_27;
        }
      }
      llvm::raw_ostream::write(v26, ", ", 2uLL);
      unint64_t v31 = *v27++;
      v28 -= 8;
    }
    while (v28);
  }
LABEL_27:
  unint64_t v32 = (llvm::raw_ostream *)*((void *)this + 2);
  unint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if ((unint64_t)v33 < *((void *)v32 + 3))
  {
    *((void *)v32 + 4) = v33 + 1;
    *unint64_t v33 = 41;
    goto LABEL_29;
  }
  llvm::raw_ostream::write(v32, 41);
  uint64_t v34 = (llvm::raw_ostream *)*((void *)this + 2);
  uint64_t v35 = (unsigned char *)*((void *)v34 + 4);
  if ((unint64_t)v35 < *((void *)v34 + 3))
  {
LABEL_30:
    *((void *)v34 + 4) = v35 + 1;
    *uint64_t v35 = 58;
    if (mlir::Block::getParent(a2)) {
      goto LABEL_31;
    }
LABEL_38:
    uint64_t v45 = (llvm::raw_ostream *)*((void *)this + 2);
    uint64_t v46 = (void *)*((void *)v45 + 4);
    if (*((void *)v45 + 3) - (void)v46 <= 0x1DuLL)
    {
      llvm::raw_ostream::write(v45, "  // block is not in a region!", 0x1EuLL);
      goto LABEL_96;
    }
    qmemcpy(v46, "  // block is not in a region!", 30);
    uint64_t v48 = *((void *)v45 + 4) + 30;
LABEL_80:
    *((void *)v45 + 4) = v48;
    goto LABEL_96;
  }
LABEL_37:
  llvm::raw_ostream::write(v34, 58);
  if (!mlir::Block::getParent(a2)) {
    goto LABEL_38;
  }
LABEL_31:
  if (!*(void *)a2)
  {
    if (mlir::Block::isEntryBlock(a2)) {
      goto LABEL_96;
    }
    uint64_t v45 = (llvm::raw_ostream *)*((void *)this + 2);
    uint64_t v47 = *((void *)v45 + 4);
    if ((unint64_t)(*((void *)v45 + 3) - v47) <= 0x13)
    {
      llvm::raw_ostream::write(v45, "  // no predecessors", 0x14uLL);
      goto LABEL_96;
    }
    *(_DWORD *)(v47 + 16) = 1936879475;
    *(_OWORD *)uint64_t v47 = *(_OWORD *)"  // no predecessors";
    uint64_t v48 = *((void *)v45 + 4) + 20;
    goto LABEL_80;
  }
  uint64_t SinglePredecessor = mlir::Block::getSinglePredecessor(a2);
  if (SinglePredecessor)
  {
    uint64_t v38 = SinglePredecessor;
    uint64_t v39 = (llvm::raw_ostream *)*((void *)this + 2);
    uint64_t v40 = *((void *)v39 + 4);
    if ((unint64_t)(*((void *)v39 + 3) - v40) > 0xA)
    {
      *(_DWORD *)(v40 + 7) = 540697701;
      *(void *)uint64_t v40 = *(void *)"  // pred: ";
      *((void *)v39 + 4) += 11;
      uint64_t v41 = (void *)*((void *)this + 2);
      uint64_t v68 = *((void *)this + 3);
      uint64_t v43 = *(void *)(v68 + 376);
      uint64_t v44 = *(unsigned int *)(v68 + 392);
      if (!v44) {
        goto LABEL_69;
      }
    }
    else
    {
      llvm::raw_ostream::write(v39, "  // pred: ", 0xBuLL);
      uint64_t v41 = (void *)*((void *)this + 2);
      uint64_t v42 = *((void *)this + 3);
      uint64_t v43 = *(void *)(v42 + 376);
      uint64_t v44 = *(unsigned int *)(v42 + 392);
      if (!v44) {
        goto LABEL_69;
      }
    }
    unsigned int v69 = v44 - 1;
    char v70 = (uint64_t *)(v43 + 32 * ((v44 - 1) & ((v38 >> 4) ^ (v38 >> 9))));
    uint64_t v71 = *v70;
    if (*v70 == v38) {
      goto LABEL_70;
    }
    int v72 = 1;
    LODWORD(v73) = v69 & ((v38 >> 4) ^ (v38 >> 9));
    while (v71 != -4096)
    {
      int v74 = v73 + v72++;
      uint64_t v73 = v74 & v69;
      uint64_t v71 = *(void *)(v43 + 32 * v73);
      if (v71 == v38)
      {
        char v70 = (uint64_t *)(v43 + 32 * v73);
        goto LABEL_70;
      }
    }
LABEL_69:
    char v70 = (uint64_t *)(v43 + 32 * v44);
LABEL_70:
    if (v70 == (uint64_t *)(v43 + 32 * v44))
    {
      unsigned int v78 = v41 + 4;
      unsigned int v77 = (void *)v41[4];
      uint64_t v75 = "INVALIDBLOCK";
      size_t v76 = 12;
      if (v41[3] - (void)v77 > 0xBuLL) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v75 = (const char *)v70[2];
      size_t v76 = v70[3];
      unsigned int v78 = v41 + 4;
      unsigned int v77 = (void *)v41[4];
      if (v76 <= v41[3] - (void)v77)
      {
        if (!v76) {
          goto LABEL_96;
        }
LABEL_78:
        memcpy(v77, v75, v76);
        *v78 += v76;
        goto LABEL_96;
      }
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)v41, v75, v76);
    goto LABEL_96;
  }
  uint64_t v126 = v128;
  v37.n128_u64[0] = 0x400000000;
  uint64_t v127 = 0x400000000;
  uint64_t v49 = *(void **)a2;
  if (!*(void *)a2)
  {
    char v80 = (char *)v128;
    unsigned int v79 = v128;
    goto LABEL_82;
  }
  do
  {
    uint64_t v50 = mlir::PredecessorIterator::unwrap((uint64_t)v49);
    uint64_t v51 = *((void *)this + 3);
    uint64_t v52 = *(void *)(v51 + 376);
    uint64_t v53 = *(unsigned int *)(v51 + 392);
    if (v53)
    {
      unsigned int v54 = v53 - 1;
      int v55 = (void *)(v52 + 32 * ((v53 - 1) & ((v50 >> 4) ^ (v50 >> 9))));
      uint64_t v56 = *v55;
      if (*v55 == v50) {
        goto LABEL_52;
      }
      int v57 = 1;
      LODWORD(v58) = v54 & ((v50 >> 4) ^ (v50 >> 9));
      while (v56 != -4096)
      {
        int v59 = v58 + v57++;
        uint64_t v58 = v59 & v54;
        uint64_t v56 = *(void *)(v52 + 32 * v58);
        if (v56 == v50)
        {
          int v55 = (void *)(v52 + 32 * v58);
          goto LABEL_52;
        }
      }
    }
    int v55 = (void *)(v52 + 32 * v53);
LABEL_52:
    int v123 = -1;
    uint64_t v124 = "INVALIDBLOCK";
    uint64_t v125 = 12;
    if (v55 == (void *)(v52 + 32 * v53)) {
      uint64_t v60 = &v123;
    }
    else {
      uint64_t v60 = (int *)(v55 + 1);
    }
    long long v61 = *(_OWORD *)v60;
    uint64_t v122 = *((void *)v60 + 2);
    long long v121 = v61;
    uint64_t v62 = (char *)v126;
    if (v127 >= HIDWORD(v127))
    {
      unint64_t v66 = v127 + 1;
      if (v126 <= &v121 && (char *)v126 + 24 * v127 > (char *)&v121)
      {
        int64_t v67 = (char *)&v121 - (unsigned char *)v126;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        uint64_t v62 = (char *)v126;
        uint64_t v63 = (char *)v126 + v67;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v66, 24);
        uint64_t v63 = (char *)&v121;
        uint64_t v62 = (char *)v126;
      }
    }
    else
    {
      uint64_t v63 = (char *)&v121;
    }
    signed int v64 = (__n128 *)&v62[24 * v127];
    __n128 v37 = *(__n128 *)v63;
    v64[1].n128_u64[0] = *((void *)v63 + 2);
    __n128 *v64 = v37;
    unint64_t v65 = (v127 + 1);
    LODWORD(v127) = v127 + 1;
    uint64_t v49 = (void *)*v49;
  }
  while (v49);
  unsigned int v79 = v126;
  char v80 = (char *)v126 + 24 * v65;
  if (v65)
  {
    uint64_t v81 = 126 - 2 * __clz(v65);
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v81 = 0;
LABEL_83:
  uint64_t v82 = (llvm::raw_ostream *)*((void *)this + 2);
  uint64_t v83 = *((void *)v82 + 4);
  if ((unint64_t)(*((void *)v82 + 3) - v83) > 4)
  {
    *(unsigned char *)(v83 + 4) = 32;
    *(_DWORD *)uint64_t v83 = 791617568;
    *((void *)v82 + 4) += 5;
    uint64_t v85 = llvm::raw_ostream::operator<<(v82, v127);
    long long v86 = (void *)*((void *)v85 + 4);
    if (*((void *)v85 + 3) - (void)v86 <= 7uLL) {
      goto LABEL_87;
    }
LABEL_85:
    *long long v86 = 0x203A736465727020;
    *((void *)v85 + 4) += 8;
  }
  else
  {
    uint64_t v84 = llvm::raw_ostream::write(v82, "  // ", 5uLL);
    uint64_t v85 = llvm::raw_ostream::operator<<(v84, v127);
    long long v86 = (void *)*((void *)v85 + 4);
    if (*((void *)v85 + 3) - (void)v86 > 7uLL) {
      goto LABEL_85;
    }
LABEL_87:
    llvm::raw_ostream::write(v85, " preds: ", 8uLL);
  }
  unsigned int v87 = v127;
  if (v127)
  {
    uint64_t v88 = (llvm::raw_ostream *)*((void *)this + 2);
    int v89 = (char *)v126;
    BOOL v90 = (const void *)*((void *)v126 + 1);
    unint64_t v91 = *((void *)v126 + 2);
    BOOL v92 = (void *)*((void *)v88 + 4);
    if (*((void *)v88 + 3) - (void)v92 >= v91)
    {
      if (v91)
      {
        memcpy(v92, v90, *((void *)v126 + 2));
        *((void *)v88 + 4) += v91;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), (const char *)v90, *((void *)v126 + 2));
    }
    if (v87 != 1)
    {
      uint64_t v112 = (size_t *)(v89 + 40);
      for (uint64_t i = 24 * v87 - 24; i; i -= 24)
      {
        uint64_t v114 = (_WORD *)*((void *)v88 + 4);
        if (*((void *)v88 + 3) - (void)v114 > 1uLL)
        {
          *uint64_t v114 = 8236;
          *((void *)v88 + 4) += 2;
          uint64_t v115 = (const void *)*(v112 - 1);
          size_t v116 = *v112;
          BOOL v117 = (llvm::raw_ostream *)*((void *)this + 2);
          unsigned int v118 = (void *)*((void *)v117 + 4);
          if (*((void *)v117 + 3) - (void)v118 >= *v112)
          {
LABEL_136:
            if (v116)
            {
              memcpy(v118, v115, v116);
              *((void *)v117 + 4) += v116;
            }
            goto LABEL_131;
          }
        }
        else
        {
          llvm::raw_ostream::write(v88, ", ", 2uLL);
          uint64_t v115 = (const void *)*(v112 - 1);
          size_t v116 = *v112;
          BOOL v117 = (llvm::raw_ostream *)*((void *)this + 2);
          unsigned int v118 = (void *)*((void *)v117 + 4);
          if (*((void *)v117 + 3) - (void)v118 >= *v112) {
            goto LABEL_136;
          }
        }
        llvm::raw_ostream::write(v117, (const char *)v115, v116);
LABEL_131:
        v112 += 3;
      }
    }
  }
  if (v126 != v128) {
    free(v126);
  }
LABEL_96:
  uint64_t v93 = (llvm::raw_ostream *)*((void *)this + 2);
  ++*((_DWORD *)this + 18);
  long long v94 = (unsigned char *)*((void *)v93 + 4);
  if ((unint64_t)v94 < *((void *)v93 + 3))
  {
    *((void *)v93 + 4) = v94 + 1;
    unsigned char *v94 = 10;
    goto LABEL_98;
  }
  llvm::raw_ostream::write(v93, 10);
  *((_DWORD *)this + 36) += 2;
  if ((*((unsigned char *)this + 64) & 0x40) != 0)
  {
LABEL_99:
    uint64_t v95 = (void **)*((void *)a2 + 6);
    uint64_t v96 = *((void *)a2 + 7) - (void)v95;
    if (v96)
    {
      uint64_t v97 = 8 * (v96 >> 3);
      do
      {
        while (1)
        {
          size_t v98 = *v95;
          llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
          uint64_t v99 = (llvm::raw_ostream *)*((void *)this + 2);
          uint64_t v100 = *((void *)v99 + 4);
          if ((unint64_t)(*((void *)v99 + 3) - v100) > 2)
          {
            *(unsigned char *)(v100 + 2) = 32;
            *(_WORD *)uint64_t v100 = 12079;
            *((void *)v99 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v99, "// ", 3uLL);
          }
          uint64_t v101 = (llvm::raw_ostream *)*((void *)this + 2);
          uint64_t v102 = *((void *)v101 + 4);
          unint64_t v103 = *((void *)v101 + 3) - v102;
          if (*v98)
          {
            if (v103 > 0xB)
            {
              *(_DWORD *)(v102 + 8) = 544825888;
              *(void *)uint64_t v102 = *(void *)" is used by ";
              *((void *)v101 + 4) += 12;
            }
            else
            {
              llvm::raw_ostream::write(v101, " is used by ", 0xCuLL);
            }
          }
          else if (v103 > 9)
          {
            *(_WORD *)(v102 + 8) = 25701;
            *(void *)uint64_t v102 = *(void *)" is unused";
            *((void *)v101 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v101, " is unused", 0xAuLL);
          }
          int v104 = (llvm::raw_ostream *)*((void *)this + 2);
          ++*((_DWORD *)this + 18);
          uint64_t v105 = (unsigned char *)*((void *)v104 + 4);
          if ((unint64_t)v105 >= *((void *)v104 + 3)) {
            break;
          }
          *((void *)v104 + 4) = v105 + 1;
          unsigned char *v105 = 10;
          ++v95;
          v97 -= 8;
          if (!v97) {
            goto LABEL_117;
          }
        }
        llvm::raw_ostream::write(v104, 10);
        ++v95;
        v97 -= 8;
      }
      while (v97);
    }
  }
LABEL_117:
  uint64_t v107 = (mlir::Block *)((char *)a2 + 32);
  double result = (mlir::GenericProgramPoint *)*((void *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    uint64_t v109 = (mlir::GenericProgramPoint *)*((void *)a2 + 5);
    if (v109 != v107) {
      goto LABEL_126;
    }
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    double result = (mlir::GenericProgramPoint *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((void *)(v108 + 48));
    uint64_t v109 = (mlir::GenericProgramPoint *)*((void *)a2 + 5);
    if (result && (a4 & 1) == 0) {
      uint64_t v107 = *(mlir::GenericProgramPoint **)v107;
    }
    for (; v109 != v107; uint64_t v109 = (mlir::GenericProgramPoint *)*((void *)v109 + 1))
    {
LABEL_126:
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v109);
        double result = (mlir::GenericProgramPoint *)*((void *)this + 2);
        ++*((_DWORD *)this + 18);
        uint64_t v111 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v111 >= *((void *)result + 3)) {
          break;
        }
        *((void *)result + 4) = v111 + 1;
        *uint64_t v111 = 10;
        uint64_t v109 = (mlir::GenericProgramPoint *)*((void *)v109 + 1);
        if (v109 == v107) {
          goto LABEL_128;
        }
      }
      double result = llvm::raw_ostream::write(result, 10);
    }
  }
LABEL_128:
  *((_DWORD *)this + 36) -= 2;
  return result;
}

void mlir::FallbackAsmResourceMap::ResourceCollection::~ResourceCollection(mlir::FallbackAsmResourceMap::ResourceCollection *this)
{
  *(void *)this = &unk_1EC9AAE30;
  __int32 v2 = (char *)*((void *)this + 4);
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3)
  {
    uint64_t v4 = 96 * v3;
    do
    {
      uint64_t v5 = &v2[v4];
      uint64_t v6 = *(unsigned int *)&v2[v4 - 8];
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EC9D0F78[v6])(&v7, v5 - 72);
      }
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0) {
        operator delete(*((void **)v5 - 12));
      }
      v4 -= 96;
    }
    while (v4);
    __int32 v2 = (char *)*((void *)this + 4);
  }
  if (v2 != (char *)this + 48) {
    free(v2);
  }
  *(void *)this = &unk_1EC9AA808;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  *(void *)this = &unk_1EC9AAE30;
  __int32 v2 = (char *)*((void *)this + 4);
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3)
  {
    uint64_t v4 = 96 * v3;
    do
    {
      uint64_t v5 = &v2[v4];
      uint64_t v6 = *(unsigned int *)&v2[v4 - 8];
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EC9D0F78[v6])(&v7, v5 - 72);
      }
      *((_DWORD *)v5 - 2) = -1;
      if (*(v5 - 73) < 0) {
        operator delete(*((void **)v5 - 12));
      }
      v4 -= 96;
    }
    while (v4);
    __int32 v2 = (char *)*((void *)this + 4);
  }
  if (v2 != (char *)this + 48) {
    free(v2);
  }
  *(void *)this = &unk_1EC9AA808;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  operator delete(this);
}

void *llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>@<X0>(size_t __sz@<X1>, std::align_val_t a2@<X2>, uint64_t a3@<X8>)
{
  double result = llvm::allocate_buffer(__sz, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = __sz;
  *(void *)(a3 + 16) = a2;
  *(void *)(a3 + 48) = (char *)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<void (*)(void *,unsigned long,unsigned long),void (*)(void *,unsigned long,unsigned long),void>::Callbacks
     + 2 >= 8)
    *(void *)(a3 + 24) = llvm::deallocate_buffer;
  *(unsigned char *)(a3 + 56) = 1;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallImpl<void (*)(void *,unsigned long,unsigned long)>(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallImpl<verifyOpAndAdjustFlags(mlir::Operation *,mlir::OpPrintingFlags)::$_0>(llvm *a1)
{
  uint64_t v1 = **(void **)a1;
  return llvm::get_threadid(a1) == v1;
}

uint64_t llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>(uint64_t a1, void *a2, void *a3)
{
  if (*a3 == *a2
    || (unint64_t v6 = (((uint64_t)(*a3 - *a2) >> 4) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 4) - 1) >> 1),
        unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        unsigned int v9 = HIDWORD(v8) | v8,
        v9 - 4 > 0xFFFFFFFA)
    || (unsigned int v10 = -__clz(v9) & 0x1F, v10 <= 2))
  {
    *(void *)a1 = 1;
    int v13 = (_OWORD *)(a1 + 8);
    int v15 = (_OWORD *)(a1 + 72);
    unint64_t v16 = 48;
    size_t v17 = "N4mlir23RegisteredOperationName5ModelINS_5arith6CmpIOpEEE" + 22;
LABEL_10:
    uint64_t v19 = (v16 >> 4) + 1;
    uint64_t v18 = &v13[v19 & 0x1FFFFFFFFFFFFFFCLL];
    uint64_t v20 = v13 + 2;
    long long v21 = *((_OWORD *)v17 + 166);
    uint64_t v22 = v19 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v20 - 2) = v21;
      *(v20 - 1) = v21;
      *uint64_t v20 = v21;
      v20[1] = v21;
      v20 += 4;
      v22 -= 4;
    }
    while (v22);
    if (v19 == (v19 & 0x1FFFFFFFFFFFFFFCLL)) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (1 << v10);
  *(_DWORD *)a1 &= ~1u;
  buffer = llvm::allocate_buffer(16 * v11, (std::align_val_t)8uLL);
  *(void *)(a1 + 8) = buffer;
  int v13 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v11;
  int v14 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v14)
  {
    int v15 = (_OWORD *)(a1 + 72);
    unint64_t v16 = 48;
    size_t v17 = "ationName5ModelINS_5arith6CmpIOpEEE";
    goto LABEL_10;
  }
  int v15 = &buffer[v11];
  int v13 = buffer;
  unint64_t v16 = 16 * v11 - 16;
  size_t v17 = "N4mlir23RegisteredOperationName5ModelINS_5arith6CmpIOpEEE" + 22;
  if (v16 >= 0x30) {
    goto LABEL_10;
  }
  uint64_t v18 = buffer;
LABEL_13:
  long long v23 = *((_OWORD *)v17 + 166);
  do
    *v18++ = v23;
  while (v18 != v15);
LABEL_15:
  uint64_t v24 = (_OWORD *)*a2;
  uint64_t v25 = (_OWORD *)*a3;
  while (v24 != v25)
  {
    uint64_t v27 = 0;
    if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)v24, &v27) & 1) == 0)*(_OWORD *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((_DWORD *)a1, (uint64_t)v24, (uint64_t)v24, v27) = *v24; {
    ++v24;
    }
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
    int v8 = 3;
    unsigned int v9 = *(void **)a2;
    size_t v10 = *(void *)(a2 + 8);
    if (!v10) {
      goto LABEL_4;
    }
LABEL_17:
    if (v9 == (void *)-2)
    {
      uint64_t v11 = 0;
      int v18 = 1;
      int v19 = HashValue & v8;
      uint64_t v14 = v5 + 16 * (HashValue & v8);
      uint64_t v20 = *(const void **)v14;
      if (*(void *)v14 == -1) {
        goto LABEL_22;
      }
LABEL_19:
      if (v20 != (const void *)-2
        && (v10 != *(void *)(v14 + 8) || memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v20, v10)))
      {
LABEL_22:
        while (v20 != (const void *)-1)
        {
          if (v11) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v20 == (const void *)-2;
          }
          if (v21) {
            uint64_t v11 = v14;
          }
          int v22 = v18 + v19;
          ++v18;
          int v19 = v22 & v8;
          uint64_t v14 = v5 + 16 * (v22 & v8);
          uint64_t v20 = *(const void **)v14;
          if (*(void *)v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (v9 != (void *)-1)
      {
        __s1 = v9;
        uint64_t v11 = 0;
        int v36 = 1;
        int v37 = HashValue & v8;
        uint64_t v14 = v5 + 16 * (HashValue & v8);
        uint64_t v38 = *(const void **)v14;
        if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_65;
        }
        while (v38 != (const void *)-1)
        {
          if (v11) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v38 == (const void *)-2;
          }
          if (v39) {
            uint64_t v11 = v14;
          }
          int v40 = v36 + v37;
          ++v36;
          int v37 = v40 & v8;
          uint64_t v14 = v5 + 16 * (v40 & v8);
          uint64_t v38 = *(const void **)v14;
          if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
          {
LABEL_65:
            if (v10 == *(void *)(v14 + 8) && !memcmp(__s1, v38, v10)) {
              goto LABEL_71;
            }
          }
        }
        goto LABEL_68;
      }
      uint64_t v11 = 0;
      int v24 = 1;
      int v25 = HashValue & v8;
      uint64_t v14 = v5 + 16 * (HashValue & v8);
      int v26 = *(const void **)v14;
      if (*(void *)v14 == -2) {
        goto LABEL_36;
      }
LABEL_33:
      if (v26 != (const void *)-1)
      {
        if (v10 != *(void *)(v14 + 8)
          || (v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), int v24 = v27, v28))
        {
LABEL_36:
          while (v26 != (const void *)-1)
          {
            if (v11) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v26 == (const void *)-2;
            }
            if (v29) {
              uint64_t v11 = v14;
            }
            int v30 = v24 + v25;
            ++v24;
            int v25 = v30 & v8;
            uint64_t v14 = v5 + 16 * (v30 & v8);
            int v26 = *(const void **)v14;
            if (*(void *)v14 != -2) {
              goto LABEL_33;
            }
          }
          goto LABEL_68;
        }
      }
    }
    goto LABEL_71;
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_72;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  int v8 = v6 - 1;
  unsigned int v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (v10) {
    goto LABEL_17;
  }
LABEL_4:
  if (v9 != (void *)-2)
  {
    uint64_t v11 = 0;
    int v31 = 1;
    int v32 = HashValue & v8;
    uint64_t v14 = v5 + 16 * (HashValue & v8);
    unint64_t v33 = *(const void **)v14;
    if (*(void *)v14 == -2) {
      goto LABEL_49;
    }
LABEL_45:
    if (v33 == (const void *)-1)
    {
      if (v9 != (void *)-1)
      {
LABEL_49:
        while (v33 != (const void *)-1)
        {
          if (v11) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v33 == (const void *)-2;
          }
          if (v34) {
            uint64_t v11 = v14;
          }
          int v35 = v31 + v32;
          ++v31;
          int v32 = v35 & v8;
          uint64_t v14 = v5 + 16 * (v35 & v8);
          unint64_t v33 = *(const void **)v14;
          if (*(void *)v14 != -2) {
            goto LABEL_45;
          }
        }
        goto LABEL_68;
      }
    }
    else if (*(void *)(v14 + 8))
    {
      goto LABEL_49;
    }
LABEL_71:
    uint64_t result = 1;
    goto LABEL_72;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  uint64_t v14 = v5 + 16 * (HashValue & v8);
  int v15 = *(const void **)v14;
  if (*(void *)v14 == -1) {
    goto LABEL_8;
  }
LABEL_6:
  if (v15 == (const void *)-2 || !*(void *)(v14 + 8)) {
    goto LABEL_71;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      uint64_t v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    uint64_t v14 = v5 + 16 * (v17 & v8);
    int v15 = *(const void **)v14;
    if (*(void *)v14 != -1) {
      goto LABEL_6;
    }
  }
LABEL_68:
  uint64_t result = 0;
  if (v11) {
    uint64_t v14 = v11;
  }
LABEL_72:
  *a3 = v14;
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(_DWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow((uint64_t)a1, v7);
    unsigned int v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3) {
    goto LABEL_10;
  }
  *a1 += 2;
  if (*a4 != -1) {
LABEL_7:
  }
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  v38[7] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    unsigned int v7 = (_OWORD *)(result + 8);
    int v6 = *(llvm **)(result + 8);
    uint64_t v8 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      uint64_t v25 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(v2 + 8) = buffer;
      *(void *)(v2 + 16) = v25;
      int v27 = *(_DWORD *)v2;
      unsigned int v9 = (llvm *)((char *)v6 + 16 * v8);
      *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
      if (v27)
      {
        size_t v10 = (_OWORD *)(v2 + 72);
        unint64_t v11 = 48;
      }
      else
      {
        size_t v10 = &buffer[v25];
        unsigned int v7 = buffer;
        unint64_t v11 = 16 * v25 - 16;
        if (v11 < 0x30)
        {
          BOOL v29 = buffer;
          goto LABEL_41;
        }
      }
    }
    else
    {
      unsigned int v9 = (llvm *)((char *)v6 + 16 * v8);
      *(void *)uint64_t result = 1;
      size_t v10 = (_OWORD *)(result + 72);
      unint64_t v11 = 48;
    }
    uint64_t v28 = (v11 >> 4) + 1;
    BOOL v29 = &v7[v28 & 0x1FFFFFFFFFFFFFFCLL];
    int v30 = v7 + 2;
    uint64_t v31 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v30 - 2) = xmmword_1810FFA60;
      *(v30 - 1) = xmmword_1810FFA60;
      *int v30 = xmmword_1810FFA60;
      v30[1] = xmmword_1810FFA60;
      v30 += 4;
      v31 -= 4;
    }
    while (v31);
    if (v28 == (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      if (v8)
      {
        int v35 = v6;
        do
        {
          if (*(void *)v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            *(void *)&long long v37 = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v35, &v37);
            *(_OWORD *)long long v37 = *(_OWORD *)v35;
            *(_DWORD *)v2 += 2;
          }
          int v35 = (llvm *)((char *)v35 + 16);
        }
        while (v35 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
LABEL_41:
      *v29++ = xmmword_1810FFA60;
    while (v29 != v10);
    goto LABEL_42;
  }
  int v12 = (_OWORD *)(result + 8);
  int v13 = &v37;
  if (*(void *)(result + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v37 = *v12;
    int v13 = (long long *)v38;
    uint64_t v14 = (long long *)(result + 24);
    if (*(void *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_10:
      int v15 = (long long *)(result + 40);
      if (*(void *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_11;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v14 = (long long *)(result + 24);
    if (*(void *)(result + 24) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_10;
    }
  }
  *v13++ = *v14;
  int v15 = (long long *)(result + 40);
  if (*(void *)(result + 40) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_11:
    BOOL v16 = (long long *)(result + 56);
    if (*(void *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  *v13++ = *v15;
  BOOL v16 = (long long *)(result + 56);
  if (*(void *)(result + 56) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_12:
    int v17 = *(_DWORD *)result;
    if (a2 < 5) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  *v13++ = *v16;
  int v17 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(void *)uint64_t result = v17 & 1;
    if ((v17 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    int v19 = (char *)(v2 + 72);
    unint64_t v20 = 48;
    goto LABEL_16;
  }
LABEL_30:
  *(_DWORD *)uint64_t result = v17 & 0xFFFFFFFE;
  uint64_t v32 = a2;
  uint64_t result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(void *)(v2 + 8) = result;
  *(void *)(v2 + 16) = v32;
  int v33 = *(_DWORD *)v2;
  *(void *)uint64_t v2 = *(_DWORD *)v2 & 1;
  if (v33) {
    goto LABEL_31;
  }
LABEL_14:
  uint64_t v18 = *(unsigned int *)(v2 + 16);
  if (!v18) {
    goto LABEL_34;
  }
  int v12 = *(_OWORD **)(v2 + 8);
  int v19 = (char *)&v12[v18];
  unint64_t v20 = v19 - (char *)v12 - 16;
  if (v20 < 0x30)
  {
    int v22 = *(char **)(v2 + 8);
    do
    {
LABEL_33:
      *(_OWORD *)int v22 = xmmword_1810FFA60;
      v22 += 16;
    }
    while (v22 != v19);
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v21 = (v20 >> 4) + 1;
  int v22 = (char *)&v12[v21 & 0x1FFFFFFFFFFFFFFCLL];
  long long v23 = v12 + 2;
  uint64_t v24 = v21 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    *(v23 - 2) = xmmword_1810FFA60;
    *(v23 - 1) = xmmword_1810FFA60;
    *long long v23 = xmmword_1810FFA60;
    v23[1] = xmmword_1810FFA60;
    v23 += 4;
    v24 -= 4;
  }
  while (v24);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFCLL)) {
    goto LABEL_33;
  }
LABEL_34:
  if (&v37 != v13)
  {
    BOOL v34 = &v37;
    do
    {
      if (*(void *)v34 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v36 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v2, (uint64_t)v34, &v36);
        *int v36 = *v34;
        *(_DWORD *)v2 += 2;
      }
      ++v34;
    }
    while (v34 != v13);
  }
  return result;
}

void llvm::toHex(size_t __len@<X1>, unsigned __int8 *a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  size_t v5 = __len;
  v19[2] = *MEMORY[0x1E4F143B8];
  __src = v19;
  long long v18 = xmmword_181101A00;
  unint64_t v8 = 2 * __len;
  if (2 * __len)
  {
    if (v8 >= 0x11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v19, v8, 1);
    }
    *(void *)&long long v18 = v8;
  }
  if (v5)
  {
    uint64_t v9 = 0;
    if (a3) {
      char v10 = 32;
    }
    else {
      char v10 = 0;
    }
    do
    {
      unsigned int v11 = *a2++;
      *((unsigned char *)__src + v9) = llvm::hexdigit(unsigned int,BOOL)::LUT[(unint64_t)v11 >> 4] | v10;
      *((unsigned char *)__src + v9 + 1) = llvm::hexdigit(unsigned int,BOOL)::LUT[v11 & 0xF] | v10;
      v9 += 2;
      --v5;
    }
    while (v5);
    size_t v5 = v18;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v12 = __src;
  if (v5 >= 0x17)
  {
    uint64_t v14 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v14 = v5 | 7;
    }
    uint64_t v15 = v14 + 1;
    BOOL v16 = operator new(v14 + 1);
    a4[1] = v5;
    a4[2] = v15 | 0x8000000000000000;
    *a4 = v16;
    a4 = v16;
  }
  else
  {
    *((unsigned char *)a4 + 23) = v5;
    if (!v5)
    {
      *(unsigned char *)a4 = 0;
      int v13 = __src;
      if (__src == v19) {
        return;
      }
      goto LABEL_15;
    }
  }
  memmove(a4, v12, v5);
  *((unsigned char *)a4 + v5) = 0;
  int v13 = __src;
  if (__src != v19) {
LABEL_15:
  }
    free(v13);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      long long v23 = a3;
      uint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        unint64_t v6 = 0x1E8EB8000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    int v10 = v3 - 1;
    unsigned int v11 = v9 & (v3 - 1);
    int v12 = (void *)(v4 + 24 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        unsigned int v18 = v11 + v16++;
        unsigned int v11 = v18 & v10;
        int v12 = (void *)(v4 + 24 * (v18 & v10));
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        int v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printOptionalLocationSpecifier(llvm::raw_ostream *result, uint64_t a2)
{
  if (*((unsigned char *)result + 64))
  {
    int v3 = (llvm::raw_ostream **)((char *)result + 16);
    uint64_t v4 = (llvm::raw_ostream *)*((void *)result + 2);
    unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if (*((unsigned char **)v4 + 3) == v5)
    {
      llvm::raw_ostream::write(v4, " ", 1uLL);
    }
    else
    {
      unsigned char *v5 = 32;
      ++*((void *)v4 + 4);
    }
    return mlir::AsmPrinter::Impl::printLocation(v3, a2, 1);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printNewline(_anonymous_namespace_::OperationPrinter *this)
{
  uint64_t v2 = (llvm::raw_ostream *)*((void *)this + 2);
  ++*((_DWORD *)this + 18);
  int v3 = (unsigned char *)*((void *)v2 + 4);
  if ((unint64_t)v3 >= *((void *)v2 + 3))
  {
    llvm::raw_ostream::write(v2, 10);
    uint64_t v4 = (llvm::raw_ostream *)*((void *)this + 2);
    unsigned int v5 = *((_DWORD *)this + 36);
  }
  else
  {
    *((void *)v2 + 4) = v3 + 1;
    *int v3 = 10;
    uint64_t v4 = (llvm::raw_ostream *)*((void *)this + 2);
    unsigned int v5 = *((_DWORD *)this + 36);
  }
  return llvm::raw_ostream::indent(v4, v5);
}

uint64_t anonymous namespace'::OperationPrinter::increaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) += 2;
  return this;
}

uint64_t anonymous namespace'::OperationPrinter::decreaseIndent(uint64_t this)
{
  *(_DWORD *)(this + 144) -= 2;
  return this;
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printRegionArgument(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
  if (a5) {
    goto LABEL_10;
  }
  unsigned int v11 = a1 + 16;
  int v10 = (llvm::raw_ostream *)*((void *)a1 + 2);
  int v12 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v12 <= 1uLL)
  {
    llvm::raw_ostream::write(v10, ": ", 2uLL);
    uint64_t v13 = (uint64_t **)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v13) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v14 = *(llvm::raw_ostream **)v11;
    uint64_t v15 = *(void **)(*(void *)v11 + 32);
    if (*(void *)(*(void *)v11 + 24) - (void)v15 > 0xCuLL)
    {
      qmemcpy(v15, "<<NULL TYPE>>", 13);
      *((void *)v14 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v14, "<<NULL TYPE>>", 0xDuLL);
    }
    goto LABEL_10;
  }
  *int v12 = 8250;
  *((void *)v10 + 4) += 2;
  uint64_t v13 = (uint64_t **)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13) {
    goto LABEL_7;
  }
LABEL_4:
  if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)(a1 + 16), (uint64_t)v13)) {
    mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)(a1 + 16), v13);
  }
LABEL_10:
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, void, void))(*(void *)a1 + 192))(a1, a3, a4, 0, 0);
  if ((a1[64] & 1) == 0) {
    return result;
  }
  BOOL v17 = (llvm::raw_ostream **)(a1 + 16);
  uint64_t v18 = *(void *)(a2 + 32);
  int v19 = (llvm::raw_ostream *)*((void *)a1 + 2);
  unint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if (*((unsigned char **)v19 + 3) == v20)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
    if ((a1[64] & 2) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *unint64_t v20 = 32;
    ++*((void *)v19 + 4);
    if ((a1[64] & 2) == 0)
    {
LABEL_13:
      uint64_t v21 = *v17;
      int v22 = (_DWORD *)*((void *)*v17 + 4);
      if (*((void *)*v17 + 3) - (void)v22 > 3uLL)
      {
        *int v22 = 677605228;
        *((void *)v21 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v21, "loc(", 4uLL);
      }
      mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 0, 1);
      uint64_t result = *v17;
      long long v23 = (unsigned char *)*((void *)*v17 + 4);
      if ((unint64_t)v23 >= *((void *)*v17 + 3))
      {
        return llvm::raw_ostream::write(result, 41);
      }
      else
      {
        *((void *)result + 4) = v23 + 1;
        *long long v23 = 41;
      }
      return result;
    }
  }

  return mlir::AsmPrinter::Impl::printLocationInternal((llvm::raw_ostream *)(a1 + 16), v18, 1, 1);
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2)
{
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printOperand(uint64_t a1, unint64_t a2, llvm::raw_ostream *a3)
{
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printSuccessor(_anonymous_namespace_::OperationPrinter *this, mlir::Block *a2)
{
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 376);
  uint64_t v6 = *(unsigned int *)(v4 + 392);
  if (v6)
  {
    unsigned int v7 = v6 - 1;
    uint64_t v8 = v5 + 32 * ((v6 - 1) & ((a2 >> 4) ^ (a2 >> 9)));
    int v9 = *(mlir::Block **)v8;
    if (*(mlir::Block **)v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    LODWORD(v11) = v7 & ((a2 >> 4) ^ (a2 >> 9));
    while (v9 != (mlir::Block *)-4096)
    {
      int v12 = v11 + v10++;
      uint64_t v11 = v12 & v7;
      int v9 = *(mlir::Block **)(v5 + 32 * v11);
      if (v9 == a2)
      {
        uint64_t v8 = v5 + 32 * v11;
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = v5 + 32 * v6;
LABEL_8:
  if (v8 == v5 + 32 * v6)
  {
    int v16 = (void *)((char *)result + 32);
    uint64_t v15 = (void *)*((void *)result + 4);
    uint64_t v13 = "INVALIDBLOCK";
    size_t v14 = 12;
    if (*((void *)result + 3) - (void)v15 > 0xBuLL) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = *(const char **)(v8 + 16);
    size_t v14 = *(void *)(v8 + 24);
    int v16 = (void *)((char *)result + 32);
    uint64_t v15 = (void *)*((void *)result + 4);
    if (v14 <= *((void *)result + 3) - (void)v15)
    {
      if (!v14) {
        return result;
      }
LABEL_16:
      uint64_t result = (llvm::raw_ostream *)memcpy(v15, v13, v14);
      *v16 += v14;
      return result;
    }
  }

  return llvm::raw_ostream::write(result, v13, v14);
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printSuccessorAndUseList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(llvm::raw_ostream **)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = a1 + 16;
  uint64_t v11 = *(void *)(v9 + 376);
  uint64_t v12 = *(unsigned int *)(v9 + 392);
  if (v12)
  {
    unsigned int v13 = v12 - 1;
    size_t v14 = (uint64_t *)(v11 + 32 * ((v12 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    uint64_t v15 = *v14;
    if (*v14 == a2) {
      goto LABEL_8;
    }
    int v16 = 1;
    LODWORD(v17) = v13 & ((a2 >> 4) ^ (a2 >> 9));
    while (v15 != -4096)
    {
      int v18 = v17 + v16++;
      uint64_t v17 = v18 & v13;
      uint64_t v15 = *(void *)(v11 + 32 * v17);
      if (v15 == a2)
      {
        size_t v14 = (uint64_t *)(v11 + 32 * v17);
        goto LABEL_8;
      }
    }
  }
  size_t v14 = (uint64_t *)(v11 + 32 * v12);
LABEL_8:
  if (v14 == (uint64_t *)(v11 + 32 * v12))
  {
    int v22 = (void *)((char *)result + 32);
    uint64_t v21 = (void *)*((void *)result + 4);
    int v19 = "INVALIDBLOCK";
    size_t v20 = 12;
    if (*((void *)result + 3) - (void)v21 > 0xBuLL) {
      goto LABEL_16;
    }
LABEL_13:
    uint64_t result = llvm::raw_ostream::write(result, v19, v20);
    goto LABEL_14;
  }
  int v19 = (const char *)v14[2];
  size_t v20 = v14[3];
  int v22 = (void *)((char *)result + 32);
  uint64_t v21 = (void *)*((void *)result + 4);
  if (v20 > *((void *)result + 3) - (void)v21) {
    goto LABEL_13;
  }
  if (!v20)
  {
LABEL_14:
    if (!a4) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = (llvm::raw_ostream *)memcpy(v21, v19, v20);
  *v22 += v20;
  if (!a4) {
    return result;
  }
LABEL_17:
  long long v23 = *(llvm::raw_ostream **)v10;
  uint64_t v24 = *(unsigned char **)(*(void *)v10 + 32);
  if ((unint64_t)v24 >= *(void *)(*(void *)v10 + 24))
  {
    llvm::raw_ostream::write(v23, 40);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *uint64_t v24 = 40;
  }
  unint64_t v25 = *(llvm::raw_ostream **)(a1 + 16);
  uint64_t v45 = a3;
  uint64_t v46 = 0;
  unint64_t v26 = mlir::ValueRange::dereference_iterator(&v45, 0);
  uint64_t v27 = ++v46;
  if (v45 != a3 || v27 != a4)
  {
    do
    {
      uint64_t v28 = (_WORD *)*((void *)v25 + 4);
      if (*((void *)v25 + 3) - (void)v28 > 1uLL)
      {
        *uint64_t v28 = 8236;
        *((void *)v25 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v25, ", ", 2uLL);
      }
      unint64_t v29 = mlir::ValueRange::dereference_iterator(&v45, v46);
      uint64_t v30 = ++v46;
    }
    while (v45 != a3 || v30 != a4);
  }
  uint64_t v31 = *(llvm::raw_ostream **)v10;
  uint64_t v32 = *(void *)(*(void *)v10 + 32);
  if ((unint64_t)(*(void *)(*(void *)v10 + 24) - v32) > 2)
  {
    *(unsigned char *)(v32 + 2) = 32;
    *(_WORD *)uint64_t v32 = 14880;
    *((void *)v31 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v31, " : ", 3uLL);
  }
  int v33 = *(llvm::raw_ostream **)v10;
  uint64_t v45 = a3;
  uint64_t v46 = 0;
  uint64_t v34 = *(void *)(mlir::ValueRange::dereference_iterator(&v45, 0) + 8);
  int v35 = (uint64_t **)(v34 & 0xFFFFFFFFFFFFFFF8);
  if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if (!mlir::AsmPrinter::Impl::printAlias(v10, v34 & 0xFFFFFFFFFFFFFFF8))
    {
      mlir::AsmPrinter::Impl::printTypeImpl(v10, v35);
      uint64_t v36 = ++v46;
      if (v45 != a3)
      {
        while (1)
        {
LABEL_43:
          while (1)
          {
            int v40 = (_WORD *)*((void *)v33 + 4);
            if (*((void *)v33 + 3) - (void)v40 <= 1uLL) {
              break;
            }
            *int v40 = 8236;
            *((void *)v33 + 4) += 2;
            uint64_t v41 = (uint64_t **)(*(void *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
            if (v41) {
              goto LABEL_45;
            }
LABEL_50:
            uint64_t v43 = *(llvm::raw_ostream **)v10;
            uint64_t v44 = *(void **)(*(void *)v10 + 32);
            if (*(void *)(*(void *)v10 + 24) - (void)v44 > 0xCuLL)
            {
              qmemcpy(v44, "<<NULL TYPE>>", 13);
              *((void *)v43 + 4) += 13;
              uint64_t v42 = ++v46;
              if (v45 == a3) {
                goto LABEL_47;
              }
            }
            else
            {
              llvm::raw_ostream::write(v43, "<<NULL TYPE>>", 0xDuLL);
              uint64_t v42 = ++v46;
              if (v45 == a3) {
                goto LABEL_47;
              }
            }
          }
          llvm::raw_ostream::write(v33, ", ", 2uLL);
          uint64_t v41 = (uint64_t **)(*(void *)(mlir::ValueRange::dereference_iterator(&v45, v46) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v41) {
            goto LABEL_50;
          }
LABEL_45:
          if (mlir::AsmPrinter::Impl::printAlias(v10, (uint64_t)v41))
          {
            uint64_t v42 = ++v46;
            if (v45 == a3)
            {
LABEL_47:
              if (v42 == a4) {
                goto LABEL_38;
              }
            }
          }
          else
          {
            mlir::AsmPrinter::Impl::printTypeImpl(v10, v41);
            uint64_t v42 = ++v46;
            if (v45 == a3) {
              goto LABEL_47;
            }
          }
        }
      }
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  long long v37 = *(llvm::raw_ostream **)v10;
  uint64_t v38 = *(void **)(*(void *)v10 + 32);
  if (*(void *)(*(void *)v10 + 24) - (void)v38 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v37, "<<NULL TYPE>>", 0xDuLL);
LABEL_36:
    uint64_t v36 = ++v46;
    if (v45 != a3) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  qmemcpy(v38, "<<NULL TYPE>>", 13);
  *((void *)v37 + 4) += 13;
  uint64_t v36 = ++v46;
  if (v45 != a3) {
    goto LABEL_43;
  }
LABEL_37:
  if (v36 != a4) {
    goto LABEL_43;
  }
LABEL_38:
  uint64_t result = *(llvm::raw_ostream **)v10;
  BOOL v39 = *(unsigned char **)(*(void *)v10 + 32);
  if ((unint64_t)v39 >= *(void *)(*(void *)v10 + 24)) {
    return llvm::raw_ostream::write(result, 41);
  }
  *((void *)result + 4) = v39 + 1;
  *BOOL v39 = 41;
  return result;
}

uint64_t anonymous namespace'::OperationPrinter::printOptionalAttrDict(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 0);
}

uint64_t anonymous namespace'::OperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::AsmPrinter::Impl::printOptionalAttrDict(a1 + 16, a2, a3, a4, a5, 1);
}

uint64_t anonymous namespace'::OperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(void *)this + 216))(this, a2, 1);
  }
  uint64_t v4 = *((void *)a2 + 6);
  if (*(_UNKNOWN **)(v4 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 56);
    return v5();
  }
  v82[0] = *(void *)(v4 + 8);
  uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
  if (!Values) {
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(void *)this + 216))(this, a2, 1);
  }
  (*(void (**)(llvm **__return_ptr))(*(void *)Values + 72))(v85);
  if (v86 < 8) {
    return (*(uint64_t (**)(_anonymous_namespace_::OperationPrinter *, mlir::Operation *, uint64_t))(*(void *)this + 216))(this, a2, 1);
  }
  v82[0] = *(void *)(*((void *)a2 + 6) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v82);
  if (v9)
  {
    uint64_t v10 = (char *)AttrData;
    size_t v11 = v9;
    if (v9 < 8)
    {
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      goto LABEL_22;
    }
    if (v9 >= 0x20)
    {
      int64x2_t v14 = 0uLL;
      v15.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v15.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      int8x16_t v16 = (int8x16_t)vdupq_n_s64(1uLL);
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFE0;
      int64x2_t v17 = 0uLL;
      int v18 = (int8x16_t *)(AttrData + 16);
      int64x2_t v19 = 0uLL;
      unint64_t v20 = v9 & 0xFFFFFFFFFFFFFFE0;
      int64x2_t v21 = 0uLL;
      int64x2_t v22 = 0uLL;
      int64x2_t v23 = 0uLL;
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = 0uLL;
      int64x2_t v26 = 0uLL;
      int64x2_t v27 = 0uLL;
      int64x2_t v28 = 0uLL;
      int64x2_t v29 = 0uLL;
      int64x2_t v30 = 0uLL;
      int64x2_t v31 = 0uLL;
      int64x2_t v32 = 0uLL;
      int64x2_t v33 = 0uLL;
      do
      {
        uint8x16_t v34 = (uint8x16_t)vceqq_s8(v18[-1], v15);
        uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
        uint16x8_t v36 = vmovl_high_u8(v34);
        uint32x4_t v37 = vmovl_high_u16(v36);
        v38.i64[0] = v37.u32[2];
        v38.i64[1] = v37.u32[3];
        int64x2_t v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v38, v16));
        uint32x4_t v39 = vmovl_high_u16(v35);
        uint32x4_t v40 = vmovl_u16(*(uint16x4_t *)v36.i8);
        v38.i64[0] = v37.u32[0];
        v38.i64[1] = v37.u32[1];
        int64x2_t v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v40.u32[2];
        v38.i64[1] = v40.u32[3];
        int64x2_t v23 = vaddq_s64(v23, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v39.u32[2];
        v38.i64[1] = v39.u32[3];
        int64x2_t v21 = vaddq_s64(v21, (int64x2_t)vandq_s8(v38, v16));
        int8x16_t v41 = *v18;
        v18 += 2;
        uint32x4_t v42 = vmovl_u16(*(uint16x4_t *)v35.i8);
        v38.i64[0] = v40.u32[0];
        v38.i64[1] = v40.u32[1];
        int64x2_t v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v42.u32[0];
        v38.i64[1] = v42.u32[1];
        int64x2_t v43 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v42.u32[2];
        v38.i64[1] = v42.u32[3];
        int64x2_t v44 = (int64x2_t)vandq_s8(v38, v16);
        v38.i64[0] = v39.u32[0];
        v38.i64[1] = v39.u32[1];
        uint8x16_t v45 = (uint8x16_t)vceqq_s8(v41, v15);
        int64x2_t v19 = vaddq_s64(v19, (int64x2_t)vandq_s8(v38, v16));
        uint16x8_t v46 = vmovl_u8(*(uint8x8_t *)v45.i8);
        uint16x8_t v47 = vmovl_high_u8(v45);
        int64x2_t v17 = vaddq_s64(v17, v44);
        uint32x4_t v48 = vmovl_high_u16(v47);
        int64x2_t v14 = vaddq_s64(v14, v43);
        v38.i64[0] = v48.u32[2];
        v38.i64[1] = v48.u32[3];
        int64x2_t v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v38, v16));
        uint32x4_t v49 = vmovl_high_u16(v46);
        uint32x4_t v50 = vmovl_u16(*(uint16x4_t *)v47.i8);
        v38.i64[0] = v48.u32[0];
        v38.i64[1] = v48.u32[1];
        int64x2_t v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[2];
        v38.i64[1] = v50.u32[3];
        int64x2_t v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v49.u32[2];
        v38.i64[1] = v49.u32[3];
        int64x2_t v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v50.u32[0];
        v38.i64[1] = v50.u32[1];
        int64x2_t v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v38, v16));
        uint32x4_t v51 = vmovl_u16(*(uint16x4_t *)v46.i8);
        v38.i64[0] = v49.u32[0];
        v38.i64[1] = v49.u32[1];
        int64x2_t v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[2];
        v38.i64[1] = v51.u32[3];
        int64x2_t v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v38, v16));
        v38.i64[0] = v51.u32[0];
        v38.i64[1] = v51.u32[1];
        int64x2_t v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v38, v16));
        v20 -= 32;
      }
      while (v20);
      uint64_t v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v26, v14), vaddq_s64(v30, v22)), vaddq_s64(vaddq_s64(v28, v19), vaddq_s64(v32, v24))), vaddq_s64(vaddq_s64(vaddq_s64(v27, v17), vaddq_s64(v31, v23)), vaddq_s64(vaddq_s64(v29, v21), vaddq_s64(v33, v25)))));
      if (v9 == v12) {
        goto LABEL_26;
      }
      if ((v9 & 0x18) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v12 = 0;
    }
    unint64_t v52 = v12;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFF8;
    int64x2_t v53 = 0uLL;
    int64x2_t v54 = (int64x2_t)(unint64_t)v13;
    int v55 = (int8x8_t *)(AttrData + v52);
    unint64_t v56 = v52 - (v9 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v57 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v58 = 0uLL;
    int64x2_t v59 = 0uLL;
    do
    {
      int8x8_t v60 = *v55++;
      uint16x8_t v61 = vmovl_u8((uint8x8_t)vceq_s8(v60, (int8x8_t)0x2E2E2E2E2E2E2E2ELL));
      uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)v61.i8);
      v63.i64[0] = v62.u32[0];
      v63.i64[1] = v62.u32[1];
      int64x2_t v64 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v62.u32[2];
      v63.i64[1] = v62.u32[3];
      int64x2_t v65 = (int64x2_t)vandq_s8(v63, v57);
      uint32x4_t v66 = vmovl_high_u16(v61);
      v63.i64[0] = v66.u32[0];
      v63.i64[1] = v66.u32[1];
      int64x2_t v67 = (int64x2_t)vandq_s8(v63, v57);
      v63.i64[0] = v66.u32[2];
      v63.i64[1] = v66.u32[3];
      int64x2_t v59 = vaddq_s64(v59, (int64x2_t)vandq_s8(v63, v57));
      int64x2_t v58 = vaddq_s64(v58, v67);
      int64x2_t v53 = vaddq_s64(v53, v65);
      int64x2_t v54 = vaddq_s64(v54, v64);
      v56 += 8;
    }
    while (v56);
    uint64_t v13 = vaddvq_s64(vaddq_s64(vaddq_s64(v54, v58), vaddq_s64(v53, v59)));
    if (v9 != v12)
    {
LABEL_22:
      unint64_t v68 = v9 - v12;
      unsigned int v69 = (unsigned __int8 *)(AttrData + v12);
      do
      {
        int v70 = *v69++;
        if (v70 == 46) {
          ++v13;
        }
        --v68;
      }
      while (v68);
    }
LABEL_26:
    if (v13 == 1)
    {
      uint64_t v71 = *((void *)this + 10) + 16 * *((unsigned int *)this + 22);
      __int16 v83 = 773;
      v82[0] = *(void *)(v71 - 16);
      v82[1] = *(void *)(v71 - 8);
      v82[2] = ".";
      llvm::Twine::str((llvm::Twine *)v82, &v84);
      int v72 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
      uint64_t v73 = (void *)v84.__r_.__value_.__r.__words[0];
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v74 = &v84;
      }
      else {
        int v74 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v84.__r_.__value_.__l.__size_;
      }
      if (v11 >= size && (!size || !memcmp(v10, v74, size)))
      {
        if (v11 >= size) {
          size_t v76 = size;
        }
        else {
          size_t v76 = v11;
        }
        v10 += v76;
        v11 -= v76;
      }
      if (v72 < 0) {
        operator delete(v73);
      }
    }
    uint64_t v77 = *((void *)this + 2);
    unsigned int v78 = *(void **)(v77 + 32);
    if (v11 <= *(void *)(v77 + 24) - (void)v78)
    {
      if (v11)
      {
        memcpy(v78, v10, v11);
        *(void *)(v77 + 32) += v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 2), v10, v11);
    }
  }
  if ((v86 & 2) != 0) {
    unsigned int v79 = v85;
  }
  else {
    unsigned int v79 = (llvm **)v85[0];
  }
  uint64_t result = (*(uint64_t (**)(llvm **, mlir::Operation *, _anonymous_namespace_::OperationPrinter *))(v86 & 0xFFFFFFFFFFFFFFF8))(v79, a2, this);
  char v80 = v86;
  if (v86 >= 8)
  {
    if ((v86 & 4) != 0)
    {
      if ((v86 & 2) != 0) {
        uint64_t v81 = v85;
      }
      else {
        uint64_t v81 = (llvm **)v85[0];
      }
      uint64_t result = (*(uint64_t (**)(llvm **))((v86 & 0xFFFFFFFFFFFFFFF8) + 16))(v81);
    }
    if ((v80 & 2) == 0) {
      llvm::deallocate_buffer(v85[0], v85[1]);
    }
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printGenericOp(_anonymous_namespace_::OperationPrinter *this, mlir::Operation *a2, int a3)
{
  if (a3)
  {
    unint64_t v85 = *(void *)(*((void *)a2 + 6) + 8);
    uint64_t AttrData = (llvm::raw_ostream *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v85);
    uint64_t v7 = v6;
    uint64_t v8 = (llvm::raw_ostream *)*((void *)this + 2);
    unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\"", 1uLL);
    }
    else
    {
      unsigned char *v9 = 34;
      ++*((void *)v8 + 4);
    }
    llvm::printEscapedString(AttrData, v7, *((llvm::raw_ostream **)this + 2));
    uint64_t v10 = (llvm::raw_ostream *)*((void *)this + 2);
    size_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, "\"", 1uLL);
      uint64_t v13 = (llvm::raw_ostream **)((char *)this + 16);
      unint64_t v12 = (llvm::raw_ostream *)*((void *)this + 2);
      int64x2_t v14 = (unsigned char *)*((void *)v12 + 4);
      if ((unint64_t)v14 < *((void *)v12 + 3)) {
        goto LABEL_8;
      }
LABEL_10:
      llvm::raw_ostream::write(v12, 40);
      goto LABEL_11;
    }
    *size_t v11 = 34;
    ++*((void *)v10 + 4);
  }
  uint64_t v13 = (llvm::raw_ostream **)((char *)this + 16);
  unint64_t v12 = (llvm::raw_ostream *)*((void *)this + 2);
  int64x2_t v14 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v14 >= *((void *)v12 + 3)) {
    goto LABEL_10;
  }
LABEL_8:
  *((void *)v12 + 4) = v14 + 1;
  *int64x2_t v14 = 40;
LABEL_11:
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v15 = *((unsigned int *)a2 + 17);
    if (v15)
    {
      uint64_t v16 = *((void *)a2 + 9);
      int64x2_t v17 = *v13;
      if (v15 != 1)
      {
        uint64_t v35 = v15 - 1;
        uint16x8_t v36 = (unint64_t *)(v16 + 56);
        do
        {
          int8x16_t v38 = (_WORD *)*((void *)v17 + 4);
          if (*((void *)v17 + 3) - (void)v38 > 1uLL)
          {
            *int8x16_t v38 = 8236;
            *((void *)v17 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v17, ", ", 2uLL);
          }
          unint64_t v37 = *v36;
          v36 += 4;
          --v35;
        }
        while (v35);
      }
    }
  }
  int v18 = *v13;
  int64x2_t v19 = (unsigned char *)*((void *)*v13 + 4);
  if ((unint64_t)v19 >= *((void *)*v13 + 3))
  {
    llvm::raw_ostream::write(v18, 41);
    if (!*((_DWORD *)a2 + 10)) {
      goto LABEL_45;
    }
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *int64x2_t v19 = 41;
    if (!*((_DWORD *)a2 + 10)) {
      goto LABEL_45;
    }
  }
  unint64_t v20 = *v13;
  int64x2_t v21 = (unsigned char *)*((void *)*v13 + 4);
  if ((unint64_t)v21 >= *((void *)*v13 + 3))
  {
    llvm::raw_ostream::write(v20, 91);
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    uint64_t v22 = v86;
    if (!v86) {
      goto LABEL_43;
    }
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    *int64x2_t v21 = 91;
    mlir::SuccessorRange::SuccessorRange(&v85, a2);
    uint64_t v22 = v86;
    if (!v86) {
      goto LABEL_43;
    }
  }
  unint64_t v23 = v85;
  int64x2_t v24 = *v13;
  uint64_t v25 = *((void *)this + 3);
  uint64_t v26 = *(void *)(v25 + 376);
  uint64_t v27 = *(unsigned int *)(v25 + 392);
  if (v27)
  {
    uint64_t v28 = *(void *)(v85 + 24);
    unsigned int v29 = v27 - 1;
    int64x2_t v30 = (uint64_t *)(v26 + 32 * ((v27 - 1) & ((v28 >> 4) ^ (v28 >> 9))));
    uint64_t v31 = *v30;
    if (*v30 == v28) {
      goto LABEL_34;
    }
    int v32 = 1;
    LODWORD(v33) = v29 & ((v28 >> 4) ^ (v28 >> 9));
    while (v31 != -4096)
    {
      int v34 = v33 + v32++;
      uint64_t v33 = v34 & v29;
      uint64_t v31 = *(void *)(v26 + 32 * v33);
      if (v31 == v28)
      {
        int64x2_t v30 = (uint64_t *)(v26 + 32 * v33);
        goto LABEL_34;
      }
    }
  }
  int64x2_t v30 = (uint64_t *)(v26 + 32 * v27);
LABEL_34:
  if (v30 == (uint64_t *)(v26 + 32 * v27))
  {
    uint32x4_t v42 = (void *)((char *)v24 + 32);
    int8x16_t v41 = (void *)*((void *)v24 + 4);
    uint32x4_t v39 = "INVALIDBLOCK";
    size_t v40 = 12;
    if (*((void *)v24 + 3) - (void)v41 > 0xBuLL) {
      goto LABEL_42;
    }
LABEL_39:
    llvm::raw_ostream::write(*v13, v39, v40);
    goto LABEL_40;
  }
  uint32x4_t v39 = (const char *)v30[2];
  size_t v40 = v30[3];
  uint32x4_t v42 = (void *)((char *)v24 + 32);
  int8x16_t v41 = (void *)*((void *)v24 + 4);
  if (v40 > *((void *)v24 + 3) - (void)v41) {
    goto LABEL_39;
  }
  if (!v40)
  {
LABEL_40:
    if (v22 != 1) {
      goto LABEL_70;
    }
    goto LABEL_43;
  }
LABEL_42:
  memcpy(v41, v39, v40);
  *v42 += v40;
  if (v22 != 1)
  {
LABEL_70:
    for (uint64_t i = 1; i != v22; ++i)
    {
      int64x2_t v67 = (_WORD *)*((void *)v24 + 4);
      if (*((void *)v24 + 3) - (void)v67 > 1uLL)
      {
        *int64x2_t v67 = 8236;
        *((void *)v24 + 4) += 2;
        unint64_t v68 = (void *)*((void *)this + 2);
        uint64_t v72 = *((void *)this + 3);
        uint64_t v70 = *(void *)(v72 + 376);
        uint64_t v71 = *(unsigned int *)(v72 + 392);
        if (!v71) {
          goto LABEL_83;
        }
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
        unint64_t v68 = (void *)*((void *)this + 2);
        uint64_t v69 = *((void *)this + 3);
        uint64_t v70 = *(void *)(v69 + 376);
        uint64_t v71 = *(unsigned int *)(v69 + 392);
        if (!v71) {
          goto LABEL_83;
        }
      }
      uint64_t v73 = *(void *)(v23 + 32 * i + 24);
      unsigned int v74 = v71 - 1;
      uint64_t v75 = (uint64_t *)(v70 + 32 * ((v71 - 1) & ((v73 >> 4) ^ (v73 >> 9))));
      uint64_t v76 = *v75;
      if (*v75 == v73) {
        goto LABEL_84;
      }
      int v77 = 1;
      LODWORD(v78) = v74 & ((v73 >> 4) ^ (v73 >> 9));
      while (v76 != -4096)
      {
        int v79 = v78 + v77++;
        uint64_t v78 = v79 & v74;
        uint64_t v76 = *(void *)(v70 + 32 * v78);
        if (v76 == v73)
        {
          uint64_t v75 = (uint64_t *)(v70 + 32 * v78);
          goto LABEL_84;
        }
      }
LABEL_83:
      uint64_t v75 = (uint64_t *)(v70 + 32 * v71);
LABEL_84:
      if (v75 == (uint64_t *)(v70 + 32 * v71))
      {
        uint64_t v81 = v68 + 4;
        char v80 = (void *)v68[4];
        if (v68[3] - (void)v80 > 0xBuLL)
        {
          size_t v66 = 12;
          int64x2_t v65 = "INVALIDBLOCK";
LABEL_90:
          memcpy(v80, v65, v66);
          *v81 += v66;
          continue;
        }
        int64x2_t v65 = "INVALIDBLOCK";
        size_t v66 = 12;
      }
      else
      {
        int64x2_t v65 = (const char *)v75[2];
        size_t v66 = v75[3];
        uint64_t v81 = v68 + 4;
        char v80 = (void *)v68[4];
        if (v66 <= v68[3] - (void)v80)
        {
          if (!v66) {
            continue;
          }
          goto LABEL_90;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)v68, v65, v66);
    }
  }
LABEL_43:
  int64x2_t v43 = *v13;
  int64x2_t v44 = (unsigned char *)*((void *)*v13 + 4);
  if ((unint64_t)v44 >= *((void *)*v13 + 3))
  {
    llvm::raw_ostream::write(v43, 93);
    uint64_t PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
    if (!PropertiesAsAttribute) {
      goto LABEL_54;
    }
LABEL_48:
    uint16x8_t v46 = (uint64_t **)PropertiesAsAttribute;
    uint16x8_t v47 = *v13;
    uint32x4_t v48 = (_WORD *)*((void *)*v13 + 4);
    if (*((void *)*v13 + 3) - (void)v48 > 1uLL)
    {
      *uint32x4_t v48 = 15392;
      *((void *)v47 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v47, " <", 2uLL);
      {
LABEL_56:
        mlir::AsmPrinter::Impl::printAttributeImpl(v13, v46, 0);
        uint32x4_t v49 = *v13;
        uint32x4_t v50 = (unsigned char *)*((void *)*v13 + 4);
        if ((unint64_t)v50 >= *((void *)*v13 + 3))
        {
LABEL_57:
          llvm::raw_ostream::write(v49, 62);
          if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0) {
            goto LABEL_66;
          }
LABEL_58:
          uint32x4_t v51 = *v13;
          unint64_t v52 = (_WORD *)*((void *)*v13 + 4);
          if (*((void *)*v13 + 3) - (void)v52 > 1uLL)
          {
            *unint64_t v52 = 10272;
            *((void *)v51 + 4) += 2;
            unint64_t v53 = *((unsigned int *)a2 + 11);
            unsigned int v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0) {
              goto LABEL_63;
            }
          }
          else
          {
            llvm::raw_ostream::write(v51, " (", 2uLL);
            unint64_t v53 = *((unsigned int *)a2 + 11);
            unsigned int v54 = v53 & 0x7FFFFF;
            if ((v53 & 0x7FFFFF) == 0)
            {
LABEL_63:
              int8x16_t v57 = *v13;
              int64x2_t v58 = (unsigned char *)*((void *)*v13 + 4);
              if ((unint64_t)v58 >= *((void *)*v13 + 3))
              {
                llvm::raw_ostream::write(v57, 41);
              }
              else
              {
                *((void *)v57 + 4) = v58 + 1;
                *int64x2_t v58 = 41;
              }
              goto LABEL_66;
            }
          }
          unint64_t v55 = (((unint64_t)a2 + 16 * ((v53 >> 23) & 1) + ((v53 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)a2 + 10);
          unint64_t v56 = (llvm::raw_ostream *)*((void *)this + 2);
          (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 224))(this, v55, 1, 1, 1);
          if (v54 != 1)
          {
            unint64_t v82 = v55 + 24;
            uint64_t v83 = 24 * v54 - 24;
            do
            {
              std::string v84 = (_WORD *)*((void *)v56 + 4);
              if (*((void *)v56 + 3) - (void)v84 > 1uLL)
              {
                *std::string v84 = 8236;
                *((void *)v56 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v56, ", ", 2uLL);
              }
              (*(void (**)(_anonymous_namespace_::OperationPrinter *, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 224))(this, v82, 1, 1, 1);
              v82 += 24;
              v83 -= 24;
            }
            while (v83);
          }
          goto LABEL_63;
        }
LABEL_53:
        *((void *)v49 + 4) = v50 + 1;
        *uint32x4_t v50 = 62;
        goto LABEL_54;
      }
    }
    uint32x4_t v49 = *v13;
    uint32x4_t v50 = (unsigned char *)*((void *)*v13 + 4);
    if ((unint64_t)v50 >= *((void *)*v13 + 3)) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
  *((void *)v43 + 4) = v44 + 1;
  *int64x2_t v44 = 93;
LABEL_45:
  uint64_t PropertiesAsAttribute = mlir::Operation::getPropertiesAsAttribute(a2);
  if (PropertiesAsAttribute) {
    goto LABEL_48;
  }
LABEL_54:
  if ((*((_DWORD *)a2 + 11) & 0x7FFFFF) != 0) {
    goto LABEL_58;
  }
LABEL_66:
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
  (*(void (**)(_anonymous_namespace_::OperationPrinter *, uint64_t, uint64_t, void, void))(*(void *)this + 192))(this, Value, v60, 0, 0);
  uint16x8_t v61 = (llvm::raw_ostream *)*((void *)this + 2);
  uint64_t v62 = *((void *)v61 + 4);
  if ((unint64_t)(*((void *)v61 + 3) - v62) > 2)
  {
    *(unsigned char *)(v62 + 2) = 32;
    *(_WORD *)uint64_t v62 = 14880;
    *((void *)v61 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v61, " : ", 3uLL);
  }
  return mlir::OpAsmPrinter::printFunctionalType(this, a2);
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printRegion(_anonymous_namespace_::OperationPrinter *this, mlir::Region *a2, int a3, char a4, int a5)
{
  char v6 = *((unsigned char *)this + 64);
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 2);
  unint64_t v9 = (unsigned char *)*((void *)result + 3);
  uint64_t v8 = (unsigned char *)*((void *)result + 4);
  if ((v6 & 8) == 0)
  {
    if (v9 == v8)
    {
      uint64_t result = llvm::raw_ostream::write(result, "{", 1uLL);
      int64x2_t v14 = (unsigned char *)*((void *)result + 4);
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((void *)result + 3))
      {
LABEL_4:
        *((void *)result + 4) = v14 + 1;
        *int64x2_t v14 = 10;
        if (*(mlir::Region **)a2 == a2) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    else
    {
      *uint64_t v8 = 123;
      int64x2_t v14 = (unsigned char *)(*((void *)result + 4) + 1);
      *((void *)result + 4) = v14;
      ++*((_DWORD *)this + 18);
      if ((unint64_t)v14 < *((void *)result + 3)) {
        goto LABEL_4;
      }
    }
    llvm::raw_ostream::write(result, 10);
    if (*(mlir::Region **)a2 == a2)
    {
LABEL_5:
      uint64_t result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
      uint64_t v15 = (unsigned char *)*((void *)result + 4);
      if (*((unsigned char **)result + 3) != v15)
      {
LABEL_6:
        *uint64_t v15 = 125;
        uint64_t v16 = *((void *)result + 4) + 1;
LABEL_10:
        *((void *)result + 4) = v16;
        return result;
      }
      goto LABEL_39;
    }
LABEL_13:
    if (llvm::DefaultDoCastIfPossible<mlir::OpAsmOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OpAsmOpInterface,mlir::Operation *,void>>::doCastIfPossible(*((void *)a2 + 2)))
    {
      uint64_t v20 = (*(uint64_t (**)(void))(v19 + 24))();
      unint64_t v23 = (_DWORD *)((char *)this + 88);
      uint64_t v22 = *((unsigned int *)this + 22);
      int64x2_t v24 = (void *)((char *)this + 80);
      if (v22 >= *((_DWORD *)this + 23))
      {
        uint64_t v35 = v21;
        uint64_t v36 = v20;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v22 + 1, 16);
        int64x2_t v24 = (void *)((char *)this + 80);
        uint64_t v21 = v35;
        uint64_t v20 = v36;
        LODWORD(v22) = *((_DWORD *)this + 22);
      }
      uint64_t v25 = (uint64_t *)(*v24 + 16 * v22);
      *uint64_t v25 = v20;
    }
    else
    {
      unint64_t v23 = (_DWORD *)((char *)this + 88);
      uint64_t v26 = *((unsigned int *)this + 22);
      uint64_t v27 = (void *)((char *)this + 80);
      if (v26 >= *((_DWORD *)this + 23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (char *)this + 96, v26 + 1, 16);
        uint64_t v27 = (void *)((char *)this + 80);
        LODWORD(v26) = *((_DWORD *)this + 22);
      }
      uint64_t v21 = 0;
      uint64_t v25 = (uint64_t *)(*v27 + 16 * v26);
      *uint64_t v25 = (uint64_t)"";
    }
    v25[1] = v21;
    ++*v23;
    uint64_t v28 = *((void *)a2 + 1);
    if (v28) {
      unsigned int v29 = (mlir::Block *)(v28 - 8);
    }
    else {
      unsigned int v29 = 0;
    }
    if (a5)
    {
      int64x2_t v30 = (void *)*((void *)v29 + 4);
      BOOL v31 = v30 == (void *)((char *)v29 + 32);
      if (v30 != (void *)((char *)v29 + 32) && a3 != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      if (a3)
      {
LABEL_31:
        BOOL v31 = ((*((void *)v29 + 7) - *((void *)v29 + 6)) & 0x7FFFFFFF8) != 0;
        goto LABEL_33;
      }
      BOOL v31 = 0;
    }
LABEL_33:
    for (uint64_t i = *(mlir::Region **)(*((void *)a2 + 1) + 8); i != a2; uint64_t i = (mlir::Region *)*((void *)i + 1))
    {
      if (i) {
        int v34 = (mlir::Region *)((char *)i - 8);
      }
      else {
        int v34 = 0;
      }
    }
    --*((_DWORD *)this + 22);
    uint64_t result = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 2), *((_DWORD *)this + 36));
    uint64_t v15 = (unsigned char *)*((void *)result + 4);
    if (*((unsigned char **)result + 3) != v15) {
      goto LABEL_6;
    }
LABEL_39:
    int64x2_t v17 = "}";
    size_t v18 = 1;
    goto LABEL_40;
  }
  if ((unint64_t)(v9 - v8) > 4)
  {
    v8[4] = 125;
    *(_DWORD *)uint64_t v8 = 774778491;
    uint64_t v16 = *((void *)result + 4) + 5;
    goto LABEL_10;
  }
  int64x2_t v17 = "{...}";
  size_t v18 = 5;
LABEL_40:

  return llvm::raw_ostream::write(result, v17, v18);
}

void anonymous namespace'::OperationPrinter::shadowRegionArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 24);
  v38[0] = a3;
  v38[1] = a4;
  uint64_t v35 = v37;
  long long v36 = xmmword_181101A00;
  uint64_t v5 = a4;
  if (a4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (llvm::raw_ostream *)(v4 + 35);
    unint64_t v9 = v4 + 54;
    uint64_t v10 = v4 + 38;
    do
    {
      uint64_t v11 = mlir::ValueRange::dereference_iterator(v38, v7);
      if (v11)
      {
        unint64_t v12 = v11;
        uint64_t v13 = *(void *)(a2 + 8);
        if (v13) {
          uint64_t v14 = v13 - 8;
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = *(void *)(*(void *)(v14 + 48) + 8 * v7);
        int v32 = &v35;
        unint64_t v33 = v15;
        *(void *)&long long v36 = 0;
        int v25 = 0;
        char v29 = 0;
        uint64_t v30 = 0;
        int v31 = 1;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = 0;
        int64x2_t v24 = &unk_1EC9A3930;
        llvm::raw_ostream::SetBufferAndMode((uint64_t)&v24, 0, 0, 0);
        uint64_t v16 = 0;
        int64x2_t v17 = v32[1];
        BOOL v18 = v17 != 0;
        size_t v19 = (size_t)v17 - v18;
        if (v17 != (void *)v18)
        {
          uint64_t v20 = (char *)*v32 + v18;
          uint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v9, (uint64_t)v17 - v18, 0);
          memmove(v16, v20, v19);
        }
        int v34 = 0;
        char v21 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v10, &v33, &v34);
        uint64_t v22 = v34;
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v10, (uint64_t)&v33, &v33, v34);
          unint64_t v23 = v33;
          v22[1] = 0;
          void v22[2] = 0;
          *uint64_t v22 = v23;
        }
        v22[1] = v16;
        void v22[2] = v19;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
      }
      ++v7;
    }
    while (v5 != v7);
    if (v35 != v37) {
      free(v35);
    }
  }
}

double anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  v23[0] = a3;
  v23[1] = a4;
  if (a2)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
    int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v19[0] = &NumDims;
    v19[1] = a1;
    v19[2] = v23;
    Results = (uint64_t *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
    if (v6)
    {
      uint64_t v8 = Results;
      uint64_t v9 = v6;
      unint64_t v12 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v10 = (llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = v12;
      if (v9 != 1)
      {
        uint64_t v13 = v8 + 1;
        uint64_t v14 = 8 * v9 - 8;
        do
        {
          uint64_t v16 = (_WORD *)*((void *)v11 + 4);
          if (*((void *)v11 + 3) - (void)v16 > 1uLL)
          {
            *uint64_t v16 = 8236;
            *((void *)v11 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v11, ", ", 2uLL);
          }
          uint64_t v15 = *v13++;
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  else
  {
    int64x2_t v17 = *(llvm::raw_ostream **)(a1 + 16);
    uint64_t v18 = *((void *)v17 + 4);
    if ((unint64_t)(*((void *)v17 + 3) - v18) > 0x12)
    {
      *(_DWORD *)(v18 + 15) = 1044271169;
      double result = *(double *)"<<NULL AFFINE MAP>>";
      *(_OWORD *)uint64_t v18 = *(_OWORD *)"<<NULL AFFINE MAP>>";
      *((void *)v17 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v17, "<<NULL AFFINE MAP>>", 0x13uLL);
    }
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v9[2] = *MEMORY[0x1E4F143B8];
  v9[0] = a3;
  v9[1] = a4;
  v8[0] = a5;
  v8[1] = a6;
  v7[0] = a1;
  v7[1] = v9;
  void v7[2] = v8;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::OpAsmOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OpAsmOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  int v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::OpAsmOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::OpAsmOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::OpAsmOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::OpAsmOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::OpAsmOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v17 = 72;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3760), v2);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  BOOL v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      unint64_t v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v18 = result;
      do
      {
        *uint64_t v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          char v21 = v4;
          do
          {
            if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v21, &v27);
              uint64_t v22 = v27;
              *uint64_t v27 = *(void *)v21;
              *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            char v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      unint64_t v12 = result;
    }
    size_t v19 = &result[3 * v10];
    do
    {
      *unint64_t v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_25:
      uint64_t v26 = &result[3 * v13];
      do
      {
        *uint64_t v15 = -4096;
        v15 += 3;
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v23 = v14 / 0x18 + 1;
    uint64_t v15 = &result[3 * (v23 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    int v25 = result;
    do
    {
      *int v25 = -4096;
      v25[3] = -4096;
      v25 += 6;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<anonymous namespace'::OperationPrinter::printAffineMapOfSSAIds(mlir::AffineMapAttr,mlir::ValueRange)::$_0>(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a3)
  {
    uint64_t v5 = **(_DWORD **)a1 + a2;
    unint64_t v6 = *(llvm::raw_ostream **)(v4 + 16);
    int v7 = (_DWORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *int v7 = 1651341683;
      *((void *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    unint64_t v12 = mlir::ValueRange::dereference_iterator(*(void **)(a1 + 16), v5);
    double result = *(llvm::raw_ostream **)(v4 + 16);
    unsigned int v13 = (unsigned char *)*((void *)result + 4);
    if ((unint64_t)v13 >= *((void *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((void *)result + 4) = v13 + 1;
      *unsigned int v13 = 41;
    }
  }
  else
  {
    unint64_t v8 = mlir::ValueRange::dereference_iterator(*(void **)(a1 + 16), a2);
    uint64_t v9 = *(llvm::raw_ostream **)(v4 + 16);
    unsigned int v10 = (llvm::raw_ostream *)(*(void *)(v4 + 24) + 280);
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int,BOOL)>::callback_fn<anonymous namespace'::OperationPrinter::printAffineExprOfSSAIds(mlir::AffineExpr,mlir::ValueRange,mlir::ValueRange)::$_0>(uint64_t *a1, unsigned int a2, char a3)
{
  uint64_t v5 = *a1;
  if (a3)
  {
    unint64_t v6 = *(llvm::raw_ostream **)(v5 + 16);
    int v7 = (_DWORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 678195042;
      *int v7 = 1651341683;
      *((void *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, "symbol(", 7uLL);
    }
    unint64_t v12 = mlir::ValueRange::dereference_iterator((void *)a1[2], a2);
    double result = *(llvm::raw_ostream **)(v5 + 16);
    unsigned int v13 = (unsigned char *)*((void *)result + 4);
    if ((unint64_t)v13 >= *((void *)result + 3))
    {
      return llvm::raw_ostream::write(result, 41);
    }
    else
    {
      *((void *)result + 4) = v13 + 1;
      *unsigned int v13 = 41;
    }
  }
  else
  {
    unint64_t v8 = mlir::ValueRange::dereference_iterator((void *)a1[1], a2);
    uint64_t v9 = *(llvm::raw_ostream **)(v5 + 16);
    unsigned int v10 = (llvm::raw_ostream *)(*(void *)(v5 + 24) + 280);
  }
  return result;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printCustomOrGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, const char **a2)
{
  char v4 = *(unsigned char *)(*((void *)this + 2) + 32);
  if (v4)
  {
    char v4 = *(unsigned char *)(*((void *)this + 2) + 32);
  }
  if ((v4 & 4) != 0)
  {
    int v7 = *(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, const char **, uint64_t))(*(void *)this + 216);
    return v7(this, a2, 1);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)a2[6] + 56);
    return v5();
  }
}

void anonymous namespace'::DummyAliasOperationPrinter::~DummyAliasOperationPrinter(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  *(void *)this = &unk_1EC99B7D8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EC99B7D8;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasOperationPrinter *)((char *)this + 32));

  operator delete(this);
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::getStream(_anonymous_namespace_::DummyAliasOperationPrinter *this)
{
  return (uint64_t)this + 32;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printType(uint64_t a1, void **a2)
{
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printAttribute(uint64_t a1, const char *a2)
{
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printAttributeWithoutType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, const char *a2)
{
  return 1;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printAlias(uint64_t a1, void **a2)
{
  return 1;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printOptionalLocationSpecifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printRegionArgument(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *, unint64_t))(*a1 + 32))(a1, *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (*(unsigned char *)(a1[2] + 32))
  {
    uint64_t v5 = (_anonymous_namespace_::AliasInitializer *)a1[3];
    unint64_t v6 = *(const char **)(a2 + 32);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::DummyAliasOperationPrinter::printOperand(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = (unsigned char *)*((void *)a3 + 4);
  if (*((unsigned char **)a3 + 3) == v3) {
    return llvm::raw_ostream::write(a3, "%", 1uLL);
  }
  *uint64_t v3 = 37;
  ++*((void *)a3 + 4);
  return result;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDict(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v6 = (mlir::CallGraphNode *)a2;
    uint64_t v7 = result;
    if (a5)
    {
      v14[0] = a4;
      uint64_t v15 = (uint64_t *)(a4 + 16 * a5);
      llvm::detail::DenseSetImpl<llvm::StringRef,llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::DenseMapInfo<llvm::StringRef,void>>::DenseSetImpl<llvm::StringRef const*>((uint64_t)&v16, v14, &v15);
      uint64_t v8 = 16 * a3;
      while (1)
      {
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(v6);
        v14[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        v14[1] = v9;
        uint64_t v15 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t)&v16, (uint64_t)v14, &v15);
        if (result)
        {
          if (v16)
          {
            if (v15 != &v19) {
              goto LABEL_5;
            }
          }
          else if (v15 != (uint64_t *)((char *)v17 + 16 * v18))
          {
            goto LABEL_5;
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 40))(v7, *((void *)v6 + 1));
LABEL_5:
        unint64_t v6 = (mlir::CallGraphNode *)((char *)v6 + 16);
        v8 -= 16;
        if (!v8)
        {
          if ((v16 & 1) == 0) {
            llvm::deallocate_buffer(v17, (void *)(16 * v18));
          }
          return result;
        }
      }
    }
    uint64_t v10 = 16 * a3;
    unint64_t v11 = a2 + 1;
    do
    {
      uint64_t v12 = *v11;
      v11 += 2;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v12);
      v10 -= 16;
    }
    while (v10);
  }
  return result;
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printOptionalAttrDictWithKeyword(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t anonymous namespace'::DummyAliasOperationPrinter::printGenericOp(_anonymous_namespace_::DummyAliasOperationPrinter *this, mlir::Operation *a2)
{
  if ((*(unsigned char *)(*((void *)this + 2) + 32) & 8) == 0)
  {
    unint64_t v4 = *((unsigned int *)a2 + 11);
    if ((v4 & 0x7FFFFF) != 0)
    {
      unint64_t v5 = (((unint64_t)a2 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)a2 + 10);
      uint64_t v6 = 24 * (v4 & 0x7FFFFF);
      do
      {
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)this + 224))(this, v5, 1, 1, 0);
        v5 += 24;
        v6 -= 24;
      }
      while (v6);
    }
  }
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v7 = *((void *)a2 + 9);
    uint64_t v8 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v30 = (char *)v7;
  uint64_t v31 = v8;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v28 || v29 != v27)
  {
    if (AttrDictionary != v28)
    {
      for (uint64_t i = (uint64_t *)(AttrDictionary + 32 * v27 + 24); ; i += 4)
      {
        uint64_t v10 = *i;
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(void *)this + 32))(this, *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    unint64_t v11 = (uint64_t *)(AttrDictionary + 32 * v27 + 24);
    uint64_t v12 = v29 - v27;
    do
    {
      uint64_t v13 = *v11;
      v11 += 4;
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(void *)this + 32))(this, *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
      --v12;
    }
    while (v12);
  }
  uint64_t v14 = *((unsigned int *)a2 + 9);
  uint64_t v15 = (char *)a2 - 16;
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  mlir::OperandRange::getTypes((uint64_t *)&v30, (uint64_t *)&AttrDictionary);
  uint64_t v16 = AttrDictionary;
  uint64_t v17 = v27;
  uint64_t v18 = v29;
  if (AttrDictionary != v28 || v27 != v29)
  {
    if (AttrDictionary != v28)
    {
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
        (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(void *)this + 32))(this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
        ++v17;
      }
    }
    do
    {
      uint64_t v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
      (*(void (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, unint64_t))(*(void *)this + 32))(this, *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
      ++v17;
    }
    while (v18 != v17);
  }
  if (*((unsigned char *)a2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    uint64_t result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
    if (!v22) {
      return result;
    }
  }
  else
  {
    uint64_t result = mlir::ArrayAttr::getValue((mlir::Operation *)((char *)a2 + 56));
    if (!v22) {
      return result;
    }
  }
  uint64_t v23 = 16 * v22;
  uint64_t v24 = (uint64_t *)(result + 8);
  do
  {
    uint64_t v25 = *v24;
    v24 += 2;
    uint64_t result = (*(uint64_t (**)(_anonymous_namespace_::DummyAliasOperationPrinter *, uint64_t))(*(void *)this + 40))(this, v25);
    v23 -= 16;
  }
  while (v23);
  return result;
}

mlir::GenericProgramPoint *anonymous namespace'::DummyAliasOperationPrinter::printRegion(mlir::GenericProgramPoint *this, mlir::Region *a2, int a3, char a4)
{
  if (*(mlir::Region **)a2 != a2)
  {
    unint64_t v4 = (_anonymous_namespace_::AliasInitializer **)this;
    if ((*(unsigned char *)(*((void *)this + 2) + 32) & 8) != 0)
    {
      uint64_t v10 = *((void *)this + 8);
      if ((unint64_t)(*((void *)this + 7) - v10) > 4)
      {
        *(unsigned char *)(v10 + 4) = 125;
        *(_DWORD *)uint64_t v10 = 774778491;
        *((void *)this + 8) += 5;
      }
      else
      {
        unint64_t v11 = (mlir::GenericProgramPoint *)((char *)this + 32);
        return llvm::raw_ostream::write(v11, "{...}", 5uLL);
      }
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v6) {
        uint64_t v7 = (mlir::Block *)(v6 - 8);
      }
      else {
        uint64_t v7 = 0;
      }
      for (uint64_t i = *(mlir::Region **)(*((void *)a2 + 1) + 8); i != a2; uint64_t i = (mlir::Region *)*((void *)i + 1))
      {
        if (i) {
          uint64_t v9 = (mlir::Region *)((char *)i - 8);
        }
        else {
          uint64_t v9 = 0;
        }
      }
    }
  }
  return this;
}

uint64_t anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, void **a2, int a3)
{
  v60[6] = *MEMORY[0x1E4F143B8];
  v57[0] = 0;
  v57[16] = 0;
  *(_DWORD *)&v57[24] = 0;
  int64x2_t v58 = v60;
  uint64_t v59 = 0x600000000;
  v42[0] = a2;
  *(_OWORD *)&v42[1] = *(_OWORD *)v57;
  *(_OWORD *)((char *)&v42[2] + 4) = *(_OWORD *)&v57[12];
  int64x2_t v43 = &v45;
  uint64_t v44 = 0x600000000;
  char v8 = v7;
  if (v43 != &v45) {
    free(v43);
  }
  if (v58 != v60) {
    free(v58);
  }
  uint64_t v9 = (v6 - *((void *)a1 + 5)) >> 3;
  if (v8)
  {
    uint64_t v39 = 0x4EC4EC4EC4EC4EC5 * v9;
    v42[0] = &v42[3];
    *(_OWORD *)&v42[1] = xmmword_1810FE500;
    unint64_t v11 = *(void **)(*(void *)a1 + 32);
    uint64_t v10 = *(void **)(*(void *)a1 + 40);
    if (v11 != v10)
    {
      int v38 = a3;
      do
      {
        while (1)
        {
          int v12 = (*(uint64_t (**)(void, void **, uint64_t))(*(void *)*v11 + 24))(*v11, a2, (uint64_t)a1 + 112);
          if (v12) {
            break;
          }
          if (++v11 == v10) {
            goto LABEL_15;
          }
        }
        int v13 = v12;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v42, (uint64_t)a1 + 56);
        ++v11;
      }
      while (v13 != 2 && v11 != v10);
LABEL_15:
      uint64_t v15 = (void **)v42[0];
      if (v42[1])
      {
        *(void *)int8x16_t v57 = &v57[24];
        *(_OWORD *)&v57[8] = xmmword_181101A00;
        uint64_t v16 = sanitizeIdentifier((unsigned __int8 *)v42[0], (uint64_t)v42[1], (unsigned __int8 **)v57, "$_-", 3uLL, 0);
        size_t v18 = v17;
        if (v17)
        {
          uint64_t v19 = v16;
          uint64_t v20 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((uint64_t **)a1 + 1), v17, 0);
          memmove(v20, v19, v18);
        }
        else
        {
          uint64_t v20 = 0;
        }
        if (v38) {
          int v21 = -1073741823;
        }
        else {
          int v21 = 1073741825;
        }
        *(void *)(v6 + 8) = v20;
        *(void *)(v6 + 16) = v18;
        *(unsigned char *)(v6 + 24) = 1;
        *(_DWORD *)(v6 + 32) = v21;
        *(_DWORD *)(v6 + 48) = 0;
        if (*(unsigned char **)v57 != &v57[24]) {
          free(*(void **)v57);
        }
        uint64_t v15 = (void **)v42[0];
      }
      LOBYTE(a3) = v38;
      if (v15 != &v42[3]) {
        free(v15);
      }
    }
    *(void *)int8x16_t v57 = &v57[16];
    *(void *)&v57[8] = 0x600000000;
    memset(&v42[1], 0, 28);
    v42[0] = &unk_1EC99BB78;
    int64x2_t v43 = &v45;
    uint64_t v44 = 0;
    uint8x16_t v45 = a1;
    char v46 = a3;
    uint16x8_t v47 = v57;
    uint64_t v48 = 0;
    int v50 = 0;
    char v54 = 0;
    uint64_t v55 = 0;
    int v56 = 1;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v51 = 0;
    uint32x4_t v49 = &unk_1EC9A3838;
    uint64_t v22 = *a2;
    uint64_t v23 = (void **)**a2;
    if (v23[3] == &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      if ((_UNKNOWN *)v22[17] == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
        uint64_t v29 = a2;
      }
      else {
        uint64_t v29 = 0;
      }
      int8x16_t v41 = v29;
      uint64_t v24 = v39;
      if (v29)
      {
        uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v41);
        (*((void (**)(void **, uint64_t))v42[0] + 4))(v42, RHS);
        v40[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
        v40[1] = v31;
        if (*(_UNKNOWN **)(*(void *)v40[0] + 136) != &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
          || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40) & 1) == 0)
        {
          uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, RawStringData);
        }
        if (mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v41))
        {
          uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v41);
          (*((void (**)(void **, uint64_t))v42[0] + 5))(v42, MemorySpace);
        }
      }
      else
      {
        v40[0] = v42;
        mlir::AbstractAttribute::walkImmediateSubElements((uint64_t)v22);
      }
    }
    else
    {
      (*((void (**)(void, void **, void **))*v23 + 7))(**a2, a2, v42);
      uint64_t v24 = v39;
    }
    uint64_t v25 = v48;
    uint64_t v26 = *((void *)a1 + 5);
    uint64_t v27 = (void **)(v26 + 104 * v24 + 40);
    if (v27 == (void **)v57)
    {
LABEL_59:
      if (v25)
      {
        *(_DWORD *)(v26 + 104 * v24 + 32) = *(_DWORD *)(v26 + 104 * v24 + 32) & 0xC0000000 | (v25 + 1) & 0x3FFFFFFF;
        v42[0] = &unk_1EC99BB78;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        long long v36 = v43;
        if (v43 == &v45) {
          goto LABEL_62;
        }
      }
      else
      {
        v42[0] = &unk_1EC99BB78;
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v49);
        long long v36 = v43;
        if (v43 == &v45) {
LABEL_62:
        }
          llvm::deallocate_buffer((llvm *)v42[2], (void *)(8 * LODWORD(v42[4])));
      }
      free(v36);
      goto LABEL_62;
    }
    uint64_t v28 = *(void **)v57;
    if (*(unsigned char **)v57 != &v57[16])
    {
      if (*(void *)(v26 + 104 * v24 + 40) != v26 + 104 * v24 + 56)
      {
        free(*v27);
        uint64_t v28 = *(void **)v57;
      }
      *uint64_t v27 = v28;
      *(void *)(v26 + 104 * v24 + 48) = *(void *)&v57[8];
      *(void *)int8x16_t v57 = &v57[16];
      *(_DWORD *)&v57[12] = 0;
      goto LABEL_58;
    }
    unint64_t v34 = *(unsigned int *)&v57[8];
    uint64_t v35 = *(unsigned int *)(v26 + 104 * v24 + 48);
    if (v35 >= *(_DWORD *)&v57[8])
    {
      if (*(_DWORD *)&v57[8]) {
        memmove(*v27, &v57[16], 8 * *(unsigned int *)&v57[8]);
      }
      goto LABEL_57;
    }
    if (*(_DWORD *)(v26 + 104 * v24 + 52) >= *(_DWORD *)&v57[8])
    {
      if (v35)
      {
        memmove(*v27, &v57[16], 8 * v35);
        goto LABEL_55;
      }
    }
    else
    {
      *(_DWORD *)(v26 + 104 * v24 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 104 * v24 + 40, (void *)(v26 + 104 * v24 + 56), v34, 8);
    }
    uint64_t v35 = 0;
LABEL_55:
    if (v35 != *(unsigned int *)&v57[8]) {
      memcpy((char *)*v27 + 8 * v35, (const void *)(*(void *)v57 + 8 * v35), 8 * *(unsigned int *)&v57[8] - 8 * v35);
    }
LABEL_57:
    *(_DWORD *)(v26 + 104 * v24 + 48) = v34;
LABEL_58:
    *(_DWORD *)&v57[8] = 0;
    goto LABEL_59;
  }
  if ((a3 & 1) == 0) {
  return *(_DWORD *)(v6 + 32) & 0x3FFFFFFF;
  }
}

uint64_t llvm::MapVector<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>>::insert(uint64_t a1, uint64_t *a2)
{
  unint64_t v5 = (long long *)(a2 + 1);
  uint64_t v4 = *a2;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6) {
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
  uint64_t v9 = (void *)(*(void *)a1 + 16 * v8);
  uint64_t v10 = *v9;
  if (v4 == *v9) {
    return *(void *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
  }
  uint64_t v22 = 0;
  int v23 = 1;
  while (v10 != -4096)
  {
    if (v22) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v10 == -8192;
    }
    if (v24) {
      uint64_t v22 = v9;
    }
    int v25 = v8 + v23++;
    uint64_t v8 = v25 & (v6 - 1);
    uint64_t v9 = (void *)(v7 + 16 * v8);
    uint64_t v10 = *v9;
    if (v4 == *v9) {
      return *(void *)(a1 + 24) + 104 * *(unsigned int *)(v7 + 16 * v8 + 8);
    }
  }
  uint64_t v26 = (uint64_t)(v22 ? v22 : v9);
  int v27 = *(_DWORD *)(a1 + 8);
  if (4 * v27 + 4 < 3 * v6)
  {
    if (v6 + ~v27 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_26:
    v6 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v6);
  int v28 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v29 = v28 & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v26 = *(void *)a1 + 16 * v29;
  uint64_t v30 = *(void *)v26;
  if (v4 == *(void *)v26)
  {
LABEL_28:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v46 = 0;
  int v47 = 1;
  while (v30 != -4096)
  {
    if (v46) {
      BOOL v48 = 0;
    }
    else {
      BOOL v48 = v30 == -8192;
    }
    if (v48) {
      uint64_t v46 = v26;
    }
    unsigned int v49 = v29 + v47++;
    unsigned int v29 = v49 & v28;
    uint64_t v26 = *(void *)a1 + 16 * (v49 & v28);
    uint64_t v30 = *(void *)v26;
    if (v4 == *(void *)v26) {
      goto LABEL_28;
    }
  }
  if (v46) {
    uint64_t v26 = v46;
  }
LABEL_6:
  uint64_t v12 = *(void *)v26;
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(void *)uint64_t v26 = v4;
  *(_DWORD *)(v26 + 8) = 0;
  int v13 = (void *)(a1 + 24);
  unsigned int v14 = *(_DWORD *)(a1 + 32);
  unsigned int v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v26 + 8) = v14;
  if (v14 >= v15)
  {
    unint64_t v50 = 0;
    int v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v13, (void *)(a1 + 40), 0, 104, &v50);
    uint64_t v31 = &v21[104 * *(unsigned int *)(a1 + 32)];
    *(void *)uint64_t v31 = *a2;
    long long v32 = *v5;
    long long v33 = *(long long *)((char *)v5 + 12);
    *((void *)v31 + 5) = v31 + 56;
    uint64_t v34 = (uint64_t)(v31 + 40);
    *(_OWORD *)(v34 - 20) = v33;
    *(_OWORD *)(v34 - 32) = v32;
    *(void *)(v34 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v34, (uint64_t)(a2 + 5));
    }
    uint64_t v35 = *(char **)(a1 + 24);
    int v36 = *(_DWORD *)(a1 + 32);
    if (v36)
    {
      unint64_t v37 = &v35[104 * v36];
      int v38 = v21 + 40;
      uint64_t v39 = (uint64_t)(v35 + 40);
      do
      {
        uint64_t v40 = v39 - 40;
        *(v38 - 5) = *(void *)(v39 - 40);
        long long v41 = *(_OWORD *)(v39 - 32);
        *(_OWORD *)((char *)v38 - 20) = *(_OWORD *)(v39 - 20);
        *((_OWORD *)v38 - 2) = v41;
        *int v38 = v38 + 2;
        v38[1] = 0x600000000;
        if (*(_DWORD *)(v39 + 8)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v38, v39);
        }
        v38 += 13;
        v39 += 104;
      }
      while ((char *)(v40 + 104) != v37);
      uint64_t v35 = *(char **)(a1 + 24);
      unsigned int v42 = *(_DWORD *)(a1 + 32);
      if (v42)
      {
        uint64_t v43 = 104 * v42;
        do
        {
          uint64_t v44 = *(char **)&v35[v43 - 64];
          if (&v35[v43 - 48] != v44) {
            free(v44);
          }
          v43 -= 104;
        }
        while (v43);
        uint64_t v35 = *(char **)(a1 + 24);
      }
    }
    int v45 = v50;
    if (v35 != (char *)(a1 + 40)) {
      free(v35);
    }
    *(void *)(a1 + 24) = v21;
    unsigned int v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    *(_DWORD *)(a1 + 36) = v45;
  }
  else
  {
    uint64_t v16 = (void *)(*v13 + 104 * v14);
    *uint64_t v16 = *a2;
    long long v17 = *v5;
    long long v18 = *(long long *)((char *)v5 + 12);
    v16[5] = v16 + 7;
    uint64_t v19 = (uint64_t)(v16 + 5);
    *(_OWORD *)(v19 - 20) = v18;
    *(_OWORD *)(v19 - 32) = v17;
    *(void *)(v19 + 8) = 0x600000000;
    if (*((_DWORD *)a2 + 12)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v19, (uint64_t)(a2 + 5));
    }
    unsigned int v20 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v20;
    int v21 = *(char **)(a1 + 24);
  }
  return (uint64_t)&v21[104 * v20 - 104];
}

_anonymous_namespace_::AliasInitializer *anonymous namespace'::AliasInitializer::markAliasNonDeferrable(_anonymous_namespace_::AliasInitializer *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = v2 + 104 * a2;
  int v6 = *(_DWORD *)(v3 + 32);
  uint64_t v4 = (int *)(v3 + 32);
  int v5 = v6;
  if (v6 < 0)
  {
    *uint64_t v4 = v5 & 0x7FFFFFFF;
    uint64_t v7 = v2 + 104 * a2;
    uint64_t v8 = *(unsigned int *)(v7 + 48);
    if (v8)
    {
      uint64_t v9 = this;
      uint64_t v10 = *(unint64_t **)(v7 + 40);
      uint64_t v11 = 8 * v8;
      do
      {
        unint64_t v12 = *v10++;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return this;
}

void anonymous namespace'::DummyAliasDialectAsmPrinter::~DummyAliasDialectAsmPrinter(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  *(void *)this = &unk_1EC99BB78;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v2 != (char *)this + 56) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

{
  char *v2;

  *(void *)this = &unk_1EC99BB78;
  llvm::raw_null_ostream::~raw_null_ostream((_anonymous_namespace_::DummyAliasDialectAsmPrinter *)((char *)this + 88));
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v2 != (char *)this + 56) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 2), (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_18041AAF4()
{
  return v0;
}

unsigned __int8 *sanitizeIdentifier(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3, void *__s, size_t __n, char a6)
{
  uint64_t v10 = a1;
  v24[0] = a1;
  v24[1] = a2;
  v23[0] = __s;
  v23[1] = __n;
  v22[0] = v24;
  v22[1] = v23;
  void v22[2] = a3;
  if (((char)*a1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *a1 + 60) & 0x400) != 0)
  {
    uint64_t v16 = a3[1];
    if (v16 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v16 + 1), 1);
      uint64_t v16 = a3[1];
    }
    v16[(void)*a3] = 95;
    ++a3[1];
LABEL_24:
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    return *a3;
  }
  if ((a6 & 1) != 0 || (char)a1[a2 - 1] < 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a1[a2 - 1] + 60) & 0x400) == 0)
  {
    if (a2)
    {
      if (__n)
      {
        uint64_t v11 = 0;
        while (1)
        {
          int v12 = (char)v10[v11];
          if ((v12 - 48) >= 0xA && ((v10[v11] & 0xDF) - 65) >= 0x1Au)
          {
            unsigned int v14 = memchr(__s, v12, __n);
            if (!v14 || v14 - (unsigned char *)__s == -1) {
              break;
            }
          }
          if (a2 == ++v11) {
            return v10;
          }
        }
      }
      else
      {
        uint64_t v18 = 0;
        while (1)
        {
          int v19 = a1[v18];
          if ((v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 > 0x19) {
            break;
          }
          if (a2 == ++v18) {
            return v10;
          }
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(v22);
    int v21 = a3[1];
    if (v21 + 1 > a3[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, (unint64_t)(v21 + 1), 1);
      int v21 = a3[1];
    }
    v21[(void)*a3] = 95;
    uint64_t v10 = *a3;
    ++a3[1];
  }
  return v10;
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = (const void *)(a2 + 24);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      unint64_t v7 = *(void *)(a2 + 8);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7) {
          memmove(*(void **)a1, v4, *(void *)(a2 + 8));
        }
      }
      else
      {
        if (*(void *)(a1 + 16) >= v7)
        {
          if (v8) {
            memmove(*(void **)a1, v4, *(void *)(a1 + 8));
          }
        }
        else
        {
          *(void *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v7, 1);
          unint64_t v8 = 0;
        }
        uint64_t v9 = *(void *)(a2 + 8);
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + v8), (const void *)(*(void *)a2 + v8), *(void *)a2 + v9 - (*(void *)a2 + v8));
        }
      }
      *(void *)(a1 + 8) = v7;
    }
    else
    {
      int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 24)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = v5;
    }
    *(void *)(a2 + 8) = 0;
  }
  return a1;
}

void sanitizeIdentifier(llvm::StringRef,llvm::SmallString<16u> &,llvm::StringRef,BOOL)::$_0::operator()(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unsigned char **)*a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v1;
    int v5 = &(*v1)[v2];
    do
    {
      int v8 = (char)*v4;
      int v9 = *v4;
      BOOL v10 = (v8 - 48) >= 0xA && ((*v4 & 0xDF) - 65) >= 0x1Au;
      if (v10
        && ((uint64_t v11 = a1[1], (v12 = *(void *)(v11 + 8)) == 0)
         || ((v13 = *(unsigned char **)v11, (unsigned int v14 = memchr(*(void **)v11, (char)*v4, v12)) != 0)
           ? (BOOL v15 = v14 - v13 == -1)
           : (BOOL v15 = 1),
             v15)))
      {
        int v6 = (void *)a1[2];
        if (v9 != 32)
        {
          if (v9)
          {
            unint64_t v17 = v8;
            uint64_t v18 = 16;
            do
            {
              v33[v18--] = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
              BOOL v19 = v17 > 0xF;
              v17 >>= 4;
            }
            while (v19);
            uint64_t v20 = v18 + 1;
            size_t v21 = 16 - v18;
            if ((unint64_t)(16 - v18) >= 0x7FFFFFFFFFFFFFF8) {
              abort();
            }
          }
          else
          {
            v33[16] = 48;
            uint64_t v20 = 16;
            size_t v21 = 1;
          }
          if (v21 > 0x16)
          {
            uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v23 = v21 | 7;
            }
            uint64_t v24 = v23 + 1;
            p_dst = operator new(v23 + 1);
            size_t v31 = v21;
            int64_t v32 = v24 | 0x8000000000000000;
            __dst = p_dst;
            if (v20 == 17) {
              goto LABEL_36;
            }
          }
          else
          {
            HIBYTE(v32) = v21;
            p_dst = &__dst;
            if (v20 == 17) {
              goto LABEL_36;
            }
          }
          memcpy(p_dst, &v33[v20], v21);
          p_dst += v21;
LABEL_36:
          unsigned char *p_dst = 0;
          int v25 = SHIBYTE(v32);
          uint64_t v26 = __dst;
          if (v32 >= 0) {
            int v27 = &__dst;
          }
          else {
            int v27 = __dst;
          }
          if (v32 >= 0) {
            size_t v28 = HIBYTE(v32);
          }
          else {
            size_t v28 = v31;
          }
          uint64_t v29 = v6[1];
          if (v6[2] < v29 + v28)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v29 + v28, 1);
            uint64_t v29 = v6[1];
          }
          if (v28)
          {
            memcpy((void *)(*v6 + v29), v27, v28);
            uint64_t v29 = v6[1];
          }
          v6[1] = v29 + v28;
          if (v25 < 0) {
            operator delete(v26);
          }
          goto LABEL_7;
        }
        uint64_t v16 = v6[1];
        if ((unint64_t)(v16 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v16 + 1, 1);
          uint64_t v16 = v6[1];
        }
        *(unsigned char *)(*v6 + v16) = 95;
      }
      else
      {
        int v6 = (void *)a1[2];
        uint64_t v7 = v6[1];
        if ((unint64_t)(v7 + 1) > v6[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[2], v6 + 3, v7 + 1, 1);
          uint64_t v7 = v6[1];
        }
        *(unsigned char *)(*v6 + v7) = v9;
      }
      ++v6[1];
LABEL_7:
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_18041B100()
{
  operator delete(v0);
}

uint64_t anonymous namespace'::DummyAliasDialectAsmPrinter::getStream(_anonymous_namespace_::DummyAliasDialectAsmPrinter *this)
{
  return (uint64_t)this + 88;
}

void anonymous namespace'::DummyAliasDialectAsmPrinter::printType(uint64_t a1, void **a2)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(void *)(*(void *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(void *)(a1 + 80)) {
    *(void *)(a1 + 80) = v3;
  }
}

void anonymous namespace'::DummyAliasDialectAsmPrinter::printAttribute(uint64_t a1, const char *a2)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(void *)(*(void *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(void *)(a1 + 80)) {
    *(void *)(a1 + 80) = v3;
  }
}

void anonymous namespace'::DummyAliasDialectAsmPrinter::printAttributeWithoutType(uint64_t a1, const char *a2)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 72), (void *)(v6 + 16), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(void *)(*(void *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  if (v3 > *(void *)(a1 + 80)) {
    *(void *)(a1 + 80) = v3;
  }
}

uint64_t anonymous namespace'::DummyAliasDialectAsmPrinter::pushCyclicPrinting(int64x2_t *this, uint64_t a2)
{
  uint64_t v7 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(this + 1, &v7, (uint64_t)v8);
  uint64_t v3 = v9;
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v5 = this[3].u32[0];
    if (v5 >= this[3].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[2].i64[1], &this[3].u64[1], v5 + 1, 8);
      LODWORD(v5) = this[3].i32[0];
    }
    *(void *)(this[2].i64[1] + 8 * v5) = v4;
    ++this[3].i32[0];
  }
  return v3;
}

int32x2_t *anonymous namespace'::DummyAliasDialectAsmPrinter::popCyclicPrinting(int32x2_t *this)
{
  __int32 v1 = this[4].i32[0];
  if (v1)
  {
    int32x2_t v2 = this[2];
    uint64_t v3 = this[6].u32[0];
    uint64_t v4 = *(void *)(*(void *)&this[5] + 8 * v3 - 8);
    __int32 v5 = v1 - 1;
    LODWORD(v6) = ((v4 >> 4) ^ (v4 >> 9)) & (v1 - 1);
    uint64_t v7 = (uint64_t *)(*(void *)&v2 + 8 * v6);
    uint64_t v8 = *v7;
    if (v4 == *v7)
    {
LABEL_3:
      *uint64_t v7 = -8192;
      this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v9 = 1;
      while (v8 != -4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & v5;
        uint64_t v8 = *(void *)(*(void *)&v2 + 8 * v6);
        if (v4 == v8)
        {
          uint64_t v7 = (uint64_t *)(*(void *)&v2 + 8 * v6);
          goto LABEL_3;
        }
      }
    }
    this[6].i32[0] = v3 - 1;
  }
  else
  {
    --this[6].i32[0];
  }
  return this;
}

uint64_t anonymous namespace'::DummyAliasDialectAsmPrinter::printAlias(uint64_t a1)
{
  return 1;
}

{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return 1;
}

uint64_t anonymous namespace'::AliasInitializer::visit(_anonymous_namespace_::AliasInitializer *a1, const char *a2, int a3, char a4)
{
  uint64_t v7 = a1;
  v110[6] = *MEMORY[0x1E4F143B8];
  v107[0] = 0;
  v107[16] = 0;
  *(_DWORD *)&v107[24] = 0;
  uint64_t v108 = v110;
  uint64_t v109 = 0x600000000;
  v92[0] = (void *)a2;
  *(_OWORD *)&v92[1] = *(_OWORD *)v107;
  *(_OWORD *)((char *)&v92[2] + 4) = *(_OWORD *)&v107[12];
  uint64_t v93 = &v95;
  uint64_t v94 = 0x600000000;
  char v10 = v9;
  if (v93 != &v95) {
    free(v93);
  }
  if (v108 != v110) {
    free(v108);
  }
  uint64_t v11 = (v8 - *((void *)v7 + 5)) >> 3;
  if (v10)
  {
    char v81 = a4;
    uint64_t v82 = 0x4EC4EC4EC4EC4EC5 * v11;
    v92[0] = &v92[3];
    *(_OWORD *)&v92[1] = xmmword_1810FE500;
    uint64_t v12 = (uint64_t)v7 + 56;
    int v13 = *(void **)(*(void *)v7 + 32);
    unsigned int v14 = *(void **)(*(void *)v7 + 40);
    if (v13 != v14)
    {
      char v80 = (uint64_t **)v7;
      BOOL v15 = (char *)v7 + 112;
      do
      {
        while (1)
        {
          int v16 = (*(uint64_t (**)(void, const char *, char *))(*(void *)*v13 + 16))(*v13, a2, v15);
          if (v16) {
            break;
          }
          if (++v13 == v14) {
            goto LABEL_15;
          }
        }
        int v17 = v16;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)v92, v12);
        ++v13;
      }
      while (v17 != 2 && v13 != v14);
LABEL_15:
      BOOL v19 = (void **)v92[0];
      if (v92[1])
      {
        *(void *)uint64_t v107 = &v107[24];
        *(_OWORD *)&v107[8] = xmmword_181101A00;
        uint64_t v20 = sanitizeIdentifier((unsigned __int8 *)v92[0], (uint64_t)v92[1], (unsigned __int8 **)v107, "$_-", 3uLL, 0);
        size_t v22 = v21;
        if (v21)
        {
          uint64_t v23 = v20;
          uint64_t v24 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v80[1], v21, 0);
          memmove(v24, v23, v22);
        }
        else
        {
          uint64_t v24 = 0;
        }
        if (a3) {
          int v25 = -2147483647;
        }
        else {
          int v25 = 1;
        }
        *(void *)(v8 + 8) = v24;
        *(void *)(v8 + 16) = v22;
        *(unsigned char *)(v8 + 24) = 1;
        *(_DWORD *)(v8 + 32) = v25;
        *(_DWORD *)(v8 + 48) = 0;
        if (*(unsigned char **)v107 != &v107[24]) {
          free(*(void **)v107);
        }
        BOOL v19 = (void **)v92[0];
      }
      uint64_t v7 = (_anonymous_namespace_::AliasInitializer *)v80;
      if (v19 != &v92[3]) {
        free(v19);
      }
    }
    *(void *)uint64_t v107 = &v107[16];
    *(void *)&v107[8] = 0x600000000;
    memset(&v92[1], 0, 28);
    v92[0] = &unk_1EC99BB78;
    uint64_t v93 = &v95;
    uint64_t v94 = 0;
    uint64_t v95 = v7;
    char v96 = a3;
    uint64_t v97 = v107;
    uint64_t v98 = 0;
    int v100 = 0;
    char v104 = 0;
    uint64_t v105 = 0;
    int v106 = 1;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    uint64_t v99 = &unk_1EC9A3838;
    uint64_t v26 = **(void ****)a2;
    if (v26[3] == &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id)
    {
      uint64_t v29 = *(void **)(*(void *)a2 + 136);
      uint64_t v27 = v82;
      if (v29 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id
        || v29 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id
        || v29 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
        || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
        || v29 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id
        || v29 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        goto LABEL_51;
      }
      {
        BOOL v90 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
        unint64_t v91 = 68;
        unint64_t v73 = llvm::StringRef::find((uint64_t *)&v90, "DesiredTypeName = ", 0x12uLL, 0);
        if (v91 >= v73) {
          unint64_t v74 = v73;
        }
        else {
          unint64_t v74 = v91;
        }
        uint64_t v75 = &v90[v74];
        unint64_t v76 = v91 - v74;
        if (v91 - v74 >= 0x12) {
          uint64_t v77 = 18;
        }
        else {
          uint64_t v77 = v91 - v74;
        }
        unint64_t v78 = v76 - v77;
        if (v78 >= v78 - 1) {
          uint64_t v79 = v78 - 1;
        }
        else {
          uint64_t v79 = v78;
        }
        mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      }
      if (v29 == (void *)mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id) {
        uint64_t v30 = a2;
      }
      else {
        uint64_t v30 = 0;
      }
      BOOL v90 = v30;
      if (v30)
      {
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90);
        (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, Value);
      }
      else
      {
        unsigned int v42 = *(void **)(*(void *)a2 + 136);
        if (v42 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
          uint64_t v43 = a2;
        }
        else {
          uint64_t v43 = 0;
        }
        int v89 = v43;
        if (v43)
        {
          uint64_t v44 = v7;
          uint64_t v45 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
          if (v46)
          {
            int v47 = (mlir::CallGraphNode *)v45;
            BOOL v48 = (mlir::CallGraphNode *)(v45 + 16 * v46);
            do
            {
              uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(v47);
              (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, CallableRegion);
              (*((void (**)(void **, void))v92[0] + 5))(v92, *((void *)v47 + 1));
              int v47 = (mlir::CallGraphNode *)((char *)v47 + 16);
            }
            while (v47 != v48);
          }
        }
        else
        {
          if (v42 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            unint64_t v50 = a2;
          }
          else {
            unint64_t v50 = 0;
          }
          uint64_t v88 = v50;
          if (v50)
          {
            uint64_t v44 = v7;
            uint64_t v51 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v88);
            if (v52)
            {
              uint64_t v53 = (uint64_t *)v51;
              uint64_t v54 = 8 * v52;
              do
              {
                uint64_t v55 = *v53++;
                (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, v55);
                v54 -= 8;
              }
              while (v54);
            }
          }
          else
          {
            if (v42 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
              int v56 = a2;
            }
            else {
              int v56 = 0;
            }
            uint64_t v87 = v56;
            if (v56)
            {
              uint64_t v44 = v7;
              uint64_t v57 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v87);
              (*((void (**)(void **, uint64_t))v92[0] + 4))(v92, v57);
            }
            else
            {
              if (v42 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id) {
                int64x2_t v58 = a2;
              }
              else {
                int64x2_t v58 = 0;
              }
              uint64_t v86 = v58;
              if (v58)
              {
                uint64_t v44 = v7;
                uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v86);
                (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, RHS);
              }
              else
              {
                if (v42 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id) {
                  uint64_t v60 = a2;
                }
                else {
                  uint64_t v60 = 0;
                }
                unint64_t v85 = v60;
                if (v60)
                {
                  if (*(_UNKNOWN **)(*(void *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v85)
                                    + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
                  {
                    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v85);
                    (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, LHS);
                  }
                }
                else
                {
                  uint64_t v62 = v7;
                  if (v42 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id) {
                    int8x16_t v63 = a2;
                  }
                  else {
                    int8x16_t v63 = 0;
                  }
                  std::string v84 = v63;
                  if (v63)
                  {
                    uint64_t v64 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v84);
                    (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, v64);
                    uint64_t v65 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v84);
                    (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, v65);
                  }
                  else
                  {
                    if (v42 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id) {
                      size_t v66 = a2;
                    }
                    else {
                      size_t v66 = 0;
                    }
                    uint64_t v83 = v66;
                    if (v66)
                    {
                      uint64_t v67 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v83);
                      if (v67) {
                        (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, v67);
                      }
                      uint64_t v68 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
                      if (v69)
                      {
                        uint64_t v70 = (uint64_t *)v68;
                        uint64_t v71 = 8 * v69;
                        do
                        {
                          uint64_t v72 = *v70++;
                          (*((void (**)(void **, uint64_t))v92[0] + 5))(v92, v72);
                          v71 -= 8;
                        }
                        while (v71);
                      }
                    }
                  }
                  uint64_t v27 = v82;
                  uint64_t v7 = v62;
                }
                uint64_t v44 = v7;
              }
            }
          }
        }
        uint64_t v7 = v44;
      }
    }
    else
    {
      (*((void (**)(void **, const char *, void **))*v26 + 5))(v26, a2, v92);
      uint64_t v27 = v82;
    }
    if ((v81 & 1) == 0)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a2 + 8))
      {
        uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a2 + 8);
        BOOL v90 = a2;
        unint64_t v91 = v28;
        if (a2)
        {
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
          if (*(_UNKNOWN **)(*(void *)canMapOperands + 136) != &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id) {
            (*((void (**)(void **, uint64_t))v92[0] + 4))(v92, canMapOperands);
          }
        }
      }
      else
      {
        BOOL v90 = 0;
        unint64_t v91 = 0;
      }
    }
LABEL_51:
    long long v33 = v7;
    uint64_t v34 = v98;
    uint64_t v35 = *((void *)v33 + 5);
    int v36 = (void **)(v35 + 104 * v27 + 40);
    if (v36 == (void **)v107) {
      goto LABEL_68;
    }
    unint64_t v37 = *(void **)v107;
    if (*(unsigned char **)v107 != &v107[16])
    {
      if (*(void *)(v35 + 104 * v27 + 40) != v35 + 104 * v27 + 56)
      {
        free(*v36);
        unint64_t v37 = *(void **)v107;
      }
      *int v36 = v37;
      *(void *)(v35 + 104 * v27 + 48) = *(void *)&v107[8];
      *(void *)uint64_t v107 = &v107[16];
      *(_DWORD *)&v107[12] = 0;
      goto LABEL_67;
    }
    unint64_t v38 = *(unsigned int *)&v107[8];
    uint64_t v39 = *(unsigned int *)(v35 + 104 * v27 + 48);
    if (v39 >= *(_DWORD *)&v107[8])
    {
      if (*(_DWORD *)&v107[8]) {
        memmove(*v36, &v107[16], 8 * *(unsigned int *)&v107[8]);
      }
      goto LABEL_66;
    }
    if (*(_DWORD *)(v35 + 104 * v27 + 52) >= *(_DWORD *)&v107[8])
    {
      if (v39)
      {
        memmove(*v36, &v107[16], 8 * v39);
        goto LABEL_64;
      }
    }
    else
    {
      *(_DWORD *)(v35 + 104 * v27 + 48) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v35 + 104 * v27 + 40, (void *)(v35 + 104 * v27 + 56), v38, 8);
    }
    uint64_t v39 = 0;
LABEL_64:
    if (v39 != *(unsigned int *)&v107[8]) {
      memcpy((char *)*v36 + 8 * v39, (const void *)(*(void *)v107 + 8 * v39), 8 * *(unsigned int *)&v107[8] - 8 * v39);
    }
LABEL_66:
    *(_DWORD *)(v35 + 104 * v27 + 48) = v38;
LABEL_67:
    *(_DWORD *)&v107[8] = 0;
LABEL_68:
    if (v34)
    {
      *(_DWORD *)(v35 + 104 * v27 + 32) = *(_DWORD *)(v35 + 104 * v27 + 32) & 0xC0000000 | (v34 + 1) & 0x3FFFFFFF;
      v92[0] = &unk_1EC99BB78;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v99);
      uint64_t v40 = v93;
      if (v93 == &v95) {
        goto LABEL_71;
      }
    }
    else
    {
      v92[0] = &unk_1EC99BB78;
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v99);
      uint64_t v40 = v93;
      if (v93 == &v95) {
LABEL_71:
      }
        llvm::deallocate_buffer((llvm *)v92[2], (void *)(8 * LODWORD(v92[4])));
    }
    free(v40);
    goto LABEL_71;
  }
  if ((a3 & 1) == 0) {
  return *(_DWORD *)(v8 + 32) & 0x3FFFFFFF;
  }
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplENS1_4TypeEEUlT_E_EEvlS2_(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(**(void **)result + 104))();
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeEEE11callback_fnIZN12_GLOBAL__N_127DummyAliasDialectAsmPrinter30printAndVisitNestedAliasesImplES2_EUlT_E_EEvlS2_(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(**(void **)result + 112))();
  }
  return result;
}

mlir::GenericProgramPoint *anonymous namespace'::DummyAliasOperationPrinter::print(_anonymous_namespace_::AliasInitializer **this, mlir::Block *a2, int a3, char a4)
{
  if (a3)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 6);
    uint64_t v8 = *((void *)a2 + 7) - (void)v7;
    if (v8)
    {
      uint64_t v9 = 8 * (v8 >> 3);
      do
      {
        uint64_t v10 = *v7;
        (*((void (**)(_anonymous_namespace_::AliasInitializer **, unint64_t))*this + 4))(this, *(void *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (*((unsigned char *)this[2] + 32)) {
        ++v7;
        }
        v9 -= 8;
      }
      while (v9);
    }
  }
  uint64_t v12 = (mlir::Block *)((char *)a2 + 32);
  uint64_t result = (mlir::GenericProgramPoint *)*((void *)a2 + 4);
  if (result == (mlir::Block *)((char *)a2 + 32))
  {
    unsigned int v14 = (mlir::GenericProgramPoint *)*((void *)a2 + 5);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    uint64_t result = (mlir::GenericProgramPoint *)mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((void *)(v13 + 48));
    unsigned int v14 = (mlir::GenericProgramPoint *)*((void *)a2 + 5);
    if (result && (a4 & 1) == 0) {
      uint64_t v12 = *(mlir::GenericProgramPoint **)v12;
    }
  }
  while (v14 != v12)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v14);
    uint64_t result = (mlir::GenericProgramPoint *)(*((uint64_t (**)(_anonymous_namespace_::AliasInitializer **, uint64_t))*this
                                           + 26))(this, v15);
    unsigned int v14 = (mlir::GenericProgramPoint *)*((void *)v14 + 1);
  }
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(void *a1)
{
  __int32 v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    __int32 v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      __int32 v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[7]);
}

void std::__stable_sort<std::_ClassicAlgPolicy,anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v86[6] = *MEMORY[0x1E4F143B8];
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      int v16 = (uint64_t *)a4;
      unint64_t v17 = a3 >> 1;
      uint64_t v18 = (void *)(a1 + 104 * (a3 >> 1));
      unint64_t v19 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        return;
      }
      uint64_t v54 = (uint64_t)&v16[13 * v17];
      uint64_t v55 = &v16[13 * a3];
      uint64_t v56 = v54;
      uint64_t v57 = v16;
      __src = v16;
      while (1)
      {
        if ((uint64_t *)v56 == v55)
        {
          if (v57 != (uint64_t *)v54)
          {
            uint64_t v70 = 0;
            do
            {
              uint64_t v71 = v6 + v70 * 8;
              uint64_t v72 = &v57[v70];
              *(void *)uint64_t v71 = v57[v70];
              long long v73 = *(_OWORD *)&v57[v70 + 1];
              *(_OWORD *)(v71 + 20) = *(_OWORD *)((char *)&v57[v70 + 2] + 4);
              *(_OWORD *)(v71 + 8) = v73;
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v70 * 8 + 40, (uint64_t)&v57[v70 + 5]);
              v70 += 13;
            }
            while (v72 + 13 != (uint64_t *)v54);
          }
LABEL_132:
          if (v16)
          {
            unint64_t v78 = a3;
            uint64_t v79 = v16 + 7;
            do
            {
              char v80 = (uint64_t *)*(v79 - 2);
              if (v79 != v80) {
                free(v80);
              }
              v79 += 13;
              --v78;
            }
            while (v78);
          }
          return;
        }
        uint64_t v59 = (const void **)(v56 + 8);
        uint64_t v60 = (const void **)(v57 + 1);
        int v61 = *(_DWORD *)(v56 + 32);
        unsigned int v62 = *((_DWORD *)v57 + 8);
        if ((v61 & 0x3FFFFFFF) != (v62 & 0x3FFFFFFF))
        {
          if ((v61 & 0x3FFFFFFFu) >= (v62 & 0x3FFFFFFF)) {
            goto LABEL_101;
          }
          goto LABEL_117;
        }
        unsigned int v63 = v61 & 0x40000000;
        if (((v62 >> 30) & 1) != v63 >> 30) {
          break;
        }
        if (!*((unsigned char *)v57 + 24)) {
          goto LABEL_101;
        }
        if (*(unsigned char *)(v56 + 24))
        {
          unint64_t v64 = *(void *)(v56 + 16);
          unint64_t v65 = v57[2];
          if (v65 >= v64) {
            size_t v66 = *(void *)(v56 + 16);
          }
          else {
            size_t v66 = v57[2];
          }
          if (v66 && (int v67 = memcmp(*v59, *v60, v66)) != 0)
          {
            int v16 = __src;
            if (v67 < 0) {
              goto LABEL_117;
            }
          }
          else
          {
            BOOL v69 = v64 >= v65;
            int v16 = __src;
            if (!v69) {
              goto LABEL_117;
            }
          }
LABEL_101:
          *(void *)uint64_t v6 = *v57;
          long long v58 = *(_OWORD *)v60;
          *(_OWORD *)(v6 + 20) = *(_OWORD *)((char *)v57 + 20);
          *(_OWORD *)(v6 + 8) = v58;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, (uint64_t)(v57 + 5));
          v57 += 13;
          v6 += 104;
          if (v57 == (uint64_t *)v54) {
            goto LABEL_129;
          }
        }
        else
        {
LABEL_117:
          *(void *)uint64_t v6 = *(void *)v56;
          long long v68 = *(_OWORD *)v59;
          *(_OWORD *)(v6 + 20) = *(_OWORD *)(v56 + 20);
          *(_OWORD *)(v6 + 8) = v68;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + 40, v56 + 40);
          v56 += 104;
          v6 += 104;
          if (v57 == (uint64_t *)v54)
          {
LABEL_129:
            if ((uint64_t *)v56 != v55)
            {
              uint64_t v74 = 0;
              do
              {
                uint64_t v75 = v56 + v74;
                uint64_t v76 = v6 + v74;
                *(void *)uint64_t v76 = *(void *)(v56 + v74);
                long long v77 = *(_OWORD *)(v56 + v74 + 8);
                *(_OWORD *)(v76 + 20) = *(_OWORD *)(v56 + v74 + 20);
                *(_OWORD *)(v76 + 8) = v77;
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v6 + v74 + 40, v56 + v74 + 40);
                v74 += 104;
              }
              while ((uint64_t *)(v75 + 104) != v55);
            }
            goto LABEL_132;
          }
        }
      }
      if (!v63) {
        goto LABEL_101;
      }
      goto LABEL_117;
    }
    if ((uint64_t *)a1 == a2) {
      return;
    }
    uint64_t v20 = (void *)(a1 + 104);
    if ((uint64_t *)(a1 + 104) == a2) {
      return;
    }
    uint64_t v21 = 0;
    size_t v22 = (void *)a1;
LABEL_26:
    uint64_t v23 = v22;
    size_t v22 = v20;
    int v24 = *((_DWORD *)v23 + 34);
    unsigned int v25 = *((_DWORD *)v23 + 8);
    if ((v24 & 0x3FFFFFFF) == (v25 & 0x3FFFFFFF))
    {
      unsigned int v26 = v24 & 0x40000000;
      if (((v25 >> 30) & 1) == v26 >> 30)
      {
        if (!*((unsigned char *)v23 + 24)) {
          goto LABEL_25;
        }
        if (*((unsigned char *)v23 + 128))
        {
          unint64_t v27 = v23[15];
          unint64_t v28 = v23[2];
          if (v28 >= v27) {
            size_t v29 = v23[15];
          }
          else {
            size_t v29 = v23[2];
          }
          if (v29 && (int v30 = memcmp((const void *)v23[14], (const void *)v23[1], v29)) != 0)
          {
            if ((v30 & 0x80000000) == 0) {
              goto LABEL_25;
            }
          }
          else if (v27 >= v28)
          {
            goto LABEL_25;
          }
        }
      }
      else if (!v26)
      {
        goto LABEL_25;
      }
    }
    else if ((v24 & 0x3FFFFFFFu) >= (v25 & 0x3FFFFFFF))
    {
      goto LABEL_25;
    }
    uint64_t v31 = *v22;
    *(_OWORD *)__s1 = *((_OWORD *)v23 + 7);
    *(_OWORD *)&__s1[12] = *(_OWORD *)((char *)v23 + 124);
    uint64_t v82 = v31;
    std::string v84 = v86;
    uint64_t v85 = 0x600000000;
    if (*((_DWORD *)v23 + 38)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v84, (uint64_t)(v23 + 18));
    }
    for (uint64_t i = v21; ; i -= 104)
    {
      uint64_t v33 = v6 + i;
      *(void *)(v33 + 104) = *(void *)(v6 + i);
      *(_OWORD *)(v33 + 112) = *(_OWORD *)(v6 + i + 8);
      *(_OWORD *)(v33 + 124) = *(_OWORD *)(v6 + i + 20);
      uint64_t v34 = (void **)(v6 + i + 144);
      uint64_t v35 = *(const void **)(v6 + i + 40);
      uint64_t v36 = v6 + i + 56;
      if ((const void *)v36 == v35) {
        break;
      }
      unint64_t v37 = *v34;
      if ((void *)(v33 + 160) != v37)
      {
        free(v37);
        uint64_t v35 = *(const void **)(v33 + 40);
      }
      uint64_t v38 = v6 + i;
      *(void *)(v33 + 144) = v35;
      *(void *)(v38 + 152) = *(void *)(v6 + i + 48);
      *(void *)(v33 + 40) = v36;
      *(_DWORD *)(v38 + 52) = 0;
      *((_DWORD *)v23 + 12) = 0;
      if (!i)
      {
LABEL_78:
        uint64_t v48 = v6;
LABEL_79:
        unsigned int v49 = v84;
        *(void *)uint64_t v48 = v82;
        uint64_t v50 = v6 + i;
        *(_OWORD *)(v50 + 8) = *(_OWORD *)__s1;
        *(_OWORD *)(v50 + 20) = *(_OWORD *)&__s1[12];
        if ((uint64_t *)v48 == &v82) {
          goto LABEL_98;
        }
        uint64_t v51 = (void **)(v50 + 40);
        if (v49 == v86)
        {
          unint64_t v52 = v85;
          uint64_t v53 = *(unsigned int *)(v48 + 48);
          if (v53 >= v85)
          {
            if (v85) {
              memmove(*v51, v86, 8 * v85);
            }
          }
          else
          {
            if (*(_DWORD *)(v48 + 52) < v85)
            {
              *(_DWORD *)(v48 + 48) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v51, (void *)(v48 + 56), v52, 8);
              goto LABEL_93;
            }
            if (v53) {
              memmove(*v51, v86, 8 * v53);
            }
            else {
LABEL_93:
            }
              uint64_t v53 = 0;
            if (v53 != v85) {
              memcpy((char *)*v51 + 8 * v53, (char *)v84 + 8 * v53, 8 * v85 - 8 * v53);
            }
          }
          *(_DWORD *)(v48 + 48) = v52;
          goto LABEL_97;
        }
        if (*v51 != (void *)(v48 + 56))
        {
          free(*v51);
          unsigned int v49 = v84;
        }
        *uint64_t v51 = v49;
        *(void *)(v48 + 48) = v85;
        std::string v84 = v86;
        HIDWORD(v85) = 0;
LABEL_97:
        LODWORD(v85) = 0;
        unsigned int v49 = v84;
LABEL_98:
        if (v49 != v86) {
          free(v49);
        }
LABEL_25:
        uint64_t v20 = v22 + 13;
        v21 += 104;
        if (v22 + 13 == a2) {
          return;
        }
        goto LABEL_26;
      }
LABEL_60:
      unsigned int v43 = *(_DWORD *)(v6 + i - 72);
      if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFF) == (v43 & 0x3FFFFFFF))
      {
        if (((v43 >> 30) & 1) == (*(_DWORD *)&__s1[24] & 0x40000000u) >> 30)
        {
          if (!*(unsigned char *)(v6 + i - 80)) {
            goto LABEL_77;
          }
          if (__s1[16])
          {
            unint64_t v44 = *(void *)&__s1[8];
            unint64_t v45 = *(void *)(v6 + i - 88);
            if (v45 >= *(void *)&__s1[8]) {
              size_t v46 = *(void *)&__s1[8];
            }
            else {
              size_t v46 = *(void *)(v6 + i - 88);
            }
            if (v46 && (int v47 = memcmp(*(const void **)__s1, *(const void **)(v6 + i - 96), v46)) != 0)
            {
              if ((v47 & 0x80000000) == 0) {
                goto LABEL_77;
              }
            }
            else if (v44 >= v45)
            {
LABEL_77:
              uint64_t v48 = v6 + i;
              goto LABEL_79;
            }
          }
        }
        else if ((*(_DWORD *)&__s1[24] & 0x40000000) == 0)
        {
          goto LABEL_77;
        }
      }
      else if ((*(_DWORD *)&__s1[24] & 0x3FFFFFFFu) >= (v43 & 0x3FFFFFFF))
      {
        goto LABEL_77;
      }
      v23 -= 13;
    }
    uint64_t v39 = (_DWORD *)(v33 + 48);
    unint64_t v40 = *(unsigned int *)(v33 + 48);
    uint64_t v41 = *(unsigned int *)(v33 + 152);
    if (v41 >= v40)
    {
      if (v40) {
        memmove(*v34, v35, 8 * v40);
      }
    }
    else
    {
      if (*(_DWORD *)(v6 + i + 156) < v40)
      {
        *(_DWORD *)(v33 + 152) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, (void *)(v6 + i + 160), v40, 8);
        uint64_t v41 = 0;
        uint64_t v42 = *v39;
        if (!*v39) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      if (v41)
      {
        memmove(*v34, v35, 8 * v41);
        uint64_t v42 = *v39;
        if (v41 == v42) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      uint64_t v41 = 0;
      uint64_t v42 = *v39;
      if (*v39) {
LABEL_58:
      }
        memcpy((void *)(*(void *)(v33 + 144) + 8 * v41), (const void *)(*(void *)(v33 + 40) + 8 * v41), 8 * v42 - 8 * v41);
    }
LABEL_59:
    *(_DWORD *)(v33 + 152) = v40;
    *uint64_t v39 = 0;
    if (!i) {
      goto LABEL_78;
    }
    goto LABEL_60;
  }
  int v7 = *((_DWORD *)a2 - 18);
  unsigned int v8 = *(_DWORD *)(a1 + 32);
  if ((v7 & 0x3FFFFFFF) == (v8 & 0x3FFFFFFF))
  {
    unsigned int v9 = v7 & 0x40000000;
    if (((v8 >> 30) & 1) == v9 >> 30)
    {
      if (!*(unsigned char *)(a1 + 24)) {
        return;
      }
      if (*((unsigned char *)a2 - 80))
      {
        unint64_t v10 = *(a2 - 11);
        unint64_t v11 = *(void *)(a1 + 16);
        if (v11 >= v10) {
          size_t v12 = *(a2 - 11);
        }
        else {
          size_t v12 = *(void *)(a1 + 16);
        }
        if (v12 && (int v13 = memcmp((const void *)*(a2 - 12), *(const void **)(a1 + 8), v12)) != 0)
        {
          if ((v13 & 0x80000000) == 0) {
            return;
          }
        }
        else if (v10 >= v11)
        {
          return;
        }
      }
    }
    else if (!v9)
    {
      return;
    }
  }
  else if ((v7 & 0x3FFFFFFFu) >= (v8 & 0x3FFFFFFF))
  {
    return;
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&,std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo> *&>(uint64_t *a1, uint64_t *a2)
{
  v17[7] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  unint64_t v5 = (long long *)(a2 + 1);
  uint64_t v6 = a1 + 1;
  v14[0] = *(_OWORD *)(a1 + 1);
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)a1 + 20);
  uint64_t v15 = v17;
  uint64_t v16 = 0x600000000;
  if (*((_DWORD *)a1 + 12)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v15, (uint64_t)(a1 + 5));
  }
  long long v7 = *v5;
  *(_OWORD *)((char *)v6 + 12) = *(long long *)((char *)v5 + 12);
  *uint64_t v6 = v7;
  uint64_t v8 = (uint64_t)(a1 + 5);
  unsigned int v9 = (void **)(a2 + 5);
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v8, (uint64_t)(a2 + 5));
  long long *v5 = v14[0];
  *(long long *)((char *)v5 + 12) = *(_OWORD *)((char *)v14 + 12);
  unint64_t v10 = v15;
  if (v14 != v5)
  {
    if (v15 != v17)
    {
      if ((uint64_t *)a2[5] != a2 + 7)
      {
        free((void *)a2[5]);
        unint64_t v10 = v15;
      }
      a2[5] = (uint64_t)v10;
      a2[6] = v16;
      uint64_t v15 = v17;
      HIDWORD(v16) = 0;
      goto LABEL_18;
    }
    unint64_t v11 = v16;
    uint64_t v12 = *((unsigned int *)a2 + 12);
    if (v12 >= v16)
    {
      if (v16) {
        memmove(*v9, v17, 8 * v16);
      }
      goto LABEL_17;
    }
    if (*((_DWORD *)a2 + 13) >= v16)
    {
      if (v12)
      {
        memmove(*v9, v17, 8 * v12);
        uint64_t v13 = v16;
        if (v12 == v16)
        {
LABEL_17:
          *((_DWORD *)a2 + 12) = v11;
LABEL_18:
          LODWORD(v16) = 0;
          unint64_t v10 = v15;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = v16;
        if (!v16) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      *((_DWORD *)a2 + 12) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 5), a2 + 7, v11, 8);
      uint64_t v12 = 0;
      uint64_t v13 = v16;
      if (!v16) {
        goto LABEL_17;
      }
    }
    memcpy((char *)*v9 + 8 * v12, (char *)v15 + 8 * v12, 8 * v13 - 8 * v12);
    goto LABEL_17;
  }
LABEL_19:
  if (v10 != v17) {
    free(v10);
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t result, void *a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  long long v7 = (void *)result;
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      *(void *)a4 = *(void *)result;
      long long v8 = *(_OWORD *)(result + 8);
      long long v9 = *(_OWORD *)(result + 20);
      *(void *)(a4 + 40) = a4 + 56;
      uint64_t v10 = a4 + 40;
      *(_OWORD *)(a4 + 20) = v9;
      *(_OWORD *)(a4 + 8) = v8;
      *(void *)(a4 + 48) = 0x600000000;
      if (!*(_DWORD *)(result + 48)) {
        return result;
      }
      goto LABEL_87;
    }
    if ((uint64_t)a3 <= 8)
    {
      if ((void *)result == a2) {
        return result;
      }
      *(void *)a4 = *(void *)result;
      long long v20 = *(_OWORD *)(result + 8);
      long long v21 = *(_OWORD *)(result + 20);
      *(void *)(a4 + 40) = a4 + 56;
      uint64_t result = a4 + 40;
      *(_OWORD *)(a4 + 20) = v21;
      *(_OWORD *)(a4 + 8) = v20;
      *(void *)(a4 + 48) = 0x600000000;
      if (*((_DWORD *)v7 + 12)) {
        uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
      }
      size_t v22 = v7 + 13;
      if (v7 + 13 == v6) {
        return result;
      }
      uint64_t v23 = 0;
      uint64_t v24 = v4;
      uint64_t v95 = v6;
LABEL_28:
      unsigned int v26 = v22;
      unint64_t v28 = (const void **)(v7 + 14);
      size_t v29 = (const void **)(v24 + 8);
      int v30 = *((_DWORD *)v7 + 34);
      unsigned int v31 = *(_DWORD *)(v24 + 32);
      if ((v30 & 0x3FFFFFFF) == (v31 & 0x3FFFFFFF))
      {
        unsigned int v32 = v30 & 0x40000000;
        if (((v31 >> 30) & 1) == v32 >> 30)
        {
          if (!*(unsigned char *)(v24 + 24)) {
            goto LABEL_78;
          }
          if (*((unsigned char *)v7 + 128))
          {
            unint64_t v33 = v7[15];
            unint64_t v34 = *(void *)(v24 + 16);
            if (v34 >= v33) {
              size_t v35 = v7[15];
            }
            else {
              size_t v35 = *(void *)(v24 + 16);
            }
            if (v35 && (int v36 = memcmp(*v28, *v29, v35)) != 0)
            {
              if ((v36 & 0x80000000) == 0) {
                goto LABEL_78;
              }
            }
            else if (v33 >= v34)
            {
LABEL_78:
              *(void *)(v24 + 104) = *v26;
              long long v57 = *(_OWORD *)v28;
              long long v58 = *(_OWORD *)((char *)v7 + 124);
              *(void *)(v24 + 144) = v24 + 160;
              uint64_t result = v24 + 144;
              *(_OWORD *)(v24 + 124) = v58;
              *(_OWORD *)(v24 + 112) = v57;
              *(void *)(v24 + 152) = 0x600000000;
              if (*((_DWORD *)v7 + 38)) {
                goto LABEL_26;
              }
              goto LABEL_27;
            }
          }
        }
        else if (!v32)
        {
          goto LABEL_78;
        }
      }
      else if ((v30 & 0x3FFFFFFFu) >= (v31 & 0x3FFFFFFF))
      {
        goto LABEL_78;
      }
      uint64_t v97 = (const void **)(v7 + 14);
      *(void *)(v24 + 104) = *(void *)v24;
      *(_OWORD *)(v24 + 112) = *(_OWORD *)v29;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v24 + 20);
      *(void *)(v24 + 144) = v24 + 160;
      *(void *)(v24 + 152) = 0x600000000;
      if (*(_DWORD *)(v24 + 48)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v24 + 144, v24 + 40);
      }
      uint64_t v25 = v4;
      if (v24 == v4) {
        goto LABEL_25;
      }
      char v96 = v26;
      uint64_t v37 = v23;
      uint64_t v25 = v24;
      while (1)
      {
        while (1)
        {
          uint64_t v38 = (const void **)(v4 + v37 - 96);
          int v39 = *((_DWORD *)v7 + 34);
          unsigned int v40 = *(_DWORD *)(v4 + v37 - 72);
          if ((v39 & 0x3FFFFFFF) == (v40 & 0x3FFFFFFF))
          {
            unsigned int v41 = v39 & 0x40000000;
            if (((v40 >> 30) & 1) == v41 >> 30)
            {
              if (!*(unsigned char *)(v4 + v37 - 80)) {
                goto LABEL_24;
              }
              if (*((unsigned char *)v7 + 128))
              {
                unint64_t v42 = v7[15];
                unint64_t v43 = *(void *)(v4 + v37 - 88);
                if (v43 >= v42) {
                  size_t v44 = v7[15];
                }
                else {
                  size_t v44 = *(void *)(v4 + v37 - 88);
                }
                if (v44 && (int v45 = memcmp(*v97, *v38, v44)) != 0)
                {
                  if ((v45 & 0x80000000) == 0) {
                    goto LABEL_24;
                  }
                }
                else if (v42 >= v43)
                {
                  uint64_t v25 = v4 + v37;
LABEL_24:
                  uint64_t v6 = v95;
                  unsigned int v26 = v96;
LABEL_25:
                  *(void *)uint64_t v25 = *v26;
                  long long v27 = *(_OWORD *)v97;
                  *(_OWORD *)(v25 + 20) = *(_OWORD *)((char *)v7 + 124);
                  *(_OWORD *)(v25 + 8) = v27;
                  uint64_t result = v25 + 40;
LABEL_26:
                  uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 18));
LABEL_27:
                  v24 += 104;
                  size_t v22 = v26 + 13;
                  v23 += 104;
                  long long v7 = v26;
                  if (v26 + 13 == v6) {
                    return result;
                  }
                  goto LABEL_28;
                }
              }
            }
            else if (!v41)
            {
              goto LABEL_24;
            }
          }
          else if ((v39 & 0x3FFFFFFFu) >= (v40 & 0x3FFFFFFF))
          {
            goto LABEL_24;
          }
          uint64_t v46 = v4 + v37;
          *(void *)uint64_t v46 = *(void *)(v4 + v37 - 104);
          *(_OWORD *)(v46 + 8) = *(_OWORD *)v38;
          *(_OWORD *)(v46 + 20) = *(_OWORD *)(v4 + v37 - 84);
          int v47 = (void **)(v4 + v37 + 40);
          uint64_t v48 = *(const void **)(v4 + v37 - 64);
          uint64_t v49 = v4 + v37 - 48;
          if ((const void *)v49 == v48) {
            break;
          }
          uint64_t v50 = *v47;
          if ((void *)(v46 + 56) != v50)
          {
            free(v50);
            uint64_t v48 = *(const void **)(v46 - 64);
          }
          uint64_t v51 = v4 + v37;
          *(void *)(v46 + 40) = v48;
          unint64_t v52 = (_DWORD *)(v25 - 56);
          *(void *)(v51 + 48) = *(void *)(v4 + v37 - 56);
          *(void *)(v46 - 64) = v49;
          *(_DWORD *)(v51 - 52) = 0;
          v25 -= 104;
          *unint64_t v52 = 0;
          v37 -= 104;
          if (!v37)
          {
LABEL_23:
            uint64_t v25 = v4;
            goto LABEL_24;
          }
        }
        uint64_t v54 = (_DWORD *)(v46 - 56);
        unint64_t v53 = *(unsigned int *)(v46 - 56);
        uint64_t v55 = *(unsigned int *)(v46 + 48);
        if (v55 >= v53)
        {
          if (v53) {
            memmove(*v47, v48, 8 * v53);
          }
          goto LABEL_44;
        }
        if (*(_DWORD *)(v4 + v37 + 52) >= v53)
        {
          if (v55)
          {
            memmove(*v47, v48, 8 * v55);
            uint64_t v56 = *v54;
            if (v55 != v56) {
              goto LABEL_76;
            }
          }
          else
          {
            uint64_t v55 = 0;
            uint64_t v56 = *v54;
            if (*v54) {
LABEL_76:
            }
              memcpy((void *)(*(void *)(v46 + 40) + 8 * v55), (const void *)(*(void *)(v46 - 64) + 8 * v55), 8 * v56 - 8 * v55);
          }
        }
        else
        {
          *(_DWORD *)(v46 + 48) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(v4 + v37 + 56), v53, 8);
          uint64_t v55 = 0;
          uint64_t v56 = *v54;
          if (*v54) {
            goto LABEL_76;
          }
        }
LABEL_44:
        *(_DWORD *)(v46 + 48) = v53;
        v25 -= 104;
        _DWORD *v54 = 0;
        v37 -= 104;
        if (!v37) {
          goto LABEL_23;
        }
      }
    }
    unint64_t v64 = a3 >> 1;
    uint64_t v65 = 104 * (a3 >> 1);
    uint64_t v66 = result + v65;
    int v67 = &v7[(unint64_t)v65 / 8];
    while (1)
    {
      if (v67 == v6)
      {
        if (v7 != (void *)v66)
        {
          uint64_t v83 = 0;
          do
          {
            std::string v84 = &v7[v83];
            *(void *)(v4 + v83 * 8) = v7[v83];
            long long v85 = *(_OWORD *)&v7[v83 + 1];
            long long v86 = *(_OWORD *)((char *)&v7[v83 + 2] + 4);
            *(void *)(v4 + v83 * 8 + 40) = v4 + v83 * 8 + 56;
            uint64_t result = v4 + v83 * 8 + 40;
            *(_OWORD *)(result - 20) = v86;
            *(_OWORD *)(result - 32) = v85;
            *(void *)(result + 8) = 0x600000000;
            if (LODWORD(v7[v83 + 6])) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v84 + 5));
            }
            v83 += 13;
          }
          while (v84 + 13 != (void *)v66);
        }
        return result;
      }
      long long v68 = (const void **)(v67 + 1);
      BOOL v69 = (const void **)(v7 + 1);
      int v70 = *((_DWORD *)v67 + 8);
      unsigned int v71 = *((_DWORD *)v7 + 8);
      if ((v70 & 0x3FFFFFFF) != (v71 & 0x3FFFFFFF)) {
        break;
      }
      unsigned int v72 = v70 & 0x40000000;
      if (((v71 >> 30) & 1) != v72 >> 30)
      {
        if (!v72) {
          goto LABEL_108;
        }
        goto LABEL_103;
      }
      if (!*((unsigned char *)v7 + 24)) {
        goto LABEL_108;
      }
      if (*((unsigned char *)v67 + 24))
      {
        long long v73 = v6;
        unint64_t v74 = v67[2];
        unint64_t v75 = v7[2];
        if (v75 >= v74) {
          size_t v76 = v67[2];
        }
        else {
          size_t v76 = v7[2];
        }
        if (v76 && (int v77 = memcmp(*v68, *v69, v76)) != 0)
        {
          uint64_t v6 = v73;
          if (v77 < 0) {
            goto LABEL_103;
          }
        }
        else
        {
          BOOL v82 = v74 >= v75;
          uint64_t v6 = v73;
          if (!v82) {
            goto LABEL_103;
          }
        }
LABEL_108:
        *(void *)uint64_t v4 = *v7;
        long long v80 = *(_OWORD *)v69;
        long long v81 = *(_OWORD *)((char *)v7 + 20);
        *(void *)(v4 + 40) = v4 + 56;
        uint64_t result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v81;
        *(_OWORD *)(v4 + 8) = v80;
        *(void *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v7 + 12)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
        }
        v7 += 13;
        v4 += 104;
        if (v7 == (void *)v66)
        {
LABEL_126:
          if (v67 != v6)
          {
            uint64_t v91 = 0;
            do
            {
              BOOL v92 = &v67[v91];
              *(void *)(v4 + v91 * 8) = v67[v91];
              long long v93 = *(_OWORD *)&v67[v91 + 1];
              long long v94 = *(_OWORD *)((char *)&v67[v91 + 2] + 4);
              *(void *)(v4 + v91 * 8 + 40) = v4 + v91 * 8 + 56;
              uint64_t result = v4 + v91 * 8 + 40;
              *(_OWORD *)(result - 20) = v94;
              *(_OWORD *)(result - 32) = v93;
              *(void *)(result + 8) = 0x600000000;
              if (LODWORD(v67[v91 + 6])) {
                uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v92 + 5));
              }
              v91 += 13;
            }
            while (v92 + 13 != v6);
          }
          return result;
        }
      }
      else
      {
LABEL_103:
        *(void *)uint64_t v4 = *v67;
        long long v78 = *(_OWORD *)v68;
        long long v79 = *(_OWORD *)((char *)v67 + 20);
        *(void *)(v4 + 40) = v4 + 56;
        uint64_t result = v4 + 40;
        *(_OWORD *)(v4 + 20) = v79;
        *(_OWORD *)(v4 + 8) = v78;
        *(void *)(v4 + 48) = 0x600000000;
        if (*((_DWORD *)v67 + 12)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v67 + 5));
        }
        v67 += 13;
        v4 += 104;
        if (v7 == (void *)v66) {
          goto LABEL_126;
        }
      }
    }
    if ((v70 & 0x3FFFFFFFu) >= (v71 & 0x3FFFFFFF)) {
      goto LABEL_108;
    }
    goto LABEL_103;
  }
  unint64_t v11 = (const void **)(a2 - 12);
  uint64_t v12 = (const void **)(result + 8);
  int v13 = *((_DWORD *)a2 - 18);
  unsigned int v14 = *(_DWORD *)(result + 32);
  if ((v13 & 0x3FFFFFFF) != (v14 & 0x3FFFFFFF))
  {
    if ((v13 & 0x3FFFFFFFu) < (v14 & 0x3FFFFFFF)) {
      goto LABEL_84;
    }
    goto LABEL_119;
  }
  unsigned int v15 = v13 & 0x40000000;
  if (((v14 >> 30) & 1) != v15 >> 30)
  {
    if (v15) {
      goto LABEL_84;
    }
    goto LABEL_119;
  }
  if (!*(unsigned char *)(result + 24)) {
    goto LABEL_119;
  }
  if (!*((unsigned char *)a2 - 80)) {
    goto LABEL_84;
  }
  unint64_t v16 = *(a2 - 11);
  unint64_t v17 = *(void *)(result + 16);
  if (v17 >= v16) {
    size_t v18 = *(a2 - 11);
  }
  else {
    size_t v18 = *(void *)(result + 16);
  }
  if (!v18 || (int v19 = memcmp(*v11, *v12, v18)) == 0)
  {
    if (v16 < v17) {
      goto LABEL_84;
    }
LABEL_119:
    *(void *)uint64_t v4 = *v7;
    long long v87 = *(_OWORD *)v12;
    long long v88 = *(_OWORD *)((char *)v7 + 20);
    *(void *)(v4 + 40) = v4 + 56;
    uint64_t result = v4 + 40;
    *(_OWORD *)(v4 + 20) = v88;
    *(_OWORD *)(v4 + 8) = v87;
    *(void *)(v4 + 48) = 0x600000000;
    if (*((_DWORD *)v7 + 12)) {
      uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v7 + 5));
    }
    *(void *)(v4 + 104) = *(v6 - 13);
    long long v89 = *(_OWORD *)v11;
    long long v90 = *(_OWORD *)((char *)v6 - 84);
    *(void *)(v4 + 144) = v4 + 160;
    uint64_t v10 = v4 + 144;
    *(_OWORD *)(v10 - 20) = v90;
    *(_OWORD *)(v10 - 32) = v89;
    *(void *)(v10 + 8) = 0x600000000;
    if (*((_DWORD *)v6 - 14))
    {
      uint64_t v63 = (uint64_t)(v6 - 8);
      goto LABEL_123;
    }
    return result;
  }
  if ((v19 & 0x80000000) == 0) {
    goto LABEL_119;
  }
LABEL_84:
  *(void *)uint64_t v4 = *(v6 - 13);
  long long v59 = *(_OWORD *)v11;
  long long v60 = *(_OWORD *)((char *)v6 - 84);
  *(void *)(v4 + 40) = v4 + 56;
  uint64_t result = v4 + 40;
  *(_OWORD *)(v4 + 20) = v60;
  *(_OWORD *)(v4 + 8) = v59;
  *(void *)(v4 + 48) = 0x600000000;
  if (*((_DWORD *)v6 - 14)) {
    uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, (uint64_t)(v6 - 8));
  }
  *(void *)(v4 + 104) = *v7;
  long long v61 = *(_OWORD *)v12;
  long long v62 = *(_OWORD *)((char *)v7 + 20);
  *(void *)(v4 + 144) = v4 + 160;
  uint64_t v10 = v4 + 144;
  *(_OWORD *)(v10 - 20) = v62;
  *(_OWORD *)(v10 - 32) = v61;
  *(void *)(v10 + 8) = 0x600000000;
  if (*((_DWORD *)v7 + 12))
  {
LABEL_87:
    uint64_t v63 = (uint64_t)(v7 + 5);
LABEL_123:
    return llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v10, v63);
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,anonymous namespace'::AliasInitializer::initializeAliases(llvm::MapVector<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>,0u>> &,llvm::MapVector<void const*,anonymous namespace'::SymbolAlias,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,anonymous namespace'::SymbolAlias>,0u>> &)::$_0 &,std::pair<void const*,anonymous namespace'::AliasInitializer::InProgressAliasInfo>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  while (1)
  {
    if (a5 <= a7 || a4 <= a7)
    {
      if (a4 > a5)
      {
        if (a2 == a3) {
          return;
        }
        uint64_t v86 = 0;
        unint64_t v87 = 0;
        long long v88 = a6;
        do
        {
          long long v89 = &a2[v86];
          a6[v86] = a2[v86];
          long long v90 = *(_OWORD *)&a2[v86 + 1];
          long long v91 = *(_OWORD *)((char *)&a2[v86 + 2] + 4);
          a6[v86 + 5] = (uint64_t)&a6[v86 + 7];
          uint64_t v92 = (uint64_t)&a6[v86 + 5];
          *(_OWORD *)(v92 - 20) = v91;
          *(_OWORD *)(v92 - 32) = v90;
          *(void *)(v92 + 8) = 0x600000000;
          if (LODWORD(a2[v86 + 6])) {
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v92, (uint64_t)(v89 + 5));
          }
          ++v87;
          v86 += 13;
        }
        while (v89 + 13 != a3);
        if (v86 * 8)
        {
          uint64_t v98 = &a6[v86];
          uint64_t v99 = a3 - 13;
          do
          {
            if (a2 == a1)
            {
              unint64_t v125 = 0;
              do
              {
                uint64_t v126 = &v99[v125];
                *uint64_t v126 = v98[v125 - 13];
                long long v127 = *(_OWORD *)&v98[v125 - 12];
                *(_OWORD *)((char *)v126 + 20) = *(_OWORD *)((char *)&v98[v125 - 10] - 4);
                *(_OWORD *)(v126 + 1) = v127;
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v99[v125 + 5], (uint64_t)&v98[v125 - 8]);
                v125 -= 13;
              }
              while (&v98[v125] != v88);
              break;
            }
            uint64_t v102 = v98 - 12;
            int v103 = *((_DWORD *)v98 - 18);
            unsigned int v104 = *((_DWORD *)a2 - 18);
            if ((v103 & 0x3FFFFFFF) == (v104 & 0x3FFFFFFF))
            {
              unsigned int v105 = v103 & 0x40000000;
              if (((v104 >> 30) & 1) == v105 >> 30)
              {
                if (*((unsigned char *)a2 - 80))
                {
                  if (!*((unsigned char *)v98 - 80)) {
                    goto LABEL_174;
                  }
                  unint64_t v106 = *(v98 - 11);
                  unint64_t v107 = *(a2 - 11);
                  if (v107 >= v106) {
                    size_t v108 = *(v98 - 11);
                  }
                  else {
                    size_t v108 = *(a2 - 11);
                  }
                  if (v108 && (int v109 = memcmp((const void *)*v102, (const void *)*(a2 - 12), v108)) != 0)
                  {
                    long long v88 = a6;
                    if (v109 < 0) {
                      goto LABEL_174;
                    }
                  }
                  else
                  {
                    BOOL v16 = v106 >= v107;
                    long long v88 = a6;
                    if (!v16)
                    {
LABEL_174:
                      uint64_t v102 = a2 - 12;
                      int v100 = a2;
                      a2 -= 13;
                      goto LABEL_158;
                    }
                  }
                }
              }
              else if (v105)
              {
                goto LABEL_174;
              }
            }
            else if ((v103 & 0x3FFFFFFFu) < (v104 & 0x3FFFFFFF))
            {
              goto LABEL_174;
            }
            int v100 = v98;
            v98 -= 13;
LABEL_158:
            *uint64_t v99 = *(v100 - 13);
            long long v101 = *(_OWORD *)v102;
            *(_OWORD *)((char *)v99 + 20) = *(_OWORD *)((char *)v102 + 12);
            *(_OWORD *)(v99 + 1) = v101;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v99 + 5), (uint64_t)(v100 - 8));
            v99 -= 13;
          }
          while (v98 != v88);
        }
LABEL_207:
        if (v88 && v87)
        {
          unint64_t v132 = 0;
          uint64_t v133 = a6 + 7;
          do
          {
            int v134 = (void *)*(v133 - 2);
            if (v133 != v134) {
              free(v134);
            }
            ++v132;
            v133 += 13;
          }
          while (v132 < v87);
        }
        return;
      }
      if (a1 == a2) {
        return;
      }
      unint64_t v93 = 0;
      unint64_t v87 = 0;
      long long v88 = a6;
      do
      {
        long long v94 = &a1[v93];
        a6[v93] = a1[v93];
        long long v95 = *(_OWORD *)&a1[v93 + 1];
        long long v96 = *(_OWORD *)((char *)&a1[v93 + 2] + 4);
        a6[v93 + 5] = (uint64_t)&a6[v93 + 7];
        uint64_t v97 = (uint64_t)&a6[v93 + 5];
        *(_OWORD *)(v97 - 20) = v96;
        *(_OWORD *)(v97 - 32) = v95;
        *(void *)(v97 + 8) = 0x600000000;
        if (LODWORD(a1[v93 + 6])) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v97, (uint64_t)(v94 + 5));
        }
        ++v87;
        v93 += 13;
      }
      while (v94 + 13 != a2);
      if (!(v93 * 8)) {
        goto LABEL_207;
      }
      int v110 = &a6[v93];
      uint64_t v111 = (uint64_t)&a6[v93 - 13];
      uint64_t v112 = a6;
      uint64_t v113 = a3;
      while (1)
      {
        if (a2 == v113)
        {
          unint64_t v128 = 0;
          do
          {
            uint64_t v129 = &a1[v128];
            int v130 = &v112[v128];
            uint64_t *v129 = v112[v128];
            long long v131 = *(_OWORD *)&v112[v128 + 1];
            *(_OWORD *)((char *)v129 + 20) = *(_OWORD *)((char *)&v112[v128 + 2] + 4);
            *(_OWORD *)(v129 + 1) = v131;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&a1[v128 + 5], (uint64_t)&v112[v128 + 5]);
            v128 += 13;
          }
          while ((uint64_t *)v111 != v130);
          goto LABEL_207;
        }
        uint64_t v115 = (const void **)(a2 + 1);
        size_t v116 = (const void **)(v112 + 1);
        int v117 = *((_DWORD *)a2 + 8);
        unsigned int v118 = *((_DWORD *)v112 + 8);
        if ((v117 & 0x3FFFFFFF) != (v118 & 0x3FFFFFFF))
        {
          if ((v117 & 0x3FFFFFFFu) < (v118 & 0x3FFFFFFF)) {
            goto LABEL_195;
          }
          goto LABEL_179;
        }
        unsigned int v119 = v117 & 0x40000000;
        if (((v118 >> 30) & 1) != v119 >> 30) {
          break;
        }
        if (!*((unsigned char *)v112 + 24)) {
          goto LABEL_179;
        }
        if (*((unsigned char *)a2 + 24))
        {
          unint64_t v120 = a2[2];
          unint64_t v121 = v112[2];
          if (v121 >= v120) {
            size_t v122 = a2[2];
          }
          else {
            size_t v122 = v112[2];
          }
          if (v122 && (int v123 = memcmp(*v115, *v116, v122)) != 0)
          {
            long long v88 = a6;
            if (v123 < 0) {
              goto LABEL_195;
            }
          }
          else
          {
            BOOL v16 = v120 >= v121;
            long long v88 = a6;
            if (!v16) {
              goto LABEL_195;
            }
          }
LABEL_179:
          *a1 = *v112;
          long long v114 = *(_OWORD *)v116;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v112 + 20);
          *(_OWORD *)(a1 + 1) = v114;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(v112 + 5));
          v112 += 13;
          uint64_t v113 = a3;
          a1 += 13;
          if (v110 == v112) {
            goto LABEL_207;
          }
        }
        else
        {
LABEL_195:
          *a1 = *a2;
          long long v124 = *(_OWORD *)v115;
          *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)a2 + 20);
          *(_OWORD *)(a1 + 1) = v124;
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
          a2 += 13;
          uint64_t v113 = a3;
          a1 += 13;
          if (v110 == v112) {
            goto LABEL_207;
          }
        }
      }
      if (!v119) {
        goto LABEL_179;
      }
      goto LABEL_195;
    }
    if (!a4) {
      return;
    }
    uint64_t v10 = 0;
    unsigned int v11 = *((_DWORD *)a2 + 8);
    unsigned int v12 = v11 & 0x3FFFFFFF;
    int v13 = v11 & 0x40000000;
    int v14 = (v11 >> 30) & 1;
    uint64_t v15 = -a4;
    uint64_t v148 = a5;
    while (1)
    {
      unsigned int v17 = a1[v10 + 4];
      if (v12 != (v17 & 0x3FFFFFFF))
      {
        if (v12 < (v17 & 0x3FFFFFFF)) {
          goto LABEL_22;
        }
        goto LABEL_7;
      }
      if (v14 == ((v17 >> 30) & 1)) {
        break;
      }
      if (v13) {
        goto LABEL_22;
      }
LABEL_7:
      v10 += 13;
      BOOL v16 = __CFADD__(v15++, 1);
      if (v16) {
        return;
      }
    }
    if (!LOBYTE(a1[v10 + 3])) {
      goto LABEL_7;
    }
    if (!*((unsigned char *)a2 + 24)) {
      goto LABEL_22;
    }
    unint64_t v18 = a2[2];
    unint64_t v19 = a1[v10 + 2];
    if (v19 >= v18) {
      size_t v20 = a2[2];
    }
    else {
      size_t v20 = a1[v10 + 2];
    }
    if (v20)
    {
      int v21 = memcmp((const void *)a2[1], (const void *)a1[v10 + 1], v20);
      a5 = v148;
      if (v21)
      {
        if (v21 < 0) {
          goto LABEL_22;
        }
        goto LABEL_7;
      }
    }
    if (v18 >= v19) {
      goto LABEL_7;
    }
LABEL_22:
    uint64_t v22 = -v15;
    uint64_t v23 = &a1[v10];
    if (-v15 >= a5) {
      break;
    }
    if (a5 >= 0) {
      uint64_t v24 = a5;
    }
    else {
      uint64_t v24 = a5 + 1;
    }
    uint64_t v25 = v24 >> 1;
    unsigned int v26 = a2;
    v144 = &a1[v10];
    if (v23 != a2)
    {
      unint64_t v27 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1 - v10 * 8) >> 3);
      unint64_t v28 = &a2[13 * v25];
      unsigned int v29 = *((_DWORD *)v28 + 8);
      unsigned int v30 = v29 & 0x3FFFFFFF;
      int v31 = v29 & 0x40000000;
      int v32 = (v29 >> 30) & 1;
      if (*((unsigned char *)v28 + 24))
      {
        size_t v33 = v28[2];
        __s1 = (void *)v28[1];
        size_t v137 = v33;
        unsigned int v26 = &a1[v10];
        uint64_t v141 = v25;
        int v139 = v32;
        if (!v31)
        {
          while (1)
          {
            unint64_t v34 = v27 >> 1;
            size_t v35 = &v26[13 * (v27 >> 1)];
            unsigned int v36 = *((_DWORD *)v35 + 8);
            if (v30 == (v36 & 0x3FFFFFFF))
            {
              if (v32 == ((v36 >> 30) & 1) && LOBYTE(v26[13 * v34 + 3]))
              {
                uint64_t v37 = &v26[13 * v34];
                unint64_t v38 = v37[2];
                if (v38 >= v33) {
                  size_t v39 = v33;
                }
                else {
                  size_t v39 = v37[2];
                }
                if (v39 && (v40 = memcmp(__s1, (const void *)v35[1], v39), v33 = v137, v32 = v139, uint64_t v25 = v141, v40))
                {
                  if (v40 < 0) {
                    goto LABEL_31;
                  }
                }
                else if (v33 < v38)
                {
                  goto LABEL_31;
                }
              }
            }
            else if (v30 < (v36 & 0x3FFFFFFF))
            {
              goto LABEL_31;
            }
            unsigned int v26 = v35 + 13;
            unint64_t v34 = v27 + ~v34;
LABEL_31:
            unint64_t v27 = v34;
            if (!v34) {
              goto LABEL_109;
            }
          }
        }
        while (1)
        {
          unint64_t v41 = v27 >> 1;
          unint64_t v42 = &v26[13 * (v27 >> 1)];
          unsigned int v43 = *((_DWORD *)v42 + 8);
          if (v30 == (v43 & 0x3FFFFFFF))
          {
            if (v32 != ((v43 >> 30) & 1)) {
              goto LABEL_47;
            }
            if (LOBYTE(v26[13 * v41 + 3]))
            {
              size_t v44 = &v26[13 * v41];
              unint64_t v45 = v44[2];
              if (v45 >= v33) {
                size_t v46 = v33;
              }
              else {
                size_t v46 = v44[2];
              }
              if (v46 && (v47 = memcmp(__s1, (const void *)v42[1], v46), v33 = v137, v32 = v139, uint64_t v25 = v141, v47))
              {
                if (v47 < 0) {
                  goto LABEL_47;
                }
              }
              else if (v33 < v45)
              {
                goto LABEL_47;
              }
            }
          }
          else if (v30 < (v43 & 0x3FFFFFFF))
          {
            goto LABEL_47;
          }
          unsigned int v26 = v42 + 13;
          unint64_t v41 = v27 + ~v41;
LABEL_47:
          unint64_t v27 = v41;
          if (!v41) {
            goto LABEL_109;
          }
        }
      }
      unsigned int v26 = &a1[v10];
      if (!v31)
      {
        while (1)
        {
          unint64_t v68 = v27 >> 1;
          BOOL v69 = &v26[13 * (v27 >> 1)];
          unsigned int v70 = *((_DWORD *)v69 + 8);
          if (v30 == (v70 & 0x3FFFFFFF))
          {
            if (v32 == ((v70 >> 30) & 1) && LOBYTE(v26[13 * v68 + 3])) {
              goto LABEL_94;
            }
          }
          else if (v30 < (v70 & 0x3FFFFFFF))
          {
            goto LABEL_94;
          }
          unsigned int v26 = v69 + 13;
          unint64_t v68 = v27 + ~v68;
LABEL_94:
          unint64_t v27 = v68;
          if (!v68) {
            goto LABEL_109;
          }
        }
      }
      do
      {
        unint64_t v71 = v27 >> 1;
        unsigned int v72 = &v26[13 * (v27 >> 1)];
        unsigned int v73 = *((_DWORD *)v72 + 8);
        if (v30 == (v73 & 0x3FFFFFFF))
        {
          if (v32 != ((v73 >> 30) & 1) || LOBYTE(v26[13 * v71 + 3])) {
            goto LABEL_102;
          }
        }
        else if (v30 < (v73 & 0x3FFFFFFF))
        {
          goto LABEL_102;
        }
        unsigned int v26 = v72 + 13;
        unint64_t v71 = v27 + ~v71;
LABEL_102:
        unint64_t v27 = v71;
      }
      while (v71);
    }
LABEL_109:
    uint64_t v48 = &a2[13 * v25];
    uint64_t v65 = 0x4EC4EC4EC4EC4EC5 * (((char *)v26 - (char *)a1 - v10 * 8) >> 3);
    uint64_t v63 = a7;
    uint64_t v66 = v148;
    uint64_t v23 = v144;
    int v67 = v48;
    if (v26 != a2) {
      goto LABEL_110;
    }
LABEL_130:
    a4 = -(v65 + v15);
    uint64_t v80 = v66 - v25;
    if (v65 + v25 >= v66 - (v65 + v25) - v15)
    {
      uint64_t v81 = -(v65 + v15);
      uint64_t v82 = v25;
      a4 = v65;
      a3 = v67;
      a5 = v82;
      a1 = v23;
      a2 = v26;
      if (!v82) {
        return;
      }
    }
    else
    {
      a5 = v80;
      a1 = v67;
      a2 = v48;
      if (!v80) {
        return;
      }
    }
  }
  if (v15 != -1)
  {
    if (v15 > 0) {
      uint64_t v22 = 1 - v15;
    }
    uint64_t v48 = a3;
    uint64_t v142 = v22 >> 1;
    if (a3 == a2)
    {
      uint64_t v63 = a7;
LABEL_89:
      unint64_t v64 = &a1[13 * v142];
      uint64_t v65 = v142;
      unsigned int v26 = &v64[v10];
      uint64_t v25 = 0x4EC4EC4EC4EC4EC5 * (v48 - a2);
      uint64_t v66 = v148;
      int v67 = v48;
      if (&v64[v10] == a2) {
        goto LABEL_130;
      }
LABEL_110:
      int v67 = v26;
      if (a2 != v48)
      {
        uint64_t v143 = v65;
        uint64_t v74 = v25;
        int v67 = v26 + 13;
        for (uint64_t i = a2 + 13; i != v48; i += 13)
        {
          if (v67 == a2) {
            a2 = i;
          }
          v67 += 13;
        }
        if (v67 != a2)
        {
          size_t v76 = v67;
          int v77 = a2;
          while (1)
          {
            a2 += 13;
            BOOL v78 = v76 + 13 == v77;
            if (a2 == v48)
            {
              if (v76 + 13 == v77) {
                goto LABEL_129;
              }
              a2 = v77 + 13;
              v76 += 26;
              while (1)
              {
                BOOL v78 = v76 == v77;
                if (a2 != v48) {
                  break;
                }
                BOOL v79 = v76 == v77;
                v76 += 13;
                if (v79) {
                  goto LABEL_129;
                }
              }
            }
            else
            {
              v76 += 13;
            }
            if (v78) {
              int v77 = a2;
            }
          }
        }
        int v67 = a2;
LABEL_129:
        uint64_t v66 = v148;
        uint64_t v25 = v74;
        uint64_t v65 = v143;
      }
      goto LABEL_130;
    }
    unint64_t v49 = 0x4EC4EC4EC4EC4EC5 * (a3 - a2);
    uint64_t v50 = &a1[13 * (v22 >> 1) + v10];
    unsigned int v51 = *((_DWORD *)v50 + 8);
    unsigned int v52 = v51 & 0x3FFFFFFF;
    int v53 = (v51 >> 30) & 1;
    if (*((unsigned char *)v50 + 24))
    {
      size_t v54 = v50[2];
      __s1a = (void *)v50[1];
      size_t v138 = v54;
      uint64_t v48 = a2;
      int v140 = (v51 >> 30) & 1;
      while (1)
      {
        unint64_t v55 = v49 >> 1;
        uint64_t v56 = &v48[13 * (v49 >> 1)];
        int v57 = *((_DWORD *)v56 + 8);
        if ((v57 & 0x3FFFFFFF) == v52)
        {
          unsigned int v58 = v57 & 0x40000000;
          if (v53 == v58 >> 30)
          {
            if (LOBYTE(v48[13 * v55 + 3]))
            {
              long long v59 = &v48[13 * v55];
              size_t v60 = v59[2];
              if (v54 >= v60) {
                size_t v61 = v59[2];
              }
              else {
                size_t v61 = v54;
              }
              if (v61 && (v62 = memcmp((const void *)v56[1], __s1a, v61), v54 = v138, int v53 = v140, v62))
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_69;
                }
              }
              else if (v60 >= v54)
              {
                goto LABEL_69;
              }
            }
          }
          else if (!v58)
          {
            goto LABEL_69;
          }
        }
        else if ((v57 & 0x3FFFFFFFu) >= v52)
        {
          goto LABEL_69;
        }
        uint64_t v48 = v56 + 13;
        unint64_t v55 = v49 + ~v55;
LABEL_69:
        unint64_t v49 = v55;
        if (!v55)
        {
          uint64_t v63 = a7;
          goto LABEL_87;
        }
      }
    }
    uint64_t v48 = a2;
    uint64_t v63 = a7;
    while (2)
    {
      unint64_t v83 = v49 >> 1;
      std::string v84 = &v48[13 * (v49 >> 1)];
      unsigned int v85 = *((_DWORD *)v84 + 8);
      if ((v85 & 0x3FFFFFFF) == v52)
      {
        if ((v85 & 0x40000000) == 0 || ((v85 >> 30) & 1) == v53)
        {
LABEL_137:
          unint64_t v49 = v83;
          if (!v83)
          {
LABEL_87:
            uint64_t v23 = &a1[v10];
            goto LABEL_89;
          }
          continue;
        }
      }
      else if ((v85 & 0x3FFFFFFF) >= v52)
      {
        goto LABEL_137;
      }
      break;
    }
    uint64_t v48 = v84 + 13;
    unint64_t v83 = v49 + ~v83;
    goto LABEL_137;
  }
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  long long v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v10 = buffer + 4;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  *(void *)buffer = a3;
  buffer[2] = 0;
  *long long v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  long long v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

llvm::raw_ostream *anonymous namespace'::AliasState::printAliases(llvm::raw_ostream *result, unsigned int a2, llvm::raw_ostream **a3, _DWORD *a4, int a5)
{
  uint64_t i = result;
  if (a2)
  {
    uint64_t v9 = 32 * a2;
    for (uint64_t i = result; a5 != *((_DWORD *)i + 6) >> 31; uint64_t i = (llvm::raw_ostream *)((char *)i + 32))
    {
      v9 -= 32;
      if (!v9) {
        return result;
      }
    }
  }
  uint64_t v10 = (llvm::raw_ostream *)((char *)result + 32 * a2);
  if (i != v10)
  {
LABEL_7:
    BOOL v11 = *a3;
    if ((*((unsigned char *)i + 27) & 0x40) != 0) {
      uint64_t v12 = "!";
    }
    else {
      uint64_t v12 = "#";
    }
    uint64_t v13 = (char *)*((void *)v11 + 4);
    if (*((char **)v11 + 3) == v13)
    {
      uint64_t v15 = llvm::raw_ostream::write(*a3, v12, 1uLL);
      BOOL v14 = (void *)*((void *)v15 + 4);
      BOOL v16 = (const char *)*((void *)i + 1);
      size_t v17 = *((void *)i + 2);
      if (v17 > *((void *)v15 + 3) - (void)v14) {
        goto LABEL_12;
      }
    }
    else
    {
      *uint64_t v13 = *v12;
      BOOL v14 = (void *)(*((void *)v11 + 4) + 1);
      *((void *)v11 + 4) = v14;
      uint64_t v15 = v11;
      BOOL v16 = (const char *)*((void *)i + 1);
      size_t v17 = *((void *)i + 2);
      if (v17 > *((void *)v11 + 3) - (void)v14)
      {
LABEL_12:
        llvm::raw_ostream::write(v15, v16, v17);
        goto LABEL_16;
      }
    }
    if (v17)
    {
      memcpy(v14, v16, v17);
      *((void *)v15 + 4) += v17;
    }
LABEL_16:
    int v18 = *((_DWORD *)i + 6);
    if ((v18 & 0x3FFFFFFF) != 0) {
      llvm::raw_ostream::operator<<(v11, v18 & 0x3FFFFFFF);
    }
    unint64_t v19 = *a3;
    uint64_t v20 = *((void *)*a3 + 4);
    if ((unint64_t)(*((void *)*a3 + 3) - v20) > 2)
    {
      *(unsigned char *)(v20 + 2) = 32;
      *(_WORD *)uint64_t v20 = 15648;
      *((void *)v19 + 4) += 3;
      int v21 = *(uint64_t **)i;
      uint64_t v22 = **(void **)i;
      if ((*((unsigned char *)i + 27) & 0x40) != 0)
      {
LABEL_20:
        if (mlir::AbstractType::hasTrait<mlir::TypeTrait::IsMutable>(v22))
        {
          uint64_t v23 = *a3;
          unsigned int v26 = v21;
          mlir::Type::print((llvm::raw_ostream *)&v26, v23);
        }
        else
        {
          mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)a3, (uint64_t **)v21);
        }
        goto LABEL_27;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, " = ", 3uLL);
      int v21 = *(uint64_t **)i;
      uint64_t v22 = **(void **)i;
      if ((*((unsigned char *)i + 27) & 0x40) != 0) {
        goto LABEL_20;
      }
    }
    if (mlir::AbstractAttribute::hasTrait<mlir::AttributeTrait::IsMutable>(v22))
    {
      uint64_t v24 = *a3;
      unsigned int v26 = v21;
      mlir::Attribute::print((mlir::Attribute *)&v26, v24, 0);
    }
    else
    {
      mlir::AsmPrinter::Impl::printAttributeImpl(a3, (uint64_t **)v21, 0);
    }
LABEL_27:
    uint64_t result = *a3;
    ++*a4;
    uint64_t v25 = (unsigned char *)*((void *)result + 4);
    if ((unint64_t)v25 >= *((void *)result + 3))
    {
      uint64_t result = llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((void *)result + 4) = v25 + 1;
      *uint64_t v25 = 10;
    }
    while (1)
    {
      uint64_t i = (llvm::raw_ostream *)((char *)i + 32);
      if (i == v10) {
        break;
      }
      if (a5 == *((_DWORD *)i + 6) >> 31)
      {
        if (i != v10) {
          goto LABEL_7;
        }
        return result;
      }
    }
  }
  return result;
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJRNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  (**(void (***)(void))a1)(*(void *)(*(void *)a1 + 8));
  long long v35 = *(_OWORD *)(a1 + 8);
  uint64_t v36 = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = v10;
  if (!*(unsigned char *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
    uint64_t v13 = *(llvm::raw_ostream **)(v9 + 16);
    uint64_t v14 = *((void *)v13 + 4);
    if ((unint64_t)(*((void *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)uint64_t v14 = 538976288;
      uint64_t v15 = (_WORD *)(*((void *)v13 + 4) + 6);
      *((void *)v13 + 4) = v15;
      if (a3 <= *((void *)v13 + 3) - (void)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          uint64_t v15 = (_WORD *)(*((void *)v13 + 4) + a3);
          *((void *)v13 + 4) = v15;
        }
        if (*((void *)v13 + 3) - (void)v15 <= 1uLL) {
          goto LABEL_12;
        }
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      uint64_t v15 = (_WORD *)*((void *)v13 + 4);
      if (a3 <= *((void *)v13 + 3) - (void)v15) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    uint64_t v15 = (_WORD *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      uint64_t v19 = *(void *)(v9 + 16);
      a4(a5, v19);
      return;
    }
LABEL_21:
    *uint64_t v15 = 8250;
    *((void *)v13 + 4) += 2;
    goto LABEL_22;
  }
  size_t v11 = *(void *)(v9 + 48);
  std::string __p = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v23, 0, 0, 0);
  a4(a5, (uint64_t)&v23);
  size_t v12 = HIBYTE(v34);
  if (v34 < 0) {
    size_t v12 = v33;
  }
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
  BOOL v16 = *(llvm::raw_ostream **)(v9 + 16);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)uint64_t v17 = 538976288;
    int v18 = (_WORD *)(*((void *)v16 + 4) + 6);
    *((void *)v16 + 4) = v18;
    if (a3 <= *((void *)v16 + 3) - (void)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        int v18 = (_WORD *)(*((void *)v16 + 4) + a3);
        *((void *)v16 + 4) = v18;
      }
      if (*((void *)v16 + 3) - (void)v18 <= 1uLL) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
  }
  else
  {
    BOOL v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    int v18 = (_WORD *)*((void *)v16 + 4);
    if (a3 <= *((void *)v16 + 3) - (void)v18) {
      goto LABEL_15;
    }
  }
  BOOL v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  int v18 = (_WORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v18 <= 1uLL)
  {
LABEL_18:
    BOOL v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_28;
  }
LABEL_27:
  *int v18 = 8250;
  *((void *)v16 + 4) += 2;
LABEL_28:
  if (v34 >= 0) {
    uint64_t v20 = (const char *)&__p;
  }
  else {
    uint64_t v20 = (const char *)__p;
  }
  if (v34 >= 0) {
    size_t v21 = HIBYTE(v34);
  }
  else {
    size_t v21 = v33;
  }
  llvm::raw_ostream::write(v16, v20, v21);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (SHIBYTE(v34) < 0) {
    goto LABEL_35;
  }
}

llvm::raw_ostream *_ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv(unsigned __int8 **a1)
{
  int32x2_t v2 = a1[2];
  int v3 = **a1;
  **a1 = 1;
  if (!v3)
  {
    if (!*a1[1]) {
      goto LABEL_6;
    }
    uint64_t v4 = (llvm::raw_ostream *)*((void *)v2 + 2);
    unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if (*((unsigned char **)v4 + 3) == v5)
    {
      uint64_t v4 = llvm::raw_ostream::write(v4, ",", 1uLL);
      uint64_t v6 = (unsigned char *)*((void *)v4 + 4);
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v6 < *((void *)v4 + 3)) {
        goto LABEL_5;
      }
    }
    else
    {
      unsigned char *v5 = 44;
      uint64_t v6 = (unsigned char *)(*((void *)v4 + 4) + 1);
      *((void *)v4 + 4) = v6;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v6 < *((void *)v4 + 3))
      {
LABEL_5:
        *((void *)v4 + 4) = v6 + 1;
        *uint64_t v6 = 10;
LABEL_6:
        long long v7 = (llvm::raw_ostream *)*((void *)v2 + 2);
        uint64_t v8 = (_WORD *)*((void *)v7 + 4);
        if (*((void *)v7 + 3) - (void)v8 <= 1uLL) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }
    llvm::raw_ostream::write(v4, 10);
    long long v7 = (llvm::raw_ostream *)*((void *)v2 + 2);
    uint64_t v8 = (_WORD *)*((void *)v7 + 4);
    if (*((void *)v7 + 3) - (void)v8 <= 1uLL)
    {
LABEL_7:
      long long v7 = llvm::raw_ostream::write(v7, "  ", 2uLL);
      uint64_t v9 = (void *)*((void *)v7 + 4);
      long long v10 = a1[3];
      size_t v11 = *(const void **)v10;
      size_t v12 = *((void *)v10 + 1);
      if (v12 <= *((void *)v7 + 3) - (void)v9) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
LABEL_21:
    *uint64_t v8 = 8224;
    uint64_t v9 = (void *)(*((void *)v7 + 4) + 2);
    *((void *)v7 + 4) = v9;
    uint64_t v19 = a1[3];
    size_t v11 = *(const void **)v19;
    size_t v12 = *((void *)v19 + 1);
    if (v12 <= *((void *)v7 + 3) - (void)v9)
    {
LABEL_8:
      if (v12)
      {
        memcpy(v9, v11, v12);
        uint64_t v9 = (void *)(*((void *)v7 + 4) + v12);
        *((void *)v7 + 4) = v9;
      }
      if (*((void *)v7 + 3) - (void)v9 <= 0xCuLL)
      {
LABEL_11:
        long long v7 = llvm::raw_ostream::write(v7, "_resources: {", 0xDuLL);
        uint64_t v13 = (unsigned char *)*((void *)v7 + 4);
        ++*((_DWORD *)v2 + 18);
        if ((unint64_t)v13 >= *((void *)v7 + 3))
        {
LABEL_12:
          llvm::raw_ostream::write(v7, 10);
          goto LABEL_13;
        }
LABEL_24:
        *((void *)v7 + 4) = v13 + 1;
        *uint64_t v13 = 10;
        uint64_t v20 = a1[4];
        int v21 = *v20;
        *uint64_t v20 = 1;
        if (v21) {
          goto LABEL_14;
        }
LABEL_25:
        if (!*a1[5]) {
          goto LABEL_29;
        }
        uint64_t v22 = (llvm::raw_ostream *)*((void *)v2 + 2);
        uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
        if (*((unsigned char **)v22 + 3) == v23)
        {
          uint64_t v22 = llvm::raw_ostream::write(v22, ",", 1uLL);
          int v24 = (unsigned char *)*((void *)v22 + 4);
          ++*((_DWORD *)v2 + 18);
          if ((unint64_t)v24 < *((void *)v22 + 3)) {
            goto LABEL_28;
          }
        }
        else
        {
          *uint64_t v23 = 44;
          int v24 = (unsigned char *)(*((void *)v22 + 4) + 1);
          *((void *)v22 + 4) = v24;
          ++*((_DWORD *)v2 + 18);
          if ((unint64_t)v24 < *((void *)v22 + 3))
          {
LABEL_28:
            *((void *)v22 + 4) = v24 + 1;
            *int v24 = 10;
LABEL_29:
            uint64_t v25 = (llvm::raw_ostream *)*((void *)v2 + 2);
            uint64_t v26 = (_DWORD *)*((void *)v25 + 4);
            if (*((void *)v25 + 3) - (void)v26 <= 3uLL) {
              goto LABEL_30;
            }
            goto LABEL_41;
          }
        }
        llvm::raw_ostream::write(v22, 10);
        uint64_t v25 = (llvm::raw_ostream *)*((void *)v2 + 2);
        uint64_t v26 = (_DWORD *)*((void *)v25 + 4);
        if (*((void *)v25 + 3) - (void)v26 <= 3uLL)
        {
LABEL_30:
          uint64_t v25 = llvm::raw_ostream::write(v25, "    ", 4uLL);
          uint64_t result = (llvm::raw_ostream *)*((void *)v25 + 4);
          uint64_t v27 = a1[6];
          char v28 = *(const void **)v27;
          size_t v29 = *((void *)v27 + 1);
          if (v29 <= *((void *)v25 + 3) - (void)result) {
            goto LABEL_31;
          }
          goto LABEL_42;
        }
LABEL_41:
        _DWORD *v26 = 538976288;
        uint64_t result = (llvm::raw_ostream *)(*((void *)v25 + 4) + 4);
        *((void *)v25 + 4) = result;
        int v30 = a1[6];
        char v28 = *(const void **)v30;
        size_t v29 = *((void *)v30 + 1);
        if (v29 <= *((void *)v25 + 3) - (void)result)
        {
LABEL_31:
          if (v29)
          {
            memcpy(result, v28, v29);
            uint64_t result = (llvm::raw_ostream *)(*((void *)v25 + 4) + v29);
            *((void *)v25 + 4) = result;
          }
          if (*((void *)v25 + 3) - (void)result <= 2uLL)
          {
LABEL_34:
            uint64_t result = llvm::raw_ostream::write(v25, ": {", 3uLL);
            uint64_t v25 = result;
            int v18 = (unsigned char *)*((void *)result + 4);
            ++*((_DWORD *)v2 + 18);
            if ((unint64_t)v18 >= *((void *)result + 3))
            {
LABEL_35:
              uint64_t result = v25;
              goto LABEL_36;
            }
LABEL_44:
            *((void *)v25 + 4) = v18 + 1;
            goto LABEL_45;
          }
LABEL_43:
          *((unsigned char *)result + 2) = 123;
          *(_WORD *)uint64_t result = 8250;
          int v18 = (unsigned char *)(*((void *)v25 + 4) + 3);
          *((void *)v25 + 4) = v18;
          ++*((_DWORD *)v2 + 18);
          if ((unint64_t)v18 >= *((void *)v25 + 3)) {
            goto LABEL_35;
          }
          goto LABEL_44;
        }
LABEL_42:
        uint64_t v25 = llvm::raw_ostream::write(v25, (const char *)v28, v29);
        uint64_t result = (llvm::raw_ostream *)*((void *)v25 + 4);
        if (*((void *)v25 + 3) - (void)result <= 2uLL) {
          goto LABEL_34;
        }
        goto LABEL_43;
      }
LABEL_23:
      qmemcpy(v9, "_resources: {", 13);
      uint64_t v13 = (unsigned char *)(*((void *)v7 + 4) + 13);
      *((void *)v7 + 4) = v13;
      ++*((_DWORD *)v2 + 18);
      if ((unint64_t)v13 >= *((void *)v7 + 3)) {
        goto LABEL_12;
      }
      goto LABEL_24;
    }
LABEL_22:
    long long v7 = llvm::raw_ostream::write(v7, (const char *)v11, v12);
    uint64_t v9 = (void *)*((void *)v7 + 4);
    if (*((void *)v7 + 3) - (void)v9 <= 0xCuLL) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v14 = a1[4];
  int v15 = *v14;
  *uint64_t v14 = 1;
  if (!v15) {
    goto LABEL_25;
  }
LABEL_14:
  uint64_t result = (llvm::raw_ostream *)*((void *)v2 + 2);
  uint64_t v17 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) != v17)
  {
    *uint64_t v17 = 44;
    int v18 = (unsigned char *)(*((void *)result + 4) + 1);
    *((void *)result + 4) = v18;
    ++*((_DWORD *)v2 + 18);
    if ((unint64_t)v18 >= *((void *)result + 3)) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }
  uint64_t result = llvm::raw_ostream::write(result, ",", 1uLL);
  int v18 = (unsigned char *)*((void *)result + 4);
  ++*((_DWORD *)v2 + 18);
  if ((unint64_t)v18 < *((void *)result + 3))
  {
LABEL_18:
    *((void *)result + 4) = v18 + 1;
LABEL_45:
    *int v18 = 10;
    return result;
  }
LABEL_36:

  return llvm::raw_ostream::write(result, 10);
}

uint64_t anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v6 = a4;
  unint64_t v5 = &v6;
}

uint64_t anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a4;
  v7[1] = a5;
  char v6 = v7;
}

uint64_t anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v9[0] = a4;
  v9[1] = a5;
  int v8 = a6;
  v7[0] = &v8;
  v7[1] = v9;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::OperationPrinter::ResourceBuilder::buildBool(llvm::StringRef,BOOL)::{lambda(llvm::raw_ostream &)#1}>(unsigned char **a1, llvm::raw_ostream *this)
{
  if (**a1) {
    int v3 = "true";
  }
  else {
    int v3 = "false";
  }
  if (**a1) {
    size_t v4 = 4;
  }
  else {
    size_t v4 = 5;
  }
  unint64_t v5 = (void *)*((void *)this + 4);
  if (v4 <= *((void *)this + 3) - (void)v5)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(v5, v3, v4);
    *((void *)this + 4) += v4;
  }
  else
  {
    return llvm::raw_ostream::write(this, v3, v4);
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::OperationPrinter::ResourceBuilder::buildString(llvm::StringRef,llvm::StringRef)::{lambda(llvm::raw_ostream &)#1}>(llvm::raw_ostream ***a1, llvm::raw_ostream *this)
{
  size_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *size_t v4 = 34;
    ++*((void *)this + 4);
  }
  uint64_t result = llvm::printEscapedString(**a1, (uint64_t)(*a1)[1], this);
  char v6 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v6)
  {
    return llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *char v6 = 34;
    ++*((void *)this + 4);
  }
  return result;
}

void llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::OperationPrinter::ResourceBuilder::buildBlob(llvm::StringRef,llvm::ArrayRef<char>,unsigned int)::{lambda(llvm::raw_ostream &)#1}>(int **a1, llvm::raw_ostream *this)
{
  int32x2_t v2 = this;
  int v16 = **a1;
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v4) > 2)
  {
    *(unsigned char *)(v4 + 2) = 120;
    *(_WORD *)uint64_t v4 = 12322;
    *((void *)this + 4) += 3;
  }
  else
  {
    int32x2_t v2 = llvm::raw_ostream::write(this, "\"0x", 3uLL);
  }
  llvm::toHex(4uLL, (unsigned __int8 *)&v16, 0, v14);
  if ((v15 & 0x80u) == 0) {
    unint64_t v5 = v14;
  }
  else {
    unint64_t v5 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    size_t v6 = v15;
  }
  else {
    size_t v6 = (size_t)v14[1];
  }
  long long v7 = llvm::raw_ostream::write(v2, (const char *)v5, v6);
  llvm::toHex(*((void *)a1[1] + 1), *(unsigned __int8 **)a1[1], 0, __p);
  if ((v13 & 0x80u) == 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    size_t v9 = v13;
  }
  else {
    size_t v9 = (size_t)__p[1];
  }
  long long v10 = llvm::raw_ostream::write(v7, (const char *)v8, v9);
  size_t v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "\"", 1uLL);
    if (((char)v13 & 0x80000000) == 0)
    {
LABEL_18:
      if (((char)v15 & 0x80000000) == 0) {
        return;
      }
LABEL_22:
      operator delete(v14[0]);
      return;
    }
  }
  else
  {
    *size_t v11 = 34;
    ++*((void *)v10 + 4);
    if (((char)v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  operator delete(__p[0]);
  if ((char)v15 < 0) {
    goto LABEL_22;
  }
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_21OpAsmDialectInterfaceEJNS_9SetVectorINSD_24AsmDialectResourceHandleENS_11SmallVectorISL_Lj0EEENS_8DenseSetISL_NS_12DenseMapInfoISL_vEEEELj0EEEEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  (**(void (***)(void))a1)(*(void *)(*(void *)a1 + 8));
  long long v35 = *(_OWORD *)(a1 + 8);
  uint64_t v36 = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = v10;
  if (!*(unsigned char *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
    unsigned __int8 v13 = *(llvm::raw_ostream **)(v9 + 16);
    uint64_t v14 = *((void *)v13 + 4);
    if ((unint64_t)(*((void *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)uint64_t v14 = 538976288;
      unsigned __int8 v15 = (_WORD *)(*((void *)v13 + 4) + 6);
      *((void *)v13 + 4) = v15;
      if (a3 <= *((void *)v13 + 3) - (void)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          unsigned __int8 v15 = (_WORD *)(*((void *)v13 + 4) + a3);
          *((void *)v13 + 4) = v15;
        }
        if (*((void *)v13 + 3) - (void)v15 <= 1uLL) {
          goto LABEL_12;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unsigned __int8 v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      unsigned __int8 v15 = (_WORD *)*((void *)v13 + 4);
      if (a3 <= *((void *)v13 + 3) - (void)v15) {
        goto LABEL_9;
      }
    }
    unsigned __int8 v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    unsigned __int8 v15 = (_WORD *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      uint64_t v19 = *(void *)(v9 + 16);
      a4(a5, v19);
      return;
    }
LABEL_21:
    *unsigned __int8 v15 = 8250;
    *((void *)v13 + 4) += 2;
    goto LABEL_22;
  }
  size_t v11 = *(void *)(v9 + 48);
  std::string __p = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v23, 0, 0, 0);
  a4(a5, (uint64_t)&v23);
  size_t v12 = HIBYTE(v34);
  if (v34 < 0) {
    size_t v12 = v33;
  }
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
  int v16 = *(llvm::raw_ostream **)(v9 + 16);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)uint64_t v17 = 538976288;
    int v18 = (_WORD *)(*((void *)v16 + 4) + 6);
    *((void *)v16 + 4) = v18;
    if (a3 <= *((void *)v16 + 3) - (void)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        int v18 = (_WORD *)(*((void *)v16 + 4) + a3);
        *((void *)v16 + 4) = v18;
      }
      if (*((void *)v16 + 3) - (void)v18 <= 1uLL) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
  }
  else
  {
    int v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    int v18 = (_WORD *)*((void *)v16 + 4);
    if (a3 <= *((void *)v16 + 3) - (void)v18) {
      goto LABEL_15;
    }
  }
  int v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  int v18 = (_WORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v18 <= 1uLL)
  {
LABEL_18:
    int v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_28;
  }
LABEL_27:
  *int v18 = 8250;
  *((void *)v16 + 4) += 2;
LABEL_28:
  if (v34 >= 0) {
    uint64_t v20 = (const char *)&__p;
  }
  else {
    uint64_t v20 = (const char *)__p;
  }
  if (v34 >= 0) {
    size_t v21 = HIBYTE(v34);
  }
  else {
    size_t v21 = v33;
  }
  llvm::raw_ostream::write(v16, v20, v21);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (SHIBYTE(v34) < 0) {
    goto LABEL_35;
  }
}

void _ZN4llvm12function_refIFvNS_9StringRefENS0_IFvRNS_11raw_ostreamEEEEEE11callback_fnIZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataENS0_IFvvEEEPN4mlir9OperationEENK3__0clIKNSD_18AsmResourcePrinterEJEEEDaS1_S1_RT_DpOT0_EUlS1_S5_E_EEvlS1_S5_(uint64_t a1, const void *a2, size_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  (**(void (***)(void))a1)(*(void *)(*(void *)a1 + 8));
  long long v35 = *(_OWORD *)(a1 + 8);
  uint64_t v36 = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = v10;
  if (!*(unsigned char *)(v9 + 56))
  {
    _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
    unsigned __int8 v13 = *(llvm::raw_ostream **)(v9 + 16);
    uint64_t v14 = *((void *)v13 + 4);
    if ((unint64_t)(*((void *)v13 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 8224;
      *(_DWORD *)uint64_t v14 = 538976288;
      unsigned __int8 v15 = (_WORD *)(*((void *)v13 + 4) + 6);
      *((void *)v13 + 4) = v15;
      if (a3 <= *((void *)v13 + 3) - (void)v15)
      {
LABEL_9:
        if (a3)
        {
          memcpy(v15, a2, a3);
          unsigned __int8 v15 = (_WORD *)(*((void *)v13 + 4) + a3);
          *((void *)v13 + 4) = v15;
        }
        if (*((void *)v13 + 3) - (void)v15 <= 1uLL) {
          goto LABEL_12;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unsigned __int8 v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
      unsigned __int8 v15 = (_WORD *)*((void *)v13 + 4);
      if (a3 <= *((void *)v13 + 3) - (void)v15) {
        goto LABEL_9;
      }
    }
    unsigned __int8 v13 = llvm::raw_ostream::write(v13, (const char *)a2, a3);
    unsigned __int8 v15 = (_WORD *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v15 <= 1uLL)
    {
LABEL_12:
      llvm::raw_ostream::write(v13, ": ", 2uLL);
LABEL_22:
      uint64_t v19 = *(void *)(v9 + 16);
      a4(a5, v19);
      return;
    }
LABEL_21:
    *unsigned __int8 v15 = 8250;
    *((void *)v13 + 4) += 2;
    goto LABEL_22;
  }
  size_t v11 = *(void *)(v9 + 48);
  std::string __p = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v23, 0, 0, 0);
  a4(a5, (uint64_t)&v23);
  size_t v12 = HIBYTE(v34);
  if (v34 < 0) {
    size_t v12 = v33;
  }
  if (v12 > v11)
  {
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(__p);
    return;
  }
  _ZZZZN12_GLOBAL__N_116OperationPrinter25printResourceFileMetadataEN4llvm12function_refIFvvEEEPN4mlir9OperationEENK3__0clIKNS5_21OpAsmDialectInterfaceEJRNS1_9SetVectorINS5_24AsmDialectResourceHandleENS1_11SmallVectorISD_Lj0EEENS1_8DenseSetISD_NS1_12DenseMapInfoISD_vEEEELj0EEEEEEDaNS1_9StringRefESN_RT_DpOT0_ENKUlSN_NS2_IFvRNS1_11raw_ostreamEEEEE_clESN_SW_ENKUlvE_clEv((unsigned __int8 **)&v35);
  int v16 = *(llvm::raw_ostream **)(v9 + 16);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8224;
    *(_DWORD *)uint64_t v17 = 538976288;
    int v18 = (_WORD *)(*((void *)v16 + 4) + 6);
    *((void *)v16 + 4) = v18;
    if (a3 <= *((void *)v16 + 3) - (void)v18)
    {
LABEL_15:
      if (a3)
      {
        memcpy(v18, a2, a3);
        int v18 = (_WORD *)(*((void *)v16 + 4) + a3);
        *((void *)v16 + 4) = v18;
      }
      if (*((void *)v16 + 3) - (void)v18 <= 1uLL) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
  }
  else
  {
    int v16 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(v9 + 16), "      ", 6uLL);
    int v18 = (_WORD *)*((void *)v16 + 4);
    if (a3 <= *((void *)v16 + 3) - (void)v18) {
      goto LABEL_15;
    }
  }
  int v16 = llvm::raw_ostream::write(v16, (const char *)a2, a3);
  int v18 = (_WORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v18 <= 1uLL)
  {
LABEL_18:
    int v16 = llvm::raw_ostream::write(v16, ": ", 2uLL);
    goto LABEL_28;
  }
LABEL_27:
  *int v18 = 8250;
  *((void *)v16 + 4) += 2;
LABEL_28:
  if (v34 >= 0) {
    uint64_t v20 = (const char *)&__p;
  }
  else {
    uint64_t v20 = (const char *)__p;
  }
  if (v34 >= 0) {
    size_t v21 = HIBYTE(v34);
  }
  else {
    size_t v21 = v33;
  }
  llvm::raw_ostream::write(v16, v20, v21);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (SHIBYTE(v34) < 0) {
    goto LABEL_35;
  }
}

llvm::raw_ostream *llvm::function_ref<void ()(void)>::callback_fn<anonymous namespace'::OperationPrinter::printFileMetadataDictionary(mlir::Operation *)::$_0>(llvm::raw_ostream *result)
{
  uint64_t v1 = *((void *)result + 1);
  int v2 = **(unsigned __int8 **)result;
  **(unsigned char **)uint64_t result = 1;
  if (v2) {
    return result;
  }
  uint64_t result = *(llvm::raw_ostream **)(v1 + 16);
  ++*(_DWORD *)(v1 + 72);
  int v3 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v3 < *((void *)result + 3))
  {
    *((void *)result + 4) = v3 + 1;
    *int v3 = 10;
    uint64_t v4 = *((void *)result + 4);
    if ((unint64_t)(*((void *)result + 3) - v4) > 2) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t result = llvm::raw_ostream::write(result, "{-#", 3uLL);
    unint64_t v5 = (unsigned char *)*((void *)result + 4);
    ++*(_DWORD *)(v1 + 72);
    if ((unint64_t)v5 >= *((void *)result + 3)) {
      goto LABEL_5;
    }
LABEL_10:
    *((void *)result + 4) = v5 + 1;
    unsigned char *v5 = 10;
    return result;
  }
  uint64_t result = llvm::raw_ostream::write(result, 10);
  uint64_t v4 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v4) <= 2) {
    goto LABEL_9;
  }
LABEL_4:
  *(unsigned char *)(v4 + 2) = 35;
  *(_WORD *)uint64_t v4 = 11643;
  unint64_t v5 = (unsigned char *)(*((void *)result + 4) + 3);
  *((void *)result + 4) = v5;
  ++*(_DWORD *)(v1 + 72);
  if ((unint64_t)v5 < *((void *)result + 3)) {
    goto LABEL_10;
  }
LABEL_5:

  return llvm::raw_ostream::write(result, 10);
}

llvm::raw_ostream *anonymous namespace'::OperationPrinter::printOperationID(llvm::raw_ostream *this, mlir::Operation *a2, llvm::raw_ostream *a3, uint64_t a4)
{
  if (a3)
  {
    LODWORD(v4) = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
    unint64_t v5 = (unsigned int *)((char *)a2 + 16 * v4);
    uint64_t v6 = *(void *)v5;
    if (*(void *)v5 == a4) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (a3 - 1);
      uint64_t v6 = *((void *)a2 + 2 * v4);
      if (v6 == a4)
      {
        unint64_t v5 = (unsigned int *)((char *)a2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  unint64_t v5 = (unsigned int *)((char *)a2 + 16 * a3);
LABEL_8:
  if (v5 == (unsigned int *)((char *)a2 + 16 * a3))
  {
    size_t v11 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v11 > 0x14uLL)
    {
      qmemcpy(v11, "<<UNKNOWN OPERATION>>", 21);
      *((void *)this + 4) += 21;
    }
    else
    {
      return llvm::raw_ostream::write(this, "<<UNKNOWN OPERATION>>", 0x15uLL);
    }
  }
  else
  {
    uint64_t v9 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v9 >= *((void *)this + 3))
    {
      this = llvm::raw_ostream::write(this, 37);
      unint64_t v10 = v5[2];
    }
    else
    {
      *((void *)this + 4) = v9 + 1;
      unsigned char *v9 = 37;
      unint64_t v10 = v5[2];
    }
    return llvm::raw_ostream::operator<<(this, v10);
  }
  return this;
}

void anonymous namespace'::OperationPrinter::printValueUsers(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v4 = *(llvm::raw_ostream **)(a1 + 16);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25701;
      *(_DWORD *)uint64_t v5 = 1937075829;
      *((void *)v4 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v4, "unused", 6uLL);
    }
  }
  int v24 = &v28;
  uint64_t v25 = &v28;
  uint64_t v26 = 1;
  int v27 = 0;
  uint64_t v6 = (void *)*a2;
  if (*a2)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v8 = v6[2];
      if (v25 != v24) {
        break;
      }
      uint64_t v14 = HIDWORD(v26);
      if (HIDWORD(v26))
      {
        unsigned __int8 v15 = 0;
        uint64_t v16 = 8 * HIDWORD(v26);
        uint64_t v17 = v25;
        do
        {
          if (*v17 == v8)
          {
            int v10 = 0;
            goto LABEL_11;
          }
          if (*v17 == -2) {
            unsigned __int8 v15 = v17;
          }
          ++v17;
          v16 -= 8;
        }
        while (v16);
        if (!v15) {
          goto LABEL_32;
        }
        *unsigned __int8 v15 = v8;
        --v27;
        int v10 = 1;
      }
      else
      {
LABEL_32:
        if (HIDWORD(v26) >= v26) {
          break;
        }
        ++HIDWORD(v26);
        v25[v14] = v8;
        int v10 = 1;
      }
LABEL_11:
      if (!v10) {
        goto LABEL_8;
      }
      if (i)
      {
        size_t v11 = *(llvm::raw_ostream **)(a1 + 16);
        size_t v12 = (_WORD *)*((void *)v11 + 4);
        if (*((void *)v11 + 3) - (void)v12 > 1uLL)
        {
          *size_t v12 = 8236;
          *((void *)v11 + 4) += 2;
          uint64_t v13 = *(unsigned int *)(v8 + 36);
          if (v13)
          {
LABEL_26:
            uint64_t v18 = v8 - 16;
            uint64_t v19 = *(llvm::raw_ostream **)(a1 + 16);
            unint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
            if (v13 != 1)
            {
              for (uint64_t j = 1; j != v13; ++j)
              {
                uint64_t v23 = (_WORD *)*((void *)v19 + 4);
                if (*((void *)v19 + 3) - (void)v23 > 1uLL)
                {
                  *uint64_t v23 = 8236;
                  *((void *)v19 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v19, ", ", 2uLL);
                }
                unint64_t v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, j);
              }
            }
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        llvm::raw_ostream::write(v11, ", ", 2uLL);
      }
      uint64_t v13 = *(unsigned int *)(v8 + 36);
      if (v13) {
        goto LABEL_26;
      }
LABEL_7:
LABEL_8:
      uint64_t v6 = (void *)*v6;
      if (!v6)
      {
        if (v25 != v24) {
          free(v25);
        }
        return;
      }
    }
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v24, (const void *)v6[2]);
    int v10 = v9;
    goto LABEL_11;
  }
}

void anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(a1 + 16);
  uint64_t v5 = *(llvm::raw_ostream **)v4;
  uint64_t v6 = *(_WORD **)(*(void *)v4 + 32);
  if (*(void *)(*(void *)v4 + 24) - (void)v6 > 1uLL)
  {
    *uint64_t v6 = 8250;
    *((void *)v5 + 4) += 2;
    int v7 = (uint64_t **)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
    {
LABEL_3:
      if (!mlir::AsmPrinter::Impl::printAlias((uint64_t)v4, (uint64_t)v7))
      {
        mlir::AsmPrinter::Impl::printTypeImpl((uint64_t)v4, v7);
        if ((*(unsigned char *)(a1 + 64) & 1) == 0) {
          return;
        }
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, ": ", 2uLL);
    int v7 = (uint64_t **)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = *(llvm::raw_ostream **)v4;
  unsigned __int8 v9 = *(void **)(*(void *)v4 + 32);
  if (*(void *)(*(void *)v4 + 24) - (void)v9 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v8, "<<NULL TYPE>>", 0xDuLL);
LABEL_9:
    if ((*(unsigned char *)(a1 + 64) & 1) == 0) {
      return;
    }
    goto LABEL_10;
  }
  qmemcpy(v9, "<<NULL TYPE>>", 13);
  *((void *)v8 + 4) += 13;
  if ((*(unsigned char *)(a1 + 64) & 1) == 0) {
    return;
  }
LABEL_10:
  uint64_t v10 = *(void *)(a2 + 32);
  size_t v11 = *(llvm::raw_ostream **)v4;
  size_t v12 = *(unsigned char **)(*(void *)v4 + 32);
  if (*(unsigned char **)(*(void *)v4 + 24) == v12)
  {
    llvm::raw_ostream::write(v11, " ", 1uLL);
    if ((*(unsigned char *)(a1 + 64) & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *size_t v12 = 32;
    ++*((void *)v11 + 4);
    if ((*(unsigned char *)(a1 + 64) & 2) == 0)
    {
LABEL_12:
      uint64_t v13 = *(llvm::raw_ostream **)v4;
      uint64_t v14 = *(_DWORD **)(*(void *)v4 + 32);
      if (*(void *)(*(void *)v4 + 24) - (void)v14 > 3uLL)
      {
        *uint64_t v14 = 677605228;
        *((void *)v13 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v13, "loc(", 4uLL);
      }
      mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 0, 1);
      unsigned __int8 v15 = *(llvm::raw_ostream **)v4;
      uint64_t v16 = *(unsigned char **)(*(void *)v4 + 32);
      if ((unint64_t)v16 >= *(void *)(*(void *)v4 + 24))
      {
        llvm::raw_ostream::write(v15, 41);
      }
      else
      {
        *((void *)v15 + 4) = v16 + 1;
        *uint64_t v16 = 41;
      }
      return;
    }
  }

  mlir::AsmPrinter::Impl::printLocationInternal(v4, v10, 1, 1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,anonymous namespace'::BlockInfo *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  size_t v11 = (int *)(a2 - 24);
  size_t v12 = (int *)(a2 - 48);
  uint64_t v13 = (int *)(a2 - 72);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 575)
    {
      unint64_t v107 = v14 + 24;
      BOOL v109 = v14 == a2 || v107 == a2;
      if (a4)
      {
        if (!v109)
        {
          uint64_t v110 = 0;
          unint64_t v111 = v14;
          do
          {
            unint64_t v113 = v107;
            int v114 = *(_DWORD *)(v111 + 24);
            if (v114 < *(_DWORD *)v111)
            {
              __n128 v180 = *(__n128 *)(v111 + 28);
              int v207 = *(_DWORD *)(v111 + 44);
              uint64_t v115 = v110;
              do
              {
                uint64_t v116 = v14 + v115;
                *(_OWORD *)(v116 + 24) = *(_OWORD *)(v14 + v115);
                *(void *)(v116 + 40) = *(void *)(v14 + v115 + 16);
                if (!v115)
                {
                  uint64_t v112 = v14;
                  goto LABEL_121;
                }
                v115 -= 24;
              }
              while (v114 < *(_DWORD *)(v116 - 24));
              uint64_t v112 = v14 + v115 + 24;
LABEL_121:
              *(_DWORD *)uint64_t v112 = v114;
              uint64_t result = v180;
              *(_DWORD *)(v112 + 20) = v207;
              *(__n128 *)(v112 + 4) = v180;
            }
            unint64_t v107 = v113 + 24;
            v110 += 24;
            unint64_t v111 = v113;
          }
          while (v113 + 24 != a2);
        }
      }
      else if (!v109)
      {
        do
        {
          unint64_t v148 = v107;
          int v149 = *(_DWORD *)(a1 + 24);
          if (v149 < *(_DWORD *)a1)
          {
            __n128 v184 = *(__n128 *)(a1 + 28);
            int v211 = *(_DWORD *)(a1 + 44);
            do
            {
              *(_OWORD *)unint64_t v107 = *(_OWORD *)(v107 - 24);
              *(void *)(v107 + 16) = *(void *)(v107 - 8);
              int v150 = *(_DWORD *)(v107 - 48);
              v107 -= 24;
            }
            while (v149 < v150);
            *(_DWORD *)unint64_t v107 = v149;
            uint64_t result = v184;
            *(_DWORD *)(v107 + 20) = v211;
            *(__n128 *)(v107 + 4) = v184;
          }
          unint64_t v107 = v148 + 24;
          a1 = v148;
        }
        while (v148 + 24 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v117 = (unint64_t)(v16 - 2) >> 1;
        int64_t v118 = v117;
        do
        {
          if (v117 >= v118)
          {
            uint64_t v119 = (2 * v118) | 1;
            unint64_t v120 = v14 + 24 * v119;
            int v121 = *(_DWORD *)v120;
            if (2 * v118 + 2 < v16)
            {
              int v122 = *(_DWORD *)(v120 + 24);
              BOOL v123 = v121 < v122;
              if (v121 <= v122) {
                int v121 = *(_DWORD *)(v120 + 24);
              }
              if (v123)
              {
                v120 += 24;
                uint64_t v119 = 2 * v118 + 2;
              }
            }
            unint64_t v124 = v14 + 24 * v118;
            int v125 = *(_DWORD *)v124;
            if (v121 >= *(_DWORD *)v124)
            {
              int v208 = *(_DWORD *)(v124 + 20);
              long long v181 = *(_OWORD *)(v124 + 4);
              while (1)
              {
                unint64_t v129 = v124;
                unint64_t v124 = v120;
                long long v130 = *(_OWORD *)v120;
                *(void *)(v129 + 16) = *(void *)(v120 + 16);
                *(_OWORD *)unint64_t v129 = v130;
                if (v117 < v119) {
                  break;
                }
                uint64_t v131 = (2 * v119) | 1;
                unint64_t v120 = v14 + 24 * v131;
                uint64_t v119 = 2 * v119 + 2;
                int v128 = *(_DWORD *)v120;
                if (v119 < v16)
                {
                  int v126 = *(_DWORD *)(v120 + 24);
                  BOOL v127 = v128 < v126;
                  if (v128 <= v126) {
                    int v128 = *(_DWORD *)(v120 + 24);
                  }
                  if (v127) {
                    v120 += 24;
                  }
                  else {
                    uint64_t v119 = v131;
                  }
                  if (v128 < v125) {
                    break;
                  }
                }
                else
                {
                  uint64_t v119 = v131;
                  if (v128 < v125) {
                    break;
                  }
                }
              }
              *(_DWORD *)unint64_t v124 = v125;
              *(_DWORD *)(v124 + 20) = v208;
              *(_OWORD *)(v124 + 4) = v181;
            }
          }
          BOOL v123 = v118-- <= 0;
        }
        while (!v123);
        int64_t v132 = v15 / 0x18uLL;
        do
        {
          uint64_t v133 = 0;
          uint64_t v209 = *(void *)(v14 + 16);
          __n128 v182 = *(__n128 *)v14;
          unint64_t v134 = v14;
          do
          {
            uint64_t v136 = v134 + 24 * v133 + 24;
            uint64_t v137 = (2 * v133) | 1;
            uint64_t v138 = 2 * v133 + 2;
            if (v138 < v132 && *(_DWORD *)v136 < *(_DWORD *)(v136 + 24))
            {
              v136 += 24;
              uint64_t v137 = v138;
            }
            long long v135 = *(_OWORD *)v136;
            *(void *)(v134 + 16) = *(void *)(v136 + 16);
            *(_OWORD *)unint64_t v134 = v135;
            unint64_t v134 = v136;
            uint64_t v133 = v137;
          }
          while (v137 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
          a2 -= 24;
          if (v136 == a2)
          {
            uint64_t result = v182;
            *(void *)(v136 + 16) = v209;
            *(__n128 *)uint64_t v136 = v182;
          }
          else
          {
            long long v139 = *(_OWORD *)a2;
            *(void *)(v136 + 16) = *(void *)(a2 + 16);
            *(_OWORD *)uint64_t v136 = v139;
            uint64_t result = v182;
            *(void *)(a2 + 16) = v209;
            *(__n128 *)a2 = v182;
            uint64_t v140 = v136 - v14 + 24;
            if (v140 >= 25)
            {
              unint64_t v141 = (v140 / 0x18uLL - 2) >> 1;
              uint64_t v142 = v14 + 24 * v141;
              int v143 = *(_DWORD *)v136;
              if (*(_DWORD *)v142 < *(_DWORD *)v136)
              {
                int v158 = *(_DWORD *)(v136 + 20);
                __n128 v155 = *(__n128 *)(v136 + 4);
                do
                {
                  uint64_t v144 = v136;
                  uint64_t v136 = v142;
                  long long v145 = *(_OWORD *)v142;
                  *(void *)(v144 + 16) = *(void *)(v142 + 16);
                  *(_OWORD *)uint64_t v144 = v145;
                  if (!v141) {
                    break;
                  }
                  unint64_t v141 = (v141 - 1) >> 1;
                  uint64_t v142 = v14 + 24 * v141;
                }
                while (*(_DWORD *)v142 < v143);
                *(_DWORD *)uint64_t v136 = v143;
                uint64_t result = v155;
                *(_DWORD *)(v136 + 20) = v158;
                *(__n128 *)(v136 + 4) = v155;
              }
            }
          }
          BOOL v123 = v132-- <= 2;
        }
        while (!v123);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 24 * ((unint64_t)v16 >> 1);
    int v19 = *v11;
    if ((unint64_t)v15 < 0xC01)
    {
      int v22 = *(_DWORD *)v14;
      if (*(_DWORD *)v14 < *(_DWORD *)v18)
      {
        if (v19 < v22)
        {
          uint64_t v187 = *(void *)(v18 + 16);
          __n128 v160 = *(__n128 *)v18;
          long long v23 = *(_OWORD *)v11;
          *(void *)(v18 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v18 = v23;
          goto LABEL_31;
        }
        uint64_t v194 = *(void *)(v18 + 16);
        __n128 v167 = *(__n128 *)v18;
        __n128 v44 = *(__n128 *)v14;
        *(void *)(v18 + 16) = *(void *)(v14 + 16);
        *(__n128 *)unint64_t v18 = v44;
        *(void *)(v14 + 16) = v194;
        *(__n128 *)unint64_t v14 = v167;
        if (*v11 < *(_DWORD *)v14)
        {
          uint64_t v187 = *(void *)(v14 + 16);
          __n128 v160 = *(__n128 *)v14;
          long long v45 = *(_OWORD *)v11;
          *(void *)(v14 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v14 = v45;
LABEL_31:
          *(void *)(a2 - 8) = v187;
          *(__n128 *)size_t v11 = v160;
        }
LABEL_32:
        --a3;
        int v28 = *(_DWORD *)v14;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v22) {
        goto LABEL_32;
      }
      uint64_t v190 = *(void *)(v14 + 16);
      __n128 v163 = *(__n128 *)v14;
      long long v26 = *(_OWORD *)v11;
      *(void *)(v14 + 16) = *(void *)(a2 - 8);
      *(_OWORD *)unint64_t v14 = v26;
      *(void *)(a2 - 8) = v190;
      *(__n128 *)size_t v11 = v163;
      if (*(_DWORD *)v14 >= *(_DWORD *)v18) {
        goto LABEL_32;
      }
      uint64_t v191 = *(void *)(v18 + 16);
      __n128 v164 = *(__n128 *)v18;
      __n128 v27 = *(__n128 *)v14;
      *(void *)(v18 + 16) = *(void *)(v14 + 16);
      *(__n128 *)unint64_t v18 = v27;
      *(void *)(v14 + 16) = v191;
      *(__n128 *)unint64_t v14 = v164;
      --a3;
      int v28 = *(_DWORD *)v14;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(_DWORD *)(v14 - 24) < v28) {
        goto LABEL_57;
      }
      int v157 = *(_DWORD *)(v14 + 20);
      __n128 v154 = *(__n128 *)(v14 + 4);
      if (v28 < *v11)
      {
        do
        {
          int v83 = *(_DWORD *)(v14 + 24);
          v14 += 24;
        }
        while (v28 >= v83);
      }
      else
      {
        unint64_t v84 = v14 + 24;
        do
        {
          unint64_t v14 = v84;
          if (v84 >= a2) {
            break;
          }
          v84 += 24;
        }
        while (v28 >= *(_DWORD *)v14);
      }
      unint64_t v85 = a2;
      if (v14 < a2)
      {
        unint64_t v85 = a2;
        do
        {
          int v86 = *(_DWORD *)(v85 - 24);
          v85 -= 24;
        }
        while (v28 < v86);
      }
      while (v14 < v85)
      {
        uint64_t v204 = *(void *)(v14 + 16);
        __n128 v177 = *(__n128 *)v14;
        long long v87 = *(_OWORD *)v85;
        *(void *)(v14 + 16) = *(void *)(v85 + 16);
        *(_OWORD *)unint64_t v14 = v87;
        *(void *)(v85 + 16) = v204;
        *(__n128 *)unint64_t v85 = v177;
        do
        {
          int v88 = *(_DWORD *)(v14 + 24);
          v14 += 24;
        }
        while (v28 >= v88);
        do
        {
          int v89 = *(_DWORD *)(v85 - 24);
          v85 -= 24;
        }
        while (v28 < v89);
      }
      BOOL v5 = v14 - 24 >= a1;
      BOOL v6 = v14 - 24 == a1;
      if (v14 - 24 != a1)
      {
        long long v90 = *(_OWORD *)(v14 - 24);
        *(void *)(a1 + 16) = *(void *)(v14 - 8);
        *(_OWORD *)a1 = v90;
      }
      a4 = 0;
      *(_DWORD *)(v14 - 24) = v28;
      uint64_t result = v154;
      *(_DWORD *)(v14 - 4) = v157;
      *(__n128 *)(v14 - 20) = v154;
    }
    else
    {
      int v20 = *(_DWORD *)v18;
      if (*(_DWORD *)v18 >= *(_DWORD *)v14)
      {
        if (v19 < v20)
        {
          uint64_t v188 = *(void *)(v18 + 16);
          __n128 v161 = *(__n128 *)v18;
          long long v24 = *(_OWORD *)v11;
          *(void *)(v18 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v18 = v24;
          *(void *)(a2 - 8) = v188;
          *(__n128 *)size_t v11 = v161;
          if (*(_DWORD *)v18 < *(_DWORD *)v14)
          {
            uint64_t v189 = *(void *)(v14 + 16);
            __n128 v162 = *(__n128 *)v14;
            __n128 v25 = *(__n128 *)v18;
            *(void *)(v14 + 16) = *(void *)(v18 + 16);
            *(__n128 *)unint64_t v14 = v25;
            *(void *)(v18 + 16) = v189;
            *(__n128 *)unint64_t v18 = v162;
          }
        }
      }
      else
      {
        if (v19 >= v20)
        {
          uint64_t v192 = *(void *)(v14 + 16);
          __n128 v165 = *(__n128 *)v14;
          __n128 v29 = *(__n128 *)v18;
          *(void *)(v14 + 16) = *(void *)(v18 + 16);
          *(__n128 *)unint64_t v14 = v29;
          *(void *)(v18 + 16) = v192;
          *(__n128 *)unint64_t v18 = v165;
          if (*v11 >= *(_DWORD *)v18) {
            goto LABEL_23;
          }
          uint64_t v186 = *(void *)(v18 + 16);
          __n128 v159 = *(__n128 *)v18;
          long long v30 = *(_OWORD *)v11;
          *(void *)(v18 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v18 = v30;
        }
        else
        {
          uint64_t v186 = *(void *)(v14 + 16);
          __n128 v159 = *(__n128 *)v14;
          long long v21 = *(_OWORD *)v11;
          *(void *)(v14 + 16) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v14 = v21;
        }
        *(void *)(a2 - 8) = v186;
        *(__n128 *)size_t v11 = v159;
      }
LABEL_23:
      int v31 = (long long *)(v14 + 24);
      unint64_t v32 = v14 + 24 * v17;
      int v35 = *(_DWORD *)(v32 - 24);
      unint64_t v33 = v32 - 24;
      int v34 = v35;
      int v36 = *v12;
      if (v35 >= *(_DWORD *)(v14 + 24))
      {
        if (v36 < v34)
        {
          uint64_t v193 = *(void *)(v33 + 16);
          long long v166 = *(_OWORD *)v33;
          long long v40 = *(_OWORD *)v12;
          *(void *)(v33 + 16) = *(void *)(a2 - 32);
          *(_OWORD *)unint64_t v33 = v40;
          *(void *)(a2 - 32) = v193;
          *(_OWORD *)size_t v12 = v166;
          if (*(_DWORD *)v33 < *(_DWORD *)v31)
          {
            long long v41 = *v31;
            uint64_t v42 = *(void *)(v14 + 40);
            uint64_t v43 = *(void *)(v33 + 16);
            *int v31 = *(_OWORD *)v33;
            *(void *)(v14 + 40) = v43;
            *(void *)(v33 + 16) = v42;
            *(_OWORD *)unint64_t v33 = v41;
          }
        }
      }
      else
      {
        if (v36 >= v34)
        {
          long long v46 = *v31;
          uint64_t v47 = *(void *)(v14 + 40);
          uint64_t v48 = *(void *)(v33 + 16);
          *int v31 = *(_OWORD *)v33;
          *(void *)(v14 + 40) = v48;
          *(void *)(v33 + 16) = v47;
          *(_OWORD *)unint64_t v33 = v46;
          if (*v12 >= *(_DWORD *)v33) {
            goto LABEL_37;
          }
          uint64_t v195 = *(void *)(v33 + 16);
          long long v168 = *(_OWORD *)v33;
          long long v49 = *(_OWORD *)v12;
          *(void *)(v33 + 16) = *(void *)(a2 - 32);
          *(_OWORD *)unint64_t v33 = v49;
          long long v37 = v168;
          *(void *)(a2 - 32) = v195;
        }
        else
        {
          long long v37 = *v31;
          uint64_t v38 = *(void *)(v14 + 40);
          uint64_t v39 = *(void *)(a2 - 32);
          *int v31 = *(_OWORD *)v12;
          *(void *)(v14 + 40) = v39;
          *(void *)(a2 - 32) = v38;
        }
        *(_OWORD *)size_t v12 = v37;
      }
LABEL_37:
      uint64_t v50 = (long long *)(v14 + 48);
      unint64_t v51 = v14 + 24 * v17;
      int v54 = *(_DWORD *)(v51 + 24);
      unint64_t v52 = v51 + 24;
      int v53 = v54;
      int v55 = *v13;
      if (v54 >= *(_DWORD *)(v14 + 48))
      {
        if (v55 < v53)
        {
          uint64_t v196 = *(void *)(v52 + 16);
          long long v169 = *(_OWORD *)v52;
          long long v59 = *(_OWORD *)v13;
          *(void *)(v52 + 16) = *(void *)(a2 - 56);
          *(_OWORD *)unint64_t v52 = v59;
          *(void *)(a2 - 56) = v196;
          *(_OWORD *)uint64_t v13 = v169;
          if (*(_DWORD *)v52 < *(_DWORD *)v50)
          {
            long long v60 = *v50;
            uint64_t v61 = *(void *)(v14 + 64);
            uint64_t v62 = *(void *)(v52 + 16);
            *uint64_t v50 = *(_OWORD *)v52;
            *(void *)(v14 + 64) = v62;
            *(void *)(v52 + 16) = v61;
            *(_OWORD *)unint64_t v52 = v60;
          }
        }
      }
      else
      {
        if (v55 >= v53)
        {
          long long v63 = *v50;
          uint64_t v64 = *(void *)(v14 + 64);
          uint64_t v65 = *(void *)(v52 + 16);
          *uint64_t v50 = *(_OWORD *)v52;
          *(void *)(v14 + 64) = v65;
          *(void *)(v52 + 16) = v64;
          *(_OWORD *)unint64_t v52 = v63;
          if (*v13 >= *(_DWORD *)v52) {
            goto LABEL_46;
          }
          uint64_t v197 = *(void *)(v52 + 16);
          long long v170 = *(_OWORD *)v52;
          long long v66 = *(_OWORD *)v13;
          *(void *)(v52 + 16) = *(void *)(a2 - 56);
          *(_OWORD *)unint64_t v52 = v66;
          long long v56 = v170;
          *(void *)(a2 - 56) = v197;
        }
        else
        {
          long long v56 = *v50;
          uint64_t v57 = *(void *)(v14 + 64);
          uint64_t v58 = *(void *)(a2 - 56);
          *uint64_t v50 = *(_OWORD *)v13;
          *(void *)(v14 + 64) = v58;
          *(void *)(a2 - 56) = v57;
        }
        *(_OWORD *)uint64_t v13 = v56;
      }
LABEL_46:
      int v67 = *(_DWORD *)v18;
      int v68 = *(_DWORD *)v52;
      if (*(_DWORD *)v18 >= *(_DWORD *)v33)
      {
        if (v68 < v67)
        {
          uint64_t v199 = *(void *)(v18 + 16);
          __n128 v172 = *(__n128 *)v18;
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v52;
          *(void *)(v18 + 16) = *(void *)(v52 + 16);
          *(void *)(v52 + 16) = v199;
          *(__n128 *)unint64_t v52 = v172;
          if (*(_DWORD *)v18 < *(_DWORD *)v33)
          {
            uint64_t v200 = *(void *)(v33 + 16);
            long long v173 = *(_OWORD *)v33;
            *(_OWORD *)unint64_t v33 = *(_OWORD *)v18;
            *(void *)(v33 + 16) = *(void *)(v18 + 16);
            *(void *)(v18 + 16) = v200;
            *(_OWORD *)unint64_t v18 = v173;
          }
        }
      }
      else
      {
        if (v68 >= v67)
        {
          uint64_t v201 = *(void *)(v33 + 16);
          long long v174 = *(_OWORD *)v33;
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v18;
          *(void *)(v33 + 16) = *(void *)(v18 + 16);
          *(void *)(v18 + 16) = v201;
          *(_OWORD *)unint64_t v18 = v174;
          if (*(_DWORD *)v52 >= *(_DWORD *)v18) {
            goto LABEL_55;
          }
          uint64_t v198 = *(void *)(v18 + 16);
          __n128 v171 = *(__n128 *)v18;
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v52;
          *(void *)(v18 + 16) = *(void *)(v52 + 16);
        }
        else
        {
          uint64_t v198 = *(void *)(v33 + 16);
          __n128 v171 = *(__n128 *)v33;
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v52;
          *(void *)(v33 + 16) = *(void *)(v52 + 16);
        }
        *(void *)(v52 + 16) = v198;
        *(__n128 *)unint64_t v52 = v171;
      }
LABEL_55:
      uint64_t v202 = *(void *)(v14 + 16);
      __n128 v175 = *(__n128 *)v14;
      __n128 v69 = *(__n128 *)v18;
      *(void *)(v14 + 16) = *(void *)(v18 + 16);
      *(__n128 *)unint64_t v14 = v69;
      *(void *)(v18 + 16) = v202;
      *(__n128 *)unint64_t v18 = v175;
      --a3;
      int v28 = *(_DWORD *)v14;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v70 = 0;
      int v156 = *(_DWORD *)(v14 + 20);
      __n128 v153 = *(__n128 *)(v14 + 4);
      do
      {
        int v71 = *(_DWORD *)(v14 + v70 + 24);
        v70 += 24;
      }
      while (v71 < v28);
      unint64_t v72 = v14 + v70;
      unint64_t v73 = a2;
      if (v70 == 24)
      {
        unint64_t v73 = a2;
        do
        {
          if (v72 >= v73) {
            break;
          }
          int v75 = *(_DWORD *)(v73 - 24);
          v73 -= 24;
        }
        while (v75 >= v28);
      }
      else
      {
        do
        {
          int v74 = *(_DWORD *)(v73 - 24);
          v73 -= 24;
        }
        while (v74 >= v28);
      }
      v14 += v70;
      if (v72 < v73)
      {
        unint64_t v76 = v73;
        do
        {
          uint64_t v203 = *(void *)(v14 + 16);
          __n128 v176 = *(__n128 *)v14;
          long long v77 = *(_OWORD *)v76;
          *(void *)(v14 + 16) = *(void *)(v76 + 16);
          *(_OWORD *)unint64_t v14 = v77;
          *(void *)(v76 + 16) = v203;
          *(__n128 *)unint64_t v76 = v176;
          do
          {
            int v78 = *(_DWORD *)(v14 + 24);
            v14 += 24;
          }
          while (v78 < v28);
          do
          {
            int v79 = *(_DWORD *)(v76 - 24);
            v76 -= 24;
          }
          while (v79 >= v28);
        }
        while (v14 < v76);
      }
      if (v14 - 24 != a1)
      {
        long long v80 = *(_OWORD *)(v14 - 24);
        *(void *)(a1 + 16) = *(void *)(v14 - 8);
        *(_OWORD *)a1 = v80;
      }
      *(_DWORD *)(v14 - 24) = v28;
      *(_DWORD *)(v14 - 4) = v156;
      *(__n128 *)(v14 - 20) = v153;
      if (v72 < v73) {
        goto LABEL_76;
      }
      {
        a2 = v14 - 24;
        if (v81) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v81)
      {
LABEL_76:
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v92 = *(_DWORD *)(a2 - 24);
      unint64_t v91 = a2 - 24;
      if (v92 >= *(_DWORD *)v14) {
        return result;
      }
      goto LABEL_101;
    case 3:
      unint64_t v93 = (__n128 *)(v14 + 24);
      int v94 = *(_DWORD *)(v14 + 24);
      int v96 = *(_DWORD *)(a2 - 24);
      unint64_t v91 = a2 - 24;
      int v95 = v96;
      if (v94 < *(_DWORD *)v14)
      {
        if (v95 >= v94)
        {
          uint64_t v212 = *(void *)(v14 + 16);
          __n128 v185 = *(__n128 *)v14;
          *(__n128 *)unint64_t v14 = *v93;
          *(void *)(v14 + 16) = *(void *)(v14 + 40);
          uint64_t result = v185;
          *unint64_t v93 = v185;
          *(void *)(v14 + 40) = v212;
          if (*(_DWORD *)v91 >= *(_DWORD *)(v14 + 24)) {
            return result;
          }
          uint64_t result = *v93;
          uint64_t v151 = *(void *)(v14 + 40);
          uint64_t v152 = *(void *)(v91 + 16);
          *unint64_t v93 = *(__n128 *)v91;
          *(void *)(v14 + 40) = v152;
          *(void *)(v91 + 16) = v151;
        }
        else
        {
LABEL_101:
          uint64_t v205 = *(void *)(v14 + 16);
          __n128 v178 = *(__n128 *)v14;
          __n128 v97 = *(__n128 *)v91;
          *(void *)(v14 + 16) = *(void *)(v91 + 16);
          *(__n128 *)unint64_t v14 = v97;
          uint64_t result = v178;
          *(void *)(v91 + 16) = v205;
        }
        *(__n128 *)unint64_t v91 = result;
        return result;
      }
      if (v95 < v94)
      {
        uint64_t result = *v93;
        uint64_t v146 = *(void *)(v14 + 40);
        uint64_t v147 = *(void *)(v91 + 16);
        *unint64_t v93 = *(__n128 *)v91;
        *(void *)(v14 + 40) = v147;
        *(void *)(v91 + 16) = v146;
        *(__n128 *)unint64_t v91 = result;
        if (*(_DWORD *)(v14 + 24) < *(_DWORD *)v14)
        {
          uint64_t v210 = *(void *)(v14 + 16);
          __n128 v183 = *(__n128 *)v14;
          *(__n128 *)unint64_t v14 = *v93;
          *(void *)(v14 + 16) = *(void *)(v14 + 40);
          uint64_t result = v183;
          *unint64_t v93 = v183;
          *(void *)(v14 + 40) = v210;
        }
      }
      break;
    case 4:
      return result;
    case 5:
      uint64_t v98 = (__n128 *)(v14 + 24);
      uint64_t v99 = (__n128 *)(v14 + 48);
      int v100 = (__n128 *)(v14 + 72);
      int v102 = *(_DWORD *)(a2 - 24);
      long long v101 = (__n128 *)(a2 - 24);
      if (v102 < *(_DWORD *)(v14 + 72))
      {
        uint64_t result = *v100;
        unint64_t v103 = *(void *)(v14 + 88);
        unint64_t v104 = v101[1].n128_u64[0];
        *int v100 = *v101;
        *(void *)(v14 + 88) = v104;
        v101[1].n128_u64[0] = v103;
        __n128 *v101 = result;
        if ((signed __int32)v100->n128_u32[0] < (signed __int32)v99->n128_u32[0])
        {
          uint64_t v105 = *(void *)(v14 + 64);
          uint64_t result = *v99;
          *uint64_t v99 = *v100;
          *(void *)(v14 + 64) = *(void *)(v14 + 88);
          *int v100 = result;
          *(void *)(v14 + 88) = v105;
          if ((signed __int32)v99->n128_u32[0] < (signed __int32)v98->n128_u32[0])
          {
            uint64_t v106 = *(void *)(v14 + 40);
            uint64_t result = *v98;
            __n128 *v98 = *v99;
            *(void *)(v14 + 40) = *(void *)(v14 + 64);
            *uint64_t v99 = result;
            *(void *)(v14 + 64) = v106;
            if (*(_DWORD *)(v14 + 24) < *(_DWORD *)v14)
            {
              uint64_t v206 = *(void *)(v14 + 16);
              __n128 v179 = *(__n128 *)v14;
              *(__n128 *)unint64_t v14 = *v98;
              *(void *)(v14 + 16) = *(void *)(v14 + 40);
              uint64_t result = v179;
              __n128 *v98 = v179;
              *(void *)(v14 + 40) = v206;
            }
          }
        }
      }
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v10 = (long long *)((char *)a2 - 40);
  size_t v11 = a1;
LABEL_2:
  size_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    unint64_t v14 = (uint64_t)a2 - v11;
    uint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v42 = (long long *)((char *)a2 - 40);
          long long v41 = *((void *)a2 - 5);
          uint64_t v43 = v41 >= *(void *)v11;
          if (v41 == *(void *)v11
            && (v44 = *((void *)a2 - 4), v45 = *(void *)(v11 + 8), uint64_t v43 = v44 >= v45, v44 == v45))
          {
            long long v49 = *(char *)(v11 + 39);
            uint64_t v50 = *((char *)a2 - 1);
            if (v50 >= 0) {
              unint64_t v51 = *((unsigned __int8 *)a2 - 1);
            }
            else {
              unint64_t v51 = *((void *)a2 - 2);
            }
            if (v50 >= 0) {
              unint64_t v52 = (char *)a2 - 24;
            }
            else {
              unint64_t v52 = (char *)*((void *)a2 - 3);
            }
            if (v49 >= 0) {
              int v53 = *(unsigned __int8 *)(v11 + 39);
            }
            else {
              int v53 = *(void *)(v11 + 24);
            }
            if (v49 >= 0) {
              int v54 = (const void *)(v11 + 16);
            }
            else {
              int v54 = *(const void **)(v11 + 16);
            }
            if (v53 >= v51) {
              int v55 = v51;
            }
            else {
              int v55 = v53;
            }
            long long v56 = memcmp(v52, v54, v55);
            uint64_t v57 = v51 < v53;
            if (v56) {
              uint64_t v57 = v56 < 0;
            }
            if (!v57) {
              return;
            }
          }
          else if (v43)
          {
            return;
          }
          long long v60 = *(_OWORD *)v11;
          long long v46 = *(void *)(v11 + 16);
          *(void *)&uint64_t v62 = *(void *)(v11 + 24);
          *(void *)((char *)&v62 + 7) = *(void *)(v11 + 31);
          uint64_t v47 = *(unsigned char *)(v11 + 39);
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 16) = 0;
          *(_OWORD *)size_t v11 = *v42;
          uint64_t v48 = *(long long *)((char *)a2 - 24);
          *(void *)(v11 + 32) = *((void *)a2 - 1);
          *(_OWORD *)(v11 + 16) = v48;
          *uint64_t v42 = v60;
          *((void *)a2 - 3) = v46;
          *((void *)a2 - 2) = v62;
          *(void *)((char *)a2 - 9) = *(void *)((char *)&v62 + 7);
          *((unsigned char *)a2 - 1) = v47;
          return;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)v11, (uint64_t *)(v11 + 40), v10);
          return;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v11, (long long *)(v11 + 40), (long long *)(v11 + 80), v10);
          return;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v11, v11 + 40, v11 + 80, v11 + 120, (uint64_t)v10);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if ((long long *)v11 != a2)
      {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,llvm::SMFixIt *>(v11, a2, a2, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 40 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)v11, (uint64_t *)(v11 + 40 * (v15 >> 1)), v10);
      unint64_t v18 = v10;
      int v19 = v11 + 40 * v16;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(v11 + 40), (uint64_t *)(v19 - 40), a2 - 5);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(v11 + 80), (uint64_t *)(v11 + 40 + 40 * v16), (long long *)((char *)a2 - 120));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(v19 - 40), (uint64_t *)v17, (long long *)(v11 + 40 + 40 * v16));
      long long v59 = *(_OWORD *)v11;
      *(void *)((char *)&v61 + 7) = *(void *)(v11 + 31);
      int v20 = *(void *)(v11 + 16);
      *(void *)&uint64_t v61 = *(void *)(v11 + 24);
      long long v21 = *(unsigned char *)(v11 + 39);
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 16) = 0;
      int v22 = *(void *)(v19 + 32);
      long long v23 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)size_t v11 = *(_OWORD *)v17;
      *(_OWORD *)(v11 + 16) = v23;
      *(void *)(v11 + 32) = v22;
      *(_OWORD *)unint64_t v17 = v59;
      *(void *)(v19 + 16) = v20;
      *(void *)(v19 + 31) = *(void *)((char *)&v61 + 7);
      *(void *)(v19 + 24) = v61;
      uint64_t v10 = v18;
      *(unsigned char *)(v17 + 39) = v21;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(v11 + 40 * (v15 >> 1)), (uint64_t *)v11, v10);
      if (a5) {
        goto LABEL_15;
      }
    }
    long long v24 = *(void *)(v11 - 40);
    __n128 v25 = v24 >= *(void *)v11;
    if (v24 == *(void *)v11
      && (v26 = *(void *)(v11 - 32), v27 = *(void *)(v11 + 8), __n128 v25 = v26 >= v27, v26 == v27))
    {
      int v31 = *(char *)(v11 + 39);
      unint64_t v32 = *(char *)(v11 - 1);
      unint64_t v33 = v10;
      if (v32 >= 0) {
        int v34 = *(unsigned __int8 *)(v11 - 1);
      }
      else {
        int v34 = *(void *)(v11 - 16);
      }
      if (v32 >= 0) {
        int v35 = (const void *)(v11 - 24);
      }
      else {
        int v35 = *(const void **)(v11 - 24);
      }
      if (v31 >= 0) {
        int v36 = *(unsigned __int8 *)(v11 + 39);
      }
      else {
        int v36 = *(void *)(v11 + 24);
      }
      if (v31 >= 0) {
        long long v37 = (const void *)(v11 + 16);
      }
      else {
        long long v37 = *(const void **)(v11 + 16);
      }
      if (v36 >= v34) {
        uint64_t v38 = v34;
      }
      else {
        uint64_t v38 = v36;
      }
      uint64_t v39 = memcmp(v35, v37, v38);
      BOOL v5 = v34 >= v36;
      uint64_t v10 = v33;
      long long v40 = !v5;
      if (v39) {
        long long v40 = v39 < 0;
      }
      if (!v40)
      {
LABEL_40:
        size_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>((long long *)v11, (unint64_t)a2);
LABEL_42:
        a5 = 0;
        a4 = -v13;
        goto LABEL_2;
      }
    }
    else if (v25)
    {
      goto LABEL_40;
    }
LABEL_15:
    int v28 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>((long long *)v11, (unint64_t)a2);
    if ((v29 & 1) == 0) {
      goto LABEL_41;
    }
    long long v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v11, v28);
    size_t v11 = v28 + 40;
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v28 + 40, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (long long *)v28;
      if (v30) {
        return;
      }
      goto LABEL_1;
    }
    size_t v12 = v13 + 1;
    if (!v30)
    {
LABEL_41:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(a1, v28, a3, -v13, a5 & 1);
      size_t v11 = v28 + 40;
      goto LABEL_42;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)v11, a2);
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,anonymous namespace'::BlockInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v7 = (__n128 *)(a2 - 24);
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)a1) {
        goto LABEL_9;
      }
      return result;
    case 3uLL:
      uint64_t v15 = (__n128 *)(a1 + 24);
      int v16 = *(_DWORD *)(a1 + 24);
      int v7 = (__n128 *)(a2 - 24);
      int v17 = *(_DWORD *)(a2 - 24);
      if (v16 >= *(_DWORD *)a1)
      {
        if (v17 < v16)
        {
          uint64_t v39 = *(void *)(a1 + 40);
          __n128 v40 = *v15;
          uint64_t v41 = *(void *)(a2 - 8);
          *uint64_t v15 = *v7;
          *(void *)(a1 + 40) = v41;
          *int v7 = v40;
          *(void *)(a2 - 8) = v39;
          if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
          {
            uint64_t v42 = *(void *)(a1 + 16);
            __n128 v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v15;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            *uint64_t v15 = v43;
            *(void *)(a1 + 40) = v42;
          }
        }
      }
      else if (v17 >= v16)
      {
        uint64_t v55 = *(void *)(a1 + 16);
        __n128 v56 = *(__n128 *)a1;
        *(__n128 *)a1 = *v15;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        *uint64_t v15 = v56;
        *(void *)(a1 + 40) = v55;
        if ((signed __int32)v7->n128_u32[0] < *(_DWORD *)(a1 + 24))
        {
          uint64_t v57 = *(void *)(a1 + 40);
          __n128 v58 = *v15;
          uint64_t v59 = *(void *)(a2 - 8);
          *uint64_t v15 = *v7;
          *(void *)(a1 + 40) = v59;
          *int v7 = v58;
          *(void *)(a2 - 8) = v57;
        }
      }
      else
      {
LABEL_9:
        unint64_t v18 = *(void *)(a1 + 16);
        __n128 v19 = *(__n128 *)a1;
        uint64_t v20 = v7[1].n128_i64[0];
        *(__n128 *)a1 = *v7;
        *(void *)(a1 + 16) = v20;
        *int v7 = v19;
        v7[1].n128_u64[0] = v18;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      long long v21 = (__n128 *)(a1 + 24);
      int v22 = (__n128 *)(a1 + 48);
      long long v23 = (__n128 *)(a1 + 72);
      int v25 = *(_DWORD *)(a2 - 24);
      long long v24 = (__n128 *)(a2 - 24);
      if (v25 < *(_DWORD *)(a1 + 72))
      {
        unint64_t v26 = *(void *)(a1 + 88);
        __n128 v27 = *v23;
        uint64_t v28 = v24[1].n128_i64[0];
        *long long v23 = *v24;
        *(void *)(a1 + 88) = v28;
        *long long v24 = v27;
        v24[1].n128_u64[0] = v26;
        if ((signed __int32)v23->n128_u32[0] < (signed __int32)v22->n128_u32[0])
        {
          uint64_t v29 = *(void *)(a1 + 64);
          __n128 v30 = *v22;
          *int v22 = *v23;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *long long v23 = v30;
          *(void *)(a1 + 88) = v29;
          if ((signed __int32)v22->n128_u32[0] < (signed __int32)v21->n128_u32[0])
          {
            uint64_t v31 = *(void *)(a1 + 40);
            __n128 v32 = *v21;
            *long long v21 = *v22;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *int v22 = v32;
            *(void *)(a1 + 64) = v31;
            if (*(_DWORD *)(a1 + 24) < *(_DWORD *)a1)
            {
              uint64_t v33 = *(void *)(a1 + 16);
              __n128 v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *long long v21 = v34;
              *(void *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = (__n128 *)(a1 + 48);
      int v9 = *(_DWORD *)(a1 + 48);
      uint64_t v10 = (__n128 *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 24);
      signed __int32 v12 = *(_DWORD *)a1;
      if (v11 >= *(_DWORD *)a1)
      {
        if (v9 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 40);
          __n128 v36 = *v10;
          __n128 *v10 = *v8;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *uint64_t v8 = v36;
          *(void *)(a1 + 64) = v35;
          if ((signed __int32)v10->n128_u32[0] < v12)
          {
            uint64_t v37 = *(void *)(a1 + 16);
            __n128 v38 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            __n128 *v10 = v38;
            *(void *)(a1 + 40) = v37;
          }
        }
      }
      else if (v9 >= v11)
      {
        uint64_t v44 = *(void *)(a1 + 16);
        __n128 v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        __n128 *v10 = v45;
        *(void *)(a1 + 40) = v44;
        if (v9 < *(_DWORD *)(a1 + 24))
        {
          uint64_t v46 = *(void *)(a1 + 40);
          __n128 v47 = *v10;
          __n128 *v10 = *v8;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *uint64_t v8 = v47;
          *(void *)(a1 + 64) = v46;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 v14 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(void *)(a1 + 16) = *(void *)(a1 + 64);
        *uint64_t v8 = v14;
        *(void *)(a1 + 64) = v13;
      }
      uint64_t v48 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v49 = 0;
      int v50 = 0;
      break;
  }
  while (1)
  {
    int v52 = *(_DWORD *)v48;
    if (*(_DWORD *)v48 < (signed __int32)v8->n128_u32[0])
    {
      long long v60 = *(_OWORD *)(v48 + 4);
      int v61 = *(_DWORD *)(v48 + 20);
      uint64_t v53 = v49;
      do
      {
        uint64_t v54 = a1 + v53;
        *(_OWORD *)(v54 + 72) = *(_OWORD *)(a1 + v53 + 48);
        *(void *)(v54 + 88) = *(void *)(a1 + v53 + 64);
        if (v53 == -48)
        {
          uint64_t v51 = a1;
          goto LABEL_27;
        }
        v53 -= 24;
      }
      while (v52 < *(_DWORD *)(v54 + 24));
      uint64_t v51 = a1 + v53 + 72;
LABEL_27:
      *(_DWORD *)uint64_t v51 = v52;
      *(_OWORD *)(v51 + 4) = v60;
      *(_DWORD *)(v51 + 20) = v61;
      if (++v50 == 8) {
        return v48 + 24 == a2;
      }
    }
    uint64_t v8 = (__n128 *)v48;
    v49 += 24;
    v48 += 24;
    if (v48 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::OperationPrinter::print(mlir::Block *,BOOL,BOOL)::$_1 &,anonymous namespace'::BlockInfo *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5 = a2->n128_u32[0];
  signed __int32 v6 = a3->n128_u32[0];
  if ((signed __int32)a2->n128_u32[0] >= (signed __int32)a1->n128_u32[0])
  {
    if (v6 < v5)
    {
      unint64_t v9 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        unint64_t v11 = a1[1].n128_u64[0];
        BOOL result = *a1;
        unint64_t v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      unint64_t v7 = a1[1].n128_u64[0];
      BOOL result = *a1;
      unint64_t v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    unint64_t v13 = a1[1].n128_u64[0];
    BOOL result = *a1;
    unint64_t v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      unint64_t v7 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0])
  {
    unint64_t v16 = a3[1].n128_u64[0];
    BOOL result = *a3;
    unint64_t v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    if ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0])
    {
      unint64_t v18 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      if ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0])
      {
        unint64_t v20 = a1[1].n128_u64[0];
        BOOL result = *a1;
        unint64_t v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = a2[6];
  if (v2 >= 8)
  {
    uint64_t v4 = a2 + 3;
    uint64_t v5 = *a2;
    signed __int32 v6 = (v2 & 2) != 0 ? v4 : (void *)a2[3];
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFF8))(v6, v5, a2[1], a2[2]);
    unint64_t v7 = a2[6];
    if (v7 >= 8)
    {
      if ((v7 & 4) != 0)
      {
        if ((v7 & 2) != 0) {
          unint64_t v8 = v4;
        }
        else {
          unint64_t v8 = (void *)*v4;
        }
        (*(void (**)(void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
      }
      if ((v7 & 2) == 0)
      {
        unint64_t v9 = (llvm *)a2[3];
        unint64_t v10 = (void *)a2[4];
        llvm::deallocate_buffer(v9, v10);
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_bSF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::AsmParser::parseTypeList(llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (uint64_t *)a1[1];
  uint64_t v3 = *((unsigned int *)v2 + 2);
  if (v3 >= *((_DWORD *)v2 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], v2 + 2, v3 + 1, 8);
    *(void *)(*v2 + 8 * *((unsigned int *)v2 + 2)) = 0;
    LODWORD(v3) = *((_DWORD *)v2 + 2);
    uint64_t v4 = *v2;
  }
  else
  {
    uint64_t v4 = *v2;
    *(void *)(*v2 + 8 * v3) = 0;
  }
  unsigned int v5 = v3 + 1;
  *((_DWORD *)v2 + 2) = v5;
  signed __int32 v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 504);

  return v6(v1, v4 + 8 * v5 - 8);
}

void *llvm::object_creator<anonymous namespace'::AsmPrinterOptions>::call()
{
  uint64_t v0 = operator new(0x6C8uLL);
  bzero(v0, 0x6C8uLL);
  *(void *)&long long v5 = "Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)";
  *((void *)&v5 + 1) = 113;
  llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>((uint64_t)v0, (int8x16_t *)"mlir-print-elementsattrs-with-hex-if-larger", &v5);
  *(void *)&long long v5 = "Elide ElementsAttrs with \"...\" that have more elements than the given upper limit";
  *((void *)&v5 + 1) = 81;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 200, (int8x16_t *)"mlir-elide-elementsattrs-if-larger", &v5);
  *(void *)&long long v5 = "Elide printing value of resources if string is too long in chars.";
  *((void *)&v5 + 1) = 65;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>((uint64_t)v0 + 392, (int8x16_t *)"mlir-elide-resource-strings-if-larger", &v5);
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  *(void *)&long long v5 = "Print debug info in MLIR output";
  *((void *)&v5 + 1) = 31;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 584, (int8x16_t *)"mlir-print-debuginfo", (unsigned char **)&v4, &v5);
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  *(void *)&long long v5 = "Print pretty debug info in MLIR output";
  *((void *)&v5 + 1) = 38;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 776, (int8x16_t *)"mlir-pretty-debuginfo", (unsigned char **)&v4, &v5);
  char v3 = 0;
  uint64_t v4 = (int *)&v3;
  *(void *)&long long v5 = "Print the generic op form";
  *((void *)&v5 + 1) = 25;
  int v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 968, (int8x16_t *)"mlir-print-op-generic", (unsigned char **)&v4, &v5, &v2);
  char v3 = 0;
  uint64_t v4 = (int *)&v3;
  *(void *)&long long v5 = "Skip op verification when using custom printers";
  *((void *)&v5 + 1) = 47;
  int v2 = 1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>((uint64_t)v0 + 1160, (int8x16_t *)"mlir-print-assume-verified", (unsigned char **)&v4, &v5, &v2);
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  *(void *)&long long v5 = "Print with local scope and inline information (eliding aliases for attributes, types, and locations";
  *((void *)&v5 + 1) = 99;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1352, (int8x16_t *)"mlir-print-local-scope", (unsigned char **)&v4, &v5);
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  *(void *)&long long v5 = "Print users of operation results and block arguments as a comment";
  *((void *)&v5 + 1) = 65;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)v0 + 1544, (int8x16_t *)"mlir-print-value-users", (unsigned char **)&v4, &v5);
  return v0;
}

void llvm::object_deleter<anonymous namespace'::AsmPrinterOptions>::call(char *__p)
{
  if (!__p) {
    return;
  }
  *((void *)__p + 193) = &unk_1EC9A3F00;
  int v2 = __p + 1704;
  char v3 = (char *)*((void *)__p + 216);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *((void *)__p + 193) = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 205);
    if (v4 != *((void **)__p + 204)) {
LABEL_6:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *((void *)__p + 193) = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 205);
    if (v4 != *((void **)__p + 204)) {
      goto LABEL_6;
    }
  }
  long long v5 = (char *)*((void *)__p + 201);
  if (v5 != __p + 1624) {
    free(v5);
  }
  *((void *)__p + 169) = &unk_1EC9A3F00;
  signed __int32 v6 = (char *)*((void *)__p + 192);
  if (v6 == __p + 1512)
  {
    (*(void (**)(char *))(*((void *)__p + 189) + 32))(__p + 1512);
    *((void *)__p + 169) = &unk_1EC9A42A8;
    unint64_t v7 = (void *)*((void *)__p + 181);
    if (v7 != *((void **)__p + 180)) {
LABEL_13:
    }
      free(v7);
  }
  else
  {
    if (v6) {
      (*(void (**)(char *))(*(void *)v6 + 40))(v6);
    }
    *((void *)__p + 169) = &unk_1EC9A42A8;
    unint64_t v7 = (void *)*((void *)__p + 181);
    if (v7 != *((void **)__p + 180)) {
      goto LABEL_13;
    }
  }
  unint64_t v8 = (char *)*((void *)__p + 177);
  if (v8 != __p + 1432) {
    free(v8);
  }
  *((void *)__p + 145) = &unk_1EC9A3F00;
  unint64_t v9 = (char *)*((void *)__p + 168);
  if (v9 == __p + 1320)
  {
    (*(void (**)(char *))(*((void *)__p + 165) + 32))(__p + 1320);
    *((void *)__p + 145) = &unk_1EC9A42A8;
    unint64_t v10 = (void *)*((void *)__p + 157);
    if (v10 != *((void **)__p + 156)) {
LABEL_20:
    }
      free(v10);
  }
  else
  {
    if (v9) {
      (*(void (**)(char *))(*(void *)v9 + 40))(v9);
    }
    *((void *)__p + 145) = &unk_1EC9A42A8;
    unint64_t v10 = (void *)*((void *)__p + 157);
    if (v10 != *((void **)__p + 156)) {
      goto LABEL_20;
    }
  }
  unint64_t v11 = (char *)*((void *)__p + 153);
  if (v11 != __p + 1240) {
    free(v11);
  }
  *((void *)__p + 121) = &unk_1EC9A3F00;
  unint64_t v12 = (char *)*((void *)__p + 144);
  if (v12 == __p + 1128)
  {
    (*(void (**)(char *))(*((void *)__p + 141) + 32))(__p + 1128);
    *((void *)__p + 121) = &unk_1EC9A42A8;
    unint64_t v13 = (void *)*((void *)__p + 133);
    if (v13 != *((void **)__p + 132)) {
LABEL_27:
    }
      free(v13);
  }
  else
  {
    if (v12) {
      (*(void (**)(char *))(*(void *)v12 + 40))(v12);
    }
    *((void *)__p + 121) = &unk_1EC9A42A8;
    unint64_t v13 = (void *)*((void *)__p + 133);
    if (v13 != *((void **)__p + 132)) {
      goto LABEL_27;
    }
  }
  unint64_t v14 = (char *)*((void *)__p + 129);
  if (v14 != __p + 1048) {
    free(v14);
  }
  *((void *)__p + 97) = &unk_1EC9A3F00;
  unint64_t v15 = (char *)*((void *)__p + 120);
  if (v15 == __p + 936)
  {
    (*(void (**)(char *))(*((void *)__p + 117) + 32))(__p + 936);
    *((void *)__p + 97) = &unk_1EC9A42A8;
    unint64_t v16 = (void *)*((void *)__p + 109);
    if (v16 != *((void **)__p + 108)) {
LABEL_34:
    }
      free(v16);
  }
  else
  {
    if (v15) {
      (*(void (**)(char *))(*(void *)v15 + 40))(v15);
    }
    *((void *)__p + 97) = &unk_1EC9A42A8;
    unint64_t v16 = (void *)*((void *)__p + 109);
    if (v16 != *((void **)__p + 108)) {
      goto LABEL_34;
    }
  }
  unint64_t v17 = (char *)*((void *)__p + 105);
  if (v17 != __p + 856) {
    free(v17);
  }
  *((void *)__p + 73) = &unk_1EC9A3F00;
  unint64_t v18 = (char *)*((void *)__p + 96);
  if (v18 == __p + 744)
  {
    (*(void (**)(char *))(*((void *)__p + 93) + 32))(__p + 744);
    *((void *)__p + 73) = &unk_1EC9A42A8;
    unint64_t v19 = (void *)*((void *)__p + 85);
    if (v19 != *((void **)__p + 84)) {
LABEL_41:
    }
      free(v19);
  }
  else
  {
    if (v18) {
      (*(void (**)(char *))(*(void *)v18 + 40))(v18);
    }
    *((void *)__p + 73) = &unk_1EC9A42A8;
    unint64_t v19 = (void *)*((void *)__p + 85);
    if (v19 != *((void **)__p + 84)) {
      goto LABEL_41;
    }
  }
  unint64_t v20 = (char *)*((void *)__p + 81);
  if (v20 != __p + 664) {
    free(v20);
  }
  *((void *)__p + 49) = &unk_1EC9A3FD0;
  unint64_t v21 = (char *)*((void *)__p + 72);
  if (v21 == __p + 552)
  {
    (*(void (**)(char *))(*((void *)__p + 69) + 32))(__p + 552);
    *((void *)__p + 49) = &unk_1EC9A42A8;
    int v22 = (void *)*((void *)__p + 61);
    if (v22 != *((void **)__p + 60)) {
LABEL_48:
    }
      free(v22);
  }
  else
  {
    if (v21) {
      (*(void (**)(char *))(*(void *)v21 + 40))(v21);
    }
    *((void *)__p + 49) = &unk_1EC9A42A8;
    int v22 = (void *)*((void *)__p + 61);
    if (v22 != *((void **)__p + 60)) {
      goto LABEL_48;
    }
  }
  long long v23 = (char *)*((void *)__p + 57);
  if (v23 != __p + 472) {
    free(v23);
  }
  *((void *)__p + 25) = &unk_1EC9A3FD0;
  long long v24 = (char *)*((void *)__p + 48);
  if (v24 == __p + 360)
  {
    (*(void (**)(char *))(*((void *)__p + 45) + 32))(__p + 360);
    *((void *)__p + 25) = &unk_1EC9A42A8;
    int v25 = (void *)*((void *)__p + 37);
    if (v25 != *((void **)__p + 36)) {
LABEL_55:
    }
      free(v25);
  }
  else
  {
    if (v24) {
      (*(void (**)(char *))(*(void *)v24 + 40))(v24);
    }
    *((void *)__p + 25) = &unk_1EC9A42A8;
    int v25 = (void *)*((void *)__p + 37);
    if (v25 != *((void **)__p + 36)) {
      goto LABEL_55;
    }
  }
  unint64_t v26 = (char *)*((void *)__p + 33);
  if (v26 != __p + 280) {
    free(v26);
  }
  *(void *)std::string __p = &unk_1EC9A4038;
  __n128 v27 = (char *)*((void *)__p + 24);
  if (v27 == __p + 168)
  {
    (*(void (**)(char *))(*((void *)__p + 21) + 32))(__p + 168);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v28 = (void *)*((void *)__p + 12);
    if (v28 == *((void **)__p + 11)) {
      goto LABEL_63;
    }
  }
  else
  {
    if (v27) {
      (*(void (**)(char *))(*(void *)v27 + 40))(v27);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v28 = (void *)*((void *)__p + 12);
    if (v28 == *((void **)__p + 11)) {
      goto LABEL_63;
    }
  }
  free(v28);
LABEL_63:
  uint64_t v29 = (char *)*((void *)__p + 8);
  if (v29 != __p + 80) {
    free(v29);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<char [44],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  signed __int32 v6 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 136) = &unk_1EC9A3B20;
  *(void *)a1 = &unk_1EC9A4038;
  *(void *)(a1 + 160) = &unk_1EC9A44A0;
  *(void *)(a1 + 168) = &unk_1EC9CE768;
  *(void *)(a1 + 192) = a1 + 168;
  unint64_t v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [35],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  signed __int32 v6 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3B00;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3FD0;
  *(void *)(a1 + 152) = &unk_1EC9A4470;
  *(void *)(a1 + 160) = &unk_1EC9CE720;
  *(void *)(a1 + 184) = a1 + 160;
  unint64_t v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

BOOL llvm::cl::OptionValueCopy<unsigned int>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void *std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EC9CE720;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE720;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, unsigned char **a3, _OWORD *a4)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  unint64_t v8 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  unint64_t v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  unint64_t v13 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v13;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [22],llvm::cl::initializer<BOOL>,llvm::cl::desc,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, unsigned char **a3, _OWORD *a4, _WORD *a5)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  unint64_t v10 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  unint64_t v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  unint64_t v15 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v15;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unint64_t v12 = buffer + 4;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v17 = v9[1];
        ++v9;
        uint64_t v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unint64_t v12 = buffer + 4;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  buffer[2] = *a4;
  uint64_t *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v13 = *v9 == -8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    do
    {
      uint64_t v15 = v9[1];
      ++v9;
      uint64_t v14 = v15;
      if (v15) {
        BOOL v16 = v14 == -8;
      }
      else {
        BOOL v16 = 1;
      }
    }
    while (v16);
  }
  return v9;
}

void llvm::SmallVectorTemplateBase<std::pair<std::string,std::unique_ptr<mlir::FallbackAsmResourceMap::ResourceCollection>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = 0;
  char v3 = (char *)(a1 + 16);
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  long long v5 = v4;
  signed __int32 v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = &v6[32 * v7];
    uint64_t v9 = v4;
    do
    {
      long long v10 = *(_OWORD *)v6;
      void v9[2] = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      *(void *)signed __int32 v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v11 = *((void *)v6 + 3);
      *((void *)v6 + 2) = 0;
      *((void *)v6 + 3) = 0;
      void v9[3] = v11;
      v6 += 32;
      v9 += 4;
    }
    while (v6 != v8);
    signed __int32 v6 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        uint64_t v14 = (void **)&v6[v13];
        uint64_t v15 = *(void *)&v6[v13 - 8];
        *(void *)&v6[v13 - 8] = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        if (*((char *)v14 - 9) < 0) {
          operator delete(*(v14 - 4));
        }
        v13 -= 32;
      }
      while (v13);
      signed __int32 v6 = *(char **)a1;
    }
  }
  int v16 = v17;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)BOOL result = &unk_1EC9AABF0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::~Printer(void **__p)
{
  uint64_t v1 = __p;
  void *__p = &unk_1EC9AABF0;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &>(llvm::StringRef,mlir::FallbackAsmResourceMap::getPrinters(void)::$_0 &)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FallbackAsmResourceMap::ResourceCollection::buildResources(*(void *)(a1 + 32), a2, a3);
}

void *std::vector<std::unique_ptr<mlir::AsmResourcePrinter>>::__emplace_back_slow_path<std::unique_ptr<mlir::AsmResourcePrinter>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)long long v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v19 = &v15[-v18];
    v10 -= v18;
    unint64_t v20 = &v9[8 * v3 - 16];
    unint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)unint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)unint64_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)unint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,mlir::AsmResourceBlob>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v37 = 0;
  signed __int32 v6 = (char *)(a1 + 16);
  uint64_t v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v37);
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = &v7[96 * v8];
  uint64_t v11 = *(const void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  long long v39 = *a3;
  unint64_t v12 = *((void *)a3 + 6);
  uint64_t v40 = *((void *)a3 + 2);
  unint64_t v43 = v12;
  if (v12 >= 8)
  {
    uint64_t v13 = (long long *)((char *)a3 + 24);
    if ((v12 & 2) != 0 && (v12 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v41, v13);
    }
    else
    {
      long long v41 = *v13;
      uint64_t v42 = *((void *)a3 + 5);
    }
    *((void *)a3 + 6) = 0;
  }
  char v44 = *((unsigned char *)a3 + 56);
  int v45 = 0;
  if (v11)
  {
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v10 >= 0x17)
    {
      uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v18 = v10 | 7;
      }
      uint64_t v19 = v18 + 1;
      unint64_t v20 = (char *)operator new(v18 + 1);
      *((void *)v9 + 1) = v10;
      *((void *)v9 + 2) = v19 | 0x8000000000000000;
      *(void *)uint64_t v9 = v20;
      uint64_t v9 = v20;
    }
    else
    {
      v9[23] = v10;
      if (!v10)
      {
LABEL_17:
        v9[v10] = 0;
        int v14 = v45;
        unint64_t v21 = &v7[96 * v8];
        v21[24] = 0;
        uint64_t v17 = (int *)(v21 + 24);
        v17[16] = -1;
        unint64_t v16 = v17 + 16;
        if (v14 == -1) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
    }
    memmove(v9, v11, v10);
    goto LABEL_17;
  }
  int v14 = 0;
  uint64_t v15 = &v7[96 * v8];
  *((_DWORD *)v15 + 22) = -1;
  unint64_t v16 = (int *)(v15 + 88);
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v17 = v16 - 16;
  v9[24] = 0;
  *((void *)v9 + 2) = 0;
LABEL_18:
  ((void (*)(char *, int *, long long *))off_1EC9D0F90[v14])(&v38, v17, &v39);
  *unint64_t v16 = v14;
  if (v45 != -1) {
    ((void (*)(char *, long long *))off_1EC9D0F78[v45])(&v38, &v39);
  }
LABEL_20:
  int v45 = -1;
  uint64_t v22 = *(char **)a1;
  int v23 = *(_DWORD *)(a1 + 8);
  if (v23)
  {
    long long v24 = &v22[96 * v23];
    uint64_t v25 = v7 + 88;
    unint64_t v26 = v22 + 24;
    do
    {
      long long v28 = *(_OWORD *)(v26 - 24);
      *((void *)v25 - 9) = *((void *)v26 - 1);
      *(_OWORD *)(v25 - 22) = v28;
      *((void *)v26 - 2) = 0;
      *((void *)v26 - 1) = 0;
      *((void *)v26 - 3) = 0;
      *((unsigned char *)v25 - 64) = 0;
      *uint64_t v25 = -1;
      uint64_t v29 = *((unsigned int *)v26 + 16);
      if (v29 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1EC9D0F90[v29])(&v38, v25 - 16, v26);
        *uint64_t v25 = v29;
      }
      uint64_t v27 = v26 - 24;
      v25 += 24;
      v26 += 96;
    }
    while (v27 + 96 != v24);
    uint64_t v22 = *(char **)a1;
    uint64_t v30 = *(unsigned int *)(a1 + 8);
    if (v30)
    {
      uint64_t v31 = 96 * v30;
      do
      {
        __n128 v32 = &v22[v31];
        uint64_t v33 = *(unsigned int *)&v22[v31 - 8];
        if (v33 != -1) {
          ((void (*)(char *, char *))off_1EC9D0F78[v33])(&v38, v32 - 72);
        }
        *((_DWORD *)v32 - 2) = -1;
        if (*(v32 - 73) < 0) {
          operator delete(*((void **)v32 - 12));
        }
        v31 -= 96;
      }
      while (v31);
      uint64_t v22 = *(char **)a1;
    }
  }
  int v34 = v37;
  if (v22 != v6) {
    free(v22);
  }
  *(void *)a1 = v7;
  unsigned int v35 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 12) = v34;
  return (uint64_t)&v7[96 * v35 - 96];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *((void *)a3 + 6);
  *(void *)(a2 + 48) = v6;
  if (*((void *)a3 + 6) >= 8uLL)
  {
    uint64_t v7 = (_OWORD *)(a2 + 24);
    int v8 = (long long *)((char *)a3 + 24);
    if ((v6 & 2) != 0 && (v6 & 4) != 0)
    {
      (*(void (**)(_OWORD *, long long *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(v7, v8);
    }
    else
    {
      long long v9 = *v8;
      *(void *)(a2 + 40) = *((void *)a3 + 5);
      *uint64_t v7 = v9;
    }
    *((void *)a3 + 6) = 0;
  }
  *(unsigned char *)(a2 + 56) = *((unsigned char *)a3 + 56);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4mlir15AsmResourceBlobEbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_bSF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,BOOL &>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unint64_t v36 = 0;
  uint64_t v6 = (char *)(a1 + 16);
  uint64_t v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  int v8 = v7;
  int v9 = *(_DWORD *)(a1 + 8);
  size_t v10 = &v7[96 * v9];
  unint64_t v12 = *(const void **)a2;
  size_t v11 = *(void *)(a2 + 8);
  v38[0] = *a3;
  int v39 = 1;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v11 >= 0x17)
    {
      uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v17 = v11 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v19 = (char *)operator new(v17 + 1);
      *((void *)v10 + 1) = v11;
      *((void *)v10 + 2) = v18 | 0x8000000000000000;
      *(void *)size_t v10 = v19;
      size_t v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        int v16 = v39;
        unint64_t v20 = &v8[96 * v9];
        v20[24] = 0;
        uint64_t v15 = (int *)(v20 + 24);
        v15[16] = -1;
        int v14 = v15 + 16;
        if (v16 == -1) {
          goto LABEL_14;
        }
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  uint64_t v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  int v14 = (int *)(v13 + 88);
  uint64_t v15 = v14 - 16;
  *(void *)size_t v10 = 0;
  *((void *)v10 + 1) = 0;
  v10[24] = 0;
  *((void *)v10 + 2) = 0;
  int v16 = 1;
LABEL_12:
  ((void (*)(char *, int *, unsigned char *))off_1EC9D0F90[v16])(&v37, v15, v38);
  *int v14 = v16;
  if (v39 != -1) {
    ((void (*)(char *, unsigned char *))off_1EC9D0F78[v39])(&v37, v38);
  }
LABEL_14:
  int v39 = -1;
  unint64_t v21 = *(char **)a1;
  int v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    int v23 = &v21[96 * v22];
    long long v24 = v8 + 88;
    uint64_t v25 = v21 + 24;
    do
    {
      long long v27 = *(_OWORD *)(v25 - 24);
      *((void *)v24 - 9) = *((void *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((void *)v25 - 2) = 0;
      *((void *)v25 - 1) = 0;
      *((void *)v25 - 3) = 0;
      *((unsigned char *)v24 - 64) = 0;
      *long long v24 = -1;
      uint64_t v28 = *((unsigned int *)v25 + 16);
      if (v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1EC9D0F90[v28])(&v37, v24 - 16, v25);
        *long long v24 = v28;
      }
      unint64_t v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    unint64_t v21 = *(char **)a1;
    uint64_t v29 = *(unsigned int *)(a1 + 8);
    if (v29)
    {
      uint64_t v30 = 96 * v29;
      do
      {
        uint64_t v31 = &v21[v30];
        uint64_t v32 = *(unsigned int *)&v21[v30 - 8];
        if (v32 != -1) {
          ((void (*)(char *, char *))off_1EC9D0F78[v32])(&v37, v31 - 72);
        }
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0) {
          operator delete(*((void **)v31 - 12));
        }
        v30 -= 96;
      }
      while (v30);
      unint64_t v21 = *(char **)a1;
    }
  }
  int v33 = v36;
  if (v21 != v6) {
    free(v21);
  }
  *(void *)a1 = v8;
  unsigned int v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::FallbackAsmResourceMap::OpaqueAsmResource,false>::growAndEmplaceBack<llvm::StringRef,std::string>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v36 = 0;
  uint64_t v6 = (char *)(a1 + 16);
  uint64_t v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 96, &v36);
  int v8 = v7;
  int v9 = *(_DWORD *)(a1 + 8);
  size_t v10 = &v7[96 * v9];
  unint64_t v12 = *(const void **)a2;
  size_t v11 = *(void *)(a2 + 8);
  long long v38 = *a3;
  uint64_t v39 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  int v40 = 2;
  if (v12)
  {
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v11 >= 0x17)
    {
      uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v17 = v11 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v19 = (char *)operator new(v17 + 1);
      *((void *)v10 + 1) = v11;
      *((void *)v10 + 2) = v18 | 0x8000000000000000;
      *(void *)size_t v10 = v19;
      size_t v10 = v19;
    }
    else
    {
      v10[23] = v11;
      if (!v11)
      {
LABEL_11:
        v10[v11] = 0;
        int v16 = v40;
        unint64_t v20 = &v8[96 * v9];
        v20[24] = 0;
        uint64_t v15 = (int *)(v20 + 24);
        v15[16] = -1;
        int v14 = v15 + 16;
        if (v16 == -1) {
          goto LABEL_14;
        }
        goto LABEL_12;
      }
    }
    memmove(v10, v12, v11);
    goto LABEL_11;
  }
  uint64_t v13 = &v7[96 * v9];
  *((_DWORD *)v13 + 22) = -1;
  int v14 = (int *)(v13 + 88);
  uint64_t v15 = v14 - 16;
  *(void *)size_t v10 = 0;
  *((void *)v10 + 1) = 0;
  v10[24] = 0;
  *((void *)v10 + 2) = 0;
  int v16 = 2;
LABEL_12:
  ((void (*)(char *, int *, long long *))off_1EC9D0F90[v16])(&v37, v15, &v38);
  *int v14 = v16;
  if (v40 != -1) {
    ((void (*)(char *, long long *))off_1EC9D0F78[v40])(&v37, &v38);
  }
LABEL_14:
  int v40 = -1;
  unint64_t v21 = *(char **)a1;
  int v22 = *(_DWORD *)(a1 + 8);
  if (v22)
  {
    int v23 = &v21[96 * v22];
    long long v24 = v8 + 88;
    uint64_t v25 = v21 + 24;
    do
    {
      long long v27 = *(_OWORD *)(v25 - 24);
      *((void *)v24 - 9) = *((void *)v25 - 1);
      *(_OWORD *)(v24 - 22) = v27;
      *((void *)v25 - 2) = 0;
      *((void *)v25 - 1) = 0;
      *((void *)v25 - 3) = 0;
      *((unsigned char *)v24 - 64) = 0;
      *long long v24 = -1;
      uint64_t v28 = *((unsigned int *)v25 + 16);
      if (v28 != -1)
      {
        ((void (*)(char *, _DWORD *, char *))off_1EC9D0F90[v28])(&v37, v24 - 16, v25);
        *long long v24 = v28;
      }
      unint64_t v26 = v25 - 24;
      v24 += 24;
      v25 += 96;
    }
    while (v26 + 96 != v23);
    unint64_t v21 = *(char **)a1;
    uint64_t v29 = *(unsigned int *)(a1 + 8);
    if (v29)
    {
      uint64_t v30 = 96 * v29;
      do
      {
        uint64_t v31 = &v21[v30];
        uint64_t v32 = *(unsigned int *)&v21[v30 - 8];
        if (v32 != -1) {
          ((void (*)(char *, char *))off_1EC9D0F78[v32])(&v37, v31 - 72);
        }
        *((_DWORD *)v31 - 2) = -1;
        if (*(v31 - 73) < 0) {
          operator delete(*((void **)v31 - 12));
        }
        v30 -= 96;
      }
      while (v30);
      unint64_t v21 = *(char **)a1;
    }
  }
  int v33 = v36;
  if (v21 != v6) {
    free(v21);
  }
  *(void *)a1 = v8;
  unsigned int v34 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 12) = v33;
  return (uint64_t)&v8[96 * v34 - 96];
}

uint64_t mlir::detail::AsmStateImpl::AsmStateImpl(uint64_t a1, unsigned int *a2, long long *a3, uint64_t a4)
{
  v152[4] = *MEMORY[0x1E4F143B8];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection((void *)a1, Context);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 56) = a1 + 72;
  *(void *)(a1 + 64) = 0x600000000;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 216;
  *(void *)(a1 + 208) = 0x400000000;
  *(void *)(a1 + 248) = a1 + 264;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 1;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = a1 + 464;
  *(void *)(a1 + 456) = 0x400000000;
  *(void *)(a1 + 496) = a1 + 512;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 1;
  *(void *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)(a1 + 576) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 560) = v9;
  *(_OWORD *)(a1 + 544) = v8;
  uint64_t v144 = v146;
  uint64_t v145 = 0x400000001;
  int v122 = a3;
  uint64_t v147 = (char *)&v148 + 8;
  uint64_t v149 = 1;
  long long v148 = xmmword_181101A10;
  v146[0] = llvm::allocate_buffer(0x1000uLL, (std::align_val_t)8uLL);
  size_t v10 = (void *)((v146[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v143 = v146[0] + 4096;
  uint64_t v142 = v10 + 3;
  void *v10 = a1 + 400;
  v10[1] = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = v10;
  void v10[2] = 0;
  long long v139 = v141;
  uint64_t v140 = 0x800000000;
  unint64_t v11 = a2[11];
  if ((v11 & 0x7FFFFF) != 0)
  {
    unsigned int v12 = 0;
    unint64_t v13 = (((unint64_t)&a2[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * a2[10];
    uint64_t v14 = 24 * (v11 & 0x7FFFFF);
    do
    {
      *(void *)&long long v131 = v13;
      *((void *)&v131 + 1) = *(void *)(a1 + 528);
      LODWORD(v132) = *(_DWORD *)(a1 + 536);
      uint64_t v133 = v10;
      uint64_t v15 = (char *)v139;
      if (v12 >= HIDWORD(v140))
      {
        unint64_t v19 = v12 + 1;
        BOOL v20 = (char *)v139 + 32 * v12 > (char *)&v131;
        if (v139 <= &v131 && v20)
        {
          int64_t v21 = (char *)&v131 - (unsigned char *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v19, 32);
          uint64_t v15 = (char *)v139;
          int v16 = (long long *)((char *)v139 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v19, 32);
          int v16 = &v131;
          uint64_t v15 = (char *)v139;
        }
      }
      else
      {
        int v16 = &v131;
      }
      uint64_t v17 = &v15[32 * v140];
      long long v18 = v16[1];
      *(_OWORD *)uint64_t v17 = *v16;
      *((_OWORD *)v17 + 1) = v18;
      unsigned int v12 = v140 + 1;
      LODWORD(v140) = v140 + 1;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  unsigned int v22 = v140;
  uint64_t j = (uint64_t **)(a1 + 424);
  if (v140)
  {
    unint64_t v124 = (_DWORD *)(a1 + 504);
    int v125 = (void *)(a1 + 496);
    while (1)
    {
      long long v24 = (char *)v139 + 32 * v22;
      int v126 = (mlir::Region *)*((void *)v24 - 4);
      int v25 = *((_DWORD *)v24 - 4);
      unint64_t v26 = (uint64_t *)*((void *)v24 - 1);
      uint64_t v27 = *((void *)v24 - 3);
      LODWORD(v140) = v22 - 1;
      *(void *)(a1 + 528) = v27;
      *(_DWORD *)(a1 + 536) = v25;
      for (uint64_t i = *(uint64_t **)(a1 + 424); i != v26; uint64_t i = *j)
      {
        *(void *)(*i + 24) = i[1];
        uint64_t v29 = i[2];
        if (v29)
        {
          uint64_t v30 = *i;
          if (*(void *)(v29 + 8))
          {
            *(void *)&long long v131 = 0;
            char v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v131);
            uint64_t v32 = (void *)v131;
            if ((v31 & 1) == 0)
            {
              int v33 = *(_DWORD *)(v30 + 8);
              unsigned int v34 = *(_DWORD *)(v30 + 16);
              if (4 * v33 + 4 >= 3 * v34)
              {
                v34 *= 2;
              }
              else if (v34 + ~v33 - *(_DWORD *)(v30 + 12) > v34 >> 3)
              {
                ++*(_DWORD *)(v30 + 8);
                if (*v32 != -1) {
                  goto LABEL_27;
                }
                goto LABEL_18;
              }
              llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(v30, v34);
              *(void *)&long long v131 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v131);
              uint64_t v32 = (void *)v131;
              ++*(_DWORD *)(v30 + 8);
              if (*v32 != -1) {
LABEL_27:
              }
                --*(_DWORD *)(v30 + 12);
LABEL_18:
              *(_OWORD *)uint64_t v32 = *(_OWORD *)(v29 + 16);
              v32[2] = 0;
            }
            v32[2] = *(void *)(v29 + 8);
          }
          else
          {
            *(void *)&long long v131 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v30, v29 + 16, &v131))
            {
              *(_OWORD *)long long v131 = xmmword_181101A20;
              *(int32x2_t *)(v30 + 8) = vadd_s32(*(int32x2_t *)(v30 + 8), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
          i[2] = *(void *)v29;
          llvm::deallocate_buffer((llvm *)v29, (void *)0x28);
        }
      }
      *((void *)&v148 + 1) += 24;
      if (v142
        && (((unint64_t)v142 + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v142 + 24 <= v143 - (uint64_t)v142)
      {
        unsigned int v35 = (void *)(((unint64_t)v142 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v36 = a1 + 400;
      }
      else
      {
        unsigned int v37 = v145 >> 7;
        if (v145 >> 7 >= 0x1E) {
          LOBYTE(v37) = 30;
        }
        uint64_t v38 = 4096 << v37;
        buffer = llvm::allocate_buffer(4096 << v37, (std::align_val_t)8uLL);
        uint64_t v40 = v145;
        uint64_t v36 = a1 + 400;
        if (v145 >= (unint64_t)HIDWORD(v145))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v145 + 1, 8);
          uint64_t v40 = v145;
        }
        *((void *)v144 + v40) = buffer;
        LODWORD(v145) = v145 + 1;
        uint64_t v143 = (uint64_t)buffer + v38;
        unsigned int v35 = (void *)(((unint64_t)buffer + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v142 = v35 + 3;
      *unsigned int v35 = v36;
      v35[1] = *(void *)(a1 + 424);
      *(void *)(a1 + 424) = v35;
      v35[2] = 0;
      *(void *)&long long v129 = a1 + 280;
      if ((*(unsigned char *)(a1 + 576) & 4) == 0)
      {
        uint64_t v41 = *((void *)v126 + 2);
        if (v41)
        {
          uint64_t v42 = llvm::DefaultDoCastIfPossible<mlir::OpAsmOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OpAsmOpInterface,mlir::Operation *,void>>::doCastIfPossible(v41);
          if (v42) {
        }
          }
      }
      char v44 = (mlir::Region *)*((void *)v126 + 1);
      if (v44 != v126) {
        break;
      }
LABEL_155:
      mlir::Region::OpIterator::OpIterator(&v150, v126, 0);
      mlir::Region::OpIterator::OpIterator(&v133, v126, 1);
      unint64_t v104 = (mlir::GenericProgramPoint *)v151;
      int64_t v132 = v151;
      long long v131 = v150;
      long long v129 = v150;
      long long v130 = (mlir::GenericProgramPoint *)v151;
      uint64_t v105 = v135;
      for (j = (uint64_t **)(a1 + 424); v130 != v105; unint64_t v104 = v130)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v104);
        unint64_t v107 = *(unsigned int *)(v106 + 44);
        uint64_t v108 = v107 & 0x7FFFFF;
        if ((v107 & 0x7FFFFF) != 0)
        {
          unint64_t v109 = ((v106 + 16 * ((v107 >> 23) & 1) + ((v107 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(v106 + 40);
          unsigned int v110 = v140;
          uint64_t v111 = 24 * v108;
          do
          {
            *(void *)&long long v150 = v109;
            *((void *)&v150 + 1) = *(void *)(a1 + 528);
            LODWORD(v151) = *(_DWORD *)(a1 + 536);
            v152[0] = v35;
            uint64_t v112 = (char *)v139;
            if (v110 >= HIDWORD(v140))
            {
              unint64_t v116 = v110 + 1;
              BOOL v117 = (char *)v139 + 32 * v110 > (char *)&v150;
              if (v139 <= &v150 && v117)
              {
                int64_t v118 = (char *)&v150 - (unsigned char *)v139;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v116, 32);
                uint64_t v112 = (char *)v139;
                unint64_t v113 = (long long *)((char *)v139 + v118);
                uint64_t j = (uint64_t **)(a1 + 424);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v116, 32);
                unint64_t v113 = &v150;
                uint64_t v112 = (char *)v139;
              }
            }
            else
            {
              unint64_t v113 = &v150;
            }
            int v114 = &v112[32 * v140];
            long long v115 = v113[1];
            *(_OWORD *)int v114 = *v113;
            *((_OWORD *)v114 + 1) = v115;
            unsigned int v110 = v140 + 1;
            LODWORD(v140) = v140 + 1;
            v109 += 24;
            v111 -= 24;
          }
          while (v111);
        }
        mlir::Region::OpIterator::operator++((uint64_t *)&v129);
      }
      unsigned int v22 = v140;
      if (!v140) {
        goto LABEL_169;
      }
    }
    unsigned int v45 = 0;
    while (1)
    {
      uint64_t v46 = v44 ? (mlir::Region *)((char *)v44 - 8) : 0;
      unsigned int v47 = *(_DWORD *)(a1 + 392);
      if (!v47) {
        goto LABEL_139;
      }
      uint64_t v48 = *(void *)(a1 + 376);
      uint64_t v49 = ((v46 >> 4) ^ (v46 >> 9)) & (v47 - 1);
      uint64_t v50 = v48 + 32 * v49;
      uint64_t v51 = *(mlir::Block **)v50;
      if (*(mlir::Block **)v50 == v46) {
        goto LABEL_92;
      }
      uint64_t v52 = 0;
      int v53 = 1;
      while (v51 != (mlir::Block *)-4096)
      {
        if (v52) {
          BOOL v54 = 0;
        }
        else {
          BOOL v54 = v51 == (mlir::Block *)-8192;
        }
        if (v54) {
          uint64_t v52 = v50;
        }
        int v55 = v49 + v53++;
        uint64_t v49 = v55 & (v47 - 1);
        uint64_t v50 = v48 + 32 * v49;
        uint64_t v51 = *(mlir::Block **)v50;
        if (*(mlir::Block **)v50 == v46) {
          goto LABEL_92;
        }
      }
      if (v52) {
        uint64_t v50 = v52;
      }
      int v95 = *(_DWORD *)(a1 + 384);
      if (4 * v95 + 4 < 3 * v47)
      {
        if (v47 + ~v95 - *(_DWORD *)(a1 + 388) > v47 >> 3) {
          goto LABEL_64;
        }
      }
      else
      {
LABEL_139:
        v47 *= 2;
      }
      uint64_t v96 = *(void *)(a1 + 376);
      int v97 = *(_DWORD *)(a1 + 392) - 1;
      uint64_t v98 = v97 & ((v46 >> 4) ^ (v46 >> 9));
      uint64_t v50 = v96 + 32 * v98;
      uint64_t v99 = *(mlir::Block **)v50;
      if (*(mlir::Block **)v50 != v46) {
        break;
      }
LABEL_141:
      ++*(_DWORD *)(a1 + 384);
      if (v46 != (mlir::Block *)-4096) {
        goto LABEL_65;
      }
LABEL_66:
      *(void *)uint64_t v50 = v46;
      *(_DWORD *)(v50 + 8) = -1;
      *(void *)(v50 + 16) = "";
      *(void *)(v50 + 24) = 0;
      long long v150 = 0uLL;
      int64_t v151 = 0;
      DWORD2(v131) = 0;
      LOBYTE(v135) = 0;
      uint64_t v136 = 0;
      int v137 = 1;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      int64_t v132 = 0;
      *(void *)&long long v131 = &unk_1EC9A38B8;
      uint64_t v138 = &v150;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v131, 0, 0, 0);
      uint64_t v57 = (_WORD *)v134;
      if ((unint64_t)v133 - v134 > 2)
      {
        *(unsigned char *)(v134 + 2) = 98;
        *uint64_t v57 = 25182;
        v134 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v131, "^bb", 3uLL);
      }
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v131, v45);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v131);
      if (v151 >= 0) {
        size_t v58 = HIBYTE(v151);
      }
      else {
        size_t v58 = *((void *)&v150 + 1);
      }
      if (!v58)
      {
        *(void *)(v50 + 16) = 0;
        *(void *)(v50 + 24) = 0;
        if ((SHIBYTE(v151) & 0x80000000) == 0) {
          goto LABEL_92;
        }
LABEL_91:
        operator delete((void *)v150);
        goto LABEL_92;
      }
      if (v151 >= 0) {
        uint64_t v59 = &v150;
      }
      else {
        uint64_t v59 = (long long *)v150;
      }
      *(void *)(a1 + 512) += v58;
      long long v60 = *(char **)(a1 + 432);
      if (v60 && v58 <= *(void *)(a1 + 440) - (void)v60)
      {
        *(void *)(a1 + 432) = &v60[v58];
      }
      else if (v58 <= 0x1000)
      {
        unsigned int v63 = *(_DWORD *)(a1 + 456) >> 7;
        if (v63 >= 0x1E) {
          LOBYTE(v63) = 30;
        }
        uint64_t v127 = 4096 << v63;
        long long v60 = (char *)llvm::allocate_buffer(4096 << v63, (std::align_val_t)8uLL);
        unint64_t v64 = *(unsigned int *)(a1 + 456);
        if (v64 >= *(unsigned int *)(a1 + 460))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 448, (void *)(a1 + 464), v64 + 1, 8);
          unint64_t v64 = *(unsigned int *)(a1 + 456);
        }
        *(void *)(*(void *)(a1 + 448) + 8 * v64) = v60;
        ++*(_DWORD *)(a1 + 456);
        *(void *)(a1 + 432) = &v60[v58];
        *(void *)(a1 + 440) = &v60[v127];
      }
      else
      {
        long long v60 = (char *)llvm::allocate_buffer(v58, (std::align_val_t)8uLL);
        unint64_t v61 = *(unsigned int *)(a1 + 504);
        if (v61 >= *(unsigned int *)(a1 + 508))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v125, (void *)(a1 + 512), v61 + 1, 16);
          unint64_t v61 = *v124;
        }
        uint64_t v62 = (void *)(*v125 + 16 * v61);
        *uint64_t v62 = v60;
        v62[1] = v58;
        ++*v124;
      }
      memmove(v60, v59, v58);
      *(void *)(v50 + 16) = v60;
      *(void *)(v50 + 24) = v58;
      if (SHIBYTE(v151) < 0) {
        goto LABEL_91;
      }
LABEL_92:
      unsigned int v128 = v45;
      *(_DWORD *)(v50 + 8) = v45;
      BOOL isEntryBlock = mlir::Block::isEntryBlock(v46);
      BOOL v66 = isEntryBlock;
      uint64_t v67 = 3;
      if (!isEntryBlock) {
        uint64_t v67 = 0;
      }
      *(void *)&long long v150 = v152;
      int64_t v151 = 32;
      if (isEntryBlock) {
        qmemcpy(v152, "arg", 3);
      }
      *((void *)&v150 + 1) = v67;
      DWORD2(v131) = 0;
      LOBYTE(v135) = 0;
      uint64_t v136 = 0;
      int v137 = 1;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      int64_t v132 = 0;
      *(void *)&long long v131 = &unk_1EC9A3930;
      uint64_t v138 = &v150;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v131, 0, 0, 0);
      __n128 v69 = (unint64_t *)*((void *)v46 + 6);
      int v68 = (unint64_t *)*((void *)v46 + 7);
      if (v68 != v69)
      {
        if (v66)
        {
          while (1)
          {
            unint64_t v81 = *v69;
            int v82 = *(_DWORD *)(a1 + 296);
            if (v82)
            {
              uint64_t v83 = *(void *)(a1 + 280);
              {
                unint64_t v91 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v91 = 0xFF51AFD7ED558CCDLL;
                }
                llvm::hashing::detail::get_execution_seed(void)::seed = v91;
              }
              unint64_t v84 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v81) ^ HIDWORD(v81));
              unint64_t v85 = 0x9DDFEA08EB382D69 * (HIDWORD(v81) ^ (v84 >> 47) ^ v84);
              unsigned int v86 = (-348639895 * ((v85 >> 47) ^ v85)) & (v82 - 1);
              uint64_t v87 = *(void *)(v83 + 16 * v86);
              if (v87 == v81) {
                goto LABEL_115;
              }
              int v88 = 1;
              while (v87 != -4096)
              {
                unsigned int v89 = v86 + v88++;
                unsigned int v86 = v89 & (v82 - 1);
                uint64_t v87 = *(void *)(v83 + 16 * v86);
                if (v87 == v81) {
                  goto LABEL_115;
                }
              }
            }
            uint64_t v90 = *((void *)&v150 + 1);
            if (*((void *)&v150 + 1) != 3)
            {
              if (*((void *)&v150 + 1) <= 3uLL)
              {
                if ((unint64_t)v151 > 2
                  || (llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v150, v152, 3uLL, 1),
                      uint64_t v90 = *((void *)&v150 + 1),
                      *((void *)&v150 + 1) != 3))
                {
                  bzero((void *)(v150 + v90), 3 - v90);
                }
              }
              *((void *)&v150 + 1) = 3;
            }
            unint64_t v80 = *(unsigned int *)(a1 + 532);
            *(_DWORD *)(a1 + 532) = v80 + 1;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v131, v80);
LABEL_115:
            if (++v69 == v68) {
              goto LABEL_132;
            }
          }
        }
        while (2)
        {
          unint64_t v70 = *v69;
          int v71 = *(_DWORD *)(a1 + 296);
          if (v71)
          {
            uint64_t v72 = *(void *)(a1 + 280);
            {
              unint64_t v79 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v79 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v79;
            }
            unint64_t v73 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v70) ^ HIDWORD(v70));
            unint64_t v74 = 0x9DDFEA08EB382D69 * (HIDWORD(v70) ^ (v73 >> 47) ^ v73);
            unsigned int v75 = (-348639895 * ((v74 >> 47) ^ v74)) & (v71 - 1);
            uint64_t v76 = *(void *)(v72 + 16 * v75);
            if (v76 != v70)
            {
              int v77 = 1;
              while (v76 != -4096)
              {
                unsigned int v78 = v75 + v77++;
                unsigned int v75 = v78 & (v71 - 1);
                uint64_t v76 = *(void *)(v72 + 16 * v75);
                if (v76 == v70) {
                  goto LABEL_100;
                }
              }
              goto LABEL_99;
            }
          }
          else
          {
LABEL_99:
          }
LABEL_100:
          if (++v69 == v68) {
            break;
          }
          continue;
        }
      }
LABEL_132:
      int v92 = (mlir::Block *)((char *)v46 + 32);
      for (k = (mlir::GenericProgramPoint *)*((void *)v46 + 5);
            k != v92;
            k = (mlir::GenericProgramPoint *)*((void *)k + 1))
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(k);
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v131);
      if ((void *)v150 != v152) {
        free((void *)v150);
      }
      unsigned int v45 = v128 + 1;
      char v44 = (mlir::Region *)*((void *)v44 + 1);
      if (v44 == v126) {
        goto LABEL_155;
      }
    }
    uint64_t v100 = 0;
    int v101 = 1;
    while (v99 != (mlir::Block *)-4096)
    {
      if (v100) {
        BOOL v102 = 0;
      }
      else {
        BOOL v102 = v99 == (mlir::Block *)-8192;
      }
      if (v102) {
        uint64_t v100 = v50;
      }
      int v103 = v98 + v101++;
      uint64_t v98 = v103 & v97;
      uint64_t v50 = v96 + 32 * v98;
      uint64_t v99 = *(mlir::Block **)v50;
      if (*(mlir::Block **)v50 == v46) {
        goto LABEL_141;
      }
    }
    if (v100) {
      uint64_t v50 = v100;
    }
LABEL_64:
    __n128 v56 = *(mlir::Block **)v50;
    ++*(_DWORD *)(a1 + 384);
    if (v56 == (mlir::Block *)-4096) {
      goto LABEL_66;
    }
LABEL_65:
    --*(_DWORD *)(a1 + 388);
    goto LABEL_66;
  }
LABEL_169:
  while (*j)
    llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(*j);
  if (v139 != v141) {
    free(v139);
  }
  if (v145) {
    llvm::deallocate_buffer(*(llvm **)v144, (void *)0x1000);
  }
  if (v148) {
    llvm::deallocate_buffer(*(llvm **)v147, *((void **)v147 + 1));
  }
  if (v147 != (char *)&v148 + 8) {
    free(v147);
  }
  if (v144 != v146) {
    free(v144);
  }
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  long long v119 = *v122;
  long long v120 = v122[1];
  *(void *)(a1 + 648) = *((void *)v122 + 4);
  *(_OWORD *)(a1 + 616) = v119;
  *(_OWORD *)(a1 + 632) = v120;
  *(void *)(a1 + 656) = a4;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(void *)(a1 + 688) = a1 + 704;
  *(void *)(a1 + 696) = 0;
  return a1;
}

uint64_t mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::DialectInterfaceCollection(void *a1, mlir::MLIRContext *a2)
{
  {
    unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
    unint64_t v14 = 77;
    unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
    if (v14 >= v6) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = v14;
    }
    long long v8 = &v13[v7];
    unint64_t v9 = v14 - v7;
    if (v14 - v7 >= 0x12) {
      uint64_t v10 = 18;
    }
    else {
      uint64_t v10 = v14 - v7;
    }
    unint64_t v11 = v9 - v10;
    if (v11 >= v11 - 1) {
      uint64_t v12 = v11 - 1;
    }
    else {
      uint64_t v12 = v11;
    }
    mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  }
  uint64_t v4 = mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id;
  unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
  unint64_t v14 = 77;
  llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  uint64_t result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v4);
  *a1 = &unk_1EC9C6D68;
  return result;
}

void mlir::DialectInterfaceCollection<mlir::OpAsmDialectInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
}

void sub_180424628(void *__p)
{
  operator delete(__p);
}

void anonymous namespace'::SSANameState::numberValuesInOp(_anonymous_namespace_::SSANameState *this, mlir::Operation *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  __base = &v49;
  int v49 = 0;
  size_t __nel = 0x200000001;
  v45[0] = this;
  v45[1] = &__base;
  char v44 = this;
  if ((*((unsigned char *)this + 296) & 4) == 0)
  {
    uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::OpAsmOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OpAsmOpInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v4)
    {
      uint64_t v6 = v4;
      unint64_t v7 = (void (**)(void, uint64_t, void, void *))v5;
    }
  }
  if (*((_DWORD *)a2 + 9))
  {
    unint64_t v43 = (unint64_t)a2 - 16;
    uint64_t v46 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v43, &v46) & 1) == 0)
    {
      long long v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v43, &v43, v46);
      *long long v8 = v43;
      *((_DWORD *)v8 + 2) = (*((_DWORD *)this + 62))++;
    }
    if (__nel)
    {
      if (__nel == 1) {
        goto LABEL_35;
      }
      qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<int>);
    }
    uint64_t v11 = *((void *)this + 9);
    uint64_t v10 = (char *)this + 72;
    uint64_t v9 = v11;
    uint64_t v46 = a2;
    int v12 = *((_DWORD *)v10 + 4);
    if (v12)
    {
      unsigned int v13 = v12 - 1;
      uint64_t v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v15 = (mlir::Operation **)(v9 + 32 * v14);
      int v16 = *v15;
      if (*v15 == a2) {
        goto LABEL_35;
      }
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != (mlir::Operation *)-4096)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == (mlir::Operation *)-8192;
        }
        if (v19) {
          uint64_t v17 = (uint64_t *)v15;
        }
        int v20 = v14 + v18++;
        uint64_t v14 = v20 & v13;
        uint64_t v15 = (mlir::Operation **)(v9 + 32 * v14);
        int v16 = *v15;
        if (*v15 == a2) {
          goto LABEL_35;
        }
      }
      if (v17) {
        uint64_t v30 = v17;
      }
      else {
        uint64_t v30 = (uint64_t *)v15;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>((uint64_t)v10, v30, (uint64_t *)&v46, (uint64_t)&__base);
LABEL_35:
    char v31 = __base;
    if (__base == &v49) {
      return;
    }
    goto LABEL_36;
  }
  if ((*((unsigned char *)this + 296) & 0x40) == 0) {
    goto LABEL_35;
  }
  uint64_t v21 = *((void *)this + 6);
  unsigned int v22 = *((_DWORD *)this + 16);
  if (!v22) {
    goto LABEL_51;
  }
  unsigned int v23 = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  long long v24 = (mlir::Operation **)(v21 + 16 * v23);
  int v25 = *v24;
  if (*v24 == a2) {
    goto LABEL_35;
  }
  unint64_t v26 = 0;
  int v27 = 1;
  while (v25 != (mlir::Operation *)-4096)
  {
    if (v26) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v25 == (mlir::Operation *)-8192;
    }
    if (v28) {
      unint64_t v26 = v24;
    }
    unsigned int v29 = v23 + v27++;
    unsigned int v23 = v29 & (v22 - 1);
    long long v24 = (mlir::Operation **)(v21 + 16 * v23);
    int v25 = *v24;
    if (*v24 == a2) {
      goto LABEL_35;
    }
  }
  int v33 = v26 ? v26 : v24;
  int v34 = *((_DWORD *)this + 14);
  if (4 * v34 + 4 < 3 * v22)
  {
    if (v22 + ~v34 - *((_DWORD *)this + 15) > v22 >> 3) {
      goto LABEL_40;
    }
  }
  else
  {
LABEL_51:
    v22 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 48, v22);
  uint64_t v35 = *((void *)this + 6);
  int v36 = *((_DWORD *)this + 16) - 1;
  unsigned int v37 = v36 & ((a2 >> 4) ^ (a2 >> 9));
  int v33 = (mlir::Operation **)(v35 + 16 * v37);
  uint64_t v38 = *v33;
  if (*v33 != a2)
  {
    uint64_t v39 = 0;
    int v40 = 1;
    while (v38 != (mlir::Operation *)-4096)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v38 == (mlir::Operation *)-8192;
      }
      if (v41) {
        uint64_t v39 = v33;
      }
      unsigned int v42 = v37 + v40++;
      unsigned int v37 = v42 & v36;
      int v33 = (mlir::Operation **)(v35 + 16 * (v42 & v36));
      uint64_t v38 = *v33;
      if (*v33 == a2) {
        goto LABEL_53;
      }
    }
    if (v39) {
      int v33 = v39;
    }
LABEL_40:
    uint64_t v32 = *v33;
    ++*((_DWORD *)this + 14);
    if (v32 == (mlir::Operation *)-4096) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_53:
  ++*((_DWORD *)this + 14);
  if (a2 != (mlir::Operation *)-4096) {
LABEL_41:
  }
    --*((_DWORD *)this + 15);
LABEL_42:
  *int v33 = a2;
  *((_DWORD *)v33 + 2) = (*((_DWORD *)this + 62))++;
  char v31 = __base;
  if (__base != &v49) {
LABEL_36:
  }
    free(v31);
}

void llvm::function_ref<void ()(mlir::Block *,llvm::StringRef)>::callback_fn<anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_0>(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  int v33 = v35;
  long long v34 = xmmword_181101A30;
  v35[0] = 94;
  uint64_t v6 = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v33, "$._-", 4uLL, 1);
  long long v8 = v6;
  size_t v9 = v7;
  uint64_t v10 = (char *)v33;
  if (v33 == v6)
  {
    uint64_t v10 = (char *)v6;
    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = v34;
    if (*((void *)&v34 + 1) < (unint64_t)v34 + v7)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v34 + v7, 1);
      uint64_t v10 = (char *)v33;
      uint64_t v11 = v34;
    }
    if (v9)
    {
      memcpy(&v10[v11], v8, v9);
      uint64_t v10 = (char *)v33;
      uint64_t v11 = v34;
    }
    v9 += v11;
    *(void *)&long long v34 = v9;
    if (v9)
    {
LABEL_7:
      int v12 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v5 + 152), v9, 0);
      memmove(v12, v10, v9);
      uint64_t v13 = v5 + 96;
      uint64_t v14 = *(void *)(v5 + 96);
      unsigned int v15 = *(_DWORD *)(v5 + 112);
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  int v12 = 0;
  uint64_t v13 = v5 + 96;
  uint64_t v14 = *(void *)(v5 + 96);
  unsigned int v15 = *(_DWORD *)(v5 + 112);
  if (v15)
  {
LABEL_8:
    uint64_t v16 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v17 = (void *)(v14 + 32 * v16);
    uint64_t v18 = *v17;
    if (*v17 == a2) {
      goto LABEL_25;
    }
    BOOL v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -8192;
      }
      if (v21) {
        BOOL v19 = v17;
      }
      int v22 = v16 + v20++;
      uint64_t v16 = v22 & (v15 - 1);
      uint64_t v17 = (void *)(v14 + 32 * v16);
      uint64_t v18 = *v17;
      if (*v17 == a2) {
        goto LABEL_25;
      }
    }
    if (v19) {
      uint64_t v17 = v19;
    }
    int v23 = *(_DWORD *)(v5 + 104);
    if (4 * v23 + 4 >= 3 * v15) {
      goto LABEL_31;
    }
LABEL_21:
    if (v15 + ~v23 - *(_DWORD *)(v5 + 108) > v15 >> 3) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_20:
  uint64_t v17 = 0;
  int v23 = *(_DWORD *)(v5 + 104);
  if (4 * v23 + 4 < 3 * v15) {
    goto LABEL_21;
  }
LABEL_31:
  v15 *= 2;
LABEL_32:
  uint64_t v25 = *(void *)(v5 + 96);
  int v26 = *(_DWORD *)(v5 + 112) - 1;
  uint64_t v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v17 = (void *)(v25 + 32 * v27);
  uint64_t v28 = *v17;
  if (*v17 == a2)
  {
LABEL_33:
    ++*(_DWORD *)(v5 + 104);
    if (a2 == -4096) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  unsigned int v29 = 0;
  int v30 = 1;
  while (v28 != -4096)
  {
    if (v29) {
      BOOL v31 = 0;
    }
    else {
      BOOL v31 = v28 == -8192;
    }
    if (v31) {
      unsigned int v29 = v17;
    }
    int v32 = v27 + v30++;
    uint64_t v27 = v32 & v26;
    uint64_t v17 = (void *)(v25 + 32 * v27);
    uint64_t v28 = *v17;
    if (*v17 == a2) {
      goto LABEL_33;
    }
  }
  if (v29) {
    uint64_t v17 = v29;
  }
LABEL_22:
  uint64_t v24 = *v17;
  ++*(_DWORD *)(v5 + 104);
  if (v24 != -4096) {
LABEL_23:
  }
    --*(_DWORD *)(v5 + 108);
LABEL_24:
  *uint64_t v17 = a2;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0;
LABEL_25:
  *((_DWORD *)v17 + 2) = -1;
  v17[2] = v12;
  v17[3] = v9;
  if (v33 != v35) {
    free(v33);
  }
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,anonymous namespace'::BlockInfo>>,mlir::Block *,anonymous namespace'::BlockInfo,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,anonymous namespace'::BlockInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *uint64_t v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unsigned int v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      uint64_t v16 = v4;
      do
      {
        uint64_t v19 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            unsigned int v21 = v20 - 1;
            uint64_t v22 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            uint64_t v17 = *(void *)a1 + 32 * v22;
            uint64_t v23 = *(void *)v17;
            if (*(void *)v17 != v19)
            {
              uint64_t v24 = 0;
              int v25 = 1;
              while (v23 != -4096)
              {
                if (v24) {
                  BOOL v26 = 0;
                }
                else {
                  BOOL v26 = v23 == -8192;
                }
                if (v26) {
                  uint64_t v24 = v17;
                }
                int v27 = v22 + v25++;
                uint64_t v22 = v27 & v21;
                uint64_t v17 = *(void *)a1 + 32 * v22;
                uint64_t v23 = *(void *)v17;
                if (*(void *)v17 == v19) {
                  goto LABEL_15;
                }
              }
              if (v24) {
                uint64_t v17 = v24;
              }
            }
          }
          else
          {
            uint64_t v17 = 0;
          }
LABEL_15:
          *(void *)uint64_t v17 = v19;
          long long v18 = *(_OWORD *)((char *)v16 + 8);
          *(void *)(v17 + 24) = *((void *)v16 + 3);
          *(_OWORD *)(v17 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v28 = *(unsigned int *)(a1 + 16);
  if (v28)
  {
    if (((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_40;
    }
    uint64_t v29 = ((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v29 & 0xFFFFFFFFFFFFFFELL)];
    int v30 = result + 4;
    uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -4096;
      *int v30 = -4096;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_40:
      int v32 = &result[4 * v28];
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<anonymous namespace'::SSANameState::numberValuesInOp(mlir::Operation &)::$_1>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (a2 && (*(void *)(a2 + 8) & 7) == 6)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    int v8 = v7 + 6;
    if (v7 == -6) {
      return;
    }
  }
  else
  {
    int v8 = v6 & 7;
    if ((v6 & 7) == 0) {
      return;
    }
  }
  uint64_t v9 = a1[1];
  uint64_t v10 = *(unsigned int *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v9 + 16), v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(void *)v9 + 4 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
}

__n128 anonymous namespace'::SSANameState::setValueName(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  unint64_t v52 = a2;
  if (a4)
  {
    uint64_t v57 = 0;
    char v7 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
    int v8 = v57;
    if ((v7 & 1) == 0)
    {
      int v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
      *(void *)int v8 = v52;
      void v8[2] = 0;
    }
    void v8[2] = -1;
    long long v60 = v62;
    long long v61 = xmmword_181101A00;
    __src[0] = sanitizeIdentifier(a3, a4, (unsigned __int8 **)&v60, "$._-", 4uLL, 1);
    __src[1] = v9;
    uint64_t v57 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57))
    {
      uint64_t v11 = __src[0];
      uint64_t v10 = (char *)__src[1];
      uint64_t v57 = v59;
      long long v58 = xmmword_181101A40;
      if (__src[1] < (void *)0x41)
      {
        uint64_t v12 = 0;
        if (!__src[1])
        {
LABEL_16:
          int v20 = &v10[v12];
          *(void *)&long long v58 = v20;
          if ((unint64_t)(v20 + 1) > *((void *)&v58 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)(v20 + 1), 1);
            int v20 = (char *)v58;
          }
          v20[(void)v57] = 95;
          *(void *)&long long v58 = v58 + 1;
          while (1)
          {
            unint64_t v21 = *(unsigned int *)(a1 + 256);
            *(_DWORD *)(a1 + 256) = v21 + 1;
            if (v21)
            {
              uint64_t v22 = 20;
              do
              {
                *((unsigned char *)v63 + v22--) = (v21 % 0xA) | 0x30;
                BOOL v23 = v21 > 9;
                v21 /= 0xAuLL;
              }
              while (v23);
              uint64_t v24 = v22 + 1;
              size_t v25 = 20 - v22;
              if ((unint64_t)(20 - v22) >= 0x7FFFFFFFFFFFFFF8) {
                abort();
              }
            }
            else
            {
              char v64 = 48;
              uint64_t v24 = 20;
              size_t v25 = 1;
            }
            if (v25 > 0x16)
            {
              uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17) {
                uint64_t v27 = v25 | 7;
              }
              uint64_t v28 = v27 + 1;
              p_dst = (void **)operator new(v27 + 1);
              size_t v54 = v25;
              int64_t v55 = v28 | 0x8000000000000000;
              __dst = p_dst;
              if (v24 != 21)
              {
LABEL_32:
                memcpy(p_dst, (char *)v63 + v24, v25);
                p_dst = (void **)((char *)p_dst + v25);
              }
            }
            else
            {
              HIBYTE(v55) = v25;
              p_dst = &__dst;
              if (v24 != 21) {
                goto LABEL_32;
              }
            }
            *(unsigned char *)p_dst = 0;
            int v29 = SHIBYTE(v55);
            int v30 = __dst;
            if (v55 >= 0) {
              uint64_t v31 = &__dst;
            }
            else {
              uint64_t v31 = (void **)__dst;
            }
            if (v55 >= 0) {
              size_t v32 = HIBYTE(v55);
            }
            else {
              size_t v32 = v54;
            }
            uint64_t v33 = v58;
            if (*((void *)&v58 + 1) < (unint64_t)v58 + v32)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, v58 + v32, 1);
              uint64_t v33 = v58;
            }
            if (v32)
            {
              memcpy((char *)v57 + v33, v31, v32);
              uint64_t v33 = v58;
            }
            size_t v34 = v33 + v32;
            *(void *)&long long v58 = v34;
            if (v29 < 0)
            {
              operator delete(v30);
              size_t v34 = v58;
            }
            __dst = v57;
            size_t v54 = v34;
            v63[0] = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)&__dst, v63) & 1) == 0)
            {
              unsigned int v37 = (void *)v58;
              if ((void)v58)
              {
                uint64_t v38 = v57;
                uint64_t v39 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), v58, 0);
                memmove(v39, v38, (size_t)v37);
                __src[0] = v39;
                __src[1] = v37;
                int v40 = v57;
                if (v57 == v59)
                {
LABEL_60:
                  uint64_t v41 = *(void *)(a1 + 144);
                  uint64_t v57 = 0;
                  int v42 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 120), (uint64_t)__src, &v57);
                  unint64_t v43 = v57;
                  if (v42)
                  {
                    uint64_t v44 = *((void *)v57 + 2);
                  }
                  else
                  {
                    unint64_t v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(a1 + 120, (uint64_t)__src, (uint64_t)__src, v57);
                    uint64_t v44 = 0;
                    *(_OWORD *)unint64_t v43 = *(_OWORD *)__src;
                    v43[2] = 0;
                  }
                  uint64_t v45 = *(void *)(v41 + 16);
                  buffer = llvm::allocate_buffer(0x28uLL, (std::align_val_t)8uLL);
                  __n128 v51 = *(__n128 *)__src;
                  buffer[1] = *(_OWORD *)__src;
                  *((unsigned char *)buffer + 32) = 0;
                  *(void *)buffer = v45;
                  *((void *)buffer + 1) = v44;
                  v43[2] = buffer;
                  *(void *)(v41 + 16) = buffer;
                  if (v60 != v62) {
                    free(v60);
                  }
                  unsigned int v47 = (uint64_t *)(a1 + 24);
                  uint64_t v57 = 0;
                  char v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v47, &v52, &v57);
                  int v49 = v57;
                  if ((v48 & 1) == 0)
                  {
                    int v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v47, (uint64_t)&v52, &v52, v57);
                    unint64_t v50 = v52;
                    v49[1] = 0;
                    v49[2] = 0;
                    void *v49 = v50;
                  }
                  __n128 result = v51;
                  *(__n128 *)(v49 + 1) = v51;
                  return result;
                }
              }
              else
              {
                __src[0] = 0;
                __src[1] = 0;
                int v40 = v57;
                if (v57 == v59) {
                  goto LABEL_60;
                }
              }
              free(v40);
              goto LABEL_60;
            }
            uint64_t v35 = (char *)__src[1] + 1;
            uint64_t v36 = (char *)v58;
            if ((void *)v58 != (char *)__src[1] + 1)
            {
              if ((void *)v58 <= (char *)__src[1] + 1)
              {
                if (*((void *)&v58 + 1) < (unint64_t)v35)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1] + 1, 1);
                  uint64_t v36 = (char *)v58;
                }
                if (v35 != v36) {
                  bzero(&v36[(void)v57], v35 - v36);
                }
              }
              *(void *)&long long v58 = v35;
            }
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v57, v59, (unint64_t)__src[1], 1);
        uint64_t v12 = v58;
        if (!v10) {
          goto LABEL_16;
        }
      }
      memcpy((char *)v57 + v12, v11, (size_t)v10);
      uint64_t v12 = v58;
      goto LABEL_16;
    }
    if (__src[1])
    {
      uint64_t v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 152), (uint64_t)__src[1], 0);
      long long v18 = v17;
      if (__src[1])
      {
        memmove(v17, __src[0], (size_t)__src[1]);
        uint64_t v19 = __src[1];
LABEL_57:
        __src[0] = v18;
        __src[1] = v19;
        goto LABEL_60;
      }
    }
    else
    {
      long long v18 = 0;
    }
    uint64_t v19 = 0;
    goto LABEL_57;
  }
  int v13 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = v13 + 1;
  uint64_t v57 = 0;
  char v14 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v52, &v57);
  uint64_t v16 = v57;
  if ((v14 & 1) == 0)
  {
    uint64_t v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v52, &v52, v57);
    *(void *)uint64_t v16 = v52;
    v16[2] = 0;
  }
  v16[2] = v13;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      long long v18 = result;
      do
      {
        *long long v18 = xmmword_1810FFA60;
        *(_OWORD *)((char *)v18 + 24) = xmmword_1810FFA60;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            if (*(void *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v27 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v27);
              uint64_t v22 = v27;
              *uint64_t v27 = *(_OWORD *)v21;
              *((void *)v22 + 2) = *(void *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *uint64_t v12 = xmmword_1810FFA60;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      unsigned int v15 = result;
LABEL_25:
      BOOL v26 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *unsigned int v15 = xmmword_1810FFA60;
        unsigned int v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v26);
      return result;
    }
    unint64_t v23 = v14 / 0x18 + 1;
    unsigned int v15 = (_OWORD *)((char *)result + 24 * (v23 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v24 = v23 & 0x1FFFFFFFFFFFFFFELL;
    size_t v25 = result;
    do
    {
      *size_t v25 = xmmword_1810FFA60;
      *(_OWORD *)((char *)v25 + 24) = xmmword_1810FFA60;
      v25 += 3;
      v24 -= 2;
    }
    while (v24);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t llvm::array_pod_sort_comparator<int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::InsertIntoBucket<mlir::Operation *,llvm::SmallVector<int,2u>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      uint64_t v10 = *a2;
      goto LABEL_4;
    }
    int v12 = *(_DWORD *)(a1 + 16);
  }
  unsigned int v13 = *(uint64_t **)a1;
  unint64_t v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40) {
    unsigned int v17 = v16 + 1;
  }
  else {
    unsigned int v17 = 64;
  }
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(32 * v17, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v13)
  {
    uint64_t v19 = (char *)(32 * v8);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(a1, v13, (uint64_t *)&v19[(void)v13]);
    llvm::deallocate_buffer((llvm *)v13, v19);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  uint64_t v21 = buffer;
  if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_36;
  }
  uint64_t v22 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  uint64_t v21 = &buffer[4 * (v22 & 0xFFFFFFFFFFFFFFELL)];
  unint64_t v23 = buffer + 4;
  uint64_t v24 = v22 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 4) = -4096;
    *unint64_t v23 = -4096;
    v23 += 8;
    v24 -= 2;
  }
  while (v24);
  if (v22 != (v22 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_36:
    do
    {
      *uint64_t v21 = -4096;
      v21 += 4;
    }
    while (v21 != &buffer[4 * v20]);
  }
  uint64_t v10 = *a3;
  unsigned int v25 = v20 - 1;
  uint64_t v26 = ((*a3 >> 4) ^ (*a3 >> 9)) & v25;
  a2 = &buffer[4 * v26];
  uint64_t v27 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v28 = 0;
    int v29 = 1;
    while (v27 != -4096)
    {
      if (v28) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = v27 == -8192;
      }
      if (v30) {
        uint64_t v28 = a2;
      }
      int v31 = v26 + v29++;
      uint64_t v26 = v31 & v25;
      a2 = &buffer[4 * v26];
      uint64_t v27 = *a2;
      if (v10 == *a2) {
        goto LABEL_4;
      }
    }
    if (v28) {
      a2 = v28;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8)) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(a2 + 1), a4);
  }
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>,mlir::Operation *,llvm::SmallVector<int,1u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<int,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      uint64_t v9 = v8 + 1;
      uint64_t v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      unint64_t v11 = &v7[4 * v10];
      int v12 = v7 + 4;
      uint64_t v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *int v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v11 = *(void **)a1;
    }
    unint64_t v14 = &v7[4 * v6];
    do
    {
      *unint64_t v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v16 = *(_DWORD *)(a1 + 16) - 1;
        uint64_t v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        long long v18 = (void *)(*(void *)a1 + 32 * v17);
        uint64_t v19 = *v18;
        if (v15 != *v18)
        {
          uint64_t v21 = 0;
          int v22 = 1;
          while (v19 != -4096)
          {
            if (v21) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v19 == -8192;
            }
            if (v23) {
              uint64_t v21 = v18;
            }
            int v24 = v17 + v22++;
            uint64_t v17 = v24 & v16;
            long long v18 = (void *)(*(void *)a1 + 32 * v17);
            uint64_t v19 = *v18;
            if (v15 == *v18) {
              goto LABEL_15;
            }
          }
          if (v21) {
            long long v18 = v21;
          }
        }
LABEL_15:
        *long long v18 = v15;
        v18[1] = v18 + 3;
        v18[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v18 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v20 = (uint64_t *)v4[1];
        if (v20 != v4 + 3) {
          free(v20);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::ScopedHashTableScope<llvm::StringRef,char,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::MallocAllocator>::~ScopedHashTableScope(uint64_t *result)
{
  uint64_t v1 = result;
  *(void *)(*result + 24) = result[1];
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = *result;
    if (*(void *)(v2 + 8))
    {
      unint64_t v6 = 0;
      char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6);
      unint64_t v5 = v6;
      if ((v4 & 1) == 0)
      {
        unint64_t v5 = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>(v3, v2 + 16, v2 + 16, (void *)v6);
        *(_OWORD *)unint64_t v5 = *(_OWORD *)(v2 + 16);
        *(void *)(v5 + 16) = 0;
      }
      *(void *)(v5 + 16) = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v6 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v3, v2 + 16, &v6))
      {
        *(_OWORD *)unint64_t v6 = xmmword_181101A20;
        *(int32x2_t *)(v3 + 8) = vadd_s32(*(int32x2_t *)(v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    v1[2] = *(void *)v2;
    llvm::deallocate_buffer((llvm *)v2, (void *)0x28);
  }
  return result;
}

double llvm::function_ref<void ()(mlir::Value,llvm::StringRef)>::callback_fn<anonymous namespace'::SSANameState::numberValuesInRegion(mlir::Region &)::$_0>(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  return result;
}

void mlir::detail::AsmStateImpl::~AsmStateImpl(mlir::detail::AsmStateImpl *this)
{
  uint64_t v2 = (char *)*((void *)this + 86);
  if (v2 != (char *)this + 704) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 83), (void *)(8 * *((unsigned int *)this + 170)));
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::InsertIntoBucket<mlir::Dialect *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(48 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = 6 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  unint64_t v18 = 48 * v17 - 48;
  uint64_t v19 = buffer;
  if (v18 < 0x30) {
    goto LABEL_34;
  }
  unint64_t v20 = v18 / 0x30 + 1;
  uint64_t v19 = &buffer[6 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  uint64_t v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  int v22 = buffer;
  do
  {
    *int v22 = -4096;
    v22[6] = -4096;
    v22 += 12;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *uint64_t v19 = -4096;
      v19 += 6;
    }
    while (v19 != &buffer[6 * v17]);
  }
  uint64_t v7 = *a3;
  int v23 = v17 - 1;
  unsigned int v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[6 * v24];
  uint64_t v25 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = a2;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      a2 = &buffer[6 * v24];
      uint64_t v25 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v26) {
      a2 = v26;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = (uint64_t)(a2 + 6);
  a2[5] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>,mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>,llvm::DenseMapInfo<mlir::Dialect *,void>,llvm::detail::DenseMapPair<mlir::Dialect *,llvm::SetVector<mlir::AsmDialectResourceHandle,llvm::SmallVector<mlir::AsmDialectResourceHandle,0u>,llvm::DenseSet<mlir::AsmDialectResourceHandle,llvm::DenseMapInfo<mlir::AsmDialectResourceHandle,void>>,0u>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  unsigned int v5 = *(_DWORD *)(result + 16);
  if (v5)
  {
    uint64_t v6 = *(void **)result;
    unint64_t v7 = 48 * v5 - 48;
    if (v7 < 0x30)
    {
      uint64_t v8 = *(void **)result;
LABEL_7:
      unint64_t v12 = &v6[6 * v5];
      do
      {
        *uint64_t v8 = -4096;
        v8 += 6;
      }
      while (v8 != v12);
      goto LABEL_9;
    }
    unint64_t v9 = v7 / 0x30 + 1;
    uint64_t v8 = &v6[6 * (v9 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v11 = *(void **)result;
    do
    {
      *unint64_t v11 = -4096;
      v11[6] = -4096;
      v11 += 12;
      v10 -= 2;
    }
    while (v10);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v13 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v14 = *(_DWORD *)(result + 16) - 1;
        unsigned int v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
        uint64_t v16 = *(void *)result + 48 * v15;
        uint64_t v17 = *(void *)v16;
        if (v13 != *(void *)v16)
        {
          uint64_t v21 = 0;
          int v22 = 1;
          while (v17 != -4096)
          {
            if (v21) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v17 == -8192;
            }
            if (v23) {
              uint64_t v21 = v16;
            }
            unsigned int v24 = v15 + v22++;
            unsigned int v15 = v24 & v14;
            uint64_t v16 = *(void *)result + 48 * (v24 & v14);
            uint64_t v17 = *(void *)v16;
            if (v13 == *(void *)v16) {
              goto LABEL_15;
            }
          }
          if (v21) {
            uint64_t v16 = v21;
          }
        }
LABEL_15:
        *(void *)(v16 + 8) = 0;
        *(void *)(v16 + 16) = 0;
        *(void *)uint64_t v16 = v13;
        *(_DWORD *)(v16 + 24) = 0;
        *(void *)(v16 + 8) = v3[1];
        v3[1] = 0;
        *(_DWORD *)(v16 + 16) = *((_DWORD *)v3 + 4);
        *(void *)(v16 + 32) = v16 + 48;
        *((_DWORD *)v3 + 4) = 0;
        int v18 = *(_DWORD *)(v16 + 20);
        *(_DWORD *)(v16 + 20) = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = v18;
        int v19 = *(_DWORD *)(v16 + 24);
        *(_DWORD *)(v16 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v19;
        *(void *)(v16 + 40) = 0;
        if (*((_DWORD *)v3 + 10)) {
          llvm::SmallVectorImpl<mlir::AsmDialectResourceHandle>::operator=(v16 + 32, (uint64_t)(v3 + 4));
        }
        ++*(_DWORD *)(v4 + 8);
        unint64_t v20 = (uint64_t *)v3[4];
        if (v20 != v3 + 6) {
          free(v20);
        }
        llvm::deallocate_buffer((llvm *)v3[1], (void *)(24 * *((unsigned int *)v3 + 6)));
      }
      v3 += 6;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::AsmDialectResourceHandle>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    unint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 24 * v8);
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 24 * v9);
        uint64_t v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *unint64_t v7 = 0;
          return a1;
        }
      }
      else
      {
        uint64_t v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      uint64_t v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7) {
        goto LABEL_15;
      }
    }
    memcpy((void *)(*(void *)a1 + 24 * v9), (const void *)(*(void *)a2 + 24 * v9), *(void *)a2 + 24 * v10 - (*(void *)a2 + 24 * v9));
    goto LABEL_15;
  }
  return a1;
}

llvm::raw_ostream *llvm::interleaveComma<llvm::ArrayRef<mlir::Attribute>,mlir::AsmPrinter::Impl::printAttributeImpl(mlir::Attribute,mlir::AsmPrinter::Impl::AttrTypeElision)::$_1,llvm::raw_ostream,mlir::Attribute const>(llvm::raw_ostream *result, llvm::raw_ostream *a2, llvm::raw_ostream **a3)
{
  uint64_t v3 = *((void *)result + 1);
  if (!v3) {
    return result;
  }
  uint64_t v6 = *(uint64_t **)result;
  uint64_t v7 = **(void **)result;
  if (!v7)
  {
    double result = *a3;
    uint64_t v8 = *((void *)*a3 + 4);
    if ((unint64_t)(*((void *)*a3 + 3) - v8) > 0x11)
    {
      *(_WORD *)(v8 + 16) = 15934;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
      *((void *)result + 4) += 18;
      if (v3 == 1) {
        return result;
      }
LABEL_11:
      uint64_t v9 = v6 + 1;
      uint64_t v10 = 8 * v3 - 8;
      while (1)
      {
        unint64_t v11 = (_WORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v11 > 1uLL)
        {
          *unint64_t v11 = 8236;
          *((void *)a2 + 4) += 2;
          uint64_t v12 = *v9;
          if (!*v9)
          {
LABEL_19:
            double result = *a3;
            uint64_t v13 = *((void *)*a3 + 4);
            if ((unint64_t)(*((void *)*a3 + 3) - v13) > 0x11)
            {
              *(_WORD *)(v13 + 16) = 15934;
              *(_OWORD *)uint64_t v13 = *(_OWORD *)"<<NULL ATTRIBUTE>>";
              *((void *)result + 4) += 18;
            }
            else
            {
              double result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
            }
            goto LABEL_13;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
          uint64_t v12 = *v9;
          if (!*v9) {
            goto LABEL_19;
          }
        }
        if (!(_BYTE)result) {
          double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v12, 1);
        }
LABEL_13:
        ++v9;
        v10 -= 8;
        if (!v10) {
          return result;
        }
      }
    }
    double result = llvm::raw_ostream::write(result, "<<NULL ATTRIBUTE>>", 0x12uLL);
LABEL_8:
    if (v3 == 1) {
      return result;
    }
    goto LABEL_11;
  }
  if ((_BYTE)result) {
    goto LABEL_8;
  }
  double result = (llvm::raw_ostream *)mlir::AsmPrinter::Impl::printAttributeImpl(a3, v7, 1);
  if (v3 != 1) {
    goto LABEL_11;
  }
  return result;
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_0>(void *a1, unsigned int a2)
{
  uint64_t v3 = (llvm::raw_ostream **)a1[1];
  long long v4 = *(_OWORD *)(*a1 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)*a1;
  uint64_t v13 = *((void *)&v4 + 1);
  uint64_t v12 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)__p, &v14);
  unsigned int v5 = *v3;
  uint64_t v6 = (unsigned char *)*((void *)*v3 + 4);
  if (*((unsigned char **)*v3 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "(", 1uLL);
    LODWORD(__p[1]) = v15;
    if (v15 <= 0x40) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::APInt::initSlowCase((llvm::APInt *)__p, (const void **)&v14);
    goto LABEL_6;
  }
  *uint64_t v6 = 40;
  ++*((void *)v5 + 4);
  LODWORD(__p[1]) = v15;
  if (v15 > 0x40) {
    goto LABEL_5;
  }
LABEL_3:
  __p[0] = v14;
LABEL_6:
  printDenseIntElement((llvm::APInt *)__p, *v3, *(void *)a1[2]);
  if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
    operator delete[](__p[0]);
  }
  uint64_t v7 = *v3;
  uint64_t v8 = (unsigned char *)*((void *)*v3 + 4);
  if (*((unsigned char **)*v3 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, ",", 1uLL);
    LODWORD(__p[1]) = v17;
    if (v17 <= 0x40) {
      goto LABEL_11;
    }
LABEL_13:
    llvm::APInt::initSlowCase((llvm::APInt *)__p, (const void **)&v16);
    goto LABEL_14;
  }
  *uint64_t v8 = 44;
  ++*((void *)v7 + 4);
  LODWORD(__p[1]) = v17;
  if (v17 > 0x40) {
    goto LABEL_13;
  }
LABEL_11:
  __p[0] = v16;
LABEL_14:
  printDenseIntElement((llvm::APInt *)__p, *v3, *(void *)a1[2]);
  if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
    operator delete[](__p[0]);
  }
  uint64_t v9 = *v3;
  uint64_t v10 = (unsigned char *)*((void *)*v3 + 4);
  if (*((unsigned char **)*v3 + 3) == v10)
  {
    llvm::raw_ostream::write(v9, ")", 1uLL);
    if (v17 < 0x41) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned char *v10 = 41;
    ++*((void *)v9 + 4);
    if (v17 < 0x41) {
      goto LABEL_23;
    }
  }
  if (v16) {
    operator delete[](v16);
  }
LABEL_23:
  if (v15 >= 0x41)
  {
    if (v14) {
      operator delete[](v14);
    }
  }
}

void printDenseIntElement(llvm::APInt *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v12 = a3;
  if (mlir::Type::isInteger((mlir::Type *)&v12, 1))
  {
    unsigned int v5 = *((_DWORD *)a1 + 2);
    if (v5 > 0x40) {
      BOOL v6 = llvm::APInt::countLeadingZerosSlowCase(a1) == v5;
    }
    else {
      BOOL v6 = *(void *)a1 == 0;
    }
    int v8 = v6;
    if (v8) {
      uint64_t v9 = "false";
    }
    else {
      uint64_t v9 = "true";
    }
    if (v8) {
      size_t v10 = 5;
    }
    else {
      size_t v10 = 4;
    }
    unint64_t v11 = (void *)*((void *)a2 + 4);
    if (v10 <= *((void *)a2 + 3) - (void)v11)
    {
      memcpy(v11, v9, v10);
      *((void *)a2 + 4) += v10;
    }
    else
    {
      llvm::raw_ostream::write(a2, v9, v10);
    }
  }
  else
  {
    BOOL isUnsignedInteger = mlir::Type::isUnsignedInteger((mlir::Type *)&v12);
    llvm::APInt::print(a1, a2, !isUnsignedInteger);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_1>(long long **a1, unsigned int a2)
{
  void v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::raw_ostream **)a1[1];
  uint64_t v3 = *((void *)*a1 + 4);
  long long v4 = (*a1)[1];
  long long v17 = **a1;
  uint64_t v19 = *((void *)&v4 + 1);
  uint64_t v20 = v3;
  uint64_t v18 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v17, &v13);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v13, (llvm::APFloatBase *)&v17, (uint64_t)v21);
  if (v16 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v14 >= 0x41 && v13) {
    operator delete[](v13);
  }
  unsigned int v5 = *v2;
  BOOL v6 = (unsigned char *)*((void *)*v2 + 4);
  if (*((unsigned char **)*v2 + 3) == v6)
  {
    unsigned int v5 = llvm::raw_ostream::write(v5, "(", 1uLL);
  }
  else
  {
    *BOOL v6 = 40;
    ++*((void *)v5 + 4);
  }
  uint64_t v7 = (void *)v22[0];
  int v8 = llvm::APFloatBase::PPCDoubleDouble(v5);
  if (v8 == v7) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8), (const llvm::detail::DoubleAPFloat *)v22);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v22);
  }
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    uint64_t v9 = *v2;
    size_t v10 = (unsigned char *)*((void *)*v2 + 4);
    if (*((unsigned char **)*v2 + 3) != v10) {
      goto LABEL_15;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    uint64_t v9 = *v2;
    size_t v10 = (unsigned char *)*((void *)*v2 + 4);
    if (*((unsigned char **)*v2 + 3) != v10)
    {
LABEL_15:
      unsigned char *v10 = 44;
      ++*((void *)v9 + 4);
      goto LABEL_18;
    }
  }
  llvm::raw_ostream::write(v9, ",", 1uLL);
LABEL_18:
  if (v8 == (void *)v23[0]) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8), (const llvm::detail::DoubleAPFloat *)v23);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8), (const llvm::detail::IEEEFloat *)v23);
  }
  printFloatValue((const llvm::APFloat *)&v17, *v2);
  if (v8 == *((void **)&v17 + 1))
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v17 + 8));
    unint64_t v11 = *v2;
    uint64_t v12 = (unsigned char *)*((void *)*v2 + 4);
    if (*((unsigned char **)*v2 + 3) != v12)
    {
LABEL_23:
      *uint64_t v12 = 41;
      ++*((void *)v11 + 4);
      if (v8 != (void *)v23[0]) {
        goto LABEL_24;
      }
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v23);
      if (v8 != (void *)v22[0]) {
        goto LABEL_25;
      }
LABEL_30:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v17 + 8));
    unint64_t v11 = *v2;
    uint64_t v12 = (unsigned char *)*((void *)*v2 + 4);
    if (*((unsigned char **)*v2 + 3) != v12) {
      goto LABEL_23;
    }
  }
  llvm::raw_ostream::write(v11, ")", 1uLL);
  if (v8 == (void *)v23[0]) {
    goto LABEL_29;
  }
LABEL_24:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v23);
  if (v8 == (void *)v22[0]) {
    goto LABEL_30;
  }
LABEL_25:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
}

void mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement(llvm::APInt *a1@<X1>, llvm::APFloatBase *inited@<X0>, uint64_t a3@<X8>)
{
  long long v4 = inited;
  v17[3] = *MEMORY[0x1E4F143B8];
  BOOL v6 = (void *)*((void *)inited + 4);
  unsigned int v15 = *((_DWORD *)a1 + 2);
  if (v15 > 0x40) {
    inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)a1);
  }
  else {
    unsigned int v14 = *(void **)a1;
  }
  uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble(inited);
  if (v7 == v6)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)v6, (uint64_t)&v14);
    int v8 = (void *)*((void *)v4 + 4);
    uint64_t v9 = (void **)((char *)a1 + 16);
    unsigned int v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40)
    {
LABEL_6:
      std::string __p = *v9;
      if (v7 != v8) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v6, (const llvm::APInt **)&v14);
    int v8 = (void *)*((void *)v4 + 4);
    uint64_t v9 = (void **)((char *)a1 + 16);
    unsigned int v13 = *((_DWORD *)a1 + 6);
    if (v13 <= 0x40) {
      goto LABEL_6;
    }
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v9);
  if (v7 != v8)
  {
LABEL_7:
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v16, v8, (const llvm::APInt **)&__p);
    size_t v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v17[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)v7, (uint64_t)&__p);
  size_t v10 = (llvm::detail::IEEEFloat *)(a3 + 8);
  if (v7 != (void *)v17[0])
  {
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat(v10, (const llvm::detail::IEEEFloat *)v17);
    unint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
    if (v7 != (void *)v16[0]) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (const llvm::detail::DoubleAPFloat *)v17);
  unint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 40);
  if (v7 != (void *)v16[0])
  {
LABEL_9:
    llvm::detail::IEEEFloat::IEEEFloat(v11, (const llvm::detail::IEEEFloat *)v16);
    if (v7 != (void *)v16[0]) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, (const llvm::detail::DoubleAPFloat *)v16);
  if (v7 != (void *)v16[0])
  {
LABEL_10:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
    if (v13 < 0x41) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
  if (v13 < 0x41) {
    goto LABEL_20;
  }
LABEL_18:
  if (__p) {
    operator delete[](__p);
  }
LABEL_20:
  if (v7 == (void *)v17[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
    if (v15 < 0x41) {
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
    if (v15 < 0x41) {
      return;
    }
  }
  if (v14) {
    operator delete[](v14);
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_2>(long long **a1, unsigned int a2)
{
  uint64_t v3 = (llvm::raw_ostream **)a1[1];
  long long v4 = (*a1)[1];
  long long v5 = **a1;
  uint64_t v7 = *((void *)&v4 + 1);
  uint64_t v6 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v5, (llvm::APInt *)&__p);
  printDenseIntElement((llvm::APInt *)&__p, *v3, *(void *)a1[2]);
  if (v9 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

void llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseIntOrFPElementsAttr(mlir::DenseIntOrFPElementsAttr,BOOL)::$_3>(long long **a1, unsigned int a2)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::raw_ostream **)a1[1];
  uint64_t v3 = (void *)*((void *)*a1 + 4);
  long long v4 = (*a1)[1];
  long long v8 = **a1;
  uint64_t v10 = *((void *)&v4 + 1);
  unint64_t v11 = v3;
  uint64_t v9 = v4 + a2;
  mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v8, (llvm::APInt *)&__p);
  long long v5 = v11;
  uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v7 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, (uint64_t)v5, (uint64_t)&__p);
    if (v13 < 0x41) {
      goto LABEL_7;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v15, v5, (const llvm::APInt **)&__p);
    if (v13 < 0x41) {
      goto LABEL_7;
    }
  }
  if (__p) {
    operator delete[](__p);
  }
LABEL_7:
  printFloatValue((const llvm::APFloat *)v14, *v2);
  if (v7 == (void *)v15[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
  }
}

llvm::raw_ostream *llvm::function_ref<void ()(unsigned int)>::callback_fn<mlir::AsmPrinter::Impl::printDenseStringElementsAttr(mlir::DenseStringElementsAttr)::$_0>(llvm::raw_ostream ***a1, unsigned int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)*a1[1] + 16 * a2;
  long long v4 = *(llvm::raw_ostream **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = **a1;
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *uint64_t v7 = 34;
    ++*((void *)v6 + 4);
  }
  llvm::printEscapedString(v4, v5, *v2);
  double result = *v2;
  uint64_t v9 = (unsigned char *)*((void *)*v2 + 4);
  if (*((unsigned char **)*v2 + 3) == v9)
  {
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  }
  else
  {
    unsigned char *v9 = 34;
    ++*((void *)result + 4);
  }
  return result;
}

void mlir::AsmPrinter::Impl::printDenseArrayAttr(mlir::DenseArrayAttr)::$_0::operator()(uint64_t a1, int a2)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  long long v4 = *(llvm::raw_ostream ***)(a1 + 32);
  unsigned int v5 = **(_DWORD **)a1;
  unsigned int v10 = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    if (!**(_DWORD **)a1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = 0;
  if (v5) {
LABEL_5:
  }
    llvm::LoadIntFromMemory((llvm *)&__p, (llvm::APInt *)(**(void **)(a1 + 8) + (**(_DWORD **)(a1 + 16) * a2)), **(unsigned int **)(a1 + 16));
LABEL_6:
  if (mlir::Type::isIntOrIndex(*(mlir::Type **)(a1 + 24)))
  {
    printDenseIntElement((llvm::APInt *)&__p, *v4, **(void **)(a1 + 24));
    if (v10 < 0x41) {
      return;
    }
  }
  else
  {
    uint64_t v8 = **(void **)(a1 + 24);
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v8);
    uint64_t v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v7 == FloatSemantics) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)FloatSemantics, (uint64_t)&__p);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v12, FloatSemantics, (const llvm::APInt **)&__p);
    }
    printFloatValue((const llvm::APFloat *)v11, *v4);
    if (v7 == (llvm::APFloatBase *)v12[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
      if (v10 < 0x41) {
        return;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
      if (v10 < 0x41) {
        return;
      }
    }
  }
  if (__p) {
    operator delete[](__p);
  }
}

uint64_t mlir::AbstractAttribute::walkImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 104))(*(void *)(a1 + 112));
}

uint64_t mlir::AbstractAttribute::replaceImmediateSubElements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 128));
}

uint64_t mlir::Attribute::getContext(mlir::Attribute *this)
{
  return *(void *)(***(void ***)this + 32);
}

void *mlir::NamedAttribute::NamedAttribute(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

uint64_t mlir::NamedAttribute::getNameDialect(mlir::NamedAttribute *this)
{
  uint64_t v2 = *(void *)this;
  return mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v2);
}

uint64_t mlir::NamedAttribute::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v13 = *a1;
  uint64_t v14 = v2;
  if (v13 == v2) {
    return 0;
  }
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
  size_t v5 = v4;
  uint64_t v6 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v14);
  size_t v8 = v7;
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  if (v9)
  {
    int v10 = memcmp(AttrData, v6, v9);
    if (v10) {
      return ((v10 >> 31) | 1u) >> 31;
    }
  }
  if (v5 < v8) {
    unsigned int v12 = -1;
  }
  else {
    unsigned int v12 = 1;
  }
  if (v5 == v8) {
    unsigned int v12 = 0;
  }
  return v12 >> 31;
}

uint64_t mlir::AttrTypeWalker::walkImpl(void *a1, uint64_t *a2, unsigned int a3)
{
  return mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>((uint64_t)a1, a2, a1, a3);
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>(uint64_t a1, uint64_t *a2, void *a3, unsigned int a4)
{
  int v22 = a2;
  uint64_t v23 = a4;
  size_t v8 = (uint64_t *)(a1 + 48);
  unsigned int v24 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v22, (uint64_t *)&v24)&& v24 != (int *)(*(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v24[4];
  }
  unsigned int v24 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24) & 1) == 0)
  {
    uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
    *(void *)uint64_t v10 = v22;
    *(_DWORD *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v27 = 1, v28 = 1, unsigned int v24 = &v27, v25 = a1, v26 = &v28, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v27))
  {
LABEL_13:
    unsigned int v24 = 0;
    char v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v22, (uint64_t *)&v24);
    uint64_t v17 = (uint64_t)v24;
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v22, (uint64_t)&v22, (uint64_t)v24);
      *(void *)uint64_t v17 = v22;
      *(_DWORD *)(v17 + 8) = v23;
      *(_DWORD *)(v17 + 16) = 1;
    }
    uint64_t result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    uint64_t v13 = a3;
    uint64_t v11 = *a3;
    uint64_t v12 = v13[1];
    while (v12 != v11)
    {
      unsigned int v24 = (int *)a2;
      uint64_t v14 = *(void *)(v12 - 8);
      if (!v14)
      {
        uint64_t v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(v18, v19, v20, v21);
      }
      int v15 = (*(uint64_t (**)(uint64_t, int **))(*(void *)v14 + 48))(v14, &v24);
      if (v15 == 2) {
        return 1;
      }
      v12 -= 32;
      if (!v15) {
        goto LABEL_13;
      }
    }
    if (a4) {
      return 1;
    }
    int v27 = 1;
    int v28 = 0;
    unsigned int v24 = &v27;
    uint64_t v25 = a1;
    uint64_t v26 = &v28;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v27 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(uint64_t a1, uint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v19 = a2;
  uint64_t v20 = a4;
  size_t v8 = (uint64_t *)(a1 + 48);
  unsigned int v21 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)(a1 + 48), (uint64_t)&v19, (uint64_t *)&v21)&& v21 != (int *)(*(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64)))
  {
    return v21[4];
  }
  unsigned int v21 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21) & 1) == 0)
  {
    uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
    *(void *)uint64_t v10 = v19;
    *(_DWORD *)(v10 + 8) = v20;
    *(_DWORD *)(v10 + 16) = 1;
  }
  if (a4 == 1
    && (v24 = 1, v25 = 1, v21 = &v24, uint64_t v22 = a1, v23 = &v25, mlir::AbstractAttribute::walkImmediateSubElements(*a2), !v24))
  {
LABEL_13:
    unsigned int v21 = 0;
    char v16 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(v8, (uint64_t)&v19, (uint64_t *)&v21);
    uint64_t v17 = (uint64_t)v21;
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>((uint64_t)v8, (uint64_t)&v19, (uint64_t)&v19, (uint64_t)v21);
      *(void *)uint64_t v17 = v19;
      *(_DWORD *)(v17 + 8) = v20;
      *(_DWORD *)(v17 + 16) = 1;
    }
    uint64_t result = 0;
    *(_DWORD *)(v17 + 16) = 0;
  }
  else
  {
    uint64_t v13 = a3;
    uint64_t v11 = *a3;
    uint64_t v12 = v13[1];
    while (v12 != v11)
    {
      unsigned int v21 = (int *)a2;
      uint64_t v14 = *(void *)(v12 - 8);
      if (!v14)
      {
        uint64_t v18 = std::__throw_bad_function_call[abi:nn180100]();
        return mlir::AttrTypeReplacer::addReplacement(v18);
      }
      int v15 = (*(uint64_t (**)(uint64_t, int **))(*(void *)v14 + 48))(v14, &v21);
      if (v15 == 2) {
        return 1;
      }
      v12 -= 32;
      if (!v15) {
        goto LABEL_13;
      }
    }
    if (a4) {
      return 1;
    }
    int v24 = 1;
    int v25 = 0;
    unsigned int v21 = &v24;
    uint64_t v22 = a1;
    uint64_t v23 = &v25;
    mlir::AbstractAttribute::walkImmediateSubElements(*a2);
    return v24 != 0;
  }
  return result;
}

uint64_t mlir::AttrTypeReplacer::addReplacement(uint64_t *a1, void *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(a1, a2);
    a1[1] = result;
  }
  else
  {
    size_t v4 = (void *)a2[3];
    if (v4)
    {
      if (v4 == a2)
      {
        *(void *)(v3 + 24) = v3;
        (*(void (**)(void, unint64_t))(*(void *)a2[3] + 24))(a2[3], v3);
      }
      else
      {
        *(void *)(v3 + 24) = v4;
        a2[3] = 0;
      }
      uint64_t result = v3 + 32;
      a1[1] = v3 + 32;
    }
    else
    {
      *(void *)(v3 + 24) = 0;
      uint64_t result = v3 + 32;
      a1[1] = v3 + 32;
    }
  }
  return result;
}

void mlir::AttrTypeReplacer::replaceElementsIn(mlir::AttrTypeReplacer *this, mlir::Operation *a2, int a3, int a4, int a5)
{
  if (a3)
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(a2);
    uint64_t v10 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, AttrDictionary, this);
    if (v10)
    {
      if (v10 != (uint64_t *)AttrDictionary) {
        mlir::Operation::setAttrs((uint64_t)a2, (uint64_t)v10);
      }
    }
  }
  if ((a4 & 1) != 0 || a5)
  {
    if (a4)
    {
      uint64_t v11 = *((void *)a2 + 3);
      uint64_t v12 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v11, this);
      if (v12)
      {
        if ((uint64_t *)v11 != v12) {
          *((void *)a2 + 3) = v12;
        }
      }
    }
    if (a5)
    {
      uint64_t v13 = *((unsigned int *)a2 + 9);
      uint64_t v14 = v13 ? (char *)a2 - 16 : 0;
      if (v13)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v14, i);
          unint64_t v17 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v18 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v17, (void *)this + 3);
          if (v18) {
            BOOL v19 = v18 == (uint64_t *)v17;
          }
          else {
            BOOL v19 = 1;
          }
          if (!v19) {
            *(void *)(NextResultAtOffset + 8) = *(void *)(NextResultAtOffset + 8) & 7 | (unint64_t)v18;
          }
        }
      }
    }
    unint64_t v20 = *((unsigned int *)a2 + 11);
    if ((v20 & 0x7FFFFF) != 0)
    {
      unint64_t v21 = (((unint64_t)a2 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)a2 + 10);
      unint64_t v22 = v21 + 24 * (v20 & 0x7FFFFF);
      if (a5)
      {
        if (a4)
        {
          do
          {
            for (uint64_t j = *(void *)(v21 + 8); j != v21; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v24 = j - 8;
              if (!j) {
                uint64_t v24 = 0;
              }
              uint64_t v25 = *(void *)(v24 + 48);
              uint64_t v26 = *(void *)(v24 + 56) - v25;
              if (v26)
              {
                uint64_t v27 = 8 * (v26 >> 3);
                do
                {
                  uint64_t v28 = *(void *)(*(void *)v25 + 32);
                  unsigned int v29 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v28, this);
                  if (v29) {
                    BOOL v30 = v28 == (void)v29;
                  }
                  else {
                    BOOL v30 = 1;
                  }
                  if (!v30) {
                    *(void *)(*(void *)v25 + 32) = v29;
                  }
                  unint64_t v31 = *(void *)(*(void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
                  size_t v32 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v31, (void *)this + 3);
                  if (v32) {
                    BOOL v33 = v32 == (uint64_t *)v31;
                  }
                  else {
                    BOOL v33 = 1;
                  }
                  if (!v33) {
                    *(void *)(*(void *)v25 + 8) = *(void *)(*(void *)v25 + 8) & 7 | (unint64_t)v32;
                  }
                  v25 += 8;
                  v27 -= 8;
                }
                while (v27);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
        else
        {
          do
          {
            for (uint64_t k = *(void *)(v21 + 8); k != v21; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v35 = k - 8;
              if (!k) {
                uint64_t v35 = 0;
              }
              uint64_t v36 = *(void *)(v35 + 48);
              uint64_t v37 = *(void *)(v35 + 56) - v36;
              if (v37)
              {
                uint64_t v38 = 8 * (v37 >> 3);
                do
                {
                  unint64_t v39 = *(void *)(*(void *)v36 + 8) & 0xFFFFFFFFFFFFFFF8;
                  int v40 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>((uint64_t)this, v39, (void *)this + 3);
                  if (v40) {
                    BOOL v41 = v40 == (uint64_t *)v39;
                  }
                  else {
                    BOOL v41 = 1;
                  }
                  if (!v41) {
                    *(void *)(*(void *)v36 + 8) = *(void *)(*(void *)v36 + 8) & 7 | (unint64_t)v40;
                  }
                  v36 += 8;
                  v38 -= 8;
                }
                while (v38);
              }
            }
            v21 += 24;
          }
          while (v21 != v22);
        }
      }
      else if (a4)
      {
        do
        {
          for (uint64_t m = *(void *)(v21 + 8); m != v21; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v44 = m - 8;
            if (!m) {
              uint64_t v44 = 0;
            }
            uint64_t v45 = *(void *)(v44 + 48);
            uint64_t v46 = *(void *)(v44 + 56) - v45;
            if (v46)
            {
              uint64_t v47 = 8 * (v46 >> 3);
              do
              {
                uint64_t v48 = *(void *)(*(void *)v45 + 32);
                int v49 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>((uint64_t)this, v48, this);
                if (v49) {
                  BOOL v50 = v48 == (void)v49;
                }
                else {
                  BOOL v50 = 1;
                }
                if (!v50) {
                  *(void *)(*(void *)v45 + 32) = v49;
                }
                v45 += 8;
                v47 -= 8;
              }
              while (v47);
            }
          }
          v21 += 24;
        }
        while (v21 != v22);
      }
      else
      {
        for (uint64_t n = *(void *)(v21 + 8); n != v21; uint64_t n = *(void *)(n + 8))
          ;
      }
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(uint64_t a1, uint64_t a2, void *a3)
{
  size_t v4 = (uint64_t *)a2;
  v84[0] = a2;
  size_t v7 = (void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 64);
  if (!v8) {
    goto LABEL_84;
  }
  uint64_t v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v10 = (uint64_t **)(v6 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != v4)
  {
    BOOL v50 = 0;
    int v51 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v11 == (uint64_t *)-8192;
      }
      if (v52) {
        BOOL v50 = v10;
      }
      int v53 = v9 + v51++;
      uint64_t v9 = v53 & (v8 - 1);
      uint64_t v10 = (uint64_t **)(v6 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == v4) {
        return *(uint64_t **)(v6 + 16 * v9 + 8);
      }
    }
    if (v50) {
      size_t v54 = v50;
    }
    else {
      size_t v54 = v10;
    }
    int v55 = *(_DWORD *)(a1 + 56);
    if (4 * v55 + 4 < 3 * v8)
    {
      if (v8 + ~v55 - *(_DWORD *)(a1 + 60) > v8 >> 3) {
        goto LABEL_7;
      }
      goto LABEL_85;
    }
LABEL_84:
    v8 *= 2;
LABEL_85:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    uint64_t v56 = *(void *)(a1 + 48);
    int v57 = *(_DWORD *)(a1 + 64) - 1;
    unsigned int v58 = ((v4 >> 4) ^ (v4 >> 9)) & v57;
    size_t v54 = (uint64_t **)(v56 + 16 * v58);
    uint64_t v59 = *v54;
    if (*v54 == v4)
    {
      uint64_t v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096) {
        --*(_DWORD *)(a1 + 60);
      }
      _DWORD *v54 = v4;
      uint64_t v14 = v84[0];
      v54[1] = (uint64_t *)v84[0];
      char v16 = a3;
      a3 = (void *)*a3;
      int v15 = (void *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84[1] = (uint64_t)v4;
          uint64_t v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_105;
          }
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v17 + 48))(&v81);
          if (v83) {
            break;
          }
          v15 -= 4;
          if (v15 == a3) {
            goto LABEL_14;
          }
        }
        size_t v4 = v81;
        if (v82) {
          BOOL v28 = v81 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          if (v82 != 2) {
            goto LABEL_15;
          }
          unsigned int v19 = *(_DWORD *)(a1 + 64);
          if (!v19)
          {
LABEL_56:
            unint64_t v22 = 0;
            int v46 = *(_DWORD *)(a1 + 56);
            if (4 * v46 + 4 < 3 * v19) {
              goto LABEL_57;
            }
            goto LABEL_97;
          }
LABEL_17:
          unsigned int v20 = v19 - 1;
          unsigned int v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
          unint64_t v22 = (uint64_t *)(*v7 + 16 * v21);
          uint64_t v23 = *v22;
          if (v14 == *v22)
          {
LABEL_61:
            v22[1] = (uint64_t)v4;
            return v4;
          }
          uint64_t v24 = 0;
          int v25 = 1;
          while (v23 != -4096)
          {
            if (v24) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v23 == -8192;
            }
            if (v26) {
              uint64_t v24 = v22;
            }
            unsigned int v27 = v21 + v25++;
            unsigned int v21 = v27 & v20;
            unint64_t v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
            uint64_t v23 = *v22;
            if (v14 == *v22) {
              goto LABEL_61;
            }
          }
          if (v24) {
            unint64_t v22 = v24;
          }
          int v46 = *(_DWORD *)(a1 + 56);
          if (4 * v46 + 4 < 3 * v19)
          {
LABEL_57:
            if (v19 + ~v46 - *(_DWORD *)(a1 + 60) > v19 >> 3) {
              goto LABEL_58;
            }
            goto LABEL_98;
          }
LABEL_97:
          v19 *= 2;
LABEL_98:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
          uint64_t v65 = *(void *)(a1 + 48);
          int v66 = *(_DWORD *)(a1 + 64) - 1;
          unsigned int v67 = ((v14 >> 4) ^ (v14 >> 9)) & v66;
          unint64_t v22 = (uint64_t *)(v65 + 16 * v67);
          uint64_t v68 = *v22;
          if (v14 == *v22)
          {
LABEL_99:
            ++*(_DWORD *)(a1 + 56);
            if (v14 == -4096) {
              goto LABEL_60;
            }
            goto LABEL_59;
          }
          int v77 = 0;
          int v78 = 1;
          while (v68 != -4096)
          {
            if (v77) {
              BOOL v79 = 0;
            }
            else {
              BOOL v79 = v68 == -8192;
            }
            if (v79) {
              int v77 = v22;
            }
            unsigned int v80 = v67 + v78++;
            unsigned int v67 = v80 & v66;
            unint64_t v22 = (uint64_t *)(v65 + 16 * (v80 & v66));
            uint64_t v68 = *v22;
            if (v14 == *v22) {
              goto LABEL_99;
            }
          }
          if (v77) {
            unint64_t v22 = v77;
          }
LABEL_58:
          uint64_t v47 = *v22;
          ++*(_DWORD *)(a1 + 56);
          if (v47 == -4096)
          {
LABEL_60:
            *unint64_t v22 = v14;
            v22[1] = 0;
            goto LABEL_61;
          }
LABEL_59:
          --*(_DWORD *)(a1 + 60);
          goto LABEL_60;
        }
        goto LABEL_32;
      }
LABEL_14:
      if (!v4)
      {
LABEL_32:
        unsigned int v29 = *(_DWORD *)(a1 + 64);
        if (!v29) {
          goto LABEL_90;
        }
        uint64_t v30 = *(void *)(a1 + 48);
        unsigned int v31 = v29 - 1;
        unsigned int v32 = ((v14 >> 4) ^ (v14 >> 9)) & (v29 - 1);
        BOOL v33 = (uint64_t *)(v30 + 16 * v32);
        uint64_t v34 = *v33;
        if (v14 == *v33)
        {
LABEL_67:
          size_t v4 = 0;
          v33[1] = 0;
          return v4;
        }
        uint64_t v35 = 0;
        int v36 = 1;
        while (v34 != -4096)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == -8192;
          }
          if (v37) {
            uint64_t v35 = v33;
          }
          unsigned int v38 = v32 + v36++;
          unsigned int v32 = v38 & v31;
          BOOL v33 = (uint64_t *)(v30 + 16 * (v38 & v31));
          uint64_t v34 = *v33;
          if (v14 == *v33) {
            goto LABEL_67;
          }
        }
        if (v35) {
          BOOL v33 = v35;
        }
        int v60 = *(_DWORD *)(a1 + 56);
        if (4 * v60 + 4 < 3 * v29)
        {
          if (v29 + ~v60 - *(_DWORD *)(a1 + 60) > v29 >> 3) {
            goto LABEL_64;
          }
        }
        else
        {
LABEL_90:
          v29 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v29);
        uint64_t v61 = *(void *)(a1 + 48);
        int v62 = *(_DWORD *)(a1 + 64) - 1;
        unsigned int v63 = ((v14 >> 4) ^ (v14 >> 9)) & v62;
        BOOL v33 = (uint64_t *)(v61 + 16 * v63);
        uint64_t v64 = *v33;
        if (v14 == *v33)
        {
LABEL_92:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
        unint64_t v73 = 0;
        int v74 = 1;
        while (v64 != -4096)
        {
          if (v73) {
            BOOL v75 = 0;
          }
          else {
            BOOL v75 = v64 == -8192;
          }
          if (v75) {
            unint64_t v73 = v33;
          }
          unsigned int v76 = v63 + v74++;
          unsigned int v63 = v76 & v62;
          BOOL v33 = (uint64_t *)(v61 + 16 * (v76 & v62));
          uint64_t v64 = *v33;
          if (v14 == *v33) {
            goto LABEL_92;
          }
        }
        if (v73) {
          BOOL v33 = v73;
        }
LABEL_64:
        uint64_t v48 = *v33;
        ++*(_DWORD *)(a1 + 56);
        if (v48 == -4096)
        {
LABEL_66:
          *BOOL v33 = v14;
          v33[1] = 0;
          goto LABEL_67;
        }
LABEL_65:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_66;
      }
LABEL_15:
      uint64_t v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(a1, v4);
      unsigned int v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        size_t v4 = v18;
        if (!v19) {
          goto LABEL_56;
        }
        goto LABEL_17;
      }
      if (v19)
      {
        unsigned int v39 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v39);
        uint64_t v41 = *inserted;
        if (v14 == *inserted)
        {
LABEL_70:
          size_t v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        int v42 = 0;
        int v43 = 1;
        while (v41 != -4096)
        {
          if (v42) {
            BOOL v44 = 0;
          }
          else {
            BOOL v44 = v41 == -8192;
          }
          if (v44) {
            int v42 = inserted;
          }
          unsigned int v45 = v39 + v43++;
          unsigned int v39 = v45 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v39);
          uint64_t v41 = *inserted;
          if (v14 == *inserted) {
            goto LABEL_70;
          }
        }
        if (v42) {
          int v49 = v42;
        }
        else {
          int v49 = inserted;
        }
      }
      else
      {
        int v49 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v49, v84);
      goto LABEL_70;
    }
LABEL_105:
    __n128 v69 = 0;
    int v70 = 1;
    while (v59 != (uint64_t *)-4096)
    {
      if (v69) {
        BOOL v71 = 0;
      }
      else {
        BOOL v71 = v59 == (uint64_t *)-8192;
      }
      if (v71) {
        __n128 v69 = v54;
      }
      unsigned int v72 = v58 + v70++;
      unsigned int v58 = v72 & v57;
      size_t v54 = (uint64_t **)(v56 + 16 * (v72 & v57));
      uint64_t v59 = *v54;
      uint64_t v13 = v4;
      if (*v54 == v4) {
        goto LABEL_8;
      }
    }
    if (v69) {
      size_t v54 = v69;
    }
LABEL_7:
    uint64_t v13 = *v54;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t *mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(uint64_t a1, uint64_t a2, void *a3)
{
  size_t v4 = (uint64_t *)a2;
  v84[0] = a2;
  size_t v7 = (void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 64);
  if (!v8) {
    goto LABEL_84;
  }
  uint64_t v9 = (v8 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v10 = (uint64_t **)(v6 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != v4)
  {
    BOOL v50 = 0;
    int v51 = 1;
    while (v11 != (uint64_t *)-4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v11 == (uint64_t *)-8192;
      }
      if (v52) {
        BOOL v50 = v10;
      }
      int v53 = v9 + v51++;
      uint64_t v9 = v53 & (v8 - 1);
      uint64_t v10 = (uint64_t **)(v6 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == v4) {
        return *(uint64_t **)(v6 + 16 * v9 + 8);
      }
    }
    if (v50) {
      size_t v54 = v50;
    }
    else {
      size_t v54 = v10;
    }
    int v55 = *(_DWORD *)(a1 + 56);
    if (4 * v55 + 4 < 3 * v8)
    {
      if (v8 + ~v55 - *(_DWORD *)(a1 + 60) > v8 >> 3) {
        goto LABEL_7;
      }
      goto LABEL_85;
    }
LABEL_84:
    v8 *= 2;
LABEL_85:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1 + 48, v8);
    uint64_t v56 = *(void *)(a1 + 48);
    int v57 = *(_DWORD *)(a1 + 64) - 1;
    unsigned int v58 = ((v4 >> 4) ^ (v4 >> 9)) & v57;
    size_t v54 = (uint64_t **)(v56 + 16 * v58);
    uint64_t v59 = *v54;
    if (*v54 == v4)
    {
      uint64_t v13 = v4;
LABEL_8:
      ++*(_DWORD *)(a1 + 56);
      if (v13 != (uint64_t *)-4096) {
        --*(_DWORD *)(a1 + 60);
      }
      _DWORD *v54 = v4;
      uint64_t v14 = v84[0];
      v54[1] = (uint64_t *)v84[0];
      char v16 = a3;
      a3 = (void *)*a3;
      int v15 = (void *)v16[1];
      if (v15 != a3)
      {
        while (1)
        {
          v84[1] = (uint64_t)v4;
          uint64_t v17 = *(v15 - 1);
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_105;
          }
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v17 + 48))(&v81);
          if (v83) {
            break;
          }
          v15 -= 4;
          if (v15 == a3) {
            goto LABEL_14;
          }
        }
        size_t v4 = v81;
        if (v82) {
          BOOL v28 = v81 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          if (v82 != 2) {
            goto LABEL_15;
          }
          unsigned int v19 = *(_DWORD *)(a1 + 64);
          if (!v19)
          {
LABEL_56:
            unint64_t v22 = 0;
            int v46 = *(_DWORD *)(a1 + 56);
            if (4 * v46 + 4 < 3 * v19) {
              goto LABEL_57;
            }
            goto LABEL_97;
          }
LABEL_17:
          unsigned int v20 = v19 - 1;
          unsigned int v21 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
          unint64_t v22 = (uint64_t *)(*v7 + 16 * v21);
          uint64_t v23 = *v22;
          if (v14 == *v22)
          {
LABEL_61:
            v22[1] = (uint64_t)v4;
            return v4;
          }
          uint64_t v24 = 0;
          int v25 = 1;
          while (v23 != -4096)
          {
            if (v24) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v23 == -8192;
            }
            if (v26) {
              uint64_t v24 = v22;
            }
            unsigned int v27 = v21 + v25++;
            unsigned int v21 = v27 & v20;
            unint64_t v22 = (uint64_t *)(*v7 + 16 * (v27 & v20));
            uint64_t v23 = *v22;
            if (v14 == *v22) {
              goto LABEL_61;
            }
          }
          if (v24) {
            unint64_t v22 = v24;
          }
          int v46 = *(_DWORD *)(a1 + 56);
          if (4 * v46 + 4 < 3 * v19)
          {
LABEL_57:
            if (v19 + ~v46 - *(_DWORD *)(a1 + 60) > v19 >> 3) {
              goto LABEL_58;
            }
            goto LABEL_98;
          }
LABEL_97:
          v19 *= 2;
LABEL_98:
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v19);
          uint64_t v65 = *(void *)(a1 + 48);
          int v66 = *(_DWORD *)(a1 + 64) - 1;
          unsigned int v67 = ((v14 >> 4) ^ (v14 >> 9)) & v66;
          unint64_t v22 = (uint64_t *)(v65 + 16 * v67);
          uint64_t v68 = *v22;
          if (v14 == *v22)
          {
LABEL_99:
            ++*(_DWORD *)(a1 + 56);
            if (v14 == -4096) {
              goto LABEL_60;
            }
            goto LABEL_59;
          }
          int v77 = 0;
          int v78 = 1;
          while (v68 != -4096)
          {
            if (v77) {
              BOOL v79 = 0;
            }
            else {
              BOOL v79 = v68 == -8192;
            }
            if (v79) {
              int v77 = v22;
            }
            unsigned int v80 = v67 + v78++;
            unsigned int v67 = v80 & v66;
            unint64_t v22 = (uint64_t *)(v65 + 16 * (v80 & v66));
            uint64_t v68 = *v22;
            if (v14 == *v22) {
              goto LABEL_99;
            }
          }
          if (v77) {
            unint64_t v22 = v77;
          }
LABEL_58:
          uint64_t v47 = *v22;
          ++*(_DWORD *)(a1 + 56);
          if (v47 == -4096)
          {
LABEL_60:
            *unint64_t v22 = v14;
            v22[1] = 0;
            goto LABEL_61;
          }
LABEL_59:
          --*(_DWORD *)(a1 + 60);
          goto LABEL_60;
        }
        goto LABEL_32;
      }
LABEL_14:
      if (!v4)
      {
LABEL_32:
        unsigned int v29 = *(_DWORD *)(a1 + 64);
        if (!v29) {
          goto LABEL_90;
        }
        uint64_t v30 = *(void *)(a1 + 48);
        unsigned int v31 = v29 - 1;
        unsigned int v32 = ((v14 >> 4) ^ (v14 >> 9)) & (v29 - 1);
        BOOL v33 = (uint64_t *)(v30 + 16 * v32);
        uint64_t v34 = *v33;
        if (v14 == *v33)
        {
LABEL_67:
          size_t v4 = 0;
          v33[1] = 0;
          return v4;
        }
        uint64_t v35 = 0;
        int v36 = 1;
        while (v34 != -4096)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == -8192;
          }
          if (v37) {
            uint64_t v35 = v33;
          }
          unsigned int v38 = v32 + v36++;
          unsigned int v32 = v38 & v31;
          BOOL v33 = (uint64_t *)(v30 + 16 * (v38 & v31));
          uint64_t v34 = *v33;
          if (v14 == *v33) {
            goto LABEL_67;
          }
        }
        if (v35) {
          BOOL v33 = v35;
        }
        int v60 = *(_DWORD *)(a1 + 56);
        if (4 * v60 + 4 < 3 * v29)
        {
          if (v29 + ~v60 - *(_DWORD *)(a1 + 60) > v29 >> 3) {
            goto LABEL_64;
          }
        }
        else
        {
LABEL_90:
          v29 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v29);
        uint64_t v61 = *(void *)(a1 + 48);
        int v62 = *(_DWORD *)(a1 + 64) - 1;
        unsigned int v63 = ((v14 >> 4) ^ (v14 >> 9)) & v62;
        BOOL v33 = (uint64_t *)(v61 + 16 * v63);
        uint64_t v64 = *v33;
        if (v14 == *v33)
        {
LABEL_92:
          ++*(_DWORD *)(a1 + 56);
          if (v14 == -4096) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
        unint64_t v73 = 0;
        int v74 = 1;
        while (v64 != -4096)
        {
          if (v73) {
            BOOL v75 = 0;
          }
          else {
            BOOL v75 = v64 == -8192;
          }
          if (v75) {
            unint64_t v73 = v33;
          }
          unsigned int v76 = v63 + v74++;
          unsigned int v63 = v76 & v62;
          BOOL v33 = (uint64_t *)(v61 + 16 * (v76 & v62));
          uint64_t v64 = *v33;
          if (v14 == *v33) {
            goto LABEL_92;
          }
        }
        if (v73) {
          BOOL v33 = v73;
        }
LABEL_64:
        uint64_t v48 = *v33;
        ++*(_DWORD *)(a1 + 56);
        if (v48 == -4096)
        {
LABEL_66:
          *BOOL v33 = v14;
          v33[1] = 0;
          goto LABEL_67;
        }
LABEL_65:
        --*(_DWORD *)(a1 + 60);
        goto LABEL_66;
      }
LABEL_15:
      uint64_t v18 = mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(a1, v4);
      unsigned int v19 = *(_DWORD *)(a1 + 64);
      if (v18)
      {
        size_t v4 = v18;
        if (!v19) {
          goto LABEL_56;
        }
        goto LABEL_17;
      }
      if (v19)
      {
        unsigned int v39 = ((v14 >> 4) ^ (v14 >> 9)) & (v19 - 1);
        inserted = (uint64_t *)(*v7 + 16 * v39);
        uint64_t v41 = *inserted;
        if (v14 == *inserted)
        {
LABEL_70:
          size_t v4 = 0;
          inserted[1] = 0;
          return v4;
        }
        int v42 = 0;
        int v43 = 1;
        while (v41 != -4096)
        {
          if (v42) {
            BOOL v44 = 0;
          }
          else {
            BOOL v44 = v41 == -8192;
          }
          if (v44) {
            int v42 = inserted;
          }
          unsigned int v45 = v39 + v43++;
          unsigned int v39 = v45 & (v19 - 1);
          inserted = (uint64_t *)(*v7 + 16 * v39);
          uint64_t v41 = *inserted;
          if (v14 == *inserted) {
            goto LABEL_70;
          }
        }
        if (v42) {
          int v49 = v42;
        }
        else {
          int v49 = inserted;
        }
      }
      else
      {
        int v49 = 0;
      }
      inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v7, v49, v84);
      goto LABEL_70;
    }
LABEL_105:
    __n128 v69 = 0;
    int v70 = 1;
    while (v59 != (uint64_t *)-4096)
    {
      if (v69) {
        BOOL v71 = 0;
      }
      else {
        BOOL v71 = v59 == (uint64_t *)-8192;
      }
      if (v71) {
        __n128 v69 = v54;
      }
      unsigned int v72 = v58 + v70++;
      unsigned int v58 = v72 & v57;
      size_t v54 = (uint64_t **)(v56 + 16 * (v72 & v57));
      uint64_t v59 = *v54;
      uint64_t v13 = v4;
      if (*v54 == v4) {
        goto LABEL_8;
      }
    }
    if (v69) {
      size_t v54 = v69;
    }
LABEL_7:
    uint64_t v13 = *v54;
    goto LABEL_8;
  }
  return *(uint64_t **)(v6 + 16 * v9 + 8);
}

uint64_t mlir::AttrTypeImmediateSubElementWalker::walk(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))result)(*(void *)(result + 8));
  }
  return result;
}

{
  if (a2) {
    return (*(uint64_t (**)(void))(result + 16))(*(void *)(result + 24));
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = *(_DWORD *)(a2 + 8);
    unint64_t v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    uint64_t v12 = *a1 + 24 * v11;
    uint64_t v13 = *(void *)v12;
    int v14 = *(_DWORD *)(v12 + 8);
    if (*(void *)a2 == *(void *)v12 && v5 == v14)
    {
      uint64_t result = 1;
      *a3 = v12;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -4096 || v14 != 0x7FFFFFFF)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v14 == 0x80000000;
        }
        if (v19 && v13 == -8192) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        uint64_t v12 = v4 + 24 * (v21 & v10);
        uint64_t v13 = *(void *)v12;
        int v14 = *(_DWORD *)(v12 + 8);
        if (*(void *)a2 == *(void *)v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v12 = v16;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::InsertIntoBucketImpl<std::pair<void const*,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -4096 || *(_DWORD *)(a4 + 8) != 0x7FFFFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v18 = result;
      do
      {
        *uint64_t v18 = xmmword_181101DE0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181101DE0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            int v22 = *(_DWORD *)(v21 + 8);
            if ((*(void *)v21 != -4096 || v22 != 0x7FFFFFFF) && (*(void *)v21 != -8192 || v22 != 0x80000000))
            {
              uint64_t v30 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>,std::pair<void const*,int>,mlir::WalkResult,llvm::DenseMapInfo<std::pair<void const*,int>,void>,llvm::detail::DenseMapPair<std::pair<void const*,int>,mlir::WalkResult>>::LookupBucketFor<std::pair<void const*,int>>((uint64_t *)a1, v21, (uint64_t *)&v30);
              int v25 = v30;
              *uint64_t v30 = *(void *)v21;
              *((_DWORD *)v25 + 2) = *(_DWORD *)(v21 + 8);
              *((_DWORD *)v25 + 4) = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    BOOL v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *uint64_t v12 = xmmword_181101DE0;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      int v15 = result;
LABEL_32:
      unsigned int v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *int v15 = xmmword_181101DE0;
        int v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    unint64_t v26 = v14 / 0x18 + 1;
    int v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    BOOL v28 = result;
    do
    {
      *BOOL v28 = xmmword_181101DE0;
      *(_OWORD *)((char *)v28 + 24) = xmmword_181101DE0;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_32;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(_DWORD **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (**result)
    {
      uint64_t result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      *char *v2 = result;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Attribute>(mlir::Attribute,mlir::WalkOrder)::{lambda(mlir::Attribute)#1}>(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = (_DWORD **)result;
    if (**(_DWORD **)result)
    {
      uint64_t result = mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>(*(void *)(result + 8), a2, (void *)(*(void *)(result + 8) + 24), **(_DWORD **)(result + 16));
      *char *v2 = result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (**result)
    {
      uint64_t result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Attribute,std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>>();
      *char *v2 = result;
    }
  }
  return result;
}

_DWORD **llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::WalkResult mlir::AttrTypeWalker::walkSubElements<mlir::Type>(mlir::Type,mlir::WalkOrder)::{lambda(mlir::Type)#1}>(_DWORD **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (**result)
    {
      uint64_t result = (_DWORD **)mlir::AttrTypeWalker::walkImpl<mlir::Type,std::vector<std::function<mlir::WalkResult ()(mlir::Type)>>>();
      *char *v2 = result;
    }
  }
  return result;
}

uint64_t std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = (char *)a1[1];
  uint64_t v3 = (uint64_t)&v2[-*a1] >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    int v9 = 0;
    uint64_t v10 = 32 * v3;
    unint64_t v11 = (void *)a2[3];
    if (v11) {
      goto LABEL_10;
    }
LABEL_14:
    *(void *)(v10 + 24) = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    unint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (v8 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v9 = (char *)operator new(32 * v8);
  uint64_t v10 = (uint64_t)&v9[32 * v3];
  unint64_t v11 = (void *)a2[3];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_10:
  if (v11 == a2)
  {
    *(void *)(v10 + 24) = v10;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v10);
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    unint64_t v14 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  else
  {
    *(void *)(v10 + 24) = v11;
    a2[3] = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    unint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  do
  {
LABEL_20:
    uint64_t v15 = v10;
    v10 -= 32;
    unint64_t v16 = v2 - 32;
    uint64_t v17 = (char *)*((void *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(void *)(v15 - 8) = v10;
        (*(void (**)(void, uint64_t))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
      }
      else
      {
        *(void *)(v15 - 8) = v17;
        *((void *)v2 - 1) = 0;
      }
    }
    else
    {
      *(void *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  uint64_t v2 = (char *)*a1;
LABEL_25:
  uint64_t v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    BOOL v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      int v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(uint64_t a1, uint64_t *a2)
{
  v6[16] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = v6;
  uint64_t v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 16 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
}

void updateSubElementImpl<mlir::Attribute>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 1))
  {
    if (a1)
    {
      uint64_t v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Attribute,std::vector<std::function<std::optional<std::pair<mlir::Attribute,mlir::WalkResult>> ()(mlir::Attribute)>>>(a2, a1, a2);
      if (v7)
      {
        uint64_t v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          uint64_t v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          uint64_t v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != a1) {
          *(_WORD *)a4 = 257;
        }
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      uint64_t v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

void llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Attribute mlir::AttrTypeReplacer::replaceSubElements<mlir::Attribute>(mlir::Attribute)::{lambda(mlir::Type)#1}>(uint64_t *a1, uint64_t a2)
{
}

void updateSubElementImpl<mlir::Type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 1))
  {
    if (a1)
    {
      uint64_t v7 = mlir::AttrTypeReplacer::replaceImpl<mlir::Type,std::vector<std::function<std::optional<std::pair<mlir::Type,mlir::WalkResult>> ()(mlir::Type)>>>(a2, a1, (void *)(a2 + 24));
      if (v7)
      {
        uint64_t v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(_DWORD *)(a3 + 12))
        {
          uint64_t v10 = v7;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
          uint64_t v7 = v10;
          LODWORD(v8) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
        if (v7 != (uint64_t *)a1) {
          *(_WORD *)a4 = 257;
        }
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
    else
    {
      uint64_t v9 = *(unsigned int *)(a3 + 8);
      if (v9 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v9 + 1, 8);
        LODWORD(v9) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v9) = 0;
      ++*(_DWORD *)(a3 + 8);
    }
  }
}

uint64_t *mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(uint64_t a1, uint64_t *a2)
{
  v6[16] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = v6;
  uint64_t v5 = 0x1000000000;
  mlir::AbstractAttribute::walkImmediateSubElements(*a2);
  return a2;
}

void llvm::function_ref<void ()(mlir::Attribute)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Attribute)#1}>(uint64_t *a1, uint64_t a2)
{
}

uint64_t llvm::function_ref<void ()(mlir::Type)>::callback_fn<mlir::Type mlir::AttrTypeReplacer::replaceSubElements<mlir::Type>(mlir::Type)::{lambda(mlir::Type)#1}>(void *a1, uint64_t a2)
{
  return updateSubElementImpl<mlir::Type>(a2, *a1, a1[1], a1[2]);
}

void mlir::Block::~Block(void ***this)
{
  mlir::Block::clear((mlir::Block *)this);
  uint64_t v2 = this[6];
  uint64_t v3 = this[7];
  if (v2 == v3)
  {
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  do
  {
    if (*v2) {
      operator delete(*v2);
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = this[6];
  if (v2)
  {
LABEL_3:
    this[7] = v2;
    operator delete(v2);
  }
LABEL_4:
  unint64_t v4 = (mlir::GenericProgramPoint *)this[5];
  if (v4 != (mlir::GenericProgramPoint *)(this + 4))
  {
    do
    {
      uint64_t v5 = (mlir::Block *)*((void *)v4 + 1);
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      uint64_t v7 = (mlir::GenericProgramPoint *)v6;
      llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)(this + 4), v6);
      mlir::GenericProgramPoint::~GenericProgramPoint(v7);
      uint64_t v9 = *v8;
      uint64_t v10 = (uint64_t *)v8[1];
      uint64_t *v10 = *v8;
      *(void *)(v9 + 8) = v10;
      *uint64_t v8 = 0;
      v8[1] = 0;
      mlir::Operation::destroy(v7);
      unint64_t v4 = v5;
    }
    while (v5 != (mlir::Block *)(this + 4));
  }
}

mlir::GenericProgramPoint *mlir::Block::clear(mlir::Block *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 32);
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  if (v2 != (uint64_t *)((char *)this + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v2);
      mlir::Operation::dropAllReferences(v3);
      uint64_t v2 = (uint64_t *)v2[1];
    }
    while (v2 != v1);
  }
  while (1)
  {
    uint64_t result = (mlir::GenericProgramPoint *)*v1;
    if ((uint64_t *)*v1 == v1) {
      break;
    }
    mlir::GenericProgramPoint::~GenericProgramPoint(result);
    uint64_t v5 = (mlir::GenericProgramPoint *)v4;
    llvm::ilist_traits<mlir::Operation>::removeNodeFromList((uint64_t)v1, v4);
    mlir::GenericProgramPoint::~GenericProgramPoint(v5);
    uint64_t v7 = *v6;
    uint64_t v8 = (uint64_t *)v6[1];
    *uint64_t v8 = *v6;
    *(void *)(v7 + 8) = v8;
    *uint64_t v6 = 0;
    v6[1] = 0;
    mlir::Operation::destroy(v5);
  }
  return result;
}

unint64_t mlir::Block::getParent(mlir::Block *this)
{
  return *((void *)this + 3) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::Block::getParentOp(mlir::Block *this)
{
  if ((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    return *(void *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    return 0;
  }
}

BOOL mlir::Block::isEntryBlock(mlir::Block *this)
{
  uint64_t v1 = *(void *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v1) {
    uint64_t v2 = (mlir::Block *)(v1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 == this;
}

mlir::Block *mlir::Block::moveBefore(mlir::Block *this, mlir::Block *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = (uint64_t *)((char *)a2 + 8);
    uint64_t v3 = (mlir::Block *)*((void *)this + 2);
    if (v3 != (mlir::Block *)((char *)a2 + 8))
    {
      uint64_t v4 = (mlir::Block *)((char *)this + 8);
      this = (mlir::Block *)llvm::ilist_traits<mlir::Block>::transferNodesFromList(*((void *)a2 + 3) & 0xFFFFFFFFFFFFFFF8, *((void *)this + 3) & 0xFFFFFFFFFFFFFFF8, (uint64_t)this + 8, (uint64_t)v3);
      if (v3 != v4)
      {
        uint64_t v5 = *(void *)v3;
        uint64_t v6 = *(void *)v4;
        *(void *)(v6 + 8) = v3;
        *(void *)uint64_t v3 = v6;
        uint64_t v7 = *v2;
        *(void *)(v5 + 8) = v2;
        *(void *)uint64_t v4 = v7;
        *(void *)(v7 + 8) = v4;
        uint64_t *v2 = v5;
      }
    }
  }
  return this;
}

void mlir::Block::erase(mlir::Block *this)
{
  uint64_t v1 = (char *)this + 8;
  if (!this) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 - 8;
  BOOL v3 = this == 0;
  unint64_t v4 = *((void *)this + 3) & 0xFFFFFFFFFFFFFFF8;
  if (v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)v2;
  }
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(v4, v5);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void **)(v5 + 16);
  *uint64_t v7 = v6;
  *(void *)(v6 + 8) = v7;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  mlir::Block::~Block((void ***)v5);

  operator delete(v8);
}

Operation *mlir::Block::findAncestorOpInBlock(mlir::Block *this, Operation *a2)
{
  while (1)
  {
    uint64_t v2 = (mlir::Block *)*((void *)a2 + 2);
    if (v2 == this) {
      return a2;
    }
    if (!v2) {
      break;
    }
    unint64_t v3 = *((void *)v2 + 3) & 0xFFFFFFFFFFFFFFF8;
    if (!v3) {
      break;
    }
    a2 = *(Operation **)(v3 + 16);
    if (!a2) {
      return a2;
    }
  }
  return 0;
}

uint64_t mlir::Block::dropAllReferences(uint64_t this)
{
  uint64_t v1 = (mlir::GenericProgramPoint *)(this + 32);
  uint64_t v2 = *(mlir::GenericProgramPoint **)(this + 40);
  if (v2 != (mlir::GenericProgramPoint *)(this + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v2);
      this = mlir::Operation::dropAllReferences(v3);
      uint64_t v2 = (mlir::GenericProgramPoint *)*((void *)v2 + 1);
    }
    while (v2 != v1);
  }
  return this;
}

void *mlir::Block::dropAllDefinedValueUses(void *this)
{
  uint64_t v1 = (void **)this;
  uint64_t v2 = (void ***)this[6];
  for (uint64_t i = (void ***)this[7]; v2 != i; ++v2)
  {
    uint64_t v9 = *v2;
    while (1)
    {
      uint64_t v10 = *v9;
      if (!*v9) {
        break;
      }
      unsigned int v11 = (void *)v10[1];
      if (v11)
      {
        *unsigned int v11 = *v10;
        if (*v10) {
          *(void *)(*v10 + 8) = v10[1];
        }
      }
      void *v10 = 0;
      v10[1] = 0;
      v10[3] = 0;
    }
  }
  unint64_t v4 = (mlir::GenericProgramPoint *)(this + 4);
  uint64_t v5 = (mlir::GenericProgramPoint *)this[5];
  if (v5 != (mlir::GenericProgramPoint *)(this + 4))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v5);
      this = (void *)mlir::Operation::dropAllDefinedValueUses(v6);
      uint64_t v5 = (mlir::GenericProgramPoint *)*((void *)v5 + 1);
    }
    while (v5 != v4);
  }
  while (1)
  {
    uint64_t v7 = *v1;
    if (!*v1) {
      break;
    }
    uint64_t v8 = (void *)v7[1];
    if (v8)
    {
      *uint64_t v8 = *v7;
      if (*v7) {
        *(void *)(*v7 + 8) = v7[1];
      }
    }
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[3] = 0;
  }
  return this;
}

uint64_t mlir::Block::isOpOrderValid(mlir::Block *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

uint64_t mlir::Block::invalidateOpOrder(uint64_t this)
{
  *(void *)(this + 24) &= ~4uLL;
  return this;
}

void mlir::Block::recomputeOpOrder(mlir::Block *this)
{
  *((void *)this + 3) |= 4uLL;
  uint64_t v1 = (mlir::Block *)((char *)this + 32);
  uint64_t v2 = (mlir::GenericProgramPoint *)*((void *)this + 5);
  if (v2 != (mlir::Block *)((char *)this + 32))
  {
    int v3 = 5;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v2);
      *(_DWORD *)(v4 + 32) = v3;
      uint64_t v2 = (mlir::GenericProgramPoint *)*((void *)v2 + 1);
      v3 += 5;
    }
    while (v2 != v1);
  }
}

uint64_t mlir::Block::getArgumentTypes(mlir::Block *this)
{
  return *((void *)this + 6);
}

void *mlir::Block::addArgument(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)a1[6];
  uint64_t v7 = (char *)a1[7];
  uint64_t v8 = v7;
  uint64_t v9 = (v7 - v6) >> 3;
  uint64_t v10 = operator new(0x28uLL);
  unsigned int v11 = v10;
  void *v10 = 0;
  v10[1] = a2 | 7;
  void v10[2] = a1;
  v10[3] = v9;
  v10[4] = a3;
  unint64_t v12 = a1[8];
  if ((unint64_t)v7 < v12)
  {
    *(void *)uint64_t v7 = v10;
    uint64_t v13 = (uint64_t)(v7 + 8);
    goto LABEL_23;
  }
  unint64_t v14 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    abort();
  }
  uint64_t v15 = v12 - (void)v6;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v17 = operator new(8 * v16);
    uint64_t v18 = &v17[8 * v9];
    BOOL v19 = &v17[8 * v16];
    *uint64_t v18 = v11;
    uint64_t v13 = (uint64_t)(v18 + 1);
    uint64_t v20 = (char *)(v7 - v6);
    if (v7 == v6) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (void *)(8 * v9);
  BOOL v19 = 0;
  *(void *)(8 * v9) = v11;
  uint64_t v13 = 8 * v9 + 8;
  uint64_t v20 = (char *)(v7 - v6);
  if (v7 != v6)
  {
LABEL_14:
    unint64_t v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58) {
      goto LABEL_28;
    }
    if (v7 - v17 - ((v7 - v6) & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v7[-v23];
    uint64_t v18 = (void *)((char *)v18 - v23);
    uint64_t v24 = &v17[8 * v9 - 16];
    int v25 = (long long *)(v7 - 16);
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *uint64_t v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v28 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v18 = v28;
      }
      while (v8 != v6);
    }
    uint64_t v8 = (char *)a1[6];
  }
LABEL_21:
  a1[6] = v18;
  a1[7] = v13;
  a1[8] = v19;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  a1[7] = v13;
  return v11;
}

uint64_t mlir::Block::addArguments(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (unsigned char *)a1[6];
  unsigned int v11 = (unsigned char *)a1[7];
  uint64_t v12 = (v11 - v10) >> 3;
  unint64_t v13 = v12 + a3;
  if (v12 + a3 <= (unint64_t)((uint64_t)(a1[8] - (void)v10) >> 3)) {
    goto LABEL_13;
  }
  if (v13 >> 61) {
    abort();
  }
  uint64_t v14 = 8 * v13;
  uint64_t v15 = operator new(8 * v13);
  unint64_t v16 = &v15[8 * v12];
  uint64_t v17 = v16;
  if (v11 != v10)
  {
    unint64_t v18 = v11 - v10 - 8;
    if (v18 < 0x58)
    {
      uint64_t v17 = &v15[8 * v12];
      do
      {
LABEL_10:
        uint64_t v26 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v17 - 1) = v26;
        v17 -= 8;
      }
      while (v11 != v10);
      goto LABEL_11;
    }
    uint64_t v17 = &v15[8 * v12];
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v21 = &v11[-v20];
    uint64_t v17 = &v16[-v20];
    uint64_t v22 = &v15[8 * v12 - 16];
    uint64_t v23 = (long long *)(v11 - 16);
    uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    unsigned int v11 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  a1[6] = v17;
  a1[7] = v16;
  a1[8] = &v15[v14];
  if (v10) {
    operator delete(v10);
  }
LABEL_13:
  if (a3 && a5)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 8 * a5 - 8;
    uint64_t v29 = a3 - 1;
    do
    {
      unint64_t v30 = mlir::TypeRange::dereference_iterator(a2, v27);
      mlir::Block::addArgument(a1, v30, *(void *)(a4 + 8 * v27));
      if (v29 == v27) {
        break;
      }
      ++v27;
      uint64_t v31 = v28;
      v28 -= 8;
    }
    while (v31);
  }
  return a1[6] + 8 * v12;
}

void mlir::Block::eraseArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::Block::eraseArguments(a1, (uint64_t (*)(uint64_t, void *))llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>, (uint64_t)&v2);
}

void mlir::Block::eraseArguments(uint64_t a1, uint64_t (*a2)(uint64_t, void *), uint64_t a3)
{
  int v3 = *(void ***)(a1 + 48);
  uint64_t v4 = *(void ***)(a1 + 56);
  if (v3 != v4)
  {
    while ((a2(a3, *v3) & 1) == 0)
    {
      if (++v3 == v4)
      {
        int v3 = v4;
        break;
      }
    }
    if (v3 != *(void ***)(a1 + 56))
    {
      uint64_t v8 = v3 + 1;
      uint64_t v9 = *((void *)*v3 + 3);
      operator delete(*v3);
      uint64_t v10 = *(void ***)(a1 + 56);
      if (v3 + 1 == v10)
      {
        if (v3 == v10) {
          return;
        }
LABEL_15:
        *(void *)(a1 + 56) = v3;
        return;
      }
      do
      {
        if (a2(a3, *v8))
        {
          if (*v8) {
            operator delete(*v8);
          }
        }
        else
        {
          *((void *)*v8 + 3) = v9;
          *v3++ = *v8;
          LODWORD(v9) = v9 + 1;
        }
        ++v8;
      }
      while (v8 != v10);
      if (v3 != *(void ***)(a1 + 56)) {
        goto LABEL_15;
      }
    }
  }
}

void mlir::Block::getTerminator(mlir::GenericProgramPoint **this)
{
}

uint64_t mlir::Block::getSinglePredecessor(mlir::Block *this)
{
  uint64_t v1 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  if (*v1) {
    return 0;
  }
  return *(void *)(v1[2] + 16);
}

uint64_t mlir::Block::getUniquePredecessor(mlir::Block *this)
{
  uint64_t v1 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t result = *(void *)(v1[2] + 16);
  while (1)
  {
    uint64_t v1 = (void *)*v1;
    if (!v1) {
      break;
    }
    if (*(void *)(v1[2] + 16) != result) {
      return 0;
    }
  }
  return result;
}

char *mlir::Block::splitBlock(char *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  uint64_t v5 = (uint64_t *)(v4 + 32);
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((void *)v4 + 4) = v4 + 32;
  *((void *)v4 + 5) = v4 + 32;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  uint64_t v6 = a1 + 8;
  if (!a1) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)v6[1];
  llvm::ilist_traits<mlir::Block>::addNodeToList(*((void *)a1 + 3) & 0xFFFFFFFFFFFFFFF8, (uint64_t)v4);
  uint64_t v8 = *v7;
  *((void *)v4 + 2) = v7;
  *((void *)v4 + 1) = v8;
  *(void *)(v8 + 8) = v4 + 8;
  *uint64_t v7 = (uint64_t)(v4 + 8);
  uint64_t v9 = (uint64_t *)(a1 + 32);
  if (a1 + 32 != (char *)a2 && v4 != a1)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v5, (uint64_t)(a1 + 32), (uint64_t)a2, (uint64_t)(a1 + 32));
    uint64_t v10 = *v9;
    uint64_t v11 = *a2;
    *(void *)(v11 + 8) = v9;
    uint64_t *v9 = v11;
    uint64_t v12 = *v5;
    *(void *)(v10 + 8) = v5;
    *a2 = v12;
    *(void *)(v12 + 8) = a2;
    uint64_t *v5 = v10;
  }
  return v4;
}

uint64_t mlir::PredecessorIterator::unwrap(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 16);
}

unint64_t mlir::PredecessorIterator::getSuccessorIndex(mlir::BlockOperand **this)
{
  return mlir::BlockOperand::getOperandNumber(*this);
}

mlir::SuccessorRange *mlir::SuccessorRange::SuccessorRange(mlir::SuccessorRange *this, mlir::Block *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  int v3 = (mlir::GenericProgramPoint *)*((void *)a2 + 4);
  if (v3 != (mlir::Block *)((char *)a2 + 32))
  {
    unint64_t v4 = *((void *)a2 + 3) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5 == v4 || *(void *)(v5 + 8) != v4)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v3);
      uint64_t v7 = *(unsigned int *)(v6 + 40);
      *((void *)this + 1) = v7;
      if (v7) {
        *(void *)this = (v6
      }
                         + 16 * (((unint64_t)*(unsigned int *)(v6 + 44) >> 23) & 1)
                         + (((unint64_t)*(unsigned int *)(v6 + 44) >> 21) & 0x7F8)
                         + 71) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return this;
}

unint64_t *mlir::SuccessorRange::SuccessorRange(unint64_t *this, Operation *a2)
{
  *this = 0;
  this[1] = 0;
  unint64_t v2 = *((unsigned int *)a2 + 10);
  this[1] = v2;
  if (v2) {
    *this = ((unint64_t)a2
  }
           + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
           + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
           + 71) & 0xFFFFFFFFFFFFFFF8;
  return this;
}

uint64_t *mlir::BlockRange::BlockRange(uint64_t *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = 0;
  result[1] = a3;
  if (a3) {
    *uint64_t result = a2 | 4;
  }
  return result;
}

unint64_t *mlir::BlockRange::BlockRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  result[1] = a3;
  return result;
}

uint64_t mlir::BlockRange::dereference_iterator(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) == 0) {
    unint64_t v2 = 0;
  }
  unint64_t v3 = v2 + 8 * a2;
  if (!(((unint64_t)(a1 & 4) >> 2) | ((a1 & 0xFFFFFFFFFFFFFFF8) == 0))) {
    unint64_t v3 = (a1 & 0xFFFFFFFFFFFFFFF8) + 32 * a2 + 24;
  }
  return *(void *)v3;
}

uint64_t llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<mlir::Block::eraseArguments(llvm::BitVector const&)::$_0>(void **a1, uint64_t a2)
{
  return (*(void *)(**a1 + 8 * (*(void *)(a2 + 24) >> 6)) >> *(void *)(a2 + 24)) & 1;
}

uint64_t mlir::Builder::getUnknownLoc(mlir::UnknownLoc **this, mlir::MLIRContext *a2)
{
  return mlir::UnknownLoc::get(*this, a2);
}

void mlir::Builder::getFusedLoc(mlir::UnknownLoc **a1, uint64_t **a2, mlir::MLIRContext *a3, uint64_t a4)
{
}

uint64_t mlir::Builder::getFloat8E5M2Type(mlir::Float8E5M2Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2Type::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNType(mlir::Float8E4M3FNType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3FNType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E5M2FNUZType(mlir::Float8E5M2FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E5M2FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3FNUZType(mlir::Float8E4M3FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getFloat8E4M3B11FNUZType(mlir::Float8E4M3B11FNUZType **this, mlir::MLIRContext *a2)
{
  return mlir::Float8E4M3B11FNUZType::get(*this, a2);
}

uint64_t mlir::Builder::getBF16Type(mlir::BFloat16Type **this, mlir::MLIRContext *a2)
{
  return mlir::BFloat16Type::get(*this, a2);
}

uint64_t mlir::Builder::getF16Type(mlir::Float16Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float16Type::get(*this, a2);
}

uint64_t mlir::Builder::getTF32Type(mlir::FloatTF32Type **this, mlir::MLIRContext *a2)
{
  return mlir::FloatTF32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF32Type(mlir::Float32Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float32Type::get(*this, a2);
}

uint64_t mlir::Builder::getF64Type(mlir::Float64Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float64Type::get(*this, a2);
}

uint64_t mlir::Builder::getF80Type(mlir::Float80Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float80Type::get(*this, a2);
}

uint64_t mlir::Builder::getF128Type(mlir::Float128Type **this, mlir::MLIRContext *a2)
{
  return mlir::Float128Type::get(*this, a2);
}

uint64_t mlir::Builder::getIndexType(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  return mlir::IndexType::get(*this, a2);
}

uint64_t mlir::Builder::getI1Type(mlir::Builder *this)
{
  return mlir::IntegerType::get(*(void *)this, 1u, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2)
{
  return mlir::IntegerType::get(*(void *)this, a2, 0);
}

uint64_t mlir::Builder::getIntegerType(mlir::Builder *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)this;
  if (a3) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  return mlir::IntegerType::get(v3, a2, v4);
}

uint64_t mlir::Builder::getFunctionType(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::FunctionType::get(*a1, a2, a3, a4, a5);
}

uint64_t mlir::Builder::getNoneType(mlir::NoneType **this, mlir::MLIRContext *a2)
{
  return mlir::NoneType::get(*this, a2);
}

uint64_t mlir::Builder::getNamedAttr(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = mlir::StringAttr::get(*a1, (mlir::MLIRContext *)v7);
  mlir::NamedAttribute::NamedAttribute(&v9, v5, a4);
  return v9;
}

uint64_t mlir::Builder::getStringAttr(mlir::StringAttr **a1, mlir::MLIRContext *a2)
{
  return mlir::StringAttr::get(*a1, a2);
}

uint64_t mlir::Builder::getUnitAttr(mlir::UnitAttr **this, mlir::MLIRContext *a2)
{
  return mlir::UnitAttr::get(*this, a2);
}

uint64_t mlir::Builder::getBoolAttr(mlir::BoolAttr **this, mlir::MLIRContext *a2)
{
  return mlir::BoolAttr::get(*this, a2);
}

uint64_t mlir::Builder::getDictionaryAttr(mlir::DictionaryAttr **a1, uint64_t *a2, uint64_t a3)
{
  return mlir::DictionaryAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getIndexAttr(mlir::IndexType **this, mlir::MLIRContext *a2)
{
  uint64_t v3 = mlir::IndexType::get(*this, a2);
  unsigned int v7 = 64;
  std::string __p = a2;
  uint64_t v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v4;
}

uint64_t mlir::Builder::getI64IntegerAttr(mlir::Builder *this, void *a2)
{
  uint64_t v3 = mlir::IntegerType::get(*(void *)this, 0x40u, 0);
  unsigned int v7 = 64;
  std::string __p = a2;
  uint64_t v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v4;
}

uint64_t mlir::Builder::getI32VectorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  uint64_t v6 = (void *)mlir::VectorType::get((uint64_t)&v10, 1uLL, v5, 0, 0);
  unsigned int v7 = v6;
  if (v6) {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getDenseBoolArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<BOOL>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI32ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<int>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getDenseI64ArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::detail::DenseArrayAttrImpl<long long>::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI32TensorAttr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v5 = mlir::IntegerType::get(*a1, 0x20u, 0);
  uint64_t v6 = (void *)mlir::RankedTensorType::get((uint64_t)&v10, 1, v5, 0);
  unsigned int v7 = v6;
  if (v6) {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, a2, 4 * a3, 4, 1, 1);
}

uint64_t mlir::Builder::getI32IntegerAttr(mlir::Builder *this, unsigned int a2)
{
  uint64_t v3 = mlir::IntegerType::get(*(void *)this, 0x20u, 0);
  unsigned int v7 = 32;
  std::string __p = (void *)a2;
  uint64_t v4 = mlir::IntegerAttr::get(v3, (llvm::APInt *)&__p);
  if (v7 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v4;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  BOOL isIndex = mlir::Type::isIndex((mlir::Type *)&v13);
  uint64_t v5 = v13;
  if (isIndex)
  {
    unsigned int v12 = 64;
    std::string __p = (void *)a3;
  }
  else
  {
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v13);
    BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v13);
    unsigned int v12 = IntOrFloatBitWidth;
    if (IntOrFloatBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, a3, isSignedInteger);
    }
    else
    {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IntOrFloatBitWidth;
      if (!IntOrFloatBitWidth) {
        unint64_t v8 = 0;
      }
      std::string __p = (void *)(v8 & a3);
    }
  }
  uint64_t v9 = mlir::IntegerAttr::get(v5, (llvm::APInt *)&__p);
  if (v12 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v9;
}

uint64_t mlir::Builder::getIntegerAttr(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  return mlir::IntegerAttr::get(a2, a3);
}

llvm::APFloatBase *mlir::Builder::getF32FloatAttr(mlir::Float32Type **this, float a2, mlir::MLIRContext *a3)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mlir::Float32Type::get(*this, a3);
  uint64_t v5 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v10, a2);
  uint64_t v6 = llvm::APFloatBase::IEEEsingle(v5);
  llvm::APFloat::Storage::Storage(v12, v10, v6);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  unsigned int v7 = (llvm::APFloatBase *)mlir::FloatAttr::get(v4, (uint64_t)v11);
  unint64_t v8 = (void *)v12[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v7) == v8) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  }
  return v7;
}

llvm::APFloatBase *mlir::Builder::getF16FloatAttr(mlir::Float16Type **this, float a2, mlir::MLIRContext *a3)
{
  uint64_t v4 = mlir::Float16Type::get(*this, a3);

  return mlir::FloatAttr::get(v4, a2);
}

llvm::APFloatBase *mlir::Builder::getFloatAttr(double a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a3, a1);
}

uint64_t mlir::Builder::getFloatAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::FloatAttr::get(a2, a3);
}

uint64_t mlir::Builder::getArrayAttr(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3)
{
  return mlir::ArrayAttr::get(*a1, a2, a3);
}

uint64_t mlir::Builder::getI64ArrayAttr(uint64_t *a1, void **a2, unint64_t a3)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x800000000;
  uint64_t v6 = 8 * a3;
  if (8 * a3 < 0x41)
  {
    int v7 = 0;
    unint64_t v8 = v19;
    if (!a3) {
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, a3, 8);
    int v7 = v18;
    unint64_t v8 = v17;
    if (!a3) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = &v8[v7];
  do
  {
    uint64_t v10 = *a2;
    uint64_t v11 = mlir::IntegerType::get(*a1, 0x40u, 0);
    unsigned int v16 = 64;
    std::string __p = v10;
    uint64_t v12 = mlir::IntegerAttr::get(v11, (llvm::APInt *)&__p);
    if (v16 >= 0x41 && __p) {
      operator delete[](__p);
    }
    *v9++ = v12;
    ++a2;
    v6 -= 8;
  }
  while (v6);
  int v7 = v18;
  unint64_t v8 = v17;
LABEL_11:
  LODWORD(v18) = v7 + a3;
  uint64_t v13 = mlir::ArrayAttr::get((mlir::MLIRContext *)*a1, (uint64_t)v8, (v7 + a3));
  if (v17 != v19) {
    free(v17);
  }
  return v13;
}

uint64_t mlir::Builder::getStrArrayAttr(mlir::MLIRContext **a1, uint64_t *a2, unint64_t a3)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 2 * a3;
  uint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  if (16 * a3 < 0x81)
  {
    int v7 = 0;
    unint64_t v8 = v20;
    if (!a3) {
      goto LABEL_8;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, a3, 8);
    int v7 = v19;
    unint64_t v8 = v18;
    if (!a3) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = &a2[v6];
  uint64_t v10 = &v8[v7];
  do
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    a2 += 2;
    uint64_t v13 = *a1;
    __int16 v17 = 261;
    v16[0] = v11;
    v16[1] = v12;
    *v10++ = mlir::StringAttr::get(v13, (mlir::MLIRContext *)v16);
  }
  while (a2 != v9);
  int v7 = v19;
  unint64_t v8 = v18;
LABEL_8:
  LODWORD(v19) = v7 + a3;
  uint64_t v14 = mlir::ArrayAttr::get(*a1, (uint64_t)v8, (v7 + a3));
  if (v18 != v20) {
    free(v18);
  }
  return v14;
}

void *mlir::Builder::getZeroAttr(mlir::IndexType **a1, mlir::MLIRContext *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(*(void *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    unsigned int v16 = mlir::FloatAttr::get((uint64_t)a2, 0.0);
    if (!v16) {
      return v16;
    }
LABEL_37:
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    return v16;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    uint64_t v19 = mlir::IndexType::get(*a1, a2);
    LODWORD(v26) = 64;
    std::string __p = 0;
    unsigned int v16 = (void *)mlir::IntegerAttr::get(v19, (llvm::APInt *)&__p);
    if (v26 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (!v16) {
      return v16;
    }
    goto LABEL_37;
  }
  if (!a2 || v4 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v4 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
    {
      return 0;
    }
    std::string __p = a2;
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v3 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__p);
    v24[0] = mlir::Builder::getZeroAttr(a1, OperandRange);
    v24[1] = v21;
    if (!v24[0]) {
      return 0;
    }
    uint64_t v22 = (void *)mlir::DenseElementsAttr::get((uint64_t)__p, v26, v24, 1uLL);
    unsigned int v16 = v22;
    if (v22) {
      mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v22 + 8);
    }
    if (v16) {
      return v16;
    }
    return v16;
  }
  v24[0] = (uint64_t)a2;
  LODWORD(v26) = mlir::IntegerType::getWidth((mlir::IntegerType *)v24);
  if (v26 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  }
  else {
    std::string __p = 0;
  }
  uint64_t v23 = (void *)mlir::IntegerAttr::get((uint64_t)a2, (llvm::APInt *)&__p);
  unsigned int v16 = v23;
  if (v23) {
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v23 + 8);
  }
  if (v26 < 0x41 || !__p) {
    return v16;
  }
  operator delete[](__p);
  return v16;
}

uint64_t mlir::Builder::getAffineSymbolExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineSymbolExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getAffineConstantExpr(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  return mlir::getAffineConstantExpr(a2, *this, a3);
}

uint64_t mlir::Builder::getEmptyAffineMap(mlir::AffineMap **this, mlir::MLIRContext *a2)
{
  return mlir::AffineMap::get(*this, a2);
}

uint64_t mlir::Builder::getConstantAffineMap(mlir::MLIRContext **this, mlir *a2, mlir::MLIRContext *a3)
{
  uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(a2, *this, a3);

  return mlir::AffineMap::get(0, 0, AffineConstantExpr);
}

uint64_t mlir::Builder::getSymbolIdentityMap(mlir::MLIRContext **this, uint64_t a2, mlir::MLIRContext *a3)
{
  uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr(0, *this, a3);

  return mlir::AffineMap::get(0, 1, AffineSymbolExpr);
}

mlir::Operation *mlir::OpBuilder::insert(mlir::OpBuilder *this, mlir::Operation *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)a2);
    mlir::GenericProgramPoint::~GenericProgramPoint(a2);
    uint64_t v6 = *v5;
    *int v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(void *)(v6 + 8) = v7;
    uint64_t *v5 = (uint64_t)v7;
    mlir::GenericProgramPoint::~GenericProgramPoint(a2);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    (*(void (**)(uint64_t, mlir::Operation *))(*(void *)v8 + 16))(v8, a2);
  }
  return a2;
}

_OWORD *mlir::OpBuilder::createBlock(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = (uint64_t *)a2;
  }
  uint64_t v14 = operator new(0x48uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  *((void *)v14 + 4) = v14 + 2;
  *((void *)v14 + 5) = v14 + 2;
  *((void *)v14 + 7) = 0;
  *((void *)v14 + 8) = 0;
  *((void *)v14 + 6) = 0;
  mlir::Block::addArguments(v14, a4, a5, a6, a7);
  llvm::ilist_traits<mlir::Block>::addNodeToList(a2, (uint64_t)v14);
  uint64_t v15 = *v13;
  *((void *)v14 + 1) = *v13;
  *((void *)v14 + 2) = v13;
  *(void *)(v15 + 8) = (char *)v14 + 8;
  *uint64_t v13 = (uint64_t)v14 + 8;
  a1[2] = v14;
  a1[3] = v14 + 2;
  uint64_t v16 = a1[1];
  if (v16) {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 24))(v16, v14);
  }
  return v14;
}

_OWORD *mlir::OpBuilder::createBlock(void *a1, mlir::Block *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t Parent = mlir::Block::getParent(this);
  uint64_t v13 = Parent;
  if (this) {
    uint64_t v14 = (uint64_t *)((char *)this + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)Parent;
  }
  uint64_t v15 = operator new(0x48uLL);
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  *((void *)v15 + 4) = v15 + 2;
  *((void *)v15 + 5) = v15 + 2;
  *((void *)v15 + 7) = 0;
  *((void *)v15 + 8) = 0;
  *((void *)v15 + 6) = 0;
  mlir::Block::addArguments(v15, a3, a4, a5, a6);
  llvm::ilist_traits<mlir::Block>::addNodeToList(v13, (uint64_t)v15);
  uint64_t v16 = *v14;
  *((void *)v15 + 1) = *v14;
  *((void *)v15 + 2) = v14;
  *(void *)(v16 + 8) = (char *)v15 + 8;
  *uint64_t v14 = (uint64_t)v15 + 8;
  a1[2] = v15;
  a1[3] = v15 + 2;
  uint64_t v17 = a1[1];
  if (v17) {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 24))(v17, v15);
  }
  return v15;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create(mlir::OpBuilder *this, const mlir::OperationState *a2)
{
  uint64_t v3 = (mlir::GenericProgramPoint *)mlir::Operation::create(a2, a2);
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 3);
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v4 + 32, (uint64_t)v3);
    mlir::GenericProgramPoint::~GenericProgramPoint(v3);
    uint64_t v6 = *v5;
    *int v7 = *v5;
    v7[1] = (uint64_t)v5;
    *(void *)(v6 + 8) = v7;
    uint64_t *v5 = (uint64_t)v7;
    mlir::GenericProgramPoint::~GenericProgramPoint(v3);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(void *)v8 + 16))(v8, v3);
  }
  return v3;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a3;
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v30);
  mlir::OperationState::OperationState(v31, a2, AttrData, v21, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14);
  uint64_t v23 = (mlir::GenericProgramPoint *)mlir::Operation::create((mlir::Operation *)v31, v22);
  uint64_t v24 = a1[2];
  if (v24)
  {
    long long v25 = (uint64_t *)a1[3];
    llvm::ilist_traits<mlir::Operation>::addNodeToList(v24 + 32, (uint64_t)v23);
    mlir::GenericProgramPoint::~GenericProgramPoint(v23);
    uint64_t v26 = *v25;
    *uint64_t v27 = *v25;
    v27[1] = (uint64_t)v25;
    *(void *)(v26 + 8) = v27;
    *long long v25 = (uint64_t)v27;
    mlir::GenericProgramPoint::~GenericProgramPoint(v23);
  }
  uint64_t v28 = a1[1];
  if (v28) {
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(void *)v28 + 16))(v28, v23);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v23;
}

uint64_t mlir::OpBuilder::tryFold(void *a1, uint64_t a2, uint64_t a3)
{
  v72[4] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned int *)(a2 + 36);
  if (v6) {
    uint64_t v7 = a2 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v65 = v7;
  unint64_t v66 = v6;
  if (v6 > *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
  }
  uint64_t v8 = a2 + 48;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(a2 + 48)))
  {
    *(_DWORD *)(a3 + 8) = 0;
    if (v6 <= *(_DWORD *)(a3 + 12))
    {
      if (!v6)
      {
        int v15 = 0;
LABEL_19:
        uint64_t v16 = 0;
        *(_DWORD *)(a3 + 8) = v15 + v6;
        return v16;
      }
      uint64_t v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v6, 8);
      uint64_t v9 = *(unsigned int *)(a3 + 8);
    }
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)a3 + 8 * v9;
    do
    {
      *(void *)(v14 + 8 * v13) = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v13);
      ++v13;
    }
    while (v6 != v13);
    int v15 = *(_DWORD *)(a3 + 8);
    goto LABEL_19;
  }
  int v70 = v72;
  uint64_t v71 = 0x400000000;
  if (!mlir::Operation::fold(a2, (uint64_t)&v70) || !v71)
  {
    uint64_t v18 = v65;
    unint64_t v17 = v66;
    *(_DWORD *)(a3 + 8) = 0;
    if (v17 <= *(unsigned int *)(a3 + 12))
    {
      if (!v17)
      {
        int v22 = 0;
LABEL_27:
        uint64_t v16 = 0;
        *(_DWORD *)(a3 + 8) = v22 + v17;
        goto LABEL_54;
      }
      uint64_t v19 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v17, 8);
      uint64_t v19 = *(unsigned int *)(a3 + 8);
    }
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)a3 + 8 * v19;
    do
    {
      *(void *)(v21 + 8 * v20) = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v20);
      ++v20;
    }
    while (v17 != v20);
    int v22 = *(_DWORD *)(a3 + 8);
    goto LABEL_27;
  }
  v64[0] = *a1;
  memset(&v64[1], 0, 24);
  unsigned int v67 = &v69;
  uint64_t v68 = 0x100000000;
  uint64_t v10 = *(void *)v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v63[0] = *(void *)(v10 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v63);
    mlir::OperandRange::getTypes(&v65, v63);
    uint64_t v12 = v71;
    if (!v71) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t Values = *(void *)(v10 + 24);
    mlir::OperandRange::getTypes(&v65, v63);
    uint64_t v12 = v71;
    if (!v71)
    {
LABEL_45:
      if (v68)
      {
        uint64_t v34 = (uint64_t *)v67;
        uint64_t v35 = 8 * v68;
        do
        {
          int v36 = (mlir::GenericProgramPoint *)*v34;
          uint64_t v37 = a1[2];
          if (v37)
          {
            unsigned int v38 = (uint64_t *)a1[3];
            llvm::ilist_traits<mlir::Operation>::addNodeToList(v37 + 32, *v34);
            mlir::GenericProgramPoint::~GenericProgramPoint(v36);
            uint64_t v39 = *v38;
            *int v40 = *v38;
            v40[1] = (uint64_t)v38;
            *(void *)(v39 + 8) = v40;
            *unsigned int v38 = (uint64_t)v40;
            mlir::GenericProgramPoint::~GenericProgramPoint(v36);
          }
          uint64_t v41 = a1[1];
          if (v41) {
            (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(void *)v41 + 16))(v41, v36);
          }
          ++v34;
          v35 -= 8;
        }
        while (v35);
        uint64_t v16 = 1;
        int v42 = v67;
        if (v67 == &v69) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v16 = 1;
        int v42 = v67;
        if (v67 == &v69) {
          goto LABEL_54;
        }
      }
LABEL_53:
      free(v42);
      goto LABEL_54;
    }
  }
  uint64_t v23 = v63[0];
  uint64_t v24 = v63[1];
  uint64_t v25 = v63[2];
  uint64_t v62 = v63[3];
  uint64_t v61 = (void *)(a3 + 16);
  uint64_t v26 = 8 * v12;
  uint64_t v27 = v70;
  while (1)
  {
    if (v23 == v25 && v62 == v24) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, v24) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
    if ((*v27 & 4) != 0)
    {
      if (v29) {
        break;
      }
    }
    if (!Values)
    {
      uint64_t v47 = v65;
      unint64_t v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 <= *(unsigned int *)(a3 + 12))
      {
        if (!v44) {
          goto LABEL_86;
        }
        uint64_t v48 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        uint64_t v48 = *(unsigned int *)(a3 + 8);
      }
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)a3 + 8 * v48;
      do
      {
        *(void *)(v57 + 8 * v56) = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v56);
        ++v56;
      }
      while (v44 != v56);
      goto LABEL_83;
    }
    uint64_t v31 = (*(uint64_t (**)(uint64_t, void *, unint64_t, unint64_t, void))(*(void *)Values + 24))(Values, v64, *v27 & 0xFFFFFFFFFFFFFFF8, v28, *(void *)(a2 + 24));
    if (!v31)
    {
      if (v68)
      {
        int v49 = (mlir::Operation **)v67;
        uint64_t v50 = 8 * v68;
        do
        {
          int v51 = *v49++;
          mlir::Operation::erase(v51);
          v50 -= 8;
        }
        while (v50);
      }
      uint64_t v52 = v65;
      unint64_t v44 = v66;
      *(_DWORD *)(a3 + 8) = 0;
      if (v44 > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
        uint64_t v53 = *(unsigned int *)(a3 + 8);
LABEL_81:
        uint64_t v58 = 0;
        uint64_t v59 = *(void *)a3 + 8 * v53;
        do
        {
          *(void *)(v59 + 8 * v58) = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v58);
          ++v58;
        }
        while (v44 != v58);
LABEL_83:
        int v60 = *(_DWORD *)(a3 + 8);
LABEL_84:
        uint64_t v16 = 0;
        *(_DWORD *)(a3 + 8) = v60 + v44;
        int v42 = v67;
        if (v67 != &v69) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v44)
      {
        uint64_t v53 = 0;
        goto LABEL_81;
      }
LABEL_86:
      int v60 = 0;
      goto LABEL_84;
    }
    uint64_t v32 = v31;
    uint64_t v33 = v68;
    if (v68 >= (unint64_t)HIDWORD(v68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, &v69, v68 + 1, 8);
      uint64_t v33 = v68;
    }
    *((void *)v67 + v33) = v32;
    LODWORD(v68) = v68 + 1;
    unint64_t v29 = v32 - 16;
    unint64_t v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12))
    {
LABEL_44:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v30 + 1, 8);
      unint64_t v30 = *(unsigned int *)(a3 + 8);
    }
LABEL_37:
    *(void *)(*(void *)a3 + 8 * v30) = v29;
    ++*(_DWORD *)(a3 + 8);
    ++v27;
    ++v24;
    v26 -= 8;
    if (!v26) {
      goto LABEL_45;
    }
  }
  if ((*(void *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8) == v28)
  {
    unint64_t v30 = *(unsigned int *)(a3 + 8);
    if (v30 >= *(unsigned int *)(a3 + 12)) {
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  uint64_t v45 = v65;
  unint64_t v44 = v66;
  *(_DWORD *)(a3 + 8) = 0;
  if (v44 > *(unsigned int *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v61, v44, 8);
    uint64_t v46 = *(unsigned int *)(a3 + 8);
    goto LABEL_71;
  }
  if (v44)
  {
    uint64_t v46 = 0;
LABEL_71:
    uint64_t v54 = 0;
    uint64_t v55 = *(void *)a3 + 8 * v46;
    do
    {
      *(void *)(v55 + 8 * v54) = mlir::detail::OpResultImpl::getNextResultAtOffset(v45, v54);
      ++v54;
    }
    while (v44 != v54);
    goto LABEL_83;
  }
  uint64_t v16 = 0;
  int v42 = v67;
  if (v67 != &v69) {
    goto LABEL_53;
  }
LABEL_54:
  if (v70 != v72) {
    free(v70);
  }
  return v16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2, mlir::IRMapping *a3)
{
  char v6 = mlir::Operation::CloneOptions::all((mlir::Operation::CloneOptions *)this);
  uint64_t v7 = mlir::Operation::clone((uint64_t)a2, (uint64_t)a3, v6);
  uint64_t v8 = (mlir::GenericProgramPoint *)v7;
  if (this[1])
  {
    uint64_t v24 = (mlir::OpBuilder *)this;
    unint64_t v9 = v7[11];
    if ((v9 & 0x7FFFFF) != 0)
    {
      unint64_t v10 = (((unint64_t)&v7[4 * ((v9 >> 23) & 1) + 17] + ((v9 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v7[10];
      unint64_t v11 = v10 + 24 * (v9 & 0x7FFFFF);
      do
      {
        for (uint64_t i = *(void *)(v10 + 8); i != v10; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v13 = i - 8;
          if (!i) {
            uint64_t v13 = 0;
          }
          uint64_t v14 = (mlir::GenericProgramPoint *)(v13 + 32);
          int v15 = *(mlir::GenericProgramPoint **)(v13 + 40);
          if (v15 != (mlir::GenericProgramPoint *)(v13 + 32))
          {
            do
            {
              uint64_t v16 = (mlir::GenericProgramPoint *)*((void *)v15 + 1);
              mlir::GenericProgramPoint::~GenericProgramPoint(v15);
              mlir::detail::walk<mlir::ForwardIterator>(v17, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>, (uint64_t)&v24, 1);
              int v15 = v16;
            }
            while (v16 != v14);
          }
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  uint64_t v18 = this[2];
  if (v18)
  {
    uint64_t v19 = this[3];
    llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)(v18 + 4), (uint64_t)v8);
    mlir::GenericProgramPoint::~GenericProgramPoint(v8);
    uint64_t v20 = *v19;
    *uint64_t v21 = *v19;
    v21[1] = (uint64_t)v19;
    *(void *)(v20 + 8) = v21;
    *uint64_t v19 = (uint64_t)v21;
    mlir::GenericProgramPoint::~GenericProgramPoint(v8);
  }
  int v22 = this[1];
  if (v22) {
    (*(void (**)(uint64_t *, mlir::GenericProgramPoint *))(*v22 + 16))(v22, v8);
  }
  return v8;
}

void mlir::OpBuilder::clone(uint64_t **this, mlir::Operation *a2)
{
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  mlir::OpBuilder::clone(this, a2, (mlir::IRMapping *)v2);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
}

void sub_18042BA50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
}

void sub_18042BA64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
}

uint64_t sub_18042BA78()
{
  return v0;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OpBuilder::clone(mlir::Operation&,mlir::IRMapping &)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 8) + 16))();
}

uint64_t mlir::ElementsAttr::getType(mlir::ElementsAttr *this)
{
  return (**(uint64_t (***)(void))(*((void *)this + 1) + 24))();
}

uint64_t mlir::MemRefLayoutAttrInterface::verifyLayout(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1] + 16))(a1[1], *a1, a2, a3, a4, a5);
}

uint64_t mlir::ElementsAttr::getElementType(uint64_t a1, uint64_t a2)
{
  v4[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v4[1] = v2;
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v4);
}

uint64_t mlir::ElementsAttr::getNumElements(uint64_t a1, uint64_t a2)
{
  v6[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v6[1] = v2;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v6);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v4);
}

uint64_t mlir::ElementsAttr::isValidIndex(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v12[0] = a1;
  v12[1] = a2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
  if (!v6 && a4 == 1 && !*a3) {
    return 1;
  }
  if (v6 == a4)
  {
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
    if (a4 << 32)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (int)a4;
      while (1)
      {
        uint64_t v10 = *(void *)((char *)a3 + (v8 >> 29));
        if (v10 < 0 || v10 >= *(void *)(ArgAttrsAttr + 8 * (v8 >> 32))) {
          break;
        }
        v8 += 0x100000000;
        if (!--v9) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void v13[2];

  v13[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
  v13[1] = v6;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
  if (!v7 && a4 == 1 && !*a3) {
    return 1;
  }
  if (v7 == a4)
  {
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    if (a4 << 32)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (int)a4;
      while (1)
      {
        unint64_t v11 = *(void *)((char *)a3 + (v9 >> 29));
        if (v11 < 0 || v11 >= *(void *)(ArgAttrsAttr + 8 * (v9 >> 32))) {
          break;
        }
        v9 += 0x100000000;
        if (!--v10) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::ElementsAttr::getFlattenedIndex(void *a1, uint64_t a2)
{
  int v3 = a1;
  if (a1) {
    a1 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  }
  v15[0] = v3;
  v15[1] = a1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  int v5 = v4;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v5 - 1 < 0) {
    return 0;
  }
  uint64_t v7 = ArgAttrsAttr;
  uint64_t result = 0;
  uint64_t v9 = 8 * (v5 - 1);
  uint64_t v10 = (uint64_t *)(v7 + v9);
  unint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v12 = 1;
  do
  {
    uint64_t v13 = *v11--;
    result += v13 * v12;
    uint64_t v14 = *v10--;
    v12 *= v14;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t mlir::detail::verifyAffineMapAsLayout(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(void *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = a1;
  if (a3 == (const char *)mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47)) {
    return 1;
  }
  a4(v51, a5);
  if (v51[0])
  {
    int v48 = 3;
    int v49 = "memref layout mismatch between rank and affine map: ";
    uint64_t v50 = 52;
    uint64_t v9 = &v48;
    uint64_t v10 = (char *)v52;
    if (v53 >= v54)
    {
      unint64_t v37 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        int64_t v43 = (char *)&v48 - (unsigned char *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        uint64_t v10 = (char *)v52;
        uint64_t v9 = (int *)((char *)v52 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
        uint64_t v9 = &v48;
        uint64_t v10 = (char *)v52;
      }
    }
    unint64_t v11 = &v10[24 * v53];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)unint64_t v11 = v12;
    uint64_t v13 = ++v53;
    if (v51[0])
    {
      int v48 = 5;
      int v49 = a3;
      uint64_t v14 = &v48;
      int v15 = (char *)v52;
      if (v13 >= v54)
      {
        unint64_t v39 = v13 + 1;
        BOOL v40 = (char *)v52 + 24 * v13 > (char *)&v48;
        if (v52 <= &v48 && v40)
        {
          int64_t v45 = (char *)&v48 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          int v15 = (char *)v52;
          uint64_t v14 = (int *)((char *)v52 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          uint64_t v14 = &v48;
          int v15 = (char *)v52;
        }
      }
      uint64_t v16 = &v15[24 * v53];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      uint64_t v18 = ++v53;
      if (v51[0])
      {
        int v48 = 3;
        int v49 = " != ";
        uint64_t v50 = 4;
        uint64_t v19 = &v48;
        uint64_t v20 = (char *)v52;
        if (v18 >= v54)
        {
          unint64_t v41 = v18 + 1;
          BOOL v42 = (char *)v52 + 24 * v18 > (char *)&v48;
          if (v52 <= &v48 && v42)
          {
            int64_t v46 = (char *)&v48 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            uint64_t v20 = (char *)v52;
            uint64_t v19 = (int *)((char *)v52 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            uint64_t v19 = &v48;
            uint64_t v20 = (char *)v52;
          }
        }
        uint64_t v21 = &v20[24 * v53];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        ++v53;
      }
    }
  }
  unsigned int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v47);
  if (v51[0])
  {
    int v48 = 5;
    int v49 = (const char *)NumDims;
    uint64_t v24 = &v48;
    uint64_t v25 = (char *)v52;
    if (v53 >= v54)
    {
      unint64_t v38 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        int64_t v44 = (char *)&v48 - (unsigned char *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        uint64_t v25 = (char *)v52;
        uint64_t v24 = (int *)((char *)v52 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        uint64_t v24 = &v48;
        uint64_t v25 = (char *)v52;
      }
    }
    uint64_t v26 = &v25[24 * v53];
    long long v27 = *(_OWORD *)v24;
    *((void *)v26 + 2) = *((void *)v24 + 2);
    *(_OWORD *)uint64_t v26 = v27;
    ++v53;
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  }
  if (v60)
  {
    unint64_t v28 = (void **)__p;
    if (__p)
    {
      unint64_t v29 = v59;
      unint64_t v30 = __p;
      if (v59 != __p)
      {
        do
          unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        unint64_t v30 = __p;
      }
      uint64_t v59 = v28;
      operator delete(v30);
    }
    uint64_t v31 = v56;
    if (v56)
    {
      uint64_t v32 = v57;
      uint64_t v33 = v56;
      if (v57 != v56)
      {
        do
        {
          uint64_t v35 = (void *)*--v32;
          uint64_t v34 = v35;
          *uint64_t v32 = 0;
          if (v35) {
            operator delete[](v34);
          }
        }
        while (v32 != v31);
        uint64_t v33 = v56;
      }
      uint64_t v57 = v31;
      operator delete(v33);
    }
    if (v52 != v55) {
      free(v52);
    }
  }
  return v8;
}

uint64_t mlir::AffineMapAttr::get(unint64_t a1)
{
  unint64_t v4 = a1;
  uint64_t LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v5[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v4);
}

uint64_t mlir::AffineMapAttr::getValue(mlir::AffineMapAttr *this)
{
  return *(void *)(*(void *)this + 8);
}

uint64_t mlir::ArrayAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v6 = a2;
  *((void *)&v6 + 1) = a3;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v7[1] = a1;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v6);
}

uint64_t mlir::ArrayAttr::getValue(mlir::ArrayAttr *this)
{
  return *(void *)(*(void *)this + 8);
}

uint64_t mlir::DenseArrayAttr::get(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v12[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v12;
  uint64_t v15 = v11;
  uint64_t v16 = a2;
  v17[0] = a3;
  v17[1] = a4;
  unsigned int v9 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v15, &v16, (uint64_t)v17);
  v13[0] = &v15;
  v13[1] = v18;
  uint64_t v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::DenseArrayAttr::getRawData(mlir::DenseArrayAttr *this)
{
  return *(void *)(*(void *)this + 24);
}

uint64_t mlir::DenseStringElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a3;
  v9[1] = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v10);
  BOOL v8 = a4 == 1;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v10, (uint64_t)v9, (unsigned __int8 *)&v8);
}

__n128 mlir::DenseResourceElementsAttr::getRawHandle@<Q0>(mlir::DenseResourceElementsAttr *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  __n128 result = *(__n128 *)(*(void *)this + 24);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(v2 + 40);
  return result;
}

uint64_t mlir::FloatAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v7[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v6, a2);
}

llvm::APFloatBase *mlir::FloatAttr::get(uint64_t a1, double a2)
{
  void v33[3] = *MEMORY[0x1E4F143B8];
  unint64_t v29 = (void *)a1;
  if (!mlir::Type::isF64((mlir::Type *)&v29))
  {
    uint64_t v10 = *(void **)(*(void *)v29 + 136);
    BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    BOOL v12 = v11 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    BOOL v13 = v12 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    BOOL v14 = v13 || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    BOOL v15 = v14 || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    BOOL v16 = v15 || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    BOOL v17 = v16 || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    BOOL v18 = v17 || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    BOOL v19 = v18 || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    BOOL v20 = v19 || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v20 || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      char v28 = 0;
      long long v22 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
      uint64_t v23 = llvm::APFloatBase::IEEEdouble(v22);
      llvm::APFloat::Storage::Storage(v33, &v30, v23);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
      unint64_t v30 = v29;
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v30);
      llvm::APFloat::convert((uint64_t)v32, FloatSemantics, 1, &v28);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
      unint64_t v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      uint64_t v31 = Context;
      uint64_t v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
      long long v27 = (void *)v33[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v7) != v27) {
        goto LABEL_3;
      }
LABEL_41:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      return v7;
    }
  }
  int v3 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  unint64_t v4 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v30, a2);
  int v5 = llvm::APFloatBase::IEEEdouble(v4);
  llvm::APFloat::Storage::Storage(v33, &v30, v5);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
  uint64_t v6 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v3);
  unint64_t v30 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  uint64_t v31 = v3;
  uint64_t v7 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(v6, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v29, (uint64_t)v32);
  BOOL v8 = (void *)v33[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v7) == v8) {
    goto LABEL_41;
  }
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
  return v7;
}

llvm::detail::DoubleAPFloat *mlir::FloatAttr::getValue@<X0>(mlir::FloatAttr *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  int v3 = (const llvm::detail::DoubleAPFloat *)(*(void *)this + 24);
  unint64_t v4 = *(void **)v3;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v4)
  {
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v2, v3);
  }
  else
  {
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v2, v3);
  }
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, llvm::APInt *a2)
{
  uint64_t v10 = a1;
  BOOL isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v10, 1);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  int v5 = Context;
  if (!isSignlessInteger) {
    return mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v10, (uint64_t)a2);
  }
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6 > 0x40) {
    BOOL v7 = llvm::APInt::countLeadingZerosSlowCase(a2) == v6;
  }
  else {
    BOOL v7 = *(void *)a2 == 0;
  }
  int v9 = v7;
  return mlir::BoolAttr::get(v5, (mlir::MLIRContext *)(v9 ^ 1u));
}

uint64_t mlir::IntegerAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v12))
  {
    unsigned int v11 = 64;
    std::string __p = (void *)a2;
  }
  else
  {
    uint64_t v9 = v12;
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v9);
    BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v9);
    unsigned int v11 = Width;
    if (Width > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, a2, isSignedInteger);
    }
    else
    {
      unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)Width;
      if (!Width) {
        unint64_t v5 = 0;
      }
      std::string __p = (void *)(v5 & a2);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v12, (uint64_t)&__p);
  if (v11 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v7;
}

void *mlir::IntegerAttr::getValue@<X0>(void *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v2 = (const void **)(*(void *)this + 16);
  unsigned int v3 = *(_DWORD *)(*(void *)this + 24);
  *((_DWORD *)a2 + 2) = v3;
  if (v3 > 0x40) {
    return llvm::APInt::initSlowCase(a2, v2);
  }
  *(void *)a2 = *v2;
  return this;
}

uint64_t mlir::IntegerSetAttr::get(unint64_t a1)
{
  unint64_t v4 = a1;
  Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v4);
}

uint64_t mlir::OpaqueAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  uint64_t v16 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v12 = v16;
  if (!mlir::OpaqueAttr::verify(a1, a2, v16, a4, a5, a6)) {
    return 0;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v17[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v17[1] = Context;
  v23[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v23[1] = v17;
  uint64_t v20 = v12;
  v21[0] = a4;
  v21[1] = a5;
  uint64_t v22 = a6;
  unsigned int v14 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v20, (uint64_t)v21, &v22);
  v18[0] = &v20;
  v18[1] = v23;
  BOOL v19 = &v20;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
}

uint64_t mlir::OpaqueAttr::getAttrData(mlir::OpaqueAttr *this)
{
  return *(void *)(*(void *)this + 16);
}

uint64_t mlir::SparseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v10 = a1;
  *((void *)&v10 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  long long v14 = v10;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unsigned int v8 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v14, &v15, &v16);
  v12[0] = &v14;
  v12[1] = v17;
  BOOL v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SparseElementsAttr::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  if (!mlir::SparseElementsAttr::verify(a1, a2, v16, v17, a5, a6)) {
    return 0;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v18[1] = Context;
  v24[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v24[1] = v18;
  v21[0] = v11;
  v21[1] = v12;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  unsigned int v14 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(v21, &v22, &v23);
  v19[0] = v21;
  v19[1] = v24;
  uint64_t v20 = v21;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v20, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
}

uint64_t mlir::SparseElementsAttr::getValues(mlir::SparseElementsAttr *this)
{
  return *(void *)(*(void *)this + 32);
}

uint64_t mlir::StridedLayoutAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v11[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v16[1] = v11;
  uint64_t v14 = a2;
  v15[0] = a3;
  v15[1] = a4;
  unsigned int v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v14, (uint64_t)v15);
  v12[0] = &v14;
  v12[1] = v16;
  BOOL v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  uint64_t v13 = v9;
  v14[0] = a2;
  v14[1] = a3;
  unsigned int v7 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  uint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::TypeAttr::get(uint64_t a1)
{
  uint64_t v4 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v5[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v4);
}

uint64_t *mlir::BuiltinDialect::registerAttributes(mlir::BuiltinDialect *this)
{
  mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>((uint64_t)this);

  return mlir::Dialect::addAttribute<mlir::DistinctAttr>((uint64_t)this);
}

void *mlir::Dialect::addAttributes<mlir::AffineMapAttr,mlir::ArrayAttr,mlir::DenseArrayAttr,mlir::DenseIntOrFPElementsAttr,mlir::DenseStringElementsAttr,mlir::DenseResourceElementsAttr,mlir::DictionaryAttr,mlir::FloatAttr,mlir::IntegerAttr,mlir::IntegerSetAttr,mlir::OpaqueAttr,mlir::SparseElementsAttr,mlir::StridedLayoutAttr,mlir::StringAttr,mlir::SymbolRefAttr,mlir::TypeAttr,mlir::UnitAttr>(uint64_t a1)
{
  mlir::Dialect::addAttribute<mlir::AffineMapAttr>(a1);
  mlir::Dialect::addAttribute<mlir::ArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::DictionaryAttr>(a1);
  mlir::Dialect::addAttribute<mlir::FloatAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerAttr>(a1);
  mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(a1);
  mlir::Dialect::addAttribute<mlir::OpaqueAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::StringAttr>(a1);
  mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(a1);
  mlir::Dialect::addAttribute<mlir::TypeAttr>(a1);

  return mlir::Dialect::addAttribute<mlir::UnitAttr>(a1);
}

uint64_t dictionaryAttrSort<false>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a2 == 2)
  {
    unsigned int v6 = (long long *)(a1 + 2);
    int v7 = mlir::NamedAttribute::operator<(a1, a1 + 2);
    if (v7)
    {
      long long v17 = *(_OWORD *)v4;
      long long v19 = *v6;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u)
      {
LABEL_7:
        uint64_t v8 = 0;
LABEL_14:
        uint64_t v13 = (_OWORD *)(*(void *)a3 + 16 * v8);
        *uint64_t v13 = v17;
        v13[1] = v19;
        *(_DWORD *)(a3 + 8) += 2;
        return v7 ^ 1u;
      }
    }
    else
    {
      long long v17 = *v6;
      long long v19 = *(_OWORD *)v4;
      *(_DWORD *)(a3 + 8) = 0;
      if (*(_DWORD *)(a3 + 12) > 1u) {
        goto LABEL_7;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 16);
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    long long v18 = *(_OWORD *)a1;
    *(_DWORD *)(a3 + 8) = 0;
    if (*(_DWORD *)(a3 + 12))
    {
      uint64_t v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 1uLL, 16);
      uint64_t v9 = *(unsigned int *)(a3 + 8);
    }
    uint64_t result = 0;
    *(_OWORD *)(*(void *)a3 + 16 * v9) = v18;
    ++*(_DWORD *)(a3 + 8);
  }
  else if (a2)
  {
    size_t v10 = 16 * a2;
    *(_DWORD *)(a3 + 8) = 0;
    unint64_t v11 = (16 * a2) >> 4;
    if (v11 <= *(unsigned int *)(a3 + 12))
    {
      uint64_t v12 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      uint64_t v12 = *(unsigned int *)(a3 + 8);
    }
    memcpy((void *)(*(void *)a3 + 16 * v12), v4, v10);
    *(_DWORD *)(a3 + 8) += v10 >> 4;
    size_t v14 = v10 - 16;
    do
    {
      if (!v14) {
        return 0;
      }
      int v15 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      v14 -= 16;
      v4 += 2;
    }
    while (!v15);
    size_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= 2) {
      qsort(*(void **)a3, v16, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t mlir::DictionaryAttr::sortInPlace(uint64_t **a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v4 = *a1;
  if (v1 != 2)
  {
    for (uint64_t i = 16 * v1 - 16; i; i -= 16)
    {
      uint64_t v9 = v4 + 2;
      int v10 = mlir::NamedAttribute::operator<(v4 + 2, v4);
      uint64_t v4 = v9;
      if (v10)
      {
        size_t v11 = *((unsigned int *)a1 + 2);
        if (v11 >= 2) {
          qsort(*a1, v11, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
        }
        return 1;
      }
    }
    return 0;
  }
  int v5 = mlir::NamedAttribute::operator<(*a1, v4 + 2);
  if ((v5 & 1) == 0)
  {
    unsigned int v6 = *a1;
    long long v7 = *(_OWORD *)*a1;
    *(_OWORD *)unsigned int v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v6 + 1) = v7;
  }
  return v5 ^ 1u;
}

void mlir::DictionaryAttr::findDuplicate(uint64_t **a1@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *((unsigned int *)a1 + 2);
    if (v5 >= 2)
    {
      int v10 = *a1;
      if (v5 == 2)
      {
        if ((mlir::NamedAttribute::operator<(*a1, v10 + 2) & 1) == 0)
        {
          size_t v11 = *a1;
          long long v12 = *(_OWORD *)*a1;
          *(_OWORD *)size_t v11 = *((_OWORD *)*a1 + 1);
          *((_OWORD *)v11 + 1) = v12;
        }
      }
      else
      {
        uint64_t v16 = 16 * v5 - 16;
        while (v16)
        {
          long long v17 = v10 + 2;
          int v18 = mlir::NamedAttribute::operator<(v10 + 2, v10);
          v16 -= 16;
          int v10 = v17;
          if (v18)
          {
            size_t v19 = *((unsigned int *)a1 + 2);
            if (v19 >= 2) {
              qsort(*a1, v19, 0x10uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<mlir::NamedAttribute>);
            }
            break;
          }
        }
      }
    }
  }
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (v6 <= 1) {
    goto LABEL_17;
  }
  long long v7 = *a1;
  if (v6 != 2)
  {
    uint64_t v13 = 16 * v6 + 16;
    while (v13 != 32)
    {
      size_t v14 = v7 + 2;
      long long v21 = *(_OWORD *)v7;
      long long v20 = *((_OWORD *)v7 + 1);
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v21);
      v13 -= 16;
      v7 += 2;
      if (CallableRegion == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v20))
      {
        if (!v13) {
          goto LABEL_17;
        }
        long long v9 = *((_OWORD *)v14 - 1);
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  uint64_t v8 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v7);
  if (v8 != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v7 + 2)))
  {
LABEL_17:
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  long long v9 = *(_OWORD *)v7;
LABEL_16:
  *(_OWORD *)a3 = v9;
  a3[16] = 1;
}

uint64_t mlir::DictionaryAttr::get(mlir::DictionaryAttr *this, uint64_t *a2, uint64_t a3)
{
  v11[16] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  if (a3)
  {
    long long v9 = v11;
    uint64_t v10 = 0x800000000;
    if (dictionaryAttrSort<false>(a2, a3, (uint64_t)&v9))
    {
      *(void *)&long long v7 = v9;
      *((void *)&v7 + 1) = v10;
    }
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
    v8[1] = this;
    uint64_t v5 = mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v7);
    if (v9 != v11) {
      free(v9);
    }
    return v5;
  }
  else
  {
    return mlir::DictionaryAttr::getEmpty(this, (mlir::MLIRContext *)a2);
  }
}

uint64_t mlir::DictionaryAttr::getWithSorted(mlir::DictionaryAttr *this, mlir::MLIRContext *a2, uint64_t a3)
{
  *(void *)&long long v6 = a2;
  *((void *)&v6 + 1) = a3;
  if (a3)
  {
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
    v7[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
    v7[1] = this;
    return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v6);
  }
  else
  {
    return mlir::DictionaryAttr::getEmpty(this, a2);
  }
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, const void *a2, size_t a3)
{
  if (16 * *(void *)(*(void *)a1 + 16) < 1) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  unint64_t v6 = *(void *)(*(void *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    uint64_t v7 = v6 >> 1;
    uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v5 + 16 * (v6 >> 1)));
    size_t v9 = *(void *)(CallableRegion + 24);
    if (a3 >= v9) {
      size_t v10 = *(void *)(CallableRegion + 24);
    }
    else {
      size_t v10 = a3;
    }
    if (v10)
    {
      int v11 = memcmp(*(const void **)(CallableRegion + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        goto LABEL_3;
      }
    }
    if (v9 == a3) {
      return *(void *)(v5 + 16 * v7 + 8);
    }
    if (v9 >= a3) {
      goto LABEL_4;
    }
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    uint64_t v7 = v6 + ~v7;
LABEL_4:
    unint64_t v6 = v7;
    if (v7 <= 0) {
      return 0;
    }
  }
}

uint64_t mlir::DictionaryAttr::end(mlir::DictionaryAttr *this)
{
  return *(void *)(*(void *)this + 8) + 16 * *(void *)(*(void *)this + 16);
}

uint64_t mlir::DictionaryAttr::get(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  uint64_t v5 = 16 * v3;
  if (16 * v3 >= 257)
  {
    unint64_t v6 = *(const void **)(a2 + 16);
    unint64_t v7 = *(void *)(a2 + 24);
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      uint64_t v9 = v8 >> 1;
      uint64_t i = (mlir::CallGraphNode *)&v4[2 * (v8 >> 1)];
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(i);
      unint64_t v12 = *(void *)(CallableRegion + 24);
      size_t v13 = v7 >= v12 ? *(void *)(CallableRegion + 24) : v7;
      if (v13)
      {
        int v14 = memcmp(*(const void **)(CallableRegion + 16), v6, v13);
        if (v14) {
          break;
        }
      }
      if (v12 == v7) {
        return *((void *)i + 1);
      }
      if (v12 < v7) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v8 = v9;
      if (v9 <= 0) {
        return 0;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_3:
    uint64_t v4 = (void *)((char *)i + 16);
    uint64_t v9 = v8 + ~v9;
    goto LABEL_4;
  }
  if (!v3) {
    return 0;
  }
  for (uint64_t i = *(mlir::CallGraphNode **)(*(void *)a1 + 8);
        mlir::CallGraphNode::getCallableRegion(i) != a2;
        uint64_t i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    v5 -= 16;
    if (!v5) {
      return 0;
    }
  }
  return *((void *)i + 1);
}

uint64_t mlir::DictionaryAttr::getNamed@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(char **)(*(void *)result + 8);
  uint64_t v5 = *(void *)(*(void *)result + 16);
  uint64_t v7 = 16 * v5;
  if (16 * v5 >= 257)
  {
    unint64_t v8 = *(const void **)(a2 + 16);
    unint64_t v9 = *(void *)(a2 + 24);
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      uint64_t v11 = v10 >> 1;
      unint64_t v12 = (mlir::CallGraphNode *)&v6[16 * (v10 >> 1)];
      uint64_t result = mlir::CallGraphNode::getCallableRegion(v12);
      unint64_t v13 = *(void *)(result + 24);
      size_t v14 = v9 >= v13 ? *(void *)(result + 24) : v9;
      if (v14)
      {
        uint64_t result = memcmp(*(const void **)(result + 16), v8, v14);
        if (result) {
          break;
        }
      }
      if (v13 == v9) {
        goto LABEL_20;
      }
      if (v13 < v9) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v10 = v11;
      if (v11 <= 0) {
        goto LABEL_19;
      }
    }
    if ((result & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v6 = (char *)v12 + 16;
    uint64_t v11 = v10 + ~v11;
    goto LABEL_4;
  }
  if (v5)
  {
    unint64_t v12 = *(mlir::CallGraphNode **)(*(void *)result + 8);
    while (1)
    {
      uint64_t result = mlir::CallGraphNode::getCallableRegion(v12);
      if (result == a2) {
        break;
      }
      unint64_t v12 = (mlir::CallGraphNode *)((char *)v12 + 16);
      v7 -= 16;
      if (!v7) {
        goto LABEL_19;
      }
    }
LABEL_20:
    *(_OWORD *)a3 = *(_OWORD *)v12;
    char v15 = 1;
  }
  else
  {
LABEL_19:
    char v15 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v15;
  return result;
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, const void *a2, size_t a3)
{
  if (16 * *(void *)(*(void *)a1 + 16) < 1) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  unint64_t v6 = *(void *)(*(void *)a1 + 16) & 0xFFFFFFFFFFFFFFFLL;
  while (1)
  {
    uint64_t v7 = v6 >> 1;
    uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v5 + 16 * (v6 >> 1)));
    size_t v9 = *(void *)(CallableRegion + 24);
    if (a3 >= v9) {
      size_t v10 = *(void *)(CallableRegion + 24);
    }
    else {
      size_t v10 = a3;
    }
    if (v10)
    {
      int v11 = memcmp(*(const void **)(CallableRegion + 16), a2, v10);
      if (v11)
      {
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_4;
        }
        goto LABEL_3;
      }
    }
    if (v9 == a3) {
      return 1;
    }
    if (v9 >= a3) {
      goto LABEL_4;
    }
LABEL_3:
    v5 += 16 * (v6 >> 1) + 16;
    uint64_t v7 = v6 + ~v7;
LABEL_4:
    unint64_t v6 = v7;
    if (v7 <= 0) {
      return 0;
    }
  }
}

uint64_t mlir::DictionaryAttr::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(mlir::CallGraphNode **)(*(void *)a1 + 8);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (16 * v3 >= 257)
  {
    uint64_t v5 = *(const void **)(a2 + 16);
    unint64_t v6 = *(void *)(a2 + 24);
    unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      uint64_t v8 = v7 >> 1;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)v4 + 16 * (v7 >> 1)));
      unint64_t v10 = *(void *)(CallableRegion + 24);
      size_t v11 = v6 >= v10 ? *(void *)(CallableRegion + 24) : v6;
      if (v11)
      {
        int v12 = memcmp(*(const void **)(CallableRegion + 16), v5, v11);
        if (v12) {
          break;
        }
      }
      if (v10 == v6) {
        return 1;
      }
      if (v10 < v6) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v7 = v8;
      if (v8 <= 0) {
        return 0;
      }
    }
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_3:
    uint64_t v4 = (mlir::CallGraphNode *)((char *)v4 + 16 * (v7 >> 1) + 16);
    uint64_t v8 = v7 + ~v8;
    goto LABEL_4;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v13 = 16 * v3 - 16;
  do
  {
    BOOL v14 = mlir::CallGraphNode::getCallableRegion(v4) == a2;
    uint64_t result = v14;
    if (v14) {
      break;
    }
    uint64_t v16 = v13;
    v13 -= 16;
    uint64_t v4 = (mlir::CallGraphNode *)((char *)v4 + 16);
  }
  while (v16);
  return result;
}

uint64_t mlir::DictionaryAttr::getEmptyUnchecked(mlir::DictionaryAttr *this, mlir::MLIRContext *a2)
{
  long long v5 = 0uLL;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  v6[1] = this;
  return mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, &v5);
}

llvm::raw_ostream *mlir::StridedLayoutAttr::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 8)
  {
    *(unsigned char *)(v4 + 8) = 91;
    *(void *)uint64_t v4 = *(void *)"strided<[";
    *((void *)a2 + 4) += 9;
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *(void *)(*(void *)this + 24);
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  this = llvm::raw_ostream::write(a2, "strided<[", 9uLL);
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(*(void *)v3 + 24);
  if (v6)
  {
LABEL_5:
    unint64_t v7 = *(unint64_t **)(v5 + 16);
    if (*v7 == 0x8000000000000000)
    {
      uint64_t v8 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v8)
      {
        this = llvm::raw_ostream::write(a2, "?", 1uLL);
        if (v6 == 1) {
          goto LABEL_12;
        }
      }
      else
      {
        *uint64_t v8 = 63;
        ++*((void *)a2 + 4);
        if (v6 == 1) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      this = llvm::raw_ostream::operator<<(a2, *v7);
      if (v6 == 1) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = v7 + 1;
    for (uint64_t i = 8 * v6 - 8; i; i -= 8)
    {
      char v15 = (_WORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v15 > 1uLL)
      {
        *char v15 = 8236;
        *((void *)a2 + 4) += 2;
        unint64_t v16 = *v13;
        if (*v13 == 0x8000000000000000)
        {
LABEL_27:
          long long v17 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v17)
          {
            this = llvm::raw_ostream::write(a2, "?", 1uLL);
          }
          else
          {
            *long long v17 = 63;
            ++*((void *)a2 + 4);
          }
          goto LABEL_22;
        }
      }
      else
      {
        this = llvm::raw_ostream::write(a2, ", ", 2uLL);
        unint64_t v16 = *v13;
        if (*v13 == 0x8000000000000000) {
          goto LABEL_27;
        }
      }
      this = llvm::raw_ostream::operator<<(a2, v16);
LABEL_22:
      ++v13;
    }
  }
LABEL_12:
  size_t v9 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v9)
  {
    this = llvm::raw_ostream::write(a2, "]", 1uLL);
    if (!*(void *)(*(void *)v3 + 8)) {
      goto LABEL_33;
    }
  }
  else
  {
    unsigned char *v9 = 93;
    ++*((void *)a2 + 4);
    if (!*(void *)(*(void *)v3 + 8))
    {
LABEL_33:
      int v12 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) != v12) {
        goto LABEL_34;
      }
      goto LABEL_36;
    }
  }
  uint64_t v10 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v10) <= 9)
  {
    this = llvm::raw_ostream::write(a2, ", offset: ", 0xAuLL);
    unint64_t v11 = *(void *)(*(void *)v3 + 8);
    if (v11 != 0x8000000000000000) {
      goto LABEL_18;
    }
LABEL_31:
    int v18 = (unsigned char *)*((void *)a2 + 4);
    if (*((unsigned char **)a2 + 3) == v18)
    {
      this = llvm::raw_ostream::write(a2, "?", 1uLL);
      int v12 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) != v12) {
        goto LABEL_34;
      }
      goto LABEL_36;
    }
    *int v18 = 63;
    ++*((void *)a2 + 4);
    goto LABEL_33;
  }
  *(_WORD *)(v10 + 8) = 8250;
  *(void *)uint64_t v10 = *(void *)", offset: ";
  *((void *)a2 + 4) += 10;
  unint64_t v11 = *(void *)(*(void *)v3 + 8);
  if (v11 == 0x8000000000000000) {
    goto LABEL_31;
  }
LABEL_18:
  this = llvm::raw_ostream::operator<<(a2, v11);
  int v12 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) != v12)
  {
LABEL_34:
    *int v12 = 62;
    ++*((void *)a2 + 4);
    return this;
  }
LABEL_36:

  return llvm::raw_ostream::write(a2, ">", 1uLL);
}

uint64_t mlir::makeStridedLinearLayoutMap(uint64_t a1, uint64_t a2, mlir *this, mlir::MLIRContext *a4)
{
  if (this == (mlir *)0x8000000000000000)
  {
    uint64_t AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineSymbolExpr(0, a4, (mlir::MLIRContext *)0x8000000000000000);
    uint64_t v8 = 1;
    uint64_t v18 = (uint64_t)AffineSymbolExpr;
    if (!a2) {
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
    }
  }
  else
  {
    uint64_t AffineSymbolExpr = (mlir::MLIRContext *)mlir::getAffineConstantExpr(this, a4, this);
    uint64_t v8 = 0;
    uint64_t v18 = (uint64_t)AffineSymbolExpr;
    if (!a2) {
      return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
    }
  }
  size_t v9 = 0;
  uint64_t v10 = 8 * a2;
  do
  {
    BOOL v14 = *(mlir **)(a1 + 8 * (void)v9);
    uint64_t AffineDimExpr = mlir::getAffineDimExpr(v9, a4, AffineSymbolExpr);
    if (v14 == (mlir *)0x8000000000000000)
    {
      uint64_t AffineConstantExpr = mlir::getAffineSymbolExpr((mlir *)v8, a4, v15);
      uint64_t v8 = (v8 + 1);
    }
    else
    {
      uint64_t AffineConstantExpr = mlir::getAffineConstantExpr(v14, a4, v15);
    }
    uint64_t v12 = mlir::AffineExpr::operator*((unint64_t *)&AffineDimExpr, AffineConstantExpr);
    uint64_t v13 = mlir::AffineExpr::operator+((unint64_t *)&v18, v12);
    uint64_t v18 = v13;
    size_t v9 = (mlir *)((char *)v9 + 1);
    v10 -= 8;
  }
  while (v10);
  uint64_t AffineSymbolExpr = (mlir::MLIRContext *)v13;
  return mlir::AffineMap::get(a2, v8, (uint64_t)AffineSymbolExpr);
}

uint64_t mlir::StridedLayoutAttr::verify(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 1;
  }
  uint64_t v5 = 8 * a5;
  uint64_t v6 = a4;
  while (*v6)
  {
    ++v6;
    v5 -= 8;
    if (!v5)
    {
      uint64_t v6 = &a4[a5];
      break;
    }
  }
  if (a5 == v6 - a4) {
    return 1;
  }
  a1(v26, a2);
  if (v26[0])
  {
    int v23 = 3;
    uint64_t v24 = "strides must not be zero";
    uint64_t v25 = 24;
    uint64_t v8 = &v23;
    size_t v9 = (char *)v27;
    if (v28 >= v29)
    {
      unint64_t v21 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        int64_t v22 = (char *)&v23 - (unsigned char *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        size_t v9 = (char *)v27;
        uint64_t v8 = (int *)((char *)v27 + v22);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v21, 24);
        uint64_t v8 = &v23;
        size_t v9 = (char *)v27;
      }
    }
    uint64_t v10 = &v9[24 * v28];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v10 = v11;
    ++v28;
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v35)
  {
    uint64_t v12 = (void **)__p;
    if (__p)
    {
      uint64_t v13 = v34;
      BOOL v14 = __p;
      if (v34 != __p)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        BOOL v14 = __p;
      }
      uint64_t v34 = v12;
      operator delete(v14);
    }
    char v15 = v31;
    if (v31)
    {
      unint64_t v16 = v32;
      long long v17 = v31;
      if (v32 != v31)
      {
        do
        {
          size_t v19 = (void *)*--v16;
          uint64_t v18 = v19;
          *unint64_t v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        long long v17 = v31;
      }
      uint64_t v32 = v15;
      operator delete(v17);
    }
    if (v27 != v30) {
      free(v27);
    }
  }
  return v7;
}

uint64_t mlir::StridedLayoutAttr::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3 == *(void *)(*(void *)a1 + 24)) {
    return 1;
  }
  a4(v24, a5);
  if (v24[0])
  {
    int v21 = 3;
    int64_t v22 = "expected the number of strides to match the rank";
    uint64_t v23 = 48;
    uint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        uint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
  }
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      long long v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          long long v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      BOOL v14 = v30;
      char v15 = v29;
      if (v30 != v29)
      {
        do
        {
          long long v17 = (void *)*--v14;
          unint64_t v16 = v17;
          *BOOL v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        char v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return v5;
}

uint64_t mlir::StringAttr::getEmptyStringAttrUnchecked(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  uint64_t v3 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v9[1] = this;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v13[1] = v9;
  v12[0] = "";
  v12[1] = 0;
  void v12[2] = v3;
  unint64_t v5 = ~((unint64_t)((v3 >> 4) ^ (v3 >> 9)) << 32)
     + ((v3 >> 4) ^ (v3 >> 9))
     + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue("", 0) << 32);
  unint64_t v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v10[0] = v12;
  v10[1] = v13;
  long long v11 = v12;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v7 >> 31) ^ v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::StringAttr::get(mlir::StringAttr *this, mlir::MLIRContext *a2)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((unsigned __int8 *)a2 + 32);
  if (v3 <= 1)
  {
    return mlir::StringAttr::get(this, a2);
  }
  unint64_t v19 = v21;
  long long v20 = xmmword_1810FE500;
  if (*((unsigned char *)a2 + 33) == 1)
  {
    if (v3 - 5 < 2)
    {
      unint64_t v5 = *(void **)a2;
      size_t v6 = *((void *)a2 + 1);
      goto LABEL_20;
    }
    if (v3 == 4)
    {
      int v7 = *(char *)(*(void *)a2 + 23);
      if (v7 >= 0) {
        unint64_t v5 = *(void **)a2;
      }
      else {
        unint64_t v5 = **(void ***)a2;
      }
      if (v7 >= 0) {
        size_t v6 = *(unsigned __int8 *)(*(void *)a2 + 23);
      }
      else {
        size_t v6 = *(void *)(*(void *)a2 + 8);
      }
      goto LABEL_20;
    }
    if (v3 == 3)
    {
      unint64_t v5 = *(void **)a2;
      if (*(void *)a2) {
        size_t v6 = strlen(*(const char **)a2);
      }
      else {
        size_t v6 = 0;
      }
      goto LABEL_20;
    }
  }
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v19);
  unint64_t v5 = v19;
  size_t v6 = v20;
LABEL_20:
  uint64_t v8 = mlir::NoneType::get(this, a2);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(this);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v14[1] = this;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v18[1] = v14;
  v17[0] = v5;
  v17[1] = v6;
  void v17[2] = v8;
  unint64_t v10 = ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32)
      + ((v8 >> 4) ^ (v8 >> 9))
      + (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v6) << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v15[0] = v17;
  v15[1] = v18;
  unint64_t v16 = v17;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v12 >> 31) ^ v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
  if (v19 != v21) {
    free(v19);
  }
  return ParametricStorageTypeImpl;
}

{
  return *(void *)(*(void *)this + 584);
}

uint64_t mlir::StringAttr::get(char **a1, uint64_t a2)
{
  void v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  long long v20 = v22;
  long long v21 = xmmword_1810FE500;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  if (*((unsigned char *)a1 + 33) == 1)
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    switch(*((unsigned char *)a1 + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v5 = *a1;
        if (*a1) {
          size_t v4 = strlen(*a1);
        }
        else {
          size_t v4 = 0;
        }
        break;
      case 4:
        int v13 = (*a1)[23];
        if (v13 >= 0) {
          unint64_t v5 = *a1;
        }
        else {
          unint64_t v5 = *(char **)*a1;
        }
        if (v13 >= 0) {
          size_t v4 = (*a1)[23];
        }
        else {
          size_t v4 = *((void *)*a1 + 1);
        }
        break;
      case 5:
      case 6:
        unint64_t v5 = *a1;
        size_t v4 = (size_t)a1[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v20);
    unint64_t v5 = (char *)v20;
    size_t v4 = v21;
  }
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  v15[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v19[1] = v15;
  v18[0] = v5;
  v18[1] = v4;
  unsigned int v7 = v14;
  void v18[2] = v14;
  unint64_t v8 = ((v7 >> 4) ^ (v7 >> 9) | (llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(v5, v4) << 32))
     + ~((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32);
  unint64_t v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v16[0] = v18;
  v16[1] = v19;
  long long v17 = v18;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (v10 >> 31) ^ v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v20 != v22) {
    free(v20);
  }
  return ParametricStorageTypeImpl;
}

double mlir::FloatAttr::getValueAsDouble(mlir::FloatAttr *this)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const llvm::detail::IEEEFloat *)(*(void *)this + 24);
  uint64_t v2 = *(void **)v1;
  unsigned int v3 = llvm::APFloatBase::PPCDoubleDouble(this);
  if (v3 != v2)
  {
    size_t v4 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v13, v1);
    unint64_t v5 = (void *)v13[0];
    size_t v6 = llvm::APFloatBase::IEEEdouble(v4);
    if (v5 == v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v9 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13, v1);
  unint64_t v10 = (void *)v13[0];
  size_t v6 = llvm::APFloatBase::IEEEdouble(v9);
  if (v10 != v6)
  {
LABEL_3:
    char v11 = 0;
    llvm::APFloat::convert((uint64_t)&v12, v6, 1, &v11);
  }
LABEL_4:
  double v7 = llvm::APFloat::convertToDouble(&v12);
  if (v3 == (void *)v13[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v13);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v13);
  }
  return v7;
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v13 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v11);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v14[1] = Context;
  v19[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v19[1] = v14;
  uint64_t v17 = v13;
  v18[0] = a4;
  v18[1] = a5;
  unsigned int v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v17, (uint64_t)v18);
  v15[0] = &v17;
  v15[1] = v19;
  unint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

uint64_t mlir::SymbolRefAttr::get(mlir::StringAttr *a1, uint64_t a2, uint64_t a3)
{
  __int16 v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v9 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v7);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v15[1] = v10;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = v9;
  unsigned int v5 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  __int16 v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::SymbolRefAttr::get(uint64_t a1)
{
  uint64_t v5 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v6[1] = Context;
  v11[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v11[1] = v6;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = v5;
  unsigned int v3 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v9, (uint64_t)v10);
  v7[0] = &v9;
  v7[1] = v11;
  __int16 v8 = &v9;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v3, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v8, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v7);
}

uint64_t mlir::SymbolRefAttr::get(mlir::SymbolRefAttr *this, mlir::Operation *a2)
{
  uint64_t v6 = mlir::Operation::getAttrOfType<mlir::StringAttr>((uint64_t)this, "sym_name", 8uLL);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v7[1] = Context;
  v12[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v12[1] = v7;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = v6;
  unsigned int v4 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v10, (uint64_t)v11);
  v8[0] = &v10;
  v8[1] = v12;
  uint64_t v9 = &v10;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v4, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v8);
}

uint64_t mlir::Operation::getAttrOfType<mlir::StringAttr>(uint64_t a1, const void *a2, unint64_t a3)
{
  if (!*(unsigned char *)(a1 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (16 * *(void *)(v8 + 16) < 1) {
      return 0;
    }
    uint64_t v9 = *(void *)(v8 + 8);
    unint64_t v10 = *(void *)(v8 + 16) & 0xFFFFFFFFFFFFFFFLL;
    while (1)
    {
      uint64_t v11 = v10 >> 1;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)(v9 + 16 * (v10 >> 1)));
      unint64_t v13 = *(void *)(CallableRegion + 24);
      size_t v14 = a3 >= v13 ? *(void *)(CallableRegion + 24) : a3;
      if (v14)
      {
        int v15 = memcmp(*(const void **)(CallableRegion + 16), a2, v14);
        if (v15) {
          break;
        }
      }
      if (v13 == a3)
      {
        uint64_t result = *(void *)(v9 + 16 * v11 + 8);
        if (!result) {
          return result;
        }
        goto LABEL_4;
      }
      if (v13 < a3) {
        goto LABEL_9;
      }
LABEL_10:
      unint64_t v10 = v11;
      if (v11 <= 0) {
        return 0;
      }
    }
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    v9 += 16 * (v10 >> 1) + 16;
    uint64_t v11 = v10 + ~v11;
    goto LABEL_10;
  }
  if (!result) {
    return result;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)result + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    return 0;
  }
  return result;
}

uint64_t mlir::SymbolRefAttr::getLeafReference(mlir::SymbolRefAttr *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 24);
  if (v2) {
    uint64_t v1 = *(void *)(*(void *)(v1 + 16) + 8 * v2 - 8);
  }
  return *(void *)(v1 + 8);
}

uint64_t mlir::IntegerAttr::getInt(mlir::IntegerAttr *this)
{
  p_p = (const void **)(*(void *)this + 16);
  unsigned int v2 = *(_DWORD *)(*(void *)this + 24);
  unsigned int v6 = v2;
  if (v2 < 0x41) {
    return (uint64_t)((void)*p_p << -(char)v2) >> -(char)v2;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, p_p);
  LOBYTE(v2) = v6;
  if (v6 <= 0x40)
  {
    p_p = (const void **)&__p;
    return (uint64_t)((void)*p_p << -(char)v2) >> -(char)v2;
  }
  uint64_t v4 = *(void *)__p;
  operator delete[](__p);
  return v4;
}

void *mlir::IntegerAttr::getUInt(mlir::IntegerAttr *this)
{
  uint64_t v1 = (const void **)(*(void *)this + 16);
  unsigned int v5 = *(_DWORD *)(*(void *)this + 24);
  if (v5 <= 0x40) {
    return (void *)*v1;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, v1);
  if (v5 <= 0x40) {
    return __p;
  }
  uint64_t v3 = *(void *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::IntegerAttr::getBoolAttrUnchecked(uint64_t a1, unsigned int a2)
{
  uint64_t v9 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  unint64_t v4 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  v10[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v16[1] = v10;
  unsigned int v15 = 1;
  uint64_t v13 = v9;
  std::string __p = (void *)v4;
  unsigned int v6 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v13, (llvm *)&__p);
  v11[0] = &v13;
  v11[1] = v16;
  __int16 v12 = &v13;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
  if (v15 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return ParametricStorageTypeImpl;
}

BOOL mlir::BoolAttr::getValue(mlir::BoolAttr *this)
{
  uint64_t v1 = *(void *)this;
  unsigned int v2 = (llvm::APInt *)(*(void *)this + 16);
  unsigned int v3 = *(_DWORD *)(v1 + 24);
  if (v3 > 0x40) {
    return llvm::APInt::countLeadingZerosSlowCase(v2) != v3;
  }
  else {
    return *(void *)v2 != 0;
  }
}

BOOL mlir::BoolAttr::classof(void *a1)
{
  BOOL result = 0;
  if (a1)
  {
    if (*(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v3 = a1[1];
      return mlir::Type::isSignlessInteger((mlir::Type *)&v3, 1);
    }
  }
  return result;
}

uint64_t mlir::OpaqueAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5, uint64_t a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v72 = a3;
  if (mlir::Dialect::isValidNamespace(*(char **)(a3 + 16), *(void *)(a3 + 24)))
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if ((mlir::MLIRContext::allowsUnregisteredDialects(Context) & 1) != 0
      || mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, *(void *)(v72 + 16), *(void *)(v72 + 24)))
    {
      return 1;
    }
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      int v74 = "#";
      uint64_t v75 = 1;
      unsigned int v29 = &v73;
      unint64_t v30 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v59 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          int64_t v67 = (char *)&v73 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          unint64_t v30 = (char *)v79;
          unsigned int v29 = (const void ***)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
          unsigned int v29 = &v73;
          unint64_t v30 = (char *)v79;
        }
      }
      uint64_t v31 = &v30[24 * v80];
      long long v32 = *(_OWORD *)v29;
      *((void *)v31 + 2) = v29[2];
      *(_OWORD *)uint64_t v31 = v32;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          int v74 = "<\"";
          uint64_t v75 = 2;
          char v33 = &v73;
          uint64_t v34 = (char *)v79;
          if (v80 >= v81)
          {
            unint64_t v60 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              int64_t v68 = (char *)&v73 - (unsigned char *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              uint64_t v34 = (char *)v79;
              char v33 = (const void ***)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
              char v33 = &v73;
              uint64_t v34 = (char *)v79;
            }
          }
          char v35 = &v34[24 * v80];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)char v35 = v36;
          ++v80;
          if (v77)
          {
            __int16 v76 = 261;
            unint64_t v73 = a4;
            int v74 = a5;
            mlir::Diagnostic::operator<<((uint64_t)v78, &v73);
            if (v77)
            {
              LODWORD(v73) = 3;
              int v74 = "\"> : ";
              uint64_t v75 = 5;
              unint64_t v37 = &v73;
              unint64_t v38 = (char *)v79;
              if (v80 >= v81)
              {
                unint64_t v61 = v80 + 1;
                if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                {
                  int64_t v69 = (char *)&v73 - (unsigned char *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  unint64_t v38 = (char *)v79;
                  unint64_t v37 = (const void ***)((char *)v79 + v69);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v61, 24);
                  unint64_t v37 = &v73;
                  unint64_t v38 = (char *)v79;
                }
              }
              unint64_t v39 = &v38[24 * v80];
              long long v40 = *(_OWORD *)v37;
              *((void *)v39 + 2) = v37[2];
              *(_OWORD *)unint64_t v39 = v40;
              ++v80;
              if (v77)
              {
                unint64_t v41 = &v73;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v73, a6);
                BOOL v42 = (char *)v79;
                if (v80 >= v81)
                {
                  unint64_t v62 = v80 + 1;
                  if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
                  {
                    int64_t v70 = (char *)&v73 - (unsigned char *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    BOOL v42 = (char *)v79;
                    unint64_t v41 = (const void ***)((char *)v79 + v70);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                    unint64_t v41 = &v73;
                    BOOL v42 = (char *)v79;
                  }
                }
                int64_t v43 = &v42[24 * v80];
                long long v44 = *(_OWORD *)v41;
                *((void *)v43 + 2) = v41[2];
                *(_OWORD *)int64_t v43 = v44;
                uint64_t v45 = ++v80;
                if (v77)
                {
                  LODWORD(v73) = 3;
                  int v74 = " attribute created with unregistered dialect. If this is intended, please call allowUnregistered"
                        "Dialects() on the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
                  uint64_t v75 = 189;
                  int64_t v46 = &v73;
                  uint64_t v47 = (char *)v79;
                  if (v45 >= v81)
                  {
                    unint64_t v63 = v45 + 1;
                    BOOL v64 = (char *)v79 + 24 * v45 > (char *)&v73;
                    if (v79 <= &v73 && v64)
                    {
                      int64_t v71 = (char *)&v73 - (unsigned char *)v79;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      uint64_t v47 = (char *)v79;
                      int64_t v46 = (const void ***)((char *)v79 + v71);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                      int64_t v46 = &v73;
                      uint64_t v47 = (char *)v79;
                    }
                  }
                  int v48 = &v47[24 * v80];
                  long long v49 = *(_OWORD *)v46;
                  *((void *)v48 + 2) = v46[2];
                  *(_OWORD *)int v48 = v49;
                  ++v80;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v87)
    {
      uint64_t v50 = (void **)__p;
      if (__p)
      {
        int v51 = v86;
        uint64_t v52 = __p;
        if (v86 != __p)
        {
          do
            int v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          uint64_t v52 = __p;
        }
        unsigned int v86 = v50;
        operator delete(v52);
      }
      uint64_t v24 = v83;
      if (!v83) {
        goto LABEL_54;
      }
      unsigned int v53 = v84;
      unsigned int v26 = v83;
      if (v84 == v83)
      {
LABEL_53:
        unint64_t v84 = v24;
        operator delete(v26);
LABEL_54:
        if (v79 != v82) {
          free(v79);
        }
        return v12;
      }
      do
      {
        uint64_t v55 = (void *)*--v53;
        unsigned int v54 = v55;
        *unsigned int v53 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v53 != v24);
LABEL_52:
      unsigned int v26 = v83;
      goto LABEL_53;
    }
  }
  else
  {
    a1(&v77, a2);
    if (v77)
    {
      LODWORD(v73) = 3;
      int v74 = "invalid dialect namespace '";
      uint64_t v75 = 27;
      uint64_t v13 = &v73;
      size_t v14 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v57 = v80 + 1;
        if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
        {
          int64_t v65 = (char *)&v73 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          size_t v14 = (char *)v79;
          uint64_t v13 = (const void ***)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v57, 24);
          uint64_t v13 = &v73;
          size_t v14 = (char *)v79;
        }
      }
      unsigned int v15 = &v14[24 * v80];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = v13[2];
      *(_OWORD *)unsigned int v15 = v16;
      ++v80;
      if (v77)
      {
        mlir::Diagnostic::operator<<((uint64_t)v78, v72);
        if (v77)
        {
          LODWORD(v73) = 3;
          int v74 = "'";
          uint64_t v75 = 1;
          uint64_t v17 = &v73;
          uint64_t v18 = (char *)v79;
          if (v80 >= v81)
          {
            unint64_t v58 = v80 + 1;
            if (v79 <= &v73 && (char *)v79 + 24 * v80 > (char *)&v73)
            {
              int64_t v66 = (char *)&v73 - (unsigned char *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              uint64_t v18 = (char *)v79;
              uint64_t v17 = (const void ***)((char *)v79 + v66);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
              uint64_t v17 = &v73;
              uint64_t v18 = (char *)v79;
            }
          }
          unint64_t v19 = &v18[24 * v80];
          long long v20 = *(_OWORD *)v17;
          *((void *)v19 + 2) = v17[2];
          *(_OWORD *)unint64_t v19 = v20;
          ++v80;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v77);
    if (v77) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
    }
    if (v87)
    {
      long long v21 = (void **)__p;
      if (__p)
      {
        int64_t v22 = v86;
        uint64_t v23 = __p;
        if (v86 != __p)
        {
          do
            int64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        unsigned int v86 = v21;
        operator delete(v23);
      }
      uint64_t v24 = v83;
      if (!v83) {
        goto LABEL_54;
      }
      uint64_t v25 = v84;
      unsigned int v26 = v83;
      if (v84 == v83) {
        goto LABEL_53;
      }
      do
      {
        unsigned int v28 = (void *)*--v25;
        unsigned int v27 = v28;
        *uint64_t v25 = 0;
        if (v28) {
          operator delete[](v27);
        }
      }
      while (v25 != v24);
      goto LABEL_52;
    }
  }
  return v12;
}

uint64_t mlir::DenseElementsAttr::AttributeElementIterator::operator*(void *a1)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  *(_OWORD *)std::string __p = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  unint64_t v4 = (void *)OperandRange;
  unsigned int v5 = *(void **)(*(void *)OperandRange + 136);
  if (OperandRange && v5 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    uint64_t v27 = a1[1];
    uint64_t v28 = *(void *)(v2 + 32);
    int v29 = *(unsigned __int8 *)(v2 + 24);
    *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 8);
    uint64_t v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(v30);
    if (v29) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v27;
    }
    unint64_t v33 = DenseElementBitWidth + 7;
    unint64_t v34 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (DenseElementBitWidth == 1) {
      unint64_t v34 = 1;
    }
    unint64_t v35 = v34 * v32;
    if (DenseElementBitWidth == 1)
    {
      long long v36 = (void *)((*(unsigned __int8 *)(v28 + (v35 >> 3)) >> (v35 & 7)) & 1);
      LODWORD(__p[1]) = 1;
      __p[0] = v36;
      goto LABEL_57;
    }
    LODWORD(__p[1]) = DenseElementBitWidth;
    if (DenseElementBitWidth > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
      if (LODWORD(__p[1]) >= 0x41) {
        unint64_t v37 = (void **)__p[0];
      }
      else {
        unint64_t v37 = __p;
      }
      if (v33 < 8)
      {
LABEL_57:
        v92[0] = v4;
        BOOL isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)v92, 1);
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v92);
        long long v40 = Context;
        if (isSignlessInteger)
        {
          int v41 = (int)__p[1];
          if (LODWORD(__p[1]) > 0x40) {
            BOOL v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) == v41;
          }
          else {
            BOOL v42 = __p[0] == 0;
          }
          int v43 = v42;
          uint64_t v25 = (llvm::APFloatBase *)mlir::BoolAttr::get(v40, (mlir::MLIRContext *)(v43 ^ 1u));
          if (LODWORD(__p[1]) < 0x41) {
            return (uint64_t)v25;
          }
        }
        else
        {
          uint64_t v25 = (llvm::APFloatBase *)mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)v92, (uint64_t)__p);
          if (LODWORD(__p[1]) < 0x41) {
            return (uint64_t)v25;
          }
        }
        goto LABEL_67;
      }
    }
    else
    {
      __p[0] = 0;
      unint64_t v37 = __p;
      if (v33 < 8) {
        goto LABEL_57;
      }
    }
    memmove(v37, (const void *)(v28 + (v35 >> 3)), v33 >> 3);
    goto LABEL_57;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    *(void *)&long long v98 = OperandRange;
    if (OperandRange)
    {
      uint64_t v17 = (void *)a1[1];
      uint64_t v18 = *(void **)(v2 + 32);
      unint64_t v19 = (void *)*(unsigned __int8 *)(v2 + 24);
      *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 8);
      uint64_t v20 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
      unint64_t v21 = mlir::detail::getDenseElementBitWidth(v20);
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v98);
      __p[0] = v18;
      __p[1] = v19;
      uint64_t v88 = v17;
      unint64_t v89 = v21;
      uint64_t v90 = FloatSemantics;
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(__p, (uint64_t)v92);
      *(void *)&long long v83 = v4;
      uint64_t v23 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v83);
      AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v23);
      *(void *)&long long v95 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      *((void *)&v95 + 1) = v23;
      uint64_t v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v95, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t *)&v83, (uint64_t)v92);
      unsigned int v26 = v92[1];
      if (llvm::APFloatBase::PPCDoubleDouble(v25) == v26) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v92[1]);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v92[1]);
      }
      return (uint64_t)v25;
    }
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v44 = OperandRange;
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v85 = v44;
  if (!v44)
  {
    uint64_t v53 = *(void *)(v2 + 32);
    if (!*(unsigned char *)(v2 + 24)) {
      v53 += 16 * a1[1];
    }
    LOWORD(v90) = 261;
    uint64_t v55 = *(void **)v53;
    unsigned int v54 = *(void **)(v53 + 8);
    __p[0] = v55;
    __p[1] = v54;
    return mlir::StringAttr::get((char **)__p, OperandRange);
  }
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  uint64_t v46 = a1[1];
  uint64_t v47 = *(unsigned __int8 *)(v2 + 24);
  *(void *)&long long v83 = *(void *)(v2 + 32);
  *((void *)&v83 + 1) = v47;
  *(void *)&long long v84 = v46;
  *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 8);
  __p[0] = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  uint64_t v48 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
  *((void *)&v84 + 1) = mlir::detail::getDenseElementBitWidth(v48);
  if (*(_UNKNOWN **)(*(void *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    __p[0] = Value;
    long long v49 = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)__p);
    *(_OWORD *)int v92 = v83;
    long long v93 = v84;
    int v94 = v49;
    mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)v92, &v95);
    mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v95, (llvm::APFloatBase *)v92, (uint64_t)__p);
    if (v97 >= 0x41)
    {
      uint64_t v50 = v96;
      if (v96) {
        operator delete[](v96);
      }
    }
    if (DWORD2(v95) >= 0x41)
    {
      uint64_t v50 = (llvm::APFloatBase *)v95;
      if ((void)v95) {
        operator delete[]((void *)v95);
      }
    }
    int v51 = __p[1];
    uint64_t v52 = llvm::APFloatBase::PPCDoubleDouble(v50);
    if (v52 == v51) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8), (const llvm::detail::DoubleAPFloat *)&__p[1]);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8), (const llvm::detail::IEEEFloat *)&__p[1]);
    }
    v86[0] = (uint64_t)Value;
    uint64_t v56 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v86);
    unint64_t v57 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v56);
    *(void *)&long long v98 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    *((void *)&v98 + 1) = v56;
    uint64_t v58 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v57, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v98, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v86, (uint64_t)&v95);
    if (v52 == *((void **)&v95 + 1)) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8));
    }
    if (v52 == (void *)v91[0]) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8), (const llvm::detail::DoubleAPFloat *)v91);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8), (const llvm::detail::IEEEFloat *)v91);
    }
    v86[0] = (uint64_t)Value;
    unint64_t v59 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v86);
    unint64_t v60 = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(v59);
    *(void *)&long long v98 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    *((void *)&v98 + 1) = v59;
    uint64_t v61 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(v60, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)&v98, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, v86, (uint64_t)&v95);
    if (v52 == *((void **)&v95 + 1)) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v95 + 8));
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v95 + 8));
    }
    unint64_t v62 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v85);
    v86[0] = v58;
    v86[1] = v61;
    *(void *)&long long v98 = v86;
    *((void *)&v98 + 1) = 2;
    unint64_t v63 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v62);
    *(void *)&long long v95 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
    *((void *)&v95 + 1) = v62;
    uint64_t v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v63, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)&v95, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v98);
    if (v52 == (void *)v91[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
      if (v52 != __p[1]) {
        goto LABEL_100;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
      if (v52 != __p[1])
      {
LABEL_100:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
        return (uint64_t)v25;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p[1]);
    return (uint64_t)v25;
  }
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v83, __p);
  LODWORD(v92[1]) = __p[1];
  if (LODWORD(__p[1]) > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)v92, (const void **)__p);
  }
  else {
    v92[0] = __p[0];
  }
  *(void *)&long long v95 = Value;
  BOOL v64 = mlir::Type::isSignlessInteger((mlir::Type *)&v95, 1);
  int64_t v65 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v95);
  int64_t v66 = v65;
  if (v64)
  {
    int v67 = (int)v92[1];
    if (LODWORD(v92[1]) > 0x40) {
      BOOL v68 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v92) == v67;
    }
    else {
      BOOL v68 = v92[0] == 0;
    }
    int v70 = v68;
    uint64_t v69 = mlir::BoolAttr::get(v66, (mlir::MLIRContext *)(v70 ^ 1u));
  }
  else
  {
    uint64_t v69 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v65, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v95, (uint64_t)v92);
  }
  uint64_t v71 = v69;
  if (LODWORD(v92[1]) >= 0x41 && v92[0]) {
    operator delete[](v92[0]);
  }
  LODWORD(v92[1]) = v89;
  if (v89 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)v92, (const void **)&v88);
  }
  else {
    v92[0] = v88;
  }
  *(void *)&long long v95 = Value;
  BOOL v72 = mlir::Type::isSignlessInteger((mlir::Type *)&v95, 1);
  unint64_t v73 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v95);
  int v74 = v73;
  if (v72)
  {
    int v75 = (int)v92[1];
    if (LODWORD(v92[1]) > 0x40) {
      BOOL v76 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v92) == v75;
    }
    else {
      BOOL v76 = v92[0] == 0;
    }
    int v78 = v76;
    uint64_t v77 = mlir::BoolAttr::get(v74, (mlir::MLIRContext *)(v78 ^ 1u));
  }
  else
  {
    uint64_t v77 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(v73, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t *)&v95, (uint64_t)v92);
  }
  uint64_t v79 = v77;
  if (LODWORD(v92[1]) >= 0x41 && v92[0]) {
    operator delete[](v92[0]);
  }
  unsigned int v80 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v85);
  *(void *)&long long v98 = v71;
  *((void *)&v98 + 1) = v79;
  *(void *)&long long v95 = &v98;
  *((void *)&v95 + 1) = 2;
  unsigned int v81 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v80);
  v92[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v92[1] = v80;
  uint64_t v25 = (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(v81, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v92, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v95);
  if (v89 >= 0x41 && v88) {
    operator delete[](v88);
  }
  if (LODWORD(__p[1]) >= 0x41)
  {
LABEL_67:
    if (__p[0]) {
      operator delete[](__p[0]);
    }
  }
  return (uint64_t)v25;
}

uint64_t mlir::DenseElementsAttr::getElementType(mlir::DenseElementsAttr *this)
{
  long long v2 = *(_OWORD *)(*(void *)this + 8);
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v2);
}

void *mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 24);
  *a1 = *(void *)(a2 + 32);
  a1[1] = v4;
  a1[2] = a3;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v7);
  a1[3] = mlir::detail::getDenseElementBitWidth(OperandRange);
  return a1;
}

void mlir::DenseElementsAttr::IntElementIterator::operator*(uint64_t *a1@<X0>, llvm::APInt *a2@<X8>)
{
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = a1[2];
  }
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = v5 + 7;
  unint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1) {
    unint64_t v7 = 1;
  }
  unint64_t v8 = v7 * v3;
  if (v5 == 1)
  {
    uint64_t v9 = (*(unsigned __int8 *)(v4 + (v8 >> 3)) >> (v8 & 7)) & 1;
    *((_DWORD *)a2 + 2) = 1;
    *(void *)a2 = v9;
    return;
  }
  *((_DWORD *)a2 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(void *)a2 = 0;
    if (v6 < 8) {
      return;
    }
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a2, 0, 0);
  if (*((_DWORD *)a2 + 2) >= 0x41u) {
    a2 = *(llvm::APInt **)a2;
  }
  if (v6 >= 8)
  {
LABEL_10:
    memmove(a2, (const void *)(v4 + (v8 >> 3)), v6 >> 3);
  }
}

void llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(void *p_p@<X0>, uint64_t a2@<X8>)
{
  long long v2 = p_p;
  if (*((unsigned char *)p_p + 8)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = p_p[2];
  }
  uint64_t v5 = *p_p;
  uint64_t v6 = p_p[3];
  unint64_t v7 = v6 + 7;
  unint64_t v8 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 == 1) {
    unint64_t v8 = 1;
  }
  unint64_t v9 = v8 * v4;
  if (v6 == 1)
  {
    unint64_t v10 = (void *)((*(unsigned __int8 *)(v5 + (v9 >> 3)) >> (v9 & 7)) & 1);
    unsigned int v14 = 1;
    std::string __p = v10;
    goto LABEL_16;
  }
  unsigned int v14 = p_p[3];
  if (v6 <= 0x40)
  {
    std::string __p = 0;
    p_p = &__p;
    if (v7 < 8) {
      goto LABEL_16;
    }
LABEL_15:
    p_p = memmove(p_p, (const void *)(v5 + (v9 >> 3)), v7 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  if (v14 >= 0x41) {
    p_p = __p;
  }
  else {
    p_p = &__p;
  }
  if (v7 >= 8) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v11 = (void *)v2[4];
  uint64_t v12 = (llvm::detail::IEEEFloat *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)p_p) == v11)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)v11, (uint64_t)&__p);
    if (v14 < 0x41) {
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat(v12, v11, (const llvm::APInt **)&__p);
    if (v14 < 0x41) {
      return;
    }
  }
  if (__p) {
    operator delete[](__p);
  }
}

void mlir::DenseElementsAttr::ComplexIntElementIterator::operator*(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = v4 + 7;
  if (v4 == 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (*((unsigned char *)a1 + 8))
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a1;
    if (v4 == 1)
    {
LABEL_6:
      unint64_t v9 = (void *)((*(unsigned __int8 *)(v8 + (v7 >> 3)) >> (v7 & 6)) & 1);
      unsigned int v24 = 1;
      uint64_t v23 = v9;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = 2 * v6 * a1[2];
    uint64_t v8 = *a1;
    if (v4 == 1) {
      goto LABEL_6;
    }
  }
  unsigned int v24 = a1[3];
  if (v4 <= 0x40)
  {
    uint64_t v23 = 0;
    unint64_t v10 = &v23;
    if (v5 < 8) {
      goto LABEL_16;
    }
LABEL_15:
    memmove(v10, (const void *)(v8 + (v7 >> 3)), v5 >> 3);
    goto LABEL_16;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v23, 0, 0);
  if (v24 >= 0x41) {
    unint64_t v10 = v23;
  }
  else {
    unint64_t v10 = &v23;
  }
  if (v5 >= 8) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v11 = *a1;
  unint64_t v12 = v7 + v6;
  uint64_t v13 = a1[3];
  if (v13 == 1)
  {
    unsigned int v14 = (void *)((*(unsigned __int8 *)(v11 + (v12 >> 3)) >> (v12 & 7)) & 1);
    unsigned int v22 = 1;
    std::string __p = v14;
    goto LABEL_26;
  }
  unsigned int v22 = v13;
  if (v13 <= 0x40)
  {
    std::string __p = 0;
    p_p = &__p;
    unint64_t v16 = v13 + 7;
    if ((unint64_t)(v13 + 7) < 8) {
      goto LABEL_26;
    }
LABEL_25:
    memmove(p_p, (const void *)(v11 + (v12 >> 3)), v16 >> 3);
    goto LABEL_26;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  if (v22 >= 0x41) {
    p_p = __p;
  }
  else {
    p_p = &__p;
  }
  unint64_t v16 = v13 + 7;
  if ((unint64_t)(v13 + 7) >= 8) {
    goto LABEL_25;
  }
LABEL_26:
  unsigned int v17 = v24;
  a2[2] = v24;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)&v23);
    uint64_t v18 = (llvm::APInt *)(a2 + 4);
    unsigned int v20 = v22;
    a2[6] = v22;
    if (v20 > 0x40) {
      goto LABEL_28;
    }
LABEL_32:
    *(void *)uint64_t v18 = __p;
    goto LABEL_33;
  }
  *(void *)a2 = v23;
  uint64_t v18 = (llvm::APInt *)(a2 + 4);
  unsigned int v19 = v22;
  a2[6] = v22;
  if (v19 <= 0x40) {
    goto LABEL_32;
  }
LABEL_28:
  llvm::APInt::initSlowCase(v18, (const void **)&__p);
  if (v22 >= 0x41 && __p) {
    operator delete[](__p);
  }
LABEL_33:
  if (v24 >= 0x41)
  {
    if (v23) {
      operator delete[](v23);
    }
  }
}

uint64_t mlir::DenseElementsAttr::getRawStringData(mlir::DenseElementsAttr *this)
{
  return *(void *)(*(void *)this + 32);
}

uint64_t mlir::DenseElementsAttr::isSplat(mlir::DenseElementsAttr *this)
{
  return *(unsigned __int8 *)(*(void *)this + 24);
}

unint64_t mlir::detail::getDenseElementBitWidth(uint64_t a1)
{
  uint64_t v5 = a1;
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v4 = v1;
  if (v1)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v4);
    return (2 * mlir::detail::getDenseElementBitWidth(Value) + 14) & 0xFFFFFFFFFFFFFFF0;
  }
  else if (mlir::Type::isIndex((mlir::Type *)&v5))
  {
    return 64;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v5);
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<BOOL>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = mlir::IntegerType::get((uint64_t)a1, 1u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  uint64_t v13 = v6;
  uint64_t v14 = a3;
  v15[0] = a2;
  v15[1] = a3;
  unsigned int v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<int>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = mlir::IntegerType::get((uint64_t)a1, 0x20u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  uint64_t v13 = v6;
  uint64_t v14 = a3;
  v15[0] = a2;
  v15[1] = 4 * a3;
  unsigned int v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

BOOL mlir::detail::DenseArrayAttrImpl<int>::classof(void *a1)
{
  BOOL result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    uint64_t v3 = a1[1];
    if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 32
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 24);
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = mlir::IntegerType::get((uint64_t)a1, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v10[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  uint64_t v13 = v6;
  uint64_t v14 = a3;
  v15[0] = a2;
  v15[1] = 8 * a3;
  unsigned int v8 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v13, &v14, (uint64_t)v15);
  v11[0] = &v13;
  v11[1] = v16;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v3 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);

  return mlir::detail::DenseArrayAttrImpl<long long>::print(a1, v3);
}

llvm::raw_ostream *mlir::detail::DenseArrayAttrImpl<long long>::print(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  uint64_t v3 = result;
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    BOOL result = llvm::raw_ostream::write(this, "[", 1uLL);
    uint64_t v5 = *(void *)v3;
    unint64_t v6 = *(void *)(*(void *)v3 + 32);
    if (v6 < 8) {
      goto LABEL_10;
    }
  }
  else
  {
    *uint64_t v4 = 91;
    ++*((void *)this + 4);
    uint64_t v5 = *(void *)result;
    unint64_t v6 = *(void *)(*(void *)result + 32);
    if (v6 < 8) {
      goto LABEL_10;
    }
  }
  unint64_t v7 = *(unint64_t **)(v5 + 24);
  unint64_t v8 = v6 >> 3;
  BOOL result = llvm::raw_ostream::operator<<(this, *v7);
  if (v8 != 1)
  {
    unint64_t v9 = v7 + 1;
    uint64_t v10 = 8 * v8 - 8;
    do
    {
      while (1)
      {
        unint64_t v12 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v12 <= 1uLL) {
          break;
        }
        *unint64_t v12 = 8236;
        *((void *)this + 4) += 2;
        unint64_t v11 = *v9++;
        BOOL result = llvm::raw_ostream::operator<<(this, v11);
        v10 -= 8;
        if (!v10) {
          goto LABEL_10;
        }
      }
      llvm::raw_ostream::write(this, ", ", 2uLL);
      unint64_t v13 = *v9++;
      BOOL result = llvm::raw_ostream::operator<<(this, v13);
      v10 -= 8;
    }
    while (v10);
  }
LABEL_10:
  uint64_t v14 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v14)
  {
    return llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    *uint64_t v14 = 93;
    ++*((void *)this + 4);
  }
  return result;
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parse(mlir::AsmParser *a1)
{
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 296))(a1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 320))(a1))
  {
    Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
    uint64_t v3 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
    v8[1] = Context;
    v14[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
    v14[1] = v8;
    uint64_t v11 = v3;
    uint64_t v12 = 0;
    v13[0] = 0;
    v13[1] = 0;
    unsigned int v5 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v11, &v12, (uint64_t)v13);
    v9[0] = &v11;
    v9[1] = v14;
    uint64_t v10 = &v11;
    return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
  }
  else
  {
    uint64_t v7 = mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(a1);
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 312))(a1)) {
      return v7;
    }
    else {
      return 0;
    }
  }
}

uint64_t mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser *a1)
{
  v20[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  uint64_t v14 = (uint64_t)a1;
  unsigned int v15 = &v18;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 360))())
  {
    uint64_t ParametricStorageTypeImpl = 0;
    unint64_t v9 = v18;
    if (v18 == v20) {
      return ParametricStorageTypeImpl;
    }
    goto LABEL_3;
  }
  Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  uint64_t v3 = v18;
  uint64_t v4 = (void **)v19;
  uint64_t v5 = mlir::IntegerType::get((uint64_t)Context, 0x40u, 0);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v11[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v17[1] = v11;
  uint64_t v14 = v5;
  unsigned int v15 = v4;
  v16[0] = v3;
  v16[1] = 8 * (void)v4;
  unsigned int v7 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v14, (uint64_t *)&v15, (uint64_t)v16);
  v12[0] = &v14;
  v12[1] = v17;
  unint64_t v13 = &v14;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
  unint64_t v9 = v18;
  if (v18 != v20) {
LABEL_3:
  }
    free(v9);
  return ParametricStorageTypeImpl;
}

BOOL mlir::detail::DenseArrayAttrImpl<long long>::classof(void *a1)
{
  BOOL result = 0;
  if (a1 && *(_UNKNOWN **)(*a1 + 136) == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    uint64_t v3 = a1[1];
    if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3;
    return v3
        && mlir::IntegerType::getWidth((mlir::IntegerType *)&v4) == 64
        && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
  }
  return result;
}

BOOL mlir::DenseElementsAttr::classof(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)a1 + 136);
  return v1 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  void v91[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v81 = a1;
  *((void *)&v81 + 1) = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v81);
  uint64_t v80 = OperandRange;
  if (*(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v7 = OperandRange;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v79 = v7;
  if (!v7)
  {
    if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)&v80))
    {
      DenseElementBitunsigned int Width = (llvm::APFloatBase *)mlir::detail::getDenseElementBitWidth(v80);
      if (DenseElementBitWidth == (llvm::APFloatBase *)1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = ((unint64_t)DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v11 = v10 * a4 + 7;
      uint64_t Value = v84;
      long long v83 = xmmword_1810FF9F0;
      if (v11 < 8) {
        goto LABEL_113;
      }
      size_t v12 = v11 >> 3;
      if (v11 < 0x48)
      {
        uint64_t v13 = 0;
        size_t v14 = v12;
        if (!v12)
        {
LABEL_112:
          *(void *)&long long v83 = v12;
LABEL_113:
          *(void *)&long long v76 = v84;
          DWORD2(v87[0]) = 1;
          *(void *)&v87[0] = 0;
          uint64_t v63 = a4;
          if (!a4)
          {
LABEL_151:
            if (a4 == 1 && mlir::Type::isInteger((mlir::Type *)&v80, 1))
            {
              if (*(unsigned char *)Value) {
                char v74 = -1;
              }
              else {
                char v74 = 0;
              }
              *(unsigned char *)uint64_t Value = v74;
            }
            uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v81, *((uint64_t *)&v81 + 1), (unsigned __int8 *)Value, v83);
            if (DWORD2(v87[0]) >= 0x41 && *(void *)&v87[0]) {
              operator delete[](*(void **)&v87[0]);
            }
            unint64_t v57 = Value;
            if (Value == (void *)v76) {
              return Raw;
            }
LABEL_161:
            free(v57);
            return Raw;
          }
          unint64_t v64 = 0;
          while (1)
          {
            uint64_t v65 = *a3;
            if (*(_UNKNOWN **)(*(void *)*a3 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              int64_t v66 = (const void **)(v65 + 16);
              DWORD2(v88) = *(_DWORD *)(v65 + 24);
              if (DWORD2(v88) > 0x40)
              {
                DenseElementBitunsigned int Width = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v88, v66);
                if (DWORD2(v87[0]) < 0x41) {
                  goto LABEL_127;
                }
              }
              else
              {
                *(void *)&long long v88 = *v66;
                if (DWORD2(v87[0]) < 0x41) {
                  goto LABEL_127;
                }
              }
              DenseElementBitunsigned int Width = *(llvm::APFloatBase **)&v87[0];
              if (*(void *)&v87[0]) {
                operator delete[](*(void **)&v87[0]);
              }
LABEL_127:
              *(void *)&v87[0] = v88;
              unint64_t v70 = DWORD2(v88);
              DWORD2(v87[0]) = DWORD2(v88);
              uint64_t v71 = Value;
              unsigned int v78 = DWORD2(v88);
              if (DWORD2(v88) <= 0x40uLL) {
                goto LABEL_135;
              }
              goto LABEL_143;
            }
            BOOL v68 = *(void **)(v65 + 24);
            int v67 = (const llvm::detail::DoubleAPFloat *)(v65 + 24);
            uint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(DenseElementBitWidth);
            if (v69 == v68)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), v67);
              if (v69 != *((void **)&v88 + 1))
              {
LABEL_122:
                llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)((char *)&v88 + 8), (uint64_t)&__p);
                if (DWORD2(v87[0]) < 0x41) {
                  goto LABEL_133;
                }
                goto LABEL_131;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), v67);
              if (v69 != *((void **)&v88 + 1)) {
                goto LABEL_122;
              }
            }
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), (llvm::APInt *)&__p);
            if (DWORD2(v87[0]) < 0x41) {
              goto LABEL_133;
            }
LABEL_131:
            if (*(void *)&v87[0]) {
              operator delete[](*(void **)&v87[0]);
            }
LABEL_133:
            *(void *)&v87[0] = __p;
            DWORD2(v87[0]) = v86[0];
            LODWORD(v86[0]) = 0;
            if (v69 == *((void **)&v88 + 1))
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
              uint64_t v71 = Value;
              unsigned int v78 = DWORD2(v87[0]);
              unint64_t v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL)
              {
LABEL_135:
                __src = *(void **)&v87[0];
                if (v70 != 1) {
                  goto LABEL_136;
                }
                goto LABEL_144;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
              uint64_t v71 = Value;
              unsigned int v78 = DWORD2(v87[0]);
              unint64_t v70 = DWORD2(v87[0]);
              if (DWORD2(v87[0]) <= 0x40uLL) {
                goto LABEL_135;
              }
            }
LABEL_143:
            DenseElementBitunsigned int Width = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v87);
            unint64_t v70 = v78;
            if (v78 != 1)
            {
LABEL_136:
              if (v70 >= 0x41)
              {
                p_src = __src;
LABEL_140:
                DenseElementBitunsigned int Width = (llvm::APFloatBase *)memmove(&v71[v64 >> 3], p_src, (v70 + 7) >> 3);
                if (v78 >= 0x41) {
                  goto LABEL_149;
                }
                goto LABEL_115;
              }
              if (v70)
              {
                p_src = &__src;
                goto LABEL_140;
              }
              goto LABEL_146;
            }
LABEL_144:
            int v73 = 1 << (v64 & 7);
            if (__src == (void *)1)
            {
              v71[v64 >> 3] |= v73;
LABEL_146:
              if (v78 >= 0x41) {
                goto LABEL_149;
              }
              goto LABEL_115;
            }
            v71[v64 >> 3] &= ~(_BYTE)v73;
            if (v78 >= 0x41)
            {
LABEL_149:
              DenseElementBitunsigned int Width = (llvm::APFloatBase *)__src;
              if (__src) {
                operator delete[](__src);
              }
            }
LABEL_115:
            v64 += v10;
            ++a3;
            if (!--v63) {
              goto LABEL_151;
            }
          }
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&Value, v84, v11 >> 3, 1);
        uint64_t v13 = v83;
        size_t v14 = v12 - v83;
        if (v12 == (void)v83) {
          goto LABEL_112;
        }
      }
      bzero((char *)Value + v13, v14);
      goto LABEL_112;
    }
    uint64_t Value = (char *)&v83 + 8;
    *(void *)&long long v83 = 0x800000000;
    if (a4 < 9)
    {
      unsigned int v17 = 0;
      unsigned int v58 = 0;
      if (!a4) {
        goto LABEL_108;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, a4, 16);
      unsigned int v17 = v83;
    }
    uint64_t v59 = 8 * a4;
    unsigned int v58 = v17;
    do
    {
      long long v60 = *(_OWORD *)(*a3 + 16);
      if (v58 >= DWORD1(v83))
      {
        long long v76 = *(_OWORD *)(*a3 + 16);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, (char *)&v83 + 8, v58 + 1, 16);
        long long v60 = v76;
        unsigned int v58 = v83;
      }
      *((_OWORD *)Value + v58) = v60;
      unsigned int v58 = v83 + 1;
      LODWORD(v83) = v83 + 1;
      ++a3;
      v59 -= 8;
    }
    while (v59);
LABEL_108:
    v87[0] = v81;
    std::string __p = Value;
    v86[0] = v58;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v87);
    LOBYTE(v79) = v58 == 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
    *(void *)&long long v88 = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
    *((void *)&v88 + 1) = Context;
    uint64_t Raw = mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v88, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v87, (uint64_t)&__p, (unsigned __int8 *)&v79);
    unint64_t v57 = Value;
    if (Value == (char *)&v83 + 8) {
      return Raw;
    }
    goto LABEL_161;
  }
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
  isIntOrIndex = (llvm::APFloatBase *)mlir::Type::isIntOrIndex((mlir::Type *)&Value);
  if (!isIntOrIndex)
  {
    uint64_t Value = (char *)&v83 + 8;
    *(void *)&long long v83 = 0x100000000;
    if (a4 < 2)
    {
      unint64_t v39 = (char *)&v83 + 8;
      if (!a4) {
        goto LABEL_89;
      }
    }
    else
    {
      *(void *)&long long v88 = 0;
      unsigned int v15 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&Value, (char *)&v83 + 8, a4, 64, (unint64_t *)&v88);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow((unsigned int *)&Value, (uint64_t)v15);
      int v16 = v88;
      isIntOrIndex = (llvm::APFloatBase *)Value;
      if (Value != (char *)&v83 + 8) {
        free(Value);
      }
      uint64_t Value = v15;
      DWORD1(v83) = v16;
    }
    long long v40 = llvm::APFloatBase::PPCDoubleDouble(isIntOrIndex);
    uint64_t v41 = 8 * a4;
    while (1)
    {
      BOOL v42 = *(void **)(*a3 + 8);
      uint64_t v43 = v42[1];
      uint64_t v44 = (const llvm::detail::DoubleAPFloat *)(*v42 + 24);
      if (v40 == *(void **)v44)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)v87 + 8), v44);
        uint64_t v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24))
        {
LABEL_72:
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v86, v45);
          if (v40 != *((void **)&v87[0] + 1)) {
            goto LABEL_73;
          }
          goto LABEL_77;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8), v44);
        uint64_t v45 = (const llvm::detail::IEEEFloat *)(v43 + 24);
        if (v40 != *(void **)(v43 + 24)) {
          goto LABEL_72;
        }
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v86, v45);
      if (v40 != *((void **)&v87[0] + 1))
      {
LABEL_73:
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8), (const llvm::detail::IEEEFloat *)((char *)v87 + 8));
        if (v40 == (void *)v86[0]) {
          goto LABEL_78;
        }
        goto LABEL_74;
      }
LABEL_77:
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8), (const llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
      if (v40 == (void *)v86[0])
      {
LABEL_78:
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91, (const llvm::detail::DoubleAPFloat *)v86);
        goto LABEL_79;
      }
LABEL_74:
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, (const llvm::detail::IEEEFloat *)v86);
LABEL_79:
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back((unsigned int *)&Value, (unint64_t)&v88);
      if (v40 == (void *)v91[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
        if (v40 == *((void **)&v88 + 1)) {
          goto LABEL_85;
        }
LABEL_81:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v88 + 8));
        if (v40 != (void *)v86[0]) {
          goto LABEL_82;
        }
LABEL_86:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v86);
        if (v40 != *((void **)&v87[0] + 1)) {
          goto LABEL_87;
        }
LABEL_69:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41) {
          goto LABEL_88;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
        if (v40 != *((void **)&v88 + 1)) {
          goto LABEL_81;
        }
LABEL_85:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v88 + 8));
        if (v40 == (void *)v86[0]) {
          goto LABEL_86;
        }
LABEL_82:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v86);
        if (v40 == *((void **)&v87[0] + 1)) {
          goto LABEL_69;
        }
LABEL_87:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)v87 + 8));
        ++a3;
        v41 -= 8;
        if (!v41)
        {
LABEL_88:
          unint64_t v39 = (char *)Value;
LABEL_89:
          uint64_t v46 = v83;
          long long v88 = v81;
          uint64_t v47 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
          uint64_t v48 = 2 * v46;
          unint64_t v49 = mlir::detail::getDenseElementBitWidth(v47);
          if (v49 == 1) {
            unint64_t v50 = 0;
          }
          else {
            unint64_t v50 = ((v49 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
          }
          int v51 = (llvm::APFloatBase *)mlir::DenseIntOrFPElementsAttr::getRaw((llvm::APFloatBase *)v88, *((uint64_t *)&v88 + 1), v50, (uint64_t)v39, v48);
          uint64_t Raw = (uint64_t)v51;
          unint64_t v34 = Value;
          uint64_t v52 = v83;
          if (!v83)
          {
LABEL_101:
            if (v34 == (long long *)((char *)&v83 + 8)) {
              return Raw;
            }
            goto LABEL_102;
          }
          uint64_t v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
          uint64_t v54 = v52 << 6;
          while (1)
          {
            uint64_t v55 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 24);
            if (v53 == *(void **)v55)
            {
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v55);
              uint64_t v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56)
              {
LABEL_94:
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v56);
                v54 -= 64;
                if (!v54) {
                  goto LABEL_100;
                }
                continue;
              }
            }
            else
            {
              llvm::detail::IEEEFloat::~IEEEFloat(v55);
              uint64_t v56 = (llvm::detail::DoubleAPFloat *)((char *)v34 + v54 - 56);
              if (v53 == *(void **)v56) {
                goto LABEL_94;
              }
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v56);
            v54 -= 64;
            if (!v54)
            {
LABEL_100:
              unint64_t v34 = Value;
              goto LABEL_101;
            }
          }
        }
      }
    }
  }
  uint64_t Value = (char *)&v83 + 8;
  *(void *)&long long v83 = 0x100000000;
  if (a4 >= 2)
  {
    llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, a4);
LABEL_23:
    uint64_t v18 = 8 * a4;
    while (1)
    {
      uint64_t v19 = *(void **)(*a3 + 8);
      uint64_t v20 = v19[1];
      unint64_t v21 = (const void **)(*v19 + 16);
      DWORD2(v87[0]) = *(_DWORD *)(*v19 + 24);
      if (DWORD2(v87[0]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v87, v21);
        unsigned int v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40)
        {
LABEL_27:
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v22);
          DWORD2(v88) = DWORD2(v87[0]);
          if (DWORD2(v87[0]) > 0x40) {
            goto LABEL_28;
          }
          goto LABEL_32;
        }
      }
      else
      {
        *(void *)&v87[0] = *v21;
        unsigned int v22 = (const void **)(v20 + 16);
        LODWORD(v86[0]) = *(_DWORD *)(v20 + 24);
        if (LODWORD(v86[0]) > 0x40) {
          goto LABEL_27;
        }
      }
      std::string __p = (void *)*v22;
      DWORD2(v88) = DWORD2(v87[0]);
      if (DWORD2(v87[0]) > 0x40)
      {
LABEL_28:
        llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const void **)v87);
        unsigned int v90 = v86[0];
        if (LODWORD(v86[0]) <= 0x40) {
          goto LABEL_33;
        }
        goto LABEL_29;
      }
LABEL_32:
      *(void *)&long long v88 = *(void *)&v87[0];
      unsigned int v90 = v86[0];
      if (LODWORD(v86[0]) <= 0x40)
      {
LABEL_33:
        unint64_t v89 = __p;
        goto LABEL_34;
      }
LABEL_29:
      llvm::APInt::initSlowCase((llvm::APInt *)&v89, (const void **)&__p);
LABEL_34:
      uint64_t v23 = (char *)Value;
      if (v83 >= DWORD1(v83))
      {
        unint64_t v26 = v83 + 1;
        if (Value <= &v88 && (char *)Value + 32 * v83 > (char *)&v88)
        {
          int64_t v27 = (char *)&v88 - (unsigned char *)Value;
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          uint64_t v23 = (char *)Value;
          unsigned int v24 = (char *)Value + v27;
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow((uint64_t)&Value, v26);
          unsigned int v24 = (char *)&v88;
          uint64_t v23 = (char *)Value;
        }
      }
      else
      {
        unsigned int v24 = (char *)&v88;
      }
      uint64_t v25 = &v23[32 * v83];
      *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
      *(void *)uint64_t v25 = *(void *)v24;
      *((_DWORD *)v24 + 2) = 0;
      *((_DWORD *)v25 + 6) = *((_DWORD *)v24 + 6);
      *((void *)v25 + 2) = *((void *)v24 + 2);
      *((_DWORD *)v24 + 6) = 0;
      LODWORD(v83) = v83 + 1;
      if (v90 >= 0x41 && v89) {
        operator delete[](v89);
      }
      if (DWORD2(v88) >= 0x41 && (void)v88) {
        operator delete[]((void *)v88);
      }
      if (LODWORD(v86[0]) >= 0x41 && __p) {
        operator delete[](__p);
      }
      if (DWORD2(v87[0]) >= 0x41 && *(void *)&v87[0]) {
        operator delete[](*(void **)&v87[0]);
      }
      ++a3;
      v18 -= 8;
      if (!v18) {
        goto LABEL_52;
      }
    }
  }
  if (a4) {
    goto LABEL_23;
  }
LABEL_52:
  uint64_t v28 = (llvm::APInt *)Value;
  uint64_t v29 = v83;
  long long v88 = v81;
  uint64_t v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v88);
  unint64_t v31 = mlir::detail::getDenseElementBitWidth(v30);
  if (v31 == 1) {
    unint64_t v32 = 0;
  }
  else {
    unint64_t v32 = ((v31 + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  }
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v88, *((uint64_t *)&v88 + 1), v32, v28, 2 * v29);
  unint64_t v34 = Value;
  if (v83)
  {
    uint64_t v35 = 2 * v83;
    do
    {
      long long v36 = &v34[v35];
      if (DWORD2(v34[v35 - 1]) >= 0x41)
      {
        unint64_t v37 = (void *)*((void *)v36 - 2);
        if (v37) {
          operator delete[](v37);
        }
      }
      if (*((_DWORD *)v36 - 6) >= 0x41u)
      {
        unint64_t v38 = (void *)*((void *)v36 - 4);
        if (v38) {
          operator delete[](v38);
        }
      }
      v35 -= 2;
    }
    while (v35 * 16);
    unint64_t v34 = Value;
  }
  if (v34 != (long long *)((char *)&v83 + 8))
  {
LABEL_102:
    unint64_t v57 = v34;
    goto LABEL_161;
  }
  return Raw;
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, llvm::APInt *a3, uint64_t a4)
{
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  }
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, 2 * a4);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::push_back(unsigned int *a1, unint64_t a2)
{
  Address = llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(a1, a2, 1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = a1[2];
  unint64_t v6 = (void *)(*(void *)a1 + (v5 << 6) + 8);
  uint64_t v7 = Address + 8;
  unint64_t v8 = (void *)*((void *)Address + 1);
  unint64_t v9 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
  if (v9 == v8)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, v7);
    uint64_t v10 = (void *)(v4 + (v5 << 6) + 40);
    uint64_t v11 = Address + 40;
    if (v9 != *((void **)Address + 5)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t result = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, (uint64_t)v7);
  uint64_t v10 = (void *)(v4 + (v5 << 6) + 40);
  uint64_t v11 = Address + 40;
  if (v9 == *((void **)Address + 5)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t result = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
LABEL_6:
  ++a1[2];
  return result;
}

uint64_t mlir::DenseElementsAttr::get(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  uint64_t v7 = 2 * a4;
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = ((DenseElementBitWidth + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL;
  }
  return mlir::DenseIntOrFPElementsAttr::getRaw(v11, v12, v9, a3, v7);
}

{
  uint64_t OperandRange;
  unint64_t DenseElementBitWidth;
  unint64_t v8;
  llvm::APFloatBase *v10;
  uint64_t v11;

  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v10);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (DenseElementBitWidth == 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  return mlir::DenseIntOrFPElementsAttr::getRaw(v10, v11, v8, a3, a4);
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  int v16 = (void *)a1;
  uint64_t v17 = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v16);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  BOOL v13 = mlir::ShapedType::getNumElements(ArgAttrsAttr, v9) == 1;
  if (DenseElementBitWidth != 1)
  {
    if (((DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8) != 8 * a4) {
      goto LABEL_7;
    }
LABEL_6:
    BOOL v13 = 1;
    goto LABEL_7;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE) {
    goto LABEL_6;
  }
LABEL_7:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v15);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  int v16 = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  uint64_t v17 = (uint64_t)Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)&v16, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, v15, (uint64_t)v14, (unsigned __int8 *)&v13);
}

uint64_t mlir::DenseElementsAttr::get(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v4 = a4;
  unint64_t v8 = a4 + 7;
  if ((unint64_t)(a4 + 7) >= 8)
  {
    size_t v13 = v8 >> 3;
    uint64_t v9 = (char *)operator new(v8 >> 3);
    uint64_t v10 = &v9[v13];
    bzero(v9, v13);
    int v11 = *a3;
    uint64_t v12 = v4;
    if (!v4)
    {
LABEL_11:
      unint64_t v19 = v10 - v9;
      if (v10 == v9)
      {
        size_t v21 = 1 - v19;
        if (v19 == 1)
        {
          uint64_t v20 = &v10[v21];
          bzero(v10, v21);
        }
        else
        {
          uint64_t v22 = 2 * v19;
          if (2 * v19 <= 1) {
            uint64_t v22 = 1;
          }
          if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v23 = v22;
          }
          unsigned int v24 = (char *)operator new(v23);
          uint64_t v25 = &v24[v19];
          uint64_t v20 = v24 + 1;
          bzero(v25, v21);
          if (v10)
          {
            operator delete(v10);
            LOBYTE(v11) = *a3;
          }
          uint64_t v10 = v25;
        }
      }
      else
      {
        if (v19 > 1) {
          uint64_t v20 = v9 + 1;
        }
        else {
          uint64_t v20 = v10;
        }
        uint64_t v10 = v9;
      }
      uint64_t v9 = v10;
      char *v10 = -(char)v11;
      uint64_t v10 = v20;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (!a4) {
      goto LABEL_27;
    }
    int v11 = *a3;
    uint64_t v12 = a4;
    if (!a4) {
      goto LABEL_11;
    }
  }
  unint64_t v14 = 0;
  int v15 = 1;
  do
  {
    while (1)
    {
      BOOL v16 = a3[v14] == v11;
      int v17 = 1 << (v14 & 7);
      unint64_t v18 = v14 >> 3;
      if (a3[v14]) {
        break;
      }
      v9[v18] &= ~(_BYTE)v17;
      v15 &= v16;
      if (v12 == ++v14) {
        goto LABEL_10;
      }
    }
    v9[v18] |= v17;
    v15 &= v16;
    ++v14;
  }
  while (v12 != v14);
LABEL_10:
  if (v15) {
    goto LABEL_11;
  }
LABEL_27:
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, (unsigned __int8 *)v9, v10 - v9);
  if (v9) {
    operator delete(v9);
  }
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(uint64_t a1, uint64_t a2, uint64_t a3, llvm::APInt *a4, uint64_t a5)
{
  unint64_t v10 = a5 * a3 + 7;
  if (v10 >= 8)
  {
    size_t v13 = v10 >> 3;
    uint64_t v12 = operator new(v10 >> 3);
    int v11 = &v12[v13];
    bzero(v12, v13);
    if (!a5) {
      goto LABEL_25;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = 0;
    if (!a5) {
      goto LABEL_25;
    }
  }
  uint64_t v24 = a2;
  unint64_t v14 = 0;
  uint64_t v15 = 16 * a5;
  BOOL v16 = a4;
  do
  {
    unint64_t v18 = *((unsigned int *)v16 + 2);
    unsigned int v26 = v18;
    if (v18 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)v16);
      unint64_t v18 = v26;
      if (v26 == 1)
      {
LABEL_15:
        int v19 = 1 << (v14 & 7);
        if (__src == (void *)1) {
          char v17 = v12[v14 >> 3] | v19;
        }
        else {
          char v17 = v12[v14 >> 3] & ~(_BYTE)v19;
        }
        v12[v14 >> 3] = v17;
        goto LABEL_8;
      }
    }
    else
    {
      __src = *(void **)v16;
      if (v18 == 1) {
        goto LABEL_15;
      }
    }
    if (v18 > 0x40)
    {
      uint64_t v20 = __src;
      memmove(&v12[v14 >> 3], __src, (v18 + 7) >> 3);
      if (v20) {
        operator delete[](v20);
      }
    }
    else if (v18)
    {
      memmove(&v12[v14 >> 3], &__src, (v18 + 7) >> 3);
    }
LABEL_8:
    BOOL v16 = (llvm::APInt *)((char *)v16 + 16);
    v14 += a3;
    v15 -= 16;
  }
  while (v15);
  a2 = v24;
  if (a5 == 1 && *((_DWORD *)a4 + 2) == 1)
  {
    if (*v12) {
      char v21 = -1;
    }
    else {
      char v21 = 0;
    }
    *uint64_t v12 = v21;
  }
LABEL_25:
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(a1, a2, v12, v11 - v12);
  if (v12) {
    operator delete(v12);
  }
  return Raw;
}

uint64_t mlir::DenseIntOrFPElementsAttr::getRaw(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = (uint64_t)a1;
  unint64_t v8 = ((32 * a5) >> 5) * a3 + 7;
  if (v8 >= 8)
  {
    size_t v11 = v8 >> 3;
    uint64_t v9 = operator new(v8 >> 3);
    unsigned int v26 = &v9[v11];
    bzero(v9, v11);
    uint64_t v10 = 32 * a5;
    if (!a5) {
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  unsigned int v26 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 32 * a5;
  if (a5)
  {
LABEL_5:
    uint64_t v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
    unint64_t v13 = 0;
    unint64_t v14 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
    for (uint64_t i = v10; i; i -= 32)
    {
      if (v12 == *(void **)v14)
      {
        a1 = llvm::detail::DoubleAPFloat::bitcastToAPInt(v14, (llvm::APInt *)&__src);
        uint64_t v17 = v32;
        if (v32 != 1)
        {
LABEL_14:
          if (v17 > 0x40)
          {
            int v19 = __src;
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], __src, (unint64_t)(v17 + 7) >> 3);
            if (v19) {
              operator delete[](v19);
            }
          }
          else if (v17)
          {
            a1 = (llvm::APFloatBase *)memmove(&v9[v13 >> 3], &__src, (unint64_t)(v17 + 7) >> 3);
          }
          goto LABEL_8;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::bitcastToAPInt(v14, (uint64_t)&__src);
        uint64_t v17 = v32;
        if (v32 != 1) {
          goto LABEL_14;
        }
      }
      int v18 = 1 << (v13 & 7);
      if (__src == (void *)1) {
        char v16 = v9[v13 >> 3] | v18;
      }
      else {
        char v16 = v9[v13 >> 3] & ~(_BYTE)v18;
      }
      v9[v13 >> 3] = v16;
LABEL_8:
      v13 += a3;
      unint64_t v14 = (llvm::detail::DoubleAPFloat *)((char *)v14 + 32);
    }
  }
LABEL_19:
  if (v10 != 32) {
    goto LABEL_30;
  }
  char v21 = *(void **)(a4 + 8);
  uint64_t v20 = (llvm::detail::DoubleAPFloat *)(a4 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v21)
  {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v20, (llvm::APInt *)&__p);
    unsigned int v22 = v30;
    if (v30 >= 0x41)
    {
LABEL_22:
      if (__p) {
        operator delete[](__p);
      }
      goto LABEL_30;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::bitcastToAPInt(v20, (uint64_t)&__p);
    unsigned int v22 = v30;
    if (v30 >= 0x41) {
      goto LABEL_22;
    }
  }
  if (v22 == 1)
  {
    if (*v9) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
    unsigned char *v9 = v23;
  }
LABEL_30:
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v27, a2, v9, v26 - v9);
  if (v9) {
    operator delete(v9);
  }
  return Raw;
}

BOOL mlir::DenseElementsAttr::isValidRawBuffer(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, BOOL *a5)
{
  v17[0] = a1;
  v17[1] = a2;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  uint64_t v10 = 8 * a4;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17);
  uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v12);
  *a5 = NumElements == 1;
  if (DenseElementBitWidth != 1)
  {
    unint64_t v15 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v10 != v15)
    {
      unint64_t v14 = v15 * NumElements;
      return v10 == v14;
    }
LABEL_6:
    BOOL result = 1;
    *a5 = 1;
    return result;
  }
  if (a4 == 1 && *a3 - 1 >= 0xFE) {
    goto LABEL_6;
  }
  unint64_t v14 = (NumElements + 7) & 0xFFFFFFFFFFFFFFF8;
  return v10 == v14;
}

uint64_t mlir::DenseElementsAttr::isValidIntOrFloat(mlir::DenseElementsAttr *this, uint64_t a2, char a3, unsigned int a4)
{
  long long v9 = *(_OWORD *)(*(void *)this + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v9);
  return isValidIntOrFloat(OperandRange, a2, a3, a4);
}

uint64_t isValidIntOrFloat(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  uint64_t v15 = a1;
  if (mlir::detail::getDenseElementBitWidth(a1) != 8 * a2) {
    return 0;
  }
  if (a3)
  {
    if (mlir::Type::isIndex((mlir::Type *)&v15)) {
      return 1;
    }
    uint64_t v13 = v15;
    if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    if (v13)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14)) {
        return (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v14) != 1) ^ a4;
      }
      return 1;
    }
    return 0;
  }
  unint64_t v8 = *(void **)(*(void *)a1 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v8 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  uint64_t result = 1;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v8 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v8 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexIntValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  long long v19 = *(_OWORD *)(*(void *)this + 8);
  *(void *)&long long v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
  unint64_t result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  if (*(_UNKNOWN **)(*(void *)result + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t v7 = *(void *)(*(void *)this + 16);
    uint64_t v8 = *(void *)(*(void *)this + 32);
    uint64_t v9 = *(unsigned __int8 *)(*(void *)this + 24);
    *(void *)&long long v19 = *(void *)(*(void *)this + 8);
    uint64_t v6 = v19;
    *((void *)&v19 + 1) = v7;
    *(void *)&long long v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(Value);
    uint64_t v12 = *(void *)this;
    long long v19 = *(_OWORD *)(*(void *)this + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v14);
    uint64_t v16 = *(void *)(v12 + 32);
    uint64_t v17 = *(unsigned __int8 *)(v12 + 24);
    long long v19 = *(_OWORD *)(v12 + 8);
    *(void *)&long long v19 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v19);
    uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
    unint64_t result = mlir::detail::getDenseElementBitWidth(v18);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = DenseElementBitWidth;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 40) = v17;
    *(void *)(a2 + 48) = NumElements;
    *(void *)(a2 + 56) = result;
    char v5 = 1;
    *(void *)(a2 + 64) = v6;
    *(void *)(a2 + 72) = v7;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 80) = v5;
  return result;
}

uint64_t mlir::DenseElementsAttr::getNumElements(mlir::DenseElementsAttr *this)
{
  long long v4 = *(_OWORD *)(*(void *)this + 8);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v4);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v2);
}

unint64_t mlir::DenseElementsAttr::tryGetFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  long long v33 = *(_OWORD *)(*(void *)this + 8);
  unint64_t result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
  char v5 = *(void **)(*(void *)result + 136);
  BOOL v16 = v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v16 && (unint64_t v32 = result) != 0)
  {
    FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v32);
    uint64_t v19 = *(void *)(*(void *)this + 16);
    uint64_t v31 = *(void *)(*(void *)this + 32);
    uint64_t v20 = *(unsigned __int8 *)(*(void *)this + 24);
    *(void *)&long long v33 = *(void *)(*(void *)this + 8);
    uint64_t v18 = v33;
    *((void *)&v33 + 1) = v19;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
    uint64_t v23 = *(void *)this;
    long long v33 = *(_OWORD *)(*(void *)this + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
    uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v25);
    uint64_t v27 = *(void *)(v23 + 32);
    uint64_t v28 = *(unsigned __int8 *)(v23 + 24);
    long long v33 = *(_OWORD *)(v23 + 8);
    uint64_t v29 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    unint64_t result = mlir::detail::getDenseElementBitWidth(v29);
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v20;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = DenseElementBitWidth;
    *(void *)(a2 + 32) = FloatSemantics;
    *(void *)(a2 + 40) = v27;
    *(void *)(a2 + 48) = v28;
    *(void *)(a2 + 56) = NumElements;
    *(void *)(a2 + 64) = result;
    *(void *)(a2 + 72) = FloatSemantics;
    char v30 = 1;
    *(void *)(a2 + 80) = v18;
    *(void *)(a2 + 88) = v19;
  }
  else
  {
    char v30 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 96) = v30;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetComplexFloatValues@<X0>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X8>)
{
  long long v35 = *(_OWORD *)(*(void *)this + 8);
  unint64_t result = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
  if (*(_UNKNOWN **)(*(void *)result + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v34 = v5;
  if (v5)
  {
    unint64_t result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
    uint64_t v6 = *(void **)(*(void *)result + 136);
    BOOL v17 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
    if (v17 && (unint64_t v33 = result) != 0)
    {
      FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v33);
      uint64_t v20 = *(void *)(*(void *)this + 16);
      uint64_t v32 = *(void *)(*(void *)this + 32);
      uint64_t v21 = *(unsigned __int8 *)(*(void *)this + 24);
      *(void *)&long long v35 = *(void *)(*(void *)this + 8);
      uint64_t v19 = v35;
      *((void *)&v35 + 1) = v20;
      *(void *)&long long v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(Value);
      uint64_t v24 = *(void *)this;
      long long v35 = *(_OWORD *)(*(void *)this + 8);
      uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v35);
      uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v26);
      uint64_t v28 = *(void *)(v24 + 32);
      uint64_t v29 = *(unsigned __int8 *)(v24 + 24);
      long long v35 = *(_OWORD *)(v24 + 8);
      *(void *)&long long v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      uint64_t v30 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
      unint64_t result = mlir::detail::getDenseElementBitWidth(v30);
      *(void *)a2 = v32;
      *(void *)(a2 + 8) = v21;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = DenseElementBitWidth;
      *(void *)(a2 + 32) = FloatSemantics;
      *(void *)(a2 + 40) = v28;
      *(void *)(a2 + 48) = v29;
      *(void *)(a2 + 56) = NumElements;
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = FloatSemantics;
      char v31 = 1;
      *(void *)(a2 + 80) = v19;
      *(void *)(a2 + 88) = v20;
    }
    else
    {
      char v31 = 0;
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 96) = v31;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 96) = 0;
  }
  return result;
}

uint64_t mlir::DenseElementsAttr::reshape(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*(void *)(result + 8) != a2) {
    return mlir::DenseIntOrFPElementsAttr::getRaw(a2, a3, *(unsigned __int8 **)(result + 32), *(void *)(result + 40));
  }
  return result;
}

uint64_t mlir::DenseElementsAttr::bitcast(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(*(void *)a1 + 8);
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7) == a2) {
    return *(void *)a1;
  }
  LOBYTE(v8) = 0;
  char v9 = 0;
  uint64_t v4 = mlir::ShapedType::cloneWith(v7, &v8, a2);
  return mlir::DenseIntOrFPElementsAttr::getRaw(v4, v5, *(unsigned __int8 **)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 40));
}

uint64_t mlir::DenseElementsAttr::mapValues(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  uint64_t v5 = *a1;
  return mlir::DenseIntElementsAttr::mapValues(&v5, a2, a3, a4);
}

uint64_t mlir::DenseIntElementsAttr::mapValues(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  v82[1] = *MEMORY[0x1E4F143B8];
  uint64_t v80 = (unsigned __int8 *)v82;
  long long v81 = xmmword_1810FF9F0;
  long long v74 = *(_OWORD *)(*a1 + 8);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(a2);
  unint64_t v7 = DenseElementBitWidth;
  if (DenseElementBitWidth == 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)&long long v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
  *((void *)&v72 + 1) = v9;
  char v73 = 1;
  uint64_t v75 = mlir::ShapedType::cloneWith((uint64_t *)&v74, &v72, a2);
  uint64_t v76 = v10;
  if (*(unsigned char *)(*a1 + 24))
  {
    unint64_t v11 = (v8 + 7) >> 3;
    uint64_t v12 = v81;
    BOOL v13 = (unint64_t)v81 > v11;
    if ((void)v81 == v11) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
    unint64_t v11 = (mlir::ShapedType::getNumElements(ArgAttrsAttr, v20) * v8 + 7) >> 3;
    uint64_t v12 = v81;
    BOOL v13 = (unint64_t)v81 > v11;
    if ((void)v81 == v11)
    {
LABEL_6:
      uint64_t v14 = *a1;
      if (*(unsigned char *)(*a1 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  if (!v13)
  {
    if (*((void *)&v81 + 1) < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v80, v82, v11, 1);
      uint64_t v12 = v81;
    }
    if (v11 != v12) {
      bzero(&v80[v12], v11 - v12);
    }
  }
  *(void *)&long long v81 = v11;
  uint64_t v14 = *a1;
  if (!*(unsigned char *)(*a1 + 24))
  {
LABEL_17:
    uint64_t v21 = *(void *)(v14 + 32);
    *(_OWORD *)std::string __p = *(_OWORD *)(v14 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    unint64_t v23 = mlir::detail::getDenseElementBitWidth(OperandRange);
    uint64_t v24 = *a1;
    *(_OWORD *)std::string __p = *(_OWORD *)(*a1 + 8);
    uint64_t v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)__p);
    uint64_t NumElements = mlir::ShapedType::getNumElements(v25, v26);
    uint64_t v28 = *(void *)(v24 + 32);
    int v29 = *(unsigned __int8 *)(v24 + 24);
    *(_OWORD *)std::string __p = *(_OWORD *)(v24 + 8);
    uint64_t v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    mlir::detail::getDenseElementBitWidth(v30);
    BOOL v31 = v21 == v28 && v29 == 0;
    char v32 = !v31;
    if (v31 && !NumElements) {
      goto LABEL_118;
    }
    unint64_t v33 = 0;
    unint64_t v34 = 0;
    if (v23 == 1) {
      unint64_t v35 = 1;
    }
    else {
      unint64_t v35 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v65 = v23 + 7;
    uint64_t v36 = NumElements - 1;
    while (1)
    {
      if (v23 == 1)
      {
        int v39 = *(unsigned __int8 *)(v21 + (v33 >> 3)) >> (v33 & 7);
        unsigned int v71 = 1;
        unint64_t v70 = (void *)(v39 & 1);
        unsigned int v69 = 1;
        BOOL v68 = v70;
        goto LABEL_47;
      }
      unsigned int v71 = v23;
      if (v23 > 0x40) {
        break;
      }
      unint64_t v70 = 0;
      long long v40 = &v70;
      unsigned int v41 = v23;
      if (v65 >= 8) {
        goto LABEL_43;
      }
LABEL_44:
      unsigned int v69 = v41;
      if (v41 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const void **)&v70);
      }
      else {
        BOOL v68 = v70;
      }
LABEL_47:
      a3(__p, a4, &v68);
      BOOL v42 = v80;
      unint64_t v43 = LODWORD(__p[1]);
      unsigned int v78 = __p[1];
      if (LODWORD(__p[1]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)__p);
        unint64_t v43 = v78;
        if (v78 == 1)
        {
LABEL_54:
          int v44 = 1 << (v34 & 7);
          unint64_t v45 = v34 >> 3;
          if (__src == (void *)1)
          {
            v42[v45] |= v44;
            if (LODWORD(__p[1]) >= 0x41) {
              goto LABEL_62;
            }
          }
          else
          {
            v42[v45] &= ~(_BYTE)v44;
            if (LODWORD(__p[1]) >= 0x41)
            {
LABEL_62:
              if (__p[0]) {
                operator delete[](__p[0]);
              }
              goto LABEL_64;
            }
          }
          goto LABEL_64;
        }
      }
      else
      {
        __src = __p[0];
        if (LODWORD(__p[1]) == 1) {
          goto LABEL_54;
        }
      }
      if (v43 > 0x40)
      {
        memmove(&v42[v34 >> 3], __src, (v43 + 7) >> 3);
        if (__src) {
          operator delete[](__src);
        }
      }
      else if (v43)
      {
        memmove(&v42[v34 >> 3], &__src, (v43 + 7) >> 3);
        if (LODWORD(__p[1]) >= 0x41) {
          goto LABEL_62;
        }
        goto LABEL_64;
      }
      if (LODWORD(__p[1]) >= 0x41) {
        goto LABEL_62;
      }
LABEL_64:
      if (v69 >= 0x41 && v68) {
        operator delete[](v68);
      }
      if (v71 >= 0x41 && v70) {
        operator delete[](v70);
      }
      if (v36-- != 0) {
        char v38 = 1;
      }
      else {
        char v38 = v32;
      }
      v34 += v8;
      v33 += v35;
      if ((v38 & 1) == 0) {
        goto LABEL_118;
      }
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
    unsigned int v41 = v71;
    if (v71 >= 0x41) {
      long long v40 = v70;
    }
    else {
      long long v40 = &v70;
    }
    if (v65 < 8) {
      goto LABEL_44;
    }
LABEL_43:
    memmove(v40, (const void *)(v21 + (v33 >> 3)), (v23 + 7) >> 3);
    unsigned int v41 = v71;
    goto LABEL_44;
  }
LABEL_7:
  if (v7 == 1)
  {
    uint64_t v15 = *(unsigned char **)(v14 + 32);
    *(_OWORD *)std::string __p = *(_OWORD *)(v14 + 8);
    uint64_t v16 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
    unint64_t v17 = mlir::detail::getDenseElementBitWidth(v16);
    if (v17 == 1)
    {
      uint64_t v18 = (void *)(*v15 & 1);
      unsigned int v78 = 1;
      __src = v18;
      goto LABEL_83;
    }
    unint64_t v50 = v17 + 7;
    unsigned int v78 = v17;
    if (v17 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      if (v78 >= 0x41) {
        p_src = (void **)__src;
      }
      else {
        p_src = &__src;
      }
      if (v50 < 8)
      {
LABEL_83:
        a3(__p, a4, &__src);
        int v54 = (int)__p[1];
        if (LODWORD(__p[1]) > 0x40) {
          BOOL v55 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) == v54;
        }
        else {
          BOOL v55 = __p[0] == 0;
        }
        char v56 = v55;
        *uint64_t v80 = v56 - 1;
        if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
          operator delete[](__p[0]);
        }
        if (v78 < 0x41) {
          goto LABEL_118;
        }
        unint64_t v57 = __src;
        if (!__src) {
          goto LABEL_118;
        }
LABEL_117:
        operator delete[](v57);
        goto LABEL_118;
      }
    }
    else
    {
      __src = 0;
      p_src = &__src;
      if (v50 < 8) {
        goto LABEL_83;
      }
    }
    memmove(p_src, v15, v50 >> 3);
    goto LABEL_83;
  }
  uint64_t v46 = *(unsigned char **)(v14 + 32);
  *(_OWORD *)std::string __p = *(_OWORD *)(v14 + 8);
  uint64_t v47 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)__p);
  unint64_t v48 = mlir::detail::getDenseElementBitWidth(v47);
  if (v48 == 1)
  {
    unint64_t v49 = (void *)(*v46 & 1);
    unsigned int v71 = 1;
    unint64_t v70 = v49;
    goto LABEL_100;
  }
  unint64_t v52 = v48 + 7;
  unsigned int v71 = v48;
  if (v48 <= 0x40)
  {
    unint64_t v70 = 0;
    uint64_t v53 = &v70;
    if (v52 < 8) {
      goto LABEL_100;
    }
LABEL_99:
    memmove(v53, v46, v52 >> 3);
    goto LABEL_100;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
  if (v71 >= 0x41) {
    uint64_t v53 = v70;
  }
  else {
    uint64_t v53 = &v70;
  }
  if (v52 >= 8) {
    goto LABEL_99;
  }
LABEL_100:
  a3(__p, a4, &v70);
  unsigned int v58 = v80;
  unsigned int v59 = __p[1];
  unsigned int v78 = __p[1];
  if (LODWORD(__p[1]) <= 0x40)
  {
    __src = __p[0];
    if (LODWORD(__p[1]) != 1) {
      goto LABEL_102;
    }
LABEL_106:
    unsigned __int8 v60 = *v58;
    if (__src == (void *)1) {
      unsigned __int8 v61 = v60 | 1;
    }
    else {
      unsigned __int8 v61 = v60 & 0xFE;
    }
    *unsigned int v58 = v61;
    goto LABEL_112;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)__p);
  unsigned int v59 = v78;
  if (v78 == 1) {
    goto LABEL_106;
  }
LABEL_102:
  if (v59 > 0x40)
  {
    unint64_t v62 = __src;
    memmove(v58, __src, ((unint64_t)v59 + 7) >> 3);
    if (v62) {
      operator delete[](v62);
    }
  }
  else if (v59)
  {
    memmove(v58, &__src, ((unint64_t)v59 + 7) >> 3);
  }
LABEL_112:
  if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
    operator delete[](__p[0]);
  }
  if (v71 >= 0x41)
  {
    unint64_t v57 = v70;
    if (v70) {
      goto LABEL_117;
    }
  }
LABEL_118:
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v75, v76, v80, v81);
  if (v80 != (unsigned __int8 *)v82) {
    free(v80);
  }
  return Raw;
}

uint64_t mlir::DenseElementsAttr::mapValues(uint64_t *a1, uint64_t a2, void *(*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  uint64_t v5 = *a1;
  return mlir::DenseFPElementsAttr::mapValues((mlir::DenseElementsAttr *)&v5, a2, a3, a4);
}

uint64_t mlir::DenseFPElementsAttr::mapValues(mlir::DenseElementsAttr *a1, uint64_t a2, void *(*a3)(void **__return_ptr, uint64_t, void **), uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  __dst = &v59;
  long long v58 = xmmword_1810FF9F0;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)(*(void *)a1 + 8);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(a2);
  unint64_t v9 = DenseElementBitWidth;
  if (DenseElementBitWidth == 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = (DenseElementBitWidth + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)&long long v48 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
  *((void *)&v48 + 1) = v11;
  char v49 = 1;
  uint64_t v51 = mlir::ShapedType::cloneWith(v50, &v48, a2);
  uint64_t v52 = v12;
  if (*(unsigned char *)(*(void *)a1 + 24))
  {
    unint64_t v13 = (v10 + 7) >> 3;
    uint64_t v14 = v58;
    BOOL v15 = (unint64_t)v58 > v13;
    if ((void)v58 == v13) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    unint64_t v13 = (mlir::ShapedType::getNumElements(ArgAttrsAttr, v20) * v10 + 7) >> 3;
    uint64_t v14 = v58;
    BOOL v15 = (unint64_t)v58 > v13;
    if ((void)v58 == v13)
    {
LABEL_6:
      if (*(unsigned char *)(*(void *)a1 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  if (!v15)
  {
    if (*((void *)&v58 + 1) < v13)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, &v59, v13, 1);
      uint64_t v14 = v58;
    }
    if (v13 != v14) {
      bzero((char *)__dst + v14, v13 - v14);
    }
  }
  *(void *)&long long v58 = v13;
  if (*(unsigned char *)(*(void *)a1 + 24))
  {
LABEL_7:
    if (v9 == 1)
    {
      mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
      long long v45 = v62;
      long long v46 = v63;
      uint64_t v47 = v64;
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v60);
      uint64_t v16 = (llvm::APFloatBase *)a3(&__p, a4, &v60);
      unsigned int v17 = v56;
      if (v56 > 0x40)
      {
        uint64_t v16 = (llvm::APFloatBase *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
        BOOL v18 = v16 == v17;
      }
      else
      {
        BOOL v18 = __p == 0;
      }
      char v35 = v18;
      *(unsigned char *)__dst = v35 - 1;
      if (v56 >= 0x41)
      {
        uint64_t v16 = (llvm::APFloatBase *)__p;
        if (__p) {
          operator delete[](__p);
        }
      }
      uint64_t v36 = (llvm::detail::IEEEFloat *)v61;
      unint64_t v37 = (void *)v61[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v16) != v37)
      {
LABEL_63:
        llvm::detail::IEEEFloat::~IEEEFloat(v36);
        goto LABEL_76;
      }
      goto LABEL_75;
    }
    mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
    long long v45 = v62;
    long long v46 = v63;
    uint64_t v47 = v64;
    llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v62);
    inited = (llvm::APFloatBase *)a3(&v60, a4, (void **)&v62);
    unint64_t v33 = (char *)__dst;
    unsigned int v34 = v61[0];
    unsigned int v56 = v61[0];
    if (LODWORD(v61[0]) > 0x40)
    {
      inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v60);
      unsigned int v34 = v56;
      if (v56 != 1)
      {
LABEL_52:
        if (v34 > 0x40)
        {
          long long v40 = __p;
          inited = (llvm::APFloatBase *)memmove(v33, __p, ((unint64_t)v34 + 7) >> 3);
          if (v40) {
            operator delete[](v40);
          }
        }
        else if (v34)
        {
          inited = (llvm::APFloatBase *)memmove(v33, &__p, ((unint64_t)v34 + 7) >> 3);
        }
LABEL_71:
        if (LODWORD(v61[0]) >= 0x41)
        {
          inited = (llvm::APFloatBase *)v60;
          if (v60) {
            operator delete[](v60);
          }
        }
        uint64_t v36 = (llvm::detail::IEEEFloat *)((char *)&v62 + 8);
        unsigned int v41 = (void *)*((void *)&v62 + 1);
        if (llvm::APFloatBase::PPCDoubleDouble(inited) != v41) {
          goto LABEL_63;
        }
LABEL_75:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v36);
        goto LABEL_76;
      }
    }
    else
    {
      std::string __p = v60;
      if (LODWORD(v61[0]) != 1) {
        goto LABEL_52;
      }
    }
    char v38 = *v33;
    if (__p == (void *)1) {
      char v39 = v38 | 1;
    }
    else {
      char v39 = v38 & 0xFE;
    }
    *unint64_t v33 = v39;
    goto LABEL_71;
  }
LABEL_17:
  mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
  long long v45 = v62;
  long long v46 = v63;
  uint64_t v47 = v64;
  mlir::DenseElementsAttr::tryGetFloatValues(a1, (uint64_t)&v62);
  uint64_t v21 = v65;
  int v22 = v66;
  uint64_t v44 = v67;
  if ((void)v45 != v65 || BYTE8(v45) != v66 || (void)v46 != v67)
  {
    unint64_t v23 = 0;
    do
    {
      llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v45, (uint64_t)&v62);
      uint64_t v24 = (void *)*((void *)&v62 + 1);
      uint64_t v26 = llvm::APFloatBase::PPCDoubleDouble(v25);
      if (v26 == v24) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61, (const llvm::detail::DoubleAPFloat *)((char *)&v62 + 8));
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v61, (const llvm::detail::IEEEFloat *)((char *)&v62 + 8));
      }
      a3(&__p, a4, &v60);
      uint64_t v27 = __dst;
      unint64_t v28 = v56;
      unsigned int v54 = v56;
      if (v56 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, (const void **)&__p);
        unint64_t v28 = v54;
        if (v54 == 1)
        {
LABEL_31:
          int v29 = 1 << (v23 & 7);
          unint64_t v30 = v23 >> 3;
          if (__src == (void *)1)
          {
            v27[v30] |= v29;
            if (v56 < 0x41) {
              goto LABEL_41;
            }
          }
          else
          {
            v27[v30] &= ~(_BYTE)v29;
            if (v56 < 0x41) {
              goto LABEL_41;
            }
          }
          goto LABEL_39;
        }
      }
      else
      {
        __src = __p;
        if (v56 == 1) {
          goto LABEL_31;
        }
      }
      if (v28 > 0x40)
      {
        memmove(&v27[v23 >> 3], __src, (v28 + 7) >> 3);
        if (__src) {
          operator delete[](__src);
        }
LABEL_36:
        if (v56 < 0x41) {
          goto LABEL_41;
        }
        goto LABEL_39;
      }
      if (!v28) {
        goto LABEL_36;
      }
      memmove(&v27[v23 >> 3], &__src, (v28 + 7) >> 3);
      if (v56 < 0x41) {
        goto LABEL_41;
      }
LABEL_39:
      if (__p) {
        operator delete[](__p);
      }
LABEL_41:
      if (v26 == (void *)v61[0])
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        if (v26 != *((void **)&v62 + 1))
        {
LABEL_43:
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v62 + 8));
          goto LABEL_46;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
        if (v26 != *((void **)&v62 + 1)) {
          goto LABEL_43;
        }
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v62 + 8));
LABEL_46:
      uint64_t v31 = v46 + 1;
      *(void *)&long long v46 = v46 + 1;
      v23 += v10;
    }
    while ((void)v45 != v21 || BYTE8(v45) != v22 || v31 != v44);
  }
LABEL_76:
  uint64_t Raw = mlir::DenseIntOrFPElementsAttr::getRaw(v51, v52, (unsigned __int8 *)__dst, v58);
  if (__dst != &v59) {
    free(__dst);
  }
  return Raw;
}

uint64_t mlir::DenseFPElementsAttr::classof(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)a1 + 136);
  BOOL v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  int v4 = v3;
  if (v3) {
    return v1 & (v4 ^ 1);
  }
  long long v14 = *(_OWORD *)(a1 + 8);
  uint64_t v5 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14) + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    LODWORD(v1) = 1;
    return v1 & (v4 ^ 1);
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return (v4 ^ 1) & 1;
  }
  LODWORD(v1) = 1;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id) {
    return v1 & (v4 ^ 1);
  }
  BOOL v12 = v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  int v13 = v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id || v12;
  return v13 & (v4 ^ 1u);
}

uint64_t mlir::DenseIntElementsAttr::classof(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)a1 + 136);
  BOOL v3 = v1 != &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id
    || a1 == 0;
  int v4 = v3;
  if (!v3)
  {
    long long v6 = *(_OWORD *)(a1 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v6);
    LODWORD(v1) = mlir::Type::isIntOrIndex((mlir::Type *)&OperandRange);
  }
  return (v4 ^ 1) & v1;
}

uint64_t mlir::DenseResourceElementsAttr::get(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v7, a3);
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::insert(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(pthread_rwlock_t ***)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 8);
  LOBYTE(v16) = 0;
  char v22 = 0;
  if (*(unsigned char *)(a4 + 64))
  {
    long long v16 = *(_OWORD *)a4;
    unint64_t v11 = *(void *)(a4 + 48);
    uint64_t v17 = *(void *)(a4 + 16);
    unint64_t v20 = v11;
    if (v11 >= 8)
    {
      BOOL v12 = (long long *)(a4 + 24);
      if ((v11 & 2) != 0 && (v11 & 4) != 0)
      {
        (*(void (**)(long long *, long long *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v18, v12);
      }
      else
      {
        long long v18 = *v12;
        unint64_t v19 = *(void *)(a4 + 40);
      }
      *(void *)(a4 + 48) = 0;
    }
    char v21 = *(unsigned char *)(a4 + 56);
    char v22 = 1;
  }
  mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(v8, v9, a2, a3, &v16, a5);
  if (v22 && v20 >= 8)
  {
    int v13 = (v20 & 2) != 0 ? &v18 : (long long *)v18;
    (*(void (**)(long long *, void, void, uint64_t))(v20 & 0xFFFFFFFFFFFFFFF8))(v13, v16, *((void *)&v16 + 1), v17);
    char v14 = v20;
    if (v20 >= 8)
    {
      if ((v20 & 4) != 0)
      {
        if ((v20 & 2) != 0) {
          BOOL v15 = &v18;
        }
        else {
          BOOL v15 = (long long *)v18;
        }
        (*(void (**)(long long *))((v20 & 0xFFFFFFFFFFFFFFF8) + 16))(v15);
      }
      if ((v14 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v18, *((void **)&v18 + 1));
      }
    }
  }
}

llvm::APFloatBase *mlir::SparseElementsAttr::getZeroAttr(mlir::SparseElementsAttr *this)
{
  void v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)this;
  if (*(void *)this) {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t ElementType = mlir::ElementsAttr::getElementType((uint64_t)v2, v3);
  uint64_t v5 = *(void **)(*(void *)ElementType + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return mlir::FloatAttr::get(ElementType, 0.0);
  }
  else
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v18 = ElementType;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v38 = v18;
    if (v18)
    {
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v38);
      unint64_t v20 = *(void **)(*(void *)Value + 136);
      if (v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v20 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v35 = (uint64_t)mlir::FloatAttr::get(Value, 0.0);
      }
      else
      {
        uint64_t v35 = mlir::IntegerAttr::get(Value, 0);
      }
      uint64_t v32 = v35;
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v38);
      v40[0] = v32;
      v40[1] = v32;
      *(void *)&long long v39 = v40;
      *((void *)&v39 + 1) = 2;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      v36[0] = (char *)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
      v36[1] = (char *)Context;
      return (llvm::APFloatBase *)mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v36, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v39);
    }
    else if (*(_UNKNOWN **)(**(void **)(*(void *)this + 32) + 136) == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
    {
      __int16 v37 = 257;
      return (llvm::APFloatBase *)mlir::StringAttr::get(v36, ElementType);
    }
    else
    {
      return (llvm::APFloatBase *)mlir::IntegerAttr::get(ElementType, 0);
    }
  }
}

void mlir::SparseElementsAttr::getFlattenedSparseIndices(mlir::SparseElementsAttr *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v3 = a2;
  v61[8] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v58 = *(void *)(*(void *)this + 24);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v58, (uint64_t)v60);
  int v4 = v60[0];
  int v5 = LOBYTE(v60[1]);
  uint64_t v6 = v61[0];
  if (!*(unsigned char *)(v58 + 24))
  {
    *(_OWORD *)unsigned __int8 v60 = *(_OWORD *)(v58 + 8);
    uint64_t v19 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    *(_OWORD *)unsigned __int8 v60 = *(_OWORD *)(*(void *)v2 + 8);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
    uint64_t v57 = v19;
    if (!v19) {
      return;
    }
    uint64_t v21 = v20;
    char v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v56 = v6;
    int v55 = v5;
    uint64_t v53 = v4;
    uint64_t v54 = v20;
    uint64_t v52 = v3;
    while (1)
    {
      uint64_t v26 = v5 ? 0 : v6 + v23 * v21;
      uint64_t v27 = *(void **)v2;
      unint64_t v28 = *(void *)v2 ? (void *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v60[0] = v27;
      v60[1] = v28;
      ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60);
      uint64_t FlattenedIndex = mlir::ElementsAttr::getFlattenedIndex(ArgOperands, (uint64_t)&v4[v26]);
      uint64_t v31 = FlattenedIndex;
      unint64_t v32 = (unint64_t)v3[2];
      if ((unint64_t)v22 >= v32) {
        break;
      }
      *(void *)char v22 = FlattenedIndex;
      uint64_t v25 = (uint64_t)(v22 + 8);
LABEL_15:
      v3[1] = (uint64_t *)v25;
      ++v23;
      char v22 = (char *)v25;
      uint64_t v6 = v56;
      int v5 = v55;
      uint64_t v21 = v54;
      if (v23 == v57) {
        return;
      }
    }
    unint64_t v33 = v2;
    uint64_t v34 = (v22 - v24) >> 3;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61) {
      abort();
    }
    uint64_t v36 = v32 - (void)v24;
    if (v36 >> 2 > v35) {
      unint64_t v35 = v36 >> 2;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      if (v37 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v38 = operator new(8 * v37);
      long long v39 = &v38[8 * v34];
      *(void *)long long v39 = v31;
      uint64_t v25 = (uint64_t)(v39 + 8);
      if (v22 != v24)
      {
LABEL_32:
        unint64_t v40 = v22 - 8 - v24;
        if (v40 < 0x168
          || &v38[v22 - v24 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v22 - v24 - 8]
          || &v22[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8
          || (unint64_t)(v24 - v38) < 0x20)
        {
          unsigned int v41 = v22;
          uint64_t v2 = v33;
        }
        else
        {
          uint64_t v43 = (v40 >> 3) + 1;
          uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v41 = &v22[-v44];
          v39 -= v44;
          long long v45 = &v38[8 * v34 - 16];
          long long v46 = v22 - 16;
          uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *long long v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          uint64_t v2 = v33;
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            uint64_t v3 = v52;
            *uint64_t v52 = (uint64_t *)v39;
            v52[1] = (uint64_t *)v25;
            v52[2] = (uint64_t *)&v38[8 * v37];
            if (!v24)
            {
LABEL_37:
              uint64_t v24 = v39;
              int v4 = v53;
              goto LABEL_15;
            }
LABEL_36:
            operator delete(v24);
            goto LABEL_37;
          }
        }
        do
        {
          uint64_t v42 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v39 - 1) = v42;
          v39 -= 8;
        }
        while (v41 != v24);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v38 = 0;
      long long v39 = (char *)(8 * v34);
      *(void *)(8 * v34) = v31;
      uint64_t v25 = 8 * v34 + 8;
      if (v22 != v24) {
        goto LABEL_32;
      }
    }
    uint64_t v2 = v33;
    uint64_t v3 = v52;
    *uint64_t v52 = (uint64_t *)v39;
    v52[1] = (uint64_t *)v25;
    v52[2] = (uint64_t *)&v38[8 * v37];
    if (!v24) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  long long v59 = *(_OWORD *)(*(void *)v2 + 8);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
  unint64_t v8 = v7;
  if (v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6;
  }
  v60[0] = v61;
  HIDWORD(v60[1]) = 8;
  unint64_t v10 = v4[v9];
  if (v7 < 9)
  {
    if (v7)
    {
      v61[0] = v4[v9];
      if (v7 != 1)
      {
        v61[1] = v10;
        if (v7 != 2)
        {
          v61[2] = v10;
          if (v7 != 3)
          {
            void v61[3] = v10;
            if (v7 != 4)
            {
              v61[4] = v10;
              if (v7 != 5)
              {
                v61[5] = v10;
                if (v7 != 6)
                {
                  v61[6] = v10;
                  if (v7 != 7) {
                    v61[7] = v10;
                  }
                }
              }
            }
          }
        }
      }
    }
    unint64_t v11 = v61;
    LODWORD(v60[1]) = v7;
    uint64_t v17 = *(void **)v2;
    if (*(void *)v2) {
      goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v60[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v60, v61, v7, 8);
    unint64_t v11 = v60[0];
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v13 = v8 & 3;
    int64x2_t v14 = vdupq_n_s64(v10);
    BOOL v15 = (int64x2_t *)((char *)v60[0] + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *BOOL v15 = v14;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        v11[v12++] = v10;
        --v13;
      }
      while (v13);
    }
    LODWORD(v60[1]) = v8;
    uint64_t v17 = *(void **)v2;
    if (*(void *)v2)
    {
LABEL_11:
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v17 + 8);
      goto LABEL_59;
    }
  }
  uint64_t v18 = 0;
LABEL_59:
  *(void *)&long long v59 = v17;
  *((void *)&v59 + 1) = v18;
  char v49 = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59);
  uint64_t v50 = mlir::ElementsAttr::getFlattenedIndex(v49, (uint64_t)v11);
  uint64_t v51 = (uint64_t *)operator new(8uLL);
  *uint64_t v3 = v51;
  *v51++ = v50;
  v3[1] = v51;
  void v3[2] = v51;
  if (v60[0] != v61) {
    free(v60[0]);
  }
}

uint64_t mlir::SparseElementsAttr::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  v86[0] = a1;
  v86[1] = a2;
  uint64_t v84 = a3;
  uint64_t v85 = a4;
  uint64_t v83 = a5;
  long long v82 = *(_OWORD *)(a6 + 8);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v82);
  if (v9 != 1)
  {
    a1(&v90, a2);
    if (v90)
    {
      LODWORD(v87) = 3;
      long long v88 = "expected 1-d tensor for sparse element values";
      v89[0] = 45;
      char v22 = &v87;
      uint64_t v23 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v77 = v94 + 1;
        if (v93 <= &v87 && (char *)v93 + 24 * v94 > (char *)&v87)
        {
          int64_t v78 = (char *)&v87 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          uint64_t v23 = (char *)v93;
          char v22 = (const char ***)((char *)v93 + v78);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
          char v22 = &v87;
          uint64_t v23 = (char *)v93;
        }
      }
      uint64_t v24 = &v23[24 * v94];
      long long v25 = *(_OWORD *)v22;
      *((void *)v24 + 2) = v22[2];
      *(_OWORD *)uint64_t v24 = v25;
      ++v94;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    }
    if (!v101) {
      return v13;
    }
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v100;
      unint64_t v28 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        unint64_t v28 = __p;
      }
      uint64_t v100 = v26;
      operator delete(v28);
    }
    uint64_t v17 = v97;
    if (!v97) {
      goto LABEL_78;
    }
    int v29 = v98;
    uint64_t v19 = v97;
    if (v98 == v97) {
      goto LABEL_77;
    }
    do
    {
      uint64_t v31 = (void *)*--v29;
      unint64_t v30 = v31;
      *int v29 = 0;
      if (v31) {
        operator delete[](v30);
      }
    }
    while (v29 != v17);
    goto LABEL_76;
  }
  long long v81 = *(_OWORD *)(a5 + 8);
  v80[0] = (mlir::CallableOpInterface *)v86;
  v80[1] = (mlir::CallableOpInterface *)&v84;
  v80[2] = (mlir::CallableOpInterface *)&v81;
  v80[3] = (mlir::CallableOpInterface *)&v82;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v84);
  unint64_t v11 = v10;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
  if (v12 == 2)
  {
    if (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81) + 8) != v11)
    {
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      }
      if (!v101) {
        return v13;
      }
      int64x2_t v14 = (void **)__p;
      if (__p)
      {
        BOOL v15 = v100;
        unint64_t v16 = __p;
        if (v100 != __p)
        {
          do
            BOOL v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          unint64_t v16 = __p;
        }
        uint64_t v100 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v97;
      if (!v97) {
        goto LABEL_78;
      }
      uint64_t v18 = v98;
      uint64_t v19 = v97;
      if (v98 == v97) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v21 = (void *)*--v18;
        uint64_t v20 = v21;
        *uint64_t v18 = 0;
        if (v21) {
          operator delete[](v20);
        }
      }
      while (v18 != v17);
      goto LABEL_76;
    }
  }
  else if (v12 != 1 || v11 != 1)
  {
    mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    }
    if (!v101) {
      return v13;
    }
    uint64_t v44 = (void **)__p;
    if (__p)
    {
      long long v45 = v100;
      long long v46 = __p;
      if (v100 != __p)
      {
        do
          long long v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        long long v46 = __p;
      }
      uint64_t v100 = v44;
      operator delete(v46);
    }
    uint64_t v17 = v97;
    if (!v97) {
      goto LABEL_78;
    }
    uint64_t v47 = v98;
    uint64_t v19 = v97;
    if (v98 == v97) {
      goto LABEL_77;
    }
    do
    {
      char v49 = (void *)*--v47;
      long long v48 = v49;
      *uint64_t v47 = 0;
      if (v49) {
        operator delete[](v48);
      }
    }
    while (v47 != v17);
    goto LABEL_76;
  }
  uint64_t v32 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v81);
  if (v32 == *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v82))
  {
    v79[0] = v86;
    v79[1] = &v84;
    mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(&v83, (uint64_t)&v90);
    uint64_t v33 = v90;
    int v34 = v91;
    uint64_t v35 = v92;
    if (*(unsigned char *)(v83 + 24))
    {
      if (v91) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v92;
      }
      char v87 = (const char **)v89;
      HIDWORD(v88) = 6;
      unint64_t v37 = *(void *)(v90 + 8 * v36);
      if (v11 < 7)
      {
        if (v11)
        {
          v89[0] = *(void *)(v90 + 8 * v36);
          if (v11 != 1)
          {
            v89[1] = v37;
            if (v11 != 2)
            {
              v89[2] = v37;
              if (v11 != 3)
              {
                v89[3] = v37;
                if (v11 != 4)
                {
                  v89[4] = v37;
                  if (v11 != 5) {
                    v89[5] = v37;
                  }
                }
              }
            }
          }
        }
        uint64_t v38 = (const char **)v89;
      }
      else
      {
        LODWORD(v88) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v11, 8);
        uint64_t v38 = v87;
        unint64_t v39 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v40 = v11 & 3;
        int64x2_t v41 = vdupq_n_s64(v37);
        uint64_t v42 = v87 + 2;
        unint64_t v43 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *((int64x2_t *)v42 - 1) = v41;
          *(int64x2_t *)uint64_t v42 = v41;
          v42 += 4;
          v43 -= 4;
        }
        while (v43);
        if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
        {
          do
          {
            v38[v39++] = (const char *)v37;
            --v40;
          }
          while (v40);
        }
      }
      LODWORD(v88) = v11;
      if (mlir::ElementsAttr::isValidIndex(v84, v85, v38, v11))
      {
        uint64_t v13 = 1;
      }
      else
      {
        mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, 0, v87, v88);
        uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
        if (v90) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
        }
        if (v101)
        {
          unsigned __int8 v61 = (void **)__p;
          if (__p)
          {
            long long v62 = v100;
            long long v63 = __p;
            if (v100 != __p)
            {
              do
                long long v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
              while (v62 != v61);
              long long v63 = __p;
            }
            uint64_t v100 = v61;
            operator delete(v63);
          }
          uint64_t v64 = v97;
          if (v97)
          {
            uint64_t v65 = v98;
            unsigned __int8 v66 = v97;
            if (v98 != v97)
            {
              do
              {
                uint64_t v68 = (void *)*--v65;
                uint64_t v67 = v68;
                void *v65 = 0;
                if (v68) {
                  operator delete[](v67);
                }
              }
              while (v65 != v64);
              unsigned __int8 v66 = v97;
            }
            long long v98 = v64;
            operator delete(v66);
          }
          if (v93 != v96) {
            free(v93);
          }
        }
      }
      uint64_t v56 = v87;
      if (v87 != v89) {
        goto LABEL_79;
      }
    }
    else
    {
      if (!v32) {
        return 1;
      }
      uint64_t v58 = 0;
      while (1)
      {
        uint64_t v59 = v34 ? 0 : v35;
        unsigned __int8 v60 = (const char **)(v33 + 8 * v59);
        if ((mlir::ElementsAttr::isValidIndex(v84, v85, v60, v11) & 1) == 0) {
          break;
        }
        ++v58;
        v35 += v11;
        if (v32 == v58) {
          return 1;
        }
      }
      mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()((uint64_t)&v90, v79, v58, v60, v11);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
      if (v90) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
      }
      if (v101)
      {
        unsigned int v69 = (void **)__p;
        if (__p)
        {
          unint64_t v70 = v100;
          unsigned int v71 = __p;
          if (v100 != __p)
          {
            do
              unint64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            unsigned int v71 = __p;
          }
          uint64_t v100 = v69;
          operator delete(v71);
        }
        long long v72 = v97;
        if (v97)
        {
          char v73 = v98;
          long long v74 = v97;
          if (v98 != v97)
          {
            do
            {
              uint64_t v76 = (void *)*--v73;
              uint64_t v75 = v76;
              *char v73 = 0;
              if (v76) {
                operator delete[](v75);
              }
            }
            while (v73 != v72);
            long long v74 = v97;
          }
          long long v98 = v72;
          operator delete(v74);
        }
        uint64_t v56 = (const char **)v93;
        if (v93 != v96) {
          goto LABEL_79;
        }
      }
    }
    return v13;
  }
  mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()((uint64_t)&v90, v80);
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  }
  if (!v101) {
    return v13;
  }
  uint64_t v50 = (void **)__p;
  if (__p)
  {
    uint64_t v51 = v100;
    uint64_t v52 = __p;
    if (v100 != __p)
    {
      do
        uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
      while (v51 != v50);
      uint64_t v52 = __p;
    }
    uint64_t v100 = v50;
    operator delete(v52);
  }
  uint64_t v17 = v97;
  if (v97)
  {
    uint64_t v53 = v98;
    uint64_t v19 = v97;
    if (v98 == v97) {
      goto LABEL_77;
    }
    do
    {
      int v55 = (void *)*--v53;
      uint64_t v54 = v55;
      *uint64_t v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v17);
LABEL_76:
    uint64_t v19 = v97;
LABEL_77:
    long long v98 = v17;
    operator delete(v19);
  }
LABEL_78:
  uint64_t v56 = (const char **)v93;
  if (v93 != v96) {
LABEL_79:
  }
    free(v56);
  return v13;
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_0::operator()(uint64_t a1, mlir::CallableOpInterface **a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, void))*a2)(&v59, *((void *)*a2 + 1));
  if (v59)
  {
    LODWORD(v56) = 3;
    uint64_t v57 = "expected shape ([";
    uint64_t v58 = 17;
    int v4 = &v56;
    int v5 = (char *)__src;
    if (v63 >= v64)
    {
      unint64_t v48 = v63 + 1;
      if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        int v5 = (char *)__src;
        int v4 = (const char **)((char *)__src + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v48, 24);
        int v4 = &v56;
        int v5 = (char *)__src;
      }
    }
    uint64_t v6 = &v5[24 * v63];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v63;
  }
  uint64_t ArgAttrsAttr = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[1]);
  if (v59)
  {
    uint64_t v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(ArgAttrsAttr, &ArgAttrsAttr[v9], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      uint64_t v57 = "]); inferred shape of indices literal ([";
      uint64_t v58 = 40;
      unint64_t v10 = &v56;
      unint64_t v11 = (char *)__src;
      if (v63 >= v64)
      {
        unint64_t v49 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          unint64_t v11 = (char *)__src;
          unint64_t v10 = (const char **)((char *)__src + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v49, 24);
          unint64_t v10 = &v56;
          unint64_t v11 = (char *)__src;
        }
      }
      uint64_t v12 = &v11[24 * v63];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = v10[2];
      *(_OWORD *)uint64_t v12 = v13;
      ++v63;
    }
  }
  int64x2_t v14 = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[2]);
  if (v59)
  {
    uint64_t v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v14, &v14[v15], (uint64_t)&v60, (uint64_t)&v60, &v56);
    if (v59)
    {
      LODWORD(v56) = 3;
      uint64_t v57 = "]); inferred shape of values literal ([";
      uint64_t v58 = 39;
      unint64_t v16 = &v56;
      uint64_t v17 = (char *)__src;
      if (v63 >= v64)
      {
        unint64_t v50 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          uint64_t v17 = (char *)__src;
          unint64_t v16 = (const char **)((char *)__src + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v50, 24);
          unint64_t v16 = &v56;
          uint64_t v17 = (char *)__src;
        }
      }
      uint64_t v18 = &v17[24 * v63];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v63;
    }
  }
  uint64_t v20 = (const char **)mlir::CallableOpInterface::getArgAttrsAttr(a2[3]);
  uint64_t v22 = v59;
  if (v59)
  {
    uint64_t v56 = ", ";
    llvm::interleave<long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(llvm::ArrayRef<long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<long long>>(llvm::ArrayRef<long long> const&,char const*)::{lambda(void)#1},void>(v20, &v20[v21], (uint64_t)&v60, (uint64_t)&v60, &v56);
    uint64_t v22 = v59;
    if (v59)
    {
      LODWORD(v56) = 3;
      uint64_t v57 = "])";
      uint64_t v58 = 2;
      uint64_t v23 = &v56;
      uint64_t v24 = (char *)__src;
      if (v63 >= v64)
      {
        unint64_t v51 = v63 + 1;
        if (__src <= &v56 && (char *)__src + 24 * v63 > (char *)&v56)
        {
          int64_t v55 = (char *)&v56 - (unsigned char *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          uint64_t v24 = (char *)__src;
          uint64_t v23 = (const char **)((char *)__src + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v65, v51, 24);
          uint64_t v23 = &v56;
          uint64_t v24 = (char *)__src;
        }
      }
      long long v25 = &v24[24 * v63];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = v23[2];
      *(_OWORD *)long long v25 = v26;
      ++v63;
      uint64_t v22 = v59;
    }
  }
  *(void *)a1 = v22;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v70)
  {
    *(void *)(a1 + 8) = v60;
    unint64_t v27 = v63;
    *(_DWORD *)(a1 + 16) = v61;
    *(void *)(a1 + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v27 || &v59 == (uint64_t *)a1)
    {
      int v29 = 1;
      goto LABEL_29;
    }
    if (__src != v65)
    {
      *(void *)(a1 + 24) = __src;
      unsigned int v28 = v64;
      *(_DWORD *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 36) = v28;
      __src = v65;
      unsigned int v64 = 0;
      int v29 = 1;
LABEL_28:
      unsigned int v63 = 0;
LABEL_29:
      uint64_t v31 = v69;
      *(void *)(a1 + 152) = v67;
      *(_OWORD *)(a1 + 136) = v66;
      long long v66 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(void *)(a1 + 176) = v31;
      uint64_t v67 = 0;
      long long __p = 0uLL;
      uint64_t v69 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v29)
      {
        uint64_t v32 = (void **)__p;
        if ((void)__p)
        {
          uint64_t v33 = (void **)*((void *)&__p + 1);
          int v34 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            int v34 = (void *)__p;
          }
          *((void *)&__p + 1) = v32;
          operator delete(v34);
        }
        uint64_t v35 = (void *)v66;
        if ((void)v66)
        {
          uint64_t v36 = (void *)*((void *)&v66 + 1);
          unint64_t v37 = (void *)v66;
          if (*((void *)&v66 + 1) != (void)v66)
          {
            do
            {
              unint64_t v39 = (void *)*--v36;
              uint64_t v38 = v39;
              *uint64_t v36 = 0;
              if (v39) {
                operator delete[](v38);
              }
            }
            while (v36 != v35);
            unint64_t v37 = (void *)v66;
          }
          *((void *)&v66 + 1) = v35;
          operator delete(v37);
        }
        if (__src != v65) {
          free(__src);
        }
        unsigned __int8 v70 = 0;
      }
      goto LABEL_46;
    }
    if (v27 < 5)
    {
      unint64_t v30 = v27;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v27, 24);
      unint64_t v30 = v63;
      if (!v63) {
        goto LABEL_27;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v30);
LABEL_27:
    *(_DWORD *)(a1 + 32) = v27;
    int v29 = v70;
    goto LABEL_28;
  }
LABEL_46:
  mlir::InFlightDiagnostic::abandon(&v59);
  if (v59) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
  }
  if (v70)
  {
    unint64_t v40 = (void **)__p;
    if ((void)__p)
    {
      int64x2_t v41 = (void **)*((void *)&__p + 1);
      uint64_t v42 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          int64x2_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = (void *)__p;
      }
      *((void *)&__p + 1) = v40;
      operator delete(v42);
    }
    unint64_t v43 = (void *)v66;
    if ((void)v66)
    {
      uint64_t v44 = (void *)*((void *)&v66 + 1);
      long long v45 = (void *)v66;
      if (*((void *)&v66 + 1) != (void)v66)
      {
        do
        {
          uint64_t v47 = (void *)*--v44;
          long long v46 = v47;
          *uint64_t v44 = 0;
          if (v47) {
            operator delete[](v46);
          }
        }
        while (v44 != v43);
        long long v45 = (void *)v66;
      }
      *((void *)&v66 + 1) = v43;
      operator delete(v45);
    }
    if (__src != v65) {
      free(__src);
    }
  }
}

void mlir::SparseElementsAttr::verify(llvm::function_ref<mlir::InFlightDiagnostic ()(void)>,mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr)::$_1::operator()(uint64_t a1, void **a2, unsigned int a3, const char **a4, uint64_t a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  ((void (*)(uint64_t *__return_ptr, void))**a2)(&v70, (*a2)[1]);
  uint64_t v10 = v70;
  if (v70)
  {
    LODWORD(v67) = 3;
    uint64_t v68 = "sparse index #";
    uint64_t v69 = 14;
    unint64_t v11 = &v67;
    uint64_t v12 = (char *)__src;
    if (v74 >= v75)
    {
      unint64_t v55 = v74 + 1;
      if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
      {
        int64_t v62 = (char *)&v67 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        uint64_t v12 = (char *)__src;
        unint64_t v11 = (const char **)((char *)__src + v62);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v55, 24);
        unint64_t v11 = &v67;
        uint64_t v12 = (char *)__src;
      }
    }
    long long v13 = &v12[24 * v74];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)long long v13 = v14;
    uint64_t v15 = ++v74;
    uint64_t v10 = v70;
    if (v70)
    {
      LODWORD(v67) = 5;
      uint64_t v68 = (const char *)a3;
      unint64_t v16 = &v67;
      uint64_t v17 = (char *)__src;
      if (v15 >= v75)
      {
        unint64_t v56 = v15 + 1;
        BOOL v57 = (char *)__src + 24 * v15 > (char *)&v67;
        if (__src <= &v67 && v57)
        {
          int64_t v63 = (char *)&v67 - (unsigned char *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          uint64_t v17 = (char *)__src;
          unint64_t v16 = (const char **)((char *)__src + v63);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v56, 24);
          unint64_t v16 = &v67;
          uint64_t v17 = (char *)__src;
        }
      }
      uint64_t v18 = &v17[24 * v74];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v74;
      uint64_t v10 = v70;
      if (v70)
      {
        LODWORD(v67) = 3;
        uint64_t v68 = " is not contained within the value shape, with index=[";
        uint64_t v69 = 54;
        uint64_t v21 = &v67;
        uint64_t v22 = (char *)__src;
        if (v20 >= v75)
        {
          unint64_t v58 = v20 + 1;
          BOOL v59 = (char *)__src + 24 * v20 > (char *)&v67;
          if (__src <= &v67 && v59)
          {
            int64_t v64 = (char *)&v67 - (unsigned char *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            uint64_t v22 = (char *)__src;
            uint64_t v21 = (const char **)((char *)__src + v64);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v58, 24);
            uint64_t v21 = &v67;
            uint64_t v22 = (char *)__src;
          }
        }
        uint64_t v23 = &v22[24 * v74];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)uint64_t v23 = v24;
        ++v74;
        uint64_t v10 = v70;
        if (v70)
        {
          uint64_t v67 = ", ";
          llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(a4, &a4[a5], (uint64_t)&v71, (uint64_t)&v71, &v67);
          uint64_t v10 = v70;
          if (v70)
          {
            LODWORD(v67) = 3;
            uint64_t v68 = "], and type=";
            uint64_t v69 = 12;
            long long v25 = &v67;
            long long v26 = (char *)__src;
            if (v74 >= v75)
            {
              unint64_t v60 = v74 + 1;
              if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
              {
                int64_t v65 = (char *)&v67 - (unsigned char *)__src;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                long long v26 = (char *)__src;
                long long v25 = (const char **)((char *)__src + v65);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v60, 24);
                long long v25 = &v67;
                long long v26 = (char *)__src;
              }
            }
            unint64_t v27 = &v26[24 * v74];
            long long v28 = *(_OWORD *)v25;
            *((void *)v27 + 2) = v25[2];
            *(_OWORD *)unint64_t v27 = v28;
            ++v74;
            uint64_t v10 = v70;
            if (v70)
            {
              uint64_t v29 = *a2[1];
              unint64_t v30 = &v67;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v29);
              uint64_t v31 = (char *)__src;
              if (v74 >= v75)
              {
                unint64_t v61 = v74 + 1;
                if (__src <= &v67 && (char *)__src + 24 * v74 > (char *)&v67)
                {
                  int64_t v66 = (char *)&v67 - (unsigned char *)__src;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  uint64_t v31 = (char *)__src;
                  unint64_t v30 = (const char **)((char *)__src + v66);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v76, v61, 24);
                  unint64_t v30 = &v67;
                  uint64_t v31 = (char *)__src;
                }
              }
              uint64_t v32 = &v31[24 * v74];
              long long v33 = *(_OWORD *)v30;
              *((void *)v32 + 2) = v30[2];
              *(_OWORD *)uint64_t v32 = v33;
              ++v74;
              uint64_t v10 = v70;
            }
          }
        }
      }
    }
  }
  *(void *)a1 = v10;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v81)
  {
    *(void *)(a1 + 8) = v71;
    unint64_t v34 = v74;
    *(_DWORD *)(a1 + 16) = v72;
    *(void *)(a1 + 24) = a1 + 40;
    *(void *)(a1 + 32) = 0x400000000;
    if (!v34 || &v70 == (uint64_t *)a1)
    {
      int v36 = 1;
      goto LABEL_26;
    }
    if (__src != v76)
    {
      *(void *)(a1 + 24) = __src;
      unsigned int v35 = v75;
      *(_DWORD *)(a1 + 32) = v34;
      *(_DWORD *)(a1 + 36) = v35;
      __src = v76;
      unsigned int v75 = 0;
      int v36 = 1;
LABEL_25:
      unsigned int v74 = 0;
LABEL_26:
      uint64_t v38 = v80;
      *(void *)(a1 + 152) = v78;
      *(_OWORD *)(a1 + 136) = v77;
      long long v77 = 0uLL;
      *(_OWORD *)(a1 + 160) = __p;
      *(void *)(a1 + 176) = v38;
      uint64_t v78 = 0;
      long long __p = 0uLL;
      uint64_t v80 = 0;
      *(unsigned char *)(a1 + 184) = 1;
      if (v36)
      {
        unint64_t v39 = (void **)__p;
        if ((void)__p)
        {
          unint64_t v40 = (void **)*((void *)&__p + 1);
          int64x2_t v41 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              unint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            int64x2_t v41 = (void *)__p;
          }
          *((void *)&__p + 1) = v39;
          operator delete(v41);
        }
        uint64_t v42 = (void *)v77;
        if ((void)v77)
        {
          unint64_t v43 = (void *)*((void *)&v77 + 1);
          uint64_t v44 = (void *)v77;
          if (*((void *)&v77 + 1) != (void)v77)
          {
            do
            {
              long long v46 = (void *)*--v43;
              long long v45 = v46;
              *unint64_t v43 = 0;
              if (v46) {
                operator delete[](v45);
              }
            }
            while (v43 != v42);
            uint64_t v44 = (void *)v77;
          }
          *((void *)&v77 + 1) = v42;
          operator delete(v44);
        }
        if (__src != v76) {
          free(__src);
        }
        unsigned __int8 v81 = 0;
      }
      goto LABEL_43;
    }
    if (v34 < 5)
    {
      unint64_t v37 = v34;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v34, 24);
      unint64_t v37 = v74;
      if (!v74) {
        goto LABEL_24;
      }
    }
    memcpy(*(void **)(a1 + 24), __src, 24 * v37);
LABEL_24:
    *(_DWORD *)(a1 + 32) = v34;
    int v36 = v81;
    goto LABEL_25;
  }
LABEL_43:
  mlir::InFlightDiagnostic::abandon(&v70);
  if (v70) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
  }
  if (v81)
  {
    uint64_t v47 = (void **)__p;
    if ((void)__p)
    {
      unint64_t v48 = (void **)*((void *)&__p + 1);
      unint64_t v49 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          unint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        unint64_t v49 = (void *)__p;
      }
      *((void *)&__p + 1) = v47;
      operator delete(v49);
    }
    unint64_t v50 = (void *)v77;
    if ((void)v77)
    {
      unint64_t v51 = (void *)*((void *)&v77 + 1);
      int64_t v52 = (void *)v77;
      if (*((void *)&v77 + 1) != (void)v77)
      {
        do
        {
          int64_t v54 = (void *)*--v51;
          int64_t v53 = v54;
          *unint64_t v51 = 0;
          if (v54) {
            operator delete[](v53);
          }
        }
        while (v51 != v50);
        int64_t v52 = (void *)v77;
      }
      *((void *)&v77 + 1) = v50;
      operator delete(v52);
    }
    if (__src != v76) {
      free(__src);
    }
  }
}

void *mlir::DistinctAttr::create(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v3);
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v3);
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

__n128 llvm::interleave<unsigned long long const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(llvm::ArrayRef<unsigned long long> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<unsigned long long>>(llvm::ArrayRef<unsigned long long> const&,char const*)::{lambda(void)#1},void>(const char **a1, const char **a2, uint64_t a3, uint64_t a4, const char **a5)
{
  if (a1 != a2)
  {
    uint64_t v47 = v5;
    uint64_t v48 = v6;
    uint64_t v13 = (unint64_t *)(a3 + 16);
    unint64_t v12 = *(void *)(a3 + 16);
    long long v14 = *a1;
    int v44 = 5;
    long long v45 = v14;
    uint64_t v15 = *(unsigned int *)(a3 + 24);
    unint64_t v16 = (__n128 *)&v44;
    if (v15 >= *(_DWORD *)(a3 + 28))
    {
      unint64_t v37 = v15 + 1;
      BOOL v38 = v12 + 24 * v15 > (unint64_t)&v44;
      if (v12 <= (unint64_t)&v44 && v38)
      {
        unint64_t v39 = (char *)&v44 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        unint64_t v16 = (__n128 *)&v39[v12];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, (void *)(a3 + 32), v37, 24);
        unint64_t v12 = *(void *)(a3 + 16);
        unint64_t v16 = (__n128 *)&v44;
      }
    }
    uint64_t v17 = (__n128 *)(v12 + 24 * *(unsigned int *)(a3 + 24));
    __n128 result = *v16;
    v17[1].n128_u64[0] = v16[1].n128_u64[0];
    *uint64_t v17 = result;
    ++*(_DWORD *)(a3 + 24);
    long long v19 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v42 = (void *)(a4 + 32);
      unint64_t v43 = (unint64_t *)(a4 + 16);
      int64x2_t v41 = (void *)(a3 + 32);
      do
      {
        uint64_t v20 = *a5;
        if (*a5)
        {
          size_t v21 = strlen(*a5);
          int v44 = 3;
          long long v45 = v20;
          size_t v46 = v21;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        else
        {
          int v44 = 3;
          long long v45 = 0;
          size_t v46 = 0;
          uint64_t v22 = *(unsigned int *)(a4 + 24);
          unint64_t v23 = *(void *)(a4 + 16);
          if (v22 < *(_DWORD *)(a4 + 28)) {
            goto LABEL_9;
          }
        }
        unint64_t v32 = v22 + 1;
        BOOL v33 = v23 + 24 * v22 > (unint64_t)&v44;
        if (v23 > (unint64_t)&v44 || !v33)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
          unint64_t v23 = *v43;
LABEL_9:
          long long v24 = &v44;
          goto LABEL_10;
        }
        unint64_t v40 = (char *)&v44 - v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v43, v42, v32, 24);
        unint64_t v23 = *v43;
        long long v24 = (int *)&v40[*v43];
LABEL_10:
        uint64_t v25 = v23 + 24 * *(unsigned int *)(a4 + 24);
        long long v26 = *(_OWORD *)v24;
        *(void *)(v25 + 16) = *((void *)v24 + 2);
        *(_OWORD *)uint64_t v25 = v26;
        ++*(_DWORD *)(a4 + 24);
        unint64_t v27 = *v19;
        int v44 = 5;
        long long v45 = v27;
        uint64_t v28 = *(unsigned int *)(a3 + 24);
        unint64_t v29 = *(void *)(a3 + 16);
        if (v28 >= *(_DWORD *)(a3 + 28))
        {
          unint64_t v34 = v28 + 1;
          BOOL v35 = v29 + 24 * v28 > (unint64_t)&v44;
          if (v29 <= (unint64_t)&v44 && v35)
          {
            int v36 = (char *)&v44 - v29;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
            unint64_t v29 = *v13;
            unint64_t v30 = (__n128 *)&v36[*v13];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v41, v34, 24);
          unint64_t v29 = *v13;
        }
        unint64_t v30 = (__n128 *)&v44;
LABEL_12:
        uint64_t v31 = (__n128 *)(v29 + 24 * *(unsigned int *)(a3 + 24));
        __n128 result = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *uint64_t v31 = result;
        ++*(_DWORD *)(a3 + 24);
        ++v19;
      }
      while (v19 != a2);
    }
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = a2;
  v14[1] = a3;
  unint64_t v13 = *a5;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    unint64_t v7 = 0x1E8EB8000uLL;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      unint64_t v7 = 0x1E8EB8000;
    }
  }
  uint64_t v18 = *(void *)(v7 + 3024);
  unsigned int v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v15, 0, v15, (char *)v16, &v13);
  unint64_t v12 = &v13;
  *(void *)&v15[0] = &v13;
  *((void *)&v15[0] + 1) = v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, unint64_t *a5)
{
  unint64_t v16 = a2;
  unint64_t v7 = *a5;
  unint64_t v8 = 0x1E8EB8000uLL;
  {
    unint64_t v14 = v7;
    uint64_t v15 = a3;
    unint64_t v8 = 0x1E8EB8000uLL;
    unint64_t v7 = v14;
    a3 = v15;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v8 = 0x1E8EB8000;
      unint64_t v7 = v14;
      a3 = v15;
    }
  }
  uint64_t v9 = (*(void *)(v8 + 3024) + 8 * v7) ^ HIDWORD(v7);
  int v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v16, a3, (unint64_t)a4, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v9) >> 47) ^ (0x9DDFEA08EB382D69 * v9))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ ((0x9DDFEA08EB382D69 * v9) >> 47) ^ (0x9DDFEA08EB382D69 * v9))) >> 47)));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v16, v10, a4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapAttrStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(llvm::function_ref<void ()(mlir::detail::AffineMapAttrStorage *)>,mlir::TypeID,mlir::AffineMap &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    int v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *int v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    unint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    int v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *int v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    unint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  v18[0] = a2;
  v18[1] = a3;
  long long v17 = *a5;
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    unint64_t v7 = 0x1E8EB8000uLL;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v7 = 0x1E8EB8000;
    }
  }
  uint64_t v8 = *(void *)(v7 + 3024);
  unint64_t v9 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>((_DWORD *)v17, (_DWORD *)(v17 + 8 * *((void *)&v17 + 1)));
  unint64_t v10 = v8 ^ HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * ((8 * v9 + 8) ^ v10);
  v15[0] = &v17;
  v15[1] = v18;
  unint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 32) >> 15) ^ (-348639895* (v10 ^ (v11 >> 47) ^ v11))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(_DWORD *a1, _DWORD *a2)
{
  v87[1] = *MEMORY[0x1E4F143B8];
  {
    long long v77 = a1;
    uint64_t v78 = a2;
    a2 = v78;
    int v80 = v79;
    a1 = v77;
    if (v80)
    {
      unint64_t v81 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v81 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v81;
      a1 = v77;
      a2 = v78;
    }
  }
  if (a1 == a2)
  {
    unint64_t v71 = 0;
  }
  else
  {
    uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
    *(void *)&long long v83 = v2;
    if (a1 + 2 == a2)
    {
      unint64_t v71 = 8;
    }
    else
    {
      uint64_t v3 = (a1[2] >> 4) ^ (a1[2] >> 9);
      *((void *)&v83 + 1) = v3;
      if (a1 + 4 == a2)
      {
        unint64_t v71 = 16;
      }
      else
      {
        uint64_t v4 = (a1[4] >> 4) ^ (a1[4] >> 9);
        *(void *)&long long v84 = v4;
        if (a1 + 6 == a2)
        {
          unint64_t v71 = 24;
        }
        else
        {
          uint64_t v5 = (a1[6] >> 4) ^ (a1[6] >> 9);
          *((void *)&v84 + 1) = v5;
          if (a1 + 8 == a2)
          {
            unint64_t v71 = 32;
          }
          else
          {
            uint64_t v6 = (a1[8] >> 4) ^ (a1[8] >> 9);
            *(void *)&long long v85 = v6;
            if (a1 + 10 == a2)
            {
              unint64_t v71 = 40;
            }
            else
            {
              uint64_t v7 = (a1[10] >> 4) ^ (a1[10] >> 9);
              *((void *)&v85 + 1) = v7;
              if (a1 + 12 == a2)
              {
                unint64_t v71 = 48;
              }
              else
              {
                uint64_t v8 = (a1[12] >> 4) ^ (a1[12] >> 9);
                *(void *)&long long v86 = v8;
                if (a1 + 14 == a2)
                {
                  unint64_t v71 = 56;
                }
                else
                {
                  uint64_t v9 = (a1[14] >> 4) ^ (a1[14] >> 9);
                  *((void *)&v86 + 1) = v9;
                  unint64_t v10 = a1 + 16;
                  if (a1 + 16 != a2)
                  {
                    unint64_t v11 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    unint64_t v12 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v11 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
                    unint64_t v14 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    uint64_t v15 = __ROR8__(v11 - 0x622015F714C7D297 * (v14 ^ (v14 >> 47)), 33);
                    unint64_t v16 = 0xB492B66FBE98F273 * v15;
                    uint64_t v17 = v13 + v6 - 0x4B6D499041670D8DLL * v15;
                    unint64_t v18 = v7 + v8 + v17 + v9;
                    uint64_t v19 = __ROR8__(v7 + v8 + v17, 44) + v17;
                    uint64_t v20 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    unint64_t v21 = v20
                        + v7
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed+ v8- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    unint64_t v22 = v19 + __ROR8__(v21 + v4 + v9 + v17, 21);
                    uint64_t v23 = v2 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    uint64_t v24 = v23 + v3 + v4;
                    uint64_t v25 = v24 + v5;
                    unint64_t v26 = (0xB492B66FBE98F273
                         * __ROR8__(v20 + llvm::hashing::detail::get_execution_seed(void)::seed + v3, 37)) ^ v13;
                    uint64_t v27 = __ROR8__(v24, 44) + v23 + __ROR8__(v26 + v11 + v23 + v5, 21);
                    uint64_t v82 = (char *)&v85;
                    unint64_t v28 = 64;
                    while (1)
                    {
                      *(void *)&long long v83 = (*v10 >> 4) ^ (*v10 >> 9);
                      BOOL v36 = v10 + 2 == a2;
                      if (v10 + 2 == a2)
                      {
                        uint64_t v38 = 0;
                        uint64_t v39 = 8;
                        v10 += 2;
                        unint64_t v40 = (char *)&v83 + 8;
                      }
                      else
                      {
                        *((void *)&v83 + 1) = (v10[2] >> 4) ^ (v10[2] >> 9);
                        BOOL v36 = v10 + 4 == a2;
                        if (v10 + 4 == a2)
                        {
                          uint64_t v38 = 8;
                          uint64_t v39 = 16;
                          v10 += 4;
                          unint64_t v40 = (char *)&v84;
                        }
                        else
                        {
                          *(void *)&long long v84 = (v10[4] >> 4) ^ (v10[4] >> 9);
                          BOOL v36 = v10 + 6 == a2;
                          if (v10 + 6 == a2)
                          {
                            uint64_t v38 = 16;
                            uint64_t v39 = 24;
                            v10 += 6;
                            unint64_t v40 = (char *)&v84 + 8;
                          }
                          else
                          {
                            *((void *)&v84 + 1) = (v10[6] >> 4) ^ (v10[6] >> 9);
                            BOOL v36 = v10 + 8 == a2;
                            if (v10 + 8 == a2)
                            {
                              uint64_t v38 = 24;
                              uint64_t v39 = 32;
                              v10 += 8;
                              unint64_t v40 = v82;
                            }
                            else
                            {
                              *(void *)&long long v85 = (v10[8] >> 4) ^ (v10[8] >> 9);
                              BOOL v36 = v10 + 10 == a2;
                              if (v10 + 10 == a2)
                              {
                                uint64_t v38 = 32;
                                uint64_t v39 = 40;
                                v10 += 10;
                                unint64_t v40 = (char *)&v85 + 8;
                              }
                              else
                              {
                                *((void *)&v85 + 1) = (v10[10] >> 4) ^ (v10[10] >> 9);
                                BOOL v36 = v10 + 12 == a2;
                                if (v10 + 12 == a2)
                                {
                                  uint64_t v38 = 40;
                                  uint64_t v39 = 48;
                                  v10 += 12;
                                  unint64_t v40 = (char *)&v86;
                                }
                                else
                                {
                                  *(void *)&long long v86 = (v10[12] >> 4) ^ (v10[12] >> 9);
                                  BOOL v36 = v10 + 14 == a2;
                                  if (v10 + 14 == a2)
                                  {
                                    uint64_t v38 = 48;
                                    uint64_t v39 = 56;
                                    v10 += 14;
                                    unint64_t v40 = (char *)&v86 + 8;
                                  }
                                  else
                                  {
                                    uint64_t v37 = (v10[14] >> 4) ^ (v10[14] >> 9);
                                    v10 += 16;
                                    *((void *)&v86 + 1) = v37;
                                    BOOL v36 = v10 == a2;
                                    uint64_t v38 = 56;
                                    uint64_t v39 = 64;
                                    unint64_t v40 = (char *)v87;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v39 & 0x38) == 0) {
                        goto LABEL_12;
                      }
                      uint64_t v41 = 56 - v38;
                      uint64_t v42 = v39;
                      if (v39 != 56 - v38)
                      {
                        do
                        {
                          uint64_t v49 = v42;
                          uint64_t v42 = v41;
                          uint64_t v41 = v49 % v41;
                        }
                        while (v41);
                        if (v42)
                        {
                          unint64_t v50 = (long long *)((char *)&v83 + v42);
                          do
                          {
                            char v52 = *((unsigned char *)v50 - 1);
                            unint64_t v50 = (long long *)((char *)v50 - 1);
                            char v51 = v52;
                            int64_t v53 = (long long *)((char *)v50 + v39);
                            int64_t v54 = v50;
                            do
                            {
                              unint64_t v55 = v54;
                              int64_t v54 = v53;
                              *(unsigned char *)unint64_t v55 = *(unsigned char *)v53;
                              BOOL v56 = v39 < (char *)v87 - (char *)v53;
                              BOOL v57 = (char *)&v83 + v39 - ((char *)v87 - (char *)v53);
                              int64_t v53 = (long long *)((char *)v53 + v39);
                              if (!v56) {
                                int64_t v53 = (long long *)v57;
                              }
                            }
                            while (v53 != v50);
                            *(unsigned char *)int64_t v54 = v51;
                          }
                          while (v50 != &v83);
                        }
                        goto LABEL_12;
                      }
                      unint64_t v43 = v38 | 7;
                      if (55 - v38 < (v38 | 7uLL)) {
                        unint64_t v43 = 55 - v38;
                      }
                      int v44 = (char *)&v83;
                      if (&v83 < (long long *)((char *)&v83 + v38 + v43 + 9))
                      {
                        uint64_t v45 = v39;
                        if (v40 < (char *)&v83 + v43 + 1) {
                          goto LABEL_34;
                        }
                      }
                      if (v43 >= 0x1F)
                      {
                        unint64_t v59 = v43 + 1;
                        uint64_t v58 = (v43 + 1) & 0x60;
                        unint64_t v60 = (long long *)((char *)&v83 + v39);
                        long long v61 = v83;
                        long long v62 = v84;
                        long long v63 = *(long long *)((char *)&v83 + v39 + 16);
                        long long v83 = *(long long *)((char *)&v83 + v39);
                        long long v84 = v63;
                        *unint64_t v60 = v61;
                        v60[1] = v62;
                        if (v58 != 32)
                        {
                          int64_t v64 = (long long *)((char *)&v85 + v39);
                          long long v65 = v85;
                          long long v66 = v86;
                          long long v67 = *(long long *)((char *)&v85 + v39 + 16);
                          long long v85 = *(long long *)((char *)&v85 + v39);
                          long long v86 = v67;
                          _OWORD *v64 = v65;
                          v64[1] = v66;
                        }
                        if (v59 == v58) {
                          goto LABEL_12;
                        }
                        if ((v59 & 0x18) == 0)
                        {
                          int v44 = (char *)&v83 + v58;
                          uint64_t v45 = v39 + v58;
LABEL_34:
                          size_t v46 = v44 + 1;
                          do
                          {
                            char v47 = *(v46 - 1);
                            *(v46 - 1) = *((unsigned char *)&v83 + v45);
                            *((unsigned char *)&v83 + v45) = v47;
                            if (v46 == v40) {
                              break;
                            }
                            ++v46;
                          }
                          while (v45++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        uint64_t v58 = 0;
                      }
                      uint64_t v68 = (uint64_t *)((char *)&v83 + v58);
                      uint64_t v69 = v43 - v58 + 1;
                      do
                      {
                        uint64_t v70 = *v68;
                        *uint64_t v68 = v68[(unint64_t)v39 / 8];
                        v68[(unint64_t)v39 / 8] = v70;
                        ++v68;
                        v69 -= 8;
                      }
                      while (v69);
LABEL_12:
                      unint64_t v29 = v21 + v25 + v16 + *((void *)&v83 + 1);
                      unint64_t v21 = *((void *)&v85 + 1) + v25 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v27 + v86, 42);
                      uint64_t v30 = v83 - 0x4B6D499041670D8DLL * v27;
                      uint64_t v31 = v30 + *((void *)&v83 + 1) + v84;
                      uint64_t v32 = __ROR8__(v26 + v18, 33);
                      unint64_t v33 = (0xB492B66FBE98F273 * __ROR8__(v29, 37)) ^ v22;
                      uint64_t v27 = __ROR8__(v31, 44) + v30 + __ROR8__(v33 + v18 + v30 + *((void *)&v84 + 1), 21);
                      unint64_t v16 = 0xB492B66FBE98F273 * v32;
                      unint64_t v34 = 0xB492B66FBE98F273 * v32 + v22 + v85;
                      unint64_t v35 = *((void *)&v85 + 1) + v86 + v34;
                      uint64_t v25 = v31 + *((void *)&v84 + 1);
                      unint64_t v22 = __ROR8__(v21 + v84 + v34 + *((void *)&v86 + 1), 21) + v34 + __ROR8__(v35, 44);
                      unint64_t v18 = v35 + *((void *)&v86 + 1);
                      v28 += v39;
                      unint64_t v26 = v33;
                      if (v36)
                      {
                        unint64_t v72 = 0x9DDFEA08EB382D69
                            * (v18 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v18)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v18)));
                        unint64_t v73 = 0x9DDFEA08EB382D69
                            * (v22 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v22)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v22)));
                        unint64_t v74 = 0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47))
                            - 0x4B6D499041670D8DLL * ((v28 ^ (v28 >> 47)) + v32);
                        unint64_t v75 = 0x9DDFEA08EB382D69
                            * (v74 ^ (v33
                                    - 0x4B6D499041670D8DLL * (v21 ^ (v21 >> 47))
                                    - 0x622015F714C7D297 * (v72 ^ (v72 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v74 ^ (v75 >> 47) ^ v75)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v74 ^ (v75 >> 47) ^ v75)) >> 47));
                      }
                    }
                  }
                  unint64_t v71 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v83, v71, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = **a1;
  uint64_t v5 = 8 * (void)v2 - 8;
  do
  {
    uint64_t v7 = *v4++;
    uint64_t v6 = v7;
    uint64_t v8 = *v3++;
    BOOL result = v8 == v6;
    BOOL v10 = v8 != v6 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(llvm::function_ref<void ()(mlir::detail::ArrayAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Attribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3 = mlir::detail::ArrayAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::ArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = 8 * v3;
    uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    uint64_t v7 = v6;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      uint64_t v8 = (void *)v6;
      uint64_t v9 = (uint64_t *)v4;
    }
    else
    {
      uint64_t v8 = (void *)v6;
      uint64_t v9 = (uint64_t *)v4;
      if ((unint64_t)(v6 - v4) >= 0x20)
      {
        unint64_t v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
        uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v8 = (void *)(v6 + v11);
        uint64_t v9 = (uint64_t *)(v4 + v11);
        unint64_t v12 = (long long *)(v4 + 16);
        unint64_t v13 = (_OWORD *)(v6 + 16);
        uint64_t v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v15 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *unint64_t v13 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 4;
        }
        while (v14);
        if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    do
    {
      uint64_t v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != (uint64_t *)(v4 + v5));
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_11:
  *(void *)(__sz + 80) += 24;
  if (*(void *)__sz) {
    BOOL v17 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 24 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    unsigned int v18 = *(_DWORD *)(__sz + 24) >> 7;
    if (v18 >= 0x1E) {
      LOBYTE(v18) = 30;
    }
    uint64_t v19 = 4096 << v18;
    buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
    uint64_t v21 = *(unsigned int *)(__sz + 24);
    if (v21 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v21) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v19];
    BOOL result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    BOOL result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 3;
  *BOOL result = 0;
  result[1] = v7;
  result[2] = v3;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  {
    unint64_t v13 = a1;
    uint64_t v9 = a2;
    a2 = v9;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v13;
      a2 = v9;
    }
  }
  uint64_t v4 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v19 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v16[0] = v4;
  unint64_t v14 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v14, (void *)v16 + 1, (unint64_t)v17, *a2);
  unint64_t v15 = v14;
  unint64_t v6 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a3, *(void *)a3 + *(void *)(a3 + 8));
  uint64_t v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v15, v5, (unint64_t)v17, v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v16, v15, v7, (char *)v17);
}

void *mlir::detail::DenseArrayAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = (char *)a2[2];
  unint64_t v5 = a2[3];
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[3], 3);
  if (v5 < 8 || (unint64_t)(v7 - (void)v6) < 0x20)
  {
    uint64_t v9 = (unsigned char *)v7;
    int v10 = v6;
  }
  else
  {
    if (v5 < 0x20)
    {
      unint64_t v8 = 0;
      goto LABEL_11;
    }
    uint64_t v11 = 0;
    unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      unint64_t v12 = (_OWORD *)(v7 + v11);
      long long v13 = *(_OWORD *)&v6[v11 + 16];
      *unint64_t v12 = *(_OWORD *)&v6[v11];
      v12[1] = v13;
      v11 += 32;
    }
    while (v8 != v11);
    if (v5 == v8) {
      goto LABEL_17;
    }
    if ((v5 & 0x18) != 0)
    {
LABEL_11:
      unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = (unsigned char *)(v7 + (v5 & 0xFFFFFFFFFFFFFFF8));
      int v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *(void *)(v7 + v8) = *(void *)&v6[v8];
        v8 += 8;
      }
      while (v14 != v8);
      if (v5 == v14) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    int v10 = &v6[v8];
    uint64_t v9 = (unsigned char *)(v7 + v8);
  }
  do
  {
LABEL_16:
    char v15 = *v10++;
    *v9++ = v15;
  }
  while (v10 != &v6[v5]);
LABEL_17:
  unint64_t v6 = (char *)v7;
LABEL_18:
  *(void *)(__sz + 80) += 40;
  if (*(void *)__sz) {
    BOOL v16 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 40 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    unsigned int v17 = *(_DWORD *)(__sz + 24) >> 7;
    if (v17 >= 0x1E) {
      LOBYTE(v17) = 30;
    }
    uint64_t v18 = 4096 << v17;
    buffer = (char *)llvm::allocate_buffer(4096 << v17, (std::align_val_t)8uLL);
    uint64_t v20 = *(unsigned int *)(__sz + 24);
    if (v20 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v20 + 1, 8);
      LODWORD(v20) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v20) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v18];
    BOOL result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    BOOL result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 5;
  *BOOL result = 0;
  result[1] = v3;
  result[2] = v4;
  result[3] = v6;
  result[4] = v5;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) == *(void *)*a1
    && *(void *)(a2 + 16) == v2[1]
    && (size_t v3 = *(void *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  size_t v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v17[0] = a2;
  v17[1] = a3;
  mlir::detail::DenseStringElementsAttrStorage::getKey(*(void *)a5, *(void *)(a5 + 8), *(const void ***)a6, *(void *)(a6 + 8), *a7, (uint64_t)v15);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    unint64_t v9 = 0x1E8EB8000uLL;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v9 = 0x1E8EB8000;
    }
  }
  uint64_t v22 = *(void *)(v9 + 3024);
  *(void *)&long long v18 = (v15[0] >> 4) ^ (v15[0] >> 9);
  *((void *)&v18 + 1) = v16;
  unsigned int v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v18, 0, (char *)v19, v20);
  unint64_t v14 = v15;
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

unint64_t mlir::detail::DenseStringElementsAttrStorage::getKey@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v8 = result;
  if (a4)
  {
    if (a5)
    {
      BOOL result = llvm::hash_value(*a3, (uint64_t)a3[1]);
      *(void *)a6 = v8;
      *(void *)(a6 + 8) = a2;
      *(void *)(a6 + 16) = a3;
      *(void *)(a6 + 24) = a4;
      *(void *)(a6 + 32) = result;
      *(unsigned char *)(a6 + 40) = 1;
      return result;
    }
    BOOL result = llvm::hash_value(*a3, (uint64_t)a3[1]);
    unint64_t v11 = result;
    unint64_t v17 = result;
    if (a4 == 1)
    {
LABEL_6:
      *(void *)a6 = v8;
      *(void *)(a6 + 8) = a2;
      *(void *)(a6 + 16) = a3;
      *(void *)(a6 + 24) = 1;
      *(void *)(a6 + 32) = v11;
      *(unsigned char *)(a6 + 40) = 1;
      return result;
    }
    size_t v12 = (size_t)a3[1];
    uint64_t v13 = 1;
    uint64_t v14 = 3;
    while (1)
    {
      char v15 = &a3[v14];
      if ((const void *)v12 != a3[v14]) {
        break;
      }
      if (v12)
      {
        BOOL result = memcmp(*a3, *(v15 - 1), v12);
        if (result) {
          break;
        }
      }
      ++v13;
      v14 += 2;
      if (a4 == v13) {
        goto LABEL_6;
      }
    }
    v16[0] = (uint64_t)(v15 - 1);
    v16[1] = a4 - v13;
    BOOL result = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(&v17, v16);
    *(void *)a6 = v8;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 16) = a3;
    *(void *)(a6 + 24) = a4;
    *(void *)(a6 + 32) = result;
  }
  else
  {
    *(void *)a6 = result;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 32) = 0;
    *(void *)(a6 + 16) = a3;
  }
  *(unsigned char *)(a6 + 40) = 0;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<llvm::StringRef>>(void *a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    unsigned int v10 = a1;
    unint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(*a2, *a2 + 16 * a2[1]);
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::StringRef const*>(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  {
    unint64_t v89 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v89 = 0xFF51AFD7ED558CCDLL;
    }
    llvm::hashing::detail::get_execution_seed(void)::seed = v89;
  }
  unint64_t v4 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    unint64_t v83 = 0;
  }
  else
  {
    unint64_t v5 = llvm::hash_value(*(void **)a1, *(void *)(a1 + 8));
    unint64_t v95 = v5;
    if (a1 + 16 == a2)
    {
      unint64_t v83 = 8;
    }
    else
    {
      unint64_t v6 = v5;
      unint64_t v7 = llvm::hash_value(*(void **)(a1 + 16), *(void *)(a1 + 24));
      unint64_t v96 = v7;
      if (a1 + 32 == a2)
      {
        unint64_t v83 = 16;
      }
      else
      {
        unint64_t v8 = v7;
        unint64_t v9 = llvm::hash_value(*(void **)(a1 + 32), *(void *)(a1 + 40));
        unint64_t v97 = v9;
        if (a1 + 48 == a2)
        {
          unint64_t v83 = 24;
        }
        else
        {
          unint64_t v10 = v9;
          unint64_t v11 = llvm::hash_value(*(void **)(a1 + 48), *(void *)(a1 + 56));
          unint64_t v98 = v11;
          if (a1 + 64 == a2)
          {
            unint64_t v83 = 32;
          }
          else
          {
            unint64_t v12 = v11;
            unint64_t v13 = llvm::hash_value(*(void **)(a1 + 64), *(void *)(a1 + 72));
            unint64_t v99 = v13;
            if (a1 + 80 == a2)
            {
              unint64_t v83 = 40;
            }
            else
            {
              unint64_t v14 = v13;
              unint64_t v15 = llvm::hash_value(*(void **)(a1 + 80), *(void *)(a1 + 88));
              unint64_t v100 = v15;
              if (a1 + 96 == a2)
              {
                unint64_t v83 = 48;
              }
              else
              {
                unint64_t v16 = v15;
                unint64_t v17 = llvm::hash_value(*(void **)(a1 + 96), *(void *)(a1 + 104));
                unint64_t v101 = v17;
                if (a1 + 112 == a2)
                {
                  unint64_t v83 = 56;
                }
                else
                {
                  unint64_t v93 = v17;
                  unint64_t v18 = llvm::hash_value(*(void **)(a1 + 112), *(void *)(a1 + 120));
                  unint64_t v102 = v18;
                  uint64_t v19 = a1 + 128;
                  if (a1 + 128 != a2)
                  {
                    unint64_t v91 = v18;
                    llvm::hash_value(*(void **)(a1 + 128), *(void *)(a1 + 136));
                    unint64_t v20 = v4 ^ (v4 >> 47);
                    unint64_t v21 = 0x9DDFEA08EB382D69
                        * (v4 ^ (((0x9DDFEA08EB382D69 * (v20 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ (0xB492B66FBE98F273 * v4))));
                    unint64_t v22 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    uint64_t v23 = __ROR8__(v20 - 0x622015F714C7D297 * (v22 ^ (v22 >> 47)), 33);
                    unint64_t v24 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
                    unint64_t v25 = v12;
                    unint64_t v26 = 0xB492B66FBE98F273 * v23;
                    uint64_t v27 = v24 + v14 - 0x4B6D499041670D8DLL * v23;
                    unint64_t v28 = v16 + v93 + v27 + v91;
                    uint64_t v29 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
                    unint64_t v30 = v16 + v29 - 0x4B6D499041670D8DLL * __ROR8__(v93 + v4 - 0x4B6D499041670D8DLL * v4, 42);
                    uint64_t v31 = __ROR8__(v16 + v93 + v27, 44) + v27 + __ROR8__(v30 + v10 + v91 + v27, 21);
                    unint64_t v32 = v6 - 0x6D8ED9027DD26057 * v4;
                    unint64_t v33 = v32 + v8 + v10 + v25;
                    unint64_t v34 = (0xB492B66FBE98F273 * __ROR8__(v29 + v4 + v8, 37)) ^ v24;
                    unint64_t v35 = __ROR8__(v32 + v8 + v10, 44) + v32 + __ROR8__(v34 + v20 + v32 + v25, 21);
                    unint64_t v90 = ~(unint64_t)&v95;
                    unint64_t v36 = 64;
                    while (1)
                    {
                      unint64_t v92 = v34;
                      uint64_t v94 = v31;
                      unint64_t v95 = llvm::hash_value(*(void **)v19, *(void *)(v19 + 8));
                      if (v19 + 16 == a2)
                      {
                        uint64_t v39 = 8;
                        unint64_t v40 = &v96;
                      }
                      else
                      {
                        unint64_t v96 = llvm::hash_value(*(void **)(v19 + 16), *(void *)(v19 + 24));
                        if (v19 + 32 == a2)
                        {
                          uint64_t v39 = 16;
                          unint64_t v40 = &v97;
                        }
                        else
                        {
                          unint64_t v97 = llvm::hash_value(*(void **)(v19 + 32), *(void *)(v19 + 40));
                          if (v19 + 48 == a2)
                          {
                            uint64_t v39 = 24;
                            unint64_t v40 = &v98;
                          }
                          else
                          {
                            unint64_t v98 = llvm::hash_value(*(void **)(v19 + 48), *(void *)(v19 + 56));
                            if (v19 + 64 == a2)
                            {
                              uint64_t v39 = 32;
                              unint64_t v40 = &v99;
                            }
                            else
                            {
                              unint64_t v99 = llvm::hash_value(*(void **)(v19 + 64), *(void *)(v19 + 72));
                              if (v19 + 80 == a2)
                              {
                                uint64_t v39 = 40;
                                unint64_t v40 = &v100;
                              }
                              else
                              {
                                unint64_t v100 = llvm::hash_value(*(void **)(v19 + 80), *(void *)(v19 + 88));
                                if (v19 + 96 == a2)
                                {
                                  uint64_t v39 = 48;
                                  unint64_t v40 = &v101;
                                }
                                else
                                {
                                  unint64_t v101 = llvm::hash_value(*(void **)(v19 + 96), *(void *)(v19 + 104));
                                  if (v19 + 112 != a2)
                                  {
                                    unint64_t v102 = llvm::hash_value(*(void **)(v19 + 112), *(void *)(v19 + 120));
                                    if (v19 + 128 == a2)
                                    {
                                      uint64_t v19 = a2;
                                    }
                                    else
                                    {
                                      uint64_t v37 = *(void **)(v19 + 128);
                                      uint64_t v38 = *(void *)(v19 + 136);
                                      v19 += 128;
                                      llvm::hash_value(v37, v38);
                                    }
                                    uint64_t v39 = 64;
                                    goto LABEL_55;
                                  }
                                  uint64_t v39 = 56;
                                  unint64_t v40 = &v102;
                                }
                              }
                            }
                          }
                        }
                      }
                      uint64_t v41 = 64 - v39;
                      uint64_t v42 = v39;
                      if (v39 != 64 - v39)
                      {
                        do
                        {
                          uint64_t v67 = v42;
                          uint64_t v42 = v41;
                          uint64_t v41 = v67 % v41;
                        }
                        while (v41);
                        uint64_t v68 = (unint64_t *)((char *)&v95 + v42);
                        do
                        {
                          char v70 = *((unsigned char *)v68 - 1);
                          uint64_t v68 = (unint64_t *)((char *)v68 - 1);
                          char v69 = v70;
                          unint64_t v71 = &v68[(unint64_t)v39 / 8];
                          unint64_t v72 = v68;
                          do
                          {
                            unint64_t v73 = v72;
                            unint64_t v72 = v71;
                            *(unsigned char *)unint64_t v73 = *(unsigned char *)v71;
                            unint64_t v74 = (char *)((char *)&v103 - (char *)v71);
                            BOOL v75 = __OFSUB__(v39, v74);
                            uint64_t v77 = v39 - (void)v74;
                            char v76 = (v77 < 0) ^ v75;
                            unint64_t v71 = (unint64_t *)((char *)&v95 + v77);
                            if (v76) {
                              unint64_t v71 = &v72[(unint64_t)v39 / 8];
                            }
                          }
                          while (v71 != v68);
                          *(unsigned char *)unint64_t v72 = v69;
                        }
                        while (v68 != &v95);
                        goto LABEL_54;
                      }
                      if ((unint64_t)v40 + v90 >= (v39 ^ 0x3FuLL)) {
                        unint64_t v43 = v39 ^ 0x3F;
                      }
                      else {
                        unint64_t v43 = (unint64_t)v40 + v90;
                      }
                      int v44 = &v95;
                      uint64_t v45 = v39;
                      if (v43 >= 0xF)
                      {
                        if (&v95 >= (unint64_t *)((char *)&v95 + v39 + v43 + 1)
                          || (uint64_t v45 = v39, (char *)&v95 + v39 >= (char *)&v95 + v43 + 1))
                        {
                          unint64_t v46 = v43 + 1;
                          uint64_t v47 = (v43 + 1) & 0x70;
                          uint64_t v48 = (unint64_t *)((char *)&v95 + v39);
                          unint64_t v49 = v95;
                          unint64_t v50 = v96;
                          unint64_t v51 = *(unint64_t *)((char *)&v95 + v39 + 8);
                          unint64_t v95 = *(unint64_t *)((char *)&v95 + v39);
                          unint64_t v96 = v51;
                          *uint64_t v48 = v49;
                          v48[1] = v50;
                          if (v47 != 16)
                          {
                            char v52 = (unint64_t *)((char *)&v97 + v39);
                            unint64_t v53 = v97;
                            unint64_t v54 = v98;
                            unint64_t v55 = *(unint64_t *)((char *)&v97 + v39 + 8);
                            unint64_t v97 = *(unint64_t *)((char *)&v97 + v39);
                            unint64_t v98 = v55;
                            *char v52 = v53;
                            v52[1] = v54;
                            if (v47 != 32)
                            {
                              BOOL v56 = (unint64_t *)((char *)&v99 + v39);
                              unint64_t v57 = v99;
                              unint64_t v58 = v100;
                              unint64_t v59 = *(unint64_t *)((char *)&v99 + v39 + 8);
                              unint64_t v99 = *(unint64_t *)((char *)&v99 + v39);
                              unint64_t v100 = v59;
                              *BOOL v56 = v57;
                              v56[1] = v58;
                              if (v47 != 48)
                              {
                                unint64_t v60 = (unint64_t *)((char *)&v101 + v39);
                                unint64_t v61 = v101;
                                unint64_t v62 = v102;
                                unint64_t v63 = *(unint64_t *)((char *)&v101 + v39 + 8);
                                unint64_t v101 = *(unint64_t *)((char *)&v101 + v39);
                                unint64_t v102 = v63;
                                *unint64_t v60 = v61;
                                v60[1] = v62;
                              }
                            }
                          }
                          if (v46 == v47) {
                            goto LABEL_54;
                          }
                          uint64_t v45 = v39 + v47;
                          int v44 = (unint64_t *)((char *)&v95 + v47);
                        }
                      }
                      int64_t v64 = (unint64_t *)((char *)v44 + 1);
                      do
                      {
                        char v65 = *((unsigned char *)v64 - 1);
                        *((unsigned char *)v64 - 1) = *((unsigned char *)&v95 + v45);
                        *((unsigned char *)&v95 + v45) = v65;
                        if (v64 == v40) {
                          break;
                        }
                        int64_t v64 = (unint64_t *)((char *)v64 + 1);
                      }
                      while (v45++ != 63);
LABEL_54:
                      uint64_t v19 = a2;
LABEL_55:
                      unint64_t v78 = v30 + v33 + v26 + v96;
                      unint64_t v30 = v100 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v101, 42);
                      unint64_t v79 = v95 - 0x4B6D499041670D8DLL * v35;
                      unint64_t v80 = (0xB492B66FBE98F273 * __ROR8__(v78, 37)) ^ v94;
                      uint64_t v81 = __ROR8__(v92 + v28, 33);
                      unint64_t v35 = __ROR8__(v79 + v96 + v97, 44) + v79 + __ROR8__(v80 + v28 + v79 + v98, 21);
                      unint64_t v26 = 0xB492B66FBE98F273 * v81;
                      unint64_t v33 = v79 + v96 + v97 + v98;
                      unint64_t v82 = 0xB492B66FBE98F273 * v81 + v94 + v99;
                      uint64_t v31 = __ROR8__(v30 + v97 + v82 + v102, 21) + v82 + __ROR8__(v100 + v101 + v82, 44);
                      unint64_t v28 = v100 + v101 + v82 + v102;
                      v36 += v39;
                      unint64_t v34 = v80;
                      if (v19 == a2)
                      {
                        unint64_t v84 = 0x9DDFEA08EB382D69
                            * (v28 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v28)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v28)));
                        uint64_t v85 = v80
                            - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                            - 0x622015F714C7D297 * (v84 ^ (v84 >> 47));
                        unint64_t v86 = 0x9DDFEA08EB382D69
                            * (v31 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v31)));
                        unint64_t v87 = 0x9DDFEA08EB382D69 * (v86 ^ (v86 >> 47))
                            - 0x4B6D499041670D8DLL * ((v36 ^ (v36 >> 47)) + v81);
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69
                               * (v87 ^ ((0x9DDFEA08EB382D69 * (v87 ^ v85)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v87 ^ v85)))) ^ ((0x9DDFEA08EB382D69 * (v87 ^ ((0x9DDFEA08EB382D69 * (v87 ^ v85)) >> 47) ^ (0x9DDFEA08EB382D69 * (v87 ^ v85)))) >> 47));
                      }
                    }
                  }
                  unint64_t v83 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v95, v83, v4);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)*a1 != a2[1]) {
    return 0;
  }
  uint64_t v3 = v2[3];
  if (v3 != a2[5]) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = v2[2];
    uint64_t v5 = a2[4];
    uint64_t v6 = v4 + 16 * v3;
    while (1)
    {
      size_t v7 = *(void *)(v4 + 8);
      if (v7 != *(void *)(v5 + 8) || v7 && memcmp(*(const void **)v4, *(const void **)v5, v7)) {
        break;
      }
      v4 += 16;
      v5 += 16;
      if (v4 == v6) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseStringElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseStringElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL>(llvm::function_ref<void ()(mlir::detail::DenseStringElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<llvm::StringRef> &,BOOL &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3 = **a1;
  __n128 v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  void v10[2] = v4;
  v10[0] = v3;
  __n128 v6 = mlir::detail::DenseStringElementsAttrStorage::construct(a2, v10);
  uint64_t v7 = v5;
  unint64_t v8 = a1[1];
  if (v8->n128_u64[0]) {
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  }
  return v7;
}

__n128 mlir::detail::DenseStringElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  unint64_t v4 = a2[1].n128_u64[1];
  if (v4)
  {
    if (a2[2].n128_u8[8]) {
      LODWORD(v4) = 1;
    }
    uint64_t v5 = (int)v4;
    uint64_t v6 = 16 * (int)v4;
    if ((int)v4 <= 0)
    {
      uint64_t v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (int)v4, 3);
    }
    else
    {
      unint64_t v7 = a2[1].n128_u64[0];
      uint64_t v8 = v4;
      if (v4 >= 5)
      {
        uint64_t v17 = v4 & 3;
        if ((v5 & 3) == 0) {
          uint64_t v17 = 4;
        }
        uint64_t v9 = v8 - v17;
        int64x2_t v18 = 0uLL;
        int64x2_t v19 = (int64x2_t)(unint64_t)v6;
        unint64_t v20 = (const double *)(v7 + 40);
        uint64_t v21 = v9;
        do
        {
          unint64_t v22 = v20 - 4;
          unsigned long long v23 = (unsigned __int128)vld2q_f64(v22);
          unsigned long long v24 = (unsigned __int128)vld2q_f64(v20);
          int64x2_t v19 = vaddq_s64((int64x2_t)v23, v19);
          int64x2_t v18 = vaddq_s64((int64x2_t)v24, v18);
          v20 += 8;
          v21 -= 4;
        }
        while (v21);
        uint64_t v10 = vaddvq_s64(vaddq_s64(v18, v19));
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = v6;
      }
      unint64_t v25 = (uint64_t *)(v7 + 16 * v9 + 8);
      uint64_t v26 = v8 - v9;
      do
      {
        uint64_t v27 = *v25;
        v25 += 2;
        v10 += v27;
        --v26;
      }
      while (v26);
      uint64_t v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v10, 3);
      uint64_t v28 = 0;
      uint64_t v29 = (char *)(v16 + v6);
      uint64_t v30 = 16 * v8;
      do
      {
        memcpy(v29, *(const void **)(v7 + v28), *(void *)(v7 + v28 + 8));
        uint64_t v31 = *(void *)(v7 + v28 + 8);
        unint64_t v32 = (void *)(v16 + v28);
        *unint64_t v32 = v29;
        v32[1] = v31;
        v29 += *(void *)(v7 + v28 + 8);
        v28 += 16;
      }
      while (v30 != v28);
    }
    *(void *)(__sz + 80) += 48;
    uint64_t v33 = *(void *)__sz;
    if (*(void *)__sz && ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - v33 + 48 <= *(void *)(__sz + 8) - v33)
    {
      unint64_t v34 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unsigned int v35 = *(_DWORD *)(__sz + 24) >> 7;
      if (v35 >= 0x1E) {
        LOBYTE(v35) = 30;
      }
      uint64_t v36 = 4096 << v35;
      buffer = (char *)llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
      uint64_t v38 = *(unsigned int *)(__sz + 24);
      if (v38 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v38 + 1, 8);
        LODWORD(v38) = *(_DWORD *)(__sz + 24);
      }
      *(void *)(*(void *)(__sz + 16) + 8 * v38) = buffer;
      ++*(_DWORD *)(__sz + 24);
      *(void *)(__sz + 8) = &buffer[v36];
      unint64_t v34 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)__sz = v34 + 48;
    unsigned __int8 v39 = a2[2].n128_u8[8];
    __n128 result = *a2;
    *(void *)unint64_t v34 = 0;
    *(__n128 *)(v34 + 8) = result;
    *(unsigned char *)(v34 + 24) = v39;
    *(void *)(v34 + 32) = v16;
    *(void *)(v34 + 40) = v5;
  }
  else
  {
    *(void *)(__sz + 80) += 48;
    if (*(void *)__sz) {
      BOOL v11 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 48 > *(void *)(__sz + 8)
    }
                                                                                    - *(void *)__sz;
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)(__sz + 24) >> 7;
      if (v12 >= 0x1E) {
        LOBYTE(v12) = 30;
      }
      uint64_t v13 = 4096 << v12;
      unint64_t v14 = (char *)llvm::allocate_buffer(4096 << v12, (std::align_val_t)8uLL);
      uint64_t v15 = *(unsigned int *)(__sz + 24);
      if (v15 >= *(_DWORD *)(__sz + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v15 + 1, 8);
        LODWORD(v15) = *(_DWORD *)(__sz + 24);
      }
      *(void *)(*(void *)(__sz + 16) + 8 * v15) = v14;
      ++*(_DWORD *)(__sz + 24);
      *(void *)(__sz + 8) = &v14[v13];
      unint64_t v41 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v41 = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)__sz = v41 + 48;
    unsigned __int8 v42 = a2[2].n128_u8[8];
    __n128 result = *a2;
    *(void *)unint64_t v41 = 0;
    *(__n128 *)(v41 + 8) = result;
    *(unsigned char *)(v41 + 24) = v42;
    *(void *)(v41 + 32) = 0;
    *(void *)(v41 + 40) = 0;
  }
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail30DenseStringElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_23DenseStringElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefINS_9StringRefEEEbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v17 = *a5;
  uint64_t v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  uint64_t v9 = *(void **)(a6 + 8);
  uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19, v8);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  }
  unsigned int v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  uint64_t v15 = &v17;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  }
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APFloat>(_DWORD *a1, llvm *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    uint64_t v10 = a1;
    uint64_t v6 = this;
    this = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      this = v6;
    }
  }
  uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hash_value(this, this);
  unint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)(a2 + 8) != **(void **)a1) {
    return 0;
  }
  unint64_t v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  unint64_t v4 = *(void **)(a2 + 24);
  uint64_t v6 = (void *)v2[2];
  uint64_t v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6) {
    return 0;
  }
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
  {
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  }
  else
  {
    return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::FloatAttrStorage::construct(uint64_t *a1, uint64_t *a2)
{
  _OWORD v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2 + 2;
  uint64_t v5 = (void *)a2[2];
  uint64_t v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, v4);
    a1[10] += 48;
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_7;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v4);
    a1[10] += 48;
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_7;
    }
  }
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 48 <= a1[1] - v7)
  {
    int v8 = (void *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_12;
  }
LABEL_7:
  unsigned int v9 = *((_DWORD *)a1 + 6) >> 7;
  if (v9 >= 0x1E) {
    LOBYTE(v9) = 30;
  }
  uint64_t v10 = 4096 << v9;
  buffer = (char *)llvm::allocate_buffer(4096 << v9, (std::align_val_t)8uLL);
  uint64_t v12 = *((unsigned int *)a1 + 6);
  if (v12 >= *((_DWORD *)a1 + 7))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v12 + 1, 8);
    LODWORD(v12) = *((_DWORD *)a1 + 6);
  }
  *(void *)(a1[2] + 8 * v12) = buffer;
  ++*((_DWORD *)a1 + 6);
  a1[1] = (uint64_t)&buffer[v10];
  int v8 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_12:
  *a1 = (uint64_t)(v8 + 6);
  if (v6 == (void *)v16[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v16);
    *int v8 = 0;
    v8[1] = v3;
    uint64_t v13 = v8 + 3;
    if (v6 != (void *)v15[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t)v15);
      if (v6 != (void *)v15[0]) {
        goto LABEL_15;
      }
LABEL_20:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v15);
      if (v6 != (void *)v16[0]) {
        goto LABEL_16;
      }
LABEL_21:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
      return v8;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)v16);
    *int v8 = 0;
    v8[1] = v3;
    uint64_t v13 = v8 + 3;
    if (v6 != (void *)v15[0]) {
      goto LABEL_14;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v15);
  if (v6 == (void *)v15[0]) {
    goto LABEL_20;
  }
LABEL_15:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v15);
  if (v6 == (void *)v16[0]) {
    goto LABEL_21;
  }
LABEL_16:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
  return v8;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v17 = *a5;
  int v8 = (const llvm::detail::DoubleAPFloat *)(a6 + 8);
  unsigned int v9 = *(void **)(a6 + 8);
  uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19, v8);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v19, v8);
  }
  unsigned int v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  uint64_t v15 = &v17;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  }
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)(a2 + 8) != **(void **)a1) {
    return 0;
  }
  uint64_t v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 24);
  uint64_t v6 = (void *)v2[2];
  uint64_t v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6) {
    return 0;
  }
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
  {
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  }
  else
  {
    return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat &>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v17 = *a5;
  int v8 = (void *)(a6 + 8);
  unsigned int v9 = *(void **)(a6 + 8);
  uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v10 == v9) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v19, v8);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v19, (uint64_t)v8);
  }
  unsigned int v11 = llvm::hash_combine<mlir::Type,llvm::APFloat>(&v17, (llvm *)&v18);
  v14[0] = &v17;
  v14[1] = v16;
  uint64_t v15 = &v17;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl((unsigned __int8 **)a1, a4, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
  if (v10 == (void *)v19[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v19);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v19);
  }
  return ParametricStorageTypeImpl;
}

uint64_t llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)(a2 + 8) != **(void **)a1) {
    return 0;
  }
  uint64_t v3 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 24);
  uint64_t v6 = (void *)v2[2];
  uint64_t v5 = (const llvm::detail::DoubleAPFloat *)(v2 + 2);
  if (v4 != v6) {
    return 0;
  }
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
  {
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v3, v5);
  }
  else
  {
    return llvm::detail::IEEEFloat::bitwiseIsEqual(v3, v5);
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FloatAttrStorage * mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat>(llvm::function_ref<void ()(mlir::detail::FloatAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APFloat &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = mlir::detail::FloatAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeENS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v18[1] = v12;
  uint64_t v15 = *a3;
  unsigned int v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a4);
  }
  else {
    long long __p = *(void **)a4;
  }
  unsigned int v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&__p);
  v13[0] = &v15;
  v13[1] = v18;
  uint64_t v14 = &v15;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return ParametricStorageTypeImpl;
}

unint64_t llvm::hash_combine<mlir::Type,llvm::APInt>(_DWORD *a1, llvm *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    uint64_t v10 = a1;
    uint64_t v6 = this;
    this = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      this = v6;
    }
  }
  uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hash_value(this, this);
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) != *(void *)*a1) {
    return 0;
  }
  uint64_t v4 = (const void **)(a2 + 16);
  uint64_t v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u) {
    return llvm::APInt::equalSlowCase(v4, v5);
  }
  else {
    return *v4 == *v5;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt const&>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt const&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::IntegerAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 4);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *((_DWORD *)a2 + 4) = 0;
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v6 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E) {
      LOBYTE(v7) = 30;
    }
    uint64_t v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    uint64_t v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v8];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)unint64_t result = 0;
  *(void *)(result + 8) = v5;
  *(_DWORD *)(result + 24) = v3;
  *(void *)(result + 16) = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERKNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt &>(mlir::MLIRContext *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v12[0] = a2;
  v12[1] = a1;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v18[1] = v12;
  uint64_t v15 = *a3;
  unsigned int v17 = *(_DWORD *)(a4 + 8);
  if (v17 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a4);
  }
  else {
    long long __p = *(void **)a4;
  }
  unsigned int v9 = llvm::hash_combine<mlir::Type,llvm::APInt>(&v15, (llvm *)&__p);
  v13[0] = &v15;
  v13[1] = v18;
  uint64_t v14 = &v15;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, a2, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
  if (v17 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return ParametricStorageTypeImpl;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) != *(void *)*a1) {
    return 0;
  }
  uint64_t v4 = (const void **)(a2 + 16);
  uint64_t v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u) {
    return llvm::APInt::equalSlowCase(v4, v5);
  }
  else {
    return *v4 == *v5;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::Type &,llvm::APInt &>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::Type &,llvm::APInt &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_4TypeERNS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[0] = a2;
  v14[1] = a3;
  unint64_t v13 = *a5;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    unint64_t v7 = 0x1E8EB8000uLL;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      unint64_t v7 = 0x1E8EB8000;
    }
  }
  uint64_t v18 = *(void *)(v7 + 3024);
  unsigned int v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v15, 0, v15, (char *)v16, &v13);
  uint64_t v12 = &v13;
  *(void *)&v15[0] = &v13;
  *((void *)&v15[0] + 1) = v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(llvm::function_ref<void ()(mlir::detail::IntegerSetAttrStorage *)>,mlir::TypeID,mlir::IntegerSet &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    uint64_t v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *uint64_t v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *uint64_t v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  {
    unint64_t v13 = a1;
    uint64_t v9 = a2;
    a2 = v9;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v13;
      a2 = v9;
    }
  }
  uint64_t v4 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v19 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v16[0] = v4;
  unint64_t v14 = 0;
  unint64_t v5 = llvm::hash_value(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v14, (void *)v16 + 1, (unint64_t)v17, v5);
  unint64_t v15 = v14;
  BOOL v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v15, v6, (unint64_t)v17, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v16, v15, v7, (char *)v17);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) == *(void *)*a1
    && (size_t v4 = *(void *)(a2 + 24), v4 == v2[2])
    && (!v4 || !memcmp(*(const void **)(a2 + 16), (const void *)v2[1], v4)))
  {
    return *(void *)(a2 + 32) == v2[3];
  }
  else
  {
    return 0;
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  unint64_t v3 = mlir::detail::OpaqueAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::OpaqueAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  if (!v4)
  {
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  uint64_t v6 = a2[1];
  uint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
  uint64_t v8 = v7;
  if (v4 < 8)
  {
    uint64_t v9 = (unsigned char *)v7;
    int v10 = (char *)v6;
  }
  else
  {
    uint64_t v9 = (unsigned char *)v7;
    int v10 = (char *)v6;
    if ((unint64_t)(v7 - v6) >= 0x20)
    {
      if (v4 < 0x20)
      {
        unint64_t v11 = 0;
        goto LABEL_12;
      }
      unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v12 = (long long *)(v6 + 16);
      unint64_t v13 = (_OWORD *)(v7 + 16);
      unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 32;
      }
      while (v14);
      if (v4 == v11) {
        goto LABEL_18;
      }
      if ((v4 & 0x18) != 0)
      {
LABEL_12:
        uint64_t v9 = (unsigned char *)(v7 + (v4 & 0xFFFFFFFFFFFFFFF8));
        int v10 = (char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v16 = (uint64_t *)(v6 + v11);
        uint64_t v17 = (void *)(v7 + v11);
        unint64_t v18 = v11 - (v4 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v19 = *v16++;
          *v17++ = v19;
          v18 += 8;
        }
        while (v18);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      int v10 = (char *)(v6 + v11);
      uint64_t v9 = (unsigned char *)(v7 + v11);
    }
  }
  do
  {
LABEL_17:
    char v20 = *v10++;
    *v9++ = v20;
  }
  while (v10 != (char *)(v6 + v4));
LABEL_18:
  *(unsigned char *)(v7 + v4) = 0;
LABEL_19:
  *(void *)(__sz + 80) += 40;
  if (*(void *)__sz) {
    BOOL v21 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 40 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v21 = 1;
  }
  if (v21)
  {
    unsigned int v22 = *(_DWORD *)(__sz + 24) >> 7;
    if (v22 >= 0x1E) {
      LOBYTE(v22) = 30;
    }
    uint64_t v23 = 4096 << v22;
    buffer = (char *)llvm::allocate_buffer(4096 << v22, (std::align_val_t)8uLL);
    uint64_t v25 = *(unsigned int *)(__sz + 24);
    if (v25 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v25) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v23];
    unint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 5;
  *unint64_t result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  result[4] = v5;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    int v10 = a2;
    unint64_t v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = v4;
  unint64_t v12 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, (*a2 >> 4) ^ (*a2 >> 9));
  unint64_t v13 = v12;
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2[1] != *(void *)*a1) {
    return 0;
  }
  if (a2[3] == v2[2]) {
    return a2[4] == v2[3];
  }
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(long long **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::SparseElementsAttrStorage::construct(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v5 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v11 = v4;
    long long v12 = v3;
    unsigned int v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v7];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v11;
    long long v3 = v12;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 40;
  *(void *)unint64_t result = 0;
  *(_OWORD *)(result + 8) = v3;
  *(_OWORD *)(result + 24) = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2[1] != *(void *)*a1) {
    return 0;
  }
  if (a2[3] == v2[2]) {
    return a2[4] == v2[3];
  }
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr &,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::SparseElementsAttrStorage::construct(a2, *(long long **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeERNS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<long long,llvm::ArrayRef<long long>>(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    int v10 = a1;
    uint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8));
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) == *(void *)*a1 && (uint64_t v3 = *(void *)(a2 + 24), v3 == v2[2])) {
    return memcmp(*(const void **)(a2 + 16), (const void *)v2[1], 8 * v3) == 0;
  }
  else {
    return 0;
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3 = mlir::detail::StridedLayoutAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::StridedLayoutAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v5 = a2[1];
    uint64_t v6 = 8 * v4;
    uint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v4, 3);
    uint64_t v8 = v7;
    if ((unint64_t)(8 * v4 - 8) < 0x18)
    {
      unint64_t v9 = (void *)v7;
      int v10 = (uint64_t *)v5;
    }
    else
    {
      unint64_t v9 = (void *)v7;
      int v10 = (uint64_t *)v5;
      if ((unint64_t)(v7 - v5) >= 0x20)
      {
        unint64_t v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
        uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v9 = (void *)(v7 + v12);
        int v10 = (uint64_t *)(v5 + v12);
        unint64_t v13 = (long long *)(v5 + 16);
        uint64_t v14 = (_OWORD *)(v7 + 16);
        uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *uint64_t v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    do
    {
      uint64_t v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (uint64_t *)(v5 + v6));
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_11:
  *(void *)(__sz + 80) += 32;
  if (*(void *)__sz) {
    BOOL v18 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 32 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    unsigned int v19 = *(_DWORD *)(__sz + 24) >> 7;
    if (v19 >= 0x1E) {
      LOBYTE(v19) = 30;
    }
    uint64_t v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    uint64_t v22 = *(unsigned int *)(__sz + 24);
    if (v22 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v22) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v20];
    unint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 4;
  *unint64_t result = 0;
  result[1] = v3;
  result[2] = v8;
  result[3] = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(_DWORD *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    int v10 = a1;
    uint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(*(_DWORD **)a2, (_DWORD *)(*(void *)a2 + 8 * *(void *)(a2 + 8)));
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2[1] != *(void *)*a1) {
    return 0;
  }
  uint64_t v3 = a2[3];
  if (v3 != v2[2]) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v4 = (uint64_t *)a2[2];
  uint64_t v5 = (uint64_t *)v2[1];
  uint64_t v6 = 8 * v3 - 8;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    BOOL result = v9 == v7;
    BOOL v11 = v9 != v7 || v6 == 0;
    v6 -= 8;
  }
  while (!v11);
  return result;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  uint64_t v3 = mlir::detail::StridedLayoutAttrStorage::construct(__sz, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v17 = *a5;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a1;
    unint64_t v6 = 0x1E8EB8000uLL;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  uint64_t v7 = *(void *)(v6 + 3024);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (8 * ((v17 >> 4) ^ (v17 >> 9)) + 8));
  v15[0] = &v17;
  v15[1] = v18;
  uint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TypeAttrStorage * mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::TypeAttrStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    unint64_t v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *unint64_t v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *unint64_t v12 = 0;
    v12[1] = v4;
    unint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t *mlir::Dialect::addAttribute<mlir::AffineMapAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::AffineMapAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        uint64_t v3 = v15;
      }
      else {
        uint64_t v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    unint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::ArrayAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseArrayAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseIntOrFPElementsAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseStringElementsAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DenseResourceElementsAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DictionaryAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FloatAttr>(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::FloatAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)v10);
  char v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0) {
        char v3 = v14;
      }
      else {
        char v3 = (llvm **)v14[0];
      }
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v14[0], v14[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v11;
  }
  if (v4 != &v13) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerAttr>(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::IntegerAttr>(a1, (uint64_t)v10);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)v10);
  char v2 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0) {
        char v3 = v14;
      }
      else {
        char v3 = (llvm **)v14[0];
      }
      (*(void (**)(llvm **))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v14[0], v14[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v11;
  }
  if (v4 != &v13) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::IntegerSetAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  unint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSB_21IntegerSetAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::OpaqueAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::OpaqueAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SparseElementsAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StridedLayoutAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::StringAttr>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractAttribute::get<mlir::StringAttr>(a1, (uint64_t)v11);
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addAttribute<mlir::SymbolRefAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  unint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::TypeAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  unint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, 0, v10);
}

void *mlir::Dialect::addAttribute<mlir::UnitAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = (mlir::MLIRContext *)v27;
  LODWORD(v26) = 0;
  uint64_t v14 = (void *(*)(uint64_t *, void *))a1;
  unint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  BOOL v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v23 = &v12;
  unsigned long long v24 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    BOOL v7 = (void **)((char *)v15 + 8);
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t v9 = *(mlir::MLIRContext **)(a1 + 32);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(v9);
  uint64_t v25 = v9;
  int v26 = &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
  uint64_t v14 = _ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  unint64_t v15 = &v25;
  char v13 = &v14;
  return mlir::StorageUniquer::registerSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v13);
}

void mlir::AbstractAttribute::get<mlir::AffineMapAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSB_20AffineMapAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  void *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity;
  void v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3960), v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::getAffineMap(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::isIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&v3);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::AffineMapAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::detail::verifyAffineMapAsLayout(*(void *)(a2 + 8), a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::AffineMapAttr,mlir::Attribute,mlir::detail::AffineMapAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      unint64_t v14 = 95;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[105] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13AffineMapAttrES2_NSA_20AffineMapAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unint64_t v2 = *(void *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unint64_t v7 = v2;
  uint64_t LHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(LHS);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id;
  v8[1] = LHS;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapAttrStorage,mlir::AffineMap &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail20AffineMapAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13AffineMapAttrEJRNS1_9AffineMapEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id, &v7);
}

uint64_t mlir::detail::StorageUserBase<mlir::ArrayAttr,mlir::Attribute,mlir::detail::ArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSB_16ArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(uint64_t **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, v9);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9ArrayAttrES2_NSA_16ArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = a2;
  if (a4 >= *(unsigned int *)(a2 + 16)) {
    unint64_t v5 = *(unsigned int *)(a2 + 16);
  }
  else {
    unint64_t v5 = a4;
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  *(void *)&long long v10 = a3;
  *((void *)&v10 + 1) = v5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::ArrayAttrStorage,llvm::ArrayRef<mlir::Attribute>>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16ArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9ArrayAttrEJNS_8ArrayRefINS1_9AttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DenseArrayAttr,mlir::Attribute,mlir::detail::DenseArrayAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSB_21DenseArrayAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DenseArrayAttrES2_NSA_21DenseArrayAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v8 = a3;
  *((void *)&v8 + 1) = a4;
  *(void *)&long long v7 = a5;
  *((void *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseArrayAttr>(uint64_t a1, long long *a2, _OWORD *a3)
{
  v37[5] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  v18[0] = *(_OWORD *)(a1 + 8);
  v18[1] = v3;
  long long v4 = *a2;
  v17[0] = *a3;
  v17[1] = v4;
  mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace((uint64_t)v18, (uint64_t)v17, (uint64_t)&v33);
  mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v5 = v33;
  uint64_t v6 = v34;
  uint64_t v28 = v33;
  uint64_t v29 = v34;
  uint64_t v30 = v32;
  long long v31 = xmmword_1810FE310;
  unint64_t v7 = v36;
  if (!v36)
  {
    long long v10 = v32;
    goto LABEL_9;
  }
  if (v36 < 0x29)
  {
    uint64_t v9 = v32;
    size_t v8 = v36;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v30, v32, v36, 1);
  size_t v8 = v36;
  if (v36)
  {
    uint64_t v9 = v30;
LABEL_7:
    memcpy(v9, v35, v8);
  }
  *(void *)&long long v31 = v7;
  uint64_t v5 = v28;
  uint64_t v6 = v29;
  long long v10 = v30;
LABEL_9:
  uint64_t v11 = *v6;
  uint64_t v20 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v21[0] = &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id;
  v21[1] = Context;
  v27[0] = _ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeERjRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v27[1] = v21;
  uint64_t v24 = v20;
  uint64_t v25 = v11;
  v26[0] = v10;
  v26[1] = v7;
  unsigned int v14 = llvm::hash_combine<mlir::Type,long long,llvm::ArrayRef<char>>(&v24, &v25, (uint64_t)v26);
  v22[0] = &v24;
  v22[1] = v27;
  uint64_t v23 = &v24;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id, v14, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned int &,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v22);
  if (v30 != v32) {
    free(v30);
  }
  if (v35 != v37) {
    free(v35);
  }
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<mlir::Type,long long,llvm::ArrayRef<char>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void v15[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  if (*(void *)a1)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = *(void *)(a2 + 8) - 1;
    *(void *)a2 += 8;
    *(void *)(a2 + 8) = v6;
    uint64_t v7 = *v5;
  }
  else
  {
    uint64_t v7 = 0;
  }
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(*(unsigned char **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)&__src);
  size_t v8 = (void *)(a3 + 40);
  *(void *)(a3 + 16) = a3 + 40;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v4;
  *(_OWORD *)(a3 + 24) = xmmword_1810FE310;
  uint64_t v9 = __src;
  if ((void **)(a3 + 16) == &__src) {
    goto LABEL_14;
  }
  size_t v10 = __n;
  if (!__n) {
    goto LABEL_14;
  }
  if (__src != v15)
  {
    *(void *)(a3 + 16) = __src;
    *(void *)(a3 + 24) = v10;
    *(void *)(a3 + 32) = v14;
    return;
  }
  if (__n < 0x29)
  {
    size_t v11 = __n;
    goto LABEL_12;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod(a3 + 16, (void *)(a3 + 40), __n, 1);
  uint64_t v9 = __src;
  size_t v11 = __n;
  if (__n)
  {
    size_t v8 = *(void **)(a3 + 16);
LABEL_12:
    memcpy(v8, v9, v11);
    uint64_t v9 = __src;
  }
  *(void *)(a3 + 24) = v10;
  __uint64_t n = 0;
LABEL_14:
  if (v9 != v15) {
    free(v9);
  }
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<char>,void>::replace(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v19[5] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v4 = xmmword_1810FE310;
  long long v18 = xmmword_1810FE310;
  if (a2)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = v19;
    do
    {
      if (v6 >= *((void *)&v18 + 1))
      {
        char v8 = *a1;
        unint64_t v9 = v6 + 1;
        if (v6 + 1 > *((void *)&v18 + 1))
        {
          uint64_t v15 = v5;
          uint64_t v16 = a1;
          size_t v10 = v7;
          char v14 = *a1;
          long long v13 = v4;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v17, v7, v9, 1);
          long long v4 = v13;
          char v8 = v14;
          uint64_t v5 = v15;
          a1 = v16;
          uint64_t v7 = v10;
          unint64_t v6 = v18;
        }
        *((unsigned char *)v17 + v6) = v8;
      }
      else
      {
        *((unsigned char *)v17 + v6) = *a1;
      }
      unint64_t v6 = v18 + 1;
      *(void *)&long long v18 = v18 + 1;
      ++a1;
      --v5;
    }
    while (v5);
    size_t v11 = v17;
    *(void *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = v4;
    if (v6 && &v17 != (void **)a3)
    {
      if (v11 != v19)
      {
        *(void *)a3 = v11;
        *(void *)(a3 + 8) = v6;
        *(void *)(a3 + 16) = *((void *)&v18 + 1);
        return;
      }
      size_t v12 = v6;
      if (v6 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v6, 1),
            uint64_t v7 = v17,
            (size_t v12 = v18) != 0))
      {
        memcpy(*(void **)a3, v7, v12);
        uint64_t v7 = v17;
      }
      *(void *)(a3 + 8) = v6;
      *(void *)&long long v18 = 0;
      size_t v11 = v7;
    }
    if (v11 != v19) {
      free(v11);
    }
  }
  else
  {
    *(void *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_1810FE310;
  }
}

void mlir::AbstractAttribute::get<mlir::DenseIntOrFPElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  size_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseIntOrFPElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSB_31DenseIntOrFPElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id;
  long long v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    unint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    long long v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  unint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType;
  long long v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    long long v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    unint64_t v2 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      long long v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>>(uint64_t a1)
{
  unint64_t v2 = malloc(0x20uLL);
  void *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat;
  void v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v3 = 0x1E8EB8000;
    if (v4)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v13 = 68;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v13;
      }
      uint64_t v7 = &v12[v6];
      unint64_t v8 = v13 - v6;
      if (v13 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v13 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3728), v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v9 = a1;
  mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(&v9, a2, (uint64_t)v10);
  if (v12)
  {
    int v5 = v10[0];
    *(unsigned char *)a3 = v10[0];
    *(unsigned char *)(a3 + 1) = v10[1];
    uint64_t v6 = v11;
    if (!v5) {
      uint64_t v11 = 0;
    }
    *(void *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 16) = 1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>((mlir::DenseElementsAttr *)&v9, a2, a3);
    if (v12) {
      BOOL v7 = v10[0] == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
LABEL_11:
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseIntOrFPElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      *((void *)&v20 + 1) = 63;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2480) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((void *)&v20 + 1) = 64;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2528) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((void *)&v20 + 1) = 62;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2496) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      *((void *)&v20 + 1) = 68;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2544) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      *((void *)&v20 + 1) = 61;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2456) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<signed char,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((void *)&v20 + 1) = 55;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2520) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 8) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((void *)&v20 + 1) = 53;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2488) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 16) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      *((void *)&v20 + 1) = 59;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2536) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 32) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      *((void *)&v20 + 1) = 55;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2520) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v14 = *(_OWORD *)(*a1 + 8);
  *(void *)&long long v14 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v14);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v14);
  if (result != 64) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v14);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v14;
  if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v15), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v14 = *(void *)(v5 + 8);
    uint64_t v8 = v14;
    *((void *)&v14 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      *((void *)&v20 + 1) = 64;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2528) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      *((void *)&v20 + 1) = 53;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2488) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      *((void *)&v20 + 1) = 62;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2496) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<long,unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      *((void *)&v20 + 1) = 54;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2504) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<unsigned long,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      *((void *)&v20 + 1) = 63;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2512) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      *((void *)&v20 + 1) = 77;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2400) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      *((void *)&v20 + 1) = 78;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2432) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      *((void *)&v20 + 1) = 76;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2416) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      *((void *)&v20 + 1) = 82;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2448) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 16 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      *((void *)&v20 + 1) = 75;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2376) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 2 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result != 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      *((void *)&v20 + 1) = 69;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2424) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 8) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      *((void *)&v20 + 1) = 67;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2408) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 16) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<long long>,float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      *((void *)&v20 + 1) = 73;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2440) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 16 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 32) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<float,double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      *((void *)&v20 + 1) = 55;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2472) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<float,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 4 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

uint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v15 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15);
  *(void *)&long long v15 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  uint64_t result = mlir::detail::getDenseElementBitWidth(v15);
  if (result != 64) {
    goto LABEL_9;
  }
  uint64_t result = mlir::Type::isIndex((mlir::Type *)&v15);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v13 = v15;
  if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v16 = v13;
  if (v13
    && (!mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16)
     || (uint64_t result = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v16), result == 1)))
  {
LABEL_3:
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 24);
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)&long long v15 = *(void *)(v5 + 8);
    uint64_t v8 = v15;
    *((void *)&v15 + 1) = v9;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v15);
    uint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v11);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = result;
    char v12 = 1;
    *(void *)(a2 + 48) = v8;
    *(void *)(a2 + 56) = v9;
  }
  else
  {
LABEL_9:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v12;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<double,std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      *((void *)&v20 + 1) = 56;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2464) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<double,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v26 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  unint64_t result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 32) {
    goto LABEL_38;
  }
  uint64_t v6 = *(void **)(*(void *)OperandRange + 136);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  BOOL v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v18 = *a1;
    uint64_t v19 = *(void *)(*a1 + 32);
    uint64_t v20 = *(unsigned __int8 *)(v18 + 24);
    uint64_t v22 = *(void *)(v18 + 16);
    *(void *)&long long v26 = *(void *)(v18 + 8);
    uint64_t v21 = v26;
    *((void *)&v26 + 1) = v22;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    unint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v20;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v19;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = result;
    char v25 = 1;
    *(void *)(a2 + 48) = v21;
    *(void *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    char v25 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v25;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,std::integral_constant<BOOL,true>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      *((void *)&v20 + 1) = 69;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2392) == a2)
  {
    long long v20 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(a1, (uint64_t)&v20);
      if (v22)
      {
        char v8 = *(unsigned char *)(*a1 + 24);
        if (BYTE8(v20)) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = v21;
        }
        uint64_t v10 = v20 + 8 * v9;
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 1) = v8;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v26 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  unint64_t result = mlir::detail::getDenseElementBitWidth(OperandRange);
  if (result != 64) {
    goto LABEL_38;
  }
  uint64_t v6 = *(void **)(*(void *)OperandRange + 136);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  BOOL v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t v18 = *a1;
    uint64_t v19 = *(void *)(*a1 + 32);
    uint64_t v20 = *(unsigned __int8 *)(v18 + 24);
    uint64_t v22 = *(void *)(v18 + 16);
    *(void *)&long long v26 = *(void *)(v18 + 8);
    uint64_t v21 = v26;
    *((void *)&v26 + 1) = v22;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    unint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v20;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v19;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = result;
    char v25 = 1;
    *(void *)(a2 + 48) = v21;
    *(void *)(a2 + 56) = v22;
  }
  else
  {
LABEL_38:
    char v25 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v25;
  return result;
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIdEEJENS5_17integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v20;
    if (v12)
    {
      *(void *)&long long v21 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      *((void *)&v21 + 1) = 70;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v21 + 1) >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((void *)&v21 + 1);
      }
      uint64_t v15 = v21 + v14;
      unint64_t v16 = *((void *)&v21 + 1) - v14;
      if (*((void *)&v21 + 1) - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = *((void *)&v21 + 1) - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v20;
    }
  }
  if (*(void *)(v5 + 2384) != a2)
  {
    char v6 = 0;
LABEL_4:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = v6;
    return;
  }
  long long v21 = *(_OWORD *)(*a1 + 8);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v8))
  {
    mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(a1, (uint64_t)&v21);
    char v6 = v23;
    if (!v23) {
      goto LABEL_4;
    }
    char v9 = *(unsigned char *)(*a1 + 24);
    if (BYTE8(v21)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v22;
    }
    uint64_t v11 = v21 + 16 * v10;
    *(unsigned char *)a3 = 1;
    *(unsigned char *)(a3 + 1) = v9;
    *(void *)(a3 + 8) = v11;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(_WORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
  }
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v26 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  unint64_t result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 32) {
    goto LABEL_36;
  }
  char v6 = *(void **)(*(void *)Value + 136);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (BOOL v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (BOOL v24 = 1),
        v24))
  {
    uint64_t v16 = *a1;
    uint64_t v17 = *(void *)(*a1 + 32);
    uint64_t v18 = *(unsigned __int8 *)(v16 + 24);
    uint64_t v20 = *(void *)(v16 + 16);
    *(void *)&long long v26 = *(void *)(v16 + 8);
    uint64_t v19 = v26;
    *((void *)&v26 + 1) = v20;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    unint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v22);
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v17;
    *(void *)(a2 + 32) = v18;
    *(void *)(a2 + 40) = result;
    char v23 = 1;
    *(void *)(a2 + 48) = v19;
    *(void *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    char v23 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v23;
  return result;
}

unint64_t mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v26 = *(_OWORD *)(*a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&OperandRange);
  unint64_t result = mlir::detail::getDenseElementBitWidth(Value);
  if (result != 64) {
    goto LABEL_36;
  }
  char v6 = *(void **)(*(void *)Value + 136);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (BOOL v24 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (BOOL v24 = 1),
        v24))
  {
    uint64_t v16 = *a1;
    uint64_t v17 = *(void *)(*a1 + 32);
    uint64_t v18 = *(unsigned __int8 *)(v16 + 24);
    uint64_t v20 = *(void *)(v16 + 16);
    *(void *)&long long v26 = *(void *)(v16 + 8);
    uint64_t v19 = v26;
    *((void *)&v26 + 1) = v20;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26);
    unint64_t result = mlir::ShapedType::getNumElements(ArgAttrsAttr, v22);
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v17;
    *(void *)(a2 + 32) = v18;
    *(void *)(a2 + 40) = result;
    char v23 = 1;
    *(void *)(a2 + 48) = v19;
    *(void *)(a2 + 56) = v20;
  }
  else
  {
LABEL_36:
    char v23 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 64) = v23;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v19 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v19;
    if (v11)
    {
      *(void *)&long long v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((void *)&v20 + 1) = 65;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v20 + 1) >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((void *)&v20 + 1);
      }
      uint64_t v14 = v20 + v13;
      unint64_t v15 = *((void *)&v20 + 1) - v13;
      if (*((void *)&v20 + 1) - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *((void *)&v20 + 1) - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v19;
    }
  }
  if (*(void *)(v5 + 2368) == a2)
  {
    uint64_t v6 = *(void *)a1;
    long long v20 = *(_OWORD *)(*(void *)a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v20);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
    char v9 = *(unsigned char *)(*(void *)a1 + 24);
    BOOL v10 = operator new(0x18uLL);
    void *v10 = &unk_1EC9CD708;
    v10[1] = v6;
    void v10[2] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 1) = v9;
    *(void *)(a3 + 8) = v10;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APInt,BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v18 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v18;
    if (v10)
    {
      *(void *)uint64_t v19 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      *(void *)&v19[8] = 61;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(void *)&v19[8] >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = *(void *)&v19[8];
      }
      unint64_t v13 = *(void *)v19 + v12;
      unint64_t v14 = *(void *)&v19[8] - v12;
      if (*(void *)&v19[8] - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = *(void *)&v19[8] - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v13 + v15, v17);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v18;
    }
  }
  if (*(void *)(v5 + 2328) == a2)
  {
    mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>(a1, (uint64_t)v19);
    char v6 = v20;
    if (v20)
    {
      char v7 = v19[0];
      v21[0] = *(_OWORD *)&v19[1];
      *(_OWORD *)((char *)v21 + 15) = *(_OWORD *)&v19[16];
      char v8 = *(unsigned char *)(*(void *)a1 + 24);
      char v9 = (char *)operator new(0x28uLL);
      *(void *)char v9 = &unk_1EC9CD678;
      v9[8] = v7;
      *(_OWORD *)(v9 + 9) = v21[0];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)v21 + 15);
      *(unsigned char *)(a3 + 1) = v8;
      *(void *)(a3 + 8) = v9;
      char v6 = 1;
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = v6;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x18uLL);
  *(void *)int v4 = &unk_1EC9CD708;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::AttributeElementIterator,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + a2;
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<BOOL,std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v13 = a3;
    unint64_t v3 = (void *)&unk_1E8EBA000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      unint64_t v17 = 54;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      char v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = (void *)&unk_1E8EBA000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (v3[107] == a2) {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>((uint64_t)a1, a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x28uLL);
  *(void *)int v4 = &unk_1EC9CD678;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::IntElementIterator,llvm::APInt>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 24) + a2;
  }
  unint64_t v7 = v5 + 7;
  unint64_t v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == 1) {
    unint64_t v8 = 1;
  }
  unint64_t v9 = v8 * v6;
  if (v5 == 1)
  {
    uint64_t v10 = (*(unsigned __int8 *)(v4 + (v9 >> 3)) >> (v9 & 7)) & 1;
    *((_DWORD *)a3 + 2) = 1;
    *(void *)a3 = v10;
    return;
  }
  *((_DWORD *)a3 + 2) = v5;
  if (v5 <= 0x40)
  {
    *(void *)a3 = 0;
    if (v7 < 8) {
      return;
    }
    goto LABEL_10;
  }
  llvm::APInt::initSlowCase(a3, 0, 0);
  if (*((_DWORD *)a3 + 2) >= 0x41u) {
    a3 = *(llvm::APInt **)a3;
  }
  if (v7 >= 8)
  {
LABEL_10:
    memmove(a3, (const void *)(v4 + (v9 >> 3)), v7 >> 3);
  }
}

void *mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::buildValueResult<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v11 = *(_OWORD *)(*(void *)a1 + 8);
  *(void *)&long long v11 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v11);
  __n128 result = (void *)mlir::Type::isInteger((mlir::Type *)&v11, 1);
  if (result)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 32);
    uint64_t v6 = *(unsigned __int8 *)(*(void *)a1 + 24);
    long long v11 = *(_OWORD *)(*(void *)a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v11);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
    char v9 = *(unsigned char *)(*(void *)a1 + 24);
    __n128 result = operator new(0x20uLL);
    *__n128 result = &unk_1EC9CD6A8;
    result[1] = v5;
    result[2] = v6;
    result[3] = 0;
    *(unsigned char *)(a2 + 1) = v9;
    *(void *)(a2 + 8) = result;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<std::complex<llvm::APInt>,llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = &unk_1E8EBA000;
  {
    uint64_t v18 = a2;
    uint64_t v5 = (void *)&unk_1E8EBA000;
    a2 = v18;
    if (v10)
    {
      *(void *)uint64_t v19 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      *(void *)&v19[8] = 75;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(void *)&v19[8] >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = *(void *)&v19[8];
      }
      unint64_t v13 = *(void *)v19 + v12;
      unint64_t v14 = *(void *)&v19[8] - v12;
      if (*(void *)&v19[8] - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = *(void *)&v19[8] - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v13 + v15, v17);
      uint64_t v5 = (void *)&unk_1E8EBA000;
      a2 = v18;
    }
  }
  if (v5[109] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexIntValues(this, (uint64_t)v19);
    char v6 = v20;
    if (v20)
    {
      char v7 = v19[0];
      v21[0] = *(_OWORD *)&v19[1];
      *(_OWORD *)((char *)v21 + 15) = *(_OWORD *)&v19[16];
      char v8 = *(unsigned char *)(*(void *)this + 24);
      char v9 = (char *)operator new(0x28uLL);
      *(void *)char v9 = &unk_1EC9CD738;
      v9[8] = v7;
      *(_OWORD *)(v9 + 9) = v21[0];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)v21 + 15);
      *(unsigned char *)(a3 + 1) = v8;
      *(void *)(a3 + 8) = v9;
      char v6 = 1;
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = v6;
  }
  else
  {
    mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(this, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v4 = &unk_1EC9CD6A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *((void *)v4 + 3) = *(void *)(a1 + 24);
  *a2 = v4;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::BoolElementIterator,BOOL>::at(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = *(void *)(a1 + 24) + a2;
  }
  return (*(unsigned __int8 *)(*(void *)(a1 + 8) + (v2 >> 3)) >> (v2 & 7)) & 1;
}

void mlir::detail::ElementsAttrTrait<mlir::DenseIntOrFPElementsAttr>::getValueImpl<llvm::APFloat,std::complex<llvm::APFloat>,std::integral_constant<BOOL,false>>(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v19 = a2;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    a2 = v19;
    if (v11)
    {
      *(void *)char v20 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      *(void *)&v20[8] = 63;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(void *)&v20[8] >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *(void *)&v20[8];
      }
      unint64_t v14 = *(void *)v20 + v13;
      unint64_t v15 = *(void *)&v20[8] - v13;
      if (*(void *)&v20[8] - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *(void *)&v20[8] - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a2 = v19;
    }
  }
  if (v5[340] == a2)
  {
    mlir::DenseElementsAttr::tryGetFloatValues(this, (uint64_t)v20);
    char v6 = v22;
    if (v22)
    {
      char v7 = v20[0];
      long long v23 = *(_OWORD *)&v20[1];
      *(_OWORD *)BOOL v24 = v21[0];
      *(void *)&v24[15] = *(void *)((char *)v21 + 15);
      char v8 = *(unsigned char *)(*(void *)this + 24);
      char v9 = (char *)operator new(0x30uLL);
      *(void *)char v9 = &unk_1EC9CD6D8;
      v9[8] = v7;
      long long v10 = *(_OWORD *)v24;
      *(_OWORD *)(v9 + 9) = v23;
      *(_OWORD *)(v9 + 25) = v10;
      *((void *)v9 + 5) = *(void *)&v24[15];
      *(unsigned char *)(a3 + 1) = v8;
      *(void *)(a3 + 8) = v9;
      char v6 = 1;
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = v6;
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(this, a2, a3);
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v4 = &unk_1EC9CD738;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexIntElementIterator,std::complex<llvm::APInt>>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 24) + a2;
  uint64_t v6 = v3;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v4, a3);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_24DenseIntOrFPElementsAttrEE12getValueImplINSt3__17complexIN4llvm7APFloatEEEJENS5_17integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::DenseElementsAttr *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = &unk_1E8EBA000;
  {
    uint64_t v19 = a2;
    uint64_t v5 = (void *)&unk_1E8EBA000;
    a2 = v19;
    if (v11)
    {
      *(void *)char v20 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      *(void *)&v20[8] = 77;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (*(void *)&v20[8] >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *(void *)&v20[8];
      }
      unint64_t v14 = *(void *)v20 + v13;
      unint64_t v15 = *(void *)&v20[8] - v13;
      if (*(void *)&v20[8] - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = *(void *)&v20[8] - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v14 + v16, v18);
      uint64_t v5 = (void *)&unk_1E8EBA000;
      a2 = v19;
    }
  }
  if (v5[111] == a2)
  {
    mlir::DenseElementsAttr::tryGetComplexFloatValues(this, (uint64_t)v20);
    char v6 = v22;
    if (v22)
    {
      char v7 = v20[0];
      long long v23 = *(_OWORD *)&v20[1];
      *(_OWORD *)BOOL v24 = v21[0];
      *(void *)&v24[15] = *(void *)((char *)v21 + 15);
      char v8 = *(unsigned char *)(*(void *)this + 24);
      char v9 = (char *)operator new(0x30uLL);
      *(void *)char v9 = &unk_1EC9CD768;
      v9[8] = v7;
      long long v10 = *(_OWORD *)v24;
      *(_OWORD *)(v9 + 9) = v23;
      *(_OWORD *)(v9 + 25) = v10;
      *((void *)v9 + 5) = *(void *)&v24[15];
      *(unsigned char *)(a3 + 1) = v8;
      *(void *)(a3 + 8) = v9;
      char v6 = 1;
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = v6;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (char *)operator new(0x30uLL);
  *(void *)long long v4 = &unk_1EC9CD6D8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::FloatElementIterator,llvm::APFloat>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v6 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = v3 + a2;
  llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v4, a3);
}

__n128 mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::clone@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (char *)operator new(0x30uLL);
  *(void *)long long v4 = &unk_1EC9CD768;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v4 + 24) = result;
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  *a2 = v4;
  return result;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<mlir::DenseElementsAttr::ComplexFloatElementIterator,std::complex<llvm::APFloat>>::at(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  long long v7 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = v4 + a2;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v5, &v8);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v8, (llvm::APFloatBase *)&v5, a3);
  if (v11 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v9 >= 0x41)
  {
    if (v8) {
      operator delete[](v8);
    }
  }
}

BOOL mlir::detail::storage_user_base_impl::hasTrait<mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v25 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v7 = v6;
    a1 = v25;
    if (v7)
    {
      uint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      unint64_t v28 = 79;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v28;
      }
      long long v10 = &v27[v9];
      unint64_t v11 = v28 - v9;
      if (v28 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v28 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v25;
    }
  }
  uint64_t v2 = v1[51];
  uint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v24 = v2;
    uint64_t v26 = a1;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    int v16 = v15;
    uint64_t v2 = v24;
    a1 = v26;
    if (v16)
    {
      uint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr::Trait<Empty>]";
      unint64_t v28 = 82;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v28;
      }
      uint64_t v19 = &v27[v18];
      unint64_t v20 = v28 - v18;
      if (v28 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v28 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::ElementsAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v24;
      a1 = v26;
    }
  }
  return v2 == a1 || v3[113] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_24DenseIntOrFPElementsAttrENS1_17DenseElementsAttrENSA_31DenseIntOrFPElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseStringElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseStringElementsAttr,mlir::DenseElementsAttr,mlir::detail::DenseStringElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSB_30DenseStringElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    int v6 = (void **)((char *)v11 + 8);
    do
    {
      int v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  void *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat;
  void v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v3 = 0x1E8EB8000;
    if (v4)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v13 = 68;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v13;
      }
      int v7 = &v12[v6];
      unint64_t v8 = v13 - v6;
      if (v13 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v13 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3728), v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v9 = a1;
  _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_((uint64_t)&v9, a2, (uint64_t)v10);
  if (v12)
  {
    int v5 = v10[0];
    *(unsigned char *)a3 = v10[0];
    *(unsigned char *)(a3 + 1) = v10[1];
    uint64_t v6 = v11;
    if (!v5) {
      uint64_t v11 = 0;
    }
    *(void *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 16) = 1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(&v9, a2, a3);
    if (v12) {
      BOOL v7 = v10[0] == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
LABEL_11:
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::isSplat(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 24);
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseStringElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb1EEEEEDaNS_6TypeIDET1_(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = &unk_1E8EBA000;
  {
    uint64_t v20 = a2;
    int v5 = (void *)&unk_1E8EBA000;
    a2 = v20;
    if (v12)
    {
      *(void *)&long long v21 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      *((void *)&v21 + 1) = 65;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v21 + 1) >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((void *)&v21 + 1);
      }
      uint64_t v15 = v21 + v14;
      unint64_t v16 = *((void *)&v21 + 1) - v14;
      if (*((void *)&v21 + 1) - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = *((void *)&v21 + 1) - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      int v5 = (void *)&unk_1E8EBA000;
      a2 = v20;
    }
  }
  if (v5[115] == a2)
  {
    long long v21 = *(_OWORD *)(*(void *)a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v7))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 32);
      long long v21 = *(_OWORD *)(*(void *)a1 + 8);
      uint64_t v9 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
      mlir::ShapedType::getNumElements(v9, v10);
      char v11 = *(unsigned char *)(*(void *)a1 + 24);
    }
    else
    {
      char v11 = 0;
      uint64_t v8 = 0;
    }
    *(unsigned char *)a3 = 1;
    *(unsigned char *)(a3 + 1) = v11;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_23DenseStringElementsAttrEE12getValueImplINS_9AttributeEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a2;
    unint64_t v5 = 0x1E8EB8000;
    a2 = v20;
    if (v12)
    {
      *(void *)&long long v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      *((void *)&v21 + 1) = 65;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v21 + 1) >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((void *)&v21 + 1);
      }
      uint64_t v15 = v21 + v14;
      unint64_t v16 = *((void *)&v21 + 1) - v14;
      if (*((void *)&v21 + 1) - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = *((void *)&v21 + 1) - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      unint64_t v5 = 0x1E8EB8000;
      a2 = v20;
    }
  }
  if (*(void *)(v5 + 2368) == a2)
  {
    uint64_t v7 = *a1;
    long long v21 = *(_OWORD *)(*a1 + 8);
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
    mlir::ShapedType::getNumElements(ArgAttrsAttr, v9);
    char v10 = *(unsigned char *)(*a1 + 24);
    char v11 = operator new(0x18uLL);
    *char v11 = &unk_1EC9CD708;
    v11[1] = v7;
    void v11[2] = 0;
    *(unsigned char *)(a3 + 1) = v10;
    *(void *)(a3 + 8) = v11;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = v6;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_23DenseStringElementsAttrENS1_17DenseElementsAttrENSA_30DenseStringElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void mlir::AbstractAttribute::get<mlir::DenseResourceElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  char v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::DenseResourceElementsAttr,mlir::Attribute,mlir::detail::DenseResourceElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    char v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType;
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  void *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat;
  void v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v3 = 0x1E8EB8000;
    if (v4)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v13 = 68;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v13;
      }
      uint64_t v7 = &v12[v6];
      unint64_t v8 = v13 - v6;
      if (v13 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v13 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3728), v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getValuesImpl(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::isSplat(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (a2) {
    a2 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  }
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::DenseResourceElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSB_32DenseResourceElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_25DenseResourceElementsAttrES2_NSA_32DenseResourceElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DenseResourceElementsAttr>(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1;
  uint64_t v3 = *(void *)(a1 + 8);
  long long v14 = *(_OWORD *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 40);
  if (v3)
  {
    int v4 = (void *)**a3;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  long long v10 = v14;
  uint64_t v11 = v15;
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id;
  v13[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_, (uint64_t)v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id, &v12, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::DictionaryAttr,mlir::Attribute,mlir::detail::DictionaryAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSB_21DictionaryAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(long long **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  if (v6)
  {
    uint64_t v8 = 16 * v6;
    do
    {
      long long v9 = *v7++;
      long long v12 = v9;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v12);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, CallableRegion);
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v11, *((uint64_t *)&v12 + 1));
      v8 -= 16;
    }
    while (v8);
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14DictionaryAttrES2_NSA_21DictionaryAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v5 = a3;
  *((void *)&v5 + 1) = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(a2, &v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::DictionaryAttr>(uint64_t a1, long long *a2)
{
  void v18[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v10 = *a2;
  long long v11 = v2;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace((uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v16);
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  unint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  uint64_t v4 = v17;
  if (!v17)
  {
    uint64_t v4 = 0;
    uint64_t v7 = (uint64_t *)v15;
    goto LABEL_9;
  }
  if (v17 < 4)
  {
    uint64_t v6 = v15;
    unsigned int v5 = v17;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v17, 16);
  unsigned int v5 = v17;
  if (v17)
  {
    uint64_t v6 = v13;
LABEL_7:
    memcpy(v6, v16, 16 * v5);
  }
  LODWORD(v14) = v4;
  uint64_t v7 = (uint64_t *)v13;
LABEL_9:
  uint64_t v8 = mlir::DictionaryAttr::get(Context, v7, v4);
  if (v13 != v15) {
    free(v13);
  }
  if (v16 != v18) {
    free(v16);
  }
  return v8;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::NamedAttribute>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(*(void *)(a1 + 8), a2, (uint64_t)&__src);
  uint64_t v4 = (void *)(a3 + 16);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x300000000;
  unsigned int v5 = v11;
  uint64_t v6 = __src;
  if (v11) {
    BOOL v7 = &__src == (void **)a3;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_14;
  }
  if (__src == v13)
  {
    if (v11 < 4)
    {
      unsigned int v9 = v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11, 16);
      unsigned int v9 = v11;
      uint64_t v6 = __src;
      if (!v11)
      {
LABEL_12:
        *(_DWORD *)(a3 + 8) = v5;
        goto LABEL_13;
      }
      uint64_t v4 = *(void **)a3;
    }
    memcpy(v4, v6, 16 * v9);
    uint64_t v6 = __src;
    goto LABEL_12;
  }
  *(void *)a3 = __src;
  int v8 = v12;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v8;
  __src = v13;
  int v12 = 0;
  uint64_t v6 = v13;
LABEL_13:
  unsigned int v11 = 0;
LABEL_14:
  if (v6 != v13) {
    free(v6);
  }
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::NamedAttribute>,void>::replace(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (a1)
  {
    unsigned int v5 = v21;
    uint64_t v6 = 16 * a1;
    do
    {
      while (1)
      {
        BOOL v7 = *(uint64_t **)a2;
        uint64_t v8 = *(void *)(a2 + 8) - 2;
        *(void *)a2 += 16;
        *(void *)(a2 + 8) = v8;
        mlir::NamedAttribute::NamedAttribute(v18, *v7, v7[1]);
        uint64_t v10 = v18[0];
        uint64_t v9 = v18[1];
        int v11 = v20;
        if (v20 >= HIDWORD(v20)) {
          break;
        }
        int v12 = &v19[2 * v20];
        *int v12 = v18[0];
        v12[1] = v9;
        unint64_t v13 = (v11 + 1);
        LODWORD(v20) = v11 + 1;
        v6 -= 16;
        if (!v6) {
          goto LABEL_7;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      uint64_t v14 = &v19[2 * v20];
      *uint64_t v14 = v10;
      v14[1] = v9;
      unint64_t v13 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      v6 -= 16;
    }
    while (v6);
LABEL_7:
    uint64_t v15 = v19;
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x300000000;
    if (v13 && &v19 != (void **)a3)
    {
      if (v15 == v21)
      {
        unsigned int v17 = v13;
        if (v13 < 4
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 16),
              unsigned int v17 = v20,
              unsigned int v5 = v19,
              v20))
        {
          memcpy(*(void **)a3, v5, 16 * v17);
          unsigned int v5 = v19;
        }
        *(_DWORD *)(a3 + 8) = v13;
      }
      else
      {
        *(void *)a3 = v15;
        int v16 = HIDWORD(v20);
        *(_DWORD *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 12) = v16;
        uint64_t v19 = v21;
        HIDWORD(v20) = 0;
      }
      LODWORD(v20) = 0;
      uint64_t v15 = v5;
    }
    if (v15 != v21) {
      free(v15);
    }
  }
  else
  {
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x300000000;
  }
}

void mlir::AbstractAttribute::get<mlir::FloatAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  int v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      BOOL v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>>(uint64_t a1)
{
  long long v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    long long v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      long long v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::FloatAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::FloatAttr,mlir::Attribute,mlir::detail::FloatAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[51] == a1;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSB_16FloatAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void mlir::detail::walkImmediateSubElementsImpl<mlir::FloatAttr>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v14[3] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  unint64_t v10 = (void *)a1[3];
  uint64_t v13 = a1[1];
  uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v11 == v10) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14, v9);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, v9);
  }
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  void v12[3] = a5;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v13);
  if (v11 == (void *)v14[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v14);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v14);
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9FloatAttrES2_NSA_16FloatAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FloatAttr>(void *a1, uint64_t a2, uint64_t **a3)
{
  _OWORD v17[3] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  int v4 = (const llvm::detail::DoubleAPFloat *)(a1 + 3);
  unint64_t v5 = (void *)a1[3];
  uint64_t v15 = a1[1];
  unint64_t v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v6 == v5)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17, v4);
    if (v15) {
      goto LABEL_3;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v17, v4);
    if (v15)
    {
LABEL_3:
      uint64_t v7 = **a3;
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v13 = v7;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (llvm::APFloatBase *)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  v14[1] = Context;
  uint64_t v10 = mlir::StorageUniquer::get<mlir::detail::FloatAttrStorage,mlir::Type &,llvm::APFloat const&>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail16FloatAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9FloatAttrEJRNS1_4TypeERKNS_7APFloatEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_, (uint64_t)v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id, &v13, (uint64_t)&v16);
  if (v6 == (void *)v17[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
  }
  return v10;
}

void llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::FloatAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(llvm::APFloatBase *a1, uint64_t a2)
{
  long long v2 = (llvm::detail::DoubleAPFloat *)(a2 + 24);
  int v3 = *(void **)(a2 + 24);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
  }
}

void mlir::AbstractAttribute::get<mlir::IntegerAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    unint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>>(uint64_t a1)
{
  long long v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType;
  int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    long long v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      long long v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::IntegerAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::IntegerAttr,mlir::Attribute,mlir::detail::IntegerAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[51] == a1;
}

void _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSB_18IntegerAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (const void **)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v14 = v12;
  unsigned int v16 = *(_DWORD *)(a2 + 24);
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v11);
    uint64_t v12 = v14;
  }
  else
  {
    long long __p = (void *)*v11;
  }
  v13[0] = a3;
  v13[1] = a4;
  void v13[2] = a5;
  _OWORD v13[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v13, v12);
  if (v16 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerAttrES2_NSA_18IntegerAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::IntegerAttr>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v18 = a1;
  int v4 = (const void **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v15 = v5;
  unsigned int v17 = *(_DWORD *)(a1 + 24);
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v4);
    if (v15) {
      goto LABEL_3;
    }
  }
  else
  {
    long long __p = (void *)*v4;
    if (v5)
    {
LABEL_3:
      uint64_t v6 = **a3;
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v19 = v6;
  BOOL isSignlessInteger = mlir::Type::isSignlessInteger((mlir::Type *)&v19, 1);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v9 = Context;
  if (isSignlessInteger)
  {
    unsigned int v10 = v17;
    if (v17 > 0x40) {
      BOOL v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v10;
    }
    else {
      BOOL v11 = __p == 0;
    }
    int v14 = v11;
    uint64_t v12 = mlir::BoolAttr::get(v9, (mlir::MLIRContext *)(v14 ^ 1u));
    if (v17 < 0x41) {
      return v12;
    }
  }
  else
  {
    uint64_t v12 = mlir::detail::AttributeUniquer::getWithTypeID<mlir::IntegerAttr,mlir::Type &,llvm::APInt const&>(Context, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id, &v19, (uint64_t)&__p);
    if (v17 < 0x41) {
      return v12;
    }
  }
  if (!__p) {
    return v12;
  }
  operator delete[](__p);
  return v12;
}

void llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerAttrStorage>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24) >= 0x41u)
  {
    long long v2 = *(void **)(a2 + 16);
    if (v2) {
      operator delete[](v2);
    }
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::IntegerSetAttr,mlir::Attribute,mlir::detail::IntegerSetAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14IntegerSetAttrES2_NSA_21IntegerSetAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unint64_t v2 = *(void *)(a2 + 8);
  mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unint64_t v7 = v2;
  uint64_t Context = (mlir::MLIRContext *)mlir::IntegerSet::getContext((mlir::IntegerSet *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetAttrStorage,mlir::IntegerSet &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail21IntegerSetAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14IntegerSetAttrEJRNS1_10IntegerSetEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id, &v7);
}

void mlir::AbstractAttribute::get<mlir::OpaqueAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  BOOL v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      unint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>>(uint64_t a1)
{
  unint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType;
  int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    unint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      int v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::OpaqueAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

BOOL mlir::detail::StorageUserBase<mlir::OpaqueAttr,mlir::Attribute,mlir::detail::OpaqueAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[51] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSB_17OpaqueAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 32);
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  void v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueAttrES2_NSA_17OpaqueAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueAttr>(void *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v12 = a1;
  uint64_t v3 = a1[4];
  if (!a1[1])
  {
    uint64_t v4 = 0;
    uint64_t v6 = a1[2];
    uint64_t v5 = a1[3];
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = **a2;
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if (!v3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = **a3;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v13 = v4;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v14[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id;
  v14[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10OpaqueAttrEJRNS1_10StringAttrERNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v20[1] = v14;
  uint64_t v17 = v13;
  v18[0] = v6;
  v18[1] = v5;
  uint64_t v19 = v7;
  unsigned int v10 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef,mlir::Type>(&v17, (uint64_t)v18, &v19);
  v15[0] = &v17;
  v15[1] = v20;
  unsigned int v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueAttr,void>::id, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueAttrStorage,mlir::StringAttr &,llvm::StringRef &,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::OpaqueAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

void mlir::AbstractAttribute::get<mlir::SparseElementsAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  unint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    unint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>>(uint64_t a1)
{
  unint64_t v2 = malloc(0x20uLL);
  void *v2 = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl;
  v2[1] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat;
  void v2[2] = mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType;
  v2[3] = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(a1);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v3 = 0x1E8EB8000;
    if (v4)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v13 = 68;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v13;
      }
      uint64_t v7 = &v12[v6];
      unint64_t v8 = v13 - v6;
      if (v13 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v13 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3728), v2);
}

void mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getValuesImpl(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v3 = a1;
  mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>((mlir::SparseElementsAttr *)&v3, a2, a3);
}

BOOL mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::isSplat(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (a2) {
    a2 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a2 + 8);
  }
  return mlir::ElementsAttr::getNumElements(v2, (uint64_t)a2) == 1;
}

uint64_t mlir::detail::ElementsAttrInterfaceTraits::Model<mlir::SparseElementsAttr>::getShapedType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<mlir::Attribute,llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    unint64_t v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned int v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      unint64_t v17 = 65;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      unint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2368) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(a1, (uint64_t)&v9);
  if (v13)
  {
    int v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APInt,BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned int v16 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      unint64_t v17 = 61;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2328) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<mlir::Attribute>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  ZeroAttr = mlir::SparseElementsAttr::getZeroAttr(a1);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  v25[0] = *(_OWORD *)(v5 + 8);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v7);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v21);
  uint64_t v8 = v21;
  int64_t v9 = (char *)v22 - (char *)v21;
  if (v22 == v21)
  {
    unint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v9 < 0) {
      abort();
    }
    uint64_t v10 = (char *)operator new((char *)v22 - (char *)v21);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = &unk_1EC989108;
  v12[1] = v10;
  void v12[2] = v11;
  void v12[3] = v11;
  void v12[4] = v5;
  v12[5] = 0;
  v12[6] = ZeroAttr;
  uint64_t v29 = v12;
  char v13 = *(void **)a1;
  if (v13) {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
  uint64_t v15 = (void *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
  uint64_t v24 = v15;
  *(void *)&v25[0] = 0;
  if (!v15)
  {
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)&v25[0];
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_16:
    uint64_t v18 = (void *)(a2 + 32);
    goto LABEL_17;
  }
  if (v15 == v23)
  {
    uint64_t v26 = (_OWORD *)((char *)v25 + 8);
    (*(void (**)(void *, char *))(v23[0] + 24))(v23, (char *)v25 + 8);
    unint64_t v17 = v26;
  }
  else
  {
    unint64_t v17 = (_OWORD *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
    uint64_t v26 = v17;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)&v25[0];
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v16 = a2 + 8;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v17) {
    goto LABEL_16;
  }
  if (v17 == (_OWORD *)((char *)v25 + 8))
  {
    *(void *)(a2 + 32) = v16;
    (*(void (**)(char *))(*((void *)&v25[0] + 1) + 24))((char *)v25 + 8);
    int v20 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v20) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v18 = &v26;
  *(void *)(a2 + 32) = v17;
LABEL_17:
  *uint64_t v18 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_18:
  if (v26 == (_OWORD *)((char *)v25 + 8))
  {
    (*(void (**)(char *, uint64_t))(*((void *)&v25[0] + 1) + 32))((char *)v25 + 8, v16);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_22:
  if (v24 == v23)
  {
    (*(void (**)(void *, uint64_t))(v23[0] + 32))(v23, v16);
    uint64_t v19 = v29;
    if (v29 != v28) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v24) {
      (*(void (**)(void))(*v24 + 40))();
    }
    uint64_t v19 = v29;
    if (v29 != v28)
    {
LABEL_26:
      if (v19) {
        (*(void (**)(void *, uint64_t))(*v19 + 40))(v19, v16);
      }
      if (v8) {
        goto LABEL_29;
      }
      return;
    }
  }
  (*(void (**)(void *, uint64_t))(v28[0] + 32))(v28, v16);
  if (v8) {
LABEL_29:
  }
    operator delete(v8);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    unint64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD3D8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  int64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989108;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989108;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1EC989108;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  v2[6] = *(void *)(a1 + 48);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7__cloneEPNS0_6__baseIST_EE(__n128 *a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_1EC989108;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  int64_t v5 = (unsigned char *)a1->n128_u64[1];
  uint64_t v4 = (unsigned char *)a1[1].n128_u64[0];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  __n128 result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEEclEOl(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2] - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return a1[6];
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return a1[6];
    }
  }
  uint64_t v7 = a1[5] + v4;
  v8[0] = a1[4];
  v8[1] = v7;
  return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v8);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181102533) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181102533 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181102533)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181102533 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS2_9AttributeEEENS2_9FailureOrIN4llvm15mapped_iteratorINS7_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS5_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_9AttributeEEENS_9FailureOrIN4llvm15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD3D8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD3D8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD3D8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<mlir::Attribute ()(long)>,mlir::Attribute>,mlir::Attribute>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<BOOL,unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = BOOL]";
      unint64_t v17 = 54;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<BOOL,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (v3[107] == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APInt>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)a1;
  if (*(void *)a1) {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)long long v31 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v31);
  if (Width > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  }
  else {
    long long __p = 0;
  }
  v28[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)v28, (uint64_t)v31);
  if (!v34)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_35;
  }
  char v6 = v31[0];
  v30[0] = *(_OWORD *)&v31[1];
  *(_OWORD *)((char *)v30 + 15) = *(_OWORD *)&v31[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v22);
  unint64_t v7 = v22;
  int64_t v8 = (char *)v23 - (char *)v22;
  if (v23 == v22)
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      abort();
    }
    unint64_t v9 = (char *)operator new((char *)v23 - (char *)v22);
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  unsigned int v11 = Width;
  uint64_t v12 = __p;
  unsigned int Width = 0;
  char v13 = (char *)operator new(0x50uLL);
  *(void *)char v13 = &unk_1EC989000;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = v10;
  *((void *)v13 + 3) = v10;
  v13[32] = v6;
  *(_OWORD *)(v13 + 33) = v30[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v30 + 15);
  *((_DWORD *)v13 + 18) = v11;
  *((void *)v13 + 8) = v12;
  uint64_t v29 = v13;
  uint64_t v14 = *(void **)a1;
  if (v14)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    unsigned __int8 v16 = v29;
    if (v29) {
      goto LABEL_15;
    }
LABEL_19:
    unsigned __int8 v27 = 0;
    *(void *)long long v31 = 0;
    goto LABEL_20;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  unsigned __int8 v16 = v29;
  if (!v29) {
    goto LABEL_19;
  }
LABEL_15:
  if (v16 == v28)
  {
    unsigned __int8 v27 = v26;
    (*(void (**)(void *, void *))(v28[0] + 24))(v28, v26);
    unint64_t v17 = v27;
    *(void *)long long v31 = 0;
    if (v27) {
      goto LABEL_43;
    }
LABEL_20:
    unint64_t v32 = 0;
    unsigned __int8 v33 = 1;
    *(void *)a2 = *(void *)v31;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_21:
    uint64_t v18 = (void *)(a2 + 32);
    goto LABEL_22;
  }
  unint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
  unsigned __int8 v27 = v17;
  *(void *)long long v31 = 0;
  if (!v17) {
    goto LABEL_20;
  }
LABEL_43:
  if (v17 == v26)
  {
    unint64_t v32 = &v31[8];
    (*(void (**)(void *, unsigned char *))(v26[0] + 24))(v26, &v31[8]);
    int v20 = v32;
  }
  else
  {
    int v20 = (unsigned char *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
    unint64_t v32 = v20;
  }
  unsigned __int8 v33 = 1;
  *(void *)a2 = *(void *)v31;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v20) {
    goto LABEL_21;
  }
  if (v20 == &v31[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v31[8] + 24))(&v31[8]);
    int v21 = v33;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v21) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  uint64_t v18 = &v32;
  *(void *)(a2 + 32) = v20;
LABEL_22:
  *uint64_t v18 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_23:
  if (v32 == &v31[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v31[8] + 32))(&v31[8]);
  }
  else if (v32)
  {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
LABEL_27:
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    uint64_t v19 = v29;
    if (v29 != v28) {
      goto LABEL_31;
    }
  }
  else
  {
    if (v27) {
      (*(void (**)(void))(*v27 + 40))();
    }
    uint64_t v19 = v29;
    if (v29 != v28)
    {
LABEL_31:
      if (v19) {
        (*(void (**)(void *))(*v19 + 40))(v19);
      }
      if (v7) {
        goto LABEL_34;
      }
      goto LABEL_35;
    }
  }
  (*(void (**)(void *))(v28[0] + 32))(v28);
  if (v7) {
LABEL_34:
  }
    operator delete(v7);
LABEL_35:
  if (Width >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    char v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  int64_t v8 = result;
  *__n128 result = &unk_1EC9CD108;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EC989000;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (v2) {
      operator delete[](v2);
    }
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989000;
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    uint64_t v2 = (void *)__p[8];
    if (v2) {
      operator delete[](v2);
    }
  }
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = &unk_1EC989000;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    char v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  unint64_t v9 = (llvm::APInt *)(v2 + 8);
  int v10 = (const void **)(a1 + 64);
  unsigned int v11 = *(_DWORD *)(a1 + 72);
  *((_DWORD *)v2 + 18) = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase(v9, v10);
  }
  else {
    *(void *)unint64_t v9 = *v10;
  }
  return v2;
}

llvm::APInt *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989000;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  __n128 result = (llvm::APInt *)(a2 + 64);
  unsigned int v11 = (const void **)(a1 + 64);
  unsigned int v12 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = v12;
  if (v12 > 0x40)
  {
    return (llvm::APInt *)llvm::APInt::initSlowCase(result, v11);
  }
  else
  {
    *(void *)__n128 result = *v11;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (v2) {
      operator delete[](v2);
    }
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    uint64_t v2 = (void *)__p[8];
    if (v2) {
      operator delete[](v2);
    }
  }
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1@<X0>, void *a2@<X1>, llvm::APInt *a3@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811028D7) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811028D7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811028D7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811028D7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm5APIntEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

void _ZNSt3__128__invoke_void_return_wrapperIN4llvm5APIntELb0EE6__callB8nn180100IJRZNK4mlir18SparseElementsAttr20try_value_begin_implIS2_EENS5_9FailureOrINS1_15mapped_iteratorINS1_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS5_6detail17ElementsAttrTraitIS6_E13OverloadTokenISE_EEEUllE_lEEES2_DpOT_(uint64_t a1@<X0>, void *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    while (*(void *)(*(void *)a1 + 8 * v5) != *a2)
    {
      if (v6 == ++v5) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40) + v5;
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 7;
    unint64_t v14 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v11 == 1) {
      unint64_t v14 = 1;
    }
    unint64_t v15 = v14 * v12;
    if (v11 == 1)
    {
      uint64_t v9 = (*(unsigned __int8 *)(v10 + (v15 >> 3)) >> (v15 & 7)) & 1;
      *((_DWORD *)a3 + 2) = 1;
      goto LABEL_16;
    }
    *((_DWORD *)a3 + 2) = v11;
    if (v11 <= 0x40)
    {
      *(void *)a3 = 0;
      if (v13 < 8) {
        return;
      }
      goto LABEL_24;
    }
    llvm::APInt::initSlowCase(a3, 0, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u) {
      a3 = *(llvm::APInt **)a3;
    }
    if (v13 >= 8)
    {
LABEL_24:
      memmove(a3, (const void *)(v10 + (v15 >> 3)), v13 >> 3);
    }
  }
  else
  {
LABEL_5:
    unint64_t v7 = (const void **)(a1 + 56);
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    *((_DWORD *)a3 + 2) = v8;
    if (v8 <= 0x40)
    {
      uint64_t v9 = (uint64_t)*v7;
LABEL_16:
      *(void *)a3 = v9;
      return;
    }
    llvm::APInt::initSlowCase(a3, v7);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD108;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD108;
  if (!__p[48])
  {
LABEL_5:
    unint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  unint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD108;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  unint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APInt ()(long)>,llvm::APInt>,llvm::APInt>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned char,unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned char]";
      unint64_t v17 = 63;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2480) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<BOOL>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  v26[0] = *(_OWORD *)(v4 + 8);
  *(void *)&v26[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
  if (!mlir::Type::isInteger((mlir::Type *)v26, 1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 24);
  v26[0] = *(_OWORD *)(v4 + 8);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v22);
  unint64_t v9 = v22;
  int64_t v10 = (char *)v23 - (char *)v22;
  if (v23 == v22)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v10 < 0) {
      abort();
    }
    unint64_t v11 = (char *)operator new((char *)v23 - (char *)v22);
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  char v13 = operator new(0x40uLL);
  *char v13 = &unk_1EC9895D8;
  v13[1] = v11;
  void v13[2] = v12;
  _OWORD v13[3] = v12;
  void v13[4] = v5;
  void v13[5] = v6;
  v13[6] = 0;
  *((unsigned char *)v13 + 56) = 0;
  uint64_t v30 = v13;
  uint64_t v14 = *(void **)a1;
  if (v14)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    unsigned __int8 v16 = v30;
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    if (v16) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v25 = 0;
    *(void *)&v26[0] = 0;
    goto LABEL_14;
  }
  unsigned __int8 v16 = v13;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v16) {
    goto LABEL_13;
  }
LABEL_9:
  if (v16 == v29)
  {
    uint64_t v25 = v24;
    (*(void (**)(void *, void *))(v29[0] + 24))(v29, v24);
    unint64_t v17 = v25;
    *(void *)&v26[0] = 0;
    if (v25) {
      goto LABEL_34;
    }
LABEL_14:
    unsigned __int8 v27 = 0;
    unsigned __int8 v28 = 1;
    *(void *)a2 = *(void *)&v26[0];
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v18 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  unint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
  uint64_t v25 = v17;
  *(void *)&v26[0] = 0;
  if (!v17) {
    goto LABEL_14;
  }
LABEL_34:
  if (v17 == v24)
  {
    unsigned __int8 v27 = (_OWORD *)((char *)v26 + 8);
    (*(void (**)(void *, char *))(v24[0] + 24))(v24, (char *)v26 + 8);
    int v20 = v27;
  }
  else
  {
    int v20 = (_OWORD *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
    unsigned __int8 v27 = v20;
  }
  unsigned __int8 v28 = 1;
  *(void *)a2 = *(void *)&v26[0];
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v20) {
    goto LABEL_15;
  }
  if (v20 == (_OWORD *)((char *)v26 + 8))
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(char *))(*((void *)&v26[0] + 1) + 24))((char *)v26 + 8);
    int v21 = v28;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v21) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v18 = &v27;
  *(void *)(a2 + 32) = v20;
LABEL_16:
  *uint64_t v18 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v27 == (_OWORD *)((char *)v26 + 8))
  {
    (*(void (**)(char *))(*((void *)&v26[0] + 1) + 32))((char *)v26 + 8);
  }
  else if (v27)
  {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
LABEL_21:
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
    uint64_t v19 = v30;
    if (v30 != v29) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v25) {
      (*(void (**)(void))(*v25 + 40))();
    }
    uint64_t v19 = v30;
    if (v30 != v29)
    {
LABEL_25:
      if (v19) {
        (*(void (**)(void *))(*v19 + 40))(v19);
      }
      if (v9) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(void *))(v29[0] + 32))(v29);
  if (v9) {
LABEL_28:
  }
    operator delete(v9);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD438;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED1Ev(void *a1)
{
  *a1 = &unk_1EC9895D8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEED0Ev(void *__p)
{
  void *__p = &unk_1EC9895D8;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC9895D8;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9895D8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

BOOL _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned char *)(a1 + 56) != 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned char *)(a1 + 56) != 0;
    }
  }
  unint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    unint64_t v7 = 0;
  }
  return (*(unsigned __int8 *)(*(void *)(a1 + 32) + (v7 >> 3)) >> (v7 & 7)) & 1;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181102C5DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181102C5DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181102C5DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181102C5DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFblEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIbEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD438;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD438;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD438;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  unint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<BOOL ()(long)>,BOOL>,BOOL>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      unint64_t v17 = 64;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2528) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned char,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9896E0;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  v9[56] = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD4C8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED1Ev(void *a1)
{
  *a1 = &unk_1EC9896E0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEED0Ev(void *__p)
{
  void *__p = &unk_1EC9896E0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC9896E0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9896E0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned __int8 *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned __int8 *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181102FCBLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181102FCBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181102FCBLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181102FCBLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFhlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIhEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD4C8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD4C8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD4C8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned char ()(long)>,unsigned char>,unsigned char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      unint64_t v17 = 62;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2496) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned short,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9898F0;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_WORD *)v9 + 28) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD5E8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED1Ev(void *a1)
{
  *a1 = &unk_1EC9898F0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEED0Ev(void *__p)
{
  void *__p = &unk_1EC9898F0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC9898F0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9898F0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned __int16 *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned __int16 *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018110338DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x800000018110338DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018110338DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018110338DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFtlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implItEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD5E8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD5E8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD5E8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned short ()(long)>,unsigned short>,unsigned short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long long,signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long long]";
      unint64_t v17 = 68;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2544) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned int,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989790;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_DWORD *)v9 + 14) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD528;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED1Ev(void *a1)
{
  *a1 = &unk_1EC989790;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEED0Ev(void *__p)
{
  void *__p = &unk_1EC989790;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989790;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989790;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned int *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned int *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)(*(void *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018110374FLL) {
    return a1 + 8;
  }
  if (((v3 & 0x800000018110374FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018110374FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018110374FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFjlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIjEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD528;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD528;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD528;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned int ()(long)>,unsigned int>,unsigned int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<signed char,short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = signed char]";
      unint64_t v17 = 61;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<signed char,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2456) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9899A0;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD648;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED1Ev(void *a1)
{
  *a1 = &unk_1EC9899A0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEED0Ev(void *__p)
{
  void *__p = &unk_1EC9899A0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC9899A0;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9899A0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181103B11) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181103B11 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181103B11)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181103B11 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFylEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIyEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD648;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD648;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD648;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long long ()(long)>,unsigned long long>,unsigned long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<signed char>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      unint64_t v17 = 55;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2520) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<signed char>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<signed char,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989580;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  v9[56] = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD408;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED1Ev(void *a1)
{
  *a1 = &unk_1EC989580;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEED0Ev(void *__p)
{
  void *__p = &unk_1EC989580;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989580;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989580;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 41) = *(_OWORD *)(a1 + 41);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(char *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(char *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(char *)(*(void *)(a1 + 32) + v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181103ED3) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181103ED3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181103ED3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181103ED3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFalEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIaEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD408;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD408;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD408;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<signed char ()(long)>,signed char>,signed char>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<short>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      unint64_t v17 = 53;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2488) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<short>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<short,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989898;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_WORD *)v9 + 28) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD5B8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED1Ev(void *a1)
{
  *a1 = &unk_1EC989898;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEED0Ev(void *__p)
{
  void *__p = &unk_1EC989898;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989898;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989898;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(__int16 *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(__int16 *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(__int16 *)(*(void *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181104295) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181104295 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181104295)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181104295 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFslEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIsEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD5B8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD5B8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD5B8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<short ()(long)>,short>,short>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<int>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long long,short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = long long]";
      unint64_t v17 = 59;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<long long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2536) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<int>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<int,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989738;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_DWORD *)v9 + 14) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD4F8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED1Ev(void *a1)
{
  *a1 = &unk_1EC989738;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEED0Ev(void *__p)
{
  void *__p = &unk_1EC989738;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989738;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989738;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned int *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned int *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)(*(void *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181104657) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181104657 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181104657)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181104657 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFilEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIiEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD4F8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD4F8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD4F8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<int ()(long)>,int>,int>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<long long>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<short,unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = short]";
      unint64_t v17 = 55;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2520) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<short>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<long long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989948;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD618;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED1Ev(void *a1)
{
  *a1 = &unk_1EC989948;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEED0Ev(void *__p)
{
  void *__p = &unk_1EC989948;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC989948;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989948;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181104A19) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181104A19 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181104A19)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181104A19 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFxlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIxEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD618;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD618;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD618;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long long ()(long)>,long long>,long long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned short,int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned short]";
      unint64_t v17 = 64;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      long long v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned short,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2528) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned short>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<int,unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = int]";
      unint64_t v17 = 53;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      long long v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2488) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<int>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned int,long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned int]";
      unint64_t v17 = 62;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      long long v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned int,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2496) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned int>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<long,unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = long]";
      unint64_t v17 = 54;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      long long v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2504) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<long>(a1, (uint64_t)&v9);
  if (v13)
  {
    int v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<unsigned long,std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = unsigned long]";
      unint64_t v17 = 63;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<unsigned long,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2512) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<long long,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9897E8;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD558;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED1Ev(void *a1)
{
  *a1 = &unk_1EC9897E8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEED0Ev(void *__p)
{
  void *__p = &unk_1EC9897E8;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC9897E8;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9897E8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181104DDBLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181104DDBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181104DDBLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181104DDBLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFllEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIlEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD558;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD558;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD558;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<long ()(long)>,long>,long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APInt>,std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APInt>]";
      unint64_t v17 = 75;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<llvm::APInt>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (v3[109] == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<unsigned long>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<unsigned long long,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989840;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    uint64_t v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD588;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED1Ev(void *a1)
{
  *a1 = &unk_1EC989840;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEED0Ev(void *__p)
{
  void *__p = &unk_1EC989840;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC989840;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989840;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018110519DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x800000018110519DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018110519DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018110519DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFmlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implImEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD588;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD588;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD588;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<unsigned long ()(long)>,unsigned long>,unsigned long>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned char>,std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned char>]";
      unint64_t v17 = 77;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2400) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APInt>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>((void **)a1, &v26);
  v32[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetComplexIntValues((mlir::DenseElementsAttr *)v32, (uint64_t)v35);
  if (!v38)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_29;
  }
  char v4 = v35[0];
  v34[0] = *(_OWORD *)&v35[1];
  *(_OWORD *)((char *)v34 + 15) = *(_OWORD *)&v35[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v24);
  int v5 = v24;
  int64_t v6 = (char *)v25 - (char *)v24;
  uint64_t v23 = v24;
  if (v25 == v24)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v25 - (char *)v24);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unsigned int v9 = v27;
  uint64_t v10 = v26;
  unsigned int v11 = v29;
  uint64_t v12 = __p;
  unsigned int v27 = 0;
  unsigned int v29 = 0;
  char v13 = (char *)operator new(0x60uLL);
  *(void *)char v13 = &unk_1EC989160;
  *((void *)v13 + 1) = v7;
  *((void *)v13 + 2) = v8;
  *((void *)v13 + 3) = v8;
  v13[32] = v4;
  *(_OWORD *)(v13 + 33) = v34[0];
  *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v34 + 15);
  *((_DWORD *)v13 + 18) = v9;
  *((void *)v13 + 8) = v10;
  *((_DWORD *)v13 + 22) = v11;
  *((void *)v13 + 10) = v12;
  unsigned __int8 v33 = v13;
  uint64_t v14 = *(void **)a1;
  if (v14)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
    unsigned __int8 v16 = v33;
    unint64_t v17 = v23;
    if (v33) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v31 = 0;
    *(void *)uint64_t v35 = 0;
    goto LABEL_14;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  unsigned __int8 v16 = v33;
  unint64_t v17 = v23;
  if (!v33) {
    goto LABEL_13;
  }
LABEL_9:
  if (v16 == v32)
  {
    uint64_t v31 = v30;
    (*(void (**)(void *, void *))(v32[0] + 24))(v32, v30);
    uint64_t v18 = v31;
    *(void *)uint64_t v35 = 0;
    if (v31) {
      goto LABEL_40;
    }
LABEL_14:
    unint64_t v36 = 0;
    unsigned __int8 v37 = 1;
    *(void *)a2 = *(void *)v35;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v19 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  uint64_t v18 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
  uint64_t v31 = v18;
  *(void *)uint64_t v35 = 0;
  if (!v18) {
    goto LABEL_14;
  }
LABEL_40:
  if (v18 == v30)
  {
    unint64_t v36 = &v35[8];
    (*(void (**)(void *, unsigned char *))(v30[0] + 24))(v30, &v35[8]);
    int v21 = v36;
  }
  else
  {
    int v21 = (unsigned char *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
    unint64_t v36 = v21;
  }
  unsigned __int8 v37 = 1;
  *(void *)a2 = *(void *)v35;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v21) {
    goto LABEL_15;
  }
  if (v21 == &v35[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v35[8] + 24))(&v35[8]);
    int v22 = v37;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v22) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v19 = &v36;
  *(void *)(a2 + 32) = v21;
LABEL_16:
  *uint64_t v19 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v36 == &v35[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v35[8] + 32))(&v35[8]);
  }
  else if (v36)
  {
    (*(void (**)(void))(*(void *)v36 + 40))();
  }
LABEL_21:
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
    int v20 = v33;
    if (v33 != v32) {
      goto LABEL_25;
    }
LABEL_37:
    (*(void (**)(void *))(v32[0] + 32))(v32);
    if (!v17) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v31) {
    (*(void (**)(void))(*v31 + 40))();
  }
  int v20 = v33;
  if (v33 == v32) {
    goto LABEL_37;
  }
LABEL_25:
  if (v20) {
    (*(void (**)(void *))(*v20 + 40))(v20);
  }
  if (v17) {
LABEL_28:
  }
    operator delete(v17);
LABEL_29:
  if (v29 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v27 >= 0x41)
  {
    if (v26) {
      operator delete[](v26);
    }
  }
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD198;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unsigned int v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APInt>>(void **a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementType);
  unsigned int v10 = Width;
  if (Width <= 0x40)
  {
    int64_t v6 = 0;
    long long __p = 0;
    *((_DWORD *)a2 + 2) = Width;
LABEL_8:
    *a2 = v6;
    unint64_t v7 = a2 + 2;
    *((_DWORD *)a2 + 6) = Width;
LABEL_9:
    *unint64_t v7 = __p;
    return;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  unsigned int Width = v10;
  *((_DWORD *)a2 + 2) = v10;
  if (Width <= 0x40)
  {
    int64_t v6 = __p;
    goto LABEL_8;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)&__p);
  unsigned int v8 = v10;
  unint64_t v7 = a2 + 2;
  *((_DWORD *)a2 + 6) = v10;
  if (v8 <= 0x40) {
    goto LABEL_9;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 2), (const void **)&__p);
  if (v10 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EC989160;
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2) {
      operator delete[](v2);
    }
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    unint64_t v3 = *(void **)(a1 + 64);
    if (v3) {
      operator delete[](v3);
    }
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989160;
  if (*((_DWORD *)__p + 22) >= 0x41u)
  {
    uint64_t v2 = (void *)__p[10];
    if (v2) {
      operator delete[](v2);
    }
  }
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    unint64_t v3 = (void *)__p[8];
    if (v3) {
      operator delete[](v3);
    }
  }
  uint64_t v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  return _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEC2B8nn180100ERKSS_OSU_((uint64_t)v2, v1);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, uint64_t a2)
{
  return _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEC2B8nn180100ERKSS_OSU_(a2, a1 + 8);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2) {
      operator delete[](v2);
    }
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    unint64_t v3 = *(void **)(a1 + 64);
    if (v3) {
      operator delete[](v3);
    }
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(void *__p)
{
  if (*((_DWORD *)__p + 22) >= 0x41u)
  {
    uint64_t v2 = (void *)__p[10];
    if (v2) {
      operator delete[](v2);
    }
  }
  if (*((_DWORD *)__p + 18) >= 0x41u)
  {
    unint64_t v3 = (void *)__p[8];
    if (v3) {
      operator delete[](v3);
    }
  }
  uint64_t v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16) - v5;
  if ((v6 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    unsigned int v9 = (const void **)(a1 + 64);
    unsigned int v10 = *(_DWORD *)(a1 + 72);
    a3[2] = v10;
    if (v10 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, v9);
      int v11 = (llvm::APInt *)(a3 + 4);
      int v12 = (const void **)(a1 + 80);
      unsigned int v15 = *(_DWORD *)(a1 + 88);
      a3[6] = v15;
      if (v15 > 0x40) {
        goto LABEL_7;
      }
    }
    else
    {
      *(void *)a3 = *v9;
      int v11 = (llvm::APInt *)(a3 + 4);
      int v12 = (const void **)(a1 + 80);
      unsigned int v13 = *(_DWORD *)(a1 + 88);
      a3[6] = v13;
      if (v13 > 0x40)
      {
LABEL_7:
        llvm::APInt::initSlowCase(v11, v12);
        return;
      }
    }
    *(void *)int v11 = *v12;
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (v6 >> 3);
  while (*(void *)(v5 + 8 * v7) != *a2)
  {
    if (v8 == ++v7) {
      goto LABEL_5;
    }
  }
  long long v16 = *(_OWORD *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 48) + v7;
  uint64_t v18 = v14;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v16, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181105593) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181105593 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181105593)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181105593 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm5APIntEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm5APIntEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEC2B8nn180100ERKSS_OSU_(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EC989160;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 16) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 48) = v9;
  unsigned int v10 = (llvm::APInt *)(a1 + 64);
  int v11 = (const void **)(a2 + 56);
  unsigned int v12 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = v12;
  if (v12 > 0x40)
  {
    llvm::APInt::initSlowCase(v10, v11);
    unsigned int v13 = (llvm::APInt *)(a1 + 80);
    uint64_t v14 = (const void **)(a2 + 72);
    unsigned int v17 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 88) = v17;
    if (v17 > 0x40) {
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)unsigned int v10 = *v11;
    unsigned int v13 = (llvm::APInt *)(a1 + 80);
    uint64_t v14 = (const void **)(a2 + 72);
    unsigned int v15 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 88) = v15;
    if (v15 > 0x40)
    {
LABEL_6:
      llvm::APInt::initSlowCase(v13, v14);
      return a1;
    }
  }
  *(void *)unsigned int v13 = *v14;
  return a1;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD198;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD198;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD198;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APInt> ()(long)>,std::complex<llvm::APInt>>,std::complex<llvm::APInt>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned short>,std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      long long v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned short>]";
      unint64_t v17 = 78;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2432) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned char>,unsigned char,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989318;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_WORD *)v9 + 28) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    long long v16 = v26;
  }
  else
  {
    long long v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD288;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989318;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989318;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989318;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989318;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned __int16 *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned __int16 *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181105955) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181105955 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181105955)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181105955 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIhEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIhEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD288;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD288;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD288;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned char> ()(long)>,std::complex<unsigned char>>,std::complex<unsigned char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned int>,std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned int>]";
      unint64_t v17 = 76;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2416) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned short>,unsigned short,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989478;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_DWORD *)v9 + 14) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD348;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989478;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989478;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989478;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989478;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned int *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned int *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)(*(void *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181105D69) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181105D69 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181105D69)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181105D69 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexItEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexItEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD348;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD348;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD348;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned short> ()(long)>,std::complex<unsigned short>>,std::complex<unsigned short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<unsigned long long>,std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<unsigned long long>]";
      unint64_t v17 = 82;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<unsigned long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2448) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned int>,unsigned int,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9893C8;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD2E8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC9893C8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC9893C8;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC9893C8;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9893C8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018110617DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x800000018110617DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018110617DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018110617DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIjEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIjEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD2E8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD2E8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD2E8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned int> ()(long)>,std::complex<unsigned int>>,std::complex<unsigned int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<signed char>,std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<signed char>]";
      unint64_t v17 = 75;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<signed char>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2376) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<unsigned long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v23[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<unsigned long long>,unsigned long long,void>(v23, (uint64_t)v26);
  if (!v29)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v26[0];
  v25[0] = *(_OWORD *)&v26[1];
  *(void *)((char *)v25 + 15) = *(void *)&v26[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v19);
  int v5 = v19;
  int64_t v6 = (char *)v20 - (char *)v19;
  if (v20 == v19)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v20 - (char *)v19);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v9 = &unk_1EC989528;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v25[0];
  uint64_t v10 = *(void *)((char *)v25 + 15);
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 8) = 0;
  *((void *)v9 + 6) = v10;
  uint64_t v24 = (uint64_t *)v9;
  unint64_t v11 = *(void **)a1;
  if (v11)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
    char v13 = v24;
    mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
    if (v13) {
      goto LABEL_9;
    }
LABEL_13:
    int v22 = 0;
    *(void *)uint64_t v26 = 0;
    goto LABEL_14;
  }
  char v13 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v13) {
    goto LABEL_13;
  }
LABEL_9:
  if (v13 == v23)
  {
    int v22 = v21;
    (*(void (**)(uint64_t *, void *))(v23[0] + 24))(v23, v21);
    uint64_t v14 = v22;
    *(void *)uint64_t v26 = 0;
    if (v22) {
      goto LABEL_34;
    }
LABEL_14:
    unsigned __int8 v27 = 0;
    unsigned __int8 v28 = 1;
    *(void *)a2 = *(void *)v26;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    unsigned int v15 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13);
  int v22 = v14;
  *(void *)uint64_t v26 = 0;
  if (!v14) {
    goto LABEL_14;
  }
LABEL_34:
  if (v14 == v21)
  {
    unsigned __int8 v27 = &v26[8];
    (*(void (**)(void *, unsigned char *))(v21[0] + 24))(v21, &v26[8]);
    unint64_t v17 = v27;
  }
  else
  {
    unint64_t v17 = (unsigned char *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
    unsigned __int8 v27 = v17;
  }
  unsigned __int8 v28 = 1;
  *(void *)a2 = *(void *)v26;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v17) {
    goto LABEL_15;
  }
  if (v17 == &v26[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 24))(&v26[8]);
    int v18 = v28;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  unsigned int v15 = &v27;
  *(void *)(a2 + 32) = v17;
LABEL_16:
  *unsigned int v15 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v27 == &v26[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 32))(&v26[8]);
  }
  else if (v27)
  {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
LABEL_21:
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    unsigned __int8 v16 = v24;
    if (v24 != v23) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void))(*v22 + 40))();
    }
    unsigned __int8 v16 = v24;
    if (v24 != v23)
    {
LABEL_25:
      if (v16) {
        (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v23[0] + 32))(v23);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD3A8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989528;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989528;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1EC989528;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(void *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989528;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181106591) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181106591 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181106591)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181106591 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIyEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIyEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD3A8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD3A8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD3A8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<unsigned long long> ()(long)>,std::complex<unsigned long long>>,std::complex<unsigned long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<short>,std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<short>]";
      unint64_t v17 = 69;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<short>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2424) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<signed char>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<signed char>,signed char,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989210;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_WORD *)v9 + 28) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD1F8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989210;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989210;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989210;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 42) = *(_OWORD *)(a1 + 42);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989210;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a1 + 42);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned __int16 *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned __int16 *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811069A5) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811069A5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811069A5)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811069A5 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIaEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIaEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD1F8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD1F8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD1F8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<signed char> ()(long)>,std::complex<signed char>>,std::complex<signed char>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<int>,std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<int>]";
      unint64_t v17 = 67;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2408) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<short>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<short>,short,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989420;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_DWORD *)v9 + 14) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD318;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989420;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989420;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989420;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989420;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(unsigned int *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(unsigned int *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)(*(void *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181106DB9) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181106DB9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181106DB9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181106DB9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIsEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIsEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD318;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD318;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD318;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<short> ()(long)>,std::complex<short>>,std::complex<short>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<long long>,llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<long long>]";
      unint64_t v17 = 73;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<long long>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2440) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<int>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<int>,int,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989370;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD2B8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989370;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989370;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC989370;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989370;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811071CDLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811071CDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811071CDLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811071CDLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIiEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIiEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD2B8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD2B8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD2B8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<int> ()(long)>,std::complex<int>>,std::complex<int>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<llvm::APFloat,float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      unint64_t v17 = 63;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (v3[340] == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<long long>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v23[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<long long>,long long,void>(v23, (uint64_t)v26);
  if (!v29)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v26[0];
  v25[0] = *(_OWORD *)&v26[1];
  *(void *)((char *)v25 + 15) = *(void *)&v26[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v19);
  int v5 = v19;
  int64_t v6 = (char *)v20 - (char *)v19;
  if (v20 == v19)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v20 - (char *)v19);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v9 = &unk_1EC9894D0;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v25[0];
  uint64_t v10 = *(void *)((char *)v25 + 15);
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 8) = 0;
  *((void *)v9 + 6) = v10;
  uint64_t v24 = (uint64_t *)v9;
  unint64_t v11 = *(void **)a1;
  if (v11)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
    char v13 = v24;
    mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
    if (v13) {
      goto LABEL_9;
    }
LABEL_13:
    int v22 = 0;
    *(void *)uint64_t v26 = 0;
    goto LABEL_14;
  }
  char v13 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v13) {
    goto LABEL_13;
  }
LABEL_9:
  if (v13 == v23)
  {
    int v22 = v21;
    (*(void (**)(uint64_t *, void *))(v23[0] + 24))(v23, v21);
    uint64_t v14 = v22;
    *(void *)uint64_t v26 = 0;
    if (v22) {
      goto LABEL_34;
    }
LABEL_14:
    unsigned __int8 v27 = 0;
    unsigned __int8 v28 = 1;
    *(void *)a2 = *(void *)v26;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    unsigned int v15 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13);
  int v22 = v14;
  *(void *)uint64_t v26 = 0;
  if (!v14) {
    goto LABEL_14;
  }
LABEL_34:
  if (v14 == v21)
  {
    unsigned __int8 v27 = &v26[8];
    (*(void (**)(void *, unsigned char *))(v21[0] + 24))(v21, &v26[8]);
    unint64_t v17 = v27;
  }
  else
  {
    unint64_t v17 = (unsigned char *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
    unsigned __int8 v27 = v17;
  }
  unsigned __int8 v28 = 1;
  *(void *)a2 = *(void *)v26;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v17) {
    goto LABEL_15;
  }
  if (v17 == &v26[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 24))(&v26[8]);
    int v18 = v28;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  unsigned int v15 = &v27;
  *(void *)(a2 + 32) = v17;
LABEL_16:
  *unsigned int v15 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v27 == &v26[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 32))(&v26[8]);
  }
  else if (v27)
  {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
LABEL_21:
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    unsigned __int8 v16 = v24;
    if (v24 != v23) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void))(*v22 + 40))();
    }
    unsigned __int8 v16 = v24;
    if (v24 != v23)
    {
LABEL_25:
      if (v16) {
        (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v23[0] + 32))(v23);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD378;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC9894D0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC9894D0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1EC9894D0;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(void *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9894D0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811075E1) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811075E1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811075E1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811075E1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIxEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIxEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD378;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD378;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD378;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<long long> ()(long)>,std::complex<long long>>,std::complex<long long>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<float,double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = float]";
      unint64_t v17 = 55;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<float,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2472) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::APFloat>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)a1;
  if (*(void *)a1) {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)char v38 = mlir::ElementsAttr::getElementType((uint64_t)v4, v5);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)v38);
  unint64_t v7 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v7 == FloatSemantics) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, (uint64_t)FloatSemantics);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v37, (uint64_t)FloatSemantics);
  }
  v33[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetFloatValues((mlir::DenseElementsAttr *)v33, (uint64_t)v38);
  if (!v41)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_44;
  }
  char v8 = v38[0];
  long long v35 = *(_OWORD *)&v38[1];
  v36[0] = *(_OWORD *)v39;
  *(void *)((char *)v36 + 15) = *(void *)&v39[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v25);
  __p[1] = 0;
  uint64_t v30 = 0;
  __p[0] = 0;
  unint64_t v9 = v25;
  int64_t v10 = (char *)v26 - (char *)v25;
  if (v26 != v25)
  {
    if (v10 < 0) {
      abort();
    }
    __p[0] = operator new((char *)v26 - (char *)v25);
    __p[1] = __p[0];
    unint64_t v11 = (char *)__p[0] + 8 * (v10 >> 3);
    uint64_t v30 = v11;
    memcpy(__p[0], v9, v10);
    __p[1] = v11;
  }
  v31[0] = v8;
  *(_OWORD *)&v31[1] = v35;
  *(_OWORD *)&v31[17] = v36[0];
  *(void *)&unsigned char v31[32] = *(void *)((char *)v36 + 15);
  if (v7 == (llvm::APFloatBase *)v37[0]) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v32, v37);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v32, (uint64_t)v37);
  }
  char v34 = 0;
  uint64_t v12 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v12 = &unk_1EC989058;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)__p;
  char v13 = (llvm::APFloatBase *)v32[0];
  *((void *)v12 + 3) = v30;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v30 = 0;
  long long v14 = *(_OWORD *)&v31[16];
  *((_OWORD *)v12 + 2) = *(_OWORD *)v31;
  *((_OWORD *)v12 + 3) = v14;
  unsigned int v15 = v12 + 80;
  *((void *)v12 + 8) = *(void *)&v31[32];
  if (v7 == v13)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v32);
    char v34 = v12;
    if (v7 != (llvm::APFloatBase *)v32[0])
    {
LABEL_17:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v32);
      unsigned __int8 v16 = __p[0];
      if (!__p[0]) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)v32);
    char v34 = v12;
    if (v7 != (llvm::APFloatBase *)v32[0]) {
      goto LABEL_17;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v32);
  unsigned __int8 v16 = __p[0];
  if (__p[0])
  {
LABEL_18:
    __p[1] = v16;
    operator delete(v16);
  }
LABEL_19:
  unint64_t v17 = *(void **)a1;
  if (v17)
  {
    uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v17 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v17, v18);
    uint64_t v19 = v34;
    if (v34) {
      goto LABEL_21;
    }
LABEL_28:
    unsigned __int8 v28 = 0;
    *(void *)char v38 = 0;
    goto LABEL_29;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  uint64_t v19 = v34;
  if (!v34) {
    goto LABEL_28;
  }
LABEL_21:
  if (v19 == v33)
  {
    unsigned __int8 v28 = v27;
    (*(void (**)(void *, void *))(v33[0] + 24))(v33, v27);
    int v20 = v28;
    *(void *)char v38 = 0;
    if (v28) {
      goto LABEL_51;
    }
LABEL_29:
    *(void *)&v39[15] = 0;
    unsigned __int8 v40 = 1;
    *(void *)a2 = *(void *)v38;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_30:
    int v21 = (void *)(a2 + 32);
    goto LABEL_31;
  }
  int v20 = (void *)(*(uint64_t (**)(void *))(*v19 + 16))(v19);
  unsigned __int8 v28 = v20;
  *(void *)char v38 = 0;
  if (!v20) {
    goto LABEL_29;
  }
LABEL_51:
  if (v20 == v27)
  {
    *(void *)&v39[15] = &v38[8];
    (*(void (**)(void *, unsigned char *))(v27[0] + 24))(v27, &v38[8]);
    uint64_t v23 = *(unsigned char **)&v39[15];
  }
  else
  {
    uint64_t v23 = (unsigned char *)(*(uint64_t (**)(void *))(*v20 + 16))(v20);
    *(void *)&v39[15] = v23;
  }
  unsigned __int8 v40 = 1;
  *(void *)a2 = *(void *)v38;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v23) {
    goto LABEL_30;
  }
  if (v23 == &v38[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v38[8] + 24))(&v38[8]);
    int v24 = v40;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v24) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  int v21 = &v39[15];
  *(void *)(a2 + 32) = v23;
LABEL_31:
  *int v21 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_32:
  if (*(unsigned char **)&v39[15] == &v38[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v38[8] + 32))(&v38[8]);
  }
  else if (*(void *)&v39[15])
  {
    (*(void (**)(void))(**(void **)&v39[15] + 40))();
  }
LABEL_36:
  if (v28 == v27)
  {
    (*(void (**)(void *))(v27[0] + 32))(v27);
    int v22 = v34;
    if (v34 != v33) {
      goto LABEL_40;
    }
  }
  else
  {
    if (v28) {
      (*(void (**)(void))(*v28 + 40))();
    }
    int v22 = v34;
    if (v34 != v33)
    {
LABEL_40:
      if (v22) {
        (*(void (**)(void *))(*v22 + 40))(v22);
      }
      if (v9) {
        goto LABEL_43;
      }
      goto LABEL_44;
    }
  }
  (*(void (**)(void *))(v33[0] + 32))(v33);
  if (v9) {
LABEL_43:
  }
    operator delete(v9);
LABEL_44:
  if (v7 == (llvm::APFloatBase *)v37[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v37);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v37);
  }
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    unint64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  char v8 = result;
  *__n128 result = &unk_1EC9CD138;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989058;
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  unint64_t v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    uint64_t v4 = (void *)a1[1];
    if (!v4) {
      return a1;
    }
    goto LABEL_3;
  }
  llvm::detail::IEEEFloat::~IEEEFloat(v2);
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(void *a1)
{
  *a1 = &unk_1EC989058;
  uint64_t v2 = (llvm::detail::IEEEFloat *)(a1 + 10);
  unint64_t v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    uint64_t v4 = (void *)a1[1];
    if (!v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
LABEL_4:

  operator delete(a1);
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(void *a1)
{
  uint64_t v2 = (llvm::APFloatBase *)operator new(0x68uLL);
  unint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EC989058;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  int v5 = (unsigned char *)a1[1];
  uint64_t v4 = (unsigned char *)a1[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)v3 + 1) = v7;
    *((void *)v3 + 2) = v7;
    char v8 = &v7[8 * (v6 >> 3)];
    *((void *)v3 + 3) = v8;
    uint64_t v2 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((void *)v3 + 2) = v8;
  }
  int v10 = (void *)a1[10];
  unint64_t v9 = (const llvm::detail::DoubleAPFloat *)(a1 + 10);
  long long v11 = *((_OWORD *)v9 - 2);
  *((_OWORD *)v3 + 2) = *((_OWORD *)v9 - 3);
  *((_OWORD *)v3 + 3) = v11;
  *((void *)v3 + 8) = *((void *)v9 - 2);
  if (llvm::APFloatBase::PPCDoubleDouble(v2) == v10) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v3 + 80), v9);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 80), v9);
  }
  return v3;
}

llvm::detail::DoubleAPFloat *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(llvm::APFloatBase *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  *(void *)a2 = &unk_1EC989058;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int v5 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v4 = (unsigned char *)*((void *)a1 + 2);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    char v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  long long v9 = *((_OWORD *)v3 + 2);
  long long v10 = *((_OWORD *)v3 + 3);
  *(void *)(a2 + 64) = *((void *)v3 + 8);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  long long v11 = (llvm::detail::DoubleAPFloat *)(a2 + 80);
  uint64_t v13 = (void *)*((void *)v3 + 10);
  int v12 = (llvm::APFloatBase *)((char *)v3 + 80);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v13)
  {
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
  }
  else
  {
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(void *a1)
{
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  unint64_t v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    uint64_t v4 = (void *)a1[1];
    if (!v4) {
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    uint64_t v4 = (void *)a1[1];
    if (!v4) {
      return;
    }
  }
  a1[2] = v4;

  operator delete(v4);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(void *a1)
{
  uint64_t v2 = (llvm::detail::IEEEFloat *)(a1 + 10);
  unint64_t v3 = (void *)a1[10];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    uint64_t v4 = (void *)a1[1];
    if (!v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
LABEL_3:
    a1[2] = v4;
    operator delete(v4);
  }
LABEL_4:

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16) - v3;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    while (*(void *)(v3 + 8 * v5) != *a2)
    {
      if (v6 == ++v5) {
        goto LABEL_5;
      }
    }
    long long v11 = *(_OWORD *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    long long v13 = *(_OWORD *)(a1 + 56);
    uint64_t v12 = v10 + v5;
    llvm::mapped_iterator_base<mlir::DenseElementsAttr::FloatElementIterator,mlir::DenseElementsAttr::IntElementIterator,llvm::APFloat>::operator*(&v11, a3);
  }
  else
  {
LABEL_5:
    unint64_t v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    char v8 = (const llvm::detail::DoubleAPFloat *)(a1 + 80);
    long long v9 = *(void **)(a1 + 80);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v9)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat(v7, v8);
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811079F3) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811079F3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811079F3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811079F3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm7APFloatEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD138;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD138;
  if (!__p[48])
  {
LABEL_5:
    unint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  unint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD138;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  unint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::APFloat ()(long)>,llvm::APFloat>,llvm::APFloat>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<float>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<double,std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = double]";
      unint64_t v17 = 56;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<double,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2464) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<float>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<float,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989688;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((_DWORD *)v9 + 14) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD498;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED1Ev(void *a1)
{
  *a1 = &unk_1EC989688;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEED0Ev(void *__p)
{
  void *__p = &unk_1EC989688;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EC989688;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 1) = v6;
    *((void *)v2 + 2) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 3) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 2) = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 44) = *(_OWORD *)(a1 + 44);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989688;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(float *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(float *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(float *)(*(void *)(a1 + 32) + 4 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181107D7DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181107D7DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181107D7DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181107D7DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFflEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIfEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD498;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD498;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD498;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<float ()(long)>,float>,float>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<double>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<llvm::APFloat>,std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<llvm::APFloat>]";
      unint64_t v17 = 77;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<llvm::APFloat>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (v3[111] == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<double>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<double,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC989630;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned __int8 v16 = v26;
  }
  else
  {
    unsigned __int8 v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD468;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED1Ev(void *a1)
{
  *a1 = &unk_1EC989630;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEED0Ev(void *__p)
{
  void *__p = &unk_1EC989630;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC989630;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989630;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(double *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(double *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(double *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018110813FLL) {
    return a1 + 8;
  }
  if (((v3 & 0x800000018110813FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018110813FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018110813FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS2_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISC_EEEUllE_NS_9allocatorISP_EEFdlEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIdEENS_9FailureOrIN4llvm15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISC_EEdeclL_ZNS8_7declvalB8nn180100IS7_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISA_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD468;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD468;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD468;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<double ()(long)>,double>,double>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<float>,std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<float>]";
      unint64_t v17 = 69;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<float>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2392) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(a1, (uint64_t)a3);
  }
  else {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<llvm::APFloat>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>((void **)a1, (uint64_t)v37);
  v33[0] = *(void *)(*(void *)a1 + 32);
  ComplexFloatuint64_t Values = (llvm::APFloatBase *)mlir::DenseElementsAttr::tryGetComplexFloatValues((mlir::DenseElementsAttr *)v33, (uint64_t)v40);
  if (!v43)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    unint64_t v11 = llvm::APFloatBase::PPCDoubleDouble(ComplexFloatValues);
    goto LABEL_41;
  }
  char v5 = v40[0];
  long long v35 = *(_OWORD *)&v40[1];
  v36[0] = *(_OWORD *)v41;
  *(void *)((char *)v36 + 15) = *(void *)&v41[15];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v21);
  uint64_t v26 = 0;
  unsigned __int8 v27 = 0;
  long long __p = 0;
  unint64_t v7 = v21;
  int64_t v8 = (char *)v22 - (char *)v21;
  if (v22 != v21)
  {
    if (v8 < 0) {
      abort();
    }
    long long __p = operator new((char *)v22 - (char *)v21);
    uint64_t v26 = __p;
    unint64_t v9 = (char *)__p + 8 * (v8 >> 3);
    unsigned __int8 v27 = v9;
    unint64_t v6 = (llvm::APFloatBase *)memcpy(__p, v7, v8);
    uint64_t v26 = v9;
  }
  char v28 = v5;
  long long v29 = v35;
  *(_OWORD *)uint64_t v30 = v36[0];
  *(void *)&v30[15] = *(void *)((char *)v36 + 15);
  uint64_t v10 = (void *)v38[0];
  unint64_t v11 = llvm::APFloatBase::PPCDoubleDouble(v6);
  if (v11 == v10) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v31, v38);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v31, (uint64_t)v38);
  }
  if (v11 == (void *)v39[0]) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v32, v39);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v32, (uint64_t)v39);
  }
  _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_((uint64_t)v33, (uint64_t)&__p);
  if (v11 == (void *)v32[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v32);
    if (v11 != (void *)v31[0])
    {
LABEL_14:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v31);
      uint64_t v12 = __p;
      if (!__p) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v32);
    if (v11 != (void *)v31[0]) {
      goto LABEL_14;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v31);
  uint64_t v12 = __p;
  if (__p)
  {
LABEL_15:
    uint64_t v26 = v12;
    operator delete(v12);
  }
LABEL_16:
  char v13 = *(void **)a1;
  if (v13)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
    mlir::ElementsAttr::getNumElements((uint64_t)v13, v14);
    unsigned int v15 = v34;
    if (v34) {
      goto LABEL_18;
    }
LABEL_25:
    int v24 = 0;
    *(void *)unsigned __int8 v40 = 0;
    goto LABEL_26;
  }
  mlir::ElementsAttr::getNumElements(0, 0);
  unsigned int v15 = v34;
  if (!v34) {
    goto LABEL_25;
  }
LABEL_18:
  if (v15 == v33)
  {
    int v24 = v23;
    (*(void (**)(void *, void *))(v33[0] + 24))(v33, v23);
    unsigned __int8 v16 = v24;
    *(void *)unsigned __int8 v40 = 0;
    if (v24) {
      goto LABEL_50;
    }
LABEL_26:
    *(void *)&v41[15] = 0;
    unsigned __int8 v42 = 1;
    *(void *)a2 = *(void *)v40;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_27:
    unint64_t v17 = (void *)(a2 + 32);
    goto LABEL_28;
  }
  unsigned __int8 v16 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
  int v24 = v16;
  *(void *)unsigned __int8 v40 = 0;
  if (!v16) {
    goto LABEL_26;
  }
LABEL_50:
  if (v16 == v23)
  {
    *(void *)&v41[15] = &v40[8];
    (*(void (**)(void *, unsigned char *))(v23[0] + 24))(v23, &v40[8]);
    uint64_t v19 = *(unsigned char **)&v41[15];
  }
  else
  {
    uint64_t v19 = (unsigned char *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
    *(void *)&v41[15] = v19;
  }
  unsigned __int8 v42 = 1;
  *(void *)a2 = *(void *)v40;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v19) {
    goto LABEL_27;
  }
  if (v19 == &v40[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v40[8] + 24))(&v40[8]);
    int v20 = v42;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v20) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  unint64_t v17 = &v41[15];
  *(void *)(a2 + 32) = v19;
LABEL_28:
  *unint64_t v17 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_29:
  if (*(unsigned char **)&v41[15] == &v40[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v40[8] + 32))(&v40[8]);
  }
  else if (*(void *)&v41[15])
  {
    (*(void (**)(void))(**(void **)&v41[15] + 40))();
  }
LABEL_33:
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
    uint64_t v18 = v34;
    if (v34 != v33) {
      goto LABEL_37;
    }
  }
  else
  {
    if (v24) {
      (*(void (**)(void))(*v24 + 40))();
    }
    uint64_t v18 = v34;
    if (v34 != v33)
    {
LABEL_37:
      if (v18) {
        (*(void (**)(void *))(*v18 + 40))(v18);
      }
      if (v7) {
        goto LABEL_40;
      }
      goto LABEL_41;
    }
  }
  (*(void (**)(void *))(v33[0] + 32))(v33);
  if (v7) {
LABEL_40:
  }
    operator delete(v7);
LABEL_41:
  if (v11 == (void *)v39[0])
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v39);
    if (v11 != (void *)v38[0]) {
      goto LABEL_43;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v39);
    if (v11 != (void *)v38[0])
    {
LABEL_43:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v38);
      return;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v38);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    unint64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  int64_t v8 = result;
  *__n128 result = &unk_1EC9CD1C8;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void mlir::SparseElementsAttr::getZeroValue<std::complex<llvm::APFloat>>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void v10[3] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t ElementType = mlir::ElementsAttr::getElementType((uint64_t)v3, v4);
  FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&ElementType);
  unint64_t v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
  if (v6 == FloatSemantics)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)FloatSemantics);
    unint64_t v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0])
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v7, (const llvm::detail::IEEEFloat *)v10);
      int64_t v8 = (llvm::detail::DoubleAPFloat *)(a2 + 40);
      if (v6 != (llvm::APFloatBase *)v10[0]) {
        goto LABEL_7;
      }
LABEL_12:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, (const llvm::detail::DoubleAPFloat *)v10);
      if (v6 != (llvm::APFloatBase *)v10[0]) {
        goto LABEL_8;
      }
LABEL_13:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
      return;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)FloatSemantics);
    unint64_t v7 = (llvm::detail::IEEEFloat *)(a2 + 8);
    if (v6 != (llvm::APFloatBase *)v10[0]) {
      goto LABEL_6;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (const llvm::detail::DoubleAPFloat *)v10);
  int64_t v8 = (llvm::detail::DoubleAPFloat *)(a2 + 40);
  if (v6 == (llvm::APFloatBase *)v10[0]) {
    goto LABEL_12;
  }
LABEL_7:
  llvm::detail::IEEEFloat::IEEEFloat(v8, (const llvm::detail::IEEEFloat *)v10);
  if (v6 == (llvm::APFloatBase *)v10[0]) {
    goto LABEL_13;
  }
LABEL_8:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
}

uint64_t _ZNSt3__110__function12__value_funcIFNS_7complexIN4llvm7APFloatEEElEEC2B8nn180100IZNK4mlir18SparseElementsAttr20try_value_begin_implIS5_EENS9_9FailureOrINS3_15mapped_iteratorINS3_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISK_EEdeclL_ZNS_7declvalB8nn180100ISG_EEDTclsr3stdE9__declvalISI_ELi0EEEvEEEEEEEENS9_6detail17ElementsAttrTraitISA_E13OverloadTokenISI_EEEUllE_NS_9allocatorISV_EEEEOSI_RKT0_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x88uLL);
  *(void *)uint64_t v4 = &unk_1EC9891B8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v5 = *(_OWORD *)(a2 + 40);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 24);
  *((_OWORD *)v4 + 3) = v5;
  *((void *)v4 + 8) = *(void *)(a2 + 56);
  unint64_t v6 = v4 + 80;
  unint64_t v7 = *(void **)(a2 + 72);
  int64_t v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v4);
  if (v8 == v7)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (void *)(a2 + 72));
    unint64_t v9 = v4 + 112;
    int v10 = (void *)(a2 + 104);
    if (v8 != *(void **)(a2 + 104)) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    goto LABEL_6;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, a2 + 72);
  unint64_t v9 = v4 + 112;
  int v10 = (void *)(a2 + 104);
  if (v8 == *(void **)(a2 + 104)) {
    goto LABEL_5;
  }
LABEL_3:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)v10);
LABEL_6:
  *(void *)(a1 + 24) = v4;
  return a1;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC9891B8;
  uint64_t v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  unint64_t v3 = (void *)a1[14];
  uint64_t v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    long long v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10]) {
      goto LABEL_3;
    }
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    unint64_t v6 = (void *)a1[1];
    if (!v6) {
      return a1;
    }
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  long long v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10]) {
    goto LABEL_7;
  }
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  unint64_t v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEED0Ev(void *a1)
{
  *a1 = &unk_1EC9891B8;
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 14);
  unint64_t v3 = (void *)a1[14];
  uint64_t v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    long long v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
    {
LABEL_3:
      llvm::detail::IEEEFloat::~IEEEFloat(v5);
      unint64_t v6 = (void *)a1[1];
      if (!v6) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    long long v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  unint64_t v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
LABEL_5:

  operator delete(a1);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x88uLL);
  void *v2 = &unk_1EC9891B8;
  _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(v2 + 1), v1);
  return v2;
}

llvm::APFloatBase *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7__cloneEPNS0_6__baseISV_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9891B8;
  return _ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((llvm::APFloatBase *)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE7destroyEv(void *a1)
{
  uint64_t v2 = (llvm::detail::IEEEFloat *)(a1 + 14);
  unint64_t v3 = (void *)a1[14];
  uint64_t v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 != v3)
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    long long v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
    if (v4 != (void *)a1[10]) {
      goto LABEL_3;
    }
LABEL_8:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
    unint64_t v6 = (void *)a1[1];
    if (!v6) {
      return;
    }
    goto LABEL_4;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
  long long v5 = (llvm::detail::DoubleAPFloat *)(a1 + 10);
  if (v4 == (void *)a1[10]) {
    goto LABEL_8;
  }
LABEL_3:
  llvm::detail::IEEEFloat::~IEEEFloat(v5);
  unint64_t v6 = (void *)a1[1];
  if (!v6) {
    return;
  }
LABEL_4:
  a1[2] = v6;

  operator delete(v6);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE18destroy_deallocateEv(void *a1)
{
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 14);
  unint64_t v3 = (void *)a1[14];
  uint64_t v4 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v4 == v3)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v2);
    long long v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10])
    {
LABEL_3:
      llvm::detail::IEEEFloat::~IEEEFloat(v5);
      unint64_t v6 = (void *)a1[1];
      if (!v6) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(v2);
    long long v5 = (llvm::detail::IEEEFloat *)(a1 + 10);
    if (v4 != (void *)a1[10]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v5);
  unint64_t v6 = (void *)a1[1];
  if (v6)
  {
LABEL_4:
    a1[2] = v6;
    operator delete(v6);
  }
LABEL_5:

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEEclEOl(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181108539) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181108539 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181108539)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181108539 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS2_9FailureOrINS6_15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISH_EEdeclL_ZNS_7declvalB8nn180100ISD_EEDTclsr3stdE9__declvalISF_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISF_EEEUllE_NS_9allocatorISS_EEFS8_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEEUllE_;
}

llvm::APFloatBase *_ZNSt3__122__compressed_pair_elemIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIN4llvm7APFloatEEEEENS1_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS1_6detail17ElementsAttrTraitIS2_E13OverloadTokenISE_EEEUllE_Li0ELb0EEC2B8nn180100IJRKSR_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(llvm::APFloatBase *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)uint64_t v3 = v7;
    *((void *)v3 + 1) = v7;
    int64_t v8 = &v7[8 * (v6 >> 3)];
    *((void *)v3 + 2) = v8;
    a1 = (llvm::APFloatBase *)memcpy(v7, v5, v6);
    *((void *)v3 + 1) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 40);
  *((void *)v3 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)((char *)v3 + 40) = v10;
  *(_OWORD *)((char *)v3 + 24) = v9;
  int v11 = *(void **)(a2 + 72);
  int v12 = llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v12 == v11)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::APFloatBase *)((char *)v3 + 72), (const llvm::detail::DoubleAPFloat *)(a2 + 72));
    uint64_t v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    uint64_t v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104)) {
      goto LABEL_6;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::APFloatBase *)((char *)v3 + 72), (const llvm::detail::IEEEFloat *)(a2 + 72));
    uint64_t v13 = (llvm::APFloatBase *)((char *)v3 + 104);
    uint64_t v14 = (const llvm::detail::IEEEFloat *)(a2 + 104);
    if (v12 != *(void **)(a2 + 104))
    {
LABEL_6:
      llvm::detail::IEEEFloat::IEEEFloat(v13, v14);
      return v3;
    }
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v14);
  return v3;
}

void _ZZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIN4llvm7APFloatEEEEENS_9FailureOrINS4_15mapped_iteratorINS4_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS2_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISD_EEENKUllE_clEl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (!v5)
  {
LABEL_5:
    unint64_t v7 = *(void **)(a1 + 72);
    int64_t v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    if (v8 == v7)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(a3 + 8), (const llvm::detail::DoubleAPFloat *)(a1 + 72));
      long long v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      long long v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104)) {
        goto LABEL_7;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(a3 + 8), (const llvm::detail::IEEEFloat *)(a1 + 72));
      long long v9 = (llvm::detail::IEEEFloat *)(a3 + 40);
      long long v10 = (const llvm::detail::IEEEFloat *)(a1 + 104);
      if (v8 != *(void **)(a1 + 104))
      {
LABEL_7:
        llvm::detail::IEEEFloat::IEEEFloat(v9, v10);
        return;
      }
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, v10);
    return;
  }
  uint64_t v6 = 0;
  while (*(void *)(*(void *)a1 + 8 * v6) != a2)
  {
    if (v5 == ++v6) {
      goto LABEL_5;
    }
  }
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 40);
  long long v14 = *(_OWORD *)(a1 + 48);
  uint64_t v13 = v11 + v6;
  mlir::DenseElementsAttr::ComplexIntElementIterator::operator*((uint64_t *)&v12, &v15);
  mlir::DenseElementsAttr::ComplexFloatElementIterator::mapElement((llvm::APInt *)&v15, (llvm::APFloatBase *)&v12, a3);
  if (v18 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v16 >= 0x41 && v15) {
    operator delete[](v15);
  }
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD1C8;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD1C8;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD1C8;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  unint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<llvm::APFloat> ()(long)>,std::complex<llvm::APFloat>>,std::complex<llvm::APFloat>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::getValueImpl<std::complex<double>,llvm::StringRef,std::integral_constant<BOOL,false>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a2;
    unsigned int v15 = a1;
    char v13 = a3;
    unint64_t v3 = 0x1E8EB8000;
    a3 = v13;
    a2 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned int v16 = "StringRef llvm::getTypeName() [DesiredTypeName = std::complex<double>]";
      unint64_t v17 = 70;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<std::complex<double>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      unint64_t v3 = 0x1E8EB8000;
      a3 = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  if (*(void *)(v3 + 2384) == a2) {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(a1, (uint64_t)a3);
  }
  else {
    _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(a1, a2, a3);
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<float>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v22[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<float>,float,void>(v22, (uint64_t)v25);
  if (!v28)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v25[0];
  v24[0] = *(_OWORD *)&v25[1];
  *(void *)((char *)v24 + 15) = *(void *)&v25[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v18);
  int v5 = v18;
  int64_t v6 = (char *)v19 - (char *)v18;
  if (v19 == v18)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v19 - (char *)v18);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v9 = &unk_1EC9892C0;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v24[0];
  *((void *)v9 + 6) = *(void *)((char *)v24 + 15);
  *((void *)v9 + 7) = 0;
  uint64_t v23 = (uint64_t *)v9;
  uint64_t v10 = *(void **)a1;
  if (v10)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v10 + 8);
    uint64_t v12 = v23;
    mlir::ElementsAttr::getNumElements((uint64_t)v10, v11);
    if (v12) {
      goto LABEL_9;
    }
LABEL_13:
    int v21 = 0;
    *(void *)uint64_t v25 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v12) {
    goto LABEL_13;
  }
LABEL_9:
  if (v12 == v22)
  {
    int v21 = v20;
    (*(void (**)(uint64_t *, void *))(v22[0] + 24))(v22, v20);
    char v13 = v21;
    *(void *)uint64_t v25 = 0;
    if (v21) {
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v26 = 0;
    unsigned __int8 v27 = 1;
    *(void *)a2 = *(void *)v25;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    uint64_t v14 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  char v13 = (void *)(*(uint64_t (**)(uint64_t *))(*v12 + 16))(v12);
  int v21 = v13;
  *(void *)uint64_t v25 = 0;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_34:
  if (v13 == v20)
  {
    uint64_t v26 = &v25[8];
    (*(void (**)(void *, unsigned char *))(v20[0] + 24))(v20, &v25[8]);
    unsigned int v16 = v26;
  }
  else
  {
    unsigned int v16 = (unsigned char *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
    uint64_t v26 = v16;
  }
  unsigned __int8 v27 = 1;
  *(void *)a2 = *(void *)v25;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v16) {
    goto LABEL_15;
  }
  if (v16 == &v25[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 24))(&v25[8]);
    int v17 = v27;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  uint64_t v14 = &v26;
  *(void *)(a2 + 32) = v16;
LABEL_16:
  *uint64_t v14 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v26 == &v25[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v25[8] + 32))(&v25[8]);
  }
  else if (v26)
  {
    (*(void (**)(void))(*(void *)v26 + 40))();
  }
LABEL_21:
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    unsigned int v15 = v23;
    if (v23 != v22) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    unsigned int v15 = v23;
    if (v23 != v22)
    {
LABEL_25:
      if (v15) {
        (*(void (**)(uint64_t *))(*v15 + 40))(v15);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v22[0] + 32))(v22);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD258;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC9892C0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC9892C0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EC9892C0;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  unint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9892C0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

float _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(float *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(float *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(float *)(*(void *)(a1 + 32) + 8 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001811088FFLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001811088FFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001811088FFLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001811088FFLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIfEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIfEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD258;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD258;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD258;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<float> ()(long)>,std::complex<float>>,std::complex<float>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void _ZNK4mlir6detail17ElementsAttrTraitINS_18SparseElementsAttrEE12getValueImplIN4llvm9StringRefEJENSt3__117integral_constantIbLb0EEEEEDaNS_6TypeIDET1_(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = &unk_1E8EBA000;
  {
    uint64_t v14 = a3;
    unsigned int v15 = a1;
    uint64_t v13 = a2;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    a2 = v13;
    a3 = v14;
    int v5 = v4;
    a1 = v15;
    if (v5)
    {
      unsigned __int8 v16 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::StringRef]";
      unint64_t v17 = 65;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v17;
      }
      uint64_t v8 = &v16[v7];
      unint64_t v9 = v17 - v7;
      if (v17 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v17 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<llvm::StringRef,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      a2 = v13;
      a3 = v14;
      a1 = v15;
    }
  }
  if (v3[115] == a2)
  {
    mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(a1, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<std::complex<double>>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v23[0] = *(void *)(*(void *)a1 + 32);
  mlir::DenseElementsAttr::tryGetValues<std::complex<double>,double,void>(v23, (uint64_t)v26);
  if (!v29)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  char v4 = v26[0];
  v25[0] = *(_OWORD *)&v26[1];
  *(void *)((char *)v25 + 15) = *(void *)&v26[16];
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v19);
  int v5 = v19;
  int64_t v6 = (char *)v20 - (char *)v19;
  if (v20 == v19)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new((char *)v20 - (char *)v19);
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
  }
  unint64_t v9 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v9 = &unk_1EC989268;
  *((void *)v9 + 1) = v7;
  *((void *)v9 + 2) = v8;
  *((void *)v9 + 3) = v8;
  v9[32] = v4;
  *(_OWORD *)(v9 + 33) = v25[0];
  uint64_t v10 = *(void *)((char *)v25 + 15);
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 8) = 0;
  *((void *)v9 + 6) = v10;
  int v24 = (uint64_t *)v9;
  unint64_t v11 = *(void **)a1;
  if (v11)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
    uint64_t v13 = v24;
    mlir::ElementsAttr::getNumElements((uint64_t)v11, v12);
    if (v13) {
      goto LABEL_9;
    }
LABEL_13:
    int v22 = 0;
    *(void *)uint64_t v26 = 0;
    goto LABEL_14;
  }
  uint64_t v13 = (uint64_t *)v9;
  mlir::ElementsAttr::getNumElements(0, 0);
  if (!v13) {
    goto LABEL_13;
  }
LABEL_9:
  if (v13 == v23)
  {
    int v22 = v21;
    (*(void (**)(uint64_t *, void *))(v23[0] + 24))(v23, v21);
    uint64_t v14 = v22;
    *(void *)uint64_t v26 = 0;
    if (v22) {
      goto LABEL_34;
    }
LABEL_14:
    unsigned __int8 v27 = 0;
    unsigned __int8 v28 = 1;
    *(void *)a2 = *(void *)v26;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_15:
    unsigned int v15 = (void *)(a2 + 32);
    goto LABEL_16;
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13);
  int v22 = v14;
  *(void *)uint64_t v26 = 0;
  if (!v14) {
    goto LABEL_14;
  }
LABEL_34:
  if (v14 == v21)
  {
    unsigned __int8 v27 = &v26[8];
    (*(void (**)(void *, unsigned char *))(v21[0] + 24))(v21, &v26[8]);
    unint64_t v17 = v27;
  }
  else
  {
    unint64_t v17 = (unsigned char *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
    unsigned __int8 v27 = v17;
  }
  unsigned __int8 v28 = 1;
  *(void *)a2 = *(void *)v26;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v17) {
    goto LABEL_15;
  }
  if (v17 == &v26[8])
  {
    *(void *)(a2 + 32) = a2 + 8;
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 24))(&v26[8]);
    int v18 = v28;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  unsigned int v15 = &v27;
  *(void *)(a2 + 32) = v17;
LABEL_16:
  *unsigned int v15 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_17:
  if (v27 == &v26[8])
  {
    (*(void (**)(unsigned char *))(*(void *)&v26[8] + 32))(&v26[8]);
  }
  else if (v27)
  {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
LABEL_21:
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    unsigned __int8 v16 = v24;
    if (v24 != v23) {
      goto LABEL_25;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void))(*v22 + 40))();
    }
    unsigned __int8 v16 = v24;
    if (v24 != v23)
    {
LABEL_25:
      if (v16) {
        (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      }
      if (v5) {
        goto LABEL_28;
      }
      return;
    }
  }
  (*(void (**)(uint64_t *))(v23[0] + 32))(v23);
  if (v5) {
LABEL_28:
  }
    operator delete(v5);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    int64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        unsigned int v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        unsigned int v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD228;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  unint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC989268;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC989268;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1EC989268;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    int64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(void *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC989268;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

double _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(double *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(double *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(double *)(*(void *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181108D13) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181108D13 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181108D13)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181108D13 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implINS_7complexIdEEEENS2_9FailureOrIN4llvm15mapped_iteratorINS8_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISG_EEdeclL_ZNS_7declvalB8nn180100ISC_EEDTclsr3stdE9__declvalISE_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISE_EEEUllE_NS_9allocatorISR_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implINSt3__17complexIdEEEENS_9FailureOrIN4llvm15mapped_iteratorINS6_6detail15SafeIntIteratorIlLb0EEENS2_8functionIFT_lEEEDTclclsr3stdE7declvalISE_EEdeclL_ZNS2_7declvalB8nn180100ISA_EEDTclsr3stdE9__declvalISC_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISC_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD228;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD228;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD228;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<std::complex<double> ()(long)>,std::complex<double>>,std::complex<double>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(v4);
}

void mlir::detail::ElementsAttrTrait<mlir::SparseElementsAttr>::buildValueResult<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(a1, (uint64_t)&v9);
  if (v13)
  {
    uint64_t v4 = *(void **)a1;
    if (v4) {
      uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    char v6 = mlir::ElementsAttr::getNumElements((uint64_t)v4, v5) == 1;
    mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>(v6, &v9, (uint64_t)&v7);
    *(_WORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    if (v13 && v12)
    {
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void mlir::SparseElementsAttr::try_value_begin_impl<llvm::StringRef>(mlir::SparseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 24);
  v26[0] = *(_OWORD *)(v4 + 8);
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
  mlir::ShapedType::getNumElements(ArgAttrsAttr, v8);
  mlir::SparseElementsAttr::getFlattenedSparseIndices(a1, &v22);
  uint64_t v9 = v22;
  int64_t v10 = (char *)v23 - (char *)v22;
  if (v23 == v22)
  {
    char v12 = 0;
    int v11 = 0;
  }
  else
  {
    if (v10 < 0) {
      abort();
    }
    int v11 = (char *)operator new((char *)v23 - (char *)v22);
    char v12 = &v11[8 * (v10 >> 3)];
    memcpy(v11, v9, v10);
  }
  char v13 = operator new(0x48uLL);
  *char v13 = &unk_1EC9890B0;
  v13[1] = v11;
  void v13[2] = v12;
  _OWORD v13[3] = v12;
  void v13[4] = v5;
  void v13[5] = v6;
  void v13[7] = 0;
  v13[8] = 0;
  v13[6] = 0;
  uint64_t v30 = v13;
  uint64_t v14 = *(void **)a1;
  if (v14) {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v14 + 8);
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::ElementsAttr::getNumElements((uint64_t)v14, v15);
  unsigned __int8 v16 = (void *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
  uint64_t v25 = v16;
  *(void *)&v26[0] = 0;
  if (!v16)
  {
    unsigned __int8 v27 = 0;
    unsigned __int8 v28 = 1;
    *(void *)a2 = *(void *)&v26[0];
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 40) = 0;
LABEL_16:
    uint64_t v19 = (void *)(a2 + 32);
    goto LABEL_17;
  }
  if (v16 == v24)
  {
    unsigned __int8 v27 = (_OWORD *)((char *)v26 + 8);
    (*(void (**)(void *, char *))(v24[0] + 24))(v24, (char *)v26 + 8);
    int v18 = v27;
  }
  else
  {
    int v18 = (_OWORD *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
    unsigned __int8 v27 = v18;
  }
  unsigned __int8 v28 = 1;
  *(void *)a2 = *(void *)&v26[0];
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v17 = a2 + 8;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v18) {
    goto LABEL_16;
  }
  if (v18 == (_OWORD *)((char *)v26 + 8))
  {
    *(void *)(a2 + 32) = v17;
    (*(void (**)(char *))(*((void *)&v26[0] + 1) + 24))((char *)v26 + 8);
    int v21 = v28;
    *(unsigned char *)(a2 + 40) = 1;
    *(unsigned char *)(a2 + 48) = 1;
    if (!v21) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v19 = &v27;
  *(void *)(a2 + 32) = v18;
LABEL_17:
  *uint64_t v19 = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_18:
  if (v27 == (_OWORD *)((char *)v26 + 8))
  {
    (*(void (**)(char *, uint64_t))(*((void *)&v26[0] + 1) + 32))((char *)v26 + 8, v17);
  }
  else if (v27)
  {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
LABEL_22:
  if (v25 == v24)
  {
    (*(void (**)(void *, uint64_t))(v24[0] + 32))(v24, v17);
    int v20 = v30;
    if (v30 != v29) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v25) {
      (*(void (**)(void))(*v25 + 40))();
    }
    int v20 = v30;
    if (v30 != v29)
    {
LABEL_26:
      if (v20) {
        (*(void (**)(void *, uint64_t))(*v20 + 40))(v20, v17);
      }
      if (v9) {
        goto LABEL_29;
      }
      return;
    }
  }
  (*(void (**)(void *, uint64_t))(v29[0] + 32))(v29, v17);
  if (v9) {
LABEL_29:
  }
    operator delete(v9);
}

void *mlir::detail::ElementsAttrIndexer::nonContiguous<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef> &>@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 1) = a1;
  uint64_t v4 = *a2;
  uint64_t v13 = *a2;
  LOBYTE(v14[0]) = 0;
  unsigned __int8 v16 = 0;
  int v5 = *((unsigned __int8 *)a2 + 40);
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v6 = (uint64_t *)a2[4];
    if (v6)
    {
      if (v6 == a2 + 1)
      {
        uint64_t v15 = v14;
        (*(void (**)(uint64_t *, void *))(a2[1] + 24))(a2 + 1, v14);
        uint64_t v4 = v13;
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned __int8 v16 = 1;
  }
  __n128 result = operator new(0x38uLL);
  uint64_t v8 = result;
  *__n128 result = &unk_1EC9CD168;
  result[1] = v4;
  *((unsigned char *)result + 16) = 0;
  uint64_t v9 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (!v5)
  {
    *(void *)(a3 + 8) = result;
    return result;
  }
  __n128 result = v15;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[5] = v9;
      __n128 result = (void *)(*(uint64_t (**)(void *))(v14[0] + 24))(v14);
      *((unsigned char *)v8 + 48) = 1;
      int v12 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v12) {
        return result;
      }
    }
    else
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*v15 + 16))();
      v8[5] = result;
      *((unsigned char *)v8 + 48) = 1;
      int v10 = v16;
      *(void *)(a3 + 8) = v8;
      if (!v10) {
        return result;
      }
    }
  }
  else
  {
    v8[5] = 0;
    *((unsigned char *)v8 + 48) = 1;
    int v11 = v16;
    *(void *)(a3 + 8) = v8;
    if (!v11) {
      return result;
    }
  }
  __n128 result = v15;
  if (v15 == v14) {
    return (void *)(*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (void *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED1Ev(void *a1)
{
  *a1 = &unk_1EC9890B0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEED0Ev(void *__p)
{
  void *__p = &unk_1EC9890B0;
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1EC9890B0;
  v2[1] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    void v2[2] = v6;
    __int16 v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    void v2[2] = v7;
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(void *)(a1 + 64);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7__cloneEPNS0_6__baseIST_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9890B0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    __int16 v7 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a2 + 16) = v8;
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEEclEOl(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return *(void *)(a1 + 56);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (v3 >> 3);
  while (*(void *)(v2 + 8 * v4) != *a2)
  {
    if (v5 == ++v4) {
      return *(void *)(a1 + 56);
    }
  }
  uint64_t v7 = *(void *)(a1 + 48) + v4;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v7 = 0;
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * v7);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181109129) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181109129 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181109129)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181109129 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS2_9FailureOrINS5_15mapped_iteratorINS5_6detail15SafeIntIteratorIlLb0EEENS_8functionIFT_lEEEDTclclsr3stdE7declvalISF_EEdeclL_ZNS_7declvalB8nn180100ISB_EEDTclsr3stdE9__declvalISD_ELi0EEEvEEEEEEEENS2_6detail17ElementsAttrTraitIS3_E13OverloadTokenISD_EEEUllE_NS_9allocatorISQ_EEFS6_lEE11target_typeEv()
{
  return &_ZTIZNK4mlir18SparseElementsAttr20try_value_begin_implIN4llvm9StringRefEEENS_9FailureOrINS2_15mapped_iteratorINS2_6detail15SafeIntIteratorIlLb0EEENSt3__18functionIFT_lEEEDTclclsr3stdE7declvalISD_EEdeclL_ZNS9_7declvalB8nn180100IS8_EEDTclsr3stdE9__declvalISB_ELi0EEEvEEEEEEEENS_6detail17ElementsAttrTraitIS0_E13OverloadTokenISB_EEEUllE_;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9CD168;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::~OpaqueIterator(char *__p)
{
  *(void *)long long __p = &unk_1EC9CD168;
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void *mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EC9CD168;
  result[1] = v6;
  *((unsigned char *)result + 16) = 0;
  uint64_t v7 = (char *)(result + 2);
  *((unsigned char *)result + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
      if (result == (void *)(a1 + 16))
      {
        v5[5] = v7;
        __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
      }
      else
      {
        __n128 result = (void *)(*(uint64_t (**)(void *, char *))(*result + 16))(result, v7);
        v5[5] = result;
      }
    }
    else
    {
      v5[5] = 0;
    }
    *((unsigned char *)v5 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::ElementsAttrIndexer::NonContiguousState::OpaqueIterator<llvm::mapped_iterator<llvm::detail::SafeIntIterator<long,false>,std::function<llvm::StringRef ()(long)>,llvm::StringRef>,llvm::StringRef>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8) + a2;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::StorageUserBase<mlir::SparseElementsAttr,mlir::Attribute,mlir::detail::SparseElementsAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait,mlir::ElementsAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(v4);
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSB_25SparseElementsAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  v10[0] = a3;
  v10[1] = a4;
  void v10[2] = a5;
  void v10[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v6);
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v7);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18SparseElementsAttrES2_NSA_25SparseElementsAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitENS1_12ElementsAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(a2, v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SparseElementsAttr>(void *a1, uint64_t **a2, void **a3)
{
  uint64_t v13 = a1;
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = *a2;
  if (!a1[1])
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = (void *)**a3;
  if (v6)
  {
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    if (!v4) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v8 = *v5++;
    uint64_t v4 = v8;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  if (v3) {
    uint64_t v3 = *v5;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v13);
  *(void *)&long long v14 = v6;
  *((void *)&v14 + 1) = v7;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id;
  v15[1] = Context;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail25SparseElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_18SparseElementsAttrEJRNS1_10ShapedTypeENS1_20DenseIntElementsAttrERNS1_17DenseElementsAttrEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
  v21[1] = v15;
  long long v18 = v14;
  uint64_t v19 = v4;
  uint64_t v20 = v3;
  unsigned int v11 = llvm::hash_combine<mlir::ShapedType,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr>(&v18, &v19, &v20);
  v16[0] = &v18;
  v16[1] = v21;
  uint64_t v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SparseElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::SparseElementsAttrStorage,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &>(llvm::function_ref<void ()(mlir::detail::SparseElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DenseIntElementsAttr,mlir::DenseElementsAttr &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

void mlir::AbstractAttribute::get<mlir::StridedLayoutAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSB_24StridedLayoutAttrStorageENSB_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  void *v2 = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap;
  v2[1] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity;
  void v2[2] = mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3960), v2);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::getAffineMap(uint64_t a1, void *a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a2[2];
  uint64_t v2 = a2[3];
  int v4 = (mlir *)a2[1];
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  return mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::isIdentity(uint64_t a1, void *a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a2[2];
  uint64_t v2 = a2[3];
  int v4 = (mlir *)a2[1];
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  uint64_t StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap(v3, v2, v4, Context);
  return mlir::AffineMap::isIdentity((mlir::AffineMap *)&StridedLinearLayoutMap);
}

uint64_t mlir::detail::MemRefLayoutAttrInterfaceInterfaceTraits::Model<mlir::StridedLayoutAttr>::verifyLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::StridedLayoutAttr::verifyLayout((uint64_t)&v7, a3, a4, a5, a6);
}

BOOL mlir::detail::StorageUserBase<mlir::StridedLayoutAttr,mlir::Attribute,mlir::detail::StridedLayoutAttrStorage,mlir::detail::AttributeUniquer,mlir::MemRefLayoutAttrInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface::Trait<Empty>]";
      unint64_t v14 = 95;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemRefLayoutAttrInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemRefLayoutAttrInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[105] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_17StridedLayoutAttrES2_NSA_24StridedLayoutAttrStorageENSA_16AttributeUniquerEJNS1_25MemRefLayoutAttrInterface5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(a2);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::StridedLayoutAttr>(uint64_t a1)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a1;
  uint64_t v12 = *(void *)(a1 + 8);
  long long v13 = *(_OWORD *)(a1 + 16);
  mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace((uint64_t)&v12, (uint64_t)&v25);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v2 = v25;
  int v21 = v25;
  int v22 = v24;
  uint64_t v23 = 0x600000000;
  uint64_t v3 = v27;
  if (!v27)
  {
    uint64_t v3 = 0;
    unint64_t v6 = v24;
    goto LABEL_9;
  }
  if (v27 < 7)
  {
    unint64_t v5 = v24;
    unsigned int v4 = v27;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v27, 8);
  unsigned int v4 = v27;
  if (v27)
  {
    unint64_t v5 = v22;
LABEL_7:
    memcpy(v5, v26, 8 * v4);
  }
  LODWORD(v23) = v3;
  uint64_t v2 = v21;
  unint64_t v6 = v22;
LABEL_9:
  uint64_t v7 = *v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id;
  v15[1] = Context;
  v20[0] = _ZN4llvm12function_refIFvPN4mlir6detail24StridedLayoutAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_17StridedLayoutAttrEJxNS_8ArrayRefIxEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v20[1] = v15;
  uint64_t v18 = v7;
  v19[0] = v6;
  v19[1] = v3;
  unsigned int v9 = llvm::hash_combine<long long,llvm::ArrayRef<long long>>(&v18, (uint64_t)v19);
  v16[0] = &v18;
  v16[1] = v20;
  uint64_t v17 = &v18;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StridedLayoutAttrStorage * mlir::StorageUniquer::get<mlir::detail::StridedLayoutAttrStorage,long long,llvm::ArrayRef<long long>>(llvm::function_ref<void ()(mlir::detail::StridedLayoutAttrStorage *)>,mlir::TypeID,long long,llvm::ArrayRef<long long> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
  if (v22 != v24) {
    free(v22);
  }
  if (v26 != v28) {
    free(v26);
  }
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<long long,llvm::ArrayRef<long long>>,void>::replace(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)&__src);
  unsigned int v4 = (void *)(a2 + 24);
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)a2 = a1;
  *(void *)(a2 + 16) = 0x600000000;
  unint64_t v5 = __src;
  if ((void **)(a2 + 8) == &__src) {
    goto LABEL_12;
  }
  unsigned int v6 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  if (__src == v12)
  {
    if (v10 < 7)
    {
      uint64_t v8 = v10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 8, (void *)(a2 + 24), v10, 8);
      uint64_t v8 = v10;
      unint64_t v5 = __src;
      if (!v10)
      {
LABEL_10:
        *(_DWORD *)(a2 + 16) = v6;
        goto LABEL_11;
      }
      unsigned int v4 = *(void **)(a2 + 8);
    }
    memcpy(v4, v5, 8 * v8);
    unint64_t v5 = __src;
    goto LABEL_10;
  }
  *(void *)(a2 + 8) = __src;
  int v7 = v11;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  __src = v12;
  int v11 = 0;
  unint64_t v5 = v12;
LABEL_11:
  unsigned int v10 = 0;
LABEL_12:
  if (v5 != v12) {
    free(v5);
  }
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v15[6] = *MEMORY[0x1E4F143B8];
  long long v13 = v15;
  uint64_t v14 = 0x600000000;
  if (a2)
  {
    LODWORD(v5) = 0;
    unsigned int v6 = v15;
    uint64_t v7 = 8 * a2;
    do
    {
      while (v5 < HIDWORD(v14))
      {
        uint64_t v8 = *a1++;
        v13[v5] = v8;
        unint64_t v5 = (v5 + 1);
        LODWORD(v14) = v5;
        v7 -= 8;
        if (!v7) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = *a1++;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v5 + 1, 8);
      v13[v14] = v9;
      unint64_t v5 = (v14 + 1);
      LODWORD(v14) = v14 + 1;
      v7 -= 8;
    }
    while (v7);
LABEL_7:
    unsigned int v10 = v13;
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x600000000;
    if (v5 && &v13 != (void **)a3)
    {
      if (v10 == v15)
      {
        unsigned int v12 = v5;
        if (v5 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5, 8),
              unsigned int v12 = v14,
              unsigned int v6 = v13,
              v14))
        {
          memcpy(*(void **)a3, v6, 8 * v12);
          unsigned int v6 = v13;
        }
        *(_DWORD *)(a3 + 8) = v5;
      }
      else
      {
        *(void *)a3 = v10;
        int v11 = HIDWORD(v14);
        *(_DWORD *)(a3 + 8) = v5;
        *(_DWORD *)(a3 + 12) = v11;
        long long v13 = v15;
        HIDWORD(v14) = 0;
      }
      LODWORD(v14) = 0;
      unsigned int v10 = v6;
    }
    if (v10 != v15) {
      free(v10);
    }
  }
  else
  {
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x600000000;
  }
}

void mlir::AbstractAttribute::get<mlir::StringAttr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  int v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSB_17StringAttrStorageENSB_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  unsigned int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    unsigned int v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    unsigned int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType;
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v14 = 65;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[28], v2);
}

uint64_t mlir::detail::TypedAttrInterfaceTraits::Model<mlir::StringAttr>::getType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::StringAttr,mlir::Attribute,mlir::detail::StringAttrStorage,mlir::detail::AttributeUniquer,mlir::TypedAttr::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr::Trait<Empty>]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr::Trait<mlir::TypeID mlir::TypeID::get<mlir::TypedAttr::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[51] == a1;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10StringAttrES2_NSA_17StringAttrStorageENSA_16AttributeUniquerEJNS1_9TypedAttr5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t mlir::detail::StorageUserBase<mlir::SymbolRefAttr,mlir::Attribute,mlir::detail::SymbolRefAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSB_20SymbolRefAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t *)a2[2];
  uint64_t v8 = a2[3];
  v12[0] = a3;
  v12[1] = a4;
  void v12[2] = a5;
  void v12[3] = a6;
  uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v6);
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v7++;
      uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v11);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13SymbolRefAttrES2_NSA_20SymbolRefAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(a2, (uint64_t)v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::SymbolRefAttr>(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a1;
  int v3 = *(uint64_t **)a2;
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    --v2;
    uint64_t v5 = *v3++;
    uint64_t v4 = v5;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v2 >= *(unsigned int *)(a1 + 24)) {
    unint64_t v6 = *(unsigned int *)(a1 + 24);
  }
  else {
    unint64_t v6 = v2;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v12 = v4;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v13[0] = &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v13[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail20SymbolRefAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_13SymbolRefAttrEJRNS1_10StringAttrERNS_8ArrayRefINS1_17FlatSymbolRefAttrEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
  v18[1] = v13;
  uint64_t v16 = v12;
  v17[0] = v3;
  v17[1] = v6;
  unsigned int v9 = llvm::hash_combine<mlir::StringAttr,llvm::ArrayRef<mlir::FlatSymbolRefAttr>>(&v16, (uint64_t)v17);
  v14[0] = &v16;
  v14[1] = v18;
  uint64_t v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::SymbolRefAttrStorage * mlir::StorageUniquer::get<mlir::detail::SymbolRefAttrStorage,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &>(llvm::function_ref<void ()(mlir::detail::SymbolRefAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::ArrayRef<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

uint64_t mlir::detail::StorageUserBase<mlir::TypeAttr,mlir::Attribute,mlir::detail::TypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSB_15TypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8TypeAttrES2_NSA_15TypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v5 = *a5;
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  uint64_t v10 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id;
  v11[1] = Context;
  return mlir::StorageUniquer::get<mlir::detail::TypeAttrStorage,mlir::Type &>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail15TypeAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8TypeAttrEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id, &v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::UnitAttr,mlir::Attribute,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8UnitAttrES2_NS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *_ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_8UnitAttrEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, *a1, a1[1]);
}

uint64_t *mlir::Dialect::addAttribute<mlir::DistinctAttr>(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
    uint64_t v18 = (void *)68;
    unint64_t v10 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
    if ((unint64_t)v18 >= v10) {
      uint64_t v11 = (unsigned char *)v10;
    }
    else {
      uint64_t v11 = v18;
    }
    uint64_t v12 = &v11[(void)v17];
    long long v13 = (char *)((unsigned char *)v18 - v11);
    if ((unint64_t)((unsigned char *)v18 - v11) >= 0x12) {
      uint64_t v14 = 18;
    }
    else {
      uint64_t v14 = (unsigned char *)v18 - v11;
    }
    unint64_t v15 = (unint64_t)&v13[-v14];
    if (v15 >= v15 - 1) {
      uint64_t v16 = v15 - 1;
    }
    else {
      uint64_t v16 = v15;
    }
    mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  mlir::AbstractAttribute::get<mlir::DistinctAttr>(a1, &v17);
  mlir::Dialect::addAttribute(a1, v2, (uint64_t)&v17);
  char v3 = v22;
  if (v22 >= 8)
  {
    if ((v22 & 4) != 0)
    {
      if ((v22 & 2) != 0) {
        uint64_t v4 = v21;
      }
      else {
        uint64_t v4 = (llvm **)v21[0];
      }
      (*(void (**)(llvm **))((v22 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v21[0], v21[1]);
    }
  }
  uint64_t v5 = (uint64_t *)v18;
  if (v19)
  {
    uint64_t v6 = 16 * v19;
    uint64_t v7 = (void **)((char *)v18 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = (uint64_t *)v18;
  }
  if (v5 != &v20) {
    free(v5);
  }
  return mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(*(mlir::MLIRContext **)(a1 + 32));
}

void mlir::AbstractAttribute::get<mlir::DistinctAttr>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  uint64_t v26 = 0x300000000;
  *(void *)&long long v22 = mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  int v24 = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  {
    uint64_t v18 = a1;
    a1 = v18;
    if (v10)
    {
      uint64_t v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      unint64_t v21 = 68;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v21;
      }
      long long v13 = &v20[v12];
      unint64_t v14 = v21 - v12;
      if (v21 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v21 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      a1 = v18;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  *a2 = a1;
  a2[1] = a2 + 3;
  a2[2] = 0x300000000;
  if (v26) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)(a2 + 1), (uint64_t)&v25);
  }
  unint64_t v4 = (unint64_t)v24;
  a2[12] = v24;
  if (v4 >= 8)
  {
    uint64_t v5 = a2 + 9;
    if ((v4 & 2) != 0 && (v4 & 4) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 8))((uint64_t)v5, (uint64_t)&v22);
    }
    else
    {
      _OWORD *v5 = v22;
      a2[11] = v23;
    }
  }
  a2[13] = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  a2[14] = &v20;
  a2[15] = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  a2[16] = &v19;
  a2[17] = v3;
  uint64_t v6 = v25;
  if (v26)
  {
    uint64_t v7 = 16 * v26;
    uint64_t v8 = (void **)((char *)v25 + 8);
    do
    {
      uint64_t v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    uint64_t v6 = v25;
  }
  if (v6 != v27) {
    free(v6);
  }
}

uint64_t *mlir::detail::AttributeUniquer::registerAttribute<mlir::DistinctAttr>(mlir::MLIRContext *a1)
{
  {
    long long v13 = a1;
    a1 = v13;
    if (v5)
    {
      unint64_t v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      unint64_t v15 = 68;
      unint64_t v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6) {
        unint64_t v7 = v6;
      }
      else {
        unint64_t v7 = v15;
      }
      uint64_t v8 = &v14[v7];
      unint64_t v9 = v15 - v7;
      if (v15 - v7 >= 0x12) {
        uint64_t v10 = 18;
      }
      else {
        uint64_t v10 = v15 - v7;
      }
      unint64_t v11 = v9 - v10;
      if (v11 >= v11 - 1) {
        uint64_t v12 = v11 - 1;
      }
      else {
        uint64_t v12 = v11;
      }
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      a1 = v13;
    }
  }
  uint64_t v1 = mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id;
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(a1);
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, v1, 0, v3);
}

uint64_t mlir::detail::StorageUserBase<mlir::DistinctAttr,mlir::Attribute,mlir::detail::DistinctAttrStorage,mlir::detail::DistinctAttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSB_19DistinctAttrStorageENSB_24DistinctAttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

void *_ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12DistinctAttrES2_NSA_19DistinctAttrStorageENSA_24DistinctAttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v3 = *a3;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v6);
  uint64_t v7 = v3;
  return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(Context, &v7);
}

uint64_t llvm::array_pod_sort_comparator<mlir::NamedAttribute>(uint64_t *a1, uint64_t *a2)
{
  if (mlir::NamedAttribute::operator<(a1, a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return mlir::NamedAttribute::operator<(a2, a1);
  }
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  v18[0] = a2;
  v18[1] = a3;
  long long v17 = *a5;
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    unint64_t v7 = 0x1E8EB8000uLL;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v7 = 0x1E8EB8000;
    }
  }
  uint64_t v8 = *(void *)(v7 + 3024);
  unint64_t v9 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v17, (_DWORD *)(v17 + 16 * *((void *)&v17 + 1)));
  unint64_t v10 = v8 ^ HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * ((8 * v9 + 8) ^ v10);
  v15[0] = &v17;
  v15[1] = v18;
  unint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 32) >> 15) ^ (-348639895* (v10 ^ (v11 >> 47) ^ v11))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>(_DWORD *a1, _DWORD *a2)
{
  v138[1] = *MEMORY[0x1E4F143B8];
  {
    unsigned int v128 = a1;
    long long v129 = a2;
    a2 = v129;
    int v131 = v130;
    a1 = v128;
    if (v131)
    {
      unint64_t v132 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v132 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v132;
      a1 = v128;
      a2 = v129;
    }
  }
  if (a1 == a2)
  {
    unint64_t v122 = 0;
  }
  else
  {
    uint64_t v2 = (a1[2] >> 4) ^ (a1[2] >> 9);
    unint64_t v3 = (v2 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v2 << 32);
    unint64_t v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
    unint64_t v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
    uint64_t v6 = ((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~(v5 << 27));
    *(void *)&long long v134 = v6;
    if (a1 + 4 == a2)
    {
      unint64_t v122 = 8;
    }
    else
    {
      unint64_t v7 = ((a1[6] >> 4) ^ (a1[6] >> 9) | ((unint64_t)((a1[4] >> 4) ^ (a1[4] >> 9)) << 32))
         + ~((unint64_t)((a1[6] >> 4) ^ (a1[6] >> 9)) << 32);
      unint64_t v8 = 9
         * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
      unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      uint64_t v10 = (v9 >> 31) ^ v9;
      *((void *)&v134 + 1) = v10;
      if (a1 + 8 == a2)
      {
        unint64_t v122 = 16;
      }
      else
      {
        uint64_t v11 = (a1[10] >> 4) ^ (a1[10] >> 9);
        unint64_t v12 = (v11 | ((unint64_t)((a1[8] >> 4) ^ (a1[8] >> 9)) << 32)) + ~(v11 << 32);
        unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
        unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
        uint64_t v15 = ((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27));
        *(void *)&long long v135 = v15;
        if (a1 + 12 == a2)
        {
          unint64_t v122 = 24;
        }
        else
        {
          unint64_t v16 = ((a1[14] >> 4) ^ (a1[14] >> 9) | ((unint64_t)((a1[12] >> 4) ^ (a1[12] >> 9)) << 32))
              + ~((unint64_t)((a1[14] >> 4) ^ (a1[14] >> 9)) << 32);
          unint64_t v17 = 9
              * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22))
                                                                        + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          uint64_t v19 = (v18 >> 31) ^ v18;
          *((void *)&v135 + 1) = v19;
          if (a1 + 16 == a2)
          {
            unint64_t v122 = 32;
          }
          else
          {
            uint64_t v20 = (a1[18] >> 4) ^ (a1[18] >> 9);
            unint64_t v21 = (v20 | ((unint64_t)((a1[16] >> 4) ^ (a1[16] >> 9)) << 32)) + ~(v20 << 32);
            unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
            unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
            uint64_t v24 = ((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27));
            *(void *)&long long v136 = v24;
            if (a1 + 20 == a2)
            {
              unint64_t v122 = 40;
            }
            else
            {
              unint64_t v25 = ((a1[22] >> 4) ^ (a1[22] >> 9) | ((unint64_t)((a1[20] >> 4) ^ (a1[20] >> 9)) << 32))
                  + ~((unint64_t)((a1[22] >> 4) ^ (a1[22] >> 9)) << 32);
              unint64_t v26 = 9
                  * (((v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13)) ^ (((v25 ^ (v25 >> 22))
                                                                            + ~((v25 ^ (v25 >> 22)) << 13)) >> 8));
              unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
              uint64_t v28 = (v27 >> 31) ^ v27;
              *((void *)&v136 + 1) = v28;
              if (a1 + 24 == a2)
              {
                unint64_t v122 = 48;
              }
              else
              {
                uint64_t v29 = (a1[26] >> 4) ^ (a1[26] >> 9);
                unint64_t v30 = (v29 | ((unint64_t)((a1[24] >> 4) ^ (a1[24] >> 9)) << 32)) + ~(v29 << 32);
                unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
                unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
                uint64_t v33 = ((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27));
                *(void *)&long long v137 = v33;
                if (a1 + 28 == a2)
                {
                  unint64_t v122 = 56;
                }
                else
                {
                  unint64_t v34 = ((a1[30] >> 4) ^ (a1[30] >> 9) | ((unint64_t)((a1[28] >> 4) ^ (a1[28] >> 9)) << 32))
                      + ~((unint64_t)((a1[30] >> 4) ^ (a1[30] >> 9)) << 32);
                  unint64_t v35 = 9
                      * (((v34 ^ (v34 >> 22)) + ~((v34 ^ (v34 >> 22)) << 13)) ^ (((v34 ^ (v34 >> 22))
                                                                                + ~((v34 ^ (v34 >> 22)) << 13)) >> 8));
                  unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
                  uint64_t v37 = (v36 >> 31) ^ v36;
                  *((void *)&v137 + 1) = v37;
                  char v38 = a1 + 32;
                  if (a1 + 32 != a2)
                  {
                    unint64_t v39 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    unint64_t v40 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v39 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
                    unint64_t v42 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    uint64_t v43 = __ROR8__(v39 - 0x622015F714C7D297 * (v42 ^ (v42 >> 47)), 33);
                    unint64_t v44 = 0xB492B66FBE98F273 * v43;
                    uint64_t v45 = v41 + v24 - 0x4B6D499041670D8DLL * v43;
                    uint64_t v46 = __ROR8__(v28 + v33 + v45, 44);
                    uint64_t v47 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    unint64_t v48 = v28 + v33 + v45 + v37;
                    unint64_t v49 = v28
                        + v47
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(v33 - 0x4B6D499041670D8CLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    uint64_t v50 = v46 + v45 + __ROR8__(v49 + v15 + v45 + v37, 21);
                    uint64_t v51 = v6 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    uint64_t v52 = v51 + v10 + v15;
                    uint64_t v53 = v52 + v19;
                    unint64_t v54 = (0xB492B66FBE98F273
                         * __ROR8__(v47 + llvm::hashing::detail::get_execution_seed(void)::seed + v10, 37)) ^ v41;
                    uint64_t v55 = __ROR8__(v52, 44) + v51 + __ROR8__(v54 + v39 + v51 + v19, 21);
                    uint64_t v133 = (char *)&v135 + 8;
                    unint64_t v56 = 64;
                    while (1)
                    {
                      unint64_t v64 = ((v38[2] >> 4) ^ (v38[2] >> 9) | ((unint64_t)((*v38 >> 4) ^ (*v38 >> 9)) << 32))
                          + ~((unint64_t)((v38[2] >> 4) ^ (v38[2] >> 9)) << 32);
                      unint64_t v65 = (v64 ^ (v64 >> 22)) + ~((v64 ^ (v64 >> 22)) << 13);
                      unint64_t v66 = (9 * (v65 ^ (v65 >> 8))) ^ ((9 * (v65 ^ (v65 >> 8))) >> 15);
                      *(void *)&long long v134 = ((v66 + ~(v66 << 27)) >> 31) ^ (v66 + ~(v66 << 27));
                      BOOL v67 = v38 + 4 == a2;
                      if (v38 + 4 == a2)
                      {
                        uint64_t v89 = 0;
                        uint64_t v90 = 8;
                        v38 += 4;
                        unint64_t v91 = (char *)&v134 + 8;
                      }
                      else
                      {
                        unint64_t v68 = ((v38[6] >> 4) ^ (v38[6] >> 9) | ((unint64_t)((v38[4] >> 4) ^ (v38[4] >> 9)) << 32))
                            + ~((unint64_t)((v38[6] >> 4) ^ (v38[6] >> 9)) << 32);
                        unint64_t v69 = (v68 ^ (v68 >> 22)) + ~((v68 ^ (v68 >> 22)) << 13);
                        unint64_t v70 = (9 * (v69 ^ (v69 >> 8))) ^ ((9 * (v69 ^ (v69 >> 8))) >> 15);
                        *((void *)&v134 + 1) = ((v70 + ~(v70 << 27)) >> 31) ^ (v70
                                                                                             + ~(v70 << 27));
                        BOOL v67 = v38 + 8 == a2;
                        if (v38 + 8 == a2)
                        {
                          uint64_t v89 = 8;
                          uint64_t v90 = 16;
                          v38 += 8;
                          unint64_t v91 = (char *)&v135;
                        }
                        else
                        {
                          unint64_t v71 = ((v38[10] >> 4) ^ (v38[10] >> 9) | ((unint64_t)((v38[8] >> 4) ^ (v38[8] >> 9)) << 32))
                              + ~((unint64_t)((v38[10] >> 4) ^ (v38[10] >> 9)) << 32);
                          unint64_t v72 = (v71 ^ (v71 >> 22)) + ~((v71 ^ (v71 >> 22)) << 13);
                          unint64_t v73 = (9 * (v72 ^ (v72 >> 8))) ^ ((9 * (v72 ^ (v72 >> 8))) >> 15);
                          *(void *)&long long v135 = ((v73 + ~(v73 << 27)) >> 31) ^ (v73
                                                                                         + ~(v73 << 27));
                          BOOL v67 = v38 + 12 == a2;
                          if (v38 + 12 == a2)
                          {
                            uint64_t v89 = 16;
                            uint64_t v90 = 24;
                            v38 += 12;
                            unint64_t v91 = v133;
                          }
                          else
                          {
                            unint64_t v74 = ((v38[14] >> 4) ^ (v38[14] >> 9) | ((unint64_t)((v38[12] >> 4) ^ (v38[12] >> 9)) << 32))
                                + ~((unint64_t)((v38[14] >> 4) ^ (v38[14] >> 9)) << 32);
                            unint64_t v75 = (v74 ^ (v74 >> 22)) + ~((v74 ^ (v74 >> 22)) << 13);
                            unint64_t v76 = (9 * (v75 ^ (v75 >> 8))) ^ ((9 * (v75 ^ (v75 >> 8))) >> 15);
                            *((void *)&v135 + 1) = ((v76 + ~(v76 << 27)) >> 31) ^ (v76
                                                                                                 + ~(v76 << 27));
                            BOOL v67 = v38 + 16 == a2;
                            if (v38 + 16 == a2)
                            {
                              uint64_t v89 = 24;
                              uint64_t v90 = 32;
                              v38 += 16;
                              unint64_t v91 = (char *)&v136;
                            }
                            else
                            {
                              unint64_t v77 = ((v38[18] >> 4) ^ (v38[18] >> 9) | ((unint64_t)((v38[16] >> 4) ^ (v38[16] >> 9)) << 32))
                                  + ~((unint64_t)((v38[18] >> 4) ^ (v38[18] >> 9)) << 32);
                              unint64_t v78 = (v77 ^ (v77 >> 22)) + ~((v77 ^ (v77 >> 22)) << 13);
                              unint64_t v79 = (9 * (v78 ^ (v78 >> 8))) ^ ((9 * (v78 ^ (v78 >> 8))) >> 15);
                              *(void *)&long long v136 = ((v79 + ~(v79 << 27)) >> 31) ^ (v79
                                                                                             + ~(v79 << 27));
                              BOOL v67 = v38 + 20 == a2;
                              if (v38 + 20 == a2)
                              {
                                uint64_t v89 = 32;
                                uint64_t v90 = 40;
                                v38 += 20;
                                unint64_t v91 = (char *)&v136 + 8;
                              }
                              else
                              {
                                unint64_t v80 = ((v38[22] >> 4) ^ (v38[22] >> 9) | ((unint64_t)((v38[20] >> 4) ^ (v38[20] >> 9)) << 32))
                                    + ~((unint64_t)((v38[22] >> 4) ^ (v38[22] >> 9)) << 32);
                                unint64_t v81 = (v80 ^ (v80 >> 22)) + ~((v80 ^ (v80 >> 22)) << 13);
                                unint64_t v82 = (9 * (v81 ^ (v81 >> 8))) ^ ((9 * (v81 ^ (v81 >> 8))) >> 15);
                                *((void *)&v136 + 1) = ((v82 + ~(v82 << 27)) >> 31) ^ (v82 + ~(v82 << 27));
                                BOOL v67 = v38 + 24 == a2;
                                if (v38 + 24 == a2)
                                {
                                  uint64_t v89 = 40;
                                  uint64_t v90 = 48;
                                  v38 += 24;
                                  unint64_t v91 = (char *)&v137;
                                }
                                else
                                {
                                  unint64_t v83 = ((v38[26] >> 4) ^ (v38[26] >> 9) | ((unint64_t)((v38[24] >> 4) ^ (v38[24] >> 9)) << 32))
                                      + ~((unint64_t)((v38[26] >> 4) ^ (v38[26] >> 9)) << 32);
                                  unint64_t v84 = (v83 ^ (v83 >> 22)) + ~((v83 ^ (v83 >> 22)) << 13);
                                  unint64_t v85 = (9 * (v84 ^ (v84 >> 8))) ^ ((9 * (v84 ^ (v84 >> 8))) >> 15);
                                  *(void *)&long long v137 = ((v85 + ~(v85 << 27)) >> 31) ^ (v85
                                                                                                 + ~(v85 << 27));
                                  BOOL v67 = v38 + 28 == a2;
                                  if (v38 + 28 == a2)
                                  {
                                    uint64_t v89 = 48;
                                    uint64_t v90 = 56;
                                    v38 += 28;
                                    unint64_t v91 = (char *)&v137 + 8;
                                  }
                                  else
                                  {
                                    unint64_t v86 = ((v38[30] >> 4) ^ (v38[30] >> 9) | ((unint64_t)((v38[28] >> 4) ^ (v38[28] >> 9)) << 32))
                                        + ~((unint64_t)((v38[30] >> 4) ^ (v38[30] >> 9)) << 32);
                                    unint64_t v87 = (v86 ^ (v86 >> 22)) + ~((v86 ^ (v86 >> 22)) << 13);
                                    unint64_t v88 = (9 * (v87 ^ (v87 >> 8))) ^ ((9 * (v87 ^ (v87 >> 8))) >> 15);
                                    v38 += 32;
                                    *((void *)&v137 + 1) = ((v88 + ~(v88 << 27)) >> 31) ^ (v88 + ~(v88 << 27));
                                    BOOL v67 = v38 == a2;
                                    uint64_t v89 = 56;
                                    uint64_t v90 = 64;
                                    unint64_t v91 = (char *)v138;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v90 & 0x38) == 0) {
                        goto LABEL_12;
                      }
                      uint64_t v92 = 56 - v89;
                      uint64_t v93 = v90;
                      if (v90 != 56 - v89)
                      {
                        do
                        {
                          uint64_t v100 = v93;
                          uint64_t v93 = v92;
                          uint64_t v92 = v100 % v92;
                        }
                        while (v92);
                        if (v93)
                        {
                          unint64_t v101 = (long long *)((char *)&v134 + v93);
                          do
                          {
                            char v103 = *((unsigned char *)v101 - 1);
                            unint64_t v101 = (long long *)((char *)v101 - 1);
                            char v102 = v103;
                            unint64_t v104 = (long long *)((char *)v101 + v90);
                            uint64_t v105 = v101;
                            do
                            {
                              uint64_t v106 = v105;
                              uint64_t v105 = v104;
                              *(unsigned char *)uint64_t v106 = *(unsigned char *)v104;
                              BOOL v107 = v90 < (char *)v138 - (char *)v104;
                              uint64_t v108 = (char *)&v134 + v90 - ((char *)v138 - (char *)v104);
                              unint64_t v104 = (long long *)((char *)v104 + v90);
                              if (!v107) {
                                unint64_t v104 = (long long *)v108;
                              }
                            }
                            while (v104 != v101);
                            *(unsigned char *)uint64_t v105 = v102;
                          }
                          while (v101 != &v134);
                        }
                        goto LABEL_12;
                      }
                      unint64_t v94 = 55 - v89;
                      if (55 - v89 >= (v89 | 7uLL)) {
                        unint64_t v94 = v89 | 7;
                      }
                      unint64_t v95 = (char *)&v134;
                      if (&v134 < (long long *)((char *)&v134 + v89 + v94 + 9))
                      {
                        uint64_t v96 = v90;
                        if (v91 < (char *)&v134 + v94 + 1) {
                          goto LABEL_34;
                        }
                      }
                      if (v94 >= 0x1F)
                      {
                        unint64_t v110 = v94 + 1;
                        uint64_t v109 = (v94 + 1) & 0x60;
                        uint64_t v111 = (long long *)((char *)&v134 + v90);
                        long long v112 = v134;
                        long long v113 = v135;
                        long long v114 = *(long long *)((char *)&v134 + v90 + 16);
                        long long v134 = *(long long *)((char *)&v134 + v90);
                        long long v135 = v114;
                        *uint64_t v111 = v112;
                        v111[1] = v113;
                        if (v109 != 32)
                        {
                          long long v115 = (long long *)((char *)&v136 + v90);
                          long long v116 = v136;
                          long long v117 = v137;
                          long long v118 = *(long long *)((char *)&v136 + v90 + 16);
                          long long v136 = *(long long *)((char *)&v136 + v90);
                          long long v137 = v118;
                          *long long v115 = v116;
                          v115[1] = v117;
                        }
                        if (v110 == v109) {
                          goto LABEL_12;
                        }
                        if ((v110 & 0x18) == 0)
                        {
                          unint64_t v95 = (char *)&v134 + v109;
                          uint64_t v96 = v90 + v109;
LABEL_34:
                          unint64_t v97 = v95 + 1;
                          do
                          {
                            char v98 = *(v97 - 1);
                            *(v97 - 1) = *((unsigned char *)&v134 + v96);
                            *((unsigned char *)&v134 + v96) = v98;
                            if (v97 == v91) {
                              break;
                            }
                            ++v97;
                          }
                          while (v96++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        uint64_t v109 = 0;
                      }
                      long long v119 = (uint64_t *)((char *)&v134 + v109);
                      uint64_t v120 = v94 - v109 + 1;
                      do
                      {
                        uint64_t v121 = *v119;
                        *long long v119 = v119[(unint64_t)v90 / 8];
                        v119[(unint64_t)v90 / 8] = v121;
                        ++v119;
                        v120 -= 8;
                      }
                      while (v120);
LABEL_12:
                      unint64_t v57 = v49 + v53 + v44 + *((void *)&v134 + 1);
                      unint64_t v49 = *((void *)&v136 + 1) + v53 - 0x4B6D499041670D8DLL * __ROR8__(v49 + v55 + v137, 42);
                      uint64_t v58 = v134 - 0x4B6D499041670D8DLL * v55;
                      uint64_t v59 = v58 + *((void *)&v134 + 1) + v135;
                      uint64_t v60 = __ROR8__(v54 + v48, 33);
                      unint64_t v61 = (0xB492B66FBE98F273 * __ROR8__(v57, 37)) ^ v50;
                      uint64_t v55 = __ROR8__(v59, 44) + v58 + __ROR8__(v61 + v48 + v58 + *((void *)&v135 + 1), 21);
                      unint64_t v44 = 0xB492B66FBE98F273 * v60;
                      unint64_t v62 = 0xB492B66FBE98F273 * v60 + v50 + v136;
                      unint64_t v63 = *((void *)&v136 + 1) + v137 + v62;
                      uint64_t v53 = v59 + *((void *)&v135 + 1);
                      uint64_t v50 = __ROR8__(v49 + v135 + v62 + *((void *)&v137 + 1), 21) + v62 + __ROR8__(v63, 44);
                      unint64_t v48 = v63 + *((void *)&v137 + 1);
                      v56 += v90;
                      unint64_t v54 = v61;
                      if (v67)
                      {
                        unint64_t v123 = 0x9DDFEA08EB382D69
                             * (v48 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v48)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v48)));
                        unint64_t v124 = 0x9DDFEA08EB382D69
                             * (v50 ^ ((0x9DDFEA08EB382D69 * (v55 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v55 ^ v50)));
                        unint64_t v125 = 0x9DDFEA08EB382D69 * (v124 ^ (v124 >> 47))
                             - 0x4B6D499041670D8DLL * ((v56 ^ (v56 >> 47)) + v60);
                        unint64_t v126 = 0x9DDFEA08EB382D69
                             * (v125 ^ (v61
                                      - 0x4B6D499041670D8DLL * (v49 ^ (v49 >> 47))
                                      - 0x622015F714C7D297 * (v123 ^ (v123 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v125 ^ (v126 >> 47) ^ v126)) ^ ((0x9DDFEA08EB382D69
                                                                                        * (v125 ^ (v126 >> 47) ^ v126)) >> 47));
                      }
                    }
                  }
                  unint64_t v122 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v134, v122, llvm::hashing::detail::get_execution_seed(void)::seed);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  unint64_t v4 = **a1;
  unint64_t v5 = &v3[2 * (void)v2];
  do
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    v4 += 2;
    uint64_t v8 = *v3;
    uint64_t v9 = v3[1];
    v3 += 2;
    BOOL result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute> &>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  unint64_t v3 = mlir::detail::DictionaryAttrStorage::construct(a2, *(long long ***)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::DictionaryAttrStorage::construct(size_t __sz, long long **a2)
{
  unint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = 16 * (void)v3;
    uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 16 * (void)v3, 3);
    uint64_t v7 = (_OWORD *)v6;
    do
    {
      long long v8 = *v4++;
      *v7++ = v8;
      v5 -= 16;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(__sz + 80) += 24;
  if (*(void *)__sz) {
    BOOL v9 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 24 > *(void *)(__sz + 8)
  }
                                                                                 - *(void *)__sz;
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(__sz + 24) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    uint64_t v13 = *(unsigned int *)(__sz + 24);
    if (v13 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v13) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v11];
    BOOL result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    BOOL result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 3;
  *BOOL result = 0;
  result[1] = v6;
  result[2] = v3;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJRNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  v18[0] = a2;
  v18[1] = a3;
  long long v17 = *a5;
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    unint64_t v7 = 0x1E8EB8000uLL;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v7 = 0x1E8EB8000;
    }
  }
  uint64_t v8 = *(void *)(v7 + 3024);
  unint64_t v9 = llvm::hashing::detail::hash_combine_range_impl<mlir::NamedAttribute const*>((_DWORD *)v17, (_DWORD *)(v17 + 16 * *((void *)&v17 + 1)));
  unint64_t v10 = v8 ^ HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * ((8 * v9 + 8) ^ v10);
  v15[0] = &v17;
  v15[1] = v18;
  unint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, -348639895* ((((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 32) >> 15) ^ (-348639895* (v10 ^ (v11 >> 47) ^ v11))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2 != (*a1)[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = **a1;
  uint64_t v5 = &v3[2 * (void)v2];
  do
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    v4 += 2;
    uint64_t v8 = *v3;
    uint64_t v9 = v3[1];
    v3 += 2;
    BOOL result = v8 == v6 && v9 == v7;
  }
  while (result && v3 != v5);
  return result;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DictionaryAttrStorage * mlir::StorageUniquer::get<mlir::detail::DictionaryAttrStorage,llvm::ArrayRef<mlir::NamedAttribute>>(llvm::function_ref<void ()(mlir::detail::DictionaryAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::NamedAttribute> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  unint64_t v3 = mlir::detail::DictionaryAttrStorage::construct(__sz, *(long long ***)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail21DictionaryAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DictionaryAttrEJNS_8ArrayRefINS1_14NamedAttributeEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(void *)(a2 + 24);
  return v3 == *(void *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(void *)(a2 + 8) == *(void *)(v2 + 16);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,char const(&)[1],mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,char const(&)[1],mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  size_t v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::StringAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 80) += 40;
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (*(void *)a1) {
    BOOL v6 = v5 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 24) >> 7;
    if (v7 >= 0x1E) {
      LOBYTE(v7) = 30;
    }
    uint64_t v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    uint64_t v10 = *(unsigned int *)(a1 + 24);
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v10) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v8];
    unint64_t v11 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *(void *)a1 = v11 + 5;
    unint64_t v12 = a2[1];
    if (!v12) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v13 = *a2;
    uint64_t v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, v12 + 1, 0);
    if (v12 < 8)
    {
      uint64_t v15 = (unsigned char *)v14;
      unint64_t v16 = (char *)v13;
    }
    else
    {
      uint64_t v15 = (unsigned char *)v14;
      unint64_t v16 = (char *)v13;
      if ((unint64_t)(v14 - v13) >= 0x20)
      {
        if (v12 < 0x20)
        {
          unint64_t v17 = 0;
          goto LABEL_22;
        }
        unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v18 = (long long *)(v13 + 16);
        uint64_t v19 = (_OWORD *)(v14 + 16);
        unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *uint64_t v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 32;
        }
        while (v20);
        if (v12 == v17) {
          goto LABEL_28;
        }
        if ((v12 & 0x18) != 0)
        {
LABEL_22:
          uint64_t v15 = (unsigned char *)(v14 + (v12 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v16 = (char *)(v13 + (v12 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v22 = (uint64_t *)(v13 + v17);
          unint64_t v23 = (void *)(v14 + v17);
          unint64_t v24 = v17 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v25 = *v22++;
            *v23++ = v25;
            v24 += 8;
          }
          while (v24);
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        unint64_t v16 = (char *)(v13 + v17);
        uint64_t v15 = (unsigned char *)(v14 + v17);
      }
    }
    do
    {
LABEL_27:
      char v26 = *v16++;
      *v15++ = v26;
    }
    while (v16 != (char *)(v13 + v12));
LABEL_28:
    *(unsigned char *)(v14 + v12) = 0;
    goto LABEL_29;
  }
  unint64_t v11 = (void *)(v4 + v5);
  *(void *)a1 = v4 + v5 + 40;
  unint64_t v12 = a2[1];
  if (v12) {
    goto LABEL_11;
  }
LABEL_16:
  uint64_t v14 = 0;
LABEL_29:
  uint64_t v27 = a2[2];
  *unint64_t v11 = 0;
  v11[1] = v27;
  void v11[2] = v14;
  v11[3] = v12;
  void v11[4] = 0;
  return v11;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJRA1_KcNS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  uint64_t v4 = (mlir::MLIRContext *)a1[1];

  mlir::detail::StringAttrStorage::initialize(a2, v4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(void *)(a2 + 24);
  return v3 == *(void *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(void *)(a2 + 8) == *(void *)(v2 + 16);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::NoneType>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::NoneType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  size_t v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefENS1_8NoneTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  uint64_t v4 = (mlir::MLIRContext *)a1[1];

  mlir::detail::StringAttrStorage::initialize(a2, v4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(void *)(a2 + 24);
  return v3 == *(void *)(*a1 + 8)
      && (!v3 || !memcmp(*(const void **)(a2 + 16), *(const void **)v2, v3))
      && *(void *)(a2 + 8) == *(void *)(v2 + 16);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::StringAttrStorage * mlir::StorageUniquer::get<mlir::detail::StringAttrStorage,llvm::StringRef,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::StringAttrStorage *)>,mlir::TypeID,llvm::StringRef,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  size_t v3 = mlir::detail::StringAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void _ZN4llvm12function_refIFvPN4mlir6detail17StringAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_10StringAttrEJNS_9StringRefERNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, mlir::detail::StringAttrStorage *a2)
{
  mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
  uint64_t v4 = (mlir::MLIRContext *)a1[1];

  mlir::detail::StringAttrStorage::initialize(a2, v4);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) != *(void *)*a1) {
    return 0;
  }
  uint64_t v4 = (const void **)(a2 + 16);
  unint64_t v5 = (const void **)(v2 + 1);
  if (*(_DWORD *)(a2 + 24) > 0x40u) {
    return llvm::APInt::equalSlowCase(v4, v5);
  }
  else {
    return *v4 == *v5;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerAttrStorage * mlir::StorageUniquer::get<mlir::detail::IntegerAttrStorage,mlir::IntegerType &,llvm::APInt>(llvm::function_ref<void ()(mlir::detail::IntegerAttrStorage *)>,mlir::TypeID,mlir::IntegerType &,llvm::APInt &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::IntegerAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail18IntegerAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11IntegerAttrEJRNS1_11IntegerTypeENS_5APIntEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) == *(void *)*a1
    && *(void *)(a2 + 16) == v2[1]
    && (size_t v3 = *(void *)(a2 + 32), v3 == v2[3]))
  {
    return memcmp(*(const void **)(a2 + 24), (const void *)v2[2], v3) == 0;
  }
  else
  {
    return 0;
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseArrayAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseArrayAttrStorage,mlir::Type &,unsigned long,llvm::ArrayRef<char> &>(llvm::function_ref<void ()(mlir::detail::DenseArrayAttrStorage *)>,mlir::TypeID,mlir::Type &,unsigned long,llvm::ArrayRef<char> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  size_t v3 = mlir::detail::DenseArrayAttrStorage::construct(__sz, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail21DenseArrayAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14DenseArrayAttrEJRNS1_4TypeEmRNS_8ArrayRefIcEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::detail::DenseArrayAttrImpl<long long>::parseWithoutBraces(mlir::AsmParser &,mlir::Type)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v6 = 0;
  if (!mlir::AsmParser::parseInteger<long long>(*a1, &v6)) {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = v6;
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v2 + 8);
  }
  *(void *)(*(void *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  return 1;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APInt>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = 0;
  uint64_t v3 = (_DWORD *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v17);
  unint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = v4 + 16;
    uint64_t v9 = v6 + 6;
    uint64_t v10 = 32 * v7;
    do
    {
      *((_DWORD *)v8 - 2) = *(v9 - 4);
      *((void *)v8 - 2) = *((void *)v9 - 3);
      *(v9 - 4) = 0;
      *((_DWORD *)v8 + 2) = *v9;
      *(void *)uint64_t v8 = *((void *)v9 - 1);
      v8 += 32;
      _DWORD *v9 = 0;
      v9 += 8;
      v10 -= 32;
    }
    while (v10);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      do
      {
        uint64_t v13 = (char *)&v6[v12];
        if (v6[v12 - 2] >= 0x41u)
        {
          uint64_t v14 = (void *)*((void *)v13 - 2);
          if (v14) {
            operator delete[](v14);
          }
        }
        if (*((_DWORD *)v13 - 6) >= 0x41u)
        {
          uint64_t v15 = (void *)*((void *)v13 - 4);
          if (v15) {
            operator delete[](v15);
          }
        }
        v12 -= 8;
      }
      while (v12 * 4);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v16 = v17;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v16;
}

void llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  uint64_t v7 = (void *)(a2 + 40);
  uint64_t v8 = v2 << 6;
  uint64_t v9 = (void *)(v5 + 40);
  do
  {
    while (1)
    {
      uint64_t v10 = v7 - 4;
      uint64_t v11 = v9 - 4;
      if (v6 != (void *)*(v9 - 4)) {
        break;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      uint64_t v12 = v7;
      uint64_t v13 = v9;
      if (v6 != (void *)*v9) {
        goto LABEL_8;
      }
LABEL_3:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, v13);
      v7 += 8;
      v9 += 8;
      v8 -= 64;
      if (!v8) {
        goto LABEL_9;
      }
    }
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
    uint64_t v12 = v7;
    uint64_t v13 = v9;
    if (v6 == (void *)*v9) {
      goto LABEL_3;
    }
LABEL_8:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v12, (uint64_t)v13);
    v7 += 8;
    v9 += 8;
    v8 -= 64;
  }
  while (v8);
LABEL_9:
  uint64_t v14 = a1[2];
  if (v14)
  {
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = v14 << 6;
    while (1)
    {
      unint64_t v17 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 24);
      if (v6 == *(void **)v17)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v17);
        unint64_t v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 != *(void **)v18) {
          goto LABEL_16;
        }
LABEL_11:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v18);
        v16 -= 64;
        if (!v16) {
          return;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v17);
        unint64_t v18 = (llvm::detail::DoubleAPFloat *)(v15 + v16 - 56);
        if (v6 == *(void **)v18) {
          goto LABEL_11;
        }
LABEL_16:
        llvm::detail::IEEEFloat::~IEEEFloat(v18);
        v16 -= 64;
        if (!v16) {
          return;
        }
      }
    }
  }
}

char *llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1[2];
  unint64_t v5 = v4 + a3;
  if (v5 > a1[3])
  {
    unint64_t v8 = *(void *)a1 + (v4 << 6);
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v13 = (uint64_t)(a2 - *(void *)a1) >> 6;
      unint64_t v17 = 0;
      uint64_t v14 = a1 + 4;
      uint64_t v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v15);
      unsigned int v16 = v17;
      if (*(unsigned int **)a1 != v14) {
        free(*(void **)a1);
      }
      *(void *)a1 = v15;
      a1[3] = v16;
      return &v15[64 * v13];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v10 = a1 + 4;
      uint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 64, &v17);
      llvm::SmallVectorTemplateBase<std::complex<llvm::APFloat>,false>::moveElementsForGrow(a1, (uint64_t)v11);
      unsigned int v12 = v17;
      if (*(unsigned int **)a1 != v10) {
        free(*(void **)a1);
      }
      *(void *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v17[0] = a2;
  v17[1] = a3;
  mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(*a5, a5[1], *(unsigned __int8 **)a6, *(void *)(a6 + 8), *a7, (uint64_t)v15);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    unint64_t v9 = 0x1E8EB8000uLL;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v9 = 0x1E8EB8000;
    }
  }
  uint64_t v22 = *(void *)(v9 + 3024);
  *(void *)&long long v18 = (v15[0] >> 4) ^ (v15[0] >> 9);
  *((void *)&v18 + 1) = v16;
  unsigned int v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v18, 0, (char *)v19, v20);
  uint64_t v14 = v15;
  *(void *)&long long v18 = v15;
  *((void *)&v18 + 1) = v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void mlir::detail::DenseIntOrFPElementsAttrStorage::getKey(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)&long long v32 = a1;
  *((void *)&v32 + 1) = a2;
  if (!a4)
  {
    *(void *)a6 = a1;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 32) = 0;
    *(void *)(a6 + 16) = a3;
    *(unsigned char *)(a6 + 40) = 0;
    return;
  }
  v30[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v32);
  BOOL isInteger = mlir::Type::isInteger((mlir::Type *)v30, 1);
  BOOL v11 = isInteger;
  if (a5)
  {
    long long v12 = v32;
    if (isInteger)
    {
      if (*a3) {
        unint64_t v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
      }
      else {
        unint64_t v13 = (char *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
      }
      unint64_t v14 = *v13;
      {
        unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v29 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v29;
      }
      unint64_t v15 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v14) ^ HIDWORD(v14));
      unint64_t v16 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v15 >> 47) ^ v15);
      *(_OWORD *)a6 = v12;
      *(void *)(a6 + 16) = v13;
      *(void *)(a6 + 24) = 1;
      *(void *)(a6 + 32) = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
      *(unsigned char *)(a6 + 40) = 1;
      return;
    }
    unint64_t v20 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
    *(_OWORD *)a6 = v12;
    *(void *)(a6 + 16) = a3;
    *(void *)(a6 + 24) = a4;
    *(void *)(a6 + 32) = v20;
LABEL_21:
    *(unsigned char *)(a6 + 40) = 1;
    return;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v32);
  char NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v18);
  if (v11)
  {
    mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData(v32, *((uint64_t *)&v32 + 1), a3, a4, NumElements, a6);
    return;
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v32);
  DenseElementBitunsigned int Width = mlir::detail::getDenseElementBitWidth(OperandRange);
  size_t v23 = (DenseElementBitWidth + 7) >> 3;
  if (a4 >= v23) {
    unint64_t v24 = (DenseElementBitWidth + 7) >> 3;
  }
  else {
    unint64_t v24 = a4;
  }
  unint64_t v25 = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[v24]);
  unint64_t v31 = v25;
  if (v23 == a4)
  {
LABEL_20:
    *(_OWORD *)a6 = v32;
    *(void *)(a6 + 16) = a3;
    *(void *)(a6 + 24) = v24;
    *(void *)(a6 + 32) = v25;
    goto LABEL_21;
  }
  size_t v26 = v23;
  while (!memcmp(a3, &a3[v26], v23))
  {
    v26 += v23;
    if (a4 == v26) {
      goto LABEL_20;
    }
  }
  long long v27 = v32;
  v30[0] = &a3[v26];
  v30[1] = a4 - v26;
  unint64_t v28 = llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(&v31, (uint64_t)v30);
  *(_OWORD *)a6 = v27;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = v28;
  *(unsigned char *)(a6 + 40) = 0;
}

unint64_t mlir::detail::DenseIntOrFPElementsAttrStorage::getKeyForBoolData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  BOOL v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatFalse;
  int v12 = *a3;
  if (v12) {
    BOOL v11 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
  }
  uint64_t v13 = a4 - 1;
  if (a4 != 1 || (int v14 = *v11, v12 != v14))
  {
    if (a5 & 7) != 0 && (v12)
    {
      if (0xFFu >> (8 - (a5 & 7)) != (char)a3[v13])
      {
LABEL_23:
        unint64_t result = llvm::hashing::detail::hash_combine_range_impl<char const>(a3, (uint64_t)&a3[a4]);
        char v23 = 0;
        goto LABEL_24;
      }
      if (a4 == 1)
      {
        {
          unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v29 = 0xFF51AFD7ED558CCDLL;
          }
          llvm::hashing::detail::get_execution_seed(void)::seed = v29;
        }
        unint64_t v18 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) ^ ((0x9DDFEA08EB382D69 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 0x7FFFFFFF8) ^ 0xFFFFFFFFLL)) >> 47) ^ 0xFFFFFFFF);
        unint64_t result = 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47));
        uint64_t v6 = 1;
        uint64_t v7 = (unsigned __int8 *)&mlir::detail::DenseIntOrFPElementsAttrStorage::kSplatTrue;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = a4;
      if (!a4)
      {
LABEL_19:
        unint64_t v15 = (char)*v11;
        {
          unint64_t v30 = v11;
          BOOL v11 = v30;
          if (v24)
          {
            unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v25 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v25;
            BOOL v11 = v30;
          }
        }
        unint64_t v16 = HIDWORD(v15);
        uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
        goto LABEL_21;
      }
    }
    uint64_t v20 = 0;
    if (v12) {
      unsigned __int8 v21 = -1;
    }
    else {
      unsigned __int8 v21 = 0;
    }
    while (a3[v20] == v21)
    {
      if (v13 == ++v20) {
        goto LABEL_19;
      }
    }
    goto LABEL_23;
  }
  unint64_t v15 = (char)v14;
  {
    size_t v26 = v11;
    BOOL v11 = v26;
    if (v27)
    {
      unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v28 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v28;
      BOOL v11 = v26;
    }
  }
  unint64_t v16 = HIDWORD(v15);
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
LABEL_21:
  unint64_t v22 = 0x9DDFEA08EB382D69 * ((v17 + 8 * v15) ^ v16);
  unint64_t result = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v16 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v22 >> 47) ^ v22)) >> 47));
  uint64_t v6 = 1;
  uint64_t v7 = v11;
LABEL_22:
  char v23 = 1;
LABEL_24:
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(void *)(a6 + 24) = v6;
  *(void *)(a6 + 32) = result;
  *(unsigned char *)(a6 + 40) = v23;
  return result;
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::ArrayRef<char>>(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    unsigned int v10 = a1;
    uint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a2, *(void *)a2 + *(void *)(a2 + 8));
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)*a1 == *(void *)(a2 + 8) && (size_t v3 = v2[3], v3 == *(void *)(a2 + 40))) {
    return memcmp((const void *)v2[2], *(const void **)(a2 + 32), v3) == 0;
  }
  else {
    return 0;
  }
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseIntOrFPElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseIntOrFPElementsAttrStorage,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &>(llvm::function_ref<void ()(mlir::detail::DenseIntOrFPElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,llvm::ArrayRef<char> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__n128 **a1, size_t a2)
{
  __n128 v3 = **a1;
  __n128 v4 = (*a1)[2];
  v10[1] = (*a1)[1];
  void v10[2] = v4;
  v10[0] = v3;
  __n128 v6 = mlir::detail::DenseIntOrFPElementsAttrStorage::construct(a2, v10);
  uint64_t v7 = v5;
  int v8 = a1[1];
  if (v8->n128_u64[0]) {
    ((void (*)(unint64_t, uint64_t, __n128))v8->n128_u64[0])(v8->n128_u64[1], v5, v6);
  }
  return v7;
}

__n128 mlir::detail::DenseIntOrFPElementsAttrStorage::construct(size_t __sz, __n128 *a2)
{
  size_t v4 = a2[1].n128_u64[1];
  if (v4)
  {
    uint64_t v5 = (const void *)a2[1].n128_u64[0];
    __n128 v6 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, a2[1].n128_i64[1], 3);
    memcpy(v6, v5, v4);
  }
  else
  {
    __n128 v6 = 0;
  }
  *(void *)(__sz + 80) += 48;
  if (*(void *)__sz) {
    BOOL v7 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 48 > *(void *)(__sz + 8)
  }
                                                                                 - *(void *)__sz;
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(__sz + 24) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *(unsigned int *)(__sz + 24);
    if (v11 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v11) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v9];
    unint64_t v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v12 = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)__sz = v12 + 48;
  unsigned __int8 v13 = a2[2].n128_u8[8];
  __n128 result = *a2;
  *(void *)unint64_t v12 = 0;
  *(__n128 *)(v12 + 8) = result;
  *(unsigned char *)(v12 + 24) = v13;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail31DenseIntOrFPElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_24DenseIntOrFPElementsAttrEJRNS1_10ShapedTypeERNS_8ArrayRefIcEERbEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v18[0] = a2;
  v18[1] = a3;
  long long v8 = *a6;
  long long v15 = *a5;
  long long v16 = v8;
  uint64_t v17 = *((void *)a6 + 2);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    unint64_t v9 = 0x1E8EB8000uLL;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v9 = 0x1E8EB8000;
    }
  }
  uint64_t v22 = *(void *)(v9 + 3024);
  *(void *)&v19[0] = (v15 >> 4) ^ (v15 >> 9);
  unsigned int v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::AffineMap>((llvm::hashing::detail::hash_combine_recursive_helper *)v19, 0, (void *)v19 + 1, v20, (unint64_t *)&v16);
  uint64_t v14 = &v15;
  *(void *)&v19[0] = &v15;
  *((void *)&v19[0] + 1) = v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **(void **)a1 && *(void *)(a2 + 24) == *(void *)(*(void *)a1 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::DenseResourceElementsAttrStorage * mlir::StorageUniquer::get<mlir::detail::DenseResourceElementsAttrStorage,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &>(llvm::function_ref<void ()(mlir::detail::DenseResourceElementsAttrStorage *)>,mlir::TypeID,mlir::ShapedType &,mlir::DialectResourceBlobHandle<mlir::BuiltinDialect> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *a2)
{
  __n128 v4 = mlir::detail::DenseResourceElementsAttrStorage::construct(a2, (long long *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::detail::DenseResourceElementsAttrStorage::construct(uint64_t *a1, long long *a2)
{
  long long v3 = *a2;
  __n128 v12 = (__n128)a2[1];
  uint64_t v13 = *((void *)a2 + 4);
  a1[10] += 48;
  uint64_t v4 = *a1;
  if (*a1 && ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) - v4 + 48 <= a1[1] - v4)
  {
    unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    long long v11 = v3;
    unsigned int v6 = *((_DWORD *)a1 + 6) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *((unsigned int *)a1 + 6);
    if (v9 >= *((_DWORD *)a1 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 2), a1 + 4, v9 + 1, 8);
      LODWORD(v9) = *((_DWORD *)a1 + 6);
    }
    *(void *)(a1[2] + 8 * v9) = buffer;
    ++*((_DWORD *)a1 + 6);
    a1[1] = (uint64_t)&buffer[v7];
    unint64_t v5 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v3 = v11;
  }
  *a1 = v5 + 48;
  *(void *)unint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = v3;
  __n128 result = v12;
  *(__n128 *)(v5 + 24) = v12;
  *(void *)(v5 + 40) = v13;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail32DenseResourceElementsAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_25DenseResourceElementsAttrEJRNS1_10ShapedTypeERNS1_25DialectResourceBlobHandleINS1_14BuiltinDialectEEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

mlir::BuiltinDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::BuiltinDialect **a2@<X8>)
{
  long long v3 = *a1;
  uint64_t v4 = (mlir::BuiltinDialect *)operator new(0x60uLL);
  __n128 result = mlir::BuiltinDialect::BuiltinDialect(v4, v3);
  *a2 = result;
  return result;
}

void mlir::DialectResourceBlobManager::insert<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(pthread_rwlock_t **a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, const unsigned __int8 *a4@<X3>, long long *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LOBYTE(v28) = 0;
  char v34 = 0;
  if (*((unsigned char *)a5 + 64))
  {
    long long v28 = *a5;
    unint64_t v12 = *((void *)a5 + 6);
    uint64_t v29 = *((void *)a5 + 2);
    unint64_t v32 = v12;
    if (v12 >= 8)
    {
      uint64_t v13 = (long long *)((char *)a5 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        (*(void (**)(long long *, long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(&v30, v13);
      }
      else
      {
        long long v30 = *v13;
        unint64_t v31 = *((void *)a5 + 5);
      }
      *((void *)a5 + 6) = 0;
    }
    char v33 = *((unsigned char *)a5 + 56);
    char v34 = 1;
  }
  uint64_t v14 = mlir::DialectResourceBlobManager::insert(a1, a3, a4, (uint64_t)&v28);
  if (v34 && v32 >= 8)
  {
    long long v15 = (v32 & 2) != 0 ? &v30 : (long long *)v30;
    (*(void (**)(long long *, void, void, uint64_t))(v32 & 0xFFFFFFFFFFFFFFF8))(v15, v28, *((void *)&v28 + 1), v29);
    char v16 = v32;
    if (v32 >= 8)
    {
      if ((v32 & 4) != 0)
      {
        if ((v32 & 2) != 0) {
          uint64_t v17 = &v30;
        }
        else {
          uint64_t v17 = (long long *)v30;
        }
        (*(void (**)(long long *))((v32 & 0xFFFFFFFFFFFFFFF8) + 16))(v17);
      }
      if ((v16 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v30, *((void **)&v30 + 1));
      }
    }
  }
  {
    size_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
    unint64_t v27 = 103;
    unint64_t v19 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v19) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v27;
    }
    uint64_t v21 = &v26[v20];
    unint64_t v22 = v27 - v20;
    if (v27 - v20 >= 0x12) {
      uint64_t v23 = 18;
    }
    else {
      uint64_t v23 = v27 - v20;
    }
    unint64_t v24 = v22 - v23;
    if (v24 >= v24 - 1) {
      uint64_t v25 = v24 - 1;
    }
    else {
      uint64_t v25 = v24;
    }
    mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
  }
  uint64_t v18 = mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id;
  *a6 = v14;
  a6[1] = v18;
  a6[2] = a2;
}

void *mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>(uint64_t a1, uint64_t *a2)
{
  Storage = mlir::detail::DistinctAttributeUniquer::allocateStorage(a1, *a2);
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    unint64_t v4 = 0x1E8EB8000;
    if (v6)
    {
      uint64_t v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      unint64_t v15 = 68;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v15;
      }
      uint64_t v9 = &v14[v8];
      unint64_t v10 = v15 - v8;
      if (v15 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v15 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v4 = 0x1E8EB8000;
    }
  }
  void *Storage = mlir::AbstractAttribute::lookup(*(void *)(v4 + 1888), a1);
  return Storage;
}

const char *mlir::BuiltinDialect::initialize(mlir::BuiltinDialect *this)
{
  mlir::BuiltinDialect::registerTypes(this);
  mlir::BuiltinDialect::registerAttributes(this);
  mlir::BuiltinDialect::registerLocationAttributes(this);
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v23 = (const char *)mlir::RegisteredOperationName::Model<mlir::ModuleOp>::Model(v2, (uint64_t)this);
  mlir::RegisteredOperationName::insert((uint64_t *)&v23, (uint64_t)&mlir::ModuleOp::getAttributeNames(void)::attrNames, 2);
  long long v3 = v23;
  uint64_t v23 = 0;
  if (v3) {
    (*(void (**)(const char *))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::UnrealizedConversionCastOp>((uint64_t)this);
  unint64_t v4 = (mlir::ResourceBlobManagerDialectInterface *)operator new(0x28uLL);
  unint64_t v5 = mlir::ResourceBlobManagerDialectInterface::ResourceBlobManagerDialectInterface(v4, this);
  *(void *)unint64_t v5 = &unk_1EC9C6FA8;
  uint64_t v23 = (const char *)v5;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v23);
  int v6 = v23;
  uint64_t v23 = 0;
  if (v6) {
    (*(void (**)(const char *))(*(void *)v6 + 8))(v6);
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  unint64_t v8 = 0x1E8EB8000uLL;
  {
    unint64_t v22 = v7;
    unint64_t v8 = 0x1E8EB8000;
    int v14 = v13;
    unint64_t v7 = v22;
    if (v14)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      unint64_t v24 = 77;
      unint64_t v15 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v15) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = v24;
      }
      uint64_t v17 = &v23[v16];
      unint64_t v18 = v24 - v16;
      if (v24 - v16 >= 0x12) {
        uint64_t v19 = 18;
      }
      else {
        uint64_t v19 = v24 - v16;
      }
      unint64_t v20 = v18 - v19;
      if (v20 >= v20 - 1) {
        uint64_t v21 = v20 - 1;
      }
      else {
        uint64_t v21 = v20;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      unint64_t v8 = 0x1E8EB8000;
      unint64_t v7 = v22;
    }
  }
  uint64_t v9 = *(void *)(v8 + 3872);
  *((void *)v7 + 1) = this;
  *((void *)v7 + 2) = v9;
  *(void *)unint64_t v7 = &unk_1EC99BE70;
  *((void *)v7 + 3) = v4;
  uint64_t v23 = v7;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v23);
  uint64_t v11 = v23;
  uint64_t v23 = 0;
  if (v11) {
    (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
  }
  return mlir::builtin_dialect_detail::addBytecodeInterface(this, v10);
}

mlir::BuiltinDialect *mlir::BuiltinDialect::BuiltinDialect(mlir::BuiltinDialect *this, mlir::MLIRContext *a2)
{
  long long v3 = (mlir::BuiltinDialect *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"builtin", 7, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id);
  *(void *)long long v3 = &unk_1EC9AA690;
  mlir::BuiltinDialect::initialize(v3);
  return this;
}

void mlir::BuiltinDialect::~BuiltinDialect(llvm **this)
{
}

void sub_180464FA0(void *__p)
{
  operator delete(__p);
}

void mlir::ModuleOp::build(mlir::StringAttr **a1, mlir::OperationState *a2, uint64_t a3)
{
  int v6 = (uint64_t *)mlir::OperationState::addRegion(a2);
  unint64_t v7 = operator new(0x48uLL);
  *unint64_t v7 = 0u;
  v7[1] = 0u;
  *((void *)v7 + 4) = v7 + 2;
  *((void *)v7 + 5) = v7 + 2;
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((void *)v7 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v6, (uint64_t)v7);
  uint64_t v8 = *v6;
  *((void *)v7 + 2) = v6;
  *((void *)v7 + 1) = v8;
  unint64_t v7 = (_OWORD *)((char *)v7 + 8);
  *(void *)(v8 + 8) = v7;
  *int v6 = (uint64_t)v7;
  if (*(unsigned char *)(a3 + 16))
  {
    __int16 v14 = 261;
    uint64_t v9 = *(void *)(a3 + 8);
    v13[0] = *(void *)a3;
    v13[1] = v9;
    uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v13);
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(a1, (uint64_t)"sym_name", 8, StringAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, NamedAttr, v12);
  }
}

mlir::GenericProgramPoint *mlir::ModuleOp::create(uint64_t a1, long long *a2)
{
  uint64_t v5 = a1;
  v4[0] = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  memset(&v4[1], 0, 24);
  return mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(v4, v5, a2);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::ModuleOp,std::optional<llvm::StringRef> &>(mlir::StringAttr **a1, uint64_t a2, long long *a3)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"builtin.module";
    _OWORD v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  long long v12 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v19, (uint64_t)&v12);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v10;
}

uint64_t mlir::ModuleOp::verify(uint64_t **this)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  if (*((unsigned char *)v1 + 47))
  {
    __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v1);
    uint64_t Value = (long long *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
    if (!v2)
    {
LABEL_23:
      unint64_t v15 = *this;
      if (*((unsigned char *)*this + 47))
      {
        __s1 = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v15);
        uint64_t v17 = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__s1);
        uint64_t v18 = 1;
        if (!v16) {
          return v18;
        }
      }
      else
      {
        uint64_t v17 = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v15 + 7));
        uint64_t v18 = 1;
        if (!v16) {
          return v18;
        }
      }
      uint64_t AttrData = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = (mlir::CallGraphNode *)((char *)v17 + 16 * v16);
      while (1)
      {
        unint64_t v24 = (void *)*((void *)v17 + 1);
        if (!mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8)) {
          goto LABEL_29;
        }
        mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(*v24 + 8);
        if (v21) {
          break;
        }
LABEL_28:
        __s1 = (void *)mlir::CallGraphNode::getCallableRegion(v17);
        uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__s1);
        unint64_t v20 = v23;
        uint64_t v21 = v24;
LABEL_29:
        uint64_t v17 = (mlir::CallGraphNode *)((char *)v17 + 16);
        if (v17 == v22) {
          return 1;
        }
      }
      __int16 v122 = 257;
      mlir::OpState::emitOpError(this, &v119, (uint64_t)&CallableRegion);
      uint64_t v25 = CallableRegion;
      if (CallableRegion)
      {
        LODWORD(v123) = 3;
        *((void *)&v123 + 1) = "expects at most one data layout attribute";
        uint64_t v124 = 41;
        size_t v26 = (char *)__src;
        if (v129 >= HIDWORD(v129))
        {
          unint64_t v88 = v129 + 1;
          if (__src <= &v123 && (char *)__src + 24 * v129 > (char *)&v123)
          {
            int64_t v93 = (char *)&v123 - (unsigned char *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            size_t v26 = (char *)__src;
            unint64_t v27 = (char *)__src + v93;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v130, v88, 24);
            unint64_t v27 = (char *)&v123;
            size_t v26 = (char *)__src;
          }
        }
        else
        {
          unint64_t v27 = (char *)&v123;
        }
        long long v28 = &v26[24 * v129];
        long long v29 = *(_OWORD *)v27;
        *((void *)v28 + 2) = *((void *)v27 + 2);
        *(_OWORD *)long long v28 = v29;
        LODWORD(v129) = v129 + 1;
        uint64_t v25 = CallableRegion;
      }
      __s1 = v25;
      LOBYTE(v137) = 0;
      char v146 = 0;
      if (!v135)
      {
LABEL_52:
        mlir::InFlightDiagnostic::abandon(&CallableRegion);
        if (CallableRegion) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&CallableRegion);
        }
        if (v135)
        {
          char v34 = (void **)__p;
          if ((void)__p)
          {
            uint64_t v35 = (void **)*((void *)&__p + 1);
            unint64_t v36 = (void *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
                uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
              while (v35 != v34);
              unint64_t v36 = (void *)__p;
            }
            *((void *)&__p + 1) = v34;
            operator delete(v36);
          }
          uint64_t v37 = (void *)v131;
          if ((void)v131)
          {
            char v38 = (void *)*((void *)&v131 + 1);
            unint64_t v39 = (void *)v131;
            if (*((void *)&v131 + 1) != (void)v131)
            {
              do
              {
                unint64_t v41 = (void *)*--v38;
                unint64_t v40 = v41;
                *char v38 = 0;
                if (v41) {
                  operator delete[](v40);
                }
              }
              while (v38 != v37);
              unint64_t v39 = (void *)v131;
            }
            *((void *)&v131 + 1) = v37;
            operator delete(v39);
          }
          if (__src != v130) {
            free(__src);
          }
        }
        uint64_t v42 = mlir::Diagnostic::attachNote(&v137, 0, 0);
        uint64_t v43 = v42 + 16;
        unint64_t v44 = *(void *)(v42 + 16);
        LODWORD(CallableRegion) = 3;
        unint64_t v126 = "'";
        uint64_t v127 = 1;
        uint64_t v45 = *(unsigned int *)(v42 + 24);
        if (v45 >= *(_DWORD *)(v42 + 28))
        {
          unint64_t v80 = v45 + 1;
          BOOL v81 = v44 + 24 * v45 > (unint64_t)&CallableRegion;
          if (v44 <= (unint64_t)&CallableRegion && v81)
          {
            uint64_t v89 = (char *)&CallableRegion - v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
            unint64_t v44 = *(void *)(v42 + 16);
            uint64_t v46 = (const void ***)&v89[v44];
LABEL_72:
            uint64_t v47 = v44 + 24 * *(unsigned int *)(v42 + 24);
            long long v48 = *(_OWORD *)v46;
            *(void *)(v47 + 16) = v46[2];
            *(_OWORD *)uint64_t v47 = v48;
            ++*(_DWORD *)(v42 + 24);
            LOWORD(v129) = 261;
            uint64_t CallableRegion = AttrData;
            unint64_t v126 = v20;
            uint64_t v49 = mlir::Diagnostic::operator<<(v42, &CallableRegion);
            uint64_t v50 = v49 + 16;
            unint64_t v51 = *(void *)(v49 + 16);
            LODWORD(v119) = 3;
            uint64_t v120 = "' is a data layout attribute";
            uint64_t v121 = 28;
            uint64_t v52 = *(unsigned int *)(v49 + 24);
            if (v52 >= *(_DWORD *)(v49 + 28))
            {
              unint64_t v82 = v52 + 1;
              BOOL v83 = v51 + 24 * v52 > (unint64_t)&v119;
              if (v51 <= (unint64_t)&v119 && v83)
              {
                uint64_t v90 = (char *)&v119 - v51;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
                unint64_t v51 = *(void *)(v49 + 16);
                uint64_t v53 = (const void ***)&v90[v51];
LABEL_74:
                uint64_t v54 = v51 + 24 * *(unsigned int *)(v49 + 24);
                long long v55 = *(_OWORD *)v53;
                *(void *)(v54 + 16) = v53[2];
                *(_OWORD *)uint64_t v54 = v55;
                ++*(_DWORD *)(v49 + 24);
                uint64_t v56 = mlir::Diagnostic::attachNote(&v137, 0, 0);
                uint64_t v57 = v56 + 16;
                unint64_t v58 = *(void *)(v56 + 16);
                LODWORD(CallableRegion) = 3;
                unint64_t v126 = "'";
                uint64_t v127 = 1;
                uint64_t v59 = *(unsigned int *)(v56 + 24);
                if (v59 >= *(_DWORD *)(v56 + 28))
                {
                  unint64_t v84 = v59 + 1;
                  BOOL v85 = v58 + 24 * v59 > (unint64_t)&CallableRegion;
                  if (v58 <= (unint64_t)&CallableRegion && v85)
                  {
                    unint64_t v91 = (char *)&CallableRegion - v58;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                    unint64_t v58 = *(void *)(v56 + 16);
                    uint64_t v60 = (const void ***)&v91[v58];
LABEL_76:
                    uint64_t v61 = v58 + 24 * *(unsigned int *)(v56 + 24);
                    long long v62 = *(_OWORD *)v60;
                    *(void *)(v61 + 16) = v60[2];
                    *(_OWORD *)uint64_t v61 = v62;
                    ++*(_DWORD *)(v56 + 24);
                    *(void *)&long long v123 = mlir::CallGraphNode::getCallableRegion(v17);
                    unint64_t v63 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v123);
                    LOWORD(v129) = 261;
                    uint64_t CallableRegion = v63;
                    unint64_t v126 = v64;
                    uint64_t v65 = mlir::Diagnostic::operator<<(v56, &CallableRegion);
                    uint64_t v66 = v65 + 16;
                    unint64_t v67 = *(void *)(v65 + 16);
                    LODWORD(v119) = 3;
                    uint64_t v120 = "' is a data layout attribute";
                    uint64_t v121 = 28;
                    uint64_t v68 = *(unsigned int *)(v65 + 24);
                    if (v68 >= *(_DWORD *)(v65 + 28))
                    {
                      unint64_t v86 = v68 + 1;
                      BOOL v87 = v67 + 24 * v68 > (unint64_t)&v119;
                      if (v67 <= (unint64_t)&v119 && v87)
                      {
                        uint64_t v92 = (char *)&v119 - v67;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                        unint64_t v67 = *(void *)(v65 + 16);
                        unint64_t v69 = (const void ***)&v92[v67];
                        goto LABEL_78;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 32), v86, 24);
                      unint64_t v67 = *(void *)(v65 + 16);
                    }
                    unint64_t v69 = &v119;
LABEL_78:
                    uint64_t v70 = v67 + 24 * *(unsigned int *)(v65 + 24);
                    long long v71 = *(_OWORD *)v69;
                    *(void *)(v70 + 16) = v69[2];
                    *(_OWORD *)uint64_t v70 = v71;
                    ++*(_DWORD *)(v65 + 24);
                    if (__s1) {
                      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
                    }
                    if (v146)
                    {
                      unint64_t v72 = (void **)v144;
                      if ((void)v144)
                      {
                        unint64_t v73 = (void **)*((void *)&v144 + 1);
                        unint64_t v74 = (void *)v144;
                        if (*((void *)&v144 + 1) != (void)v144)
                        {
                          do
                            unint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
                          while (v73 != v72);
                          unint64_t v74 = (void *)v144;
                        }
                        *((void *)&v144 + 1) = v72;
                        operator delete(v74);
                      }
                      unint64_t v75 = (void *)v142;
                      if ((void)v142)
                      {
                        unint64_t v76 = (void *)*((void *)&v142 + 1);
                        unint64_t v77 = (void *)v142;
                        if (*((void *)&v142 + 1) != (void)v142)
                        {
                          do
                          {
                            unint64_t v79 = (void *)*--v76;
                            unint64_t v78 = v79;
                            *unint64_t v76 = 0;
                            if (v79) {
                              operator delete[](v78);
                            }
                          }
                          while (v76 != v75);
                          unint64_t v77 = (void *)v142;
                        }
                        *((void *)&v142 + 1) = v75;
                        operator delete(v77);
                      }
                      if (__dst != v141) {
                        free(__dst);
                      }
                    }
                    goto LABEL_28;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v57, (void *)(v56 + 32), v84, 24);
                  unint64_t v58 = *(void *)(v56 + 16);
                }
                uint64_t v60 = &CallableRegion;
                goto LABEL_76;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v50, (void *)(v49 + 32), v82, 24);
              unint64_t v51 = *(void *)(v49 + 16);
            }
            uint64_t v53 = &v119;
            goto LABEL_74;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(v43, (void *)(v42 + 32), v80, 24);
          unint64_t v44 = *(void *)(v42 + 16);
        }
        uint64_t v46 = &CallableRegion;
        goto LABEL_72;
      }
      uint64_t v137 = (uint64_t)v126;
      LODWORD(v138) = v127;
      __dst = v141;
      uint64_t v140 = 0x400000000;
      int v30 = v129;
      if (!v129)
      {
        int v31 = 1;
        goto LABEL_48;
      }
      if (__src != v130)
      {
        __dst = __src;
        uint64_t v140 = v129;
        __src = v130;
        HIDWORD(v129) = 0;
        int v31 = 1;
LABEL_47:
        LODWORD(v129) = 0;
LABEL_48:
        long long v142 = v131;
        uint64_t v33 = v132;
        uint64_t v132 = 0;
        long long v131 = 0uLL;
        long long v144 = __p;
        uint64_t v143 = v33;
        uint64_t v145 = v134;
        uint64_t v134 = 0;
        long long __p = 0uLL;
        char v146 = 1;
        if (v31)
        {
          if (__src != v130) {
            free(__src);
          }
          unsigned __int8 v135 = 0;
        }
        goto LABEL_52;
      }
      if (v129 < 5)
      {
        uint64_t v32 = v129;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v129, 24);
        uint64_t v32 = v129;
        if (!v129) {
          goto LABEL_46;
        }
      }
      memcpy(__dst, __src, 24 * v32);
LABEL_46:
      LODWORD(v140) = v30;
      int v31 = v135;
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t Value = (long long *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)(v1 + 7));
    if (!v2) {
      goto LABEL_23;
    }
  }
  uint64_t v4 = 16 * v2;
  while (1)
  {
    long long v123 = *Value;
    uint64_t CallableRegion = (const void **)mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
    int v6 = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
    if (v7)
    {
      char v8 = v6;
      uint64_t v9 = (char *)memchr(v6, 46, v7);
      if (v9)
      {
        if (v9 - v8 != -1) {
          goto LABEL_8;
        }
      }
    }
    __s1 = "sym_name";
    uint64_t v137 = 8;
    uint64_t v138 = "sym_visibility";
    __dst = (void *)14;
    long long v119 = (const void **)mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
    unint64_t v10 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v119);
    if (v11)
    {
      long long v12 = v10;
      uint64_t v13 = (void *)v11;
      if (v137 == v11 && !memcmp(__s1, v10, v11))
      {
LABEL_22:
        p_s1 = &__s1;
        goto LABEL_7;
      }
      if (__dst != v13 || (int v14 = memcmp(v138, v12, (size_t)v13), p_s1 = &v138, v14)) {
        p_s1 = (void **)&v140;
      }
    }
    else
    {
      if (!v137) {
        goto LABEL_22;
      }
      p_s1 = __dst ? (void **)&v140 : &v138;
    }
LABEL_7:
    if ((char *)p_s1 - (char *)&__s1 == 32) {
      break;
    }
LABEL_8:
    ++Value;
    v4 -= 16;
    if (!v4) {
      goto LABEL_23;
    }
  }
  __int16 v122 = 257;
  mlir::OpState::emitOpError(this, &v119, (uint64_t)&__s1);
  if (__s1)
  {
    LODWORD(CallableRegion) = 3;
    unint64_t v126 = "can only contain attributes with dialect-prefixed names, found: '";
    uint64_t v127 = 65;
    p_uint64_t CallableRegion = &CallableRegion;
    uint64_t v96 = (char *)__dst;
    if (v140 >= HIDWORD(v140))
    {
      unint64_t v113 = v140 + 1;
      if (__dst <= &CallableRegion && (char *)__dst + 24 * v140 > (char *)&CallableRegion)
      {
        int64_t v115 = (char *)&CallableRegion - (unsigned char *)__dst;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        uint64_t v96 = (char *)__dst;
        p_uint64_t CallableRegion = (const void ***)((char *)__dst + v115);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v113, 24);
        p_uint64_t CallableRegion = &CallableRegion;
        uint64_t v96 = (char *)__dst;
      }
    }
    unint64_t v97 = &v96[24 * v140];
    long long v98 = *(_OWORD *)p_CallableRegion;
    *((void *)v97 + 2) = p_CallableRegion[2];
    *(_OWORD *)unint64_t v97 = v98;
    LODWORD(v140) = v140 + 1;
  }
  uint64_t v118 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v123);
  unint64_t v99 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v118);
  if (__s1)
  {
    LOWORD(v129) = 261;
    uint64_t CallableRegion = v99;
    unint64_t v126 = v100;
    mlir::Diagnostic::operator<<((uint64_t)&v137, &CallableRegion);
    if (__s1)
    {
      LODWORD(CallableRegion) = 3;
      unint64_t v126 = "'";
      uint64_t v127 = 1;
      unint64_t v101 = &CallableRegion;
      char v102 = (char *)__dst;
      if (v140 >= HIDWORD(v140))
      {
        unint64_t v114 = v140 + 1;
        if (__dst <= &CallableRegion && (char *)__dst + 24 * v140 > (char *)&CallableRegion)
        {
          int64_t v116 = (char *)&CallableRegion - (unsigned char *)__dst;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          char v102 = (char *)__dst;
          unint64_t v101 = (const void ***)((char *)__dst + v116);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v141, v114, 24);
          unint64_t v101 = &CallableRegion;
          char v102 = (char *)__dst;
        }
      }
      char v103 = &v102[24 * v140];
      long long v104 = *(_OWORD *)v101;
      *((void *)v103 + 2) = v101[2];
      *(_OWORD *)char v103 = v104;
      LODWORD(v140) = v140 + 1;
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__s1);
  if (__s1) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__s1);
  }
  if (v146)
  {
    uint64_t v105 = (void **)v144;
    if ((void)v144)
    {
      uint64_t v106 = (void **)*((void *)&v144 + 1);
      BOOL v107 = (void *)v144;
      if (*((void *)&v144 + 1) != (void)v144)
      {
        do
          uint64_t v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
        while (v106 != v105);
        BOOL v107 = (void *)v144;
      }
      *((void *)&v144 + 1) = v105;
      operator delete(v107);
    }
    uint64_t v108 = (void *)v142;
    if ((void)v142)
    {
      uint64_t v109 = (void *)*((void *)&v142 + 1);
      unint64_t v110 = (void *)v142;
      if (*((void *)&v142 + 1) != (void)v142)
      {
        do
        {
          long long v112 = (void *)*--v109;
          uint64_t v111 = v112;
          *uint64_t v109 = 0;
          if (v112) {
            operator delete[](v111);
          }
        }
        while (v109 != v108);
        unint64_t v110 = (void *)v142;
      }
      *((void *)&v142 + 1) = v108;
      operator delete(v110);
    }
    if (__dst != v141) {
      free(__dst);
    }
  }
  return v18;
}

uint64_t mlir::UnrealizedConversionCastOp::fold(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0)
  {
    unint64_t v5 = *(unsigned int *)(v4 + 68);
    uint64_t v6 = *(void *)(v4 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  uint64_t v55 = v6;
  unint64_t v56 = v5;
  uint64_t v7 = *(unsigned int *)(v4 + 36);
  uint64_t v8 = v4 - 16;
  if (!v7) {
    uint64_t v8 = 0;
  }
  v54[0] = v8;
  v54[1] = v7;
  mlir::OperandRange::getTypes(&v55, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52))
  {
    uint64_t v10 = v55;
    unint64_t v9 = v56;
    unint64_t v11 = *(unsigned int *)(a3 + 8);
    if (v56 + v11 > *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v56 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a3 + 8);
    }
    if (!v9) {
      goto LABEL_40;
    }
    uint64_t v12 = *(void *)a3;
    uint64_t v13 = (uint64_t *)(*(void *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((uint64_t v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
       || v10 + 24 >= v12 + 8 * (v9 + v11)))
    {
      uint64_t v29 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v29 = 4;
      }
      unint64_t v15 = v9 - v29;
      v13 += v15;
      int v30 = (const double *)(v10 + 88);
      int v31 = (int8x16_t *)(v12 + 8 * v14 + 16);
      unint64_t v32 = v15;
      do
      {
        uint64_t v33 = v30 - 8;
        unsigned long long v34 = (unsigned __int128)vld4q_f64(v33);
        unsigned long long v35 = (unsigned __int128)vld4q_f64(v30);
        int8x16_t v36 = (int8x16_t)vdupq_n_s64(4uLL);
        v31[-1] = vorrq_s8((int8x16_t)v34, v36);
        *int v31 = vorrq_s8((int8x16_t)v35, v36);
        v30 += 16;
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v37 = v9 - v15;
    char v38 = (uint64_t *)(v10 + 32 * v15 + 24);
    do
    {
      uint64_t v39 = *v38;
      v38 += 4;
      *v13++ = v39 | 4;
      --v37;
    }
    while (v37);
    goto LABEL_39;
  }
  if (!v56) {
    return 0;
  }
  uint64_t v51 = *(void *)(v55 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v51);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v17 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id) {
    return 0;
  }
  uint64_t v18 = *(unsigned int *)(DefiningOp + 36);
  if (v56 != v18) {
    return 0;
  }
  uint64_t v19 = v18 ? (mlir::detail::OpResultImpl *)(DefiningOp - 16) : 0;
  if (!_ZNSt3__112__equal_implB8nn180100IN4llvm6detail27indexed_accessor_range_baseIN4mlir11ResultRangeEPNS4_6detail12OpResultImplENS4_8OpResultES9_S9_E8iteratorESB_NS3_INS4_12OperandRangeEPNS4_9OpOperandENS4_5ValueESF_SF_E8iteratorESH_NS_10__equal_toENS_10__identityESJ_EEbT_T0_T1_T2_RT3_RT4_RT5_(v19, 0, v19, v18, v55, 0, v55, v18))return 0; {
  if ((*(unsigned char *)(v17 + 46) & 0x80) != 0)
  }
  {
    uint64_t v20 = *(void *)(v17 + 72);
    uint64_t v21 = *(unsigned int *)(v17 + 68);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  v57[0] = v20;
  v57[1] = v21;
  mlir::OperandRange::getTypes(v57, v53);
  mlir::OperandRange::getTypes(v54, v52);
  if (!mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v53, v52)) {
    return 0;
  }
  if ((*(unsigned char *)(v17 + 46) & 0x80) != 0)
  {
    uint64_t v22 = *(void *)(v17 + 72);
    unint64_t v9 = *(unsigned int *)(v17 + 68);
    unint64_t v11 = *(unsigned int *)(a3 + 8);
    unint64_t v23 = v9 + v11;
    if (v9 + v11 <= *(unsigned int *)(a3 + 12)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v22 = 0;
  unint64_t v9 = 0;
  unint64_t v11 = *(unsigned int *)(a3 + 8);
  unint64_t v23 = v11;
  if (v11 > *(unsigned int *)(a3 + 12))
  {
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_27:
  if (v9)
  {
    uint64_t v24 = *(void *)a3;
    uint64_t v25 = (uint64_t *)(*(void *)a3 + 8 * v11);
    if (v9 >= 0xB
      && ((uint64_t v26 = v11, (unint64_t)v25 >= v22 + 32 * v9)
       || v22 + 24 >= v24 + 8 * (v9 + v11)))
    {
      uint64_t v40 = v9 & 3;
      if ((v9 & 3) == 0) {
        uint64_t v40 = 4;
      }
      unint64_t v27 = v9 - v40;
      v25 += v27;
      unint64_t v41 = (const double *)(v22 + 88);
      uint64_t v42 = (int8x16_t *)(v24 + 8 * v26 + 16);
      unint64_t v43 = v27;
      do
      {
        unint64_t v44 = v41 - 8;
        unsigned long long v45 = (unsigned __int128)vld4q_f64(v44);
        unsigned long long v46 = (unsigned __int128)vld4q_f64(v41);
        int8x16_t v47 = (int8x16_t)vdupq_n_s64(4uLL);
        v42[-1] = vorrq_s8((int8x16_t)v45, v47);
        *uint64_t v42 = vorrq_s8((int8x16_t)v46, v47);
        v41 += 16;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
    }
    else
    {
      unint64_t v27 = 0;
    }
    unint64_t v48 = v9 - v27;
    uint64_t v49 = (uint64_t *)(v22 + 32 * v27 + 24);
    do
    {
      uint64_t v50 = *v49;
      v49 += 4;
      *v25++ = v50 | 4;
      --v48;
    }
    while (v48);
LABEL_39:
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_40:
  *(_DWORD *)(a3 + 8) = v11 + v9;
  return 1;
}

uint64_t mlir::UnrealizedConversionCastOp::verify(uint64_t **this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)*this + 9)) {
    return 1;
  }
  __int16 v18 = 257;
  mlir::OpState::emitOpError(this, &v17, (uint64_t)v22);
  if (v22[0])
  {
    int v19 = 3;
    uint64_t v20 = "expected at least one result for cast operation";
    uint64_t v21 = 47;
    long long v3 = &v19;
    uint64_t v4 = (char *)v23;
    if (v24 >= v25)
    {
      unint64_t v15 = v24 + 1;
      if (v23 <= &v19 && (char *)v23 + 24 * v24 > (char *)&v19)
      {
        int64_t v16 = (char *)&v19 - (unsigned char *)v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        uint64_t v4 = (char *)v23;
        long long v3 = (int *)((char *)v23 + v16);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v26, v15, 24);
        long long v3 = &v19;
        uint64_t v4 = (char *)v23;
      }
    }
    unint64_t v5 = &v4[24 * v24];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    ++v24;
  }
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  }
  if (v31)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v30;
      unint64_t v9 = __p;
      if (v30 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        unint64_t v9 = __p;
      }
      int v30 = v7;
      operator delete(v9);
    }
    uint64_t v10 = v27;
    if (v27)
    {
      unint64_t v11 = v28;
      uint64_t v12 = v27;
      if (v28 != v27)
      {
        do
        {
          uint64_t v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *unint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v27;
      }
      long long v28 = v10;
      operator delete(v12);
    }
    if (v23 != v26) {
      free(v23);
    }
  }
  return v1;
}

uint64_t mlir::ModuleOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v63 = v6;
  if (!v6)
  {
    a3(v67, a4);
    if (v67[0])
    {
      int v64 = 3;
      uint64_t v65 = "expected DictionaryAttr to set properties";
      uint64_t v66 = 41;
      uint64_t v26 = &v64;
      unint64_t v27 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v53 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v58 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          unint64_t v27 = (char *)v68;
          uint64_t v26 = (int *)((char *)v68 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          uint64_t v26 = &v64;
          unint64_t v27 = (char *)v68;
        }
      }
      long long v28 = &v27[24 * v69];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
    if (!v76) {
      return 0;
    }
    int v30 = (void **)__p;
    if (__p)
    {
      char v31 = v75;
      uint64_t v32 = __p;
      if (v75 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v75 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v72;
    if (!v72) {
      goto LABEL_64;
    }
    uint64_t v33 = v73;
    unint64_t v23 = v72;
    if (v73 == v72) {
      goto LABEL_63;
    }
    do
    {
      unsigned long long v35 = (void *)*--v33;
      unsigned long long v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_62;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_name", 8uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v67, a4);
      if (v67[0])
      {
        int v64 = 3;
        uint64_t v66 = 53;
        uint64_t v10 = &v64;
        unint64_t v11 = (char *)v68;
        if (v69 >= v70)
        {
          unint64_t v54 = v69 + 1;
          if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
          {
            int64_t v59 = (char *)&v64 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            unint64_t v11 = (char *)v68;
            uint64_t v10 = (int *)((char *)v68 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            uint64_t v10 = &v64;
            unint64_t v11 = (char *)v68;
          }
        }
        uint64_t v12 = &v11[24 * v69];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v69;
        if (v67[0])
        {
          uint64_t v14 = &v64;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v9);
          unint64_t v15 = (char *)v68;
          if (v69 >= v70)
          {
            unint64_t v55 = v69 + 1;
            if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
            {
              int64_t v60 = (char *)&v64 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              unint64_t v15 = (char *)v68;
              uint64_t v14 = (int *)((char *)v68 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              uint64_t v14 = &v64;
              unint64_t v15 = (char *)v68;
            }
          }
          int64_t v16 = &v15[24 * v69];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)int64_t v16 = v17;
          ++v69;
          if (v67[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
          }
        }
      }
      if (!v76) {
        return 0;
      }
      __int16 v18 = (void **)__p;
      if (__p)
      {
        int v19 = v75;
        uint64_t v20 = __p;
        if (v75 != __p)
        {
          do
            int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        unint64_t v75 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v72;
      if (!v72) {
        goto LABEL_64;
      }
      uint64_t v22 = v73;
      unint64_t v23 = v72;
      if (v73 == v72) {
        goto LABEL_63;
      }
      do
      {
        unsigned int v25 = (void *)*--v22;
        unsigned int v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v63, "sym_visibility", 0xEuLL);
  if (!v36) {
    return 1;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v36;
    return 1;
  }
  a3(v67, a4);
  if (v67[0])
  {
    int v64 = 3;
    uint64_t v66 = 59;
    char v38 = &v64;
    uint64_t v39 = (char *)v68;
    if (v69 >= v70)
    {
      unint64_t v56 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        int64_t v61 = (char *)&v64 - (unsigned char *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        uint64_t v39 = (char *)v68;
        char v38 = (int *)((char *)v68 + v61);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        char v38 = &v64;
        uint64_t v39 = (char *)v68;
      }
    }
    uint64_t v40 = &v39[24 * v69];
    long long v41 = *(_OWORD *)v38;
    *((void *)v40 + 2) = *((void *)v38 + 2);
    *(_OWORD *)uint64_t v40 = v41;
    ++v69;
    if (v67[0])
    {
      uint64_t v42 = &v64;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v37);
      unint64_t v43 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v57 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v62 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          unint64_t v43 = (char *)v68;
          uint64_t v42 = (int *)((char *)v68 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          uint64_t v42 = &v64;
          unint64_t v43 = (char *)v68;
        }
      }
      unint64_t v44 = &v43[24 * v69];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = *((void *)v42 + 2);
      *(_OWORD *)unint64_t v44 = v45;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
  }
  if (v76)
  {
    unsigned long long v46 = (void **)__p;
    if (__p)
    {
      int8x16_t v47 = v75;
      unint64_t v48 = __p;
      if (v75 != __p)
      {
        do
          int8x16_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unint64_t v48 = __p;
      }
      unint64_t v75 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v72;
    if (!v72) {
      goto LABEL_64;
    }
    uint64_t v49 = v73;
    unint64_t v23 = v72;
    if (v73 == v72)
    {
LABEL_63:
      unint64_t v73 = v21;
      operator delete(v23);
LABEL_64:
      if (v68 != v71) {
        free(v68);
      }
      return 0;
    }
    do
    {
      uint64_t v51 = (void *)*--v49;
      uint64_t v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v21);
LABEL_62:
    unint64_t v23 = v72;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::ModuleOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  __int16 v18 = a1;
  int v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *uint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      uint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_visibility", 14, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *long long v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  uint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  uint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

unint64_t mlir::ModuleOp::computePropertiesHash(unint64_t *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    uint64_t v21 = a1;
    unint64_t v24 = v1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v12 = v11;
    a1 = v21;
    unint64_t v1 = v24;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v21;
      unint64_t v1 = v24;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  unint64_t v4 = a1[1];
  {
    unint64_t v22 = v4;
    unint64_t v25 = v1;
    uint64_t v19 = v3;
    uint64_t v3 = v19;
    unint64_t v4 = v22;
    unint64_t v1 = v25;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      uint64_t v3 = v19;
      unint64_t v4 = v22;
      unint64_t v1 = v25;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v5 = *(void *)(v2 + 3024);
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  long long v27 = 0u;
  {
    unint64_t v23 = v4;
    unint64_t v26 = v1;
    uint64_t v18 = v5;
    uint64_t v20 = v3;
    uint64_t v5 = v18;
    uint64_t v3 = v20;
    unint64_t v4 = v23;
    unint64_t v1 = v26;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      uint64_t v5 = v18;
      uint64_t v3 = v20;
      unint64_t v4 = v23;
      unint64_t v1 = v26;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v4);
  uint64_t v7 = (v5 + 8 * v4) ^ HIDWORD(v4);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v6 ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((v3 + 8 * v1) ^ HIDWORD(v1));
  uint64_t v31 = *(void *)(v2 + 3024);
  *(void *)&long long v27 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (HIDWORD(v1) ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69
                                                                                * (HIDWORD(v1) ^ (v9 >> 47) ^ v9)) >> 47));
  *((void *)&v27 + 1) = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v27, 0, (char *)v28, (char *)v29);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    *uint64_t v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = &unk_1E8EBA000;
    {
      unint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::ModuleOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 102;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::detail::ModuleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[121];
    return a1[32];
  }
  return result;
}

BOOL mlir::ModuleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  long long v41 = v2;
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0; {
  long long v41 = *this;
  }
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v41))return 0; {
  unint64_t v6 = *this;
  }
  unint64_t v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
       + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)*this + 10);
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8 != v7 && *(void *)(v8 + 8) == v7) {
    return 1;
  }
  uint64_t v36 = (const void **)"region #";
  __int16 v37 = 259;
  mlir::Operation::emitOpError(v6, &v36, (uint64_t)&v41);
  if (v41)
  {
    LODWORD(v34[0]) = 5;
    v34[1] = 0;
    unint64_t v9 = v34;
    uint64_t v10 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v28 = v44 + 1;
      if (v43 <= v34 && (char *)v43 + 24 * v44 > (char *)v34)
      {
        int64_t v30 = (char *)v34 - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        uint64_t v10 = (char *)v43;
        unint64_t v9 = (const void ***)((char *)v43 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v28, 24);
        unint64_t v9 = v34;
        uint64_t v10 = (char *)v43;
      }
    }
    unint64_t v11 = &v10[24 * v44];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)unint64_t v11 = v12;
    ++v44;
    BOOL v13 = v41 == 0;
  }
  else
  {
    BOOL v13 = 1;
  }
  __int16 v33 = 1283;
  v32[0] = " ('";
  v32[2] = "bodyRegion";
  void v32[3] = 10;
  v34[0] = (const void **)v32;
  _OWORD v34[2] = (const void **)"') ";
  __int16 v35 = 770;
  if (!v13)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v42, v34);
    if (v41)
    {
      int v38 = 3;
      uint64_t v39 = "failed to verify constraint: region with 1 blocks";
      uint64_t v40 = 49;
      unint64_t v14 = &v38;
      unint64_t v15 = (char *)v43;
      if (v44 >= v45)
      {
        unint64_t v29 = v44 + 1;
        if (v43 <= &v38 && (char *)v43 + 24 * v44 > (char *)&v38)
        {
          int64_t v31 = (char *)&v38 - (unsigned char *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          unint64_t v15 = (char *)v43;
          unint64_t v14 = (int *)((char *)v43 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          unint64_t v14 = &v38;
          unint64_t v15 = (char *)v43;
        }
      }
      int v16 = &v15[24 * v44];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v44;
    }
  }
  char v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  if (v51)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v50;
      uint64_t v21 = __p;
      if (v50 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v50 = v19;
      operator delete(v21);
    }
    unint64_t v22 = v47;
    if (v47)
    {
      unint64_t v23 = v48;
      unint64_t v24 = v47;
      if (v48 != v47)
      {
        do
        {
          unint64_t v26 = (void *)*--v23;
          unint64_t v25 = v26;
          *unint64_t v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        unint64_t v24 = v47;
      }
      unint64_t v48 = v22;
      operator delete(v24);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v18 != 0;
}

BOOL mlir::ModuleOp::verifyInvariants(uint64_t **this)
{
  return mlir::ModuleOp::verifyInvariantsImpl(this) && mlir::ModuleOp::verify(this);
}

uint64_t mlir::ModuleOp::parse(uint64_t a1, void *a2)
{
  uint64_t v17 = 0;
  uint64_t v4 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v4 = v4;
  *((void *)v4 + 1) = v4;
  *((void *)v4 + 2) = 0;
  int v16 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 496))(a1, &v17);
  if (v17)
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
    void *v5 = v17;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 464))(a1, a2 + 14)
    || (uint64_t v6 = a2[1],
        v14[0] = a1,
        v14[1] = &v15,
        void v14[2] = a2,
        (uint64_t v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v6 + 96))) != 0)
    && !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| (uint64_t v8 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), *(void *)(*(void *)(v6 + 96) + 8))) != 0&& !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    uint64_t v11 = 0;
    int v16 = 0;
LABEL_14:
    mlir::Region::~Region(v4);
    operator delete(v12);
    return v11;
  }
  if (*(mlir::Region **)v4 == v4)
  {
    unint64_t v9 = operator new(0x48uLL);
    _OWORD *v9 = 0u;
    v9[1] = 0u;
    *((void *)v9 + 4) = v9 + 2;
    *((void *)v9 + 5) = v9 + 2;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 8) = 0;
    *((void *)v9 + 6) = 0;
    llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, (uint64_t)v9);
    uint64_t v10 = *(void *)v4;
    *((void *)v9 + 2) = v4;
    *((void *)v9 + 1) = v10;
    unint64_t v9 = (_OWORD *)((char *)v9 + 8);
    *(void *)(v10 + 8) = v9;
    *(void *)uint64_t v4 = v9;
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v16);
  uint64_t v4 = v16;
  int v16 = 0;
  uint64_t v11 = 1;
  if (v4) {
    goto LABEL_14;
  }
  return v11;
}

void mlir::ModuleOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  _OWORD v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *this;
  unint64_t v5 = v4[11];
  if (*(void *)&v4[4 * ((v5 >> 23) & 1) + 16])
  {
    uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v7 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((void *)v6 + 4) = v7 + 1;
      *uint64_t v7 = 32;
    }
    uint64_t v19 = *(void **)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16];
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v19);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, AttrData, v9);
    uint64_t v4 = *this;
    LODWORD(v5) = (*this)[11];
  }
  uint64_t v19 = v21;
  v21[0] = "sym_name";
  v21[1] = 8;
  uint64_t v20 = 0x200000001;
  if (BYTE3(v5))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 14);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v12, v19, v20);
  BOOL v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
    uint64_t v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *unint64_t v14 = 32;
    uint64_t v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
LABEL_11:
      unint64_t v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      goto LABEL_14;
    }
  }
  unint64_t v17 = 0;
LABEL_14:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v17, 1, 1, 0);
  if (v19 != v21) {
    free(v19);
  }
}

uint64_t mlir::detail::UnrealizedConversionCastOpGenericAdaptorBase::UnrealizedConversionCastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "builtin.unrealized_conversion_cast", 34, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::UnrealizedConversionCastOp::parse(uint64_t a1, uint64_t a2)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  char v18 = v20;
  uint64_t v19 = 0x400000000;
  v16[0] = &v17;
  v16[1] = (void *)0x100000000;
  __src = &v15;
  uint64_t v14 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL)|| v19&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v16))|| (v12[16] = 257, !(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _WORD *))(*(void *)a1 + 368))(a1, "to", 2, v12))|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)|| ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1), !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)))
  {
    BOOL v9 = 0;
    uint64_t v10 = __src;
    if (__src == &v15) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  unint64_t v5 = __src;
  uint64_t v6 = v14;
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  unint64_t v8 = v7 + v14;
  if (v8 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  if (v6)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v7), v5, 8 * v6);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v7 + v6;
  BOOL v9 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v18, (uint64_t)v16, v4, a2 + 16) != 0;
  uint64_t v10 = __src;
  if (__src != &v15) {
LABEL_15:
  }
    free(v10);
LABEL_16:
  if (v16[0] != &v17) {
    free(v16[0]);
  }
  if (v18 != v20) {
    free(v18);
  }
  return v9;
}

void mlir::UnrealizedConversionCastOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      unsigned char *v5 = 32;
    }
    uint64_t v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *((unsigned int *)v6 + 17);
      uint64_t v8 = *((void *)v6 + 9);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    BOOL v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    __int16 v35 = ", ";
    uint64_t v36 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v35);
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *uint64_t v11 = 32;
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ":", 1uLL);
    }
    else
    {
      *BOOL v13 = 58;
      ++*((void *)v12 + 4);
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if ((unint64_t)v15 >= *((void *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((void *)v14 + 4) = v15 + 1;
      *uint64_t v15 = 32;
    }
    unint64_t v16 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v17 = *((unsigned int *)v16 + 17);
      uint64_t v18 = *((void *)v16 + 9);
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v31 = v18;
    uint64_t v32 = v17;
    mlir::OperandRange::getTypes(&v31, (uint64_t *)&v35);
    unint64_t AttrDictionary = ", ";
    uint64_t v34 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v35, v36, v37, v38, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  }
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *uint64_t v20 = 32;
  }
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *unint64_t v22 = 28532;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, "to", 2uLL);
  }
  unint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *unint64_t v24 = 32;
  }
  uint64_t v25 = *((unsigned int *)*this + 9);
  uint64_t v26 = (uint64_t)*this - 16;
  if (!v25) {
    uint64_t v26 = 0;
  }
  uint64_t v31 = v26;
  uint64_t v32 = v25;
  mlir::OperandRange::getTypes(&v31, (uint64_t *)&v35);
  unint64_t AttrDictionary = ", ";
  uint64_t v34 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v35, v36, v37, v38, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  __int16 v35 = &v37;
  uint64_t v36 = 0x200000000;
  long long v27 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v27);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v27 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v30, v35, v36);
  if (v35 != &v37) {
    free(v35);
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DataLayoutSpecInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DataLayoutSpecInterface]";
      unint64_t v22 = 79;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::DataLayoutSpecInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2344);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::__mlir_ods_local_attr_constraint_BuiltinOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::UnrealizedConversionCastOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"builtin.unrealized_conversion_cast", 34, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9ACD20;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *mlir::RegisteredOperationName::Model<mlir::ModuleOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"builtin.module", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C6360;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  unint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  unint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::ModuleOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                           + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 14)
  {
    if (*a3 == 0x697369765F6D7973 && *(void *)((char *)a3 + 6) == 0x7974696C69626973) {
      return v7[1];
    }
    return 0;
  }
  if (a4 != 8 || *a3 != 0x656D616E5F6D7973) {
    return 0;
  }
  return *v7;
}

void *mlir::RegisteredOperationName::Model<mlir::ModuleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 14)
  {
    if (*result == 0x697369765F6D7973 && *(void *)((char *)result + 6) == 0x7974696C69626973)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v9 = a4;
        }
        else {
          uint64_t v9 = 0;
        }
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 8 && *result == 0x656D616E5F6D7973)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = 0;
      }
      void *v5 = v10;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_name", (const char *)8, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"sym_visibility", (const char *)0xE, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::ModuleOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::ModuleOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::ModuleOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::ModuleOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::ModuleOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::ModuleOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x80uLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setName;
  void v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isDeclaration;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      unint64_t v14 = 73;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3784), v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getSymbolUses(mlir::SymbolTable *a1@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::symbolKnownUseEmpty(uint64_t a1, mlir::SymbolTable *a2, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(a2, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isOptionalSymbol()
{
  return 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmBlockArgumentNames;
  void v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getDefaultDialect;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3760), v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getDefaultDialect()
{
  return "builtin";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getRegionKind;
  v2[1] = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::hasSSADominance;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3840), v2);
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::getRegionKind()
{
  return 1;
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::ModuleOp>::hasSSADominance()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v312 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v49 = v48;
    a1 = v312;
    if (v49)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v329 = 81;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v329;
      }
      uint64_t v52 = &v328[v51];
      unint64_t v53 = v329 - v51;
      if (v329 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v329 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v312;
    }
  }
  uint64_t v2 = v1[26];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v297 = v2;
    uint64_t v313 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v58 = v57;
    uint64_t v2 = v297;
    a1 = v313;
    if (v58)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v329 = 83;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v329;
      }
      int64_t v61 = &v328[v60];
      unint64_t v62 = v329 - v60;
      if (v329 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v329 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v297;
      a1 = v313;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v298 = v2;
    uint64_t v314 = a1;
    uint64_t v283 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v283;
    uint64_t v2 = v298;
    int v67 = v66;
    a1 = v314;
    if (v67)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v329 = 86;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v329;
      }
      unsigned int v70 = &v328[v69];
      unint64_t v71 = v329 - v69;
      if (v329 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v329 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v283;
      uint64_t v2 = v298;
      a1 = v314;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v299 = v2;
    uint64_t v315 = a1;
    uint64_t v270 = v6;
    uint64_t v284 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v270;
    uint64_t v4 = v284;
    int v76 = v75;
    uint64_t v2 = v299;
    a1 = v315;
    if (v76)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v329 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v329;
      }
      unint64_t v79 = &v328[v78];
      unint64_t v80 = v329 - v78;
      if (v329 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v329 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v270;
      uint64_t v4 = v284;
      uint64_t v2 = v299;
      a1 = v315;
    }
  }
  uint64_t v8 = v7[10];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v300 = v2;
    uint64_t v316 = a1;
    uint64_t v271 = v6;
    uint64_t v285 = v4;
    uint64_t v258 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v258;
    uint64_t v6 = v271;
    uint64_t v4 = v285;
    uint64_t v2 = v300;
    int v85 = v84;
    a1 = v316;
    if (v85)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v329 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v329;
      }
      unint64_t v88 = &v328[v87];
      unint64_t v89 = v329 - v87;
      if (v329 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v329 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v258;
      uint64_t v6 = v271;
      uint64_t v4 = v285;
      uint64_t v2 = v300;
      a1 = v316;
    }
  }
  uint64_t v10 = v9[15];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v301 = v2;
    uint64_t v317 = a1;
    uint64_t v272 = v6;
    uint64_t v286 = v4;
    uint64_t v259 = v8;
    uint64_t v247 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v247;
    uint64_t v8 = v259;
    uint64_t v6 = v272;
    uint64_t v4 = v286;
    uint64_t v2 = v301;
    int v94 = v93;
    a1 = v317;
    if (v94)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      unint64_t v329 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v329;
      }
      unint64_t v97 = &v328[v96];
      unint64_t v98 = v329 - v96;
      if (v329 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v329 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v247;
      uint64_t v8 = v259;
      uint64_t v6 = v272;
      uint64_t v4 = v286;
      uint64_t v2 = v301;
      a1 = v317;
    }
  }
  uint64_t v12 = v11[8];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v302 = v2;
    uint64_t v318 = a1;
    uint64_t v273 = v6;
    uint64_t v287 = v4;
    uint64_t v260 = v8;
    uint64_t v237 = v12;
    uint64_t v248 = v10;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v237;
    uint64_t v10 = v248;
    uint64_t v8 = v260;
    uint64_t v6 = v273;
    uint64_t v4 = v287;
    uint64_t v2 = v302;
    int v103 = v102;
    a1 = v318;
    if (v103)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v329 = 83;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v329;
      }
      uint64_t v106 = &v328[v105];
      unint64_t v107 = v329 - v105;
      if (v329 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v329 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v237;
      uint64_t v10 = v248;
      uint64_t v8 = v260;
      uint64_t v6 = v273;
      uint64_t v4 = v287;
      uint64_t v2 = v302;
      a1 = v318;
    }
  }
  uint64_t v14 = v13[1];
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v303 = v2;
    uint64_t v319 = a1;
    uint64_t v274 = v6;
    uint64_t v288 = v4;
    uint64_t v261 = v8;
    uint64_t v238 = v12;
    uint64_t v249 = v10;
    uint64_t v228 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v228;
    uint64_t v12 = v238;
    uint64_t v10 = v249;
    uint64_t v8 = v261;
    uint64_t v6 = v274;
    uint64_t v4 = v288;
    uint64_t v2 = v303;
    int v112 = v111;
    a1 = v319;
    if (v112)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v329 = 84;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v329;
      }
      int64_t v115 = &v328[v114];
      unint64_t v116 = v329 - v114;
      if (v329 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v329 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v228;
      uint64_t v12 = v238;
      uint64_t v10 = v249;
      uint64_t v8 = v261;
      uint64_t v6 = v274;
      uint64_t v4 = v288;
      uint64_t v2 = v303;
      a1 = v319;
    }
  }
  uint64_t v16 = v15[9];
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v304 = v2;
    uint64_t v320 = a1;
    uint64_t v275 = v6;
    uint64_t v289 = v4;
    uint64_t v262 = v8;
    uint64_t v239 = v12;
    uint64_t v250 = v10;
    uint64_t v220 = v16;
    uint64_t v229 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v220;
    uint64_t v14 = v229;
    uint64_t v12 = v239;
    uint64_t v10 = v250;
    uint64_t v8 = v262;
    uint64_t v6 = v275;
    uint64_t v4 = v289;
    uint64_t v2 = v304;
    int v121 = v120;
    a1 = v320;
    if (v121)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v329 = 89;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v329;
      }
      uint64_t v124 = &v328[v123];
      unint64_t v125 = v329 - v123;
      if (v329 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v329 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v220;
      uint64_t v14 = v229;
      uint64_t v12 = v239;
      uint64_t v10 = v250;
      uint64_t v8 = v262;
      uint64_t v6 = v275;
      uint64_t v4 = v289;
      uint64_t v2 = v304;
      a1 = v320;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2744);
  uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v305 = v2;
    uint64_t v321 = a1;
    uint64_t v276 = v6;
    uint64_t v290 = v4;
    uint64_t v263 = v8;
    uint64_t v240 = v12;
    uint64_t v251 = v10;
    uint64_t v221 = v16;
    uint64_t v230 = v14;
    uint64_t v213 = v18;
    uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v18 = v213;
    uint64_t v16 = v221;
    uint64_t v14 = v230;
    uint64_t v12 = v240;
    uint64_t v10 = v251;
    uint64_t v8 = v263;
    uint64_t v6 = v276;
    uint64_t v4 = v290;
    uint64_t v2 = v305;
    int v130 = v129;
    a1 = v321;
    if (v130)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      unint64_t v329 = 83;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v329;
      }
      uint64_t v133 = &v328[v132];
      unint64_t v134 = v329 - v132;
      if (v329 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v329 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      uint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v18 = v213;
      uint64_t v16 = v221;
      uint64_t v14 = v230;
      uint64_t v12 = v240;
      uint64_t v10 = v251;
      uint64_t v8 = v263;
      uint64_t v6 = v276;
      uint64_t v4 = v290;
      uint64_t v2 = v305;
      a1 = v321;
    }
  }
  uint64_t v20 = *v19;
  uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v306 = v2;
    uint64_t v322 = a1;
    uint64_t v277 = v6;
    uint64_t v291 = v4;
    uint64_t v264 = v8;
    uint64_t v241 = v12;
    uint64_t v252 = v10;
    uint64_t v222 = v16;
    uint64_t v231 = v14;
    uint64_t v207 = v20;
    uint64_t v214 = v18;
    uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v20 = v207;
    uint64_t v18 = v214;
    uint64_t v16 = v222;
    uint64_t v14 = v231;
    uint64_t v12 = v241;
    uint64_t v10 = v252;
    uint64_t v8 = v264;
    uint64_t v6 = v277;
    uint64_t v4 = v291;
    uint64_t v2 = v306;
    int v139 = v138;
    a1 = v322;
    if (v139)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      unint64_t v329 = 91;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v329;
      }
      long long v142 = &v328[v141];
      unint64_t v143 = v329 - v141;
      if (v329 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v329 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      uint64_t v21 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v20 = v207;
      uint64_t v18 = v214;
      uint64_t v16 = v222;
      uint64_t v14 = v231;
      uint64_t v12 = v241;
      uint64_t v10 = v252;
      uint64_t v8 = v264;
      uint64_t v6 = v277;
      uint64_t v4 = v291;
      uint64_t v2 = v306;
      a1 = v322;
    }
  }
  uint64_t v22 = v21[17];
  unint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v307 = v2;
    uint64_t v323 = a1;
    uint64_t v278 = v6;
    uint64_t v292 = v4;
    uint64_t v265 = v8;
    uint64_t v242 = v12;
    uint64_t v253 = v10;
    uint64_t v223 = v16;
    uint64_t v232 = v14;
    uint64_t v208 = v20;
    uint64_t v215 = v18;
    uint64_t v202 = v22;
    unint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v22 = v202;
    uint64_t v20 = v208;
    uint64_t v18 = v215;
    uint64_t v16 = v223;
    uint64_t v14 = v232;
    uint64_t v12 = v242;
    uint64_t v10 = v253;
    uint64_t v8 = v265;
    uint64_t v6 = v278;
    uint64_t v4 = v292;
    uint64_t v2 = v307;
    int v148 = v147;
    a1 = v323;
    if (v148)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
      unint64_t v329 = 83;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v329;
      }
      int64_t v151 = &v328[v150];
      unint64_t v152 = v329 - v150;
      if (v329 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v329 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      unint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v22 = v202;
      uint64_t v20 = v208;
      uint64_t v18 = v215;
      uint64_t v16 = v223;
      uint64_t v14 = v232;
      uint64_t v12 = v242;
      uint64_t v10 = v253;
      uint64_t v8 = v265;
      uint64_t v6 = v278;
      uint64_t v4 = v292;
      uint64_t v2 = v307;
      a1 = v323;
    }
  }
  uint64_t v24 = v23[2];
  unint64_t v25 = 0x1E8EB8000uLL;
  {
    uint64_t v308 = v2;
    uint64_t v324 = a1;
    uint64_t v279 = v6;
    uint64_t v293 = v4;
    uint64_t v266 = v8;
    uint64_t v243 = v12;
    uint64_t v254 = v10;
    uint64_t v224 = v16;
    uint64_t v233 = v14;
    uint64_t v209 = v20;
    uint64_t v216 = v18;
    uint64_t v198 = v24;
    uint64_t v203 = v22;
    unint64_t v25 = 0x1E8EB8000;
    uint64_t v24 = v198;
    uint64_t v22 = v203;
    uint64_t v20 = v209;
    uint64_t v18 = v216;
    uint64_t v16 = v224;
    uint64_t v14 = v233;
    uint64_t v12 = v243;
    uint64_t v10 = v254;
    uint64_t v8 = v266;
    uint64_t v6 = v279;
    uint64_t v4 = v293;
    uint64_t v2 = v308;
    int v157 = v156;
    a1 = v324;
    if (v157)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      unint64_t v329 = 87;
      unint64_t v158 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v158) {
        unint64_t v159 = v158;
      }
      else {
        unint64_t v159 = v329;
      }
      __n128 v160 = &v328[v159];
      unint64_t v161 = v329 - v159;
      if (v329 - v159 >= 0x12) {
        uint64_t v162 = 18;
      }
      else {
        uint64_t v162 = v329 - v159;
      }
      unint64_t v163 = v161 - v162;
      if (v163 >= v163 - 1) {
        uint64_t v164 = v163 - 1;
      }
      else {
        uint64_t v164 = v163;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v160[v162], v164);
      unint64_t v25 = 0x1E8EB8000;
      uint64_t v24 = v198;
      uint64_t v22 = v203;
      uint64_t v20 = v209;
      uint64_t v18 = v216;
      uint64_t v16 = v224;
      uint64_t v14 = v233;
      uint64_t v12 = v243;
      uint64_t v10 = v254;
      uint64_t v8 = v266;
      uint64_t v6 = v279;
      uint64_t v4 = v293;
      uint64_t v2 = v308;
      a1 = v324;
    }
  }
  uint64_t v26 = *(void *)(v25 + 3776);
  unint64_t v27 = 0x1E8EB8000uLL;
  {
    uint64_t v309 = v2;
    uint64_t v325 = a1;
    uint64_t v280 = v6;
    uint64_t v294 = v4;
    uint64_t v267 = v8;
    uint64_t v244 = v12;
    uint64_t v255 = v10;
    uint64_t v225 = v16;
    uint64_t v234 = v14;
    uint64_t v210 = v20;
    uint64_t v217 = v18;
    uint64_t v199 = v24;
    uint64_t v204 = v22;
    uint64_t v195 = v26;
    unint64_t v27 = 0x1E8EB8000;
    uint64_t v26 = v195;
    uint64_t v24 = v199;
    uint64_t v22 = v204;
    uint64_t v20 = v210;
    uint64_t v18 = v217;
    uint64_t v16 = v225;
    uint64_t v14 = v234;
    uint64_t v12 = v244;
    uint64_t v10 = v255;
    uint64_t v8 = v267;
    uint64_t v6 = v280;
    uint64_t v4 = v294;
    uint64_t v2 = v309;
    int v166 = v165;
    a1 = v325;
    if (v166)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v329 = 86;
      unint64_t v167 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v167) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v329;
      }
      long long v169 = &v328[v168];
      unint64_t v170 = v329 - v168;
      if (v329 - v168 >= 0x12) {
        uint64_t v171 = 18;
      }
      else {
        uint64_t v171 = v329 - v168;
      }
      unint64_t v172 = v170 - v171;
      if (v172 >= v172 - 1) {
        uint64_t v173 = v172 - 1;
      }
      else {
        uint64_t v173 = v172;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v169[v171], v173);
      unint64_t v27 = 0x1E8EB8000;
      uint64_t v26 = v195;
      uint64_t v24 = v199;
      uint64_t v22 = v204;
      uint64_t v20 = v210;
      uint64_t v18 = v217;
      uint64_t v16 = v225;
      uint64_t v14 = v234;
      uint64_t v12 = v244;
      uint64_t v10 = v255;
      uint64_t v8 = v267;
      uint64_t v6 = v280;
      uint64_t v4 = v294;
      uint64_t v2 = v309;
      a1 = v325;
    }
  }
  uint64_t v28 = *(void *)(v27 + 3752);
  unint64_t v29 = 0x1E8EB8000uLL;
  {
    uint64_t v310 = v2;
    uint64_t v326 = a1;
    uint64_t v281 = v6;
    uint64_t v295 = v4;
    uint64_t v268 = v8;
    uint64_t v245 = v12;
    uint64_t v256 = v10;
    uint64_t v226 = v16;
    uint64_t v235 = v14;
    uint64_t v211 = v20;
    uint64_t v218 = v18;
    uint64_t v200 = v24;
    uint64_t v205 = v22;
    uint64_t v193 = v28;
    uint64_t v196 = v26;
    unint64_t v29 = 0x1E8EB8000;
    uint64_t v28 = v193;
    uint64_t v26 = v196;
    uint64_t v24 = v200;
    uint64_t v22 = v205;
    uint64_t v20 = v211;
    uint64_t v18 = v218;
    uint64_t v16 = v226;
    uint64_t v14 = v235;
    uint64_t v12 = v245;
    uint64_t v10 = v256;
    uint64_t v8 = v268;
    uint64_t v6 = v281;
    uint64_t v4 = v295;
    uint64_t v2 = v310;
    int v175 = v174;
    a1 = v326;
    if (v175)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface::Trait<Empty>]";
      unint64_t v329 = 89;
      unint64_t v176 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v176) {
        unint64_t v177 = v176;
      }
      else {
        unint64_t v177 = v329;
      }
      __n128 v178 = &v328[v177];
      unint64_t v179 = v329 - v177;
      if (v329 - v177 >= 0x12) {
        uint64_t v180 = 18;
      }
      else {
        uint64_t v180 = v329 - v177;
      }
      unint64_t v181 = v179 - v180;
      if (v181 >= v181 - 1) {
        uint64_t v182 = v181 - 1;
      }
      else {
        uint64_t v182 = v181;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionKindInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v178[v180], v182);
      unint64_t v29 = 0x1E8EB8000;
      uint64_t v28 = v193;
      uint64_t v26 = v196;
      uint64_t v24 = v200;
      uint64_t v22 = v205;
      uint64_t v20 = v211;
      uint64_t v18 = v218;
      uint64_t v16 = v226;
      uint64_t v14 = v235;
      uint64_t v12 = v245;
      uint64_t v10 = v256;
      uint64_t v8 = v268;
      uint64_t v6 = v281;
      uint64_t v4 = v295;
      uint64_t v2 = v310;
      a1 = v326;
    }
  }
  uint64_t v30 = *(void *)(v29 + 3832);
  uint64_t v31 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v311 = v2;
    uint64_t v327 = a1;
    uint64_t v282 = v6;
    uint64_t v296 = v4;
    uint64_t v269 = v8;
    uint64_t v246 = v12;
    uint64_t v257 = v10;
    uint64_t v227 = v16;
    uint64_t v236 = v14;
    uint64_t v212 = v20;
    uint64_t v219 = v18;
    uint64_t v201 = v24;
    uint64_t v206 = v22;
    uint64_t v194 = v28;
    uint64_t v197 = v26;
    uint64_t v192 = v30;
    uint64_t v31 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v30 = v192;
    uint64_t v28 = v194;
    uint64_t v26 = v197;
    uint64_t v24 = v201;
    uint64_t v22 = v206;
    uint64_t v20 = v212;
    uint64_t v18 = v219;
    uint64_t v16 = v227;
    uint64_t v14 = v236;
    uint64_t v12 = v246;
    uint64_t v10 = v257;
    uint64_t v8 = v269;
    uint64_t v6 = v282;
    uint64_t v4 = v296;
    uint64_t v2 = v311;
    int v184 = v183;
    a1 = v327;
    if (v184)
    {
      v328 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasOnlyGraphRegion<Empty>]";
      unint64_t v329 = 90;
      unint64_t v185 = llvm::StringRef::find((uint64_t *)&v328, "DesiredTypeName = ", 0x12uLL, 0);
      if (v329 >= v185) {
        unint64_t v186 = v185;
      }
      else {
        unint64_t v186 = v329;
      }
      uint64_t v187 = &v328[v186];
      unint64_t v188 = v329 - v186;
      if (v329 - v186 >= 0x12) {
        uint64_t v189 = 18;
      }
      else {
        uint64_t v189 = v329 - v186;
      }
      unint64_t v190 = v188 - v189;
      if (v190 >= v190 - 1) {
        uint64_t v191 = v190 - 1;
      }
      else {
        uint64_t v191 = v190;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasOnlyGraphRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasOnlyGraphRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v187[v189], v191);
      uint64_t v31 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v30 = v192;
      uint64_t v28 = v194;
      uint64_t v26 = v197;
      uint64_t v24 = v201;
      uint64_t v22 = v206;
      uint64_t v20 = v212;
      uint64_t v18 = v219;
      uint64_t v16 = v227;
      uint64_t v14 = v236;
      uint64_t v12 = v246;
      uint64_t v10 = v257;
      uint64_t v8 = v269;
      uint64_t v6 = v282;
      uint64_t v4 = v296;
      uint64_t v2 = v311;
      a1 = v327;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v30 == a1
      || v31[16] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::ModuleOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::ModuleOp>,mlir::OpTrait::ZeroResults<mlir::ModuleOp>,mlir::OpTrait::ZeroSuccessors<mlir::ModuleOp>,mlir::OpTrait::ZeroOperands<mlir::ModuleOp>,mlir::OpTrait::NoRegionArguments<mlir::ModuleOp>,mlir::OpTrait::NoTerminator<mlir::ModuleOp>,mlir::OpTrait::SingleBlock<mlir::ModuleOp>,mlir::OpTrait::OpInvariants<mlir::ModuleOp>,mlir::BytecodeOpInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::AffineScope<mlir::ModuleOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::ModuleOp>,mlir::OpTrait::SymbolTable<mlir::ModuleOp>,mlir::SymbolOpInterface::Trait<mlir::ModuleOp>,mlir::OpAsmOpInterface::Trait<mlir::ModuleOp>,mlir::RegionKindInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::ModuleOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::ModuleOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::ModuleOp>,mlir::OpTrait::ZeroResults<mlir::ModuleOp>,mlir::OpTrait::ZeroSuccessors<mlir::ModuleOp>,mlir::OpTrait::ZeroOperands<mlir::ModuleOp>,mlir::OpTrait::NoRegionArguments<mlir::ModuleOp>,mlir::OpTrait::NoTerminator<mlir::ModuleOp>,mlir::OpTrait::SingleBlock<mlir::ModuleOp>,mlir::OpTrait::OpInvariants<mlir::ModuleOp>,mlir::BytecodeOpInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::AffineScope<mlir::ModuleOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::ModuleOp>,mlir::OpTrait::SymbolTable<mlir::ModuleOp>,mlir::SymbolOpInterface::Trait<mlir::ModuleOp>,mlir::OpAsmOpInterface::Trait<mlir::ModuleOp>,mlir::RegionKindInterface::Trait<mlir::ModuleOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::ModuleOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && mlir::OpTrait::impl::verifyNoRegionArguments(a1, v6)
    && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
    && (uint64_t v8 = a1, mlir::ModuleOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(a1);
  }
  else
  {
    return 0;
  }
}

BOOL mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(mlir::detail *a1)
{
  uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a1, (uint64_t)"sym_name", 8);
  if ((_BYTE)v3) {
    BOOL v4 = InherentAttr == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return v4 || mlir::detail::verifySymbol(a1, v3) != 0;
}

uint64_t mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(unsigned int *)(a1 + 44);
  uint64_t v2 = v1 & 0x7FFFFF;
  if ((v1 & 0x7FFFFF) == 0) {
    return 1;
  }
  unint64_t v3 = 0;
  for (uint64_t i = (void *)(((a1 + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a1 + 40)); ; i += 3)
  {
    if (i != (void *)*i)
    {
      uint64_t v5 = i[1];
      if (i == (void *)v5 || i != *(void **)(v5 + 8)) {
        break;
      }
    }
    if ((const char *)v2 == ++v3) {
      return 1;
    }
  }
  uint64_t v30 = (const void **)"expects region #";
  __int16 v31 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v30, (uint64_t)v35);
  if (v35[0])
  {
    int v32 = 5;
    __int16 v33 = v3;
    uint64_t v6 = &v32;
    uint64_t v7 = (char *)v36;
    if (v37 >= v38)
    {
      unint64_t v25 = v37 + 1;
      if (v36 <= &v32 && (char *)v36 + 24 * v37 > (char *)&v32)
      {
        int64_t v28 = (char *)&v32 - (unsigned char *)v36;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
        uint64_t v7 = (char *)v36;
        uint64_t v6 = (int *)((char *)v36 + v28);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
        uint64_t v6 = &v32;
        uint64_t v7 = (char *)v36;
      }
    }
    uint64_t v8 = &v7[24 * v37];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    uint64_t v10 = ++v37;
    if (v35[0])
    {
      int v32 = 3;
      __int16 v33 = " to have 0 or 1 blocks";
      uint64_t v34 = 22;
      uint64_t v11 = &v32;
      uint64_t v12 = (char *)v36;
      if (v10 >= v38)
      {
        unint64_t v26 = v10 + 1;
        BOOL v27 = (char *)v36 + 24 * v10 > (char *)&v32;
        if (v36 <= &v32 && v27)
        {
          int64_t v29 = (char *)&v32 - (unsigned char *)v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v26, 24);
          uint64_t v12 = (char *)v36;
          uint64_t v11 = (int *)((char *)v36 + v29);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v26, 24);
          uint64_t v11 = &v32;
          uint64_t v12 = (char *)v36;
        }
      }
      uint64_t v13 = &v12[24 * v37];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v37;
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v35);
  if (v35[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  }
  if (v44)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      unint64_t v17 = v43;
      uint64_t v18 = __p;
      if (v43 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      unint64_t v43 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v40;
    if (v40)
    {
      uint64_t v20 = v41;
      uint64_t v21 = v40;
      if (v41 != v40)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          *uint64_t v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v40;
      }
      long long v41 = v19;
      operator delete(v21);
    }
    if (v36 != v39) {
      free(v36);
    }
  }
  return v15;
}

BOOL mlir::Op<mlir::ModuleOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AffineScope,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::SymbolTable,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2)
      && mlir::detail::verifySymbolTable(a1, v3) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::UnrealizedConversionCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      int v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      long long v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *long long v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::UnrealizedConversionCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::UnrealizedConversionCastOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = a2;
  mlir::detail::UnrealizedConversionCastOpGenericAdaptorBase::UnrealizedConversionCastOpGenericAdaptorBase((uint64_t)v11, a2);
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  return mlir::UnrealizedConversionCastOp::fold((uint64_t *)&v10, v8, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v124 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      int64_t v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v133 = 87;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      unsigned int v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[449];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v133 = 86;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      unsigned long long v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v133 = 88;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      unint64_t v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      unint64_t v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v133 = 95;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      unint64_t v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = *(void *)(v11 + 2776);
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v133 = 99;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      unint64_t v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2912);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      unint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v133 = 93;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      unint64_t v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || *(void *)(v15 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::UnrealizedConversionCastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v3))
  {
    return 0;
  }
  uint64_t v4 = a1[9];
  if (a1[9]) {
    uint64_t v5 = (uint64_t)(a1 - 4);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
  }
  uint64_t v8 = a1;
  return mlir::UnrealizedConversionCastOp::verify((uint64_t **)&v8) != 0;
}

uint64_t mlir::Op<mlir::UnrealizedConversionCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

mlir::ResourceBlobManagerDialectInterface *mlir::ResourceBlobManagerDialectInterface::ResourceBlobManagerDialectInterface(mlir::ResourceBlobManagerDialectInterface *this, mlir::Dialect *a2)
{
  {
    unint64_t v15 = a2;
    a2 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ResourceBlobManagerDialectInterface]";
      unint64_t v17 = 91;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      uint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::ResourceBlobManagerDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      a2 = v15;
    }
  }
  uint64_t v3 = mlir::detail::TypeIDResolver<mlir::ResourceBlobManagerDialectInterface,void>::resolveTypeID(void)::id;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = v3;
  *(void *)this = &unk_1EC9C6F88;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EC9CFFE0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v5 = llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)(v4 + 24));
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0x6000000000;
  *((void *)this + 3) = v5;
  *((void *)this + 4) = v4;
  return this;
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::~ResourceBlobManagerDialectInterfaceBase(std::__shared_weak_count **this)
{
  unint64_t v1 = (mlir::GenericProgramPoint *)this;
  *this = (std::__shared_weak_count *)&unk_1EC9C6F88;
  uint64_t v2 = this[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::~ResourceBlobManagerDialectInterfaceBase(mlir::GenericProgramPoint *this)
{
  *(void *)this = &unk_1EC9C6F88;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  operator delete(v3);
}

void mlir::ResourceBlobManagerDialectInterface::~ResourceBlobManagerDialectInterface(std::__shared_weak_count **this)
{
  unint64_t v1 = (mlir::ResourceBlobManagerDialectInterface *)this;
  *this = (std::__shared_weak_count *)&unk_1EC9C6F88;
  uint64_t v2 = this[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
}

void mlir::ResourceBlobManagerDialectInterface::~ResourceBlobManagerDialectInterface(mlir::ResourceBlobManagerDialectInterface *this)
{
  *(void *)this = &unk_1EC9C6F88;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
  }
  operator delete(v3);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::DialectResourceBlobManager>::__on_zero_shared(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (void *)(a1 + 40);
      do
      {
        uint64_t v5 = *(llvm **)(*v4 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::StringMapEntry<mlir::DialectResourceBlobManager::BlobEntry>::Destroy<llvm::MallocAllocator>(v5);
        }
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)(a1 + 40));

  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)(a1 + 24));
}

void llvm::StringMapEntry<mlir::DialectResourceBlobManager::BlobEntry>::Destroy<llvm::MallocAllocator>(llvm *this)
{
  uint64_t v2 = *(void *)this;
  if (*((unsigned char *)this + 88))
  {
    unint64_t v3 = *((void *)this + 9);
    if (v3 >= 8)
    {
      uint64_t v4 = (char *)this + 48;
      uint64_t v5 = *((void *)this + 3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *((void *)this + 5);
      unint64_t v8 = (char *)this + 48;
      if ((v3 & 2) == 0) {
        unint64_t v8 = *(char **)v4;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v8, v5, v6, v7);
      unint64_t v9 = *((void *)this + 9);
      if (v9 >= 8)
      {
        if ((v9 & 4) != 0)
        {
          if ((v9 & 2) == 0) {
            uint64_t v4 = *(char **)v4;
          }
          (*(void (**)(char *))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
        }
        if ((v9 & 2) == 0) {
          llvm::deallocate_buffer(*((llvm **)this + 6), *((void **)this + 7));
        }
      }
    }
  }

  llvm::deallocate_buffer(this, (void *)(v2 + 97));
}

void anonymous namespace'::BuiltinOpAsmDialectInterface::~BuiltinOpAsmDialectInterface(_anonymous_namespace_::BuiltinOpAsmDialectInterface *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t anonymous namespace'::BuiltinOpAsmDialectInterface::getAlias(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4 = *(void **)(*(void *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    uint64_t v6 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v6) <= 2)
    {
      uint64_t v7 = "map";
      goto LABEL_10;
    }
    *(unsigned char *)(v6 + 2) = 112;
    __int16 v15 = 24941;
    goto LABEL_24;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
  {
    uint64_t v6 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v6) <= 2)
    {
      uint64_t v7 = "set";
      goto LABEL_10;
    }
    *(unsigned char *)(v6 + 2) = 116;
    __int16 v15 = 25971;
LABEL_24:
    *(_WORD *)uint64_t v6 = v15;
    uint64_t v16 = *((void *)a3 + 4) + 3;
    goto LABEL_25;
  }
  if (mlir::LocationAttr::classof(a2))
  {
    uint64_t v6 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v6) <= 2)
    {
      uint64_t v7 = "loc";
LABEL_10:
      unint64_t v8 = a3;
      size_t v9 = 3;
LABEL_11:
      llvm::raw_ostream::write(v8, v7, v9);
      return 1;
    }
    *(unsigned char *)(v6 + 2) = 99;
    __int16 v15 = 28524;
    goto LABEL_24;
  }
  uint64_t v11 = *(void *)(*(void *)a2 + 136);
  unint64_t v12 = 0x1E8EB8000uLL;
  {
    uint64_t v25 = v11;
    unint64_t v12 = 0x1E8EB8000;
    uint64_t v11 = v25;
    if (v17)
    {
      unint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      unint64_t v28 = 68;
      unint64_t v18 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v18) {
        unint64_t v19 = v18;
      }
      else {
        unint64_t v19 = v28;
      }
      int64_t v20 = &v27[v19];
      unint64_t v21 = v28 - v19;
      if (v28 - v19 >= 0x12) {
        uint64_t v22 = 18;
      }
      else {
        uint64_t v22 = v28 - v19;
      }
      unint64_t v23 = v21 - v22;
      if (v23 >= v23 - 1) {
        uint64_t v24 = v23 - 1;
      }
      else {
        uint64_t v24 = v23;
      }
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
      unint64_t v12 = 0x1E8EB8000;
      uint64_t v11 = v25;
    }
  }
  if (v11 == *(void *)(v12 + 1888)) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v26 = v13;
  if (!v13
    || *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26) + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    return 0;
  }
  uint64_t v14 = (void *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v14 <= 7uLL)
  {
    uint64_t v7 = "distinct";
    unint64_t v8 = a3;
    size_t v9 = 8;
    goto LABEL_11;
  }
  *uint64_t v14 = 0x74636E6974736964;
  uint64_t v16 = *((void *)a3 + 4) + 8;
LABEL_25:
  *((void *)a3 + 4) = v16;
  return 1;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v7 = v3;
  if (!v3 || (unint64_t)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v7) < 0x11) {
    return 0;
  }
  uint64_t v5 = *((void *)a3 + 4);
  if ((unint64_t)(*((void *)a3 + 3) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1819309428;
    *((void *)a3 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a3, "tuple", 5uLL);
  }
  return 1;
}

void anonymous namespace'::BuiltinOpAsmDialectInterface::declareResource(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 24);
  LOBYTE(v11[0]) = 0;
  char v14 = 0;
  mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::insert(v5, a2, a3, (uint64_t)v11, (uint64_t *)&v9);
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v10;
  *(unsigned char *)(a4 + 24) = 1;
  if (v14 && v13 >= 8)
  {
    uint64_t v6 = (v13 & 2) != 0 ? v12 : (llvm **)v12[0];
    (*(void (**)(llvm **, void, void, void))(v13 & 0xFFFFFFFFFFFFFFF8))(v6, v11[0], v11[1], v11[2]);
    char v7 = v13;
    if (v13 >= 8)
    {
      if ((v13 & 4) != 0)
      {
        if ((v13 & 2) != 0) {
          unint64_t v8 = v12;
        }
        else {
          unint64_t v8 = (llvm **)v12[0];
        }
        (*(void (**)(llvm **))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
      }
      if ((v7 & 2) == 0) {
        llvm::deallocate_buffer(v12[0], v12[1]);
      }
    }
  }
}

void anonymous namespace'::BuiltinOpAsmDialectInterface::getResourceKey(const void ***a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)a2;
  unint64_t v3 = **a1;
  if (!v3)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  size_t v4 = (size_t)(*a1)[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v5 = v4 | 7;
    }
    uint64_t v6 = v5 + 1;
    char v7 = operator new(v5 + 1);
    v2[1] = v4;
    void v2[2] = v6 | 0x8000000000000000;
    void *v2 = v7;
    uint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }
  memmove(v2, v3, v4);
LABEL_11:
  *((unsigned char *)v2 + v4) = 0;
}

uint64_t anonymous namespace'::BuiltinOpAsmDialectInterface::parseResource(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr, uint64_t, void *(*)@<X0>(size_t@<X1>, std::align_val_t@<X2>, uint64_t@<X8>), char *))(*(void *)a2 + 56))(v12, a2, llvm::function_ref<mlir::AsmResourceBlob ()(unsigned long,unsigned long)>::callback_fn<mlir::AsmParsedResourceEntry::parseAsBlob(void)::{lambda(unsigned long,unsigned long)#1}>, &v11);
  if (!v15) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = (int8x16_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  mlir::DialectResourceBlobManager::update(*(void *)(v4 + 24), v5, v6, (uint64_t)v12);
  if (v15 && v14 >= 8)
  {
    char v7 = (v14 & 2) != 0 ? v13 : (llvm **)v13[0];
    (*(void (**)(llvm **, void, void, void))(v14 & 0xFFFFFFFFFFFFFFF8))(v7, v12[0], v12[1], v12[2]);
    char v8 = v14;
    if (v14 >= 8)
    {
      if ((v14 & 4) != 0)
      {
        if ((v14 & 2) != 0) {
          long long v9 = v13;
        }
        else {
          long long v9 = (llvm **)v13[0];
        }
        (*(void (**)(llvm **))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))(v9);
      }
      if ((v8 & 2) == 0) {
        llvm::deallocate_buffer(v13[0], v13[1]);
      }
    }
  }
  return 1;
}

void anonymous namespace'::BuiltinOpAsmDialectInterface::buildResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void mlir::ResourceBlobManagerDialectInterfaceBase<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>::buildResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 24 * a4;
    uint64_t v6 = (uint64_t *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      {
        uint64_t v17 = v7;
        uint64_t v7 = v17;
        if (v9)
        {
          unint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
          unint64_t v19 = 103;
          unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
          if (v19 >= v10) {
            unint64_t v11 = v10;
          }
          else {
            unint64_t v11 = v19;
          }
          unint64_t v12 = &v18[v11];
          unint64_t v13 = v19 - v11;
          if (v19 - v11 >= 0x12) {
            uint64_t v14 = 18;
          }
          else {
            uint64_t v14 = v19 - v11;
          }
          unint64_t v15 = v13 - v14;
          if (v15 >= v15 - 1) {
            uint64_t v16 = v15 - 1;
          }
          else {
            uint64_t v16 = v15;
          }
          mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
          uint64_t v7 = v17;
        }
      }
      if (v7 == mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id)
      {
        uint64_t v8 = *(v6 - 1);
        if (*(unsigned char *)(v8 + 80)) {
          (*(void (**)(uint64_t, void, void, void, void, void))(*(void *)a2 + 32))(a2, *(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(unsigned int *)(v8 + 32));
        }
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
}

BOOL _ZNSt3__112__equal_implB8nn180100IN4llvm6detail27indexed_accessor_range_baseIN4mlir11ResultRangeEPNS4_6detail12OpResultImplENS4_8OpResultES9_S9_E8iteratorESB_NS3_INS4_12OperandRangeEPNS4_9OpOperandENS4_5ValueESF_SF_E8iteratorESH_NS_10__equal_toENS_10__identityESJ_EEbT_T0_T1_T2_RT3_RT4_RT5_(mlir::detail::OpResultImpl *this, uint64_t a2, mlir::detail::OpResultImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a2;
  BOOL v15 = this == a3;
  if (this == a3 && (uint64_t v16 = a6, a2 == a4))
  {
LABEL_3:
    if (a5 != a7) {
      return 0;
    }
  }
  else
  {
    if (a5 != a7)
    {
      if (this == a3)
      {
        uint64_t v16 = a6 + a4 - a2;
        unint64_t v18 = (void *)(a5 + 32 * a6 + 24);
        while (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) == *v18)
        {
          ++v13;
          v18 += 4;
          if (a4 == v13) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2);
        uint64_t v22 = a5 + 32 * a6;
        if (NextResultAtOffset == *(void *)(v22 + 24))
        {
          unint64_t v23 = (uint64_t *)(v22 + 56);
          uint64_t v24 = v13 + 1;
          do
          {
            uint64_t v25 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v24);
            uint64_t v26 = *v23;
            v23 += 4;
            ++v24;
          }
          while (v25 == v26);
        }
      }
      return 0;
    }
    if (this != a3)
    {
      uint64_t v27 = a8 - a6;
      if (a8 != a6)
      {
        unint64_t v28 = (void *)(a5 + 32 * a6 + 24);
        while (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) == *v28)
        {
          ++v13;
          v28 += 4;
          if (!--v27) {
            goto LABEL_25;
          }
        }
      }
      return 0;
    }
    uint64_t v16 = a6 + a4 - a2;
    unint64_t v19 = (void *)(a5 + 32 * a6 + 24);
    uint64_t v20 = a8 - a6;
    while (v20)
    {
      if (mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v13) != *v19) {
        return 0;
      }
      ++v13;
      v19 += 4;
      --v20;
      if (a4 == v13) {
        goto LABEL_3;
      }
    }
LABEL_25:
    uint64_t v16 = a8;
    if (!v15 || v13 != a4) {
      return 0;
    }
  }
  return v16 == a8;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (const void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  int v33 = *(const void ***)(*(void *)(a1[2] + 8) + 8);
  uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    int v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      unint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          unint64_t v11 = (const void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      unint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    unint64_t v21 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v22 = (void **)__p[1];
      unint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        unint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          unint64_t v28 = (void *)*--v25;
          uint64_t v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

const char *mlir::builtin_dialect_detail::addBytecodeInterface(mlir::builtin_dialect_detail *this, mlir::BuiltinDialect *a2)
{
  unint64_t v3 = (char *)operator new(0x18uLL);
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    uint64_t v16 = v3;
    unint64_t v4 = 0x1E8EB8000;
    int v8 = v7;
    unint64_t v3 = v16;
    if (v8)
    {
      uint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeDialectInterface]";
      unint64_t v18 = 80;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v18;
      }
      unint64_t v11 = &v17[v10];
      unint64_t v12 = v18 - v10;
      if (v18 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v18 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      unint64_t v4 = 0x1E8EB8000;
      unint64_t v3 = v16;
    }
  }
  uint64_t v5 = *(void *)(v4 + 2768);
  *((void *)v3 + 1) = this;
  *((void *)v3 + 2) = v5;
  *(void *)unint64_t v3 = &unk_1EC99C0D8;
  uint64_t v17 = v3;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  __n128 result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
  }
  return result;
}

void anonymous namespace'::BuiltinDialectBytecodeInterface::~BuiltinDialectBytecodeInterface(_anonymous_namespace_::BuiltinDialectBytecodeInterface *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

void *anonymous namespace'::BuiltinDialectBytecodeInterface::readAttribute(mlir::DialectInterface *a1, uint64_t a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  uint64_t v99 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v99))
  {
    switch(v99)
    {
      case 0:
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x600000000;
        *(void *)uint64_t v116 = a2;
        if (!mlir::DialectBytecodeReader::readList<mlir::Attribute,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::Attribute>(llvm::SmallVectorImpl<mlir::Attribute> &)::{lambda(mlir::Attribute&)#1}>(a2, (uint64_t)v106, v116))goto LABEL_149; {
        uint64_t v5 = mlir::ArrayAttr::get(Context, *(uint64_t *)v106, *(unsigned int *)&v106[8]);
        }
        goto LABEL_150;
      case 1:
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x300000000;
        unint64_t v103 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a2 + 72))(a2, &v103)) {
          goto LABEL_149;
        }
        unint64_t v6 = v103;
        if (v103 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v103, 16);
          unint64_t v6 = v103;
        }
        if (!v6)
        {
          unsigned int v11 = *(_DWORD *)&v106[8];
LABEL_157:
          uint64_t v5 = mlir::DictionaryAttr::get(Context, *(uint64_t **)v106, v11);
          goto LABEL_150;
        }
        uint64_t v7 = 0;
        while (1)
        {
          *(void *)&long long v104 = 0;
          uint64_t v100 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)&v104)
            || !(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a2 + 48))(a2, &v100))
          {
            goto LABEL_149;
          }
          mlir::NamedAttribute::NamedAttribute(v116, v104, (uint64_t)v100);
          uint64_t v8 = *(void *)&v116[8];
          int v9 = *(_DWORD *)&v106[8];
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            uint64_t v12 = *(void *)&v116[8];
            uint64_t v13 = *(void *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 16);
            unint64_t v14 = (void *)(*(void *)v106 + 16 * *(unsigned int *)&v106[8]);
            *unint64_t v14 = v13;
            v14[1] = v12;
            unsigned int v11 = ++*(_DWORD *)&v106[8];
            if (++v7 >= v103) {
              goto LABEL_157;
            }
          }
          else
          {
            unint64_t v10 = (void *)(*(void *)v106 + 16 * *(unsigned int *)&v106[8]);
            void *v10 = *(void *)v116;
            v10[1] = v8;
            unsigned int v11 = v9 + 1;
            *(_DWORD *)&v106[8] = v11;
            if (++v7 >= v103) {
              goto LABEL_157;
            }
          }
        }
      case 2:
        *(void *)uint64_t v116 = 0;
        *(void *)&v116[8] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 104))(a2, v116)) {
          return 0;
        }
        LOWORD(v108) = 261;
        *(void *)uint64_t v106 = *(void *)v116;
        *(void *)&v106[8] = *(void *)&v116[8];
        return (void *)mlir::StringAttr::get(Context, (mlir::MLIRContext *)v106);
      case 3:
        *(void *)uint64_t v116 = 0;
        *(void *)&v116[8] = 0;
        *(void *)&long long v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 104))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 64))(a2, &v104))
        {
          return 0;
        }
        LOWORD(v108) = 261;
        *(void *)uint64_t v106 = *(void *)v116;
        *(void *)&v106[8] = *(void *)&v116[8];
        return (void *)mlir::StringAttr::get((char **)v106, v104);
      case 4:
        *(void *)uint64_t v106 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106)) {
          return 0;
        }
        return (void *)mlir::SymbolRefAttr::get(*(uint64_t *)v106);
      case 5:
        *(void *)&long long v104 = 0;
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x600000000;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)&v104)) {
          goto LABEL_192;
        }
        *(void *)uint64_t v116 = a2;
        if (!mlir::DialectBytecodeReader::readList<mlir::FlatSymbolRefAttr,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::FlatSymbolRefAttr>(llvm::SmallVectorImpl<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::FlatSymbolRefAttr&)#1}>(a2, (uint64_t)v106, (uint64_t *)v116))goto LABEL_192; {
        uint64_t v5 = mlir::SymbolRefAttr::get(v104, *(uint64_t *)v106, *(unsigned int *)&v106[8]);
        }
        int v34 = *(void **)v106;
        if (*(unsigned char **)v106 == &v106[16]) {
          return (void *)v5;
        }
        goto LABEL_193;
      case 6:
        *(void *)uint64_t v106 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 64))(a2, v106)) {
          return 0;
        }
        return (void *)mlir::TypeAttr::get(*(uint64_t *)v106);
      case 7:
        return (void *)mlir::UnitAttr::get(Context, v4);
      case 8:
        unint64_t v103 = 0;
        LOBYTE(v100) = 0;
        unsigned __int8 v102 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a2 + 64))(a2, &v103)) {
          return 0;
        }
        uint64_t v35 = v103;
        __int16 v36 = *(void **)(*(void *)v103 + 136);
        if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
          unint64_t v37 = v103;
        }
        else {
          unint64_t v37 = 0;
        }
        *(void *)uint64_t v106 = v37;
        if (v37)
        {
          uint64_t Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v106);
          int v39 = 0;
        }
        else if (v36 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          int v39 = 0;
          uint64_t Width = 64;
        }
        else
        {
          __int16 v117 = 257;
          (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned char *))(*(void *)a2 + 16))(v106, a2, v116);
          if (*(void *)v106)
          {
            LODWORD(v104) = 3;
            *((void *)&v104 + 1) = "expected integer or index type for IntegerAttr, but got: ";
            uint64_t v105 = 57;
            unint64_t v64 = (char *)&v104;
            unint64_t v65 = (char *)v107;
            if (v108 >= v109)
            {
              unint64_t v93 = v108 + 1;
              if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
              {
                int64_t v97 = (char *)&v104 - (unsigned char *)v107;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
                unint64_t v65 = (char *)v107;
                unint64_t v64 = (char *)v107 + v97;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
                unint64_t v64 = (char *)&v104;
                unint64_t v65 = (char *)v107;
              }
            }
            uint64_t v66 = &v65[24 * v108];
            long long v67 = *(_OWORD *)v64;
            *((void *)v66 + 2) = *((void *)v64 + 2);
            *(_OWORD *)uint64_t v66 = v67;
            ++v108;
            if (*(void *)v106)
            {
              uint64_t v68 = (char *)&v104;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v35);
              int v69 = (char *)v107;
              if (v108 >= v109)
              {
                unint64_t v94 = v108 + 1;
                if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
                {
                  int64_t v98 = (char *)&v104 - (unsigned char *)v107;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v94, 24);
                  int v69 = (char *)v107;
                  uint64_t v68 = (char *)v107 + v98;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v94, 24);
                  uint64_t v68 = (char *)&v104;
                  int v69 = (char *)v107;
                }
              }
              int v70 = &v69[24 * v108];
              long long v71 = *(_OWORD *)v68;
              *((void *)v70 + 2) = *((void *)v68 + 2);
              *(_OWORD *)int v70 = v71;
              ++v108;
              if (*(void *)v106) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
              }
            }
          }
          if (v115)
          {
            unint64_t v72 = (void **)__p;
            if (__p)
            {
              unint64_t v73 = v114;
              unint64_t v74 = __p;
              if (v114 != __p)
              {
                do
                  unint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
                while (v73 != v72);
                unint64_t v74 = __p;
              }
              uint64_t v114 = v72;
              operator delete(v74);
            }
            uint64_t v75 = v111;
            if (v111)
            {
              unint64_t v76 = v112;
              uint64_t v77 = v111;
              if (v112 != v111)
              {
                do
                {
                  int v79 = (void *)*--v76;
                  int v78 = v79;
                  *unint64_t v76 = 0;
                  if (v79) {
                    operator delete[](v78);
                  }
                }
                while (v76 != v75);
                uint64_t v77 = v111;
              }
              uint64_t v112 = v75;
              operator delete(v77);
            }
            if (v107 != v110) {
              free(v107);
            }
          }
          uint64_t Width = 0;
          int v39 = v102;
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 88))(v106, a2, Width);
        int v88 = v106[16];
        if (v39 == v106[16])
        {
          if (!v39) {
            return 0;
          }
          if (v101 >= 0x41 && v100) {
            operator delete[](v100);
          }
          uint64_t v100 = *(void **)v106;
          unsigned int v101 = *(_DWORD *)&v106[8];
          goto LABEL_225;
        }
        if (!v39)
        {
          unsigned int v101 = *(_DWORD *)&v106[8];
          uint64_t v100 = *(void **)v106;
          unsigned __int8 v102 = 1;
LABEL_225:
          uint64_t v5 = mlir::IntegerAttr::get(v103, (llvm::APInt *)&v100);
          if (v102 && v101 >= 0x41 && v100) {
            operator delete[](v100);
          }
          return (void *)v5;
        }
        if (v101 >= 0x41 && v100)
        {
          operator delete[](v100);
          int v88 = v106[16];
        }
        if (v88 && *(_DWORD *)&v106[8] >= 0x41u && *(void *)v106) {
          operator delete[](*(void **)v106);
        }
        break;
      case 9:
        uint64_t v100 = 0;
        v116[0] = 0;
        LOBYTE(v117) = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a2 + 64))(a2, &v100)) {
          return 0;
        }
        uint64_t v15 = *(void **)(*(void *)v100 + 136);
        BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
           || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
        BOOL v17 = v16 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
        BOOL v18 = v17 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
        BOOL v19 = v18 || v15 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
        BOOL v20 = v19 || v15 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
        BOOL v21 = v20 || v15 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
        BOOL v22 = v21 || v15 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
        BOOL v23 = v22 || v15 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
        BOOL v24 = v23 || v15 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
        BOOL v25 = v24 || v15 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
        if (!v25 && v15 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id) {
          return 0;
        }
        *(void *)&long long v104 = v100;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v104);
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void *))(*(void *)a2 + 96))(v106, a2, FloatSemantics);
        std::__optional_storage_base<llvm::APFloat,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<llvm::APFloat,false>>(v116, (uint64_t)v106);
        if ((_BYTE)v108)
        {
          unint64_t v29 = *(void **)&v106[8];
          if (llvm::APFloatBase::PPCDoubleDouble(v28) == v29) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v106[8]);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v106[8]);
          }
        }
        uint64_t v86 = (llvm::APFloatBase *)mlir::FloatAttr::get((uint64_t)v100, (uint64_t)v116);
        uint64_t v5 = (uint64_t)v86;
        if ((_BYTE)v117)
        {
          int v87 = *(void **)&v116[8];
          if (llvm::APFloatBase::PPCDoubleDouble(v86) == v87) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v116[8]);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v116[8]);
          }
        }
        return (void *)v5;
      case 10:
        *(void *)uint64_t v106 = 0;
        *(void *)uint64_t v116 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
        {
          return 0;
        }
        return (void *)mlir::CallSiteLoc::get(*(uint64_t *)v106, *(uint64_t *)v116);
      case 11:
        *(void *)uint64_t v106 = 0;
        *(void *)uint64_t v116 = 0;
        *(void *)&long long v104 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106)
          || !(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 72))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v104))
        {
          return 0;
        }
        return (void *)mlir::FileLineColLoc::get(*(uint64_t *)v106, *(unsigned int *)v116, v104);
      case 12:
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x600000000;
        *(void *)&long long v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v104)) {
          goto LABEL_149;
        }
        uint64_t v30 = v104;
        if ((unint64_t)v104 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v104, 8);
          uint64_t v30 = v104;
        }
        if (!v30)
        {
          unsigned int v32 = *(_DWORD *)&v106[8];
LABEL_159:
          mlir::FusedLoc::get(*(uint64_t ***)v106, (mlir::MLIRContext *)v32, 0, Context);
        }
        uint64_t v31 = 0;
        while (1)
        {
          *(void *)uint64_t v116 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116)) {
            goto LABEL_149;
          }
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            uint64_t v33 = *(void *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 8);
            *(void *)(*(void *)v106 + 8 * *(unsigned int *)&v106[8]) = v33;
          }
          else
          {
            *(void *)(*(void *)v106 + 8 * *(unsigned int *)&v106[8]) = *(void *)v116;
          }
          unsigned int v32 = ++*(_DWORD *)&v106[8];
          if (++v31 >= (unint64_t)v104) {
            goto LABEL_159;
          }
        }
      case 13:
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x600000000;
        uint64_t v100 = 0;
        *(void *)&long long v104 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v104)) {
          goto LABEL_149;
        }
        uint64_t v40 = v104;
        if ((unint64_t)v104 > *(unsigned int *)&v106[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], v104, 8);
          uint64_t v40 = v104;
        }
        if (!v40) {
          goto LABEL_147;
        }
        uint64_t v41 = 0;
        while (1)
        {
          *(void *)uint64_t v116 = 0;
          if (!mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116)) {
            break;
          }
          if (*(_DWORD *)&v106[8] >= *(_DWORD *)&v106[12])
          {
            uint64_t v42 = *(void *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], *(unsigned int *)&v106[8] + 1, 8);
            *(void *)(*(void *)v106 + 8 * *(unsigned int *)&v106[8]) = v42;
          }
          else
          {
            *(void *)(*(void *)v106 + 8 * *(unsigned int *)&v106[8]) = *(void *)v116;
          }
          ++*(_DWORD *)&v106[8];
          if (++v41 >= (unint64_t)v104)
          {
LABEL_147:
            if ((*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a2 + 48))(a2, &v100))
            {
              uint64_t v5 = mlir::FusedLoc::get(Context, *(uint64_t *)v106, *(unsigned int *)&v106[8], (uint64_t)v100);
              goto LABEL_150;
            }
            break;
          }
        }
LABEL_149:
        uint64_t v5 = 0;
LABEL_150:
        int v34 = *(void **)v106;
        if (*(unsigned char **)v106 != &v106[16]) {
LABEL_193:
        }
          free(v34);
        return (void *)v5;
      case 14:
        *(void *)uint64_t v106 = 0;
        *(void *)uint64_t v116 = 0;
        if (!mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a2, (uint64_t *)v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(a2, (uint64_t *)v116))
        {
          return 0;
        }
        return (void *)mlir::NameLoc::get(*(uint64_t *)v106, *(uint64_t *)v116);
      case 15:
        return (void *)mlir::UnknownLoc::get(Context, v4);
      case 16:
        long long v104 = 0uLL;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, &v104)) {
          return 0;
        }
        mlir::DialectBytecodeReader::readResourceHandle<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(a2, (uint64_t)v106);
        if (!(_BYTE)v107) {
          return 0;
        }
        *(_OWORD *)&v116[1] = *(_OWORD *)&v106[1];
        *(void *)&v116[16] = *(void *)&v106[16];
        v116[0] = v106[0];
        return (void *)mlir::DenseResourceElementsAttr::get(v104, *((uint64_t *)&v104 + 1), (long long *)v116);
      case 17:
        *(void *)uint64_t v116 = 0;
        *(void *)&long long v104 = 0;
        *(void *)uint64_t v106 = 0;
        *(void *)&v106[8] = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 64))(a2, v116)
          || !(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v104)
          || !(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 112))(a2, v106))
        {
          return 0;
        }
        return (void *)mlir::DenseArrayAttr::get(*(uint64_t *)v116, v104, *(uint64_t *)v106, *(uint64_t *)&v106[8]);
      case 18:
        *(void *)uint64_t v106 = 0;
        *(void *)&v106[8] = 0;
        *(void *)uint64_t v116 = 0;
        *(void *)&v116[8] = 0;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, v106)
          || !(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 112))(a2, v116))
        {
          return 0;
        }
        return (void *)mlir::DenseElementsAttr::getFromRawBuffer(*(void *)v106, *(void *)&v106[8], *(void *)v116, *(void *)&v116[8], v43, v44, v45);
      case 19:
        long long v104 = 0uLL;
        uint64_t v100 = 0;
        *(void *)uint64_t v106 = &v106[16];
        *(void *)&v106[8] = 0x300000000;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, &v104)
          || !(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a2 + 72))(a2, &v100))
        {
          goto LABEL_192;
        }
        *(_OWORD *)uint64_t v116 = v104;
        if (v100)
        {
          unint64_t NumElements = 1;
        }
        else
        {
          uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v116);
          unint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v81);
        }
        uint64_t v82 = *(unsigned int *)&v106[8];
        if (NumElements != *(unsigned int *)&v106[8])
        {
          if (NumElements >= *(unsigned int *)&v106[8])
          {
            if (NumElements > *(unsigned int *)&v106[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v106, &v106[16], NumElements, 16);
              uint64_t v82 = *(unsigned int *)&v106[8];
            }
            if (NumElements != v82) {
              bzero((void *)(*(void *)v106 + 16 * v82), 16 * (NumElements - v82));
            }
          }
          LODWORD(v82) = NumElements;
          *(_DWORD *)&v106[8] = NumElements;
          unint64_t NumElements = NumElements;
        }
        uint64_t v83 = *(void *)v106;
        if (v82)
        {
          uint64_t v84 = 16 * NumElements;
          do
          {
            if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, v83))
            {
LABEL_192:
              uint64_t v5 = 0;
              int v34 = *(void **)v106;
              if (*(unsigned char **)v106 == &v106[16]) {
                return (void *)v5;
              }
              goto LABEL_193;
            }
            v83 += 16;
            v84 -= 16;
          }
          while (v84);
          uint64_t v83 = *(void *)v106;
          uint64_t v85 = *(unsigned int *)&v106[8];
        }
        else
        {
          uint64_t v85 = 0;
        }
        uint64_t v5 = mlir::DenseStringElementsAttr::get(v104, *((uint64_t *)&v104 + 1), v83, v85);
        int v34 = *(void **)v106;
        if (*(unsigned char **)v106 != &v106[16]) {
          goto LABEL_193;
        }
        return (void *)v5;
      case 20:
        *(void *)uint64_t v106 = 0;
        *(void *)&v106[8] = 0;
        *(void *)uint64_t v116 = 0;
        *(void *)&long long v104 = 0;
        if (!mlir::DialectBytecodeReader::readType<mlir::ShapedType>(a2, v106)
          || !mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a2, (uint64_t *)v116)|| !mlir::DialectBytecodeReader::readAttribute<mlir::DenseElementsAttr>(a2, (uint64_t *)&v104))
        {
          return 0;
        }
        return (void *)mlir::SparseElementsAttr::get(*(uint64_t *)v106, *(uint64_t *)&v106[8], *(uint64_t *)v116, v104);
      case 21:
        *(void *)uint64_t v106 = 0;
        if (!(*(unsigned __int8 (**)(uint64_t, unsigned char *))(*(void *)a2 + 48))(a2, v106)) {
          return 0;
        }
        return mlir::detail::DistinctAttributeUniquer::get<mlir::DistinctAttr,mlir::Attribute &>((uint64_t)Context, (uint64_t *)v106);
      default:
        __int16 v117 = 257;
        (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned char *))(*(void *)a2 + 16))(v106, a2, v116);
        if (*(void *)v106)
        {
          LODWORD(v104) = 3;
          *((void *)&v104 + 1) = "unknown attribute code: ";
          uint64_t v105 = 24;
          unsigned long long v46 = (char *)&v104;
          uint64_t v47 = (char *)v107;
          if (v108 >= v109)
          {
            unint64_t v90 = v108 + 1;
            if (v107 <= &v104 && (char *)v107 + 24 * v108 > (char *)&v104)
            {
              int64_t v95 = (char *)&v104 - (unsigned char *)v107;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
              uint64_t v47 = (char *)v107;
              unsigned long long v46 = (char *)v107 + v95;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
              unsigned long long v46 = (char *)&v104;
              uint64_t v47 = (char *)v107;
            }
          }
          unsigned __int8 v48 = &v47[24 * v108];
          long long v49 = *(_OWORD *)v46;
          *((void *)v48 + 2) = *((void *)v46 + 2);
          *(_OWORD *)unsigned __int8 v48 = v49;
          uint64_t v50 = ++v108;
          if (*(void *)v106)
          {
            LODWORD(v104) = 5;
            *((void *)&v104 + 1) = v99;
            int v51 = (char *)&v104;
            int v52 = (char *)v107;
            if (v50 >= v109)
            {
              unint64_t v91 = v50 + 1;
              BOOL v92 = (char *)v107 + 24 * v50 > (char *)&v104;
              if (v107 <= &v104 && v92)
              {
                int64_t v96 = (char *)&v104 - (unsigned char *)v107;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
                int v52 = (char *)v107;
                int v51 = (char *)v107 + v96;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
                int v51 = (char *)&v104;
                int v52 = (char *)v107;
              }
            }
            unint64_t v53 = &v52[24 * v108];
            long long v54 = *(_OWORD *)v51;
            *((void *)v53 + 2) = *((void *)v51 + 2);
            *(_OWORD *)unint64_t v53 = v54;
            ++v108;
            if (*(void *)v106) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
            }
          }
        }
        if (v115)
        {
          unint64_t v55 = (void **)__p;
          if (__p)
          {
            unint64_t v56 = v114;
            uint64_t v57 = __p;
            if (v114 != __p)
            {
              do
                unint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
              while (v56 != v55);
              uint64_t v57 = __p;
            }
            uint64_t v114 = v55;
            operator delete(v57);
          }
          unint64_t v58 = v111;
          if (v111)
          {
            uint64_t v59 = v112;
            int v60 = v111;
            if (v112 != v111)
            {
              do
              {
                unint64_t v62 = (void *)*--v59;
                int v61 = v62;
                void *v59 = 0;
                if (v62) {
                  operator delete[](v61);
                }
              }
              while (v59 != v58);
              int v60 = v111;
            }
            uint64_t v112 = v58;
            operator delete(v60);
          }
          if (v107 != v110) {
            free(v107);
          }
        }
        return 0;
    }
  }
  return 0;
}